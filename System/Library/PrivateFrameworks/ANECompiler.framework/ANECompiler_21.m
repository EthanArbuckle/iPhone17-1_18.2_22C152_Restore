void mlir::memref::TransposeOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"permutation", 11, *a2);
  }
}

BOOL mlir::memref::TransposeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v6, (void **)"permutation", (const char *)0xB, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1 || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    uint64_t v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: AffineMap attribute";
        uint64_t v31 = 51;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::memref::TransposeOp::readProperties(uint64_t a1, uint64_t a2)
{
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::memref::TransposeOp::verifyInvariantsImpl(mlir::memref::TransposeOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (void **)"permutation", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (void **)"requires attribute 'permutation'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      v7 = __p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      long long v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::memref::ViewOp::verifyInvariantsImpl(mlir::memref::ViewOp *this)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_32;
  }
  v63[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v63[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v4 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 8)
    || (uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v56 = v3,
        uint64_t v57 = v5,
        !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
    || (uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v60 = v3,
        v61 = (const char *)v6,
        mlir::ShapedType::getShape((mlir::ShapedType *)&v60),
        v7 != 1))
  {
LABEL_32:
    __int16 v58 = 261;
    v56 = (void **)"operand";
    uint64_t v57 = 7;
    mlir::Operation::emitOpError(v2, &v56, (uint64_t)v63);
    if (v63[0])
    {
      LODWORD(v60) = 3;
      v61 = " #";
      uint64_t v62 = 2;
      v8 = &v60;
      v9 = (char *)v64;
      if (v65 >= v66)
      {
        unint64_t v46 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          int64_t v52 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v46, 24);
          v9 = (char *)v64;
          v8 = (void ***)((char *)v64 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v46, 24);
          v8 = &v60;
          v9 = (char *)v64;
        }
      }
      long long v10 = &v9[24 * v65];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = v8[2];
      *(_OWORD *)long long v10 = v11;
      uint64_t v12 = ++v65;
      if (v63[0])
      {
        LODWORD(v60) = 5;
        v61 = 0;
        uint64_t v13 = &v60;
        uint64_t v14 = (char *)v64;
        if (v12 >= v66)
        {
          unint64_t v47 = v12 + 1;
          BOOL v48 = (char *)v64 + 24 * v12 > (char *)&v60;
          if (v64 <= &v60 && v48)
          {
            int64_t v53 = (char *)&v60 - (unsigned char *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v14 = (char *)v64;
            uint64_t v13 = (void ***)((char *)v64 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v13 = &v60;
            uint64_t v14 = (char *)v64;
          }
        }
        uint64_t v15 = &v14[24 * v65];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        uint64_t v17 = ++v65;
        if (v63[0])
        {
          LODWORD(v60) = 3;
          v61 = " must be 1D memref of 8-bit signless integer values, but got ";
          uint64_t v62 = 61;
          v18 = &v60;
          v19 = (char *)v64;
          if (v17 >= v66)
          {
            unint64_t v49 = v17 + 1;
            BOOL v50 = (char *)v64 + 24 * v17 > (char *)&v60;
            if (v64 <= &v60 && v50)
            {
              int64_t v54 = (char *)&v60 - (unsigned char *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v19 = (char *)v64;
              v18 = (void ***)((char *)v64 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v18 = &v60;
              v19 = (char *)v64;
            }
          }
          uint64_t v20 = &v19[24 * v65];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = v18[2];
          *(_OWORD *)uint64_t v20 = v21;
          ++v65;
          if (v63[0])
          {
            uint64_t v22 = &v60;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, (uint64_t)v3);
            uint64_t v23 = (char *)v64;
            if (v65 >= v66)
            {
              unint64_t v51 = v65 + 1;
              if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
              {
                int64_t v55 = (char *)&v60 - (unsigned char *)v64;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
                uint64_t v23 = (char *)v64;
                uint64_t v22 = (void ***)((char *)v64 + v55);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
                uint64_t v22 = &v60;
                uint64_t v23 = (char *)v64;
              }
            }
            v24 = &v23[24 * v65];
            long long v25 = *(_OWORD *)v22;
            *((void *)v24 + 2) = v22[2];
            *(_OWORD *)v24 = v25;
            ++v65;
          }
        }
      }
    }
    char v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
    if (v63[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
    }
    if (v72)
    {
      int64_t v27 = __p;
      if (__p)
      {
        int64_t v28 = v71;
        v29 = __p;
        if (v71 != __p)
        {
          do
            int64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v71 = v27;
        operator delete(v29);
      }
      v30 = v68;
      if (v68)
      {
        uint64_t v31 = v69;
        __int16 v32 = v68;
        if (v69 != v68)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          __int16 v32 = v68;
        }
        v69 = v30;
        operator delete(v32);
      }
      if (v64 != v67) {
        free(v64);
      }
    }
    if (!v26) {
      return 0;
    }
  }
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))return 0; {
  uint64_t v35 = *(void *)this;
  }
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v37 = -2;
    uint64_t v38 = 64;
LABEL_37:
    uint64_t v39 = 0;
    uint64_t v40 = v38 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v40 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v39 + 2))
    {
      ++v39;
      v40 += 32;
      if (v37 == v39)
      {
        uint64_t v35 = *(void *)this;
        goto LABEL_41;
      }
    }
    return 0;
  }
  uint64_t v36 = *(unsigned int *)(v35 + 68);
  uint64_t v37 = v36 - 2;
  if (v36 != 2)
  {
    uint64_t v38 = *(void *)(v35 + 72) + 64;
    goto LABEL_37;
  }
LABEL_41:
  int v41 = *(_DWORD *)(v35 + 36);
  uint64_t v42 = v35 - 16;
  if (v41) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::memref::ViewOp::parse(uint64_t a1, uint64_t a2)
{
  v26[4] = *MEMORY[0x263EF8340];
  memset(v26, 0, 24);
  v15[0] = (uint64_t)v26;
  v15[1] = 1;
  memset(v25, 0, 24);
  uint64_t v21 = 0;
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  v14[0] = &v21;
  v14[1] = 1;
  __src = &v20;
  uint64_t v19 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v26, 1)) {
    goto LABEL_20;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1)) {
    goto LABEL_20;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1)) {
    goto LABEL_20;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v22, 0, 1, 0xFFFFFFFFLL))goto LABEL_20; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
  }
    goto LABEL_20;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_20;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_20;
  }
  v16[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v16)) {
    goto LABEL_20;
  }
  uint64_t v21 = v16[0];
  __int16 v17 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, v16))goto LABEL_20; {
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
  }
    goto LABEL_20;
  uint64_t v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v5, v6);
  mlir::OperationState::addTypes(a2, __src, v19);
  uint64_t v8 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v14, v4, v8)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v25, IndexType, v8))
  {
    goto LABEL_20;
  }
  if (v23)
  {
    v9 = (char *)v22;
    uint64_t v10 = 32 * v23;
    uint64_t v11 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, v8))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_21;
      }
    }
LABEL_20:
    uint64_t v11 = 0;
LABEL_21:
    uint64_t v12 = __src;
    if (__src != &v20) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  uint64_t v11 = 1;
  uint64_t v12 = __src;
  if (__src != &v20) {
LABEL_22:
  }
    free(v12);
LABEL_23:
  if (v22 != v24) {
    free(v22);
  }
  return v11;
}

void mlir::memref::ViewOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v43[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
  }
  else
  {
    unsigned char *v7 = 91;
    ++*((void *)v6 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "]", 1uLL);
  }
  else
  {
    unsigned char *v9 = 93;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "[", 1uLL);
    uint64_t v12 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned char *v11 = 91;
    ++*((void *)v10 + 4);
    uint64_t v12 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_12:
      uint64_t v13 = *((unsigned int *)v12 + 17);
      uint64_t v14 = *((void *)v12 + 9);
      uint64_t v15 = v13 - 2;
      goto LABEL_13;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = -2;
LABEL_13:
  uint64_t v16 = v14 + 64;
  __int16 v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v41 = ", ";
  uint64_t v42 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v16, 0, v16, v15, (uint64_t)a2, v17, (uint64_t)&v41);
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "]", 1uLL);
  }
  else
  {
    unsigned char *v19 = 93;
    ++*((void *)v18 + 4);
  }
  int v41 = v43;
  uint64_t v42 = 0x200000000;
  uint64_t v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v38[0] = mlir::Operation::getAttrDictionary(v20);
    uint64_t v21 = (mlir::ArrayAttr *)v38;
  }
  else
  {
    uint64_t v21 = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v21);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v41, v42);
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *long long v25 = 32;
  }
  char v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if (*((unsigned char **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    *int64_t v27 = 58;
    ++*((void *)v26 + 4);
  }
  int64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v29 = (unsigned char *)*((void *)v28 + 4);
  if ((unint64_t)v29 >= *((void *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((void *)v28 + 4) = v29 + 1;
    unsigned char *v29 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  __int16 v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (_WORD *)*((void *)v32 + 4);
  if (*((void *)v32 + 3) - (void)v33 > 1uLL)
  {
    *uint64_t v33 = 28532;
    *((void *)v32 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v32, "to", 2uLL);
  }
  uint64_t v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v35 = (unsigned char *)*((void *)v34 + 4);
  if ((unint64_t)v35 >= *((void *)v34 + 3))
  {
    llvm::raw_ostream::write(v34, 32);
  }
  else
  {
    *((void *)v34 + 4) = v35 + 1;
    unsigned char *v35 = 32;
  }
  uint64_t v36 = *((unsigned int *)*this + 9);
  uint64_t v37 = (char *)*this - 16;
  if (!v36) {
    uint64_t v37 = 0;
  }
  uint64_t v39 = v37;
  uint64_t v40 = v36;
  mlir::OperandRange::getTypes((uint64_t *)&v39, v38);
  uint64_t v39 = ", ";
  uint64_t v40 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v38[0], v38[1], v38[2], v38[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v39);
  if (v41 != v43) {
    free(v41);
  }
}

uint64_t mlir::memref::detail::SubViewOpGenericAdaptorBase::SubViewOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v5;
  long long v9 = *(_OWORD *)(v5 + 16);
  *(void *)(a1 + 56) = *(void *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.subview", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::SubViewOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n)) {
        goto LABEL_11;
      }
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(void *)__s1 == 0x6F5F636974617473 && *(void *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        uint64_t result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        uint64_t result = a2[2];
      }
      else
      {
LABEL_11:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_11;
      }
LABEL_13:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::memref::SubViewOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "static_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(void *)__s1 == 0x6F5F636974617473 && *(void *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          *uint64_t v5 = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "static_strides", a3);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if (result) {
              uint64_t v7 = a4;
            }
            else {
              uint64_t v7 = 0;
            }
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_17;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_17:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          long long v8 = result ? a4 : 0;
          uint64_t v12 = v8;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9) {
                uint64_t result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::memref::SubViewOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          unint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            unint64_t v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          long long v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    uint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 3, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::memref::SubViewOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v28 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  uint64_t v22 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  v22[6] = 1;
  v22[7] = a6;
  v22[8] = a8;
  v22[9] = a10;
  uint64_t DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, a11, a12);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2) = DenseI64ArrayAttr;
  uint64_t v24 = mlir::Builder::getDenseI64ArrayAttr(a1, a13, a14);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2)
            + 8) = v24;
  uint64_t v25 = mlir::Builder::getDenseI64ArrayAttr(a1, a15, a16);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2)
            + 16) = v25;
  uint64_t v26 = *(unsigned int *)(a2 + 72);
  if (v26 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v26) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::memref::SubViewOp::verifyInvariantsImpl(mlir::memref::SubViewOp *this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(void **)v3;
  if (!*(void *)v3)
  {
    v49[0] = (void **)"requires attribute 'static_offsets'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    uint64_t v28 = __p;
    if (__p)
    {
      v29 = v57;
      v30 = __p;
      if (v57 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      uint64_t v57 = v28;
      operator delete(v30);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      __int16 v32 = v55;
      uint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v35 = *--v32;
        uint64_t v34 = v35;
        *__int16 v32 = 0;
        if (v35) {
          MEMORY[0x21667D390](v34, 0x1000C8077774924);
        }
      }
      while (v32 != v31);
LABEL_76:
      uint64_t v33 = v54;
LABEL_77:
      int64_t v55 = v31;
      operator delete(v33);
    }
LABEL_78:
    if (v52 != &v53) {
      free(v52);
    }
    return v27;
  }
  uint64_t v5 = *(void **)(v3 + 8);
  if (!v5)
  {
    v49[0] = (void **)"requires attribute 'static_sizes'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    uint64_t v36 = __p;
    if (__p)
    {
      uint64_t v37 = v57;
      uint64_t v38 = __p;
      if (v57 != __p)
      {
        do
          uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        uint64_t v38 = __p;
      }
      uint64_t v57 = v36;
      operator delete(v38);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      uint64_t v39 = v55;
      uint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v41 = *--v39;
        uint64_t v40 = v41;
        void *v39 = 0;
        if (v41) {
          MEMORY[0x21667D390](v40, 0x1000C8077774924);
        }
      }
      while (v39 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  unint64_t v6 = *(void **)(v3 + 16);
  if (!v6)
  {
    v49[0] = (void **)"requires attribute 'static_strides'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    uint64_t v42 = __p;
    if (__p)
    {
      uint64_t v43 = v57;
      uint64_t v44 = __p;
      if (v57 != __p)
      {
        do
          uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = __p;
      }
      uint64_t v57 = v42;
      operator delete(v44);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      v45 = v55;
      uint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        void *v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v51[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  v51[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  v51[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  }
  uint64_t v8 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)this + 72);
    if (v9) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v9)
    {
LABEL_14:
      uint64_t v11 = 0;
      uint64_t v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11) {
          goto LABEL_17;
        }
      }
      return 0;
    }
  }
LABEL_17:
  uint64_t ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands(this, 1u);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  uint64_t v17 = mlir::memref::ReinterpretCastOp::getODSOperands(this, 2u);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19) {
        goto LABEL_25;
      }
    }
    return 0;
  }
LABEL_25:
  uint64_t v21 = mlir::memref::ReinterpretCastOp::getODSOperands(this, 3u);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23) {
        goto LABEL_29;
      }
    }
    return 0;
  }
LABEL_29:
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v25 = *(void *)this - 16;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::memref::SubViewOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  memset(v42, 0, 24);
  v31[0] = (uint64_t)v42;
  v31[1] = 1;
  uint64_t v39 = v41;
  uint64_t v40 = 0x400000000;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v36 = v38;
  uint64_t v37 = 0x400000000;
  uint64_t v32 = 0;
  uint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  v27[1] = 1;
  uint64_t v28 = 0;
  v27[0] = &v32;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v42, 1)) {
    goto LABEL_25;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, __src, 0)) {
    goto LABEL_25;
  }
  uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *uint64_t v5 = v30;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v36, &v29, __src, 0)) {
    goto LABEL_25;
  }
  uint64_t v6 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *(void *)(v6 + 8) = v29;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v33, &v28, __src, 0)) {
    goto LABEL_25;
  }
  uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *(void *)(v7 + 16) = v28;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_25;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = (uint64_t)&v26;
  __src[2] = a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v8, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::SubViewOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_25; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_25;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src)) {
    goto LABEL_25;
  }
  uint64_t v32 = __src[0];
  __int16 v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, __src))goto LABEL_25; {
  uint64_t v26 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26)) {
    goto LABEL_25;
  }
  __src[0] = v26;
  int v9 = v40;
  int v10 = v37;
  int v11 = v34;
  uint64_t v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  v12[6] = 1;
  v12[7] = v9;
  v12[8] = v10;
  v12[9] = v11;
  uint64_t v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v13, v14);
  mlir::OperationState::addTypes(a2, __src, 1);
  uint64_t v16 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v31, v27, v4, v16))goto LABEL_25; {
  if (v40)
  }
  {
    uint64_t v17 = (char *)v39;
    uint64_t v18 = 32 * v40;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, IndexType, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_16;
      }
    }
LABEL_25:
    uint64_t v23 = 0;
LABEL_26:
    uint64_t v24 = v33;
    if (v33 != v35) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_16:
  if (v37)
  {
    uint64_t v19 = (char *)v36;
    uint64_t v20 = 32 * v37;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v19, IndexType, v16))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20) {
        goto LABEL_20;
      }
    }
    goto LABEL_25;
  }
LABEL_20:
  if (v34)
  {
    uint64_t v21 = (char *)v33;
    uint64_t v22 = 32 * v34;
    uint64_t v23 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, IndexType, v16))
    {
      v21 += 32;
      v22 -= 32;
      if (!v22) {
        goto LABEL_26;
      }
    }
    goto LABEL_25;
  }
  uint64_t v23 = 1;
  uint64_t v24 = v33;
  if (v33 != v35) {
LABEL_27:
  }
    free(v24);
LABEL_28:
  if (v36 != v38) {
    free(v36);
  }
  if (v39 != v41) {
    free(v39);
  }
  return v23;
}

void mlir::memref::SubViewOp::print(mlir::memref::SubViewOp *this, mlir::OpAsmPrinter *a2)
{
  v69[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = *(void *)this;
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v8 = (void **)(*(void *)this + 16 * ((v7 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v9 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v9 + 24);
  int v11 = *(_DWORD *)(v9 + 28);
  if ((v7 & 0x800000) != 0) {
    uint64_t v12 = *(void *)(v6 + 72);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v12 + 32 * v10;
  uint64_t v14 = (v11 + v10) - v10;
  v64 = *v8;
  uint64_t v15 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  uint64_t v17 = v16;
  mlir::ValueRange::ValueRange(v69, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v6, v13, v14, v15, v17, v69[0], v69[1], 0, 0, 2);
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    unsigned char *v19 = 32;
  }
  uint64_t v20 = *(void *)this;
  unint64_t v21 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v22 = *(void *)this + 16 * ((v21 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v22 = 0;
  }
  if ((v21 & 0x800000) != 0) {
    uint64_t v23 = *(void *)(v20 + 72);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 + 28) + *(_DWORD *)(v22 + 24));
  uint64_t v25 = v23 + 32 * v24;
  uint64_t v26 = (*(_DWORD *)(v22 + 32) + v24) - v24;
  v64 = *(void **)(v22 + 8);
  uint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  uint64_t v29 = v28;
  mlir::ValueRange::ValueRange(v68, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v20, v25, v26, v27, v29, v68[0], v68[1], 0, 0, 2);
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  uint64_t v32 = *(void *)this;
  unint64_t v33 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v34 = *(void *)this + 16 * ((v33 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v34 = 0;
  }
  if ((v33 & 0x800000) != 0) {
    uint64_t v35 = *(void *)(v32 + 72);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = (*(_DWORD *)(v34 + 28) + *(_DWORD *)(v34 + 24) + *(_DWORD *)(v34 + 32));
  uint64_t v37 = v35 + 32 * v36;
  uint64_t v38 = (*(_DWORD *)(v34 + 36) + v36) - v36;
  v64 = *(void **)(v34 + 16);
  uint64_t v39 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  uint64_t v41 = v40;
  mlir::ValueRange::ValueRange(v67, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v32, v37, v38, v39, v41, v67[0], v67[1], 0, 0, 2);
  v64 = v66;
  v66[0] = "operandSegmentSizes";
  v66[1] = 19;
  v66[2] = "static_offsets";
  v66[3] = 14;
  uint64_t v65 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, 3uLL, 16);
  uint64_t v42 = (char *)v64 + 16 * v65;
  void *v42 = "static_sizes";
  v42[1] = 12;
  uint64_t v43 = (v65 + 1);
  LODWORD(v65) = v43;
  if (v43 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v43 + 1, 16);
    LODWORD(v43) = v65;
  }
  __int16 v44 = (char *)v64 + 16 * v43;
  *__int16 v44 = "static_strides";
  v44[1] = 14;
  LODWORD(v65) = v65 + 1;
  uint64_t v45 = *(mlir::Operation **)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v45);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v45 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v48, v64, v65);
  unint64_t v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v50 = (unsigned char *)*((void *)v49 + 4);
  if ((unint64_t)v50 >= *((void *)v49 + 3))
  {
    llvm::raw_ostream::write(v49, 32);
  }
  else
  {
    *((void *)v49 + 4) = v50 + 1;
    *__int16 v50 = 32;
  }
  unint64_t v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v52 = (unsigned char *)*((void *)v51 + 4);
  if (*((unsigned char **)v51 + 3) == v52)
  {
    llvm::raw_ostream::write(v51, ":", 1uLL);
  }
  else
  {
    *int64_t v52 = 58;
    ++*((void *)v51 + 4);
  }
  uint64_t v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v54 = (unsigned char *)*((void *)v53 + 4);
  if ((unint64_t)v54 >= *((void *)v53 + 3))
  {
    llvm::raw_ostream::write(v53, 32);
  }
  else
  {
    *((void *)v53 + 4) = v54 + 1;
    *int64_t v54 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  int64_t v55 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v56 = (unsigned char *)*((void *)v55 + 4);
  if ((unint64_t)v56 >= *((void *)v55 + 3))
  {
    llvm::raw_ostream::write(v55, 32);
  }
  else
  {
    *((void *)v55 + 4) = v56 + 1;
    unsigned char *v56 = 32;
  }
  uint64_t v57 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v58 = (_WORD *)*((void *)v57 + 4);
  if (*((void *)v57 + 3) - (void)v58 > 1uLL)
  {
    *char v58 = 28532;
    *((void *)v57 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v57, "to", 2uLL);
  }
  uint64_t v59 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v60 = (unsigned char *)*((void *)v59 + 4);
  if ((unint64_t)v60 >= *((void *)v59 + 3))
  {
    llvm::raw_ostream::write(v59, 32);
  }
  else
  {
    *((void *)v59 + 4) = v60 + 1;
    unsigned char *v60 = 32;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v61 = *(void *)this - 16;
  }
  else {
    uint64_t v61 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v61, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v64 != v66) {
    free(v64);
  }
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(v14, v15);
  return v1;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>(void *a1)
{
  uint64_t v1 = &unk_267772000;
  {
    unint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_267772000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v14 = 96;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_267772000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[65]);
}

void *anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::~SimplifyAllocConst(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::~SimplifyAllocConst(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v73[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = a2 + 64 + 16 * ((v4 >> 23) & 1);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 72);
    if (!v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (!v6) {
      return 0;
    }
  }
  uint64_t v58 = a2 + 64;
  uint64_t v8 = v6 - 1;
  uint64_t v9 = (void **)(v7 + 24);
  unint64_t v10 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  do
  {
    unint64_t v12 = (uint64_t *)*v9;
    LODWORD(v66) = 1;
    uint64_t v65 = 0;
    unint64_t v61 = (unint64_t)&v65;
    v71 = v12;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v71);
    if (!DefiningOp) {
      goto LABEL_31;
    }
    uint64_t v14 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
      goto LABEL_31;
    }
    v68 = v70;
    uint64_t v69 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v68);
    uint64_t v15 = *(void *)v68;
    if (v68 != v70) {
      free(v68);
    }
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0
      || ((uint64_t v16 = *(void **)(*(void *)(*(void *)(v14 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
           v16 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        ? (BOOL v17 = v16 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        : (BOOL v17 = 1),
          !v17 ? (BOOL v18 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v18 = 1),
          !v18 ? (BOOL v19 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v19 = 1),
          !v19))
    {
LABEL_31:
      BOOL v21 = 0;
      if (v66 < 0x41) {
        goto LABEL_6;
      }
LABEL_32:
      if (v65) {
        MEMORY[0x21667D390](v65, 0x1000C8000313F17);
      }
      goto LABEL_6;
    }
    if (!mlir::detail::constant_int_value_binder::match((uint64_t *)&v61, v15 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v21 = 0;
      if (v66 < 0x41) {
        goto LABEL_6;
      }
      goto LABEL_32;
    }
    uint64_t v20 = (void **)((char *)v65 + 8 * ((v66 - 1) >> 6));
    if (v66 < 0x41) {
      uint64_t v20 = &v65;
    }
    BOOL v21 = (((unint64_t)*v20 >> (v66 - 1)) & 1) == 0;
    if (v66 >= 0x41) {
      goto LABEL_32;
    }
LABEL_6:
    if (v8) {
      int v11 = v21;
    }
    else {
      int v11 = 1;
    }
    --v8;
    v9 += 4;
  }
  while (v11 != 1);
  if (!v21) {
    return 0;
  }
  v63 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v68 = v70;
  uint64_t v69 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v22 > HIDWORD(v69)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v22, 8);
  }
  uint64_t v65 = v67;
  uint64_t v66 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v23)
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = 8 * v23;
    do
    {
      while (1)
      {
        uint64_t v27 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63) + v24);
        if (v27 == 0x8000000000000000) {
          break;
        }
        uint64_t v40 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
          uint64_t v40 = v69;
        }
        *((void *)v68 + v40) = v27;
        LODWORD(v69) = v69 + 1;
        v24 += 8;
        if (v26 == v24) {
          goto LABEL_80;
        }
      }
      uint64_t v28 = *(ZinIrHalH13g **)(*(void *)(a2 + 72) + 32 * v25 + 24);
      unsigned int v62 = 1;
      v60 = &v61;
      unint64_t v61 = 0;
      v64 = v28;
      uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v64);
      if (v29)
      {
        uint64_t v30 = v29;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v29 + 48)))
        {
          uint64_t v31 = v10;
          v71 = v73;
          uint64_t v72 = 0x100000000;
          mlir::Operation::fold(v30, 0, 0, (uint64_t)&v71);
          uint64_t v32 = *v71;
          if (v71 != v73) {
            free(v71);
          }
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v10 = v31;
          if (v33)
          {
            uint64_t v34 = *(void **)(*(void *)(*(void *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
            BOOL v35 = v34 == v31 || v34 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
            BOOL v36 = v35 || v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            BOOL v37 = v36 || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v37 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v60, v33))
            {
              unsigned int v38 = v62 - 1;
              if (v62 > 0x40)
              {
                if (((*(void *)(v61 + 8 * (v38 >> 6)) >> v38) & 1) == 0)
                {
                  unint64_t v39 = *(void *)v61;
LABEL_76:
                  uint64_t v43 = v69;
                  if (v69 >= (unint64_t)HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
                    uint64_t v43 = v69;
                  }
                  *((void *)v68 + v43) = v39;
                  LODWORD(v69) = v69 + 1;
                  if (v62 < 0x41) {
                    goto LABEL_41;
                  }
                  goto LABEL_73;
                }
              }
              else
              {
                unint64_t v39 = v61;
                if (((v61 >> v38) & 1) == 0) {
                  goto LABEL_76;
                }
              }
            }
          }
        }
      }
      uint64_t v41 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
        uint64_t v41 = v69;
      }
      *((void *)v68 + v41) = 0x8000000000000000;
      LODWORD(v69) = v69 + 1;
      uint64_t v42 = v66;
      if (v66 >= (unint64_t)HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v66 + 1, 8);
        uint64_t v42 = v66;
      }
      *((void *)v65 + v42) = v28;
      LODWORD(v66) = v66 + 1;
      if (v62 < 0x41) {
        goto LABEL_41;
      }
LABEL_73:
      if (v61) {
        MEMORY[0x21667D390](v61, 0x1000C8000313F17);
      }
LABEL_41:
      ++v25;
      v24 += 8;
    }
    while (v26 != v24);
  }
LABEL_80:
  v71 = v63;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RawStringData = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
  uint64_t v47 = v46;
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v71);
  unint64_t v61 = mlir::MemRefType::get((uint64_t *)v68, (mlir::AffineMap *)v69, RHS, RawStringData, v47, LayerSchedule);
  uint64_t v49 = *(void *)(a2 + 24);
  unint64_t v50 = *(unsigned int *)(a2 + 44);
  unint64_t v51 = (uint64_t *)(v58 + 16 * ((v50 >> 23) & 1));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v52 = v58 + 16 * ((v50 >> 23) & 1);
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = *(unsigned int *)(v52 + 8);
  int v54 = *(_DWORD *)(v52 + 12);
  if ((v50 & 0x800000) != 0) {
    uint64_t v55 = *(void *)(a2 + 72);
  }
  else {
    uint64_t v55 = 0;
  }
  v71 = (uint64_t *)(v55 + 32 * v53);
  uint64_t v72 = (v54 + v53) - v53;
  v60 = (unint64_t *)*v51;
  v64 = mlir::OpBuilder::create<mlir::memref::AllocOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(a3 + 1, v49, (uint64_t *)&v61, (uint64_t)&v65, (uint64_t)&v71, (uint64_t *)&v60);
  v71 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v56 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v71, &v64);
  (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v56);
  if (v65 != v67) {
    free(v65);
  }
  if (v68 != v70) {
    free(v68);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v26[38] = *MEMORY[0x263EF8340];
  uint64_t v19 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloc", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    __int16 v23 = 1283;
    v22[2] = (uint64_t)"memref.alloc";
    v22[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v13);
  uint64_t v15 = *a3;
  mlir::ValueRange::ValueRange(v25, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::ValueRange::ValueRange(v24, *(void *)a5, *(void *)(a5 + 8));
  mlir::memref::AllocOp::build(a1, (uint64_t)v26, v15, v25[0], v25[1], v24[0], v24[1], *a6);
  uint64_t v16 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id) {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v17;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  v25[28] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"memref.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  v19[0] = *a4 - 16;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  unsigned int v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    unsigned int v12 = v23;
  }
  *(void *)(v22 + 8 * v12) = v11;
  ++v23;
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a2 + 36);
  uint64_t v6 = a2 - 16;
  if (v5) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v27 = v7;
  uint64_t v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  uint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v10 = v31;
  uint64_t j = v31;
  long long v22 = v29;
  long long v23 = v30;
  for (i = v26; v31 != i; uint64_t v10 = v31)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void **)(*(void *)(v12 + 48) + 16);
    if (v12) {
      BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      if (*(void *)(*(void *)(v12 + 72) + 24) == v6) {
        return 0;
      }
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  uint64_t v16 = *(unsigned int *)(a2 + 36);
  if (v16) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)&long long v22 = v17;
  *((void *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  uint64_t v18 = *(unsigned int *)(a2 + 36);
  if (v18) {
    uint64_t v19 = v6;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v27 = v19;
  uint64_t v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v20 = v26;
  long long v22 = v29;
  long long v23 = v30;
  uint64_t v21 = v31;
  for (j = v31; j != v20; uint64_t v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 40))(a3, *(void *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
  return 1;
}

void *anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::~SimplifyAllocConst(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::~SimplifyAllocConst(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v73[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = a2 + 64 + 16 * ((v4 >> 23) & 1);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 72);
    if (!v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (!v6) {
      return 0;
    }
  }
  uint64_t v58 = a2 + 64;
  uint64_t v8 = v6 - 1;
  uint64_t v9 = (void **)(v7 + 24);
  uint64_t v10 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  do
  {
    uint64_t v12 = (uint64_t *)*v9;
    LODWORD(v66) = 1;
    uint64_t v65 = 0;
    unint64_t v61 = (unint64_t)&v65;
    v71 = v12;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v71);
    if (!DefiningOp) {
      goto LABEL_31;
    }
    uint64_t v14 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
      goto LABEL_31;
    }
    v68 = v70;
    uint64_t v69 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v68);
    uint64_t v15 = *(void *)v68;
    if (v68 != v70) {
      free(v68);
    }
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0
      || ((uint64_t v16 = *(void **)(*(void *)(*(void *)(v14 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
           v16 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        ? (BOOL v17 = v16 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        : (BOOL v17 = 1),
          !v17 ? (BOOL v18 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v18 = 1),
          !v18 ? (BOOL v19 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v19 = 1),
          !v19))
    {
LABEL_31:
      BOOL v21 = 0;
      if (v66 < 0x41) {
        goto LABEL_6;
      }
LABEL_32:
      if (v65) {
        MEMORY[0x21667D390](v65, 0x1000C8000313F17);
      }
      goto LABEL_6;
    }
    if (!mlir::detail::constant_int_value_binder::match((uint64_t *)&v61, v15 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v21 = 0;
      if (v66 < 0x41) {
        goto LABEL_6;
      }
      goto LABEL_32;
    }
    uint64_t v20 = (void **)((char *)v65 + 8 * ((v66 - 1) >> 6));
    if (v66 < 0x41) {
      uint64_t v20 = &v65;
    }
    BOOL v21 = (((unint64_t)*v20 >> (v66 - 1)) & 1) == 0;
    if (v66 >= 0x41) {
      goto LABEL_32;
    }
LABEL_6:
    if (v8) {
      int v11 = v21;
    }
    else {
      int v11 = 1;
    }
    --v8;
    v9 += 4;
  }
  while (v11 != 1);
  if (!v21) {
    return 0;
  }
  v63 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v68 = v70;
  uint64_t v69 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v22 > HIDWORD(v69)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v22, 8);
  }
  uint64_t v65 = v67;
  uint64_t v66 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v23)
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = 8 * v23;
    do
    {
      while (1)
      {
        uint64_t v27 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63) + v24);
        if (v27 == 0x8000000000000000) {
          break;
        }
        uint64_t v40 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
          uint64_t v40 = v69;
        }
        *((void *)v68 + v40) = v27;
        LODWORD(v69) = v69 + 1;
        v24 += 8;
        if (v26 == v24) {
          goto LABEL_80;
        }
      }
      uint64_t v28 = *(ZinIrHalH13g **)(*(void *)(a2 + 72) + 32 * v25 + 24);
      unsigned int v62 = 1;
      v60 = &v61;
      unint64_t v61 = 0;
      v64 = v28;
      uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v64);
      if (v29)
      {
        uint64_t v30 = v29;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v29 + 48)))
        {
          uint64_t v31 = v10;
          v71 = v73;
          uint64_t v72 = 0x100000000;
          mlir::Operation::fold(v30, 0, 0, (uint64_t)&v71);
          uint64_t v32 = *v71;
          if (v71 != v73) {
            free(v71);
          }
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v10 = v31;
          if (v33)
          {
            uint64_t v34 = *(void **)(*(void *)(*(void *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
            BOOL v35 = v34 == v31 || v34 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
            BOOL v36 = v35 || v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            BOOL v37 = v36 || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v37 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v60, v33))
            {
              unsigned int v38 = v62 - 1;
              if (v62 > 0x40)
              {
                if (((*(void *)(v61 + 8 * (v38 >> 6)) >> v38) & 1) == 0)
                {
                  unint64_t v39 = *(void *)v61;
LABEL_76:
                  uint64_t v43 = v69;
                  if (v69 >= (unint64_t)HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
                    uint64_t v43 = v69;
                  }
                  *((void *)v68 + v43) = v39;
                  LODWORD(v69) = v69 + 1;
                  if (v62 < 0x41) {
                    goto LABEL_41;
                  }
                  goto LABEL_73;
                }
              }
              else
              {
                unint64_t v39 = v61;
                if (((v61 >> v38) & 1) == 0) {
                  goto LABEL_76;
                }
              }
            }
          }
        }
      }
      uint64_t v41 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
        uint64_t v41 = v69;
      }
      *((void *)v68 + v41) = 0x8000000000000000;
      LODWORD(v69) = v69 + 1;
      uint64_t v42 = v66;
      if (v66 >= (unint64_t)HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v66 + 1, 8);
        uint64_t v42 = v66;
      }
      *((void *)v65 + v42) = v28;
      LODWORD(v66) = v66 + 1;
      if (v62 < 0x41) {
        goto LABEL_41;
      }
LABEL_73:
      if (v61) {
        MEMORY[0x21667D390](v61, 0x1000C8000313F17);
      }
LABEL_41:
      ++v25;
      v24 += 8;
    }
    while (v26 != v24);
  }
LABEL_80:
  v71 = v63;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RawStringData = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
  uint64_t v47 = v46;
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v71);
  unint64_t v61 = mlir::MemRefType::get((uint64_t *)v68, (mlir::AffineMap *)v69, RHS, RawStringData, v47, LayerSchedule);
  uint64_t v49 = *(void *)(a2 + 24);
  unint64_t v50 = *(unsigned int *)(a2 + 44);
  unint64_t v51 = (uint64_t *)(v58 + 16 * ((v50 >> 23) & 1));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v52 = v58 + 16 * ((v50 >> 23) & 1);
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = *(unsigned int *)(v52 + 8);
  int v54 = *(_DWORD *)(v52 + 12);
  if ((v50 & 0x800000) != 0) {
    uint64_t v55 = *(void *)(a2 + 72);
  }
  else {
    uint64_t v55 = 0;
  }
  v71 = (uint64_t *)(v55 + 32 * v53);
  uint64_t v72 = (v54 + v53) - v53;
  v60 = (unint64_t *)*v51;
  v64 = mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(a3 + 1, v49, (uint64_t *)&v61, (uint64_t)&v65, (uint64_t)&v71, (uint64_t *)&v60);
  v71 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v56 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v71, &v64);
  (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v56);
  if (v65 != v67) {
    free(v65);
  }
  if (v68 != v70) {
    free(v68);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v26[38] = *MEMORY[0x263EF8340];
  uint64_t v19 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloca", (const unsigned __int8 *)0xD, Context);
  if (!v14)
  {
    __int16 v23 = 1283;
    v22[2] = (uint64_t)"memref.alloca";
    v22[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v13);
  uint64_t v15 = *a3;
  mlir::ValueRange::ValueRange(v25, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::ValueRange::ValueRange(v24, *(void *)a5, *(void *)(a5 + 8));
  mlir::memref::AllocOp::build(a1, (uint64_t)v26, v15, v25[0], v25[1], v24[0], v24[1], *a6);
  uint64_t v16 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id) {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v17;
}

void *anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a2 + 36);
  uint64_t v6 = a2 - 16;
  if (v5) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v27 = v7;
  uint64_t v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  uint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v10 = v31;
  uint64_t j = v31;
  long long v22 = v29;
  long long v23 = v30;
  for (i = v26; v31 != i; uint64_t v10 = v31)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void **)(*(void *)(v12 + 48) + 16);
    if (v12) {
      BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      if (*(void *)(*(void *)(v12 + 72) + 24) == v6) {
        return 0;
      }
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  uint64_t v16 = *(unsigned int *)(a2 + 36);
  if (v16) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)&long long v22 = v17;
  *((void *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  uint64_t v18 = *(unsigned int *)(a2 + 36);
  if (v18) {
    uint64_t v19 = v6;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v27 = v19;
  uint64_t v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v20 = v26;
  long long v22 = v29;
  long long v23 = v30;
  uint64_t v21 = v31;
  for (j = v31; j != v20; uint64_t v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 40))(a3, *(void *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
  return 1;
}

void *anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::~SimplifyDeadAlloc(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  int v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a2 + 36);
  uint64_t v6 = a2 - 16;
  if (v5) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v27 = v7;
  uint64_t v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  uint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v10 = v31;
  uint64_t j = v31;
  long long v22 = v29;
  long long v23 = v30;
  for (i = v26; v31 != i; uint64_t v10 = v31)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void **)(*(void *)(v12 + 48) + 16);
    if (v12) {
      BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      if (*(void *)(*(void *)(v12 + 72) + 24) == v6) {
        return 0;
      }
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  uint64_t v16 = *(unsigned int *)(a2 + 36);
  if (v16) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)&long long v22 = v17;
  *((void *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  uint64_t v18 = *(unsigned int *)(a2 + 36);
  if (v18) {
    uint64_t v19 = v6;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v27 = v19;
  uint64_t v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  uint64_t v20 = v26;
  long long v22 = v29;
  long long v23 = v30;
  uint64_t v21 = v31;
  for (j = v31; j != v20; uint64_t v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 40))(a3, *(void *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
  return 1;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"memref.alloca_scope.return", 26);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void AllocaScopeInliner::~AllocaScopeInliner(AllocaScopeInliner *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AllocaScopeInliner::matchAndRewrite(uint64_t a1, mlir::ForwardIterator *a2, uint64_t a3)
{
  unint64_t v24[2] = *MEMORY[0x263EF8340];
  long long v22 = a2;
  v24[0] = (unint64_t)&v22;
  if (mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<AllocaScopeInliner::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}>, (uint64_t)v24, 0))
  {
LABEL_2:
    uint64_t v4 = *(void *)((((unint64_t)v22
                     + 16 * (((unint64_t)*((unsigned int *)v22 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v22 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v22 + 10)
                   + 8);
    if (v4) {
      uint64_t v5 = (ZinIrHalH13g **)(v4 - 8);
    }
    else {
      uint64_t v5 = 0;
    }
    mlir::Block::getTerminator(v5);
    uint64_t v7 = v6;
    if ((*(unsigned char *)(v6 + 46) & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(v6 + 72);
      unint64_t v9 = *(unsigned int *)(v6 + 68);
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
    }
    mlir::ValueRange::ValueRange(v24, v8, v9);
    uint64_t v10 = (uint64_t)v22;
    mlir::ValueRange::ValueRange(v23, 0, 0);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v5, v10, v23[0], v23[1]);
    (*(void (**)(uint64_t, mlir::ForwardIterator *, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, v22, v24[0], v24[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v7);
    return 1;
  }
  ParentOp = (mlir::Block *)*((void *)v22 + 2);
  if (ParentOp) {
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((void *)ParentOp + 6);
  if (result)
  {
    uint64_t v13 = v22;
    BOOL v14 = (ZinIrHalH13g **)*((void *)v22 + 2);
    if (*((ZinIrHalH13g ***)v22 + 1) == v14 + 4)
    {
      mlir::Block::getTerminator(v14);
      if (v18) {
        return 0;
      }
    }
    else
    {
      ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v22 + 1));
      uint64_t v16 = v15;
      mlir::Block::getTerminator(*((ZinIrHalH13g ***)v13 + 2));
      if (v16 != v17) {
        return 0;
      }
    }
    Parent = (mlir::Block *)*((void *)v13 + 2);
    if (Parent) {
      Parent = (mlir::Block *)mlir::Block::getParent(Parent);
    }
    uint64_t v20 = (mlir::Block *)*((void *)Parent + 1);
    if (v20 != Parent)
    {
      uint64_t v21 = 1;
      do
      {
        uint64_t v20 = (mlir::Block *)*((void *)v20 + 1);
        --v21;
      }
      while (v20 != Parent);
      if (!v21) {
        goto LABEL_2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t AllocaScopeInliner::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)const::{lambda(mlir::Operation *)#1}::operator()(void **a1, uint64_t a2)
{
  v24[20] = *MEMORY[0x263EF8340];
  if (**a1 == a2) {
    return 1;
  }
  uint64_t v4 = (void *)(a2 + 48);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((void *)(a2 + 48))) {
    goto LABEL_3;
  }
  v20[0] = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(a2);
  v20[1] = v6;
  if (!v20[0]) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7) {
    uint64_t v8 = a2 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v9);
      long long v22 = v24;
      unint64_t v23 = 0x400000000;
      mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)v20, (uint64_t)&v22);
      uint64_t v10 = llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>((uint64_t ***)&v22, &NextResultAtOffset);
      int v11 = (uint64_t **)((char *)v22 + 40 * v23);
      if (v10 != v11) {
        uint64_t v2 = v10[1];
      }
      if (v22 != v24) {
        free(v22);
      }
      if (v10 != v11)
      {
        uint64_t v12 = v2[1];
        {
          long long v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
          unint64_t v23 = 101;
          unint64_t v13 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
          if (v23 >= v13) {
            unint64_t v14 = v13;
          }
          else {
            unint64_t v14 = v23;
          }
          uint64_t v15 = (char *)v22 + v14;
          unint64_t v16 = v23 - v14;
          uint64_t v17 = 18;
          if (v16 < 0x12) {
            uint64_t v17 = v16;
          }
          unint64_t v18 = v16 - v17;
          if (v18 >= v18 - 1) {
            uint64_t v19 = v18 - 1;
          }
          else {
            uint64_t v19 = v18;
          }
          mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
        }
        if (v12 == mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id) {
          return 0;
        }
      }
    }
    while (v7 != ++v9);
  }
LABEL_3:
  if (mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>(v4)) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>(void *a1)
{
  uint64_t v1 = &unk_267772000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_267772000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v14 = 97;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_267772000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[229]);
}

void AllocaScopeHoister::~AllocaScopeHoister(AllocaScopeHoister *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

mlir::Block *AllocaScopeHoister::matchAndRewrite(uint64_t a1, ZinIrHalH13g **a2, uint64_t a3)
{
  v44[6] = *MEMORY[0x263EF8340];
  unint64_t v5 = (mlir::Block *)a2;
  do
  {
    uint64_t result = (mlir::Block *)*((void *)v5 + 2);
    if (!result) {
      return result;
    }
    uint64_t result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (!result) {
      return result;
    }
    unint64_t v5 = result;
  }
  while (!mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((void *)result + 6));
  uint64_t result = a2[2];
  if (result)
  {
    uint64_t result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      uint64_t v7 = result;
      if ((mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((void *)result + 6) & 1) == 0)
      {
        unint64_t v8 = (ZinIrHalH13g **)a2[2];
        if (a2[1] == (ZinIrHalH13g *)(v8 + 4))
        {
          mlir::Block::getTerminator(v8);
          if (v12) {
            return 0;
          }
        }
        else
        {
          ZinIrHalH13g::~ZinIrHalH13g(a2[1]);
          uint64_t v10 = v9;
          mlir::Block::getTerminator((ZinIrHalH13g **)a2[2]);
          if (v10 != v11) {
            return 0;
          }
        }
        Parent = a2[2];
        if (Parent) {
          Parent = (mlir::Block *)mlir::Block::getParent(Parent);
        }
        unint64_t v14 = (mlir::Block *)*((void *)Parent + 1);
        if (v14 != Parent)
        {
          uint64_t v15 = 1;
          do
          {
            unint64_t v14 = (mlir::Block *)*((void *)v14 + 1);
            --v15;
          }
          while (v14 != Parent);
          if (!v15)
          {
            unint64_t v16 = (ZinIrHalH13g **)*((void *)v7 + 2);
            if (*((ZinIrHalH13g ***)v7 + 1) == v16 + 4)
            {
              uint64_t v18 = 0;
            }
            else
            {
              ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v7 + 1));
              uint64_t v18 = v17;
              unint64_t v16 = (ZinIrHalH13g **)*((void *)v7 + 2);
            }
            mlir::Block::getTerminator(v16);
            if (v18 == v19)
            {
              uint64_t v20 = (mlir::Block *)*((void *)v7 + 2);
              if (v20) {
                uint64_t v20 = (mlir::Block *)mlir::Block::getParent(v20);
              }
              uint64_t v21 = (mlir::Block *)*((void *)v20 + 1);
              if (v21 != v20)
              {
                uint64_t v22 = 1;
                do
                {
                  uint64_t v21 = (mlir::Block *)*((void *)v21 + 1);
                  --v22;
                }
                while (v21 != v20);
                if (!v22)
                {
                  while (1)
                  {
                    ParentOp = (mlir::Block *)*((void *)v7 + 2);
                    if (ParentOp) {
                      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
                    }
                    if (mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((void *)ParentOp + 6)) {
                      break;
                    }
                    uint64_t result = (mlir::Block *)*((void *)v7 + 2);
                    if (!result) {
                      return result;
                    }
                    uint64_t result = (mlir::Block *)mlir::Block::getParentOp(result);
                    if (!result) {
                      return result;
                    }
                    uint64_t v7 = result;
                    unint64_t v23 = (ZinIrHalH13g **)*((void *)result + 2);
                    if (*((ZinIrHalH13g ***)v7 + 1) == v23 + 4)
                    {
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v7 + 1));
                      uint64_t v25 = v24;
                      unint64_t v23 = (ZinIrHalH13g **)*((void *)v7 + 2);
                    }
                    mlir::Block::getTerminator(v23);
                    if (v25 != v26) {
                      return 0;
                    }
                    uint64_t v27 = (mlir::Block *)*((void *)v7 + 2);
                    if (v27) {
                      uint64_t v27 = (mlir::Block *)mlir::Block::getParent(v27);
                    }
                    uint64_t v28 = (mlir::Block *)*((void *)v27 + 1);
                    if (v28 == v27) {
                      return 0;
                    }
                    uint64_t v29 = 1;
                    do
                    {
                      uint64_t v28 = (mlir::Block *)*((void *)v28 + 1);
                      --v29;
                    }
                    while (v28 != v27);
                    uint64_t result = 0;
                    if (v29) {
                      return result;
                    }
                  }
                  unint64_t v31 = *((unsigned int *)v7 + 11);
                  uint64_t v32 = 0;
                  if ((v31 & 0x7FFFFF) != 0)
                  {
                    unint64_t v33 = (mlir::Region *)((((unint64_t)v7
                                           + 16 * ((v31 >> 23) & 1)
                                           + ((v31 >> 21) & 0x7F8)
                                           + 71) & 0xFFFFFFFFFFFFFFF8)
                                         + 32 * *((unsigned int *)v7 + 10));
                    uint64_t v34 = 24 * (v31 & 0x7FFFFF);
                    do
                    {
                      BOOL v35 = a2[2];
                      if (v35) {
                        BOOL v36 = (mlir::Region *)mlir::Block::getParent(v35);
                      }
                      else {
                        BOOL v36 = 0;
                      }
                      if (v33 == v36 || mlir::Region::isProperAncestor(v33, v36)) {
                        uint64_t v32 = v33;
                      }
                      unint64_t v33 = (mlir::Region *)((char *)v33 + 24);
                      v34 -= 24;
                    }
                    while (v34);
                  }
                  uint64_t v42 = v44;
                  uint64_t v43 = 0x600000000;
                  v40[0] = &v41;
                  v40[1] = &v42;
                  uint64_t v41 = v32;
                  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}>, (uint64_t)v40, 1);
                  if (v43)
                  {
                    uint64_t v37 = *((void *)v7 + 2);
                    ZinIrHalH13g::~ZinIrHalH13g(v7);
                    *(void *)(a3 + 24) = v37;
                    *(void *)(a3 + 32) = v38;
                    if (v43) {
                      mlir::OpBuilder::clone((uint64_t **)(a3 + 8), *(mlir::Operation **)v42);
                    }
                    uint64_t v39 = 1;
                  }
                  else
                  {
                    uint64_t v39 = 0;
                  }
                  if (v42 != v44) {
                    free(v42);
                  }
                  return (mlir::Block *)v39;
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)const::{lambda(mlir::Operation *)#1}::operator()(mlir::Region ***a1, uint64_t a2)
{
  v27[20] = *MEMORY[0x263EF8340];
  v23[0] = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(a2);
  v23[1] = v3;
  if (!v23[0]) {
    return 2;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  uint64_t v5 = v4 ? a2 - 16 : 0;
  if (!v4) {
    return 2;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6);
    uint64_t v25 = v27;
    unint64_t v26 = 0x400000000;
    mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)v23, (uint64_t)&v25);
    uint64_t v7 = llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>((uint64_t ***)&v25, &NextResultAtOffset);
    unint64_t v8 = (uint64_t **)((char *)v25 + 40 * v26);
    if (v7 != v8) {
      uint64_t v2 = v7[1];
    }
    if (v25 != v27) {
      free(v25);
    }
    if (v7 != v8)
    {
      uint64_t v9 = v2[1];
      {
        uint64_t v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
        unint64_t v26 = 101;
        unint64_t v10 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
        if (v26 >= v10) {
          unint64_t v11 = v10;
        }
        else {
          unint64_t v11 = v26;
        }
        uint64_t v12 = (char *)v25 + v11;
        unint64_t v13 = v26 - v11;
        uint64_t v14 = 18;
        if (v13 < 0x12) {
          uint64_t v14 = v13;
        }
        unint64_t v15 = v13 - v14;
        if (v15 >= v15 - 1) {
          uint64_t v16 = v15 - 1;
        }
        else {
          uint64_t v16 = v15;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      }
      if (v9 == mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id) {
        break;
      }
    }
    if (v4 == ++v6) {
      return 2;
    }
  }
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v17 = a1;
    if (std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(*(void *)(a2 + 72), 0, *(void *)(a2 + 72), *(unsigned int *)(a2 + 68), *a1))return 2; {
  }
    }
  else
  {
    uint64_t v17 = a1;
    if (std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(0, 0, 0, 0, *a1))return 2; {
  }
    }
  uint64_t v19 = (uint64_t)v17[1];
  uint64_t v20 = *(unsigned int *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(v19 + 8);
  }
  *(void *)(*(void *)v19 + 8 * v20) = a2;
  ++*(_DWORD *)(v19 + 8);
  return 1;
}

unint64_t std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, mlir::Region **a5)
{
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if (a1 == a3)
  {
    uint64_t v17 = ~a2 + a4;
    uint64_t v18 = (uint64_t *)(a1 + 32 * a2 + 24);
    while (1)
    {
      uint64_t v19 = v17;
      uint64_t v22 = *v18;
      uint64_t v20 = *a5;
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v22);
      if (v20 == ParentRegion) {
        break;
      }
      unint64_t result = mlir::Region::isProperAncestor(v20, ParentRegion);
      if ((result & 1) == 0)
      {
        uint64_t v17 = v19 - 1;
        v18 += 4;
        if (v19) {
          continue;
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32 * a2 + 24);
    uint64_t v9 = *a5;
    unint64_t v10 = mlir::Value::getParentRegion((mlir::Value *)&v22);
    if (v9 != v10 && (mlir::Region::isProperAncestor(v9, v10) & 1) == 0)
    {
      uint64_t v11 = a1 + 32 * a2;
      uint64_t v22 = *(void *)(v11 + 56);
      uint64_t v12 = *a5;
      unint64_t v13 = mlir::Value::getParentRegion((mlir::Value *)&v22);
      if (v12 != v13)
      {
        uint64_t v14 = v13;
        unint64_t v15 = (uint64_t *)(v11 + 88);
        do
        {
          if (mlir::Region::isProperAncestor(v12, v14)) {
            break;
          }
          uint64_t v16 = *v15;
          v15 += 4;
          uint64_t v22 = v16;
          uint64_t v12 = *a5;
          uint64_t v14 = mlir::Value::getParentRegion((mlir::Value *)&v22);
        }
        while (v12 != v14);
      }
    }
  }
  return 1;
}

void anonymous namespace'::FoldCopyOfCast::~FoldCopyOfCast(_anonymous_namespace_::FoldCopyOfCast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::FoldCopyOfCast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v36 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v36);
  uint64_t v6 = DefiningOp;
  if (!DefiningOp)
  {
LABEL_10:
    unint64_t v36 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v36);
    if (!v15) {
      return v6;
    }
    goto LABEL_11;
  }
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
    goto LABEL_9;
  }
  unint64_t v7 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void **)(*(void *)v7 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v7 = 0;
  }
  unint64_t v35 = v7;
  unint64_t v36 = v7;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || (uint64_t Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36),
        uint64_t v11 = v10,
        uint64_t v12 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35),
        v11 != v13)
    || memcmp(Value, v12, 8 * v11)
    || (uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v36),
        RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35)))
  {
LABEL_9:
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
  long long v30 = *(uint64_t **)(a2 + 72);
  unint64_t v31 = *(uint64_t **)(*(void *)(v6 + 72) + 24);
  uint64_t v32 = (uint64_t *)v30[1];
  if (v32)
  {
    *uint64_t v32 = *v30;
    if (*v30) {
      *(void *)(*v30 + 8) = v30[1];
    }
  }
  v30[3] = (uint64_t)v31;
  v30[1] = (uint64_t)v31;
  uint64_t v33 = *v31;
  uint64_t *v30 = *v31;
  if (v33) {
    *(void *)(v33 + 8) = v30;
  }
  *unint64_t v31 = (uint64_t)v30;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a2);
  uint64_t v6 = 1;
  unint64_t v36 = *(void *)(*(void *)(a2 + 72) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v36);
  if (v15)
  {
LABEL_11:
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      unint64_t v17 = *(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v18 = *(void **)(*(void *)v17 + 136);
      if (v18 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
        unint64_t v17 = 0;
      }
      unint64_t v35 = v17;
      unint64_t v36 = v17;
      if (v18 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        uint64_t v19 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
        uint64_t v21 = v20;
        uint64_t v22 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
        if (v21 == v23 && !memcmp(v19, v22, 8 * v21))
        {
          uint64_t v24 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v36);
          if (v24 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35))
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
            uint64_t v25 = *(void **)(a2 + 72);
            unint64_t v26 = *(uint64_t **)(*(void *)(v16 + 72) + 24);
            uint64_t v27 = v25 + 4;
            uint64_t v28 = (void *)v25[5];
            if (v28)
            {
              *uint64_t v28 = *v27;
              if (*v27) {
                *(void *)(*v27 + 8) = v25[5];
              }
            }
            v25[7] = v26;
            v25[5] = v26;
            uint64_t v29 = *v26;
            uint64_t v25[4] = *v26;
            if (v29) {
              *(void *)(v29 + 8) = v27;
            }
            *unint64_t v26 = (uint64_t)v27;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a2);
            return 1;
          }
        }
      }
    }
  }
  return v6;
}

void anonymous namespace'::FoldSelfCopy::~FoldSelfCopy(_anonymous_namespace_::FoldSelfCopy *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::FoldSelfCopy::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a2 + 72) + 24) != *(void *)(*(void *)(a2 + 72) + 56)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a3 + 40))(a3);
  return 1;
}

void anonymous namespace'::DimOfMemRefReshape::~DimOfMemRefReshape(_anonymous_namespace_::DimOfMemRefReshape *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::DimOfMemRefReshape::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v6 = DefiningOp;
  if (*(_UNKNOWN **)(*((void *)DefiningOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::ReshapeOp,void>::id) {
    return 0;
  }
  uint64_t v8 = *((void *)DefiningOp + 2);
  ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  unint64_t v12 = *(void *)(*((void *)v6 + 9) + 56);
  uint64_t v15 = *(void *)(*(void *)(a2 + 72) + 56);
  unint64_t v16 = v12;
  uint64_t v13 = mlir::OpBuilder::create<mlir::memref::LoadOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::IndexType>>((mlir::BoolAttr **)(a3 + 8), v11, (uint64_t *)&v16, (uint64_t)&v15);
  uint64_t v17 = (uint64_t)v13 - 16;
  if ((*((void *)v13 - 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v16 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = (uint64_t)mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::IndexType,mlir::Value &>((mlir::OpBuilder *)(a3 + 8), v11, (uint64_t *)&v16, &v17)- 16;
  }
  uint64_t v7 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 24))(a3, a2, &v17, 1);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::LoadOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::IndexType>>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.load", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"memref.load";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::memref::LoadOp::build(a1, (uint64_t)v19, *a3, a4, 1, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::LoadOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::IndexType,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_cast", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"arith.index_cast";
    v17[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::memref::GenericAtomicRMWOp::verify(void)::$_0>(uint64_t a1, mlir *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (mlir::isMemoryEffectFree(a2, a2)) {
    return 1;
  }
  unint64_t v12 = "body of 'memref.generic_atomic_rmw' should contain only operations with no side effects";
  __int16 v13 = 259;
  mlir::Operation::emitError((uint64_t)a2, (uint64_t)&v12, (uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = __p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      uint64_t v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = v18;
      uint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          uint64_t v11 = *--v8;
          uint64_t v10 = v11;
          void *v8 = 0;
          if (v11) {
            MEMORY[0x21667D390](v10, 0x1000C8077774924);
          }
        }
        while (v8 != v7);
        uint64_t v9 = v17;
      }
      __int16 v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return 0;
}

void anonymous namespace'::ReinterpretCastOpExtractStridedMetadataFolder::~ReinterpretCastOpExtractStridedMetadataFolder(_anonymous_namespace_::ReinterpretCastOpExtractStridedMetadataFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::ReinterpretCastOpExtractStridedMetadataFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v55[6] = *MEMORY[0x263EF8340];
  uint64_t v45 = a2;
  uint64_t v53 = *(uint64_t **)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v53);
  uint64_t v5 = DefiningOp;
  if (!DefiningOp) {
    return v5;
  }
  uint64_t v6 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id) {
    uint64_t v8 = DefiningOp;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v44 = v8;
  if (!v7) {
    return 0;
  }
  int v9 = *(_DWORD *)(DefiningOp + 36);
  unsigned int v10 = (v9 - 2) >> 1;
  if (v9) {
    uint64_t v11 = DefiningOp - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v10 + 2);
  mlir::ValueRange::ValueRange((unint64_t *)&v50, NextResultAtOffset, v10 + 2 + v10 - (unint64_t)(v10 + 2));
  mlir::getAsOpFoldResult((uint64_t)v50, v51, &v53);
  unint64_t v13 = *(void *)(*(void *)(*(void *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
  constifyIndexValues((uint64_t)&v53, v13, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantStrides, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  mlir::memref::ReinterpretCastOp::getConstifiedMixedStrides((mlir::memref::ReinterpretCastOp *)&v45, (uint64_t)&v50);
  if (v54 != v51) {
    goto LABEL_31;
  }
  if (*(_DWORD *)(v45 + 36)) {
    uint64_t v15 = v45 - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  v48[0] = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v48);
  uint64_t v17 = v16;
  if (!v16)
  {
LABEL_18:
    int v24 = *(_DWORD *)(v5 + 36);
    if (v24) {
      uint64_t v25 = v5 - 16;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 2);
    mlir::ValueRange::ValueRange((unint64_t *)v46, v26, (v24 - 2) >> 1);
    mlir::getAsOpFoldResult((uint64_t)v46[0], (unint64_t)v46[1], v48);
    unint64_t v27 = *(void *)(*(void *)(*(void *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
    constifyIndexValues((uint64_t)v48, v27, v28, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantSizes, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
    mlir::memref::ReinterpretCastOp::getConstifiedMixedSizes((mlir::memref::ReinterpretCastOp *)&v45, (uint64_t)v46);
    if (v17)
    {
      uint64_t v29 = (uint64_t *)v48[0];
      long long v30 = (uint64_t *)v46[0];
      while (1)
      {
        uint64_t v32 = *v29++;
        uint64_t v31 = v32;
        uint64_t v33 = *v30++;
        if (v31 != v33) {
          break;
        }
        if (!--v17) {
          goto LABEL_25;
        }
      }
    }
    else
    {
LABEL_25:
      uint64_t ConstifiedMixedOffset = mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset((mlir::memref::ExtractStridedMetadataOp *)&v44);
      if (ConstifiedMixedOffset == mlir::memref::ReinterpretCastOp::getConstifiedMixedOffset((mlir::memref::ReinterpretCastOp *)&v45))
      {
        unint64_t v36 = *(void *)(*(void *)(*(void *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v45 + 36)) {
          uint64_t v37 = v45 - 16;
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
        uint64_t v39 = v45;
        if (v36 == (*(void *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v43 = *(void *)(*(void *)(v5 + 72) + 24);
          uint64_t v5 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(void *)a3 + 24))(a3, v45, &v43, 1);
        }
        else
        {
          if (*(_DWORD *)(v45 + 36)) {
            uint64_t v40 = v45 - 16;
          }
          else {
            uint64_t v40 = 0;
          }
          unint64_t v41 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v42 = *(void *)(*(void *)(v5 + 72) + 24);
          unint64_t v43 = v41;
          mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>(a3, v39, (uint64_t *)&v43, &v42);
          uint64_t v5 = 1;
        }
        goto LABEL_27;
      }
    }
    uint64_t v5 = 0;
LABEL_27:
    if (v46[0] != &v47) {
      free(v46[0]);
    }
    if (v48[0] != &v49) {
      free(v48[0]);
    }
    goto LABEL_32;
  }
  __int16 v18 = v53;
  uint64_t v19 = (uint64_t *)v50;
  uint64_t v20 = v16;
  while (1)
  {
    uint64_t v22 = *v18++;
    uint64_t v21 = v22;
    uint64_t v23 = *v19++;
    if (v21 != v23) {
      break;
    }
    if (!--v20) {
      goto LABEL_18;
    }
  }
LABEL_31:
  uint64_t v5 = 0;
LABEL_32:
  if (v50 != &v52) {
    free(v50);
  }
  if (v53 != v55) {
    free(v53);
  }
  return v5;
}

ZinIrHalH13g *mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a1 + 8), *(void *)(a2 + 24), a3, a4);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a1 + 32))(a1, a2, v6);
  return v6;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v25[28] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"memref.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  unsigned int v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    unsigned int v12 = v23;
  }
  *(void *)(v22 + 8 * v12) = v11;
  ++v23;
  unint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::~ComposeReassociativeReshapeOps(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::~ComposeReassociativeReshapeOps(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v30 = a2;
  uint64_t v34 = *(void **)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    uint64_t v6 = result;
    BOOL v7 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id) {
      uint64_t v9 = result;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v29 = v9;
    if (!v8) {
      return 0;
    }
    uint64_t v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    uint64_t v11 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    uint64_t v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if (mlir::hasNonIdentityLayout(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    uint64_t v15 = v34;
    unint64_t v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    uint64_t v17 = (char *)v31;
    if (v32)
    {
      uint64_t v18 = 32 * v32;
      do
      {
        uint64_t v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19) {
          free(v19);
        }
        v18 -= 32;
      }
      while (v18);
      uint64_t v17 = (char *)v31;
    }
    if (v17 != (char *)&v33) {
      free(v17);
    }
    __int16 v20 = (char *)v34;
    if (v35)
    {
      uint64_t v21 = 32 * v35;
      do
      {
        uint64_t v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22) {
          free(v22);
        }
        v21 -= 32;
      }
      while (v21);
      __int16 v20 = (char *)v34;
    }
    if (v20 != (char *)&v36) {
      free(v20);
    }
    if (!v40)
    {
      return 0;
    }
    else
    {
      uint64_t v23 = v30;
      uint64_t v34 = *(void **)(*(void *)(v29 + 72) + 24);
      unsigned int v24 = mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(void *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        uint64_t v25 = v37;
        if (v38)
        {
          uint64_t v26 = 32 * v38;
          do
          {
            unint64_t v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27) {
              free(v27);
            }
            v26 -= 32;
          }
          while (v26);
          uint64_t v25 = v37;
        }
        if (v25 != (char *)&v39) {
          free(v25);
        }
      }
      return 1;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v7 = mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a1 + 1, *(void *)(a2 + 24), a3, a4, a5);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a1 + 32))(a1, a2, v7);
  return v7;
}

char **std::optional<llvm::SmallVector<llvm::SmallVector<long long,2u>,1u>>::~optional(char **a1)
{
  if (*((unsigned char *)a1 + 48))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *((unsigned int *)a1 + 2);
    if (v3)
    {
      uint64_t v4 = 32 * v3;
      do
      {
        uint64_t v5 = *(char **)&v2[v4 - 32];
        if (&v2[v4 - 16] != v5) {
          free(v5);
        }
        v4 -= 32;
      }
      while (v4);
      uint64_t v2 = *a1;
    }
    if (v2 != (char *)(a1 + 2)) {
      free(v2);
    }
  }
  return a1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v33[2] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.expand_shape", (const unsigned __int8 *)0x13, Context);
  if (!v12)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"memref.expand_shape";
    v29[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  uint64_t v15 = *(void *)a5;
  uint64_t v16 = *(unsigned int *)(a5 + 8);
  uint64_t v27 = v14;
  uint64_t v28 = v13;
  uint64_t v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  uint64_t ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  uint64_t v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  __int16 v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  uint64_t v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  ZinMirCacheTensors::ZinMirCacheTensors(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  uint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

void *mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::~ComposeExpandOfCollapseOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::~ComposeExpandOfCollapseOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v59[16] = *MEMORY[0x263EF8340];
  uint64_t v51 = a2;
  uint64_t v57 = *(uint64_t ***)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v6 = DefiningOp;
  BOOL v7 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id;
  uint64_t v9 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id ? DefiningOp : 0;
  uint64_t v50 = v9;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = (void *)(*(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8) : 0;
  v49[0] = v10;
  v49[1] = v11;
  uint64_t v12 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
  uint64_t v13 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8) : 0;
  v48[0] = (uint64_t)v13;
  v48[1] = v14;
  if ((mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  uint64_t v15 = *(_DWORD *)(v6 + 36) ? v6 - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if (mlir::hasNonIdentityLayout(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v49);
  uint64_t v18 = v17;
  mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  if (v49[0] == v48[0]) {
    return 0;
  }
  uint64_t v20 = v19;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v50, (uint64_t)&v57);
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v51, (uint64_t)&v54);
  if (v18 <= v20)
  {
    uint64_t v32 = v54;
    uint64_t v33 = v55;
    uint64_t v34 = v57;
    uint64_t v35 = v58;
    uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    unint64_t v38 = v37;
    uint64_t v39 = mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation((unint64_t)v32, v33, v34, v35, Shape, v38, (uint64_t)v52, v39, v40);
    if (v53)
    {
      uint64_t v47 = *(void *)(*(void *)(v50 + 72) + 24);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3, v51, v48, &v47, (uint64_t)v52);
      goto LABEL_30;
    }
LABEL_31:
    uint64_t v30 = 0;
    goto LABEL_32;
  }
  unint64_t v21 = (unint64_t)v57;
  uint64_t v22 = v58;
  uint64_t v23 = (uint64_t **)v54;
  uint64_t v24 = v55;
  uint64_t v25 = mlir::ShapedType::getShape((mlir::ShapedType *)v49);
  unint64_t v27 = v26;
  uint64_t v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
  mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation(v21, v22, v23, v24, v25, v27, (uint64_t)v52, v28, v29);
  if (!v53) {
    goto LABEL_31;
  }
  uint64_t v47 = *(void *)(*(void *)(v50 + 72) + 24);
  mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3, v51, v48, &v47, (uint64_t)v52);
LABEL_30:
  uint64_t v30 = 1;
LABEL_32:
  std::optional<llvm::SmallVector<llvm::SmallVector<long long,2u>,1u>>::~optional(v52);
  uint64_t v41 = (char *)v54;
  if (v55)
  {
    uint64_t v42 = 32 * v55;
    do
    {
      unint64_t v43 = *(char **)&v41[v42 - 32];
      if (&v41[v42 - 16] != v43) {
        free(v43);
      }
      v42 -= 32;
    }
    while (v42);
    uint64_t v41 = (char *)v54;
  }
  if (v41 != (char *)&v56) {
    free(v41);
  }
  uint64_t v44 = v57;
  if (v58)
  {
    uint64_t v45 = 4 * v58;
    do
    {
      uint64_t v46 = (char *)v44[v45 - 4];
      if (&v44[v45 - 2] != (uint64_t **)v46) {
        free(v46);
      }
      v45 -= 4;
    }
    while (v45 * 8);
    uint64_t v44 = v57;
  }
  if (v44 != v59) {
    free(v44);
  }
  return v30;
}

void mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, unint64_t a9)
{
  uint64_t v9 = a5;
  v53[16] = *MEMORY[0x263EF8340];
  uint64_t v51 = v53;
  uint64_t v52 = 0x400000000;
  if (!a2)
  {
    mlir::getReassociationIndicesForCollapse(a5, a6, a8, a9, a7);
    uint64_t v36 = (char *)v51;
    goto LABEL_55;
  }
  uint64_t v10 = a3;
  unint64_t v11 = a1;
  unint64_t v42 = a1 + 32 * a2;
  unint64_t v43 = &a3[4 * a4];
LABEL_4:
  if (v10 != v43)
  {
    unint64_t v12 = *(unsigned int *)(v11 + 8);
    uint64_t v13 = v9 + 8 * **(void **)v11;
    uint64_t v14 = **v10;
    unint64_t v15 = *((unsigned int *)v10 + 2);
    uint64_t v16 = a8 + 8 * v14;
    if (v12 == v15)
    {
      if (memcmp((const void *)(v9 + 8 * **(void **)v11), (const void *)(a8 + 8 * v14), 8 * v12)) {
        goto LABEL_49;
      }
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::push_back((uint64_t)&v51, v11);
    }
    mlir::getReassociationIndicesForCollapse(v13, v12, v16, v15, (uint64_t)&v47);
    if (!v50)
    {
LABEL_49:
      *(unsigned char *)a7 = 0;
      *(unsigned char *)(a7 + 48) = 0;
      uint64_t v36 = (char *)v51;
      uint64_t v37 = v52;
      if (!v52) {
        goto LABEL_55;
      }
      goto LABEL_50;
    }
    uint64_t v17 = (char *)v47;
    if (!v48) {
      goto LABEL_42;
    }
    uint64_t v18 = (char *)v47 + 32 * v48;
    while (1)
    {
      uint64_t v44 = v46;
      uint64_t v45 = 0x200000000;
      uint64_t v19 = *((unsigned int *)v17 + 2);
      if (v19)
      {
        unsigned int v20 = 0;
        unint64_t v21 = *(uint64_t **)v17;
        uint64_t v22 = 8 * v19;
        do
        {
          uint64_t v23 = *v21;
          uint64_t v24 = **(void **)v11;
          if (v20 >= HIDWORD(v45))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v20 + 1, 8);
            unsigned int v20 = v45;
          }
          *((void *)v44 + v20) = v24 + v23;
          unsigned int v20 = v45 + 1;
          LODWORD(v45) = v45 + 1;
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)v51;
      if (v52 >= HIDWORD(v52))
      {
        unint64_t v32 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 32 * v52 > (char *)&v44)
        {
          int64_t v33 = (char *)&v44 - (unsigned char *)v51;
          llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow((uint64_t)&v51, v32);
          uint64_t v25 = (char *)v51;
          unint64_t v26 = (void **)((char *)v51 + v33);
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow((uint64_t)&v51, v32);
          unint64_t v26 = &v44;
          uint64_t v25 = (char *)v51;
        }
      }
      else
      {
        unint64_t v26 = &v44;
      }
      unint64_t v27 = (void **)&v25[32 * v52];
      uint64_t v28 = v27 + 2;
      *unint64_t v27 = v27 + 2;
      v27[1] = (void *)0x200000000;
      unint64_t v29 = *((unsigned int *)v26 + 2);
      if (v27 == v26 || v29 == 0) {
        goto LABEL_29;
      }
      if (v29 < 3) {
        break;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v27, v27 + 2, *((unsigned int *)v26 + 2), 8);
      uint64_t v31 = *((unsigned int *)v26 + 2);
      if (v31)
      {
        uint64_t v28 = *v27;
LABEL_27:
        memcpy(v28, *v26, 8 * v31);
      }
      *((_DWORD *)v27 + 2) = v29;
LABEL_29:
      LODWORD(v52) = v52 + 1;
      if (v44 != v46) {
        free(v44);
      }
      v17 += 32;
      if (v17 == v18)
      {
        uint64_t v9 = a5;
        if (v50)
        {
          uint64_t v17 = (char *)v47;
          if (v48)
          {
            uint64_t v34 = 32 * v48;
            do
            {
              uint64_t v35 = *(char **)&v17[v34 - 32];
              if (&v17[v34 - 16] != v35) {
                free(v35);
              }
              v34 -= 32;
            }
            while (v34);
            uint64_t v17 = (char *)v47;
            uint64_t v9 = a5;
          }
LABEL_42:
          if (v17 != (char *)&v49) {
            free(v17);
          }
        }
        v11 += 32;
        v10 += 4;
        if (v11 == v42) {
          goto LABEL_45;
        }
        goto LABEL_4;
      }
    }
    uint64_t v31 = *((unsigned int *)v26 + 2);
    goto LABEL_27;
  }
LABEL_45:
  *(void *)a7 = a7 + 16;
  *(void *)(a7 + 8) = 0x100000000;
  if (v52) {
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=(a7, (uint64_t)&v51);
  }
  *(unsigned char *)(a7 + 48) = 1;
  uint64_t v36 = (char *)v51;
  uint64_t v37 = v52;
  if (v52)
  {
LABEL_50:
    uint64_t v38 = 32 * v37;
    do
    {
      uint64_t v39 = *(char **)&v36[v38 - 32];
      if (&v36[v38 - 16] != v39) {
        free(v39);
      }
      v38 -= 32;
    }
    while (v38);
    uint64_t v36 = (char *)v51;
  }
LABEL_55:
  if (v36 != (char *)v53) {
    free(v36);
  }
}

ZinIrHalH13g *mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v7 = mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a1 + 1, *(void *)(a2 + 24), a3, a4, a5);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a1 + 32))(a1, a2, v7);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v33[2] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"memref.collapse_shape";
    v29[3] = 21;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  uint64_t v15 = *(void *)a5;
  uint64_t v16 = *(unsigned int *)(a5 + 8);
  uint64_t v27 = v14;
  uint64_t v28 = v13;
  uint64_t v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  uint64_t ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  uint64_t v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  __int16 v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  uint64_t v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  ZinMirCacheTensors::ZinMirCacheTensors(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  unint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

void *mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::~ComposeReassociativeReshapeOps(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::~ComposeReassociativeReshapeOps(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v30 = a2;
  uint64_t v34 = *(void **)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    uint64_t v6 = result;
    BOOL v7 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id) {
      uint64_t v9 = result;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v29 = v9;
    if (!v8) {
      return 0;
    }
    uint64_t v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    uint64_t v11 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    uint64_t v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if (mlir::hasNonIdentityLayout(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    uint64_t v15 = v34;
    unint64_t v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    uint64_t v17 = (char *)v31;
    if (v32)
    {
      uint64_t v18 = 32 * v32;
      do
      {
        uint64_t v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19) {
          free(v19);
        }
        v18 -= 32;
      }
      while (v18);
      uint64_t v17 = (char *)v31;
    }
    if (v17 != (char *)&v33) {
      free(v17);
    }
    uint64_t v20 = (char *)v34;
    if (v35)
    {
      uint64_t v21 = 32 * v35;
      do
      {
        uint64_t v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22) {
          free(v22);
        }
        v21 -= 32;
      }
      while (v21);
      uint64_t v20 = (char *)v34;
    }
    if (v20 != (char *)&v36) {
      free(v20);
    }
    if (!v40)
    {
      return 0;
    }
    else
    {
      uint64_t v23 = v30;
      uint64_t v34 = *(void **)(*(void *)(v29 + 72) + 24);
      uint64_t v24 = mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(void *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        uint64_t v25 = v37;
        if (v38)
        {
          uint64_t v26 = 32 * v38;
          do
          {
            uint64_t v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27) {
              free(v27);
            }
            v26 -= 32;
          }
          while (v26);
          uint64_t v25 = v37;
        }
        if (v25 != (char *)&v39) {
          free(v25);
        }
      }
      return 1;
    }
  }
  return result;
}

void *mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::~ComposeCollapseOfExpandOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::~ComposeCollapseOfExpandOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  v54[16] = *MEMORY[0x263EF8340];
  uint64_t v42 = a2;
  uint64_t v52 = *(char **)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v52);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v6 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id;
  uint64_t v8 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id ? DefiningOp : 0;
  uint64_t v41 = v8;
  if (!v7) {
    return 0;
  }
  uint64_t v9 = (void *)(*(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    uint64_t v4 = v42;
  }
  else
  {
    uint64_t v10 = 0;
  }
  v40[0] = v9;
  v40[1] = v10;
  uint64_t v11 = *(_DWORD *)(v4 + 36) ? v4 - 16 : 0;
  uint64_t v12 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v12 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8) : 0;
  v39[0] = (uint64_t)v12;
  v39[1] = v13;
  if ((mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(v42 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(void *)(*(void *)(*(void *)(v41 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  uint64_t v14 = *(_DWORD *)(v41 + 36) ? v41 - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  if (mlir::hasNonIdentityLayout(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v40);
  uint64_t v17 = v16;
  mlir::ShapedType::getShape((mlir::ShapedType *)v39);
  if (v40[0] == v39[0]) {
    return 0;
  }
  uint64_t v19 = v18;
  uint64_t v52 = (char *)v54;
  uint64_t v53 = 0x400000000;
  uint64_t v49 = v51;
  uint64_t v50 = 0x400000000;
  if (v17 <= v18)
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v42, (uint64_t)&v46);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v52, (uint64_t)&v46);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v46);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v41, (uint64_t)&v46);
  }
  else
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v41, (uint64_t)&v46);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v52, (uint64_t)&v46);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v46);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v42, (uint64_t)&v46);
  }
  llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v49, (uint64_t)&v46);
  llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v46);
  uint64_t v46 = v48;
  uint64_t v47 = 0x400000000;
  if (v50)
  {
    unint64_t v22 = 0;
    uint64_t v23 = (char *)v49;
    uint64_t v24 = (char *)v49 + 32 * v50;
    while (1)
    {
      unsigned int v25 = 0;
      unint64_t v43 = v45;
      uint64_t v44 = 0x200000000;
      uint64_t v26 = 32 * v22;
      while (1)
      {
        if (v22 >= v53)
        {
LABEL_36:
          llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::push_back((uint64_t)&v46, (unint64_t)&v43);
          char v28 = 1;
          uint64_t v29 = v43;
          if (v43 == v45) {
            goto LABEL_38;
          }
LABEL_37:
          free(v29);
          goto LABEL_38;
        }
        uint64_t v27 = *(void *)(*(void *)&v52[v26] + 8 * *(unsigned int *)&v52[v26 + 8] - 8);
        if (v27 > *(void *)(*(void *)v23 + 8 * *((unsigned int *)v23 + 2) - 8)) {
          break;
        }
        if (v25 >= HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v25 + 1, 8);
          unsigned int v25 = v44;
        }
        *((void *)v43 + v25) = v22;
        unsigned int v25 = v44 + 1;
        LODWORD(v44) = v44 + 1;
        v26 += 32;
        ++v22;
        if (v27 == *(void *)(*(void *)v23 + 8 * *((unsigned int *)v23 + 2) - 8)) {
          goto LABEL_36;
        }
      }
      char v28 = 0;
      uint64_t v29 = v43;
      if (v43 != v45) {
        goto LABEL_37;
      }
LABEL_38:
      if ((v28 & 1) == 0) {
        break;
      }
      v23 += 32;
      if (v23 == v24) {
        goto LABEL_43;
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
LABEL_43:
    if (v17 <= v19)
    {
      unint64_t v43 = *(void **)(*(void *)(v41 + 72) + 24);
      if (v17 < v19) {
        mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3, v42, v39, (uint64_t *)&v43, (uint64_t)&v46);
      }
      else {
        mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((uint64_t)a3, v42, v39, (uint64_t *)&v43);
      }
    }
    else
    {
      unint64_t v43 = *(void **)(*(void *)(v41 + 72) + 24);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3, v42, v39, (uint64_t *)&v43, (uint64_t)&v46);
    }
    uint64_t v20 = 1;
  }
  uint64_t v30 = (char *)v46;
  if (v47)
  {
    uint64_t v31 = 32 * v47;
    do
    {
      unsigned int v32 = *(char **)&v30[v31 - 32];
      if (&v30[v31 - 16] != v32) {
        free(v32);
      }
      v31 -= 32;
    }
    while (v31);
    uint64_t v30 = (char *)v46;
  }
  if (v30 != v48) {
    free(v30);
  }
  uint64_t v33 = (char *)v49;
  if (v50)
  {
    uint64_t v34 = 32 * v50;
    do
    {
      unsigned int v35 = *(char **)&v33[v34 - 32];
      if (&v33[v34 - 16] != v35) {
        free(v35);
      }
      v34 -= 32;
    }
    while (v34);
    uint64_t v33 = (char *)v49;
  }
  if (v33 != v51) {
    free(v33);
  }
  uint64_t v36 = v52;
  if (v53)
  {
    uint64_t v37 = 32 * v53;
    do
    {
      unsigned int v38 = *(char **)&v36[v37 - 32];
      if (&v36[v37 - 16] != v38) {
        free(v38);
      }
      v37 -= 32;
    }
    while (v37);
    uint64_t v36 = v52;
  }
  if (v36 != (char *)v54) {
    free(v36);
  }
  return v20;
}

void CollapseShapeOpMemRefCastFolder::~CollapseShapeOpMemRefCastFolder(CollapseShapeOpMemRefCastFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t CollapseShapeOpMemRefCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v30[16] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(*(void *)(a2 + 72) + 24);
  uint64_t v27 = a2;
  char v28 = v4;
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (result)
  {
    uint64_t v6 = *(void **)(*(void *)(result + 48) + 16);
    if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      uint64_t result = mlir::memref::CastOp::canFoldIntoConsumerOp(result);
      if (result)
      {
        unint64_t v8 = *(void *)(*(void *)(*(void *)(v7 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
        mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v27, (uint64_t)&v28);
        uint64_t v9 = mlir::memref::CollapseShapeOp::computeCollapsedType(v8, (uint64_t)v28, v29);
        uint64_t v10 = (char *)v28;
        if (v29)
        {
          uint64_t v11 = 32 * v29;
          do
          {
            uint64_t v12 = *(char **)&v10[v11 - 32];
            if (&v10[v11 - 16] != v12) {
              free(v12);
            }
            v11 -= 32;
          }
          while (v11);
          uint64_t v10 = (char *)v28;
        }
        if (v10 != (char *)v30) {
          free(v10);
        }
        if (*(_DWORD *)(v27 + 36)) {
          uint64_t v13 = v27 - 16;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v9 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v20 = v27;
          (*(void (**)(uint64_t *, uint64_t))(*a3 + 72))(a3, v27);
          uint64_t v21 = *(uint64_t **)(v27 + 72);
          unint64_t v22 = *(uint64_t **)(*(void *)(v7 + 72) + 24);
          uint64_t v23 = (uint64_t *)v21[1];
          if (v23)
          {
            *uint64_t v23 = *v21;
            if (*v21) {
              *(void *)(*v21 + 8) = v21[1];
            }
          }
          v21[3] = (uint64_t)v22;
          v21[1] = (uint64_t)v22;
          uint64_t v24 = *v22;
          uint64_t *v21 = *v22;
          if (v24) {
            *(void *)(v24 + 8) = v21;
          }
          *unint64_t v22 = (uint64_t)v21;
          (*(void (**)(uint64_t *, uint64_t))(*a3 + 80))(a3, v20);
        }
        else
        {
          uint64_t v14 = *(void *)(v27 + 24);
          uint64_t v25 = *(void *)(*(void *)(v7 + 72) + 24);
          mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v27, (uint64_t)&v28);
          uint64_t v26 = (uint64_t)mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::detail::TypedValue<mlir::BaseMemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>>(a3 + 1, v14, &v25, (uint64_t)&v28)- 16;
          uint64_t v15 = (char *)v28;
          if (v29)
          {
            uint64_t v16 = 32 * v29;
            do
            {
              uint64_t v17 = *(char **)&v15[v16 - 32];
              if (&v15[v16 - 16] != v17) {
                free(v17);
              }
              v16 -= 32;
            }
            while (v16);
            uint64_t v15 = (char *)v28;
          }
          if (v15 != (char *)v30) {
            free(v15);
          }
          uint64_t v18 = v27;
          char v28 = (void *)(*(void *)(v27 - 8) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v19 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 1), *(void *)(v27 + 24), (uint64_t *)&v28, &v26);
          (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v18, v19);
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::detail::TypedValue<mlir::BaseMemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"memref.collapse_shape";
    v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::memref::CollapseShapeOp::build(a1, (mlir::Attribute *)v19, *a3, *(void *)a4, *(unsigned int *)(a4 + 8), 0, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::RewritePatternSet::addImpl<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>,mlir::MLIRContext *&>()
{
}

void mlir::RewritePattern::create<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>,mlir::MLIRContext *&>()
{
}

void *mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v35[6] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&__src);
  uint64_t v33 = v35;
  uint64_t v34 = 0x600000000;
  int v4 = v31;
  uint64_t v5 = __src;
  if (v31)
  {
    if (__src == v32)
    {
      unsigned int v6 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v31, 8),
            unsigned int v6 = v31,
            uint64_t v5 = __src,
            v31))
      {
        memcpy(v33, v5, 8 * v6);
        uint64_t v5 = __src;
      }
      LODWORD(v34) = v4;
    }
    else
    {
      uint64_t v33 = __src;
      uint64_t v34 = v31;
      __src = v32;
      HIDWORD(v31) = 0;
      uint64_t v5 = v32;
    }
    LODWORD(v31) = 0;
  }
  if (v5 != v32) {
    free(v5);
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&__dst);
  __src = v32;
  uint64_t v31 = 0x600000000;
  int v7 = v28;
  unint64_t v8 = __dst;
  if (v28)
  {
    if (__dst == v29)
    {
      unsigned int v9 = v28;
      if (v28 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v32, v28, 8),
            unsigned int v9 = v28,
            unint64_t v8 = __dst,
            v28))
      {
        memcpy(__src, v8, 8 * v9);
        unint64_t v8 = __dst;
      }
      LODWORD(v31) = v7;
    }
    else
    {
      __src = __dst;
      uint64_t v31 = v28;
      __dst = v29;
      HIDWORD(v28) = 0;
      unint64_t v8 = v29;
    }
    LODWORD(v28) = 0;
  }
  if (v8 != v29) {
    free(v8);
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&v24);
  __dst = v29;
  uint64_t v28 = 0x600000000;
  int v10 = v25;
  uint64_t v11 = v24;
  if (v25)
  {
    if (v24 == v26)
    {
      unsigned int v12 = v25;
      if (v25 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v29, v25, 8),
            unsigned int v12 = v25,
            uint64_t v11 = v24,
            v25))
      {
        memcpy(__dst, v11, 8 * v12);
        uint64_t v11 = v24;
      }
      LODWORD(v28) = v10;
    }
    else
    {
      __dst = v24;
      uint64_t v28 = v25;
      uint64_t v24 = v26;
      HIDWORD(v25) = 0;
      uint64_t v11 = v26;
    }
    LODWORD(v25) = 0;
  }
  if (v11 != v26) {
    free(v11);
  }
  if ((mlir::foldDynamicIndexList((uint64_t)&v33, 1)
     || mlir::foldDynamicIndexList((uint64_t)&__src, 1)
     || mlir::foldDynamicIndexList((uint64_t)&__dst, 0))
    && (uint64_t v21 = SubViewReturnTypeCanonicalizer::operator()((uint64_t)&v24, v22, v33, v34, (uint64_t *)__src, v31, (uint64_t *)__dst, v28)) != 0)
  {
    uint64_t v13 = *(void *)(v22 + 24);
    uint64_t v24 = *(void **)(*(void *)(v22 + 72) + 24);
    uint64_t v14 = mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(a3 + 1, v13, &v21, (uint64_t *)&v24, (uint64_t)&v33, (uint64_t)&__src, (uint64_t)&__dst);
    uint64_t v15 = v22;
    uint64_t v24 = v14;
    if (*(_DWORD *)(v22 + 36)) {
      uint64_t v16 = v22 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v23 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(v15 + 24), (uint64_t *)&v23, &v24);
    (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v15, v17);
    uint64_t v18 = 1;
    uint64_t v19 = __dst;
    if (__dst != v29) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = __dst;
    if (__dst != v29) {
LABEL_39:
    }
      free(v19);
  }
  if (__src != v32) {
    free(__src);
  }
  if (v33 != v35) {
    free(v33);
  }
  return v18;
}

uint64_t SubViewReturnTypeCanonicalizer::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  void v44[7] = *MEMORY[0x263EF8340];
  uint64_t v36 = a2;
  uint64_t v9 = mlir::memref::SubViewOp::inferResultType(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0;
  }
  uint64_t v35 = v9;
  mlir::memref::SubViewOp::getDroppedDims((mlir::memref::SubViewOp *)&v36, &v34);
  unint64_t v10 = v34;
  if (v34)
  {
    if (((v34 >> 1) & ~(-1 << (v34 >> 58))) != 0)
    {
LABEL_10:
      mlir::getStridesAndOffset(v35, (uint64_t)&v43);
      char v40 = v42;
      uint64_t v41 = 0x600000000;
      uint64_t v37 = v39;
      uint64_t v38 = 0x600000000;
      if (a6 < 1)
      {
        unsigned int v15 = 0;
      }
      else
      {
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        if (v10)
        {
          do
          {
            if (((((v10 >> 1) & ~(-1 << (v10 >> 58))) >> v16) & 1) == 0)
            {
              uint64_t v21 = *((void *)v43 + v16);
              uint64_t v22 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v38 + 1, 8);
                uint64_t v22 = v38;
              }
              *((void *)v37 + v22) = v21;
              LODWORD(v38) = v38 + 1;
              uint64_t v23 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35) + 8 * v16);
              uint64_t v24 = v41;
              if (v41 >= (unint64_t)HIDWORD(v41))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v41 + 1, 8);
                uint64_t v24 = v41;
              }
              *((void *)v40 + v24) = v23;
              unsigned int v15 = v41 + 1;
              LODWORD(v41) = v41 + 1;
            }
            ++v16;
          }
          while (a6 != v16);
        }
        else
        {
          do
          {
            if (((*(void *)(*(void *)v10 + 8 * (v16 >> 6)) >> v16) & 1) == 0)
            {
              uint64_t v17 = *((void *)v43 + v16);
              uint64_t v18 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v38 + 1, 8);
                uint64_t v18 = v38;
              }
              *((void *)v37 + v18) = v17;
              LODWORD(v38) = v38 + 1;
              uint64_t v19 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35) + 8 * v16);
              uint64_t v20 = v41;
              if (v41 >= (unint64_t)HIDWORD(v41))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v41 + 1, 8);
                uint64_t v20 = v41;
              }
              *((void *)v40 + v20) = v19;
              unsigned int v15 = v41 + 1;
              LODWORD(v41) = v41 + 1;
            }
            ++v16;
          }
          while (a6 != v16);
        }
      }
      uint64_t v25 = (uint64_t *)v40;
      uint64_t v26 = (mlir::AffineMap *)v15;
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35);
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v35);
      unsigned int v29 = (void *)mlir::StridedLayoutAttr::get(Context, v44[6], (uint64_t)v37, v38);
      uint64_t v30 = v29;
      if (v29) {
        uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v29 + 8);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v35);
      uint64_t v14 = mlir::MemRefType::get(v25, v26, RHS, v30, v31, LayerSchedule);
      if (v37 != v39) {
        free(v37);
      }
      if (v40 != v42) {
        free(v40);
      }
      if (v43 != v44) {
        free(v43);
      }
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(v34 + 8);
    if (v11)
    {
      unsigned int v12 = *(void **)v34;
      uint64_t v13 = 8 * v11;
      while (!*v12)
      {
        ++v12;
        v13 -= 8;
        if (!v13) {
          goto LABEL_27;
        }
      }
      goto LABEL_10;
    }
  }
LABEL_27:
  uint64_t v14 = v35;
LABEL_38:
  if ((v10 & 1) == 0 && v10)
  {
    if (*(void *)v10 != v10 + 16) {
      free(*(void **)v10);
    }
    MEMORY[0x21667D3C0](v10, 0x1080C40EF38A13ELL);
  }
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.subview", (const unsigned __int8 *)0xE, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    void v23[2] = (uint64_t)"memref.subview";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::memref::SubViewOp::build(a1, (uint64_t)v25, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *(uint64_t **)a7, *(unsigned int *)(a7 + 8), 0, 0);
  uint64_t v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void anonymous namespace'::SubViewOpMemRefCastFolder::~SubViewOpMemRefCastFolder(_anonymous_namespace_::SubViewOpMemRefCastFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubViewOpMemRefCastFolder::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, mlir::MLIRContext **a3)
{
  v115[6] = *MEMORY[0x263EF8340];
  uint64_t v95 = a2;
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 68);
    if (v4)
    {
      uint64_t v5 = (void **)(*(void *)(a2 + 72) + 24);
      while (1)
      {
        unsigned int v6 = (uint64_t *)*v5;
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)DefiningOp);
        v113 = v6;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v113);
        if (DefiningOp)
        {
          uint64_t DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v7);
          if (DefiningOp) {
            return 0;
          }
        }
        v5 += 4;
        if (!--v4)
        {
          a2 = v95;
          break;
        }
      }
    }
  }
  v113 = *(uint64_t **)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v113);
  if (result)
  {
    uint64_t v9 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
      return 0;
    }
    uint64_t result = mlir::memref::CastOp::canFoldIntoConsumerOp(result);
    if (result)
    {
      if (*(_DWORD *)(v95 + 36)) {
        uint64_t v10 = v95 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v11 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v12 = *(void *)(*(void *)(*(void *)(v95 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v13 = *(void *)(*(void *)(*(void *)(v9 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v107);
      uint64_t v14 = (uint64_t *)v107;
      uint64_t v15 = v108;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v104);
      char v16 = (uint64_t *)v104;
      uint64_t v17 = v105;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v101);
      unint64_t v100 = v13;
      uint64_t v99 = mlir::memref::SubViewOp::inferResultType(v13, v14, v15, v16, v17, (uint64_t *)v101, v102);
      computeMemRefRankReductionMask(&v97, v12, v11, (uint64_t)v16, v17);
      if (!(_BYTE)v98)
      {
        uint64_t v25 = 0;
LABEL_70:
        unint64_t v100 = v25;
        if (v101 != &v103) {
          free(v101);
        }
        if (v104 != &v106) {
          free(v104);
        }
        if (v107 != &v109) {
          free(v107);
        }
        if (!v25) {
          return 0;
        }
        uint64_t v76 = *(void *)(v95 + 24);
        uint64_t RawStringData = *(void *)(*(void *)(v9 + 72) + 24);
        unint64_t v77 = *(unsigned int *)(v95 + 44);
        if (HIBYTE(*(_DWORD *)(v95 + 44))) {
          v78 = (unsigned int *)(v95 + 16 * ((v77 >> 23) & 1) + 64);
        }
        else {
          v78 = 0;
        }
        uint64_t v79 = v78[6];
        unsigned int v80 = v78[7];
        if ((v77 & 0x800000) != 0)
        {
          uint64_t v81 = v80 + v79;
          v113 = (uint64_t *)(*(void *)(v95 + 72) + 32 * v79);
          uint64_t v114 = v81 - v79;
          uint64_t v82 = v78[8] + v81;
          v110 = (void *)(*(void *)(v95 + 72) + 32 * v81);
          uint64_t v111 = v82 - v81;
          uint64_t v83 = *(void *)(v95 + 72);
        }
        else
        {
          uint64_t v83 = 0;
          uint64_t v93 = v80 + v79;
          v113 = (uint64_t *)(32 * v79);
          uint64_t v114 = v93 - v79;
          uint64_t v82 = v78[8] + v93;
          v110 = (void *)(32 * v93);
          uint64_t v111 = v82 - v93;
        }
        uint64_t v84 = v78[9] + v82 - v82;
        v107 = (void *)(v83 + 32 * v82);
        uint64_t v108 = v84;
        v104 = *(void **)(v95 + 16 * ((v77 >> 23) & 1) + 64);
        v104 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v104);
        uint64_t v105 = v85;
        unint64_t v86 = v95 + 16 * (((unint64_t)*(unsigned int *)(v95 + 44) >> 23) & 1) + 64;
        if (!HIBYTE(*(_DWORD *)(v95 + 44))) {
          unint64_t v86 = 0;
        }
        v101 = *(void **)(v86 + 8);
        v101 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v101);
        uint64_t v102 = v87;
        unint64_t v88 = v95 + 16 * (((unint64_t)*(unsigned int *)(v95 + 44) >> 23) & 1) + 64;
        if (!HIBYTE(*(_DWORD *)(v95 + 44))) {
          unint64_t v88 = 0;
        }
        unint64_t v97 = *(void *)(v88 + 16);
        unint64_t v97 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v97);
        uint64_t v98 = v89;
        uint64_t v99 = (uint64_t)mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::BaseMemRefType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(a3 + 1, v76, (uint64_t *)&v100, &RawStringData, (uint64_t)&v113, (uint64_t)&v110, (uint64_t)&v107, (uint64_t *)&v104, (uint64_t *)&v101, (uint64_t *)&v97)- 16;
        uint64_t v90 = v95;
        if (*(_DWORD *)(v95 + 36)) {
          uint64_t v91 = v95 - 16;
        }
        else {
          uint64_t v91 = 0;
        }
        v113 = (uint64_t *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v91, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        v92 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 1), *(void *)(v90 + 24), (uint64_t *)&v113, &v99);
        (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v90, v92);
        return 1;
      }
      uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v99);
      v113 = v115;
      uint64_t v114 = 0x600000000;
      v110 = v112;
      uint64_t v111 = 0x600000000;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      unint64_t v19 = v97;
      if (v97)
      {
        uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)((v97 >> 1) & ~(-1 << (v97 >> 58))));
        v26.i16[0] = vaddlv_u8(v26);
        int v23 = v26.i32[0];
      }
      else
      {
        uint64_t v20 = *(unsigned int *)(v97 + 8);
        if (v20)
        {
          uint64_t v21 = *(int8x8_t **)v97;
          unint64_t v22 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v22 >= 7)
          {
            unint64_t v27 = v22 + 1;
            uint64_t v28 = (v22 + 1) & 0x3FFFFFFFFFFFFFF8;
            __int16 v24 = &v21[v28];
            unsigned int v29 = (int8x16_t *)&v21[4];
            int32x4_t v30 = 0uLL;
            uint64_t v31 = v28;
            int32x4_t v32 = 0uLL;
            do
            {
              int8x16_t v33 = v29[-2];
              int8x16_t v34 = v29[-1];
              int8x16_t v35 = *v29;
              int8x16_t v36 = v29[1];
              v29 += 4;
              int32x4_t v30 = vaddq_s32(v30, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v33)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v34))))));
              int32x4_t v32 = vaddq_s32(v32, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v35)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v36))))));
              v31 -= 8;
            }
            while (v31);
            int v23 = vaddvq_s32(vaddq_s32(v32, v30));
            if (v27 == v28) {
              goto LABEL_29;
            }
          }
          else
          {
            int v23 = 0;
            __int16 v24 = *(int8x8_t **)v97;
          }
          uint64_t v37 = &v21[v20];
          do
          {
            int8x8_t v38 = *v24++;
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
            v39.i16[0] = vaddlv_u8(v39);
            v23 += v39.i32[0];
          }
          while (v24 != v37);
        }
        else
        {
          int v23 = 0;
        }
      }
LABEL_29:
      unint64_t v40 = (v18 - v23);
      if (HIDWORD(v114) < v40) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v40, 8);
      }
      v94 = a3;
      if (HIDWORD(v111) < v40) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v40, 8);
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      uint64_t v42 = v41;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      uint64_t v45 = v44;
      uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&RawStringData);
      if (v42 && v45 && v47)
      {
        uint64_t v48 = AttrData;
        uint64_t v49 = 8 * v47;
        uint64_t v50 = 8 * v45;
        uint64_t v51 = 0;
        if (v19)
        {
          uint64_t v59 = v49 - 8;
          uint64_t v60 = v50 - 8;
          uint64_t v61 = v42 - 1;
          do
          {
            if (((((v19 >> 1) & ~(-1 << (v19 >> 58))) >> v51) & 1) == 0)
            {
              uint64_t v62 = *(void *)(Value + 8 * v51);
              uint64_t v63 = v114;
              if (v114 >= (unint64_t)HIDWORD(v114))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v114 + 1, 8);
                uint64_t v63 = v114;
              }
              v113[v63] = v62;
              LODWORD(v114) = v114 + 1;
              uint64_t v64 = *(void *)(v48 + 8 * v51);
              uint64_t v65 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v111 + 1, 8);
                uint64_t v65 = v111;
              }
              v110[v65] = v64;
              LODWORD(v111) = v111 + 1;
            }
            if (v61 == v51) {
              break;
            }
            if (!v60) {
              break;
            }
            ++v51;
            uint64_t v66 = v59;
            v59 -= 8;
            v60 -= 8;
          }
          while (v66);
        }
        else
        {
          uint64_t v52 = v49 - 8;
          uint64_t v53 = v50 - 8;
          do
          {
            if (((*(void *)(*(void *)v19 + 8 * (v51 >> 6)) >> v51) & 1) == 0)
            {
              uint64_t v54 = *(void *)(Value + 8 * v51);
              uint64_t v55 = v114;
              if (v114 >= (unint64_t)HIDWORD(v114))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v114 + 1, 8);
                uint64_t v55 = v114;
              }
              v113[v55] = v54;
              LODWORD(v114) = v114 + 1;
              uint64_t v56 = *(void *)(v48 + 8 * v51);
              uint64_t v57 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v111 + 1, 8);
                uint64_t v57 = v111;
              }
              v110[v57] = v56;
              LODWORD(v111) = v111 + 1;
            }
            if (v42 - 1 == v51) {
              break;
            }
            if (!v53) {
              break;
            }
            ++v51;
            uint64_t v58 = v52;
            v52 -= 8;
            v53 -= 8;
          }
          while (v58);
        }
      }
      v67 = v113;
      v68 = (mlir::AffineMap *)v114;
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v99);
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v100);
      uint64_t v71 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RawStringData);
      uint64_t v72 = (void *)mlir::StridedLayoutAttr::get(Context, v71, (uint64_t)v110, v111);
      uint64_t v73 = v72;
      if (v72) {
        uint64_t v74 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v72 + 8);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v99);
      uint64_t v25 = mlir::MemRefType::get(v67, v68, RHS, v73, v74, LayerSchedule);
      if (v110 != (void *)v112) {
        free(v110);
      }
      a3 = v94;
      if (v113 != v115) {
        free(v113);
      }
      if ((v19 & 1) == 0 && v19)
      {
        if (*(void *)v19 != v19 + 16) {
          free(*(void **)v19);
        }
        MEMORY[0x21667D3C0](v19, 0x1080C40EF38A13ELL);
      }
      goto LABEL_70;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::BaseMemRefType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  v34[38] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.subview", (const unsigned __int8 *)0xE, Context);
  if (!v20)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"memref.subview";
    v29[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v19);
  uint64_t v21 = *a3;
  uint64_t v22 = *a4;
  mlir::ValueRange::ValueRange(v33, *(void *)a5, *(void *)(a5 + 8));
  mlir::ValueRange::ValueRange(v32, *(void *)a6, *(void *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(void *)a7, *(void *)(a7 + 8));
  mlir::memref::SubViewOp::build(a1, (uint64_t)v34, v21, v22, v33[0], v33[1], v32[0], v32[1], v31[0], v31[1], *a8, a8[1], *a9, a9[1], *a10, a10[1]);
  int v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id) {
    __int16 v24 = v23;
  }
  else {
    __int16 v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

void anonymous namespace'::TrivialSubViewOpFolder::~TrivialSubViewOpFolder(_anonymous_namespace_::TrivialSubViewOpFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TrivialSubViewOpFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v42[4] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  unint64_t v40 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  uint64_t v6 = v5;
  if (*(_DWORD *)(a2 + 36)) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v37 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  if (v6 != v8) {
    return 0;
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v40);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v37);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v34);
  if (v41)
  {
    uint64_t v9 = v40;
    uint64_t v10 = 8 * v41;
    while (1)
    {
      ConstantIntuint64_t Value = mlir::getConstantIntValue(*v9);
      if (!v12 || ConstantIntValue != 0) {
        break;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (v35)
    {
      uint64_t v14 = (uint64_t *)v34;
      uint64_t v15 = 8 * v35;
      while (1)
      {
        unint64_t v16 = mlir::getConstantIntValue(*v14);
        if (!v17 || v16 != 1) {
          break;
        }
        ++v14;
        v15 -= 8;
        if (!v15) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      unint64_t v32 = *(void *)(*(void *)(*(void *)(v33 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v32);
      if (!v38)
      {
LABEL_26:
        uint64_t v25 = 1;
        uint64_t v26 = v34;
        if (v34 == v36) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      char v20 = (void *)Value;
      uint64_t v21 = (uint64_t *)v37;
      uint64_t v22 = 8 * v38;
      while (1)
      {
        unint64_t v23 = mlir::getConstantIntValue(*v21);
        if (!v24 || v23 != *v20) {
          break;
        }
        ++v21;
        ++v20;
        v22 -= 8;
        if (!v22) {
          goto LABEL_26;
        }
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v26 = v34;
  if (v34 != v36) {
LABEL_30:
  }
    free(v26);
LABEL_31:
  if (v37 != &v39) {
    free(v37);
  }
  if (v40 != v42) {
    free(v40);
  }
  if (v25)
  {
    if (*(_DWORD *)(a2 + 36)) {
      uint64_t v28 = a2 - 16;
    }
    else {
      uint64_t v28 = 0;
    }
    unint64_t v27 = *(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v27 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v40 = *(uint64_t **)(*(void *)(a2 + 72) + 24);
      uint64_t v25 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(*(void *)a3 + 24))(a3, a2, &v40, 1);
    }
    else
    {
      if (*(_DWORD *)(a2 + 36)) {
        uint64_t v29 = a2 - 16;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v40 = (uint64_t *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v37 = *(void **)(*(void *)(a2 + 72) + 24);
      __int16 v30 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v40, (uint64_t *)&v37);
      (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v30);
      return 1;
    }
  }
  return v25;
}

void anonymous namespace'::ViewOpShapeFolder::~ViewOpShapeFolder(_anonymous_namespace_::ViewOpShapeFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::ViewOpShapeFolder::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, uint64_t a3)
{
  v54[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 68);
  if (!v4) {
    return 0;
  }
  for (uint64_t i = (uint64_t *)(*(void *)(a2 + 72) + 24); ; i += 4)
  {
    uint64_t v7 = *i;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)DefiningOp);
    v53[0] = v7;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v53);
    if (DefiningOp)
    {
      uint64_t DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v8);
      if (DefiningOp) {
        break;
      }
    }
    if (!--v4) {
      return 0;
    }
  }
  unint64_t v9 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = 0;
  uint64_t v45 = v9;
  v53[0] = v54;
  v53[1] = 0x400000000;
  if (!mlir::getStridesAndOffset(v9, (uint64_t)v53, &v44))
  {
    uint64_t v28 = 0;
    uint64_t v39 = (void *)v53[0];
    if ((void *)v53[0] == v54) {
      return v28;
    }
    goto LABEL_39;
  }
  uint64_t v50 = v52;
  uint64_t v51 = 0x400000000;
  uint64_t v47 = v49;
  uint64_t v48 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  if (v10 > HIDWORD(v48)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v10, 8);
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  if (v11)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = 8 * v11;
    while (1)
    {
      while (1)
      {
        uint64_t v16 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45) + v12);
        if (v16 == 0x8000000000000000) {
          break;
        }
        uint64_t v24 = v48;
        if (v48 >= (unint64_t)HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
          uint64_t v24 = v48;
        }
        *((void *)v47 + v24) = v16;
        LODWORD(v48) = v48 + 1;
        v12 += 8;
        if (v14 == v12) {
          goto LABEL_33;
        }
      }
      uint64_t Value = *(void *)(*(void *)(a2 + 72) + 32 * v13 + 88);
      uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)&Value);
      if (!v17) {
        break;
      }
      uint64_t v19 = v17;
      BOOL v20 = mlir::arith::ConstantIndexOp::classof(v17, v18);
      if (v20) {
        uint64_t v21 = (ZinIrHalH13g *)v19;
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v43 = v21;
      if (!v20) {
        goto LABEL_28;
      }
      uint64_t Value = (uint64_t)mlir::arith::ConstantOp::getValue((mlir::arith::ConstantOp *)&v43);
      uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&Value);
      uint64_t v23 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
        uint64_t v23 = v48;
      }
      *((void *)v47 + v23) = Int;
      uint64_t v15 = &v48;
LABEL_13:
      ++*(_DWORD *)v15;
      ++v13;
      v12 += 8;
      if (v14 == v12) {
        goto LABEL_33;
      }
    }
    unint64_t v43 = 0;
LABEL_28:
    uint64_t v25 = v48;
    if (v48 >= (unint64_t)HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
      uint64_t v25 = v48;
    }
    *((void *)v47 + v25) = 0x8000000000000000;
    LODWORD(v48) = v48 + 1;
    uint64_t v26 = *(void *)(*(void *)(a2 + 72) + 32 * v13 + 88);
    uint64_t v27 = v51;
    if (v51 >= (unint64_t)HIDWORD(v51))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
      uint64_t v27 = v51;
    }
    *((void *)v50 + v27) = v26;
    uint64_t v15 = &v51;
    goto LABEL_13;
  }
LABEL_33:
  uint64_t Value = v45;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Value);
  uint64_t RawStringData = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
  uint64_t v32 = v31;
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&Value);
  uint64_t Value = mlir::MemRefType::get((uint64_t *)v47, (mlir::AffineMap *)v48, RHS, RawStringData, v32, LayerSchedule);
  if (v45 != Value)
  {
    uint64_t v34 = *(void *)(a2 + 24);
    uint64_t v35 = *(void *)(a2 + 72);
    unint64_t v36 = *(void *)(v35 + 24);
    uint64_t v41 = *(void *)(v35 + 56);
    unint64_t v42 = v36;
    unint64_t v43 = mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType &,mlir::Value,mlir::detail::TypedValue<mlir::IndexType>,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)(a3 + 8), v34, &Value, (uint64_t *)&v42, &v41, (uint64_t)&v50);
    unint64_t v42 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v42, &v43);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v37);
    uint64_t v28 = 1;
    unsigned int v38 = v47;
    if (v47 == v49) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v28 = 0;
  unsigned int v38 = v47;
  if (v47 != v49) {
LABEL_35:
  }
    free(v38);
LABEL_36:
  if (v50 != v52) {
    free(v50);
  }
  uint64_t v39 = (void *)v53[0];
  if ((void *)v53[0] != v54) {
LABEL_39:
  }
    free(v39);
  return v28;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType &,mlir::Value,mlir::detail::TypedValue<mlir::IndexType>,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  v34[28] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.view", (const unsigned __int8 *)0xB, Context);
  if (!v14)
  {
    __int16 v28 = 1283;
    void v27[2] = (uint64_t)"memref.view";
    v27[3] = 11;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(void *)a6, *(unsigned int *)(a6 + 8));
  uint64_t v18 = v29[0];
  uint64_t v19 = v29[1];
  v27[0] = v16;
  v25[0] = v17;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  unsigned int v20 = v32;
  if (v32 >= v33)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v32 + 1, 8);
    unsigned int v20 = v32;
  }
  *(void *)(v31 + 8 * v20) = v15;
  ++v32;
  uint64_t v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void anonymous namespace'::ViewOpMemrefCastFolder::~ViewOpMemrefCastFolder(_anonymous_namespace_::ViewOpMemrefCastFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ViewOpMemrefCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v14);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      uint64_t v13 = *(void *)(*(void *)(result + 72) + 24);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (result)
      {
        if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
        {
          unint64_t v6 = *(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v7 = *(void *)(a2 + 72);
          uint64_t v11 = *(void *)(v7 + 56);
          unint64_t v12 = v6;
          uint64_t v8 = *(unsigned int *)(a2 + 68) - 2;
          v10[0] = v7 + 64;
          v10[1] = v8;
          unint64_t v9 = mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), (uint64_t *)&v12, &v13, &v11, (uint64_t)v10);
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, a2, v9);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  v34[28] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.view", (const unsigned __int8 *)0xB, Context);
  if (!v14)
  {
    __int16 v28 = 1283;
    void v27[2] = (uint64_t)"memref.view";
    v27[3] = 11;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(void *)a6, *(void *)(a6 + 8));
  uint64_t v18 = v29[0];
  uint64_t v19 = v29[1];
  v27[0] = v16;
  v25[0] = v17;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  unsigned int v20 = v32;
  if (v32 >= v33)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v32 + 1, 8);
    unsigned int v20 = v32;
  }
  *(void *)(v31 + 8 * v20) = v15;
  ++v32;
  uint64_t v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AssumeAlignmentOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AtomicRMWOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::LoadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocaOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void mlir::SideEffects::AutomaticAllocationScopeResource::~AutomaticAllocationScopeResource(mlir::SideEffects::AutomaticAllocationScopeResource *this)
{
}

const char *mlir::SideEffects::AutomaticAllocationScopeResource::getName(mlir::SideEffects::AutomaticAllocationScopeResource *this)
{
  return "AutomaticAllocationScope";
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GetGlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      __int16 v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        __int16 v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  unint64_t v22 = a2;
  unint64_t v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  unint64_t v23 = v22;
  uint64_t v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  unint64_t v24 = v23;
  uint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  unint64_t v25 = v24;
  unsigned int v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  unint64_t v26 = v25;
  int v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  unint64_t v27 = v26;
  unint64_t v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReallocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReinterpretCastOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::StoreOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::SubViewOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unsigned int v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unsigned int v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void mlir::mps::createConstantsConversionPass()
{
}

void mlir::mps::getConstantsConversionPattern()
{
}

uint64_t mlir::mps::MPSConstantsConversionBase<mlir::mps::anonymous namespace'::ConstantsConversionPass>::MPSConstantsConversionBase(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 16) = "builtin.module";
  *(void *)(a1 + 24) = 14;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)a1 = &unk_26C32CC60;
  *(void *)&long long v6 = "The type of conversion to apply to the constant attributes.";
  *((void *)&v6 + 1) = 59;
  int v4 = 0;
  uint64_t v5 = &v4;
  v7.n128_u64[0] = (unint64_t)v8;
  v8[0] = "none";
  v8[1] = 4;
  int v9 = 0;
  uint64_t v10 = "The constant attribute type is not changed.";
  uint64_t v11 = 43;
  unint64_t v12 = "dense";
  uint64_t v13 = 5;
  int v14 = 1;
  unint64_t v15 = "The constant attribute type is converted to DenseElementsAttr.";
  uint64_t v16 = 62;
  uint64_t v17 = "buffer-tensors";
  uint64_t v18 = 14;
  unint64_t v20 = "The constant attribute type is converted to MPSBufferTensorAttr with each attribute backed by its own resource blob.";
  uint64_t v21 = 116;
  unint64_t v22 = "coalesced-buffer-tensors";
  uint64_t v23 = 24;
  int v19 = 2;
  int v24 = 3;
  unint64_t v25 = "The constant attribute type is converted to MPSBufferTensorAttr with all attributes coalesced and backed by a si"
        "ngle resource blob.";
  uint64_t v26 = 131;
  v7.n128_u64[1] = 0x400000004;
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"conversion-type", 15, &v6, &v5, (uint64_t *)&v7);
  *(void *)(a1 + 344) = &unk_26C32CCD0;
  *(void *)(a1 + 944) = &unk_26C32CD50;
  if ((void *)v7.n128_u64[0] != v8) {
    free((void *)v7.n128_u64[0]);
  }
  v7.n128_u64[0] = (unint64_t)"Cast all constants attributes to the same ElementType than the op.";
  v7.n128_u64[1] = 66;
  LOBYTE(v5) = 0;
  *(void *)&long long v6 = &v5;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 960), v2, (uint64_t)"cast-to-op-type", 15, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 960) = &unk_26C37E680;
  *(void *)(a1 + 1152) = &unk_26C37E700;
  v7.n128_u64[0] = (unint64_t)"Perform clipping to range of values of the output type before casting.";
  v7.n128_u64[1] = 70;
  LOBYTE(v5) = 0;
  *(void *)&long long v6 = &v5;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1168), v2, (uint64_t)"clip-to-limits", 14, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1168) = &unk_26C37E680;
  *(void *)(a1 + 1360) = &unk_26C37E700;
  return a1;
}

void mlir::mps::anonymous namespace'::ConstantsConversionPass::~ConstantsConversionPass(mlir::mps::_anonymous_namespace_::ConstantsConversionPass *this)
{
  *(void *)this = &unk_26C32CC60;
  *((void *)this + 146) = &unk_26C35BE48;
  uint64_t v2 = (char *)this + 1328;
  uint64_t v3 = (char *)*((void *)this + 169);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 146) = &unk_26C35BFE8;
  int v4 = (void *)*((void *)this + 158);
  if (v4 != *((void **)this + 157)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 154);
  if (v5 != (char *)this + 1248) {
    free(v5);
  }
  *((void *)this + 120) = &unk_26C35BE48;
  long long v6 = (mlir::mps::_anonymous_namespace_::ConstantsConversionPass *)*((void *)this + 143);
  if (v6 == (mlir::mps::_anonymous_namespace_::ConstantsConversionPass *)((char *)this + 1120))
  {
    (*(void (**)(char *))(*((void *)this + 140) + 32))((char *)this + 1120);
  }
  else if (v6)
  {
    (*(void (**)(mlir::mps::_anonymous_namespace_::ConstantsConversionPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 120) = &unk_26C35BFE8;
  __n128 v7 = (void *)*((void *)this + 132);
  if (v7 != *((void **)this + 131)) {
    free(v7);
  }
  uint64_t v8 = (char *)*((void *)this + 128);
  if (v8 != (char *)this + 1040) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option((void *)this + 43);

  mlir::Pass::~Pass(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21667D3C0);
}

const char *mlir::mps::MPSConstantsConversionBase<mlir::mps::anonymous namespace'::ConstantsConversionPass>::getName()
{
  return "MPSConstantsConversion";
}

const char *mlir::mps::MPSConstantsConversionBase<mlir::mps::anonymous namespace'::ConstantsConversionPass>::getArgument()
{
  return "mps-constants-conversion";
}

const char *mlir::mps::MPSConstantsConversionBase<mlir::mps::anonymous namespace'::ConstantsConversionPass>::getDescription()
{
  return "Convert attributes of mps.Constant op between dense / Buffer Tensor.";
}

void mlir::mps::anonymous namespace'::ConstantsConversionPass::runOnOperation(mlir::mps::_anonymous_namespace_::ConstantsConversionPass *this)
{
  uint64_t v1 = this;
  v43[10] = *MEMORY[0x263EF8340];
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)this + 118) <= 2u)
  {
    uint64_t Context = (void *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
    *(_OWORD *)__p = 0u;
    long long v25 = 0u;
    uint64_t v26 = v28;
    uint64_t v27 = 0x600000000;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = 0;
    int64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0x2800000000;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0x2800000000;
    operator new();
  }
  if (*((unsigned char *)this + 1088))
  {
    uint64_t Context = (void *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
    *(_OWORD *)__p = 0u;
    long long v25 = 0u;
    uint64_t v26 = v28;
    uint64_t v27 = 0x600000000;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = 0;
    int64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0x2800000000;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0x2800000000;
    operator new();
  }
  unsigned int v41 = (ZinIrHalH13g **)v43;
  uint64_t v42 = 0xA00000000;
  uint64_t v38 = v40;
  uint64_t v39 = 0xA00000000;
  uint64_t Context = &__p[1];
  __p[0] = (void *)0xA00000000;
  unint64_t v20 = &v41;
  uint64_t v21 = &v38;
  p_uint64_t Context = &Context;
  uint64_t v16 = &v20;
  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps12_GLOBAL__N_123ConstantsConversionPass31convertToCoalescedBufferTensorsENS1_8ModuleOpEEUlNSB_10ConstantOpEE_SF_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v16, 1);
  unsigned int v3 = v42;
  if (v42 >= 2)
  {
    int v14 = v1;
    mlir::mps::getBufferTensorAttrs((mlir::Attribute *)v38, v39, (const void **)Context, LODWORD(__p[0]), (uint64_t)&v20);
    v17[0] = mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
    v17[1] = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v16 = (void **)&unk_26C35C560;
    if (v42 && v21)
    {
      int v4 = v41;
      uint64_t v5 = (uint64_t **)v20;
      uint64_t v6 = 8 * v21 - 8;
      uint64_t v7 = 8 * v42 - 8;
      uint64_t v8 = v41;
      do
      {
        uint64_t v9 = *((void *)*v4 + 2);
        ZinIrHalH13g::~ZinIrHalH13g(*v4);
        uint64_t v18 = v9;
        uint64_t v19 = v10;
        uint64_t v11 = (uint64_t)*v8++;
        unint64_t v15 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v4) + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v12 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>((mlir::OpBuilder *)v17, *(void *)(v11 + 24), (uint64_t *)&v15, v5);
        ((void (*)(void ***, uint64_t, ZinIrHalH13g *))v16[4])(&v16, v11, v12);
        if (!v7) {
          break;
        }
        ++v5;
        uint64_t v13 = v6;
        v6 -= 8;
        v7 -= 8;
        int v4 = v8;
      }
      while (v13);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v16);
    if (v20 != &p_Context) {
      free(v20);
    }
    uint64_t v1 = v14;
  }
  if (Context != &__p[1]) {
    free(Context);
  }
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v3 <= 1) {
    *((void *)v1 + 5) |= 4uLL;
  }
}

void mlir::mps::MPSConstantsConversionBase<mlir::mps::anonymous namespace'::ConstantsConversionPass>::clonePass()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>(void *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  v32[0] = a3;
  v32[1] = a4;
  v35[0] = a2;
  uint64_t v9 = llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>((uint64_t)a1, (uint64_t)v32, v35, a5, a6, a7);
  uint64_t v10 = v9 + 600;
  *(unsigned char *)(v9 + 608) = 0;
  *(void *)uint64_t v9 = &unk_26C32CDE0;
  *(void *)(v9 + 600) = &unk_26C32CE60;
  unint64_t v12 = (uint64_t *)a2[21];
  unint64_t v11 = a2[22];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v15 = (uint64_t *)a2[20];
    uint64_t v16 = v12 - v15;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v21 = (uint64_t *)&v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    uint64_t *v21 = v10;
    int v14 = v21 + 1;
    if (v12 != v15)
    {
      unint64_t v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v15 - v20) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v21 = (uint64_t *)((char *)v21 - v25);
      uint64_t v26 = &v20[8 * v16 - 16];
      uint64_t v27 = v12 - 2;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v30 = *--v13;
          *--uint64_t v21 = v30;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    uint64_t *v12 = v10;
    int v14 = v12 + 1;
  }
  a2[21] = v14;
  v33[0] = &unk_26C32FD28;
  v33[1] = a1;
  uint64_t v36 = v35;
  uint64_t v34 = v33;
  v35[0] = &unk_26C32FD28;
  v35[1] = a1;
  std::__function::__value_func<void ()(mlir::mps::ConstantAttributeConversionType const&)>::swap[abi:nn180100](v35, a1 + 71);
  if (v36 == v35)
  {
    (*((void (**)(const void **))v35[0] + 4))(v35);
  }
  else if (v36)
  {
    (*((void (**)(void))*v36 + 5))();
  }
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = llvm::cl::parser<mlir::anec::Family>::parse(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  uint64_t v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::getValueExpectedFlagDefault(v11);
}

uint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void mlir::Pass::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(void *a1)
{
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

unint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*((unsigned char *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    int v3 = *((_DWORD *)result + 32);
    int v4 = &unk_26C32C830;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(a1 + 160) + 24))
  {
    uint64_t v3 = a1 + 152;
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v6);
        uint64_t v9 = v8;
        unint64_t v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
        uint64_t v11 = (uint64_t *)(*(void *)a2 + 16 * v10);
        uint64_t *v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v6 = (v6 + 1);
      }
      while (v5 != v6);
    }
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  int v4 = *(const void **)(a1 + 16);
  size_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      uint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    uint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *uint64_t v6 = 61;
  }
  uint64_t v8 = (unsigned char *)(*(void *)(a1 + 168) + 44);
  uint64_t v9 = 48 * *(unsigned int *)(a1 + 176);
  while (1)
  {
    v9 -= 48;
    if (*v8)
    {
      if (*((_DWORD *)v8 - 1) == *(_DWORD *)(a1 + 128)) {
        break;
      }
    }
    v8 += 48;
  }
  unint64_t v10 = *(const void **)(v8 - 44);
  size_t v11 = *(void *)(v8 - 36);
  __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  if (v11 <= *((void *)this + 3) - (void)result)
  {
    if (v11)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v11);
      *((void *)this + 4) += v11;
    }
  }
  else
  {
    size_t v13 = *(void *)(v8 - 36);
    return llvm::raw_ostream::write(this, (const char *)v10, v13);
  }
  return result;
}

uint64_t mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 608) = *(unsigned char *)(a2 + 8);
  return result;
}

void *non-virtual thunk to'mlir::Pass::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::Pass::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option((void *)(a1 - 600));

  JUMPOUT(0x21667D3C0);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::print(a1 - 600, a2);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::getOption(uint64_t a1)
{
  return a1 - 600;
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 472) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  *(void *)a1 = &unk_26C35BFE8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  int v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_26C32C830;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_26C32C870;
  *(void *)(a1 + 160) = a1;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x800000000;
  *(void *)(a1 + 152) = &unk_26C32CD90;
  *(void *)(a1 + 568) = &unk_26C32CF28;
  *(void *)(a1 + 592) = a1 + 568;
  llvm::cl::apply<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(void *a1)
{
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

void *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option((void *)(a1 - 600));

  JUMPOUT(0x21667D3C0);
}

void llvm::cl::apply<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::mps::ConstantAttributeConversionType>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  size_t v11 = *a3;
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 88)) {
    goto LABEL_2;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 108);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v14;
    unint64_t v17 = *(void **)(a1 + 96);
    while ((const void *)*v17 != v11)
    {
      if (*v17 == -2) {
        uint64_t v15 = v17;
      }
      ++v17;
      v16 -= 8;
      if (!v16)
      {
        if (!v15) {
          goto LABEL_14;
        }
        *uint64_t v15 = v11;
        --*(_DWORD *)(a1 + 112);
        break;
      }
    }
  }
  else
  {
LABEL_14:
    if (v14 >= *(_DWORD *)(a1 + 104))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
      goto LABEL_3;
    }
    *(_DWORD *)(a1 + 108) = v14 + 1;
    *(void *)(v12 + 8 * v14) = v11;
  }
LABEL_3:
  *(_OWORD *)(a1 + 32) = *a4;
  uint64_t v13 = *a5;
  *(_DWORD *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v13;

  llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>>(a6, a1);
}

void *llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~opt(void *a1)
{
  *a1 = &unk_26C32C870;
  unint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C32C8D8;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  size_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

void llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~opt(void *a1)
{
  *a1 = &unk_26C32C870;
  unint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C32C8D8;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  size_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL llvm::cl::OptionValueCopy<mlir::mps::ConstantAttributeConversionType>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void *mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>::~GenericOptionParser(void *a1)
{
  *a1 = &unk_26C32C8D8;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>::~GenericOptionParser(void *a1)
{
  *a1 = &unk_26C32C8D8;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

void *llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::~parser(void *a1)
{
  *a1 = &unk_26C32C8D8;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::~parser(void *a1)
{
  *a1 = &unk_26C32C8D8;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

void std::__function::__func<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1},std::allocator<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1}>,void ()(mlir::mps::ConstantAttributeConversionType const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1},std::allocator<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1}>,void ()(mlir::mps::ConstantAttributeConversionType const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C32CF28;
  return result;
}

void std::__function::__func<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1},std::allocator<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::{lambda(mlir::mps::ConstantAttributeConversionType const&)#1}>,void ()(mlir::mps::ConstantAttributeConversionType const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C32CF28;
}

void llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::mps::ConstantAttributeConversionType,false,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 40 * v2;
    uint64_t v6 = a2 + 168;
    do
    {
      uint64_t v8 = *(const unsigned __int8 **)(v4 + 8);
      long long v9 = *(_OWORD *)(v4 + 24);
      int v10 = *(_DWORD *)(v4 + 16);
      v15[0] = *(void *)v4;
      uint64_t v7 = (int8x16_t *)v15[0];
      v15[1] = v8;
      long long v16 = v9;
      unint64_t v17 = &unk_26C32C830;
      char v19 = 1;
      int v18 = v10;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::OptionInfo,false>::reserveForParamAndGetAddress(v6, (unint64_t)v15, 1);
      uint64_t v12 = *(void *)(a2 + 168) + 48 * *(unsigned int *)(a2 + 176);
      long long v13 = *((_OWORD *)Address + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)Address;
      *(_OWORD *)(v12 + 16) = v13;
      *(void *)(v12 + 32) = &unk_26C32C850;
      char v14 = Address[44];
      *(_DWORD *)(v12 + 40) = *((_DWORD *)Address + 10);
      *(unsigned char *)(v12 + 44) = v14;
      *(void *)(v12 + 32) = &unk_26C32C830;
      ++*(_DWORD *)(a2 + 176);
      llvm::cl::AddLiteralOption(*(void *)(a2 + 160), v7, v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 48 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v20 = (uint64_t)(a2 - *(void *)a1) >> 4;
      unint64_t v32 = 0;
      uint64_t v21 = (char *)(a1 + 16);
      unint64_t v22 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      unint64_t v23 = *(char **)a1;
      unsigned int v24 = *(_DWORD *)(a1 + 8);
      if (v24)
      {
        uint64_t v25 = &v23[48 * v24];
        uint64_t v26 = v22 + 32;
        uint64_t v27 = v22;
        do
        {
          long long v28 = *((_OWORD *)v23 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v23;
          *((_OWORD *)v27 + 1) = v28;
          *((void *)v27 + 4) = &unk_26C32C850;
          int v29 = *((_DWORD *)v23 + 10);
          v27[44] = v23[44];
          *((_DWORD *)v27 + 10) = v29;
          *((void *)v27 + 4) = &unk_26C32C830;
          v26 += 48;
          v23 += 48;
          v27 += 48;
        }
        while (v23 != v25);
        unint64_t v23 = *(char **)a1;
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v20;
      int v31 = v32;
      if (v23 != v21) {
        free(v23);
      }
      *(void *)a1 = v22;
      *(_DWORD *)(a1 + 12) = v31;
      return &v22[48 * v30];
    }
    else
    {
      unint64_t v32 = 0;
      int v10 = (char *)(a1 + 16);
      size_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      uint64_t v12 = *(char **)a1;
      unsigned int v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        char v14 = &v12[48 * v13];
        uint64_t v15 = v11 + 32;
        long long v16 = v11;
        do
        {
          long long v17 = *((_OWORD *)v12 + 1);
          *(_OWORD *)long long v16 = *(_OWORD *)v12;
          *((_OWORD *)v16 + 1) = v17;
          *((void *)v16 + 4) = &unk_26C32C850;
          int v18 = *((_DWORD *)v12 + 10);
          v16[44] = v12[44];
          *((_DWORD *)v16 + 10) = v18;
          *((void *)v16 + 4) = &unk_26C32C830;
          v15 += 48;
          v12 += 48;
          v16 += 48;
        }
        while (v12 != v14);
        uint64_t v12 = *(char **)a1;
      }
      int v19 = v32;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v19;
    }
  }
  return (char *)v3;
}

void *std::__function::__value_func<void ()(mlir::mps::ConstantAttributeConversionType const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_3mps31ConstantAttributeConversionTypeENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_3mps31ConstantAttributeConversionTypeENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C32FD28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_3mps31ConstantAttributeConversionTypeENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32FD28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_3mps31ConstantAttributeConversionTypeENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EEclESU_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 608) = 1;
  return result;
}

void *mlir::detail::PassOptions::Option<mlir::mps::ConstantAttributeConversionType,mlir::detail::PassOptions::GenericOptionParser<mlir::mps::ConstantAttributeConversionType>>::~Option(void *a1)
{
  *a1 = &unk_26C32C870;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C32C8D8;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  unint64_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertConstant::~ConvertConstant(mlir::mps::_anonymous_namespace_::ConvertConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ConstantOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ConstantOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ConstantOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::ConvertConstant::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v172[7] = *MEMORY[0x263EF8340];
  uint64_t v169 = a2;
  uint64_t Value = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v169);
  uint64_t v168 = v5;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&Value);
  uint64_t v6 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v169) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  int v10 = *(void **)(v7 + 8);
  size_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    unsigned int v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    char v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      int v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_10:
  }
    uint64_t v16 = 0;
  v165[0] = (uint64_t)v6;
  v165[1] = v16;
  v164 = Type;
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Type);
  if (RHS != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v165) && *(unsigned char *)(a1 + 100))
  {
    uint64_t v18 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Type);
    uint64_t v20 = v19;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v165);
    v164 = (void *)mlir::RankedTensorType::get(v18, v20, OperandRange, 0);
  }
  uint64_t v22 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v164);
  int isCompatibleWithDenseStorage = mlir::isCompatibleWithDenseStorage(v22);
  if ((isCompatibleWithDenseStorage & 1) != 0 || !mlir::DenseElementsAttr::classof((uint64_t)Value))
  {
    if (Type == v164)
    {
      int v34 = *(_DWORD *)(a1 + 96);
      if (!v34) {
        return 0;
      }
      if (v34 != 2)
      {
        if ((isCompatibleWithDenseStorage & 1) == 0 || mlir::DenseElementsAttr::classof((uint64_t)Value)) {
          return 0;
        }
LABEL_23:
        if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value) & 1) != 0
          || (int v33 = *(_DWORD *)(a1 + 96), v33 == 1))
        {
          int isCompatibleWithDenseStorage = 1;
        }
        else
        {
          int isCompatibleWithDenseStorage = v33 != 2 && mlir::DenseElementsAttr::classof((uint64_t)Value);
        }
LABEL_33:
        if (Type != v164)
        {
          mlir::mps::CPUNDArray::CPUNDArray(&v170);
          uint64_t v35 = v164;
          if (!v164) {
            goto LABEL_43;
          }
          uint64_t v36 = *v164;
          unint64_t v37 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v38 = *(unsigned int *)(v36 + 16);
          if (!v38) {
            goto LABEL_43;
          }
          uint64_t v39 = *(void **)(v36 + 8);
          unint64_t v40 = &v39[2 * v38];
          do
          {
            unint64_t v41 = v38 >> 1;
            uint64_t v42 = &v39[2 * (v38 >> 1)];
            unint64_t v44 = *v42;
            unint64_t v43 = v42 + 2;
            v38 += ~(v38 >> 1);
            if (v44 < v37) {
              uint64_t v39 = v43;
            }
            else {
              unint64_t v38 = v41;
            }
          }
          while (v38);
          if (v39 != v40 && *v39 == v37) {
            uint64_t v45 = v39[1];
          }
          else {
LABEL_43:
          }
            uint64_t v45 = 0;
          mlir::mps::CPUNDArray::CPUNDArray(v163, v35, v45, 0);
          if (*(unsigned char *)(a1 + 101)) {
            int v46 = 14;
          }
          else {
            int v46 = 13;
          }
          mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v162, v46, 0.0);
          uint64_t v47 = operator new(8uLL);
          v159 = v47;
          *uint64_t v47 = &v170;
          v160 = v47 + 1;
          v161 = v47 + 1;
          unsigned __int8 v48 = operator new(8uLL);
          v156 = v48;
          *unsigned __int8 v48 = v163;
          v157 = v48 + 1;
          v158 = v48 + 1;
          uint64_t v49 = operator new(8uLL);
          v153 = v49;
          *uint64_t v49 = 0;
          v154 = v49 + 1;
          v155 = v49 + 1;
          uint64_t v50 = operator new(8uLL);
          __p = v50;
          *uint64_t v50 = 0;
          v151 = v50 + 1;
          v152 = v50 + 1;
          mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v162, (uint64_t *)&v159, (uint64_t **)&v156, (uint64_t)&v153, (uint64_t)&__p, 0, *((uint64_t *)&v171 + 1), (uint64_t)v162);
          if (__p)
          {
            v151 = __p;
            operator delete(__p);
          }
          if (v153)
          {
            v154 = v153;
            operator delete(v153);
          }
          if (v156)
          {
            v157 = v156;
            operator delete(v156);
          }
          if (v159)
          {
            v160 = v159;
            operator delete(v159);
          }
          uint64_t v51 = v163[5];
          uint64_t NumElements = mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v163);
          uint64_t v56 = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v163) * NumElements;
          v159 = 0;
          v160 = 0;
          uint64_t v57 = v164;
          if (isCompatibleWithDenseStorage)
          {
            if (!v164) {
              goto LABEL_65;
            }
            uint64_t v58 = *v164;
            unint64_t v59 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v60 = *(unsigned int *)(v58 + 16);
            if (!v60) {
              goto LABEL_65;
            }
            uint64_t v61 = *(void **)(v58 + 8);
            uint64_t v62 = &v61[2 * v60];
            do
            {
              unint64_t v63 = v60 >> 1;
              uint64_t v64 = &v61[2 * (v60 >> 1)];
              unint64_t v66 = *v64;
              uint64_t v65 = v64 + 2;
              v60 += ~(v60 >> 1);
              if (v66 < v59) {
                uint64_t v61 = v65;
              }
              else {
                unint64_t v60 = v63;
              }
            }
            while (v60);
            if (v61 != v62 && *v61 == v59) {
              uint64_t v67 = v61[1];
            }
            else {
LABEL_65:
            }
              uint64_t v67 = 0;
            v68 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v57, v67, v51, v56, v53, v54, v55);
            uint64_t v69 = v68;
            if (!v68) {
              goto LABEL_102;
            }
            uint64_t v70 = *v68;
            unint64_t v71 = mlir::TypeID::get<mlir::ElementsAttr>();
            unint64_t v72 = *(unsigned int *)(v70 + 16);
            if (!v72) {
              goto LABEL_102;
            }
            uint64_t v73 = *(void **)(v70 + 8);
            uint64_t v74 = &v73[2 * v72];
            do
            {
              unint64_t v75 = v72 >> 1;
              uint64_t v76 = &v73[2 * (v72 >> 1)];
              unint64_t v78 = *v76;
              unint64_t v77 = v76 + 2;
              v72 += ~(v72 >> 1);
              if (v78 < v71) {
                uint64_t v73 = v77;
              }
              else {
                unint64_t v72 = v75;
              }
            }
            while (v72);
          }
          else
          {
            BufferTensorAttr = (uint64_t *)mlir::mps::getBufferTensorAttr((uint64_t)v164, v51, (const void *)v56);
            uint64_t v69 = BufferTensorAttr;
            if (!BufferTensorAttr) {
              goto LABEL_102;
            }
            uint64_t v108 = *BufferTensorAttr;
            unint64_t v71 = mlir::TypeID::get<mlir::ElementsAttr>();
            unint64_t v109 = *(unsigned int *)(v108 + 16);
            if (!v109) {
              goto LABEL_102;
            }
            uint64_t v73 = *(void **)(v108 + 8);
            uint64_t v74 = &v73[2 * v109];
            do
            {
              unint64_t v110 = v109 >> 1;
              uint64_t v111 = &v73[2 * (v109 >> 1)];
              unint64_t v113 = *v111;
              v112 = v111 + 2;
              v109 += ~(v109 >> 1);
              if (v113 < v71) {
                uint64_t v73 = v112;
              }
              else {
                unint64_t v109 = v110;
              }
            }
            while (v109);
          }
          if (v73 != v74 && *v73 == v71)
          {
            uint64_t v114 = (void *)v73[1];
            goto LABEL_103;
          }
LABEL_102:
          uint64_t v114 = 0;
LABEL_103:
          v159 = v69;
          v160 = v114;
          uint64_t v115 = v169;
          v116 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(void *)(v169 + 24), v165, (void **)&v159);
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v115, v116);
          mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v163);
          mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&v170);
          return 1;
        }
        ElementsAttrRawData = (const void *)mlir::getElementsAttrRawData((uint64_t)Value);
        uint64_t v84 = v79;
        v170 = 0;
        *(void *)&long long v171 = 0;
        uint64_t v85 = Type;
        if (isCompatibleWithDenseStorage)
        {
          if (!Type) {
            goto LABEL_84;
          }
          uint64_t v86 = *Type;
          unint64_t v87 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v88 = *(unsigned int *)(v86 + 16);
          if (!v88) {
            goto LABEL_84;
          }
          uint64_t v89 = *(void **)(v86 + 8);
          uint64_t v90 = &v89[2 * v88];
          do
          {
            unint64_t v91 = v88 >> 1;
            v92 = &v89[2 * (v88 >> 1)];
            unint64_t v94 = *v92;
            uint64_t v93 = v92 + 2;
            v88 += ~(v88 >> 1);
            if (v94 < v87) {
              uint64_t v89 = v93;
            }
            else {
              unint64_t v88 = v91;
            }
          }
          while (v88);
          if (v89 != v90 && *v89 == v87) {
            uint64_t v95 = v89[1];
          }
          else {
LABEL_84:
          }
            uint64_t v95 = 0;
          v96 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v85, v95, ElementsAttrRawData, v84, v80, v81, v82);
          unint64_t v97 = v96;
          if (!v96) {
            goto LABEL_113;
          }
          uint64_t v98 = *v96;
          unint64_t v99 = mlir::TypeID::get<mlir::ElementsAttr>();
          unint64_t v100 = *(unsigned int *)(v98 + 16);
          if (!v100) {
            goto LABEL_113;
          }
          v101 = *(void **)(v98 + 8);
          uint64_t v102 = &v101[2 * v100];
          do
          {
            unint64_t v103 = v100 >> 1;
            v104 = &v101[2 * (v100 >> 1)];
            unint64_t v106 = *v104;
            uint64_t v105 = v104 + 2;
            v100 += ~(v100 >> 1);
            if (v106 < v99) {
              v101 = v105;
            }
            else {
              unint64_t v100 = v103;
            }
          }
          while (v100);
        }
        else
        {
          v117 = (void *)mlir::mps::getBufferTensorAttr((uint64_t)Type, ElementsAttrRawData, v79);
          unint64_t v97 = v117;
          if (!v117) {
            goto LABEL_113;
          }
          uint64_t v118 = *v117;
          unint64_t v99 = mlir::TypeID::get<mlir::ElementsAttr>();
          unint64_t v119 = *(unsigned int *)(v118 + 16);
          if (!v119) {
            goto LABEL_113;
          }
          v101 = *(void **)(v118 + 8);
          uint64_t v102 = &v101[2 * v119];
          do
          {
            unint64_t v120 = v119 >> 1;
            v121 = &v101[2 * (v119 >> 1)];
            unint64_t v123 = *v121;
            v122 = v121 + 2;
            v119 += ~(v119 >> 1);
            if (v123 < v99) {
              v101 = v122;
            }
            else {
              unint64_t v119 = v120;
            }
          }
          while (v119);
        }
        if (v101 != v102 && *v101 == v99)
        {
          uint64_t v124 = v101[1];
          goto LABEL_114;
        }
LABEL_113:
        uint64_t v124 = 0;
LABEL_114:
        v170 = v97;
        *(void *)&long long v171 = v124;
        uint64_t v125 = v169;
        v126 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(void *)(v169 + 24), v165, &v170);
        (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v125, v126);
        return 1;
      }
      if (*(_UNKNOWN **)(*Value + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id
        || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value) & 1) != 0)
      {
        return 0;
      }
    }
    if (!isCompatibleWithDenseStorage) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value) & 1) == 0)
  {
    uint64_t v24 = mlir::getElementsAttrRawData((uint64_t)Value);
    unint64_t v26 = v25;
    uint64_t v27 = mlir::ElementsAttr::getNumElements((uint64_t)Value, v168);
    v170 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Type);
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v170);
    unint64_t v29 = 8 / IntOrFloatBitWidth;
    if (v29 * IntOrFloatBitWidth == 8)
    {
      v170 = v172;
      long long v171 = xmmword_211F09580;
      unint64_t v30 = v27 - 1 + v29;
      if (__CFADD__(v27 - 1, v29))
      {
        int v31 = 0;
        unint64_t v32 = v172;
      }
      else
      {
        char v128 = IntOrFloatBitWidth;
        unint64_t v129 = v30 / v29;
        if (v30 / v29 < 0x29)
        {
          uint64_t v131 = 0;
          v130 = v172;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v170, v172, v30 / v29, 1);
          v130 = v170;
          uint64_t v131 = v171;
        }
        if (v129 != v131)
        {
          bzero((char *)v130 + v131, v129 - v131);
          v130 = v170;
        }
        uint64_t v132 = 0;
        *(void *)&long long v171 = v129;
        unint64_t v133 = v26;
        do
        {
          uint64_t v134 = v132 * v29;
          unint64_t v135 = v26 - v132 * v29;
          if (v135 >= v29) {
            unint64_t v135 = v29;
          }
          if (v135)
          {
            uint64_t v136 = v133 >= v29 ? v29 : v133;
            LODWORD(v135) = *(unsigned __int8 *)(v24 + v134);
            if (v136 != 1)
            {
              LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 1) << v128);
              if (v136 != 2)
              {
                LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 2) << (2 * v128));
                if (v136 != 3)
                {
                  LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 3) << (3 * v128));
                  if (v136 != 4)
                  {
                    LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 4) << (4 * v128));
                    if (v136 != 5)
                    {
                      LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 5) << (5 * v128));
                      if (v136 != 6)
                      {
                        LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 6) << (6 * v128));
                        if (v136 != 7) {
                          LODWORD(v135) = v135 | (*(unsigned __int8 *)(v134 + v24 + 7) << (7 * v128));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          *(unsigned char *)v130 = v135;
          v130 = (void *)((char *)v130 + 1);
          ++v132;
          v133 -= v29;
          --v129;
        }
        while (v129);
        unint64_t v32 = v170;
        int v31 = (const void *)v171;
      }
      v137 = (void *)mlir::mps::getBufferTensorAttr((uint64_t)Type, v32, v31);
      v163[0] = v137;
      if (!v137) {
        goto LABEL_156;
      }
      uint64_t v138 = *v137;
      unint64_t v139 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v140 = *(unsigned int *)(v138 + 16);
      if (!v140) {
        goto LABEL_156;
      }
      v141 = *(void **)(v138 + 8);
      v142 = &v141[2 * v140];
      do
      {
        unint64_t v143 = v140 >> 1;
        v144 = &v141[2 * (v140 >> 1)];
        unint64_t v146 = *v144;
        v145 = v144 + 2;
        v140 += ~(v140 >> 1);
        if (v146 < v139) {
          v141 = v145;
        }
        else {
          unint64_t v140 = v143;
        }
      }
      while (v140);
      if (v141 != v142 && *v141 == v139) {
        v147 = (void *)v141[1];
      }
      else {
LABEL_156:
      }
        v147 = 0;
      v163[1] = v147;
      uint64_t v148 = v169;
      v149 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(void *)(v169 + 24), v165, v163);
      (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v148, v149);
      if (v170 != v172) {
        free(v170);
      }
      return 1;
    }
  }
  return 0;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps12_GLOBAL__N_123ConstantsConversionPass31convertToCoalescedBufferTensorsENS1_8ModuleOpEEUlNSB_10ConstantOpEE_SF_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    {
      uint64_t v2 = *(uint64_t **)result;
      uint64_t v19 = a2;
      v18[0] = (uint64_t)mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v19);
      v18[1] = v3;
      __n128 result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
      if ((result & 1) == 0)
      {
        uint64_t v4 = *v2;
        uint64_t v5 = v19;
        uint64_t v6 = *(unsigned int *)(*v2 + 8);
        if (v6 >= *(_DWORD *)(*v2 + 12))
        {
          uint64_t v15 = v19;
          llvm::SmallVectorBase<unsigned int>::grow_pod(*v2, (void *)(v4 + 16), v6 + 1, 8);
          uint64_t v5 = v15;
          LODWORD(v6) = *(_DWORD *)(v4 + 8);
        }
        *(void *)(*(void *)v4 + 8 * v6) = v5;
        ++*(_DWORD *)(v4 + 8);
        uint64_t v7 = v2[1];
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v18);
        uint64_t v9 = *(unsigned int *)(v7 + 8);
        if (v9 >= *(_DWORD *)(v7 + 12))
        {
          uint64_t v16 = Type;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v9 + 1, 8);
          uint64_t Type = v16;
          LODWORD(v9) = *(_DWORD *)(v7 + 8);
        }
        *(void *)(*(void *)v7 + 8 * v9) = Type;
        ++*(_DWORD *)(v7 + 8);
        uint64_t v10 = v2[2];
        __n128 result = mlir::getElementsAttrRawData(v18[0]);
        uint64_t v12 = *(unsigned int *)(v10 + 8);
        if (v12 >= *(_DWORD *)(v10 + 12))
        {
          uint64_t v17 = result;
          uint64_t v14 = v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v10 + 16), v12 + 1, 16);
          uint64_t v11 = v14;
          __n128 result = v17;
          LODWORD(v12) = *(_DWORD *)(v10 + 8);
        }
        unsigned int v13 = (uint64_t *)(*(void *)v10 + 16 * v12);
        uint64_t *v13 = result;
        v13[1] = v11;
        ++*(_DWORD *)(v10 + 8);
      }
    }
  }
  return result;
}

void mlir::IRRewriter::~IRRewriter(mlir::IRRewriter *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::verifyParallelCombiningOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 1)
  {
    uint64_t v3 = (void *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)this + 10));
    if ((void *)*v3 != v3 && *(void **)(v3[1] + 8) == v3) {
      return 1;
    }
    v20[0] = "expected single block op region";
    __int16 v21 = 259;
    mlir::Operation::emitError((uint64_t)this, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v28;
        uint64_t v7 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        long long v28 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v25;
      if (!v25) {
        goto LABEL_34;
      }
      uint64_t v9 = v26;
      uint64_t v10 = v25;
      if (v26 == v25)
      {
LABEL_33:
        unint64_t v26 = v8;
        operator delete(v10);
LABEL_34:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        void *v9 = 0;
        if (v12) {
          MEMORY[0x21667D390](v11, 0x1000C8077774924);
        }
      }
      while (v9 != v8);
LABEL_32:
      uint64_t v10 = v25;
      goto LABEL_33;
    }
  }
  else
  {
    v20[0] = "expected single region op";
    __int16 v21 = 259;
    mlir::Operation::emitError((uint64_t)this, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      unsigned int v13 = __p;
      if (__p)
      {
        uint64_t v14 = v28;
        uint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        long long v28 = v13;
        operator delete(v15);
      }
      unint64_t v8 = v25;
      if (!v25) {
        goto LABEL_34;
      }
      uint64_t v16 = v26;
      uint64_t v10 = v25;
      if (v26 == v25) {
        goto LABEL_33;
      }
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v17 = v18;
        void *v16 = 0;
        if (v18) {
          MEMORY[0x21667D390](v17, 0x1000C8077774924);
        }
      }
      while (v16 != v8);
      goto LABEL_32;
    }
  }
  return v4;
}

uint64_t mlir::parseSourceFile(uint64_t ***a1, uint64_t a2, uint64_t ***a3, uint64_t *a4)
{
  uint64_t v7 = (const llvm::MemoryBuffer *)***a1;
  if (a4)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = (const char *)(*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v7 + 16))(v7);
    *a4 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v13, v7);
  if (!mlir::isBytecode((uint64_t)v13)) {
    mlir::parseAsmSourceFile(*a1, a2, a3, 0, 0);
  }
  return mlir::readBytecodeFile((const llvm::MemoryBuffer ****)a1, a2, (mlir::StringAttr **)a3);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C323948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C323948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::__on_zero_shared(uint64_t a1)
{
}

llvm::raw_ostream *mlir::PassExecutionAction::print(mlir::PassExecutionAction *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  uint64_t v6 = v5;
  uint64_t v7 = (void *)(*(uint64_t (**)(mlir::PassExecutionAction *))(*(void *)this + 32))(this);
  if ((*v7 & 6) != 0) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *(void *)(v8 + 48);
  v11[1] = 38;
  v11[2] = v15;
  v11[3] = 3;
  v12[0] = &unk_26C35C190;
  v12[1] = &mlir::PassExecutionAction::tag;
  v13[0] = &unk_26C35C160;
  v13[1] = v4;
  v13[2] = v6;
  v14[0] = &unk_26C35C370;
  v14[1] = v9;
  v15[0] = v12;
  v15[1] = v13;
  void v15[2] = v14;
  return llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)v11);
}

uint64_t mlir::Pass::initializeOptions(uint64_t a1, __int8 *a2, unint64_t a3)
{
  return mlir::detail::PassOptions::parseFromString(a1 + 152, a2, a3);
}

void mlir::Pass::printAsTextualPipeline(mlir::Pass *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)this + 1);
  {
    int v31 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    unint64_t v32 = 81;
    unint64_t v24 = llvm::StringRef::find((uint64_t *)&v31, "DesiredTypeName = ", 0x12uLL, 0);
    if (v32 >= v24) {
      unint64_t v25 = v24;
    }
    else {
      unint64_t v25 = v32;
    }
    unint64_t v26 = &v31[v25];
    unint64_t v27 = v32 - v25;
    if (v32 - v25 >= 0x12) {
      uint64_t v28 = 18;
    }
    else {
      uint64_t v28 = v32 - v25;
    }
    unint64_t v29 = v27 - v28;
    if (v29 >= v29 - 1) {
      uint64_t v30 = v29 - 1;
    }
    else {
      uint64_t v30 = v29;
    }
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v26[v28], v30);
  }
  if (v4 != mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
  {
    uint64_t v5 = (*(uint64_t (**)(mlir::Pass *))(*(void *)this + 32))(this);
    if (v6)
    {
      uint64_t v7 = (const char *)v5;
      size_t v8 = v6;
      uint64_t v9 = (void *)*((void *)a2 + 4);
      if (v6 > *((void *)a2 + 3) - (void)v9)
      {
        uint64_t v10 = a2;
        unint64_t v11 = v7;
        size_t v12 = v8;
LABEL_24:
        llvm::raw_ostream::write(v10, v11, v12);
        goto LABEL_25;
      }
      memcpy(v9, v7, v6);
      *((void *)a2 + 4) += v8;
    }
    else
    {
      uint64_t v18 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v18 > 7uLL)
      {
        void *v18 = 0x3C6E776F6E6B6E75;
        *((void *)a2 + 4) += 8;
        uint64_t v19 = a2;
      }
      else
      {
        uint64_t v19 = llvm::raw_ostream::write(a2, "unknown<", 8uLL);
      }
      __int16 v21 = (const void *)(*(uint64_t (**)(mlir::Pass *))(*(void *)this + 16))(this);
      size_t v22 = v20;
      unint64_t v23 = (unsigned char *)*((void *)v19 + 4);
      if (v20 <= *((void *)v19 + 3) - (void)v23)
      {
        if (v20)
        {
          memcpy(v23, v21, v20);
          unint64_t v23 = (unsigned char *)(*((void *)v19 + 4) + v22);
          *((void *)v19 + 4) = v23;
        }
      }
      else
      {
        uint64_t v19 = llvm::raw_ostream::write(v19, (const char *)v21, v20);
        unint64_t v23 = (unsigned char *)*((void *)v19 + 4);
      }
      if (*((unsigned char **)v19 + 3) == v23)
      {
        unint64_t v11 = ">";
        uint64_t v10 = v19;
        size_t v12 = 1;
        goto LABEL_24;
      }
      *unint64_t v23 = 62;
      ++*((void *)v19 + 4);
    }
LABEL_25:
    mlir::detail::PassOptions::print((mlir::Pass *)((char *)this + 152), a2);
    return;
  }
  uint64_t v13 = *((unsigned int *)this + 88);
  if (v13)
  {
    uint64_t v14 = (const char **)*((void *)this + 43);
    mlir::OpPassManager::printAsTextualPipeline(v14, a2);
    if (v13 != 1)
    {
      uint64_t v15 = v14 + 1;
      uint64_t v16 = 8 * v13 - 8;
      do
      {
        while (1)
        {
          uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v17) {
            break;
          }
          unsigned char *v17 = 44;
          ++*((void *)a2 + 4);
          mlir::OpPassManager::printAsTextualPipeline(v15++, a2);
          v16 -= 8;
          if (!v16) {
            return;
          }
        }
        llvm::raw_ostream::write(a2, ",", 1uLL);
        mlir::OpPassManager::printAsTextualPipeline(v15++, a2);
        v16 -= 8;
      }
      while (v16);
    }
  }
}

void *mlir::detail::OpPassManagerImpl::addPass(unsigned char *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (a1[23]) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v5 = (uint64_t *)*a2;
    goto LABEL_14;
  }
  if (!*((void *)a1 + 1)) {
    goto LABEL_13;
  }
LABEL_3:
  if ((char)a1[23] >= 0)
  {
    size_t v4 = a1[23];
  }
  else
  {
    a1 = *(unsigned char **)a1;
    size_t v4 = v3[1];
  }
  uint64_t v5 = (uint64_t *)*a2;
  if (*(unsigned char *)(*a2 + 32))
  {
    uint64_t v7 = v5[2];
    uint64_t v6 = v5[3];
    if (v4 != v6 || v4 && memcmp(a1, (const void *)v5[2], v4))
    {
      if (!*((_DWORD *)v3 + 17)) {
        mlir::OpPassManager::OpPassManager();
      }
      unint64_t v25 = "Can't add pass '";
      __int16 v26 = 259;
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      __int16 v24 = 261;
      v23[0] = v10;
      v23[1] = v11;
      llvm::operator+((uint64_t *)&v25, v23, (uint64_t)v27);
      __int16 v21 = "' restricted to '";
      __int16 v22 = 259;
      llvm::operator+(v27, (uint64_t *)&v21, (uint64_t)v28);
      __int16 v20 = 261;
      v19[0] = v7;
      v19[1] = v6;
      llvm::operator+(v28, v19, (uint64_t)v29);
      uint64_t v17 = "' on a PassManager intended to run on '";
      __int16 v18 = 259;
      llvm::operator+(v29, (uint64_t *)&v17, (uint64_t)v30);
      __int16 v16 = 261;
      v15[0] = (uint64_t)mlir::detail::OpPassManagerImpl::getOpAnchorName((const char *)v3);
      v15[1] = v12;
      llvm::operator+(v30, v15, (uint64_t)v31);
      uint64_t v13 = "', did you intend to nest?";
      __int16 v14 = 259;
      llvm::operator+(v31, (uint64_t *)&v13, (uint64_t)v32);
      llvm::report_fatal_error((llvm::Twine *)v32, 1);
    }
  }
LABEL_14:
  size_t v8 = (uint64_t **)v3[6];
  if ((unint64_t)v8 >= v3[7])
  {
    __n128 result = std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>(v3 + 5, a2);
  }
  else
  {
    *a2 = 0;
    void *v8 = v5;
    __n128 result = v8 + 1;
  }
  v3[6] = result;
  return result;
}

uint64_t mlir::OpPassManager::addPass(unsigned char **a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  mlir::detail::OpPassManagerImpl::addPass(v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

const char *mlir::detail::OpPassManagerImpl::getOpAnchorName(const char *this)
{
  if ((this[23] & 0x80000000) == 0)
  {
    if (this[23]) {
      goto LABEL_3;
    }
    return "any";
  }
  if (!*((void *)this + 1)) {
    return "any";
  }
LABEL_3:
  if (this[23] < 0) {
    return *(const char **)this;
  }
  return this;
}

uint64_t mlir::detail::OpPassManagerImpl::finalizePassList(mlir::detail::OpPassManagerImpl *this, mlir::MLIRContext *a2)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)*((void *)this + 5);
  uint64_t v6 = (uint64_t *)*((void *)this + 6);
  size_t v4 = (uint64_t **)((char *)this + 40);
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *v5;
      uint64_t v9 = *(void *)(*v5 + 8);
      {
        uint64_t v73 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        v74[0] = 81;
        unint64_t v13 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
        if (v74[0] >= v13) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = v74[0];
        }
        uint64_t v15 = &v73[v14];
        unint64_t v16 = v74[0] - v14;
        uint64_t v17 = 18;
        if (v16 < 0x12) {
          uint64_t v17 = v16;
        }
        unint64_t v18 = v16 - v17;
        if (v18 >= v18 - 1) {
          uint64_t v19 = v18 - 1;
        }
        else {
          uint64_t v19 = v18;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      }
      if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        if (v8
          && mlir::detail::OpToOpPassAdaptor::tryMergeInto((mlir::detail::OpToOpPassAdaptor *)v7, a2, (mlir::detail::OpToOpPassAdaptor *)v8))
        {
          uint64_t v12 = *v5;
          *uint64_t v5 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          uint64_t v7 = v8;
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v10 = *(unsigned int *)(v8 + 352);
          if (v10)
          {
            uint64_t v11 = *(mlir::detail::OpPassManagerImpl ***)(v8 + 344);
            uint64_t v7 = 8 * v10;
            while (mlir::detail::OpPassManagerImpl::finalizePassList(*v11, a2))
            {
              ++v11;
              v7 -= 8;
              if (!v7) {
                goto LABEL_4;
              }
            }
            return 0;
          }
        }
        uint64_t v7 = 0;
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v6);
    if (v7)
    {
      uint64_t v20 = *(unsigned int *)(v7 + 352);
      if (v20)
      {
        __int16 v21 = *(mlir::detail::OpPassManagerImpl ***)(v7 + 344);
        uint64_t v22 = 8 * v20;
        while (mlir::detail::OpPassManagerImpl::finalizePassList(*v21, a2))
        {
          ++v21;
          v22 -= 8;
          if (!v22) {
            goto LABEL_33;
          }
        }
        return 0;
      }
    }
  }
LABEL_33:
  llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(v4);
  char v23 = *((unsigned char *)this + 23);
  if (v23 < 0)
  {
    if (!*((void *)this + 1)) {
      goto LABEL_39;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
LABEL_39:
    if (*((unsigned char *)this + 32)) {
      goto LABEL_40;
    }
    return 1;
  }
  if (*((unsigned char *)this + 32)) {
    goto LABEL_39;
  }
  if (v23 >= 0) {
    uint64_t v47 = this;
  }
  else {
    uint64_t v47 = *(mlir::detail::OpPassManagerImpl **)this;
  }
  if (v23 >= 0) {
    uint64_t v48 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v48 = *((void *)this + 1);
  }
  mlir::OperationName::OperationName(&v73, v47, v48, a2);
  uint64_t v49 = v73;
  if (!*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 32) = 1;
  }
  *((void *)this + 3) = v49;
  if (!*((unsigned char *)this + 32)) {
    return 1;
  }
LABEL_40:
  uint64_t v25 = *((void *)this + 3);
  __int16 v26 = *(void **)(v25 + 16);
  uint64_t v27 = v25;
  if (v26 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (uint64_t *)*((void *)this + 5);
  unint64_t v29 = (uint64_t *)*((void *)this + 6);
  uint64_t v24 = 1;
  if (v28 != v29 && v26 != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    unint64_t v30 = v27 | v25 & 0xFFFFFFFFFFFFFF00;
    if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)*v28 + 72))(*v28, v30))
    {
      unint64_t v32 = v28 + 1;
      while (v32 != v29)
      {
        uint64_t v33 = *v32++;
        if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v33 + 72))(v33, v30) & 1) == 0)
        {
          uint64_t v28 = v32 - 1;
          goto LABEL_49;
        }
      }
      return 1;
    }
LABEL_49:
    uint64_t v34 = mlir::UnknownLoc::get(a2, v31);
    mlir::emitError(v34, (uint64_t)&v73);
    if (v73)
    {
      LODWORD(v69) = 3;
      uint64_t v70 = "unable to schedule pass '";
      uint64_t v71 = 25;
      uint64_t v35 = &v69;
      uint64_t v36 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v63 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v66 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v63, 24);
          uint64_t v36 = (char *)v75;
          uint64_t v35 = (void ***)((char *)v75 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v63, 24);
          uint64_t v35 = &v69;
          uint64_t v36 = (char *)v75;
        }
      }
      unint64_t v37 = &v36[24 * v76];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = v35[2];
      *(_OWORD *)unint64_t v37 = v38;
      ++v76;
    }
    uint64_t v39 = (void **)(*(uint64_t (**)(void))(*(void *)*v28 + 16))();
    if (v73)
    {
      __int16 v72 = 261;
      uint64_t v69 = v39;
      uint64_t v70 = v40;
      mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
      if (v73)
      {
        LODWORD(v69) = 3;
        uint64_t v70 = "' on a PassManager intended to run on '";
        uint64_t v71 = 39;
        unint64_t v41 = &v69;
        uint64_t v42 = (char *)v75;
        if (v76 >= v77)
        {
          unint64_t v64 = v76 + 1;
          if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
          {
            int64_t v67 = (char *)&v69 - (unsigned char *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v64, 24);
            uint64_t v42 = (char *)v75;
            unint64_t v41 = (void ***)((char *)v75 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v64, 24);
            unint64_t v41 = &v69;
            uint64_t v42 = (char *)v75;
          }
        }
        unint64_t v43 = &v42[24 * v76];
        long long v44 = *(_OWORD *)v41;
        *((void *)v43 + 2) = v41[2];
        *(_OWORD *)unint64_t v43 = v44;
        ++v76;
      }
    }
    uint64_t v45 = *((unsigned __int8 *)this + 23);
    if (*((char *)this + 23) < 0)
    {
      if (*((void *)this + 1))
      {
LABEL_58:
        int v46 = *(void ***)this;
        if ((v45 & 0x80u) != 0) {
          uint64_t v45 = *((void *)this + 1);
        }
        else {
          int v46 = (void **)this;
        }
        if (!v73) {
          goto LABEL_79;
        }
        goto LABEL_76;
      }
    }
    else if (*((unsigned char *)this + 23))
    {
      goto LABEL_58;
    }
    int v46 = (void **)"any";
    uint64_t v45 = 3;
    if (!v73)
    {
LABEL_79:
      uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      }
      if (v83)
      {
        uint64_t v55 = __p;
        if (__p)
        {
          uint64_t v56 = v82;
          uint64_t v57 = __p;
          if (v82 != __p)
          {
            do
              uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            uint64_t v57 = __p;
          }
          uint64_t v82 = v55;
          operator delete(v57);
        }
        uint64_t v58 = v79;
        if (v79)
        {
          unint64_t v59 = v80;
          unint64_t v60 = v79;
          if (v80 != v79)
          {
            do
            {
              uint64_t v62 = *--v59;
              uint64_t v61 = v62;
              *unint64_t v59 = 0;
              if (v62) {
                MEMORY[0x21667D390](v61, 0x1000C8077774924);
              }
            }
            while (v59 != v58);
            unint64_t v60 = v79;
          }
          uint64_t v80 = v58;
          operator delete(v60);
        }
        if (v75 != v78) {
          free(v75);
        }
      }
      return v24;
    }
LABEL_76:
    __int16 v72 = 261;
    uint64_t v69 = v46;
    uint64_t v70 = (const char *)v45;
    mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
    if (v73)
    {
      LODWORD(v69) = 3;
      uint64_t v70 = "'!";
      uint64_t v71 = 2;
      uint64_t v51 = &v69;
      uint64_t v52 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v65 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v68 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v65, 24);
          uint64_t v52 = (char *)v75;
          uint64_t v51 = (void ***)((char *)v75 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v65, 24);
          uint64_t v51 = &v69;
          uint64_t v52 = (char *)v75;
        }
      }
      uint64_t v53 = &v52[24 * v76];
      long long v54 = *(_OWORD *)v51;
      *((void *)v53 + 2) = v51[2];
      *(_OWORD *)uint64_t v53 = v54;
      ++v76;
    }
    goto LABEL_79;
  }
  return v24;
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::detail::OpToOpPassAdaptor *this, mlir::MLIRContext *a2, mlir::detail::OpToOpPassAdaptor *a3)
{
  uint64_t v5 = *((unsigned int *)this + 88);
  if (!v5)
  {
    uint64_t v7 = (uint64_t **)*((void *)this + 43);
LABEL_10:
    if (v7 == (uint64_t **)(*((void *)this + 43) + 8 * v5)) {
      goto LABEL_30;
    }
    uint64_t v8 = *((unsigned int *)a3 + 88);
    if (!v8) {
      goto LABEL_30;
    }
    uint64_t v9 = (uint64_t *)*((void *)a3 + 43);
    uint64_t v10 = 8 * v8;
    while (1)
    {
      uint64_t v11 = (uint64_t *)*v9;
      char v12 = *(unsigned char *)(*v9 + 23);
      if (v12 < 0)
      {
        if (!v11[1]) {
          goto LABEL_27;
        }
      }
      else if (!*(unsigned char *)(*v9 + 23))
      {
        goto LABEL_27;
      }
      if (!*((unsigned char *)v11 + 32))
      {
        if (v12 >= 0) {
          unint64_t v13 = (uint64_t *)*v9;
        }
        else {
          unint64_t v13 = (uint64_t *)*v11;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(*v9 + 23);
        }
        else {
          uint64_t v14 = v11[1];
        }
        mlir::OperationName::OperationName(&v85, v13, v14, a2);
        if (!*((unsigned char *)v11 + 32)) {
          *((unsigned char *)v11 + 32) = 1;
        }
        v11[3] = v85;
      }
LABEL_27:
      if (!*((unsigned char *)v11 + 32) || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v7, (uint64_t)a2, v11[3]) & 1) != 0) {
        return 0;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v6 = 8 * v5;
  uint64_t v7 = (uint64_t **)*((void *)this + 43);
  do
  {
    if (*((char *)*v7 + 23) < 0)
    {
      if (!(*v7)[1]) {
        goto LABEL_10;
      }
    }
    else if (!*((unsigned char *)*v7 + 23))
    {
      goto LABEL_10;
    }
    ++v7;
    v6 -= 8;
  }
  while (v6);
LABEL_30:
  uint64_t v81 = this;
  uint64_t v82 = (void **)((char *)a3 + 344);
  uint64_t v15 = *((unsigned int *)a3 + 88);
  if (!v15)
  {
    uint64_t v17 = (uint64_t **)*((void *)a3 + 43);
LABEL_39:
    unint64_t v18 = (uint64_t *)*((void *)this + 43);
    uint64_t v19 = *((unsigned int *)this + 88);
    if (v17 == (uint64_t **)(*((void *)a3 + 43) + 8 * v15)) {
      goto LABEL_60;
    }
    if (!v19) {
      goto LABEL_149;
    }
    uint64_t v20 = 8 * v19;
    while (1)
    {
      uint64_t v21 = *v18;
      char v22 = *(unsigned char *)(*v18 + 23);
      if (v22 < 0)
      {
        if (!*(void *)(v21 + 8)) {
          goto LABEL_56;
        }
      }
      else if (!*(unsigned char *)(*v18 + 23))
      {
        goto LABEL_56;
      }
      if (!*(unsigned char *)(v21 + 32))
      {
        if (v22 >= 0) {
          uint64_t v23 = *v18;
        }
        else {
          uint64_t v23 = *(void *)v21;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(*v18 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v21 + 8);
        }
        mlir::OperationName::OperationName(&v85, v23, v24, a2);
        if (!*(unsigned char *)(v21 + 32)) {
          *(unsigned char *)(v21 + 32) = 1;
        }
        *(void *)(v21 + 24) = v85;
      }
LABEL_56:
      if (!*(unsigned char *)(v21 + 32)
        || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v17, (uint64_t)a2, *(void *)(v21 + 24)) & 1) != 0)
      {
        return 0;
      }
      ++v18;
      v20 -= 8;
      if (!v20) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v16 = 8 * v15;
  uint64_t v17 = (uint64_t **)*((void *)a3 + 43);
  do
  {
    if (*((char *)*v17 + 23) < 0)
    {
      if (!(*v17)[1]) {
        goto LABEL_39;
      }
    }
    else if (!*((unsigned char *)*v17 + 23))
    {
      goto LABEL_39;
    }
    ++v17;
    v16 -= 8;
  }
  while (v16);
LABEL_59:
  unint64_t v18 = (uint64_t *)*((void *)this + 43);
  LODWORD(v19) = *((_DWORD *)this + 88);
LABEL_60:
  if (v19)
  {
    char v83 = &v18[v19];
    while (1)
    {
      uint64_t v25 = *v18;
      char v26 = *(unsigned char *)(*v18 + 23);
      if (v26 < 0)
      {
        if (!*(void *)(v25 + 8))
        {
LABEL_92:
          uint64_t v27 = "any";
          size_t v28 = 3;
          unint64_t v29 = (const char **)*((void *)a3 + 43);
          uint64_t v30 = *((unsigned int *)a3 + 88);
          if (v30) {
            goto LABEL_72;
          }
          goto LABEL_93;
        }
      }
      else if (!*(unsigned char *)(*v18 + 23))
      {
        goto LABEL_92;
      }
      if (v26 >= 0) {
        uint64_t v27 = (unsigned __int8 *)*v18;
      }
      else {
        uint64_t v27 = *(unsigned __int8 **)v25;
      }
      if (v26 >= 0) {
        size_t v28 = *(unsigned __int8 *)(*v18 + 23);
      }
      else {
        size_t v28 = *(void *)(v25 + 8);
      }
      unint64_t v29 = (const char **)*((void *)a3 + 43);
      uint64_t v30 = *((unsigned int *)a3 + 88);
      if (v30)
      {
LABEL_72:
        if (v28 == 3)
        {
          uint64_t v31 = 8 * v30;
          unint64_t v32 = v29;
          while (1)
          {
            uint64_t v33 = *v32;
            char v37 = (*v32)[23];
            if (v37 < 0)
            {
              if (!*((void *)v33 + 1))
              {
LABEL_74:
                uint64_t v33 = "any";
                goto LABEL_75;
              }
            }
            else if (!(*v32)[23])
            {
              goto LABEL_74;
            }
            if (v37 >= 0) {
              uint64_t v38 = *((unsigned __int8 *)*v32 + 23);
            }
            else {
              uint64_t v38 = *((void *)v33 + 1);
            }
            if (v38 != 3) {
              goto LABEL_79;
            }
            if (v37 < 0) {
              uint64_t v33 = *(const char **)v33;
            }
LABEL_75:
            int v34 = *(unsigned __int16 *)v33;
            int v35 = *((unsigned __int8 *)v33 + 2);
            if (v34 == *(unsigned __int16 *)v27 && v35 == v27[2]) {
              goto LABEL_94;
            }
LABEL_79:
            ++v32;
            v31 -= 8;
            if (!v31) {
              goto LABEL_62;
            }
          }
        }
        uint64_t v71 = 8 * v30;
        unint64_t v32 = v29;
        while (2)
        {
          __int16 v72 = *v32;
          char v73 = (*v32)[23];
          if (v73 < 0)
          {
            if (!*((void *)v72 + 1)) {
              goto LABEL_127;
            }
          }
          else if (!(*v32)[23])
          {
LABEL_127:
            ++v32;
            v71 -= 8;
            if (!v71) {
              goto LABEL_62;
            }
            continue;
          }
          break;
        }
        if (v73 >= 0) {
          uint64_t v74 = *((unsigned __int8 *)*v32 + 23);
        }
        else {
          uint64_t v74 = *((void *)v72 + 1);
        }
        if (v74 == v28)
        {
          if (!v28) {
            goto LABEL_94;
          }
          unint64_t v75 = v73 >= 0 ? *v32 : *(const char **)v72;
          if (!memcmp(v75, v27, v28)) {
            goto LABEL_94;
          }
        }
        goto LABEL_127;
      }
LABEL_93:
      unint64_t v32 = v29;
LABEL_94:
      if (v32 == &v29[v30] || !v32)
      {
LABEL_62:
        llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)v82, v18++);
        if (v18 == v83) {
          break;
        }
      }
      else
      {
        unint64_t v40 = *(uint64_t **)(v25 + 40);
        uint64_t v39 = *(uint64_t **)(v25 + 48);
        if (v40 == v39) {
          goto LABEL_143;
        }
        unint64_t v41 = *v32;
        uint64_t v42 = (void *)*((void *)*v32 + 6);
        do
        {
          unint64_t v44 = *((void *)v41 + 7);
          if ((unint64_t)v42 < v44)
          {
            uint64_t v43 = *v40;
            uint64_t *v40 = 0;
            *v42++ = v43;
          }
          else
          {
            uint64_t v45 = *((void *)v41 + 5);
            int v46 = (char *)v42 - v45;
            uint64_t v47 = ((uint64_t)v42 - v45) >> 3;
            if ((unint64_t)(v47 + 1) >> 61) {
              abort();
            }
            uint64_t v48 = v44 - v45;
            uint64_t v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
              uint64_t v49 = v47 + 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            if (v50)
            {
              if (v50 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v51 = (char *)operator new(8 * v50);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v52 = &v51[8 * v47];
            uint64_t v53 = &v51[8 * v50];
            uint64_t v54 = *v40;
            uint64_t *v40 = 0;
            *(void *)uint64_t v52 = v54;
            uint64_t v42 = v52 + 8;
            uint64_t v55 = (char *)*((void *)v41 + 5);
            uint64_t v56 = (char *)*((void *)v41 + 6);
            uint64_t v57 = (char *)(v56 - v55);
            if (v56 == v55)
            {
              *((void *)v41 + 5) = v52;
              *((void *)v41 + 6) = v42;
              *((void *)v41 + 7) = v53;
            }
            else
            {
              uint64_t v58 = v57 - 8;
              if ((unint64_t)(v57 - 8) < 0x78
                || &v56[-8 * ((unint64_t)v58 >> 3) - 8] < v52
                && &v46[(void)v51 - ((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8) - 8] < v56)
              {
                goto LABEL_157;
              }
              uint64_t v59 = ((unint64_t)v58 >> 3) + 1;
              uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v61 = &v56[-v60];
              v52 -= v60;
              uint64_t v62 = &v46[(void)v51 - 16];
              unint64_t v63 = v56 - 16;
              uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v66 = *((_OWORD *)v63 - 1);
                long long v65 = *(_OWORD *)v63;
                *((_OWORD *)v63 - 1) = 0uLL;
                *(_OWORD *)unint64_t v63 = 0uLL;
                *((_OWORD *)v62 - 1) = v66;
                *(_OWORD *)uint64_t v62 = v65;
                v62 -= 32;
                v63 -= 32;
                v64 -= 4;
              }
              while (v64);
              uint64_t v56 = v61;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_157:
                do
                {
                  uint64_t v67 = *((void *)v56 - 1);
                  v56 -= 8;
                  *(void *)uint64_t v56 = 0;
                  *((void *)v52 - 1) = v67;
                  v52 -= 8;
                }
                while (v56 != v55);
              }
              uint64_t v56 = (char *)*((void *)v41 + 5);
              int64_t v68 = (char *)*((void *)v41 + 6);
              *((void *)v41 + 5) = v52;
              *((void *)v41 + 6) = v42;
              *((void *)v41 + 7) = v53;
              while (v68 != v56)
              {
                uint64_t v70 = *((void *)v68 - 1);
                v68 -= 8;
                uint64_t v69 = v70;
                *(void *)int64_t v68 = 0;
                if (v70) {
                  (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                }
              }
            }
            if (v56) {
              operator delete(v56);
            }
          }
          *((void *)v41 + 6) = v42;
          ++v40;
        }
        while (v40 != v39);
        unsigned int v76 = *(uint64_t **)(v25 + 40);
        unint64_t v40 = *(uint64_t **)(v25 + 48);
        if (v40 == v76)
        {
LABEL_143:
          *(void *)(v25 + 48) = v40;
          if (++v18 == v83) {
            break;
          }
        }
        else
        {
          do
          {
            uint64_t v78 = *--v40;
            uint64_t v77 = v78;
            uint64_t *v40 = 0;
            if (v78) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
          while (v40 != v76);
          *(void *)(v25 + 48) = v76;
          if (++v18 == v83) {
            break;
          }
        }
      }
    }
  }
LABEL_149:
  llvm::SmallVectorImpl<mlir::OpPassManager>::clear((uint64_t)v81 + 344);
  size_t v79 = *((unsigned int *)a3 + 88);
  if (v79 >= 2) {
    qsort(*v82, v79, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke);
  }
  return 1;
}

uint64_t **llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(uint64_t **result)
{
  int v1 = *result;
  unint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = result;
    while (*v1)
    {
      if (++v1 == v2) {
        return result;
      }
    }
    if (v1 != v2)
    {
      size_t v4 = v1 + 1;
      if (v1 + 1 != v2)
      {
        do
        {
          uint64_t v5 = *v4;
          if (*v4)
          {
            *size_t v4 = 0;
            uint64_t result = (uint64_t **)*v1;
            *int v1 = v5;
            if (result) {
              uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
            }
            ++v1;
          }
          ++v4;
        }
        while (v4 != v2);
        unint64_t v2 = v3[1];
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        uint64_t v6 = (uint64_t **)*--v2;
        uint64_t result = v6;
        *unint64_t v2 = 0;
        if (v6) {
          uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
        }
      }
      v3[1] = v1;
    }
  }
  return result;
}

uint64_t mlir::detail::OpPassManagerImpl::canScheduleOn(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6 = *((unsigned char *)a1 + 23);
  if (v6 < 0)
  {
    if (!a1[1]) {
      goto LABEL_6;
    }
  }
  else if (!*((unsigned char *)a1 + 23))
  {
LABEL_6:
    if (*((unsigned char *)a1 + 32)) {
      return a1[3] == a3;
    }
    goto LABEL_17;
  }
  if (*((unsigned char *)a1 + 32)) {
    goto LABEL_6;
  }
  if (v6 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = (uint64_t *)*a1;
  }
  if (v6 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v9 = a1[1];
  }
  mlir::OperationName::OperationName(v19, v8, v9, a2);
  uint64_t v10 = v19[0];
  if (!*((unsigned char *)a1 + 32))
  {
    *((unsigned char *)a1 + 32) = 1;
    a1[3] = v10;
    return a1[3] == a3;
  }
  a1[3] = v19[0];
  if (*((unsigned char *)a1 + 32)) {
    return a1[3] == a3;
  }
LABEL_17:
  uint64_t v11 = *(void **)(a3 + 16);
  BOOL v12 = v11 == &mlir::detail::TypeIDResolver<void,void>::id;
  BOOL v13 = v11 != &mlir::detail::TypeIDResolver<void,void>::id;
  uint64_t v14 = a3;
  if (v12) {
    uint64_t v14 = 0;
  }
  v19[0] = v14 | a3 & 0xFFFFFFFFFFFFFF00;
  v19[1] = v13;
  if (v12) {
    return 0;
  }
  uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v19);
  if (result)
  {
    uint64_t v15 = a1[5];
    uint64_t v16 = a1[6];
    if (v15 == v16)
    {
      return 1;
    }
    else
    {
      uint64_t v17 = v15 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v17 - 8) + 72))(*(void *)(v17 - 8), v19[0]);
        if (result) {
          BOOL v18 = v17 == v16;
        }
        else {
          BOOL v18 = 1;
        }
        v17 += 8;
      }
      while (!v18);
    }
  }
  return result;
}

void mlir::OpPassManager::OpPassManager()
{
}

void mlir::OpPassManager::operator=()
{
}

uint64_t mlir::OpPassManager::begin(mlir::OpPassManager *this)
{
  return *(void *)(*(void *)this + 40);
}

llvm::raw_ostream *mlir::OpPassManager::printAsTextualPipeline(const char **this, llvm::raw_ostream *a2)
{
  size_t v4 = *this;
  char v5 = (*this)[23];
  if ((v5 & 0x80000000) == 0)
  {
    if ((*this)[23]) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v7 = (void *)((char *)a2 + 24);
    uint64_t v10 = (void *)((char *)a2 + 32);
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
    unint64_t v12 = *((void *)a2 + 3) - (void)result;
    char v6 = "any";
    size_t v8 = 3;
    if (v12 > 2) {
      goto LABEL_18;
    }
LABEL_14:
    uint64_t result = llvm::raw_ostream::write(a2, v6, v8);
    uint64_t v11 = result;
    goto LABEL_15;
  }
  if (!*((void *)v4 + 1)) {
    goto LABEL_13;
  }
LABEL_3:
  if (v5 >= 0) {
    char v6 = *this;
  }
  else {
    char v6 = *(const char **)v4;
  }
  uint64_t v7 = (void *)((char *)a2 + 24);
  if (v5 >= 0) {
    size_t v8 = *((unsigned __int8 *)*this + 23);
  }
  else {
    size_t v8 = *((void *)v4 + 1);
  }
  uint64_t v10 = (void *)((char *)a2 + 32);
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v8 > *((void *)a2 + 3) - (void)result) {
    goto LABEL_14;
  }
  uint64_t v11 = a2;
  if (!v8)
  {
LABEL_15:
    BOOL v13 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) != v13) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = (llvm::raw_ostream *)memcpy(result, v6, v8);
  *v10 += v8;
  uint64_t v11 = a2;
  BOOL v13 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) != v13)
  {
LABEL_16:
    unsigned char *v13 = 40;
    ++*((void *)v11 + 4);
    uint64_t v14 = (mlir::Pass **)*((void *)*this + 5);
    uint64_t v15 = (mlir::Pass **)*((void *)*this + 6);
    if (v14 == v15) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = llvm::raw_ostream::write(v11, "(", 1uLL);
  uint64_t v14 = (mlir::Pass **)*((void *)*this + 5);
  uint64_t v15 = (mlir::Pass **)*((void *)*this + 6);
  if (v14 == v15) {
    goto LABEL_25;
  }
LABEL_20:
  uint64_t v17 = *v14;
  uint64_t v16 = v14 + 1;
  for (uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v17, a2);
        v16 != v15;
        uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v19, a2))
  {
    while (*v7 != *v10)
    {
      *(unsigned char *)(*v10)++ = 44;
      BOOL v18 = *v16++;
      uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v18, a2);
      if (v16 == v15) {
        goto LABEL_25;
      }
    }
    llvm::raw_ostream::write(a2, ",", 1uLL);
    uint64_t v19 = *v16++;
  }
LABEL_25:
  if (*v7 == *v10)
  {
    return llvm::raw_ostream::write(a2, ")", 1uLL);
  }
  else
  {
    *(unsigned char *)(*v10)++ = 41;
  }
  return result;
}

uint64_t mlir::OpPassManager::initialize(mlir::OpPassManager *this, mlir::MLIRContext *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 64) == a3) {
    return 1;
  }
  *(_DWORD *)(v3 + 64) = a3;
  char v5 = *(uint64_t **)(v3 + 40);
  char v6 = *(uint64_t **)(v3 + 48);
  if (v6 == v5) {
    return 1;
  }
  while (1)
  {
    uint64_t v8 = *v5;
    uint64_t v9 = *(void *)(*v5 + 8);
    {
      uint64_t v22 = v8;
      uint64_t v8 = v22;
      if (v13)
      {
        uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        unint64_t v24 = 81;
        unint64_t v14 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v14) {
          unint64_t v15 = v14;
        }
        else {
          unint64_t v15 = v24;
        }
        uint64_t v16 = &v23[v15];
        unint64_t v17 = v24 - v15;
        if (v24 - v15 >= 0x12) {
          uint64_t v18 = 18;
        }
        else {
          uint64_t v18 = v24 - v15;
        }
        unint64_t v19 = v17 - v18;
        if (v19 >= v19 - 1) {
          uint64_t v20 = v19 - 1;
        }
        else {
          uint64_t v20 = v19;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
        uint64_t v8 = v22;
      }
    }
    if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id) {
      break;
    }
    if (!(*(unsigned __int8 (**)(uint64_t, mlir::MLIRContext *))(*(void *)v8 + 64))(v8, a2)) {
      return 0;
    }
LABEL_5:
    if (++v5 == v6) {
      return 1;
    }
  }
  uint64_t v10 = *(unsigned int *)(v8 + 352);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = *(mlir::OpPassManager **)(v8 + 344);
  uint64_t v12 = 8 * v10;
  while (mlir::OpPassManager::initialize(v11, a2, a3))
  {
    uint64_t v11 = (mlir::OpPassManager *)((char *)v11 + 8);
    v12 -= 8;
    if (!v12) {
      goto LABEL_5;
    }
  }
  return 0;
}

unint64_t mlir::OpPassManager::hash(mlir::OpPassManager *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v1 = *(uint64_t **)(*(void *)this + 40);
  unint64_t v2 = *(uint64_t **)(*(void *)this + 48);
  if (v2 == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v22 = *(uint64_t **)(*(void *)this + 48);
  do
  {
    uint64_t v5 = *v1;
    uint64_t v6 = *(void *)(*v1 + 8);
    if ((atomic_load_explicit((atomic_uchar *volatile)v4, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire(v4))
    {
      *(void *)&long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      *((void *)&v23 + 1) = 81;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v23 + 1) >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((void *)&v23 + 1);
      }
      uint64_t v15 = v23 + v14;
      unint64_t v16 = *((void *)&v23 + 1) - v14;
      uint64_t v17 = 18;
      if (v16 < 0x12) {
        uint64_t v17 = v16;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      __cxa_guard_release(v4);
    }
    if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 352);
      if (v7)
      {
        uint64_t v8 = v4;
        uint64_t v9 = *(mlir::OpPassManager **)(v5 + 344);
        uint64_t v10 = 8 * v7;
        do
        {
          uint64_t v11 = mlir::OpPassManager::hash(v9);
          uint64_t v30 = 0;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          {
            unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v12 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v12;
          }
          uint64_t v31 = llvm::hashing::detail::get_execution_seed(void)::seed;
          *(void *)&long long v23 = v3;
          *((void *)&v23 + 1) = v11;
          llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v23, 0, (char *)&v24, (char *)&v27);
          uint64_t v9 = (mlir::OpPassManager *)((char *)v9 + 8);
          v10 -= 8;
        }
        while (v10);
        size_t v4 = v8;
        unint64_t v2 = v22;
      }
    }
    else
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      }
      uint64_t v31 = llvm::hashing::detail::get_execution_seed(void)::seed;
      *(void *)&long long v23 = v3;
      *((void *)&v23 + 1) = v5;
      unint64_t v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v23, 0, (char *)&v24, (char *)&v27);
    }
    ++v1;
  }
  while (v1 != v2);
  return v3;
}

uint64_t mlir::detail::OpToOpPassAdaptor::run(uint64_t a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3, char a4, int a5)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v110 = a1;
  uint64_t v111 = a3;
  unint64_t v109 = a2;
  char v108 = a4;
  int v107 = a5;
  uint64_t v9 = *((void *)a2 + 6);
  uint64_t v5 = *(void **)(v9 + 16);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<void,void>::id;
  BOOL v7 = v5 != &mlir::detail::TypeIDResolver<void,void>::id;
  unint64_t v8 = v9 & 0xFFFFFFFFFFFFFF00;
  uint64_t v9 = v9;
  if (v6) {
    uint64_t v9 = 0;
  }
  v106[0] = v9 | v8;
  v106[1] = v7;
  if (v6)
  {
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t)a2, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an unregistered operation";
      uint64_t v114 = 54;
      uint64_t v30 = &v112;
      uint64_t v31 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v79 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v96 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v79, 24);
          uint64_t v31 = v117;
          uint64_t v30 = (const char **)((char *)v117 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v79, 24);
          uint64_t v30 = &v112;
          uint64_t v31 = v117;
        }
      }
      uint64_t v32 = &v31[3 * v118];
      long long v33 = *(_OWORD *)v30;
      void v32[2] = v30[2];
      *(_OWORD *)uint64_t v32 = v33;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      int v35 = v122;
      if (v122)
      {
        uint64_t v36 = v123;
        char v37 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
          while (v36 != v35);
          char v37 = v122;
        }
        unint64_t v123 = v35;
        operator delete(v37);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      uint64_t v39 = v121;
      unint64_t v40 = v120;
      if (v121 == v120) {
        goto LABEL_76;
      }
      do
      {
        uint64_t v42 = *--v39;
        uint64_t v41 = v42;
        void *v39 = 0;
        if (v42) {
          MEMORY[0x21667D390](v41, 0x1000C8077774924);
        }
      }
      while (v39 != v38);
      goto LABEL_75;
    }
  }
  else if (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v106))
  {
    uint64_t v13 = *((void *)v109 + 6);
    uint64_t v11 = *(void **)(v13 + 16);
    unint64_t v12 = v13 & 0xFFFFFFFFFFFFFF00;
    uint64_t v13 = v13;
    if (v11 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (llvm *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v13 | v12);
    if (v14)
    {
      uint64_t v15 = v111;
      uint64_t v16 = *((void *)v111 + 9);
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) == 0 && v17)
      {
        do
        {
          uint64_t v18 = *(void *)(v17 + 72);
          unint64_t v17 = v18 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v18 & 4) == 0 && v17);
      }
      v101 = (std::recursive_mutex **)v17;
      v100[0] = llvm::get_threadid(v14);
      v100[1] = a1;
      v116[0] = &v109;
      v116[1] = &v107;
      v116[2] = &v111;
      v117 = (const char **)&v108;
      uint64_t v118 = &v101;
      v119[0] = v100;
      if (*(unsigned char *)(a1 + 120))
      {
        uint64_t v19 = *(void **)(a1 + 64);
        if (v19 != *(void **)(a1 + 56))
        {
          free(v19);
          uint64_t v15 = v111;
          unint64_t v17 = (unint64_t)v101;
        }
      }
      unint64_t v20 = v109;
      *(void *)(a1 + 40) = (unint64_t)v109 & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a1 + 48) = v15;
      *(void *)(a1 + 56) = a1 + 88;
      *(void *)(a1 + 64) = a1 + 88;
      *(void *)(a1 + 72) = 2;
      *(_DWORD *)(a1 + 80) = 0;
      *(void *)(a1 + 104) = llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>;
      *(void *)(a1 + 112) = v116;
      *(unsigned char *)(a1 + 120) = 1;
      if (v17)
      {
        uint64_t v21 = *(std::recursive_mutex **)v17;
        std::recursive_mutex::lock(*(std::recursive_mutex **)v17);
        uint64_t v22 = *(std::recursive_mutex **)v17;
        long long v23 = *(uint64_t **)(*(void *)v17 + 72);
        long long v24 = *(uint64_t **)&v22[1].__m_.__opaque[8];
        while (v23 != v24)
        {
          uint64_t v25 = *v23++;
          (*(void (**)(uint64_t, uint64_t, mlir *))(*(void *)v25 + 32))(v25, a1, v20);
        }
        std::recursive_mutex::unlock(v21);
        unint64_t v20 = v109;
      }
      unsigned __int8 v99 = 0;
      uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir *)((char *)v20 + 24));
      uint64_t v102 = (void **)&v110;
      unint64_t v103 = (unint64_t)&v108;
      v104 = (BOOL *)&v99;
      uint64_t v27 = v110;
      unint64_t v115 = (unint64_t)v109 & 0xFFFFFFFFFFFFFFF9;
      if (mlir::MLIRContext::hasActionHandler((mlir::MLIRContext *)Context))
      {
        mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>, (uint64_t)&v102, (uint64_t)&v115, 1, v27);
        mlir::detail::NestedAnalysisMap::invalidate(v111, (const mlir::detail::PreservedAnalyses *)(v110 + 56));
        int v68 = v99;
        if (v99)
        {
LABEL_89:
          uint64_t v71 = v101;
          if (v101)
          {
            char v73 = v109;
            uint64_t v72 = v110;
            uint64_t v74 = *v101;
            std::recursive_mutex::lock(*v101);
            uint64_t v76 = *(void *)(*v71)[1].__m_.__opaque;
            uint64_t v75 = *(void *)&(*v71)[1].__m_.__opaque[8];
            if (v68)
            {
              while (v75 != v76)
              {
                uint64_t v77 = *(void *)(v75 - 8);
                v75 -= 8;
                (*(void (**)(uint64_t, uint64_t, mlir *))(*(void *)v77 + 48))(v77, v72, v73);
              }
            }
            else
            {
              while (v75 != v76)
              {
                uint64_t v78 = *(void *)(v75 - 8);
                v75 -= 8;
                (*(void (**)(uint64_t, uint64_t, mlir *))(*(void *)v78 + 40))(v78, v72, v73);
              }
            }
            std::recursive_mutex::unlock(v74);
            int v68 = v99;
          }
          return v68 ^ 1u;
        }
      }
      else
      {
        uint64_t v28 = v110;
        uint64_t v29 = *(void *)(v110 + 8);
        {
          v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v113 = 81;
          unint64_t v82 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
          if (v113 >= v82) {
            unint64_t v83 = v82;
          }
          else {
            unint64_t v83 = v113;
          }
          uint64_t v84 = &v112[v83];
          uint64_t v85 = (const char *)(v113 - v83);
          if (v113 - v83 >= 0x12) {
            uint64_t v86 = 18;
          }
          else {
            uint64_t v86 = v113 - v83;
          }
          unint64_t v87 = (unint64_t)&v85[-v86];
          if (v87 >= v87 - 1) {
            uint64_t v88 = v87 - 1;
          }
          else {
            uint64_t v88 = v87;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
        }
        if (v29 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
        {
          int v64 = *(unsigned __int8 *)v103;
          long long v65 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*(void *)(v28 + 40) & 0xFFFFFFFFFFFFFFF8)
                                                                                   + 24));
          int isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(v65);
          BOOL v67 = v64 != 0;
          if (isMultithreadingEnabled) {
            mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl((uint64_t **)v28, v67);
          }
          mlir::detail::OpToOpPassAdaptor::runOnOperationImpl((mlir::detail::OpToOpPassAdaptor *)v28, v67);
        }
        else
        {
          (*(void (**)(void))(*(void *)*v102 + 56))();
        }
        BOOL *v104 = (*((unsigned char *)*v102 + 40) & 4) != 0;
        mlir::detail::NestedAnalysisMap::invalidate(v111, (const mlir::detail::PreservedAnalyses *)(v110 + 56));
        int v68 = v99;
        if (v99) {
          goto LABEL_89;
        }
      }
      if (v108)
      {
        uint64_t v69 = *(void *)(v110 + 8);
        {
          uint64_t v102 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v103 = 81;
          unint64_t v89 = llvm::StringRef::find((uint64_t *)&v102, "DesiredTypeName = ", 0x12uLL, 0);
          if (v103 >= v89) {
            unint64_t v90 = v89;
          }
          else {
            unint64_t v90 = v103;
          }
          unint64_t v91 = (char *)v102 + v90;
          unint64_t v92 = v103 - v90;
          if (v103 - v90 >= 0x12) {
            uint64_t v93 = 18;
          }
          else {
            uint64_t v93 = v103 - v90;
          }
          unint64_t v94 = v92 - v93;
          if (v94 >= v94 - 1) {
            uint64_t v95 = v94 - 1;
          }
          else {
            uint64_t v95 = v94;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
        }
        uint64_t v70 = mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id;
        if (!mlir::detail::PreservedAnalyses::isAll((mlir::detail::PreservedAnalyses *)(v110 + 56))) {
          mlir::verify(v109, (mlir::Operation *)(v69 != v70));
        }
        int v68 = v99;
      }
      goto LABEL_89;
    }
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t)v109, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an unsupported operation";
      uint64_t v114 = 53;
      uint64_t v53 = &v112;
      uint64_t v54 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v81 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v98 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v81, 24);
          uint64_t v54 = v117;
          uint64_t v53 = (const char **)((char *)v117 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v81, 24);
          uint64_t v53 = &v112;
          uint64_t v54 = v117;
        }
      }
      uint64_t v55 = &v54[3 * v118];
      long long v56 = *(_OWORD *)v53;
      v55[2] = v53[2];
      *(_OWORD *)uint64_t v55 = v56;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      uint64_t v57 = v122;
      if (v122)
      {
        uint64_t v58 = v123;
        uint64_t v59 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          uint64_t v59 = v122;
        }
        unint64_t v123 = v57;
        operator delete(v59);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      uint64_t v60 = v121;
      unint64_t v40 = v120;
      if (v121 == v120)
      {
LABEL_76:
        v121 = v38;
        operator delete(v40);
LABEL_77:
        if (v117 != v119) {
          free(v117);
        }
        return v34;
      }
      do
      {
        uint64_t v62 = *--v60;
        uint64_t v61 = v62;
        void *v60 = 0;
        if (v62) {
          MEMORY[0x21667D390](v61, 0x1000C8077774924);
        }
      }
      while (v60 != v38);
LABEL_75:
      unint64_t v40 = v120;
      goto LABEL_76;
    }
  }
  else
  {
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t)v109, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an operation not marked as 'IsolatedFromAbove'";
      uint64_t v114 = 75;
      uint64_t v43 = &v112;
      unint64_t v44 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v80 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v97 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v80, 24);
          unint64_t v44 = v117;
          uint64_t v43 = (const char **)((char *)v117 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v80, 24);
          uint64_t v43 = &v112;
          unint64_t v44 = v117;
        }
      }
      uint64_t v45 = &v44[3 * v118];
      long long v46 = *(_OWORD *)v43;
      v45[2] = v43[2];
      *(_OWORD *)uint64_t v45 = v46;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      uint64_t v47 = v122;
      if (v122)
      {
        uint64_t v48 = v123;
        uint64_t v49 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          uint64_t v49 = v122;
        }
        unint64_t v123 = v47;
        operator delete(v49);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      unint64_t v50 = v121;
      unint64_t v40 = v120;
      if (v121 == v120) {
        goto LABEL_76;
      }
      do
      {
        uint64_t v52 = *--v50;
        uint64_t v51 = v52;
        *unint64_t v50 = 0;
        if (v52) {
          MEMORY[0x21667D390](v51, 0x1000C8077774924);
        }
      }
      while (v50 != v38);
      goto LABEL_75;
    }
  }
  return v34;
}

BOOL mlir::detail::PreservedAnalyses::isAll(mlir::detail::PreservedAnalyses *this)
{
  {
    unint64_t v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::PreservedAnalyses::AllAnalysesType]";
    unint64_t v21 = 98;
    unint64_t v13 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
    if (v21 >= v13) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = v21;
    }
    uint64_t v15 = &v20[v14];
    unint64_t v16 = v21 - v14;
    if (v21 - v14 >= 0x12) {
      uint64_t v17 = 18;
    }
    else {
      uint64_t v17 = v21 - v14;
    }
    unint64_t v18 = v16 - v17;
    if (v18 >= v18 - 1) {
      uint64_t v19 = v18 - 1;
    }
    else {
      uint64_t v19 = v18;
    }
    mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id;
  uint64_t v3 = *((void *)this + 1);
  if (v3 == *(void *)this)
  {
    uint64_t v7 = *((unsigned int *)this + 5);
    BucketFor = (const void **)(v3 + 8 * v7);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      while (*(void *)(v3 + v8) != mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_13;
        }
      }
      BucketFor = (const void **)(v3 + v8);
    }
LABEL_13:
    uint64_t v5 = *((void *)this + 1);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id);
    uint64_t v3 = *(void *)this;
    uint64_t v5 = *((void *)this + 1);
    if (*BucketFor != (const void *)v2)
    {
      uint64_t v6 = 16;
      if (v5 == v3) {
        uint64_t v6 = 20;
      }
      BucketFor = (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v6));
    }
  }
  BOOL v10 = v5 == v3;
  uint64_t v11 = 16;
  if (v10) {
    uint64_t v11 = 20;
  }
  return BucketFor != (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v11));
}

uint64_t mlir::detail::OpToOpPassAdaptor::runPipeline(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::recursive_mutex **a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v47 = a3;
  if (!a6) {
    goto LABEL_19;
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v15 = (uint64_t *)*a1;
  char v16 = *(unsigned char *)(*a1 + 23);
  if ((v16 & 0x80000000) == 0)
  {
    uint64_t v45 = a1;
    if (!*(unsigned char *)(*a1 + 23)) {
      goto LABEL_16;
    }
LABEL_6:
    if (!*((unsigned char *)v15 + 32))
    {
      if (v16 >= 0) {
        uint64_t v17 = (uint64_t *)*a1;
      }
      else {
        uint64_t v17 = (uint64_t *)*v15;
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(*a1 + 23);
      }
      else {
        uint64_t v18 = v15[1];
      }
      mlir::OperationName::OperationName(&v48, v17, v18, Context);
      uint64_t v19 = v48;
      if (!*((unsigned char *)v15 + 32)) {
        *((unsigned char *)v15 + 32) = 1;
      }
      void v15[3] = v19;
    }
    goto LABEL_16;
  }
  uint64_t v45 = a1;
  if (v15[1]) {
    goto LABEL_6;
  }
LABEL_16:
  uint64_t v20 = v15[3];
  uint64_t v21 = v15[4];
  uint64_t v22 = *v8;
  std::recursive_mutex::lock(*v8);
  long long v46 = v8;
  long long v23 = *v8;
  uint64_t v25 = *(uint64_t **)(*v8)[1].__m_.__opaque;
  long long v24 = *(uint64_t **)&v23[1].__m_.__opaque[8];
  while (v25 != v24)
  {
    uint64_t v26 = *v25++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v20, v21, a7);
  }
  std::recursive_mutex::unlock(v22);
  a1 = v45;
  uint64_t v8 = v46;
LABEL_19:
  uint64_t v27 = *(void **)(*a1 + 40);
  uint64_t v28 = *(void *)(*a1 + 48) - (void)v27;
  if (!v28)
  {
LABEL_23:
    if (!v8)
    {
LABEL_42:
      uint64_t v34 = 1;
      goto LABEL_43;
    }
    uint64_t v30 = v8;
    uint64_t v31 = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v32 = (void *)*a1;
    char v33 = *(unsigned char *)(*a1 + 23);
    if (v33 < 0)
    {
      if (!v32[1])
      {
LABEL_39:
        uint64_t v38 = v32[3];
        uint64_t v39 = v32[4];
        unint64_t v40 = *v30;
        std::recursive_mutex::lock(*v30);
        uint64_t v42 = *(void *)(*v30)[1].__m_.__opaque;
        for (uint64_t i = *(void *)&(*v30)[1].__m_.__opaque[8]; i != v42; i -= 8)
        {
          uint64_t v43 = *(void *)(i - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 24))(v43, v38, v39, a7);
        }
        std::recursive_mutex::unlock(v40);
        goto LABEL_42;
      }
    }
    else if (!*(unsigned char *)(*a1 + 23))
    {
      goto LABEL_39;
    }
    if (!*((unsigned char *)v32 + 32))
    {
      if (v33 >= 0) {
        int v35 = (uint64_t *)*a1;
      }
      else {
        int v35 = (uint64_t *)*v32;
      }
      if (v33 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(*a1 + 23);
      }
      else {
        uint64_t v36 = v32[1];
      }
      mlir::OperationName::OperationName(&v48, v35, v36, v31);
      uint64_t v37 = v48;
      if (!*((unsigned char *)v32 + 32)) {
        *((unsigned char *)v32 + 32) = 1;
      }
      v32[3] = v37;
    }
    goto LABEL_39;
  }
  uint64_t v29 = 8 * (v28 >> 3);
  while (mlir::detail::OpToOpPassAdaptor::run(*v27, a2, a3, a4, a5))
  {
    ++v27;
    v29 -= 8;
    if (!v29) {
      goto LABEL_23;
    }
  }
  uint64_t v34 = 0;
LABEL_43:
  mlir::AnalysisManager::clear(&v47);
  return v34;
}

double mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper(uint64_t a1)
{
  int v1 = &unk_267772000;
  {
    uint64_t v12 = a1;
    int v1 = (void *)&unk_267772000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      int v1 = (void *)&unk_267772000;
      a1 = v12;
    }
  }
  *(void *)(a1 + 8) = v1[332];
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_26C35C660;
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(a1, a2);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = 8 * v3;
    *(void *)(v4 + v5) = 0;
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = *(void *)(v4 + 8 * v3);
    *(void *)(v4 + v5) = v6;
    if (v7)
    {
      unint64_t v8 = *(void **)(v7 + 40);
      if (v8)
      {
        uint64_t v9 = *(void **)(v7 + 48);
        unint64_t v10 = *(void **)(v7 + 40);
        if (v9 != v8)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            }
          }
          while (v9 != v8);
          unint64_t v10 = *(void **)(v7 + 40);
        }
        *(void *)(v7 + 48) = v8;
        operator delete(v10);
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      MEMORY[0x21667D3C0](v7, 0x1032C402C5CA452);
      LODWORD(v3) = *(_DWORD *)(a1 + 8);
    }
    unsigned int v13 = v3 + 1;
    *(_DWORD *)(a1 + 8) = v13;
    return *(void *)a1 + 8 * v13 - 8;
  }
}

uint64_t mlir::detail::OpToOpPassAdaptor::getDependentDialects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 352);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 344);
    uint64_t v5 = v4 + 8 * v2;
    do
    {
      uint64_t v6 = *(uint64_t **)(*(void *)v4 + 40);
      uint64_t v7 = *(void *)(*(void *)v4 + 48) - (void)v6;
      if (v7)
      {
        uint64_t v8 = 8 * (v7 >> 3);
        do
        {
          uint64_t v9 = *v6++;
          double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2);
          v8 -= 8;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)result;
    uint64_t v4 = (void *)(*(void *)result + 8 * v2);
    do
    {
      uint64_t v6 = *--v4;
      uint64_t v5 = v6;
      *uint64_t v4 = 0;
      if (v6)
      {
        uint64_t v7 = *(void **)(v5 + 40);
        if (v7)
        {
          uint64_t v8 = *(void **)(v5 + 48);
          uint64_t v9 = *(void **)(v5 + 40);
          if (v8 != v7)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = *(void **)(v5 + 40);
          }
          *(void *)(v5 + 48) = v7;
          operator delete(v9);
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        double result = MEMORY[0x21667D3C0](v5, 0x1032C402C5CA452);
      }
    }
    while (v4 != v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(uint64_t **this, char a2)
{
  uint64_t v2 = (mlir::detail::OpToOpPassAdaptor *)this;
  uint64_t v124 = *MEMORY[0x263EF8340];
  char v112 = a2;
  uint64_t v3 = this[5];
  uint64_t v4 = this[6];
  uint64_t v111 = v4;
  uint64_t Context = (ZinIrHazardNode *)mlir::Attribute::getContext((mlir::Attribute *)(((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8)
                                                                             + 24));
  unint64_t v100 = Context;
  if (*((_DWORD *)v2 + 94))
  {
    uint64_t v6 = (uint64_t *)*((void *)v2 + 46);
    uint64_t v7 = *((unsigned int *)v6 + 2);
    if (v7 == *((_DWORD *)v2 + 88))
    {
      if (!v7) {
        goto LABEL_9;
      }
      uint64_t v8 = *v6;
      uint64_t v9 = *((void *)v2 + 43);
      while (*(void *)(*(void *)v8 + 48) - *(void *)(*(void *)v8 + 40) == *(void *)(*(void *)v9 + 48)
                                                                                     - *(void *)(*(void *)v9 + 40))
      {
        v9 += 8;
        v8 += 8;
        if (!--v7) {
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule(Context);
  llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign((uint64_t)v2 + 368, *(unsigned int *)(LayerSchedule + 308), (uint64_t)v2 + 344);
LABEL_9:
  char v108 = 0;
  uint64_t v109 = 0;
  unsigned int v110 = 0;
  unint64_t v11 = *((void *)v2 + 5) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(unsigned int *)(v11 + 44);
  unsigned __int8 v99 = v2;
  if ((v12 & 0x7FFFFF) == 0)
  {
    unint64_t v14 = 0;
    unsigned int v13 = 0;
    threadid = (uint64_t *)llvm::get_threadid(Context);
    __int16 v105 = v2;
    uint64_t v77 = v4[9];
    unint64_t v76 = v77 & 0xFFFFFFFFFFFFFFF8;
    if ((v77 & 4) != 0) {
      goto LABEL_136;
    }
LABEL_133:
    if (v76)
    {
      do
      {
        uint64_t v78 = *(void *)(v76 + 72);
        unint64_t v76 = v78 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v78 & 4) == 0 && v76);
    }
LABEL_136:
    unint64_t v103 = v76;
    size_t v79 = *((unsigned int *)v2 + 94);
    __p[1] = 0;
    int v107 = 0;
    __p[0] = 0;
    if (v79)
    {
      unint64_t v80 = (unsigned __int8 *)operator new(v79);
      __p[0] = v80;
      int v107 = (ZinIrHalH13g *)&v80[v79];
      bzero(v80, v79);
      __p[1] = &v80[v79];
      unint64_t v81 = v79 + 1;
      do
      {
        atomic_store(0, v80++);
        --v81;
      }
      while (v81 > 1);
    }
    *(void *)&long long v120 = __p;
    *((void *)&v120 + 1) = v99;
    v121 = (ZinIrHalH13g *)&v112;
    v122 = (std::recursive_mutex ***)&v103;
    p_threadid = &threadid;
    unint64_t v115 = v13;
    int v82 = -1431655765 * ((unint64_t)(v14 - (char *)v13) >> 3);
    int v114 = v82;
    if (v82)
    {
      if (mlir::MLIRContext::isMultithreadingEnabled(v100) && v82 != 1) {
        mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)v113, v100);
      }
      if (v13 != (unsigned int *)v14)
      {
        unint64_t v83 = &__p[1];
        uint64_t v84 = __p;
        uint64_t v85 = (ZinIrHalH13g *)&v112;
        uint64_t v86 = (std::recursive_mutex ***)&v103;
        unint64_t v87 = &threadid;
        uint64_t v88 = v13;
        while (1)
        {
          uint64_t v89 = *((void *)&v120 + 1);
          unint64_t v90 = (atomic_uchar *)*v84;
          unint64_t v91 = (atomic_uchar *)*v83;
          if (v90 == v91)
          {
            int v93 = (int)v90;
          }
          else
          {
            do
            {
              char v92 = 0;
              atomic_compare_exchange_strong(v90, (unsigned __int8 *)&v92, 1u);
              if (!v92) {
                goto LABEL_150;
              }
              ++v90;
            }
            while (v90 != v91);
            LODWORD(v90) = v91;
LABEL_150:
            int v93 = (int)v90;
            uint64_t v85 = v121;
            uint64_t v86 = v122;
            unint64_t v90 = *(atomic_uchar **)v120;
            unint64_t v87 = p_threadid;
          }
          uint64_t v94 = (v93 - v90);
          uint64_t v95 = (uint64_t *)(*(void *)(*(void *)(v89 + 368) + 24 * v94) + 8 * *v88);
          char v96 = mlir::detail::OpToOpPassAdaptor::runPipeline(v95, *((void *)v88 + 1), *((void *)v88 + 2), *(unsigned __int8 *)v85, *(unsigned int *)(*v95 + 64), *v86, (uint64_t)v87);
          uint64_t v84 = (void **)v120;
          atomic_store(0, (unsigned __int8 *)(*(void *)v120 + v94));
          if (!v96) {
            break;
          }
          unint64_t v83 = v84 + 1;
          uint64_t v88 = v115 + 6;
          unint64_t v115 = v88;
          if (v88 == (unsigned int *)v14) {
            goto LABEL_156;
          }
        }
        *((void *)v99 + 5) |= 4uLL;
      }
    }
LABEL_156:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    llvm::deallocate_buffer(v108, (void *)(16 * v110));
  }
  unsigned int v13 = 0;
  unint64_t v14 = 0;
  uint64_t v102 = 0;
  uint64_t v15 = (mlir::Region *)(((v11 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                       + 32 * *(unsigned int *)(v11 + 40));
  int64_t v97 = (char *)v15 + 24 * (v12 & 0x7FFFFF);
LABEL_12:
  mlir::Region::OpIterator::OpIterator(&v120, v15, 0);
  int64_t v98 = v15;
  mlir::Region::OpIterator::OpIterator(&v118, v15, 1);
  char v16 = v121;
  v117 = v121;
  long long v116 = v120;
  *(_OWORD *)__p = v120;
  int v107 = v121;
  uint64_t v17 = v119;
  for (i = v119; ; uint64_t v17 = i)
  {
    if (v16 == v17)
    {
      uint64_t v15 = (mlir::Region *)((char *)v98 + 24);
      if ((char *)v98 + 24 == v97)
      {
        uint64_t v74 = v111;
        threadid = (uint64_t *)llvm::get_threadid(v16);
        __int16 v105 = v2;
        uint64_t v75 = v74[9];
        unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFF8;
        if ((v75 & 4) != 0) {
          goto LABEL_136;
        }
        goto LABEL_133;
      }
      goto LABEL_12;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v16);
    uint64_t v19 = v18;
    uint64_t v20 = *((void *)v18 + 6);
    int v21 = v110;
    if (!v110) {
      goto LABEL_115;
    }
    unsigned int v22 = ((v20 >> 4) ^ (v20 >> 9)) & (v110 - 1);
    long long v23 = (char *)v108 + 16 * v22;
    uint64_t v24 = *(void *)v23;
    if (v20 == *(void *)v23) {
      goto LABEL_77;
    }
    uint64_t v25 = 0;
    int v26 = 1;
    while (v24 != -4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -8192;
      }
      if (v27) {
        uint64_t v25 = v23;
      }
      unsigned int v28 = v22 + v26++;
      unsigned int v22 = v28 & (v110 - 1);
      long long v23 = (char *)v108 + 16 * v22;
      uint64_t v24 = *(void *)v23;
      if (v20 == *(void *)v23) {
        goto LABEL_77;
      }
    }
    if (v25) {
      long long v23 = v25;
    }
    if (4 * (int)v109 + 4 < 3 * v110)
    {
      if (v110 + ~v109 - HIDWORD(v109) > v110 >> 3) {
        goto LABEL_29;
      }
    }
    else
    {
LABEL_115:
      int v21 = 2 * v110;
    }
    llvm::DenseMap<mlir::DistinctAttr,unsigned long long,llvm::DenseMapInfo<mlir::DistinctAttr,void>,llvm::detail::DenseMapPair<mlir::DistinctAttr,unsigned long long>>::grow((uint64_t)&v108, v21);
    unsigned int v68 = (v110 - 1) & ((v20 >> 4) ^ (v20 >> 9));
    long long v23 = (char *)v108 + 16 * v68;
    uint64_t v69 = *(void *)v23;
    if (v20 == *(void *)v23)
    {
      uint64_t v29 = v20;
      goto LABEL_30;
    }
    uint64_t v70 = 0;
    int v71 = 1;
    do
    {
      if (v69 == -4096)
      {
        if (v70) {
          long long v23 = v70;
        }
        uint64_t v2 = v99;
LABEL_29:
        uint64_t v29 = *(void *)v23;
        goto LABEL_30;
      }
      if (v70) {
        BOOL v72 = 0;
      }
      else {
        BOOL v72 = v69 == -8192;
      }
      if (v72) {
        uint64_t v70 = v23;
      }
      unsigned int v73 = v68 + v71++;
      unsigned int v68 = v73 & (v110 - 1);
      long long v23 = (char *)v108 + 16 * v68;
      uint64_t v69 = *(void *)v23;
    }
    while (v20 != *(void *)v23);
    uint64_t v29 = v20;
    uint64_t v2 = v99;
LABEL_30:
    LODWORD(v109) = v109 + 1;
    if (v29 != -4096) {
      --HIDWORD(v109);
    }
    *(void *)long long v23 = v20;
    v23[8] = 0;
    v23[12] = 0;
    uint64_t v30 = (uint64_t *)*((void *)v2 + 43);
    uint64_t v31 = *((unsigned int *)v2 + 88);
    uint64_t v32 = &v30[v31];
    if (!v31)
    {
LABEL_72:
      if (v30 != v32 && v30)
      {
        uint64_t v49 = *((void *)v2 + 43);
        if (!v23[12]) {
          v23[12] = 1;
        }
        *((_DWORD *)v23 + 2) = ((unint64_t)v30 - v49) >> 3;
      }
LABEL_77:
      if (!v23[12]) {
        goto LABEL_14;
      }
LABEL_78:
      unint64_t v50 = v111;
      uint64_t v51 = v111[3];
      ParentOp = (mlir::Block *)*((void *)v19 + 2);
      if (ParentOp) {
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      }
      if ((mlir::Block *)v51 == ParentOp)
      {
        unint64_t v50 = (uint64_t *)mlir::AnalysisManager::nestImmediate(&v111, v19);
        int v60 = *((_DWORD *)v23 + 2);
        if (v14 >= v102) {
          goto LABEL_96;
        }
      }
      else
      {
        *(void *)&long long v120 = &v121;
        *((void *)&v120 + 1) = 0x400000000;
        uint64_t v53 = (uint64_t)v19;
        do
        {
          while (1)
          {
            uint64_t v54 = DWORD2(v120);
            if (DWORD2(v120) >= (unint64_t)HIDWORD(v120))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v121, DWORD2(v120) + 1, 8);
              uint64_t v54 = DWORD2(v120);
            }
            *(void *)(v120 + 8 * v54) = v53;
            ++DWORD2(v120);
            uint64_t v55 = *(mlir::Block **)(v53 + 16);
            if (!v55) {
              break;
            }
            uint64_t v53 = mlir::Block::getParentOp(v55);
            if (v53 == v51) {
              goto LABEL_87;
            }
          }
          uint64_t v53 = 0;
        }
        while (v51);
LABEL_87:
        threadid = v50;
        long long v56 = (ZinIrHalH13g **)v120;
        if (DWORD2(v120))
        {
          uint64_t v57 = 8 * DWORD2(v120);
          uint64_t v58 = v120 - 8;
          do
          {
            uint64_t v59 = (uint64_t *)mlir::AnalysisManager::nestImmediate(&threadid, *(mlir::Operation **)(v58 + v57));
            threadid = v59;
            v57 -= 8;
          }
          while (v57);
          unint64_t v50 = v59;
          long long v56 = (ZinIrHalH13g **)v120;
        }
        if (v56 != &v121) {
          free(v56);
        }
        int v60 = *((_DWORD *)v23 + 2);
        if (v14 >= v102)
        {
LABEL_96:
          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (char *)v13) >> 3) + 1;
          if (v61 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          if (0x5555555555555556 * ((v102 - (char *)v13) >> 3) > v61) {
            unint64_t v61 = 0x5555555555555556 * ((v102 - (char *)v13) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v102 - (char *)v13) >> 3) >= 0x555555555555555) {
            unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
          }
          if (v61 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v62 = 24 * v61;
          unint64_t v63 = (char *)operator new(24 * v61);
          int v64 = &v63[8 * ((v14 - (char *)v13) >> 3)];
          *(_DWORD *)int v64 = v60;
          *((void *)v64 + 1) = v19;
          *((void *)v64 + 2) = v50;
          if (v14 == (char *)v13)
          {
            BOOL v67 = &v63[8 * ((v14 - (char *)v13) >> 3)];
            uint64_t v102 = &v63[v62];
            unint64_t v14 = v64 + 24;
            if (v13) {
              goto LABEL_106;
            }
          }
          else
          {
            long long v65 = &v63[8 * ((v14 - (char *)v13) >> 3)];
            do
            {
              long long v66 = *(_OWORD *)(v14 - 24);
              BOOL v67 = v65 - 24;
              *((void *)v65 - 1) = *((void *)v14 - 1);
              *(_OWORD *)(v65 - 24) = v66;
              v14 -= 24;
              v65 -= 24;
            }
            while (v14 != (char *)v13);
            uint64_t v102 = &v63[v62];
            unint64_t v14 = v64 + 24;
            if (v13) {
LABEL_106:
            }
              operator delete(v13);
          }
          unsigned int v13 = (unsigned int *)v67;
          goto LABEL_14;
        }
      }
      *(_DWORD *)unint64_t v14 = v60;
      *((void *)v14 + 1) = v19;
      *((void *)v14 + 2) = v50;
      v14 += 24;
      goto LABEL_14;
    }
    uint64_t v33 = *((void *)v19 + 6);
    do
    {
      uint64_t v34 = (uint64_t *)*v30;
      char v35 = *(unsigned char *)(*v30 + 23);
      if (v35 < 0)
      {
        if (!v34[1]) {
          goto LABEL_35;
        }
      }
      else if (!*(unsigned char *)(*v30 + 23))
      {
        goto LABEL_35;
      }
      if (!*((unsigned char *)v34 + 32))
      {
        if (v35 >= 0) {
          unint64_t v40 = (uint64_t *)*v30;
        }
        else {
          unint64_t v40 = (uint64_t *)*v34;
        }
        if (v35 >= 0) {
          uint64_t v41 = *(unsigned __int8 *)(*v30 + 23);
        }
        else {
          uint64_t v41 = v34[1];
        }
        mlir::OperationName::OperationName(&v120, v40, v41, v100);
        if (!*((unsigned char *)v34 + 32)) {
          *((unsigned char *)v34 + 32) = 1;
        }
        v34[3] = v120;
      }
LABEL_35:
      if (*((unsigned char *)v34 + 32))
      {
        if (v33 == v34[3]) {
          goto LABEL_71;
        }
      }
      else
      {
        if (*(_UNKNOWN **)(v33 + 16) == &mlir::detail::TypeIDResolver<void,void>::id) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v33;
        }
        if (*(_UNKNOWN **)(v33 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          {
            *(void *)&long long v120 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
            *((void *)&v120 + 1) = 91;
            unint64_t v42 = llvm::StringRef::find((uint64_t *)&v120, "DesiredTypeName = ", 0x12uLL, 0);
            if (*((void *)&v120 + 1) >= v42) {
              unint64_t v43 = v42;
            }
            else {
              unint64_t v43 = *((void *)&v120 + 1);
            }
            uint64_t v44 = v120 + v43;
            unint64_t v45 = *((void *)&v120 + 1) - v43;
            uint64_t v46 = 18;
            if (v45 < 0x12) {
              uint64_t v46 = v45;
            }
            unint64_t v47 = v45 - v46;
            if (v47 >= v47 - 1) {
              uint64_t v48 = v47 - 1;
            }
            else {
              uint64_t v48 = v47;
            }
            mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v44 + v46, v48);
          }
          unint64_t v37 = v36 | v33 & 0xFFFFFFFFFFFFFF00;
          if ((*(unsigned int (**)(unint64_t, uint64_t))(*(void *)v37 + 32))(v37, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id))
          {
            uint64_t v38 = (void *)v34[5];
            uint64_t v39 = (void *)v34[6];
            if (v38 == v39)
            {
LABEL_71:
              uint64_t v2 = v99;
              goto LABEL_72;
            }
            while (((*(uint64_t (**)(void, unint64_t))(*(void *)*v38 + 72))(*v38, v37) & 1) != 0)
            {
              if (++v38 == v39) {
                goto LABEL_71;
              }
            }
          }
        }
      }
      ++v30;
    }
    while (v30 != v32);
    uint64_t v2 = v99;
    if (v23[12]) {
      goto LABEL_78;
    }
LABEL_14:
    mlir::Region::OpIterator::operator++((uint64_t *)__p);
    char v16 = v107;
  }
}

uint64_t mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(mlir::detail::OpToOpPassAdaptor *this, unsigned int a2)
{
  v61[4] = *MEMORY[0x263EF8340];
  uint64_t v57 = (uint64_t *)*((void *)this + 6);
  uint64_t result = llvm::get_threadid(this);
  v56[0] = result;
  v56[1] = this;
  uint64_t v54 = this;
  uint64_t v4 = v57[9];
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 && v5)
  {
    do
    {
      uint64_t v6 = *(void *)(v5 + 72);
      unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) == 0 && v5);
  }
  uint64_t v52 = (std::recursive_mutex **)v5;
  unint64_t v7 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(unsigned int *)(v7 + 44);
  unsigned int v9 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    unint64_t v10 = ((v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v7 + 40);
    unint64_t v49 = v10 + 24 * v9;
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      unint64_t v50 = v10;
      if (v11 != v10) {
        break;
      }
LABEL_8:
      v10 += 24;
      if (v10 == v49) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v12 = v11 - 8;
      uint64_t v51 = v11;
      if (!v11) {
        uint64_t v12 = 0;
      }
      unsigned int v13 = *(ZinIrHalH13g **)(v12 + 40);
      uint64_t v55 = (ZinIrHalH13g *)(v12 + 32);
      if (v13 != (ZinIrHalH13g *)(v12 + 32)) {
        break;
      }
LABEL_10:
      unint64_t v10 = v50;
      uint64_t v11 = *(void *)(v51 + 8);
      if (v11 == v50) {
        goto LABEL_8;
      }
    }
    while (1)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
      char v16 = (mlir::Operation *)v15;
      uint64_t v17 = (uint64_t *)*((void *)v54 + 43);
      uint64_t v18 = *((unsigned int *)v54 + 88);
      uint64_t v19 = v15[6];
      uint64_t result = mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
      uint64_t v20 = &v17[v18];
      if (v18) {
        break;
      }
LABEL_57:
      if (v17 != v20 && v17 != 0)
      {
        uint64_t v39 = *(unsigned int *)(*v17 + 64);
        unint64_t v14 = v57;
        uint64_t v40 = v57[3];
        ParentOp = (mlir::Block *)*((void *)v16 + 2);
        if (ParentOp) {
          ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        }
        if ((mlir::Block *)v40 == ParentOp)
        {
          unint64_t v14 = (uint64_t *)mlir::AnalysisManager::nestImmediate(&v57, v16);
        }
        else
        {
          uint64_t v59 = v61;
          unint64_t v60 = 0x400000000;
          uint64_t v42 = (uint64_t)v16;
          do
          {
            while (1)
            {
              uint64_t v43 = v60;
              if (v60 >= (unint64_t)HIDWORD(v60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v60 + 1, 8);
                uint64_t v43 = v60;
              }
              *((void *)v59 + v43) = v42;
              LODWORD(v60) = v60 + 1;
              uint64_t v44 = *(mlir::Block **)(v42 + 16);
              if (!v44) {
                break;
              }
              uint64_t v42 = mlir::Block::getParentOp(v44);
              if (v42 == v40) {
                goto LABEL_70;
              }
            }
            uint64_t v42 = 0;
          }
          while (v40);
LABEL_70:
          uint64_t v58 = v14;
          unint64_t v45 = v59;
          if (v60)
          {
            uint64_t v46 = 8 * v60;
            unint64_t v47 = (char *)v59 - 8;
            do
            {
              uint64_t v48 = (uint64_t *)mlir::AnalysisManager::nestImmediate(&v58, *(mlir::Operation **)&v47[v46]);
              uint64_t v58 = v48;
              v46 -= 8;
            }
            while (v46);
            unint64_t v14 = v48;
            unint64_t v45 = v59;
          }
          if (v45 != v61) {
            free(v45);
          }
        }
        uint64_t result = mlir::detail::OpToOpPassAdaptor::runPipeline(v17, (uint64_t)v16, (uint64_t)v14, a2, v39, v52, (uint64_t)v56);
        if (!(_BYTE)result)
        {
          *((void *)v54 + 5) |= 4uLL;
          return result;
        }
      }
LABEL_17:
      unsigned int v13 = (ZinIrHalH13g *)*((void *)v13 + 1);
      if (v13 == v55) {
        goto LABEL_10;
      }
    }
    uint64_t v21 = result;
    while (1)
    {
      uint64_t v22 = *v17;
      char v23 = *(unsigned char *)(*v17 + 23);
      if (v23 < 0)
      {
        if (!*(void *)(v22 + 8)) {
          goto LABEL_21;
        }
      }
      else if (!*(unsigned char *)(*v17 + 23))
      {
        goto LABEL_21;
      }
      if (!*(unsigned char *)(v22 + 32))
      {
        if (v23 >= 0) {
          uint64_t v29 = *v17;
        }
        else {
          uint64_t v29 = *(void *)v22;
        }
        if (v23 >= 0) {
          uint64_t v30 = *(unsigned __int8 *)(*v17 + 23);
        }
        else {
          uint64_t v30 = *(void *)(v22 + 8);
        }
        uint64_t result = mlir::OperationName::OperationName(&v59, v29, v30, v21);
        if (!*(unsigned char *)(v22 + 32)) {
          *(unsigned char *)(v22 + 32) = 1;
        }
        *(void *)(v22 + 24) = v59;
      }
LABEL_21:
      if (*(unsigned char *)(v22 + 32))
      {
        if (v19 == *(void *)(v22 + 24)) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v24 = *(void **)(v19 + 16);
        if (v24 == &mlir::detail::TypeIDResolver<void,void>::id) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v19;
        }
        if (v24 != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          {
            uint64_t v59 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
            unint64_t v60 = 91;
            unint64_t v31 = llvm::StringRef::find((uint64_t *)&v59, "DesiredTypeName = ", 0x12uLL, 0);
            if (v60 >= v31) {
              unint64_t v32 = v31;
            }
            else {
              unint64_t v32 = v60;
            }
            uint64_t v33 = (char *)v59 + v32;
            unint64_t v34 = v60 - v32;
            uint64_t v35 = 18;
            if (v34 < 0x12) {
              uint64_t v35 = v34;
            }
            unint64_t v36 = v34 - v35;
            if (v36 >= v36 - 1) {
              uint64_t v37 = v36 - 1;
            }
            else {
              uint64_t v37 = v36;
            }
            mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
          }
          unint64_t v26 = v25 | v19 & 0xFFFFFFFFFFFFFF00;
          uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v26 + 32))(v26, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id);
          if (result)
          {
            unsigned int v28 = *(void **)(v22 + 40);
            BOOL v27 = *(void **)(v22 + 48);
            if (v28 == v27) {
              goto LABEL_57;
            }
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(void, unint64_t))(*(void *)*v28 + 72))(*v28, v26);
              if ((result & 1) == 0) {
                break;
              }
              if (++v28 == v27) {
                goto LABEL_57;
              }
            }
          }
        }
      }
      if (++v17 == v20) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t *mlir::AnalysisManager::nest(uint64_t **this, mlir::Block **a2)
{
  uint64_t v2 = (mlir::Operation *)a2;
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (mlir::Block *)(*this)[3];
  ParentOp = a2[2];
  if (ParentOp) {
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  if (v4 == ParentOp) {
    return (uint64_t *)mlir::AnalysisManager::nestImmediate(this, v2);
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x400000000;
  do
  {
    while (1)
    {
      uint64_t v6 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v16 + 1, 8);
        uint64_t v6 = v16;
      }
      *((void *)v15 + v6) = v2;
      LODWORD(v16) = v16 + 1;
      unint64_t v7 = (mlir::Block *)*((void *)v2 + 2);
      if (!v7) {
        break;
      }
      uint64_t v2 = (mlir::Operation *)mlir::Block::getParentOp(v7);
      if (v2 == v4) {
        goto LABEL_10;
      }
    }
    uint64_t v2 = 0;
  }
  while (v4);
LABEL_10:
  unint64_t v8 = *this;
  unint64_t v14 = v8;
  unsigned int v9 = v15;
  if (v16)
  {
    uint64_t v10 = 8 * v16;
    uint64_t v11 = (char *)v15 - 8;
    do
    {
      uint64_t v12 = (uint64_t *)mlir::AnalysisManager::nestImmediate(&v14, *(mlir::Operation **)&v11[v10]);
      unint64_t v14 = v12;
      v10 -= 8;
    }
    while (v10);
    unint64_t v8 = v12;
    unsigned int v9 = v15;
  }
  if (v9 != v17) {
    free(v9);
  }
  return v8;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
    }
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v8, a3);
        v8 += 24;
        --v7;
      }
      while (v7);
      unint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    unint64_t v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        uint64_t v12 = 24 * v6;
        unint64_t v13 = 24 * a2 - v12;
        unint64_t v14 = (char **)(v12 + *(void *)a1 - 24);
        do
        {
          unint64_t v14 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v14) - 3;
          v13 += 24;
        }
        while (v13);
      }
    }
    else
    {
      uint64_t v10 = (void *)(*(void *)a1 + 24 * v6);
      do
      {
        *uint64_t v10 = v10 + 2;
        v10[1] = 0x100000000;
        if (*(_DWORD *)(a3 + 8)) {
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v10, a3);
        }
        v10 += 3;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(a1, a2, a3);
  }
}

void mlir::PassManager::PassManager()
{
}

{
  operator new();
}

void mlir::PassManager::~PassManager(mlir::PassManager *this)
{
  uint64_t v2 = (mlir::detail::PassCrashReproducerGenerator::Impl **)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(v2);
    MEMORY[0x21667D3C0]();
  }
  std::unique_ptr<mlir::PassInstrumentor>::reset[abi:nn180100]((uint64_t **)this + 3, 0);
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 40);
    if (v4)
    {
      unint64_t v5 = *(void **)(v3 + 48);
      unint64_t v6 = *(void **)(v3 + 40);
      if (v5 != v4)
      {
        do
        {
          uint64_t v8 = *--v5;
          uint64_t v7 = v8;
          *unint64_t v5 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
        }
        while (v5 != v4);
        unint64_t v6 = *(void **)(v3 + 40);
      }
      *(void *)(v3 + 48) = v4;
      operator delete(v6);
    }
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    MEMORY[0x21667D3C0](v3, 0x1032C402C5CA452);
  }
}

uint64_t mlir::PassManager::enableVerifier(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 56) = *(unsigned char *)(this + 56) & 0xFD | v2;
  return this;
}

uint64_t mlir::PassManager::run(mlir::PassManager *this, mlir::Operation *a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(uint64_t **)this;
  uint64_t v4 = (mlir::MLIRContext *)*((void *)this + 1);
  char v6 = *(unsigned char *)(*(void *)this + 23);
  if (v6 < 0)
  {
    if (!v5[1]) {
      goto LABEL_6;
    }
  }
  else if (!*(unsigned char *)(*(void *)this + 23))
  {
LABEL_6:
    if (!*((unsigned char *)v5 + 32)) {
      goto LABEL_53;
    }
    goto LABEL_7;
  }
  if (*((unsigned char *)v5 + 32)) {
    goto LABEL_6;
  }
  if (v6 >= 0) {
    unint64_t v14 = *(uint64_t **)this;
  }
  else {
    unint64_t v14 = (uint64_t *)*v5;
  }
  if (v6 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(*(void *)this + 23);
  }
  else {
    uint64_t v15 = v5[1];
  }
  mlir::OperationName::OperationName(&v78, v14, v15, v4);
  uint64_t v16 = v78;
  if (*((unsigned char *)v5 + 32))
  {
    v5[3] = (uint64_t)v78;
    if (!*((unsigned char *)v5 + 32)) {
      goto LABEL_53;
    }
  }
  else
  {
    *((unsigned char *)v5 + 32) = 1;
    v5[3] = (uint64_t)v16;
  }
LABEL_7:
  if (*((void *)a2 + 6) != v5[3])
  {
    mlir::emitError(*((void *)a2 + 3), (uint64_t)&v78);
    if (v78)
    {
      LODWORD(v72) = 3;
      unsigned int v73 = "can't run '";
      uint64_t v74 = 11;
      uint64_t v7 = &v72;
      uint64_t v8 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        unint64_t v66 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          int64_t v69 = (char *)&v72 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          uint64_t v8 = (char *)v81;
          uint64_t v7 = (char ***)((char *)v81 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          uint64_t v7 = &v72;
          uint64_t v8 = (char *)v81;
        }
      }
      unint64_t v9 = &v8[24 * v82];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = v7[2];
      *(_OWORD *)unint64_t v9 = v10;
      LODWORD(v82) = v82 + 1;
    }
    uint64_t v11 = *(const char **)this;
    uint64_t v12 = *(unsigned __int8 *)(*(void *)this + 23);
    if (*(char *)(*(void *)this + 23) < 0)
    {
      if (*((void *)v11 + 1))
      {
LABEL_13:
        uint64_t v13 = *((void *)v11 + 1);
        if ((v12 & 0x80u) != 0)
        {
          uint64_t v11 = *(const char **)v11;
          uint64_t v12 = v13;
        }
        if (!v78) {
          goto LABEL_34;
        }
        goto LABEL_28;
      }
    }
    else if (*(unsigned char *)(*(void *)this + 23))
    {
      goto LABEL_13;
    }
    uint64_t v11 = "any";
    uint64_t v12 = 3;
    if (!v78)
    {
LABEL_34:
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
      if (v78) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
      }
      if (v92)
      {
        unint64_t v26 = __p;
        if (__p)
        {
          BOOL v27 = v91;
          unsigned int v28 = __p;
          if (v91 != __p)
          {
            do
              BOOL v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            unsigned int v28 = __p;
          }
          unint64_t v91 = v26;
          operator delete(v28);
        }
        uint64_t v29 = v88;
        if (v88)
        {
          uint64_t v30 = v89;
          unint64_t v31 = v88;
          if (v89 != v88)
          {
            do
            {
              uint64_t v33 = *--v30;
              uint64_t v32 = v33;
              void *v30 = 0;
              if (v33) {
                MEMORY[0x21667D390](v32, 0x1000C8077774924);
              }
            }
            while (v30 != v29);
            unint64_t v31 = v88;
          }
          uint64_t v89 = v29;
          operator delete(v31);
        }
        if (v81 != &v83) {
          free(v81);
        }
      }
      return v25;
    }
LABEL_28:
    LOWORD(v76) = 261;
    BOOL v72 = (char **)v11;
    unsigned int v73 = (char *)v12;
    mlir::Diagnostic::operator<<((uint64_t)&v79, (void ***)&v72);
    if (v78)
    {
      LODWORD(v72) = 3;
      unsigned int v73 = "' pass manager on '";
      uint64_t v74 = 19;
      uint64_t v17 = &v72;
      uint64_t v18 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        unint64_t v67 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          int64_t v70 = (char *)&v72 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          uint64_t v18 = (char *)v81;
          uint64_t v17 = (char ***)((char *)v81 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          uint64_t v17 = &v72;
          uint64_t v18 = (char *)v81;
        }
      }
      uint64_t v19 = &v18[24 * v82];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      LODWORD(v82) = v82 + 1;
      if (v78)
      {
        mlir::Diagnostic::operator<<((uint64_t)&v79, *((void *)a2 + 6));
        if (v78)
        {
          LODWORD(v72) = 3;
          unsigned int v73 = "' op";
          uint64_t v74 = 4;
          uint64_t v21 = &v72;
          uint64_t v22 = (char *)v81;
          if (v82 >= HIDWORD(v82))
          {
            unint64_t v68 = v82 + 1;
            if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
            {
              int64_t v71 = (char *)&v72 - (unsigned char *)v81;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              uint64_t v22 = (char *)v81;
              uint64_t v21 = (char ***)((char *)v81 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              uint64_t v21 = &v72;
              uint64_t v22 = (char *)v81;
            }
          }
          char v23 = &v22[24 * v82];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)char v23 = v24;
          LODWORD(v82) = v82 + 1;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_53:
  mlir::DialectRegistry::DialectRegistry((mlir::DialectRegistry *)&v72);
  unint64_t v34 = *(uint64_t **)(*(void *)this + 40);
  uint64_t v35 = *(void *)(*(void *)this + 48) - (void)v34;
  if (v35)
  {
    uint64_t v36 = 8 * (v35 >> 3);
    do
    {
      uint64_t v37 = *v34++;
      (*(void (**)(uint64_t, char ***))(*(void *)v37 + 24))(v37, &v72);
      v36 -= 8;
    }
    while (v36);
  }
  mlir::MLIRContext::appendDialectRegistry(v4, (const mlir::DialectRegistry *)&v72);
  uint64_t v38 = v72;
  if (v72 != &v73)
  {
    do
    {
      int v46 = *((char *)v38 + 55);
      if (v46 >= 0) {
        unint64_t v47 = (char *)(v38 + 4);
      }
      else {
        unint64_t v47 = v38[4];
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v38 + 55);
      }
      else {
        size_t v48 = (size_t)v38[5];
      }
      mlir::MLIRContext::getOrLoadDialect((uint64_t)v4, v47, v48);
      unint64_t v49 = v38[1];
      if (v49)
      {
        do
        {
          unint64_t v50 = (char **)v49;
          unint64_t v49 = *(char **)v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          unint64_t v50 = (char **)v38[2];
          BOOL v51 = *v50 == (char *)v38;
          uint64_t v38 = v50;
        }
        while (!v51);
      }
      uint64_t v38 = v50;
    }
    while (v50 != &v73);
  }
  if (mlir::detail::OpPassManagerImpl::finalizePassList(*(mlir::detail::OpPassManagerImpl **)this, v4))
  {
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    unint64_t RegistryHash = mlir::MLIRContext::getRegistryHash(v4);
    unint64_t v40 = mlir::OpPassManager::hash(this);
    if (RegistryHash == *((void *)this + 5) && v40 == *((void *)this + 6))
    {
LABEL_62:
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      int v80 = 0;
      int v82 = 0;
      uint64_t v83 = 0;
      unint64_t v81 = a2;
      unsigned int v84 = 0;
      uint64_t v41 = *((void *)this + 4);
      uint64_t v42 = *((void *)this + 3) | 4;
      uint64_t v86 = 0;
      v87[0] = v42;
      uint64_t v85 = v87;
      if (v41) {
        mlir::PassManager::runWithCrashRecovery((uint64_t)this, a2, (uint64_t)&v78);
      }
      unsigned int v54 = *((unsigned __int8 *)this + 56);
      uint64_t v55 = *(void *)this;
      int v56 = *(_DWORD *)(*(void *)this + 64);
      uint64_t v77 = &v78;
      uint64_t v57 = *(uint64_t **)(v55 + 40);
      uint64_t v58 = *(void *)(v55 + 48) - (void)v57;
      if (v58)
      {
        uint64_t v59 = 8 * (v58 >> 3);
        int v60 = (v54 >> 1) & 1;
        do
        {
          if (!mlir::detail::OpToOpPassAdaptor::run(*v57, a2, (mlir::detail::NestedAnalysisMap *)&v78, v60, v56))break; {
          ++v57;
          }
          v59 -= 8;
        }
        while (v59);
      }
      mlir::AnalysisManager::clear((uint64_t *)&v77);
      ZinIrHalH13g::~ZinIrHalH13g(v4);
      if (!*((unsigned char *)this + 20))
      {
        uint64_t v43 = v85;
        if (v86)
        {
          uint64_t v44 = (char *)v85 - 8;
          uint64_t v45 = 16 * v86;
          do
          {
            uint64_t v52 = *(void *)&v44[v45];
            *(void *)&v44[v45] = 0;
            if (v52) {
              (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
            }
            v45 -= 16;
          }
          while (v45);
          uint64_t v43 = v85;
        }
        if (v43 != v87) {
          free(v43);
        }
        llvm::deallocate_buffer(v82, (void *)(16 * v84));
      }
      mlir::PassManager::dumpStatistics(this);
    }
    if (mlir::OpPassManager::initialize(this, v4, *(_DWORD *)(*(void *)this + 64) + 1))
    {
      *((void *)this + 5) = RegistryHash;
      goto LABEL_62;
    }
  }
  uint64_t v25 = 0;
  uint64_t v53 = v75;
  if (v75)
  {
    unint64_t v61 = v76;
    uint64_t v62 = v75;
    if (v76 != v75)
    {
      do
      {
        uint64_t v64 = *--v61;
        uint64_t v63 = v64;
        void *v61 = 0;
        if (v64) {
          (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
        }
      }
      while (v61 != v53);
      uint64_t v62 = v75;
    }
    unint64_t v76 = v53;
    operator delete(v62);
  }
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy((uint64_t)&v72, v73);
  return v25;
}

uint64_t mlir::PassManager::runPasses(unsigned __int8 *a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3)
{
  unsigned int v3 = a1[56];
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(*(void *)a1 + 64);
  unint64_t v14 = a3;
  char v6 = *(uint64_t **)(v4 + 40);
  uint64_t v7 = *(void *)(v4 + 48) - (void)v6;
  if (v7)
  {
    uint64_t v10 = 8 * (v7 >> 3);
    int v11 = (v3 >> 1) & 1;
    while (mlir::detail::OpToOpPassAdaptor::run(*v6, a2, a3, v11, v5))
    {
      ++v6;
      v10 -= 8;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v12 = 1;
  }
  mlir::AnalysisManager::clear((uint64_t *)&v14);
  return v12;
}

uint64_t mlir::AnalysisManager::nestImmediate(uint64_t **this, mlir::Operation *a2)
{
  uint64_t v2 = **this;
  uint64_t v3 = *((unsigned int *)*this + 4);
  if (!v3) {
    goto LABEL_9;
  }
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v5 = v2 + 16 * v4;
  char v6 = *(mlir::Operation **)v5;
  if (*(mlir::Operation **)v5 == a2)
  {
    if (v5 != v2 + 16 * v3) {
      return *(void *)(v5 + 8);
    }
LABEL_9:
    operator new();
  }
  int v8 = 1;
  do
  {
    if (v6 == (mlir::Operation *)-4096) {
      goto LABEL_9;
    }
    int v9 = v4 + v8++;
    uint64_t v4 = v9 & (v3 - 1);
    char v6 = *(mlir::Operation **)(v2 + 16 * v4);
  }
  while (v6 != a2);
  uint64_t v5 = v2 + 16 * v4;
  if (v5 == v2 + 16 * v3) {
    goto LABEL_9;
  }
  return *(void *)(v5 + 8);
}

void mlir::detail::NestedAnalysisMap::invalidate(mlir::detail::NestedAnalysisMap *this, const mlir::detail::PreservedAnalyses *a2)
{
  v21[6] = *(const void **)MEMORY[0x263EF8340];
  if (!mlir::detail::PreservedAnalyses::isAll(a2))
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, v21, a2);
    _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_((uint64_t)this + 32, (uint64_t)&v18);
    if (v19 != v18) {
      free(v19);
    }
    if (*((_DWORD *)a2 + 5) == *((_DWORD *)a2 + 6))
    {
      int v4 = *((_DWORD *)this + 2);
      if (v4 || *((_DWORD *)this + 3))
      {
        uint64_t v5 = *((unsigned int *)this + 4);
        if (v5 > 4 * v4 && v5 >= 0x41)
        {
          llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear((uint64_t *)this);
          return;
        }
        if (v5)
        {
          uint64_t v15 = (uint64_t *)(*(void *)this + 8);
          for (uint64_t i = 16 * v5; i; i -= 16)
          {
            uint64_t v17 = *(v15 - 1);
            if (v17 != -8192)
            {
              if (v17 == -4096) {
                goto LABEL_35;
              }
              std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v15, 0);
            }
            *(v15 - 1) = -4096;
LABEL_35:
            v15 += 2;
          }
        }
        *((void *)this + 1) = 0;
      }
    }
    else
    {
      uint64_t v18 = v20;
      HIDWORD(v19) = 8;
      v20[0] = this;
      unsigned int v6 = 1;
      do
      {
        uint64_t v7 = (uint64_t *)*((void *)v18 + --v6);
        LODWORD(v19) = v6;
        if (*((_DWORD *)v7 + 2))
        {
          uint64_t v8 = *v7;
          uint64_t v9 = *((unsigned int *)v7 + 4);
          if (v9)
          {
            uint64_t v10 = 16 * v9;
            uint64_t v11 = v8;
            while ((*(void *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v11 += 16;
              v10 -= 16;
              if (!v10) {
                goto LABEL_12;
              }
            }
          }
          else
          {
            uint64_t v11 = v8;
          }
          uint64_t v12 = v8 + 16 * v9;
          if (v11 != v12)
          {
LABEL_21:
            mlir::detail::NestedAnalysisMap::invalidate(*(mlir::detail::NestedAnalysisMap **)(v11 + 8), a2);
            uint64_t v13 = *(void *)(v11 + 8);
            if (*(_DWORD *)(v13 + 8))
            {
              uint64_t v14 = v19;
              if (v19 >= (unint64_t)HIDWORD(v19))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
                uint64_t v14 = v19;
              }
              *((void *)v18 + v14) = v13;
              LODWORD(v19) = v19 + 1;
            }
            while (1)
            {
              v11 += 16;
              if (v11 == v12) {
                break;
              }
              if ((*(void *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v11 != v12) {
                  goto LABEL_21;
                }
                break;
              }
            }
            unsigned int v6 = v19;
          }
        }
LABEL_12:
        ;
      }
      while (v6);
      if (v18 != v20) {
        free(v18);
      }
    }
  }
}

void mlir::PassInstrumentor::runBeforeAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  std::recursive_mutex::lock(*a1);
  uint64_t v11 = *a1;
  uint64_t v12 = *(uint64_t **)(*a1)[1].__m_.__opaque;
  uint64_t v13 = *(uint64_t **)&v11[1].__m_.__opaque[8];
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 56))(v14, a2, a3, a4, a5);
  }

  std::recursive_mutex::unlock(v10);
}

void mlir::PassInstrumentor::runAfterAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  std::recursive_mutex::lock(*a1);
  uint64_t v12 = *(void *)(*a1)[1].__m_.__opaque;
  for (uint64_t i = *(void *)&(*a1)[1].__m_.__opaque[8]; i != v12; i -= 8)
  {
    uint64_t v13 = *(void *)(i - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, a2, a3, a4, a5);
  }

  std::recursive_mutex::unlock(v10);
}

char *mlir::Pass::getArgument(mlir::Pass *this)
{
  return &byte_211F4AA5D;
}

char *mlir::Pass::getDescription(mlir::Pass *this)
{
  return &byte_211F4AA5D;
}

void mlir::PassExecutionAction::~PassExecutionAction(mlir::PassExecutionAction *this)
{
}

const char *mlir::tracing::ActionImpl<mlir::PassExecutionAction>::getTag()
{
  return "pass-execution";
}

uint64_t mlir::tracing::Action::getContextIRUnits(mlir::tracing::Action *this)
{
  return *((void *)this + 2);
}

void mlir::detail::OpToOpPassAdaptor::~OpToOpPassAdaptor(mlir::detail::OpToOpPassAdaptor *this)
{
  *(void *)this = &unk_26C37F808;
  uint64_t v2 = (char *)*((void *)this + 46);
  uint64_t v3 = *((unsigned int *)this + 94);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 46);
  }
  if (v2 != (char *)this + 384) {
    free(v2);
  }
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);

  mlir::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C37F808;
  uint64_t v2 = (char *)*((void *)this + 46);
  uint64_t v3 = *((unsigned int *)this + 94);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 46);
  }
  if (v2 != (char *)this + 384) {
    free(v2);
  }
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);
  mlir::Pass::~Pass(this);

  JUMPOUT(0x21667D3C0);
}

const char *mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::getName()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
  unint64_t v6 = 81;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  uint64_t v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::OperationPass<void>::canScheduleOn()
{
  return 1;
}

void mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::clonePass()
{
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(unsigned __int8 *)(*a1 + 23);
  if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*a1 + 23)) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!*(void *)(v2 + 8)) {
    return 1;
  }
LABEL_3:
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (const void *)*a1;
  }
  else {
    uint64_t v4 = *(const void **)v2;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v5 = v3;
  }
  else {
    size_t v5 = *(void *)(v2 + 8);
  }
  unint64_t v6 = *(void **)a2;
  char v7 = *(unsigned char *)(*(void *)a2 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*(void *)a2 + 23)) {
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v6[1]) {
    return 0xFFFFFFFFLL;
  }
LABEL_11:
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(*(void *)a2 + 23);
  }
  else {
    size_t v8 = v6[1];
  }
  if (v8 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v8;
  }
  if (v9)
  {
    uint64_t v10 = v7 >= 0 ? *(const void **)a2 : (const void *)*v6;
    int v11 = memcmp(v4, v10, v9);
    if (v11) {
      return (v11 >> 31) | 1u;
    }
  }
  if (v5 == v8) {
    return 0;
  }
  if (v5 < v8) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (int32x2_t *)result;
  int32x2_t v3 = *(int32x2_t *)(result + 24);
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (!v4)
  {
    char v7 = *(uint64_t **)(result + 24);
    goto LABEL_40;
  }
  uint64_t v6 = *(void *)&v3 + 16 * v4;
  char v7 = *(uint64_t **)(result + 24);
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)&v3 + 8) + 16))(*(void *)(*(void *)&v3 + 8), a2);
    if (!result)
    {
      if ((uint64_t *)v3 == v7) {
        goto LABEL_5;
      }
      uint64_t *v7 = **(void **)&v3;
      uint64_t v17 = *(void *)(*(void *)&v3 + 8);
      *(void *)(*(void *)&v3 + 8) = 0;
      uint64_t v18 = v7[1];
      v7[1] = v17;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      int32x2_t v19 = v2[3];
      __int32 v20 = v2[2].i32[0];
      if (v20)
      {
        __int32 v8 = v20 - 1;
        unsigned int v9 = ((*v7 >> 4) ^ (*v7 >> 9)) & v8;
        uint64_t result = *(void *)v2 + 16 * v9;
        uint64_t v10 = *(void *)result;
        if (*v7 == *(void *)result)
        {
LABEL_4:
          *(_DWORD *)(result + 8) = ((unint64_t)v7 - *(void *)&v19) >> 4;
LABEL_5:
          v7 += 2;
          goto LABEL_6;
        }
        uint64_t v24 = 0;
        int v25 = 1;
        while (v10 != -4096)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v10 == -8192;
          }
          if (v26) {
            uint64_t v24 = result;
          }
          unsigned int v27 = v9 + v25++;
          unsigned int v9 = v27 & v8;
          uint64_t result = *(void *)v2 + 16 * v9;
          uint64_t v10 = *(void *)result;
          if (*v7 == *(void *)result) {
            goto LABEL_4;
          }
        }
        if (v24) {
          uint64_t v21 = v24;
        }
        else {
          uint64_t v21 = result;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>((uint64_t)v2, v21, v7);
      goto LABEL_4;
    }
    __int32 v11 = v2[2].i32[0];
    if (v11)
    {
      int32x2_t v12 = *v2;
      __int32 v13 = v11 - 1;
      LODWORD(v14) = ((**(void **)&v3 >> 4) ^ (**(void **)&v3 >> 9)) & (v11 - 1);
      uint64_t v15 = (uint64_t *)(*(void *)v2 + 16 * v14);
      uint64_t v16 = *v15;
      if (**(void **)&v3 == *v15)
      {
LABEL_10:
        *uint64_t v15 = -8192;
        v2[1] = vadd_s32(v2[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        int v22 = 1;
        while (v16 != -4096)
        {
          int v23 = v14 + v22++;
          uint64_t v14 = v23 & v13;
          uint64_t v16 = *(void *)(*(void *)&v12 + 16 * v14);
          if (**(void **)&v3 == v16)
          {
            uint64_t v15 = (uint64_t *)(*(void *)&v12 + 16 * v14);
            goto LABEL_10;
          }
        }
      }
    }
LABEL_6:
    *(void *)&v3 += 16;
  }
  while (*(void *)&v3 != v6);
  int32x2_t v3 = v2[3];
  unsigned int v28 = (uint64_t *)(*(void *)&v3 + 16 * v2[4].u32[0]);
  if (v28 != v7)
  {
    do
    {
      uint64_t result = *(v28 - 1);
      *(v28 - 1) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v28 -= 2;
    }
    while (v28 != v7);
    int32x2_t v3 = v2[3];
  }
LABEL_40:
  v2[4].i32[0] = ((unint64_t)v7 - *(void *)&v3) >> 4;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = *(void *)a1 + 16 * v11;
  uint64_t v12 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = *(void *)a1 + 16 * (v16 & v10);
      uint64_t v12 = *(void *)a2;
      if (v8 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = 0;
  return a2;
}

char **llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = &v2[8 * v3];
    do
    {
      uint64_t v6 = *((void *)v4 - 1);
      v4 -= 8;
      uint64_t v5 = v6;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        unsigned int v7 = *(void **)(v5 + 40);
        if (v7)
        {
          uint64_t v8 = *(void **)(v5 + 48);
          unsigned int v9 = *(void **)(v5 + 40);
          if (v8 != v7)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            while (v8 != v7);
            unsigned int v9 = *(void **)(v5 + 40);
          }
          *(void *)(v5 + 48) = v7;
          operator delete(v9);
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        MEMORY[0x21667D3C0](v5, 0x1032C402C5CA452);
      }
    }
    while (v4 != v2);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear(uint64_t *result)
{
  unint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  uint64_t v4 = (void *)(16 * v2);
  if (v2)
  {
    uint64_t v5 = (uint64_t *)(*result + 8);
    uint64_t v6 = 16 * v2;
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t result = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v5, 0);
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!*((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      return result;
    }
LABEL_17:
    llvm::deallocate_buffer((llvm *)*v1, v4);
  }
  int v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64) {
    uint64_t v8 = 64;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != *((_DWORD *)v1 + 4)) {
    goto LABEL_17;
  }
  v1[1] = 0;
  unsigned int v9 = (llvm *)*v1;
  uint64_t v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
  {
    uint64_t v13 = (llvm *)*v1;
LABEL_20:
    unsigned int v16 = (llvm *)((char *)v9 + 16 * v8);
    do
    {
      *(void *)uint64_t v13 = -4096;
      uint64_t v13 = (llvm *)((char *)v13 + 16);
    }
    while (v13 != v16);
    return result;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (v10 + 1) & 0x1FFFFFFFFFFFFFFELL;
  uint64_t v13 = (llvm *)((char *)v9 + 16 * v12);
  int v14 = (void *)((char *)v9 + 16);
  uint64_t v15 = v12;
  do
  {
    *(v14 - 2) = -4096;
    *int v14 = -4096;
    v14 += 4;
    v15 -= 2;
  }
  while (v15);
  if (v11 != v12) {
    goto LABEL_20;
  }
  return result;
}

void llvm::detail::provider_format_adapter<llvm::StringLiteral const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringLiteral const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a4)
  {
    unint64_t v11 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    unint64_t v7 = v11;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  uint64_t v8 = *(const char **)v5;
  if (*(void *)(v5 + 8) >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, v8, v9);
  }
  if (v9)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((void *)a2 + 4) += v9;
  }
  return result;
}

void llvm::detail::provider_format_adapter<llvm::StringRef>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringRef>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v11 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    unint64_t v7 = v11;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  uint64_t v8 = *(const char **)(a1 + 8);
  if (*(void *)(a1 + 16) >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = *(void *)(a1 + 16);
  }
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, v8, v9);
  }
  if (v9)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((void *)a2 + 4) += v9;
  }
  return result;
}

void llvm::detail::stream_operator_format_adapter<mlir::OperationName>::~stream_operator_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::OperationName>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  return mlir::OperationName::print((mlir::OperationName *)&v3, a2);
}

void *std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    size_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  int v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    int32x2_t v19 = &v15[-v18];
    v10 -= v18;
    __int32 v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)__int32 v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    BOOL v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)BOOL v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

std::string *mlir::detail::OpPassManagerImpl::OpPassManagerImpl(std::string *this, const mlir::detail::OpPassManagerImpl *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = *((void *)a2 + 6);
  while (v6 != v7)
  {
    uint64_t v8 = *(void *)v6 + 152;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v6 + 80))(&v13);
    mlir::detail::PassOptions::copyOptionValuesFrom(v13 + 152, v8);
    uint64_t v9 = v13;
    *(void *)(v13 + 336) = *(void *)v6;
    std::string::pointer data = this[2].__r_.__value_.__l.__data_;
    if ((unint64_t)data >= this[2].__r_.__value_.__l.__size_)
    {
      this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>(&this[1].__r_.__value_.__r.__words[2], &v13);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      if (!v11) {
        goto LABEL_5;
      }
LABEL_11:
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      goto LABEL_5;
    }
    uint64_t v13 = 0;
    *(void *)std::string::pointer data = v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 8);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11) {
      goto LABEL_11;
    }
LABEL_5:
    v6 += 8;
  }
  return this;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>(uint64_t a1, mlir::OpPassManager *a2, Operation *a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(Operation ***)a1;
  if (v6 != a3 && (mlir::Operation::isProperAncestor(v6, a3) & 1) == 0)
  {
    __int16 v33 = 257;
    mlir::Operation::emitOpError((uint64_t)a3, &v32, (uint64_t)v37);
    if (v37[0])
    {
      int v34 = 3;
      uint64_t v35 = "Trying to schedule a dynamic pipeline on an operation that isn't nested under the current operation the pass is processing";
      uint64_t v36 = 122;
      uint64_t v13 = &v34;
      int v14 = (char *)v38;
      if (v39 >= v40)
      {
        unint64_t v30 = v39 + 1;
        if (v38 <= &v34 && (char *)v38 + 24 * v39 > (char *)&v34)
        {
          int64_t v31 = (char *)&v34 - (unsigned char *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v30, 24);
          int v14 = (char *)v38;
          uint64_t v13 = (int *)((char *)v38 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v30, 24);
          uint64_t v13 = &v34;
          int v14 = (char *)v38;
        }
      }
      uint64_t v15 = &v14[24 * v39];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      ++v39;
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v46)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        uint64_t v18 = v45;
        int32x2_t v19 = __p;
        if (v45 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          int32x2_t v19 = __p;
        }
        uint64_t v45 = v17;
        operator delete(v19);
      }
      __int32 v20 = v42;
      if (v42)
      {
        uint64_t v21 = v43;
        uint64_t v22 = v42;
        if (v43 != v42)
        {
          do
          {
            uint64_t v24 = *--v21;
            uint64_t v23 = v24;
            void *v21 = 0;
            if (v24) {
              MEMORY[0x21667D390](v23, 0x1000C8077774924);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v42;
        }
        uint64_t v43 = v20;
        operator delete(v22);
      }
      if (v38 != v41) {
        free(v38);
      }
    }
    return v12;
  }
  uint64_t v7 = *(mlir::detail::OpPassManagerImpl **)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::detail::OpPassManagerImpl::finalizePassList(v7, Context)) {
    return 0;
  }
  uint64_t v9 = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::OpPassManager::initialize(a2, v9, **(_DWORD **)(a1 + 8))) {
    return 0;
  }
  uint64_t v10 = *(uint64_t ***)(a1 + 16);
  if (**(Operation ***)a1 == a3) {
    uint64_t v11 = *v10;
  }
  else {
    uint64_t v11 = mlir::AnalysisManager::nest(v10, (mlir::Block **)a3);
  }
  uint64_t v25 = **(unsigned __int8 **)(a1 + 24);
  uint64_t v26 = **(unsigned int **)(a1 + 8);
  uint64_t v27 = **(std::recursive_mutex ****)(a1 + 32);
  uint64_t v28 = *(void *)(a1 + 40);

  return mlir::detail::OpToOpPassAdaptor::runPipeline((uint64_t *)a2, (uint64_t)a3, (uint64_t)v11, v25, v26, v27, v28);
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = &unk_267772000;
  {
    uint64_t v21 = a3;
    uint64_t v22 = a1;
    uint64_t v19 = a6;
    uint64_t v20 = a2;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    uint64_t v6 = (void *)&unk_267772000;
    a4 = v17;
    a5 = v18;
    a6 = v19;
    a2 = v20;
    int v9 = v8;
    a3 = v21;
    a1 = v22;
    if (v9)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PassExecutionAction]";
      unint64_t v24 = 75;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v24;
      }
      uint64_t v12 = &v23[v11];
      unint64_t v13 = v24 - v11;
      if (v24 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v24 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::PassExecutionAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      uint64_t v6 = (void *)&unk_267772000;
      a4 = v17;
      a5 = v18;
      a6 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  unint64_t v24 = v6[336];
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v23 = (const char *)&unk_26C362608;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v23);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>(uint64_t **a1)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *(void *)(v2 + 8);
  long long v4 = &unk_267772000;
  {
    uint64_t v18 = v3;
    long long v4 = (void *)&unk_267772000;
    uint64_t v3 = v18;
    if (v10)
    {
      uint64_t v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v20 = 81;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v20;
      }
      unint64_t v13 = &v19[v12];
      unint64_t v14 = v20 - v12;
      if (v20 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v20 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      long long v4 = (void *)&unk_267772000;
      uint64_t v3 = v18;
    }
  }
  if (v3 == v4[332])
  {
    int v6 = *(unsigned __int8 *)a1[1];
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*(void *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24));
    int isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(Context);
    BOOL v9 = v6 != 0;
    if (isMultithreadingEnabled) {
      mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl((uint64_t **)v2, v9);
    }
    uint64_t result = mlir::detail::OpToOpPassAdaptor::runOnOperationImpl((mlir::detail::OpToOpPassAdaptor *)v2, v9);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 56))(**a1);
  }
  *(unsigned char *)a1[2] = (*(unsigned char *)(**a1 + 40) & 4) != 0;
  return result;
}

uint64_t *mlir::AnalysisManager::clear(uint64_t *this)
{
  unint64_t v1 = this;
  uint64_t v2 = *this;
  int v3 = *(_DWORD *)(*this + 40);
  if (*(void *)(*this + 40))
  {
    this = (uint64_t *)(v2 + 32);
    uint64_t v4 = *(unsigned int *)(v2 + 48);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      this = (uint64_t *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this);
      goto LABEL_5;
    }
    if (v4)
    {
      uint64_t v6 = *this;
      uint64_t v7 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v7)
      {
        uint64_t v8 = v7 + 1;
        uint64_t v9 = (v7 + 1) & 0x1FFFFFFFFFFFFFFELL;
        int v10 = (void *)(v6 + 16 * v9);
        unint64_t v11 = (void *)(v6 + 16);
        uint64_t v12 = v9;
        do
        {
          *(v11 - 2) = -4096;
          void *v11 = -4096;
          v11 += 4;
          v12 -= 2;
        }
        while (v12);
        if (v8 == v9) {
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = (void *)*this;
      }
      unint64_t v13 = (void *)(v6 + 16 * v4);
      do
      {
        *int v10 = -4096;
        v10 += 2;
      }
      while (v10 != v13);
    }
LABEL_16:
    *(void *)(v2 + 40) = 0;
    uint64_t v5 = *(unsigned int *)(v2 + 64);
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v5 = *(unsigned int *)(v2 + 64);
  if (!v5) {
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v14 = *(void *)(v2 + 56) - 8;
  uint64_t v15 = 16 * v5;
  do
  {
    this = *(uint64_t **)(v14 + v15);
    *(void *)(v14 + v15) = 0;
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    v15 -= 16;
  }
  while (v15);
LABEL_21:
  *(_DWORD *)(v2 + 64) = 0;
  unint64_t v16 = (uint64_t *)*v1;
  int v17 = *((_DWORD *)v16 + 2);
  if (!v17 && !*((_DWORD *)v16 + 3)) {
    return this;
  }
  uint64_t v18 = *((unsigned int *)v16 + 4);
  if (v18 <= 4 * v17 || v18 < 0x41)
  {
    if (!v18)
    {
LABEL_35:
      v16[1] = 0;
      return this;
    }
    uint64_t v19 = (uint64_t *)(*v16 + 8);
    uint64_t v20 = 16 * v18;
    while (1)
    {
      uint64_t v21 = *(v19 - 1);
      if (v21 != -8192)
      {
        if (v21 == -4096) {
          goto LABEL_31;
        }
        this = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v19, 0);
      }
      *(v19 - 1) = -4096;
LABEL_31:
      v19 += 2;
      v20 -= 16;
      if (!v20) {
        goto LABEL_35;
      }
    }
  }

  return llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear(v16);
}

uint64_t llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  int v2 = *(_DWORD *)(result + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  }
  *(void *)(result + 8) = 0;
  if (v1)
  {
    uint64_t v5 = *(llvm **)result;
    uint64_t v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      uint64_t v7 = v6 + 1;
      uint64_t v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v9 = (llvm *)((char *)v5 + 16 * v8);
      int v10 = (void *)((char *)v5 + 16);
      uint64_t v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *int v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8) {
        return result;
      }
    }
    else
    {
      uint64_t v9 = *(llvm **)result;
    }
    uint64_t v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(void *)uint64_t v9 = -4096;
      uint64_t v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v17);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  v5[v6] = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = v5[v6];
  v5[v6] = v7;
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 40);
    if (v9)
    {
      int v10 = *(void **)(v8 + 48);
      uint64_t v11 = *(void **)(v8 + 40);
      if (v10 != v9)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *int v10 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        while (v10 != v9);
        uint64_t v11 = *(void **)(v8 + 40);
      }
      *(void *)(v8 + 48) = v9;
      operator delete(v11);
    }
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x21667D3C0](v8, 0x1032C402C5CA452);
  }
  llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, v5);
  int v14 = v17;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  unsigned int v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  return (uint64_t)&v5[v15 - 1];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(uint64_t **)result;
    uint64_t v6 = *(void *)result + 8 * v2;
    do
    {
      *a2 = 0;
      uint64_t v7 = *v5;
      *uint64_t v5 = 0;
      uint64_t v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        uint64_t v9 = *(void **)(v8 + 40);
        if (v9)
        {
          int v10 = *(void **)(v8 + 48);
          uint64_t v11 = *(void **)(v8 + 40);
          if (v10 != v9)
          {
            do
            {
              uint64_t v13 = *--v10;
              uint64_t v12 = v13;
              *int v10 = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
            }
            while (v10 != v9);
            uint64_t v11 = *(void **)(v8 + 40);
          }
          *(void *)(v8 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        uint64_t result = MEMORY[0x21667D3C0](v8, 0x1032C402C5CA452);
      }
      ++a2;
      ++v5;
    }
    while (v5 != (uint64_t *)v6);
    uint64_t v14 = *(unsigned int *)(v4 + 8);
    if (v14)
    {
      unsigned int v15 = *(void **)v4;
      unint64_t v16 = (void *)(*(void *)v4 + 8 * v14);
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v17 = v18;
        void *v16 = 0;
        if (v18)
        {
          uint64_t v19 = *(void **)(v17 + 40);
          if (v19)
          {
            uint64_t v20 = *(void **)(v17 + 48);
            uint64_t v21 = *(void **)(v17 + 40);
            if (v20 != v19)
            {
              do
              {
                uint64_t v23 = *--v20;
                uint64_t v22 = v23;
                void *v20 = 0;
                if (v23) {
                  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
                }
              }
              while (v20 != v19);
              uint64_t v21 = *(void **)(v17 + 40);
            }
            *(void *)(v17 + 48) = v19;
            operator delete(v21);
          }
          if (*(char *)(v17 + 23) < 0) {
            operator delete(*(void **)v17);
          }
          uint64_t result = MEMORY[0x21667D3C0](v17, 0x1032C402C5CA452);
        }
      }
      while (v16 != v15);
    }
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v16 = 0;
  uint64_t v6 = (char *)(a1 + 16);
  uint64_t v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v16);
  uint64_t v8 = v7;
  if (a2)
  {
    uint64_t v9 = v7;
    unint64_t v10 = a2;
    do
    {
      void *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (*(_DWORD *)(a3 + 8)) {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, a3);
      }
      v9 += 3;
      --v10;
    }
    while (v10);
  }
  uint64_t v11 = *(char **)a1;
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  if (v12)
  {
    uint64_t v13 = 24 * v12;
    uint64_t v14 = v11 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v14[v13]);
      v13 -= 24;
    }
    while (v13);
    uint64_t v11 = *(char **)a1;
  }
  int v15 = v16;
  if (v11 != v6) {
    free(v11);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        mlir::OpPassManager::operator=();
      }
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v5);
      while (v9 != v8)
      {
        uint64_t v11 = *--v9;
        uint64_t v10 = v11;
        uint64_t *v9 = 0;
        if (v11)
        {
          uint64_t v12 = *(void **)(v10 + 40);
          if (v12)
          {
            uint64_t v13 = *(void **)(v10 + 48);
            uint64_t v14 = *(void **)(v10 + 40);
            if (v13 != v12)
            {
              do
              {
                uint64_t v16 = *--v13;
                uint64_t v15 = v16;
                void *v13 = 0;
                if (v16) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
              }
              while (v13 != v12);
              uint64_t v14 = *(void **)(v10 + 40);
            }
            *(void *)(v10 + 48) = v12;
            operator delete(v14);
          }
          if (*(char *)(v10 + 23) < 0) {
            operator delete(*(void **)v10);
          }
          MEMORY[0x21667D3C0](v10, 0x1032C402C5CA452);
        }
      }
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      uint64_t v6 = *(uint64_t **)a1;
      if (v5) {
        mlir::OpPassManager::operator=();
      }
      if (!*(_DWORD *)(a2 + 8)) {
        goto LABEL_28;
      }
    }
    else
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a1);
      unint64_t v18 = 0;
      uint64_t v6 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v4, 8, &v18);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, v6);
      int v7 = v18;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 12) = v7;
      if (!*(_DWORD *)(a2 + 8))
      {
LABEL_28:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    *uint64_t v6 = 0;
    mlir::OpPassManager::operator=();
  }
  return a1;
}

{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (a1 != a2)
  {
    unint64_t v4 = *(char **)a2;
    if (*(void *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      uint64_t v10 = *(char **)a1;
      if (v5)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v5], (uint64_t *)v10);
        uint64_t v12 = v11;
        uint64_t v10 = *(char **)a1;
        uint64_t v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v12 = *(char **)a1;
      }
      uint64_t v13 = &v10[8 * v6];
      while (v13 != v12)
      {
        uint64_t v15 = *((void *)v13 - 1);
        v13 -= 8;
        uint64_t v14 = v15;
        *(void *)uint64_t v13 = 0;
        if (v15)
        {
          uint64_t v16 = *(void **)(v14 + 40);
          if (v16)
          {
            uint64_t v17 = *(void **)(v14 + 48);
            unint64_t v18 = *(void **)(v14 + 40);
            if (v17 != v16)
            {
              do
              {
                uint64_t v20 = *--v17;
                uint64_t v19 = v20;
                void *v17 = 0;
                if (v20) {
                  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
                }
              }
              while (v17 != v16);
              unint64_t v18 = *(void **)(v14 + 40);
            }
            *(void *)(v14 + 48) = v16;
            operator delete(v18);
          }
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          MEMORY[0x21667D3C0](v14, 0x1032C402C5CA452);
        }
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a1);
      __int16 v33 = 0;
      int v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v33);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, (uint64_t *)v7);
      uint64_t v8 = v33;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      uint64_t v6 = 0;
      *(void *)a1 = v7;
      *(_DWORD *)(a1 + 12) = v8;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8)) {
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    int v7 = *(char **)a1;
    if (v6)
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v6], *(uint64_t **)a1);
      int v7 = *(char **)a1;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v6 != v9)
      {
LABEL_33:
        uint64_t v22 = *(void *)a2 + 8 * v9;
        uint64_t v23 = 8 * v6;
        unint64_t v24 = &v7[8 * v6];
        uint64_t v25 = (uint64_t *)(*(void *)a2 + v23);
        do
        {
          *(void *)unint64_t v24 = 0;
          uint64_t v26 = *v25;
          *uint64_t v25 = 0;
          uint64_t v27 = *(void *)v24;
          *(void *)unint64_t v24 = v26;
          if (v27)
          {
            uint64_t v28 = *(void **)(v27 + 40);
            if (v28)
            {
              uint64_t v29 = *(void **)(v27 + 48);
              unint64_t v30 = *(void **)(v27 + 40);
              if (v29 != v28)
              {
                do
                {
                  uint64_t v32 = *--v29;
                  int64_t v31 = v32;
                  void *v29 = 0;
                  if (v32) {
                    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
                  }
                }
                while (v29 != v28);
                unint64_t v30 = *(void **)(v27 + 40);
              }
              *(void *)(v27 + 48) = v28;
              operator delete(v30);
            }
            if (*(char *)(v27 + 23) < 0) {
              operator delete(*(void **)v27);
            }
            MEMORY[0x21667D3C0](v27, 0x1032C402C5CA452);
          }
          v24 += 8;
          ++v25;
        }
        while (v25 != (uint64_t *)v22);
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 8)) {
        goto LABEL_33;
      }
    }
LABEL_31:
    *(_DWORD *)(a1 + 8) = v5;
    llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a2);
  }
  return a1;
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26C3875B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3875B8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v1 & 1) == 0)
  {
    do
    {
      uint64_t add = atomic_fetch_add(*(atomic_uint *volatile *)(a1 + 16), 1u);
      if (add >= **(_DWORD **)(a1 + 24)) {
        break;
      }
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32), add);
      uint64_t v5 = *(atomic_uchar ****)(a1 + 40);
      uint64_t v6 = **(void **)(a1 + 48);
      int v7 = v5[1];
      uint64_t v8 = **v5;
      uint64_t v9 = (*v5)[1];
      if (v8 == v9)
      {
        uint64_t v11 = **v5;
      }
      else
      {
        while (1)
        {
          char v10 = 0;
          atomic_compare_exchange_strong(v8, (unsigned __int8 *)&v10, 1u);
          if (!v10) {
            break;
          }
          if (++v8 == v9)
          {
            LODWORD(v8) = v9;
            break;
          }
        }
        LODWORD(v11) = v8;
        uint64_t v8 = **v5;
      }
      uint64_t v12 = (v11 - v8);
      uint64_t v13 = (uint64_t *)(*(void *)&v7[46][24 * v12]
                      + 8 * *(unsigned int *)(v6 + 24 * add));
      char v14 = mlir::detail::OpToOpPassAdaptor::runPipeline(v13, *(void *)(v6 + 24 * add + 8), *(void *)(v6 + 24 * add + 16), *(unsigned __int8 *)v5[2], *(unsigned int *)(*v13 + 64), (std::recursive_mutex **)*v5[3], (uint64_t)v5[4]);
      atomic_store(0, (unsigned __int8 *)&(**v5)[v12]);
      if (!v14) {
        atomic_store(1u, *(unsigned __int8 **)(a1 + 8));
      }
      mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32));
      unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)(a1 + 8));
    }
    while ((v3 & 1) == 0);
  }
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperati"
                     "onAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRConte"
                     "xtET_SD_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23r"
                                "unOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13Logical"
                                "ResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target_type()
{
}

uint64_t **std::unique_ptr<mlir::PassInstrumentor>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3)
    {
      unint64_t v4 = *(void **)(v3 + 72);
      if (v4)
      {
        uint64_t v5 = *(void **)(v3 + 80);
        uint64_t v6 = *(void **)(v3 + 72);
        if (v5 != v4)
        {
          do
          {
            uint64_t v8 = *--v5;
            uint64_t v7 = v8;
            *uint64_t v5 = 0;
            if (v8) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          while (v5 != v4);
          uint64_t v6 = *(void **)(v3 + 72);
        }
        *(void *)(v3 + 80) = v4;
        operator delete(v6);
      }
      std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v3);
      MEMORY[0x21667D3C0]();
    }
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

uint64_t *std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = *(char **)(v2 + 56);
    uint64_t v4 = *(unsigned int *)(v2 + 64);
    if (v4)
    {
      uint64_t v5 = v3 - 8;
      uint64_t v6 = 16 * v4;
      do
      {
        uint64_t v7 = *(void *)&v5[v6];
        *(void *)&v5[v6] = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        v6 -= 16;
      }
      while (v6);
      uint64_t v3 = *(char **)(v2 + 56);
    }
    if (v3 != (char *)(v2 + 72)) {
      free(v3);
    }
    llvm::deallocate_buffer(*(llvm **)(v2 + 32), (void *)(16 * *(unsigned int *)(v2 + 48)));
  }
  return result;
}

void sub_2117417B0()
{
  JUMPOUT(0x21667D3C0);
}

void *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  char v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      char v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          *char v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      uint64_t v16 = v4;
      do
      {
        uint64_t v24 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v22 = (void *)(*(void *)a1 + 16 * v26);
          uint64_t v27 = *v22;
          if (v24 != *v22)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                uint64_t v28 = v22;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v25;
              uint64_t v22 = (void *)(*(void *)a1 + 16 * (v31 & v25));
              uint64_t v27 = *v22;
              if (v24 == *v22) {
                goto LABEL_24;
              }
            }
            if (v28) {
              uint64_t v22 = v28;
            }
          }
LABEL_24:
          *uint64_t v22 = v24;
          uint64_t v23 = *((void *)v16 + 1);
          *((void *)v16 + 1) = 0;
          v22[1] = v23;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100]((uint64_t *)v16 + 1, 0);
        }
        uint64_t v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    char v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      void *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[2 * v17];
      do
      {
        *char v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v6 = 24 * v5;
          uint64_t v7 = *(void *)a1 - 24;
          do
          {
            llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)(v7 + v6));
            v6 -= 24;
          }
          while (v6);
        }
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(a1, v4);
        uint64_t v5 = 0;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8)) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
      if (v5)
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = 24 * v5;
        do
        {
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v14, v13);
          v13 += 24;
          v14 += 24;
          v15 -= 24;
        }
        while (v15);
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v5 == v8) {
          goto LABEL_18;
        }
LABEL_24:
        uint64_t v17 = *(void *)a2;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = 24 * v5;
        uint64_t v20 = 24 * v8;
        do
        {
          uint64_t v21 = (void *)(v18 + v19);
          void *v21 = v18 + v19 + 16;
          v21[1] = 0x100000000;
          if (*(_DWORD *)(v17 + v19 + 8)) {
            llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v21, v17 + v19);
          }
          v18 += 24;
          v20 -= 24;
          v17 += 24;
        }
        while (v19 != v20);
        goto LABEL_18;
      }
      uint64_t v5 = 0;
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 8)) {
        goto LABEL_24;
      }
LABEL_18:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    if (v4)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = 24 * v4;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v10, v9);
        v9 += 24;
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
      uint64_t v12 = (char **)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8));
      if (v12 == (char **)v10) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v12 = (char **)(*(void *)a1 + 24 * v5);
      if (v12 == *(char ***)a1) {
        goto LABEL_18;
      }
    }
    do
      uint64_t v12 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v12 - 3);
    while (v12 != (char **)v10);
    goto LABEL_18;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  uint64_t v3 = (_DWORD *)(a1 + 16);
  unint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 24 * v7;
    uint64_t v9 = v4;
    do
    {
      void *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 3;
      v6 += 6;
      v8 -= 24;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = 6 * v10;
      uint64_t v12 = v6 - 6;
      do
      {
        llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v12[v11]);
        v11 -= 6;
      }
      while (v11 * 4);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

double llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote(char **a1, char **a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = &v4[8 * v5];
    do
    {
      uint64_t v8 = *((void *)v6 - 1);
      v6 -= 8;
      uint64_t v7 = v8;
      *(void *)uint64_t v6 = 0;
      if (v8)
      {
        uint64_t v9 = *(void **)(v7 + 40);
        if (v9)
        {
          uint64_t v10 = *(void **)(v7 + 48);
          uint64_t v11 = *(void **)(v7 + 40);
          if (v10 != v9)
          {
            do
            {
              uint64_t v13 = *--v10;
              uint64_t v12 = v13;
              *uint64_t v10 = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
            }
            while (v10 != v9);
            uint64_t v11 = *(void **)(v7 + 40);
          }
          *(void *)(v7 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        MEMORY[0x21667D3C0](v7, 0x1032C402C5CA452);
      }
    }
    while (v6 != v4);
    unint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *unint64_t v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        uint64_t v8 = *(void **)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void **)(v7 + 48);
          uint64_t v10 = *(void **)(v7 + 40);
          if (v9 != v8)
          {
            do
            {
              uint64_t v12 = *--v9;
              uint64_t v11 = v12;
              void *v9 = 0;
              if (v12) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
            }
            while (v9 != v8);
            uint64_t v10 = *(void **)(v7 + 40);
          }
          *(void *)(v7 + 48) = v8;
          operator delete(v10);
        }
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        MEMORY[0x21667D3C0](v7, 0x1032C402C5CA452);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void mlir::detail::RecoveryReproducerContext::enable(mlir::detail::RecoveryReproducerContext *this)
{
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerMutex, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  }
  uint64_t v2 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0];
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0]);
  if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire))
  {
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
      goto LABEL_5;
    }
LABEL_8:
    llvm::CrashRecoveryContext::Enable(v3);
    goto LABEL_12;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
    goto LABEL_8;
  }
LABEL_5:
LABEL_12:
  {
    llvm::sys::AddSignalHandler((llvm::sys *)mlir::detail::RecoveryReproducerContext::crashHandler, 0, v4);
  }
LABEL_9:
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  }
  uint64_t v5 = this;
  llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert((int64x2_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], (uint64_t *)&v5);
  std::recursive_mutex::unlock(v2);
}

void mlir::detail::RecoveryReproducerContext::disable(mlir::detail::RecoveryReproducerContext *this)
{
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerMutex, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  }
  uint64_t v2 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0];
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0]);
  if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire))
  {
    unint64_t v4 = this;
    uint64_t v3 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v4);
    if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
      goto LABEL_5;
    }
LABEL_8:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    llvm::CrashRecoveryContext::Disable(v3);
    goto LABEL_6;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  unint64_t v4 = this;
  uint64_t v3 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v4);
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
    goto LABEL_9;
  }
LABEL_6:
  std::recursive_mutex::unlock(v2);
}

void mlir::detail::RecoveryReproducerContext::generate(uint64_t a1, uint64_t a2)
{
  int v32 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  unsigned int v31 = &unk_26C35BB50;
  uint64_t v39 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v31, 0, 0, 0);
  uint64_t v28 = 0;
  size_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v27);
    uint64_t v4 = v27;
    unint64_t v5 = v34 - (void)v35;
    if (v27)
    {
      if (v5 > 0x18)
      {
        v35 += 25;
        uint64_t v6 = (llvm::raw_ostream *)&v31;
      }
      else
      {
        uint64_t v4 = v27;
      }
      uint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      size_t v10 = v8;
      uint64_t v11 = (void *)*((void *)v6 + 4);
      if (v8 <= *((void *)v6 + 3) - (void)v11)
      {
        if (v8)
        {
          memcpy(v11, v9, v8);
          *((void *)v6 + 4) += v10;
        }
      }
      else
      {
        uint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v9, v8);
      }
      uint64_t v12 = (unsigned char *)*((void *)v6 + 4);
      if (*((unsigned char **)v6 + 3) == v12)
      {
      }
      else
      {
        unsigned char *v12 = 96;
        ++*((void *)v6 + 4);
      }
      v24[0] = *(void *)(*(void *)(*(void *)(a1 + 24) + 48) + 8);
      __int16 v21 = 773;
      v20[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v24);
      v20[1] = v13;
      void v20[2] = "(";
      v22[0] = v20;
      v22[2] = a1;
      __int16 v23 = 1026;
      v24[0] = v22;
      unint64_t v24[2] = ")";
      __int16 v25 = 770;
      llvm::Twine::str((llvm::Twine *)v24, &__p);
      uint64_t v14 = *(void *)(a1 + 24);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v24);
      mlir::AsmState::AsmState(v22, v14, v24, 0, 0);
      operator new();
    }
    if (v5 > 0x1F)
    {
      qmemcpy(v35, "failed to create output stream: ", 32);
      v35 += 32;
      uint64_t v7 = (llvm::raw_ostream *)&v31;
    }
    else
    {
      uint64_t v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v31, "failed to create output stream: ", 0x20uLL);
    }
    if (v30 >= 0) {
      uint64_t v15 = (const char *)&v28;
    }
    else {
      uint64_t v15 = v28;
    }
    if (v30 >= 0) {
      size_t v16 = HIBYTE(v30);
    }
    else {
      size_t v16 = v29;
    }
    llvm::raw_ostream::write(v7, v15, v16);
    uint64_t v17 = v27;
    uint64_t v27 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v31);
  }
  else
  {
    uint64_t v18 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(v18, v19);
  }
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(uint64_t *a1, void *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    int v3 = *((_DWORD *)a1 + 4);
    if (v3)
    {
      uint64_t v4 = *a1;
      unsigned int v5 = v3 - 1;
      LODWORD(v6) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
      uint64_t v7 = (uint64_t *)(*a1 + 8 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7)
      {
LABEL_4:
        uint64_t *v7 = -8192;
        int v9 = v2 - 1;
        unsigned int v12 = *((_DWORD *)a1 + 8);
        uint64_t v11 = a1 + 4;
        uint64_t v10 = v12;
        int v13 = *((_DWORD *)a1 + 3) + 1;
        *((_DWORD *)a1 + 2) = v9;
        *((_DWORD *)a1 + 3) = v13;
        uint64_t v14 = (void *)a1[3];
        uint64_t v15 = &v14[v12];
        if (v12)
        {
          uint64_t v16 = 8 * v10;
          while (*v14 != *a2)
          {
            ++v14;
            v16 -= 8;
            if (!v16)
            {
              uint64_t v14 = v15;
              break;
            }
          }
        }
        uint64_t v17 = v14 + 1;
        size_t v18 = (char *)v15 - (char *)(v14 + 1);
        if (v15 == v14 + 1)
        {
          _DWORD *v11 = v10 - 1;
          return 1;
        }
        goto LABEL_21;
      }
      int v25 = 1;
      while (v8 != -4096)
      {
        int v26 = v6 + v25++;
        uint64_t v6 = v26 & v5;
        uint64_t v8 = *(void *)(v4 + 8 * v6);
        if (*a2 == v8)
        {
          uint64_t v7 = (uint64_t *)(v4 + 8 * v6);
          goto LABEL_4;
        }
      }
    }
    return 0;
  }
  unsigned int v21 = *((_DWORD *)a1 + 8);
  uint64_t v11 = a1 + 4;
  uint64_t v20 = v21;
  uint64_t v22 = a1[3];
  __int16 v23 = (void *)(v22 + 8 * v21);
  if (v21)
  {
    uint64_t v24 = 8 * v20;
    uint64_t v14 = (void *)a1[3];
    while (*v14 != *a2)
    {
      ++v14;
      v24 -= 8;
      if (!v24)
      {
        uint64_t v14 = v23;
        break;
      }
    }
    if (v20 == ((uint64_t)v14 - v22) >> 3) {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = (void *)a1[3];
    if (!v20) {
      return 0;
    }
  }
  uint64_t v17 = v14 + 1;
  size_t v18 = (char *)v23 - (char *)(v14 + 1);
  if (v23 != v14 + 1)
  {
LABEL_21:
    memmove(v14, v17, v18);
    LODWORD(v20) = *v11;
  }
  _DWORD *v11 = v20 - 1;
  return 1;
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert(int64x2_t *a1, uint64_t *a2)
{
  if (!a1->i32[2])
  {
    uint64_t v7 = (uint64_t **)&a1[1].i64[1];
    uint64_t v8 = (void *)a1[1].i64[1];
    uint64_t v9 = a1[2].u32[0];
    uint64_t v10 = v8;
    if (v9)
    {
      uint64_t v11 = 8 * v9;
      uint64_t v10 = (void *)a1[1].i64[1];
      while (*v10 != *a2)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          uint64_t v10 = &v8[v9];
          break;
        }
      }
    }
    if (v9 != v10 - v8) {
      return 0;
    }
    if (v9 >= a1[2].i32[1])
    {
      uint64_t v15 = (uint64_t **)&a1[1].i64[1];
      uint64_t v16 = *a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v9 + 1, 8);
      uint64_t v7 = v15;
      *(void *)(a1[1].i64[1] + 8 * a1[2].u32[0]) = v16;
      unsigned int v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2)
      {
LABEL_15:
        int v13 = *v7;
        uint64_t v14 = 8 * v12;
        do
        {
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, v13++, (uint64_t)v17);
          v14 -= 8;
        }
        while (v14);
      }
    }
    else
    {
      v8[v9] = *a2;
      unsigned int v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2) {
        goto LABEL_15;
      }
    }
    return 1;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2, (uint64_t)v17);
  if (v17[16])
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a1[2].u32[0];
    if (v5 >= a1[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v5 + 1, 8);
      LODWORD(v5) = a1[2].i32[0];
    }
    *(void *)(a1[1].i64[1] + 8 * v5) = v4;
    ++a1[2].i32[0];
    return 1;
  }
  return 0;
}

void mlir::detail::RecoveryReproducerContext::crashHandler(mlir::detail::RecoveryReproducerContext *this, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  }
  uint64_t v2 = *(unsigned int *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32);
  if (v2)
  {
    int v3 = *(uint64_t **)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 24);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *v3;
      v26[0] = 0;
      v26[1] = 0;
      uint64_t v27 = 0;
      mlir::detail::RecoveryReproducerContext::generate(v5, (uint64_t)v26);
      mlir::emitError(*(void *)(*(void *)(v5 + 24) + 24), (uint64_t)&v32);
      if (v32)
      {
        LODWORD(v28) = 3;
        size_t v29 = "A signal was caught while processing the MLIR module:";
        uint64_t v30 = 53;
        uint64_t v6 = (char *)v34;
        if (v35 >= v36)
        {
          unint64_t v22 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            int64_t v24 = (char *)&v28 - (unsigned char *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v22, 24);
            uint64_t v6 = (char *)v34;
            uint64_t v7 = (void ***)((char *)v34 + v24);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v22, 24);
            uint64_t v7 = &v28;
            uint64_t v6 = (char *)v34;
          }
        }
        else
        {
          uint64_t v7 = &v28;
        }
        uint64_t v8 = &v6[24 * v35];
        long long v9 = *(_OWORD *)v7;
        *((void *)v8 + 2) = v7[2];
        *(_OWORD *)uint64_t v8 = v9;
        ++v35;
        if (v32)
        {
          __int16 v31 = 260;
          uint64_t v28 = v26;
          mlir::Diagnostic::operator<<((uint64_t)&v33, &v28);
          if (v32)
          {
            LODWORD(v28) = 3;
            size_t v29 = "; marking pass as failed";
            uint64_t v30 = 24;
            uint64_t v10 = (char *)v34;
            if (v35 >= v36)
            {
              unint64_t v23 = v35 + 1;
              if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
              {
                int64_t v25 = (char *)&v28 - (unsigned char *)v34;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
                uint64_t v10 = (char *)v34;
                uint64_t v11 = (void ***)((char *)v34 + v25);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
                uint64_t v11 = &v28;
                uint64_t v10 = (char *)v34;
              }
            }
            else
            {
              uint64_t v11 = &v28;
            }
            unsigned int v12 = &v10[24 * v35];
            long long v13 = *(_OWORD *)v11;
            *((void *)v12 + 2) = v11[2];
            *(_OWORD *)unsigned int v12 = v13;
            ++v35;
            if (v32) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
            }
          }
        }
      }
      if (v42)
      {
        uint64_t v14 = __p;
        if (__p)
        {
          uint64_t v15 = v41;
          uint64_t v16 = __p;
          if (v41 != __p)
          {
            do
              uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            uint64_t v16 = __p;
          }
          uint64_t v41 = v14;
          operator delete(v16);
        }
        uint64_t v17 = v38;
        if (v38)
        {
          size_t v18 = v39;
          uint64_t v19 = v38;
          if (v39 != v38)
          {
            do
            {
              uint64_t v21 = *--v18;
              uint64_t v20 = v21;
              void *v18 = 0;
              if (v21) {
                MEMORY[0x21667D390](v20, 0x1000C8077774924);
              }
            }
            while (v18 != v17);
            uint64_t v19 = v38;
          }
          uint64_t v39 = v17;
          operator delete(v19);
        }
        if (v34 != v37) {
          free(v34);
        }
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(v26[0]);
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(mlir::detail::PassCrashReproducerGenerator::Impl **this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(v2);
  }
}

void mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor(uint64_t a1, mlir::Pass **a2, mlir::Pass **a3, void *a4)
{
  __p[3] = a4;
  memset(__p, 0, 24);
  int v11 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  int v17 = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = &unk_26C35BB50;
  size_t v18 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v10, 0, 0, 0);
  if (a2 != a3)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2 + 1;
    mlir::Pass::printAsTextualPipeline(v7, (llvm::raw_ostream *)&v10);
    while (v6 != a3)
    {
      while ((unint64_t)(v13 - (void)v14) > 1)
      {
        *v14++ = 8236;
        uint64_t v8 = *v6++;
        mlir::Pass::printAsTextualPipeline(v8, (llvm::raw_ostream *)&v10);
        if (v6 == a3) {
          goto LABEL_7;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v10, ", ", 2uLL);
      long long v9 = *v6++;
      mlir::Pass::printAsTextualPipeline(v9, (llvm::raw_ostream *)&v10);
    }
  }
LABEL_7:
  std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>();
}

uint64_t mlir::detail::PassCrashReproducerGenerator::finalize(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(unsigned int *)(*(void *)result + 48);
  if (!v4) {
    return result;
  }
  if (!a3)
  {
    uint64_t v8 = result;
    mlir::emitError(*(void *)(a2 + 24), (uint64_t)v32);
    uint64_t v9 = v32[0];
    if (v32[0])
    {
      LODWORD(v42) = 3;
      uint64_t v43 = "Failures have been detected while processing an MLIR pass pipeline";
      uint64_t v44 = 66;
      uint64_t v10 = (char *)&v42;
      int v11 = (char *)__src;
      if (v35 >= HIDWORD(v35))
      {
        unint64_t v27 = v35 + 1;
        if (__src <= &v42 && (char *)__src + 24 * v35 > (char *)&v42)
        {
          int64_t v28 = (char *)&v42 - (unsigned char *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v36, v27, 24);
          int v11 = (char *)__src;
          uint64_t v10 = (char *)__src + v28;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v36, v27, 24);
          uint64_t v10 = (char *)&v42;
          int v11 = (char *)__src;
        }
      }
      uint64_t v12 = &v11[24 * v35];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      LODWORD(v35) = v35 + 1;
      uint64_t v9 = v32[0];
    }
    uint64_t v42 = v9;
    LOBYTE(v43) = 0;
    char v52 = 0;
    if (!v41)
    {
LABEL_30:
      mlir::InFlightDiagnostic::abandon(v32);
      if (v32[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      }
      if (v41)
      {
        int v17 = (void *)__p;
        if ((void)__p)
        {
          size_t v18 = (void *)*((void *)&__p + 1);
          uint64_t v19 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              size_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
            while (v18 != v17);
            uint64_t v19 = (void *)__p;
          }
          *((void *)&__p + 1) = v17;
          operator delete(v19);
        }
        uint64_t v20 = (void *)v37;
        if ((void)v37)
        {
          uint64_t v21 = (void *)*((void *)&v37 + 1);
          unint64_t v22 = (void *)v37;
          if (*((void *)&v37 + 1) != (void)v37)
          {
            do
            {
              uint64_t v24 = *--v21;
              uint64_t v23 = v24;
              void *v21 = 0;
              if (v24) {
                MEMORY[0x21667D390](v23, 0x1000C8077774924);
              }
            }
            while (v21 != v20);
            unint64_t v22 = (void *)v37;
          }
          *((void *)&v37 + 1) = v20;
          operator delete(v22);
        }
        if (__src != v36) {
          free(__src);
        }
      }
      uint64_t v25 = *(void *)v8;
      if (*(unsigned char *)(*(void *)v8 + 32))
      {
        uint64_t v26 = *(void *)(*(void *)(v25 + 40) + 8 * *(unsigned int *)(v25 + 48) - 8);
        size_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        mlir::detail::RecoveryReproducerContext::generate(v26, (uint64_t)&v29);
        mlir::Diagnostic::attachNote();
      }
      size_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      mlir::detail::RecoveryReproducerContext::generate(**(void **)(v25 + 40), (uint64_t)&v29);
      mlir::Diagnostic::attachNote();
    }
    uint64_t v43 = (const char *)v32[1];
    int v14 = v35;
    LODWORD(v44) = v33;
    __dst = v47;
    uint64_t v46 = 0x400000000;
    if (!v35)
    {
      int v15 = 1;
      goto LABEL_26;
    }
    if (__src != v36)
    {
      __dst = __src;
      uint64_t v46 = v35;
      __src = v36;
      HIDWORD(v35) = 0;
      int v15 = 1;
LABEL_25:
      LODWORD(v35) = 0;
LABEL_26:
      long long v48 = v37;
      long long v37 = 0uLL;
      long long v50 = __p;
      uint64_t v49 = v38;
      uint64_t v51 = v40;
      uint64_t v38 = 0;
      long long __p = 0uLL;
      uint64_t v40 = 0;
      char v52 = 1;
      if (v15)
      {
        if (__src != v36) {
          free(__src);
        }
        unsigned __int8 v41 = 0;
      }
      goto LABEL_30;
    }
    if (v35 < 5)
    {
      uint64_t v16 = v35;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v47, v35, 24);
      uint64_t v16 = v35;
      if (!v35) {
        goto LABEL_24;
      }
    }
    memcpy(__dst, __src, 24 * v16);
LABEL_24:
    LODWORD(v46) = v14;
    int v15 = v41;
    goto LABEL_25;
  }
  uint64_t v5 = 8 * v4;
  uint64_t v6 = *(void *)(v3 + 40) - 8;
  do
  {
    uint64_t v7 = *(void *)(v6 + v5);
    *(void *)(v6 + v5) = 0;
    if (v7)
    {
      mlir::Operation::erase(*(mlir::Operation **)(v7 + 24));
      mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v7);
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      double result = MEMORY[0x21667D3C0](v7, 0x1032C4016633A97);
    }
    v5 -= 8;
  }
  while (v5);
  *(_DWORD *)(v3 + 48) = 0;
  return result;
}

mlir::SymbolOpInterface *formatPassOpReproducerMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 16);
  LODWORD(canMapOperands) = 3;
  uint64_t v62 = 1;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &canMapOperands;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v45 = v8 + 1;
    BOOL v46 = v6 + 24 * v8 > (unint64_t)&canMapOperands;
    if (v6 <= (unint64_t)&canMapOperands && v46)
    {
      uint64_t v55 = (char *)&canMapOperands - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v45, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v9 = (void ***)&v55[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v45, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v9 = &canMapOperands;
    }
  }
  uint64_t v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = v9[2];
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  __int16 v63 = 261;
  canMapOperands = v12;
  unint64_t v61 = v13;
  uint64_t v14 = mlir::Diagnostic::operator<<(a1, &canMapOperands);
  uint64_t v15 = v14;
  uint64_t v17 = v14 + 16;
  unint64_t v16 = *(void *)(v14 + 16);
  LODWORD(v64) = 3;
  uint64_t v66 = 5;
  uint64_t v18 = *(unsigned int *)(v14 + 24);
  uint64_t v19 = (char *)&v64;
  if (v18 >= *(_DWORD *)(v14 + 28))
  {
    unint64_t v47 = v18 + 1;
    BOOL v48 = v16 + 24 * v18 > (unint64_t)&v64;
    if (v16 <= (unint64_t)&v64 && v48)
    {
      int v56 = (char *)&v64 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v47, 24);
      unint64_t v16 = *(void *)(v15 + 16);
      uint64_t v19 = &v56[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v47, 24);
      unint64_t v16 = *(void *)(v15 + 16);
      uint64_t v19 = (char *)&v64;
    }
  }
  uint64_t v20 = v16 + 24 * *(unsigned int *)(v15 + 24);
  long long v21 = *(_OWORD *)v19;
  *(void *)(v20 + 16) = *((void *)v19 + 2);
  *(_OWORD *)uint64_t v20 = v21;
  unsigned int v22 = *(_DWORD *)(v15 + 28);
  uint64_t v23 = (*(_DWORD *)(v15 + 24) + 1);
  *(_DWORD *)(v15 + 24) = v23;
  LODWORD(v64) = 3;
  long long v65 = "'";
  uint64_t v66 = 1;
  unint64_t v24 = *(void *)(v15 + 16);
  uint64_t v25 = (char *)&v64;
  if (v23 >= v22)
  {
    unint64_t v49 = v23 + 1;
    BOOL v50 = v24 + 24 * v23 > (unint64_t)&v64;
    if (v24 <= (unint64_t)&v64 && v50)
    {
      uint64_t v57 = (char *)&v64 - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v49, 24);
      unint64_t v24 = *(void *)(v15 + 16);
      uint64_t v25 = &v57[v24];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v49, 24);
      unint64_t v24 = *(void *)(v15 + 16);
      uint64_t v25 = (char *)&v64;
    }
  }
  uint64_t v26 = v24 + 24 * *(unsigned int *)(v15 + 24);
  long long v27 = *(_OWORD *)v25;
  *(void *)(v26 + 16) = *((void *)v25 + 2);
  *(_OWORD *)uint64_t v26 = v27;
  ++*(_DWORD *)(v15 + 24);
  uint64_t v29 = mlir::Diagnostic::operator<<(v15, a3[6]);
  uint64_t v30 = v29 + 16;
  unint64_t v31 = *(void *)(v29 + 16);
  LODWORD(v64) = 3;
  long long v65 = "' operation";
  uint64_t v66 = 11;
  uint64_t v32 = *(unsigned int *)(v29 + 24);
  uint64_t v33 = (char *)&v64;
  if (v32 >= *(_DWORD *)(v29 + 28))
  {
    unint64_t v51 = v32 + 1;
    BOOL v52 = v31 + 24 * v32 > (unint64_t)&v64;
    if (v31 <= (unint64_t)&v64 && v52)
    {
      uint64_t v58 = (char *)&v64 - v31;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v29 + 32), v51, 24);
      unint64_t v31 = *(void *)(v29 + 16);
      uint64_t v33 = &v58[v31];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v29 + 32), v51, 24);
      unint64_t v31 = *(void *)(v29 + 16);
      uint64_t v33 = (char *)&v64;
    }
  }
  uint64_t v34 = v31 + 24 * *(unsigned int *)(v29 + 24);
  long long v35 = *(_OWORD *)v33;
  *(void *)(v34 + 16) = *((void *)v33 + 2);
  *(_OWORD *)uint64_t v34 = v35;
  ++*(_DWORD *)(v29 + 24);
  double result = llvm::DefaultDoCastIfPossible<mlir::SymbolOpInterface,mlir::Operation *,llvm::CastInfo<mlir::SymbolOpInterface,mlir::Operation *,void>>::doCastIfPossible((mlir::SymbolOpInterface *)a3, v28);
  uint64_t v64 = result;
  long long v65 = v37;
  if (result)
  {
    LODWORD(canMapOperands) = 3;
    unint64_t v61 = ": @";
    uint64_t v62 = 3;
    uint64_t v38 = *(unsigned int *)(a1 + 24);
    unint64_t v39 = *(void *)(a1 + 16);
    uint64_t v40 = &canMapOperands;
    if (v38 >= *(_DWORD *)(a1 + 28))
    {
      unint64_t v53 = v38 + 1;
      BOOL v54 = v39 + 24 * v38 > (unint64_t)&canMapOperands;
      if (v39 <= (unint64_t)&canMapOperands && v54)
      {
        uint64_t v59 = (char *)&canMapOperands - v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v53, 24);
        unint64_t v39 = *(void *)(a1 + 16);
        uint64_t v40 = (void ***)&v59[v39];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v53, 24);
        unint64_t v39 = *(void *)(a1 + 16);
        uint64_t v40 = &canMapOperands;
      }
    }
    uint64_t v41 = v39 + 24 * *(unsigned int *)(a1 + 24);
    long long v42 = *(_OWORD *)v40;
    *(void *)(v41 + 16) = v40[2];
    *(_OWORD *)uint64_t v41 = v42;
    ++*(_DWORD *)(a1 + 24);
    canMapOperands = (void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v64);
    uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&canMapOperands);
    __int16 v63 = 261;
    canMapOperands = AttrData;
    unint64_t v61 = v44;
    return (mlir::SymbolOpInterface *)mlir::Diagnostic::operator<<(a1, &canMapOperands);
  }
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>()
{
}

void sub_2117441D8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v24 + 24) = a1;
  *(void *)(v24 + 32) = v25;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v27 + 24));
  *(unsigned char *)(v24 + 40) = mlir::MLIRContext::isMultithreadingEnabled(Context) ^ 1;
  *(unsigned char *)(v24 + 41) = v26;
  mlir::detail::RecoveryReproducerContext::enable((mlir::detail::RecoveryReproducerContext *)v24);
  *uint64_t v23 = v24;
  if (v30 < 0) {
    operator delete(v29);
  }
}

void mlir::PassManager::runWithCrashRecovery(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v12 = a3;
  long long v11 = a2;
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  unint64_t v6 = (mlir::Pass **)mlir::OpPassManager::begin((mlir::OpPassManager *)a1);
  uint64_t LayerSchedule = (llvm::CrashRecoveryContext *)ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)a1);
  int v8 = (*(unsigned __int8 *)(a1 + 56) >> 1) & 1;
  llvm::CrashRecoveryContext::Enable(LayerSchedule);
  uint64_t v9 = *v5;
  *(unsigned char *)(v9 + 144) = v8;
  if (!*(unsigned char *)(v9 + 32)) {
    mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor((uint64_t)v5, v6, (mlir::Pass **)LayerSchedule, a2);
  }
  char v13 = 0;
  llvm::CrashRecoveryContext::CrashRecoveryContext((llvm::CrashRecoveryContext *)v10);
  llvm::CrashRecoveryContext::RunSafelyOnThread();
}

void mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::~Printer(void **a1)
{
  mlir::AsmResourcePrinter::~AsmResourcePrinter(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *((char *)v4 + 23);
  if (v6 >= 0) {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v7 = *v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    uint64_t v8 = v4[1];
  }
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 24))(a3, "pipeline", 8, v7, v8);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a3 + 16))(a3, "disable_threading", 17, *(unsigned __int8 *)(v5 + 40));
  uint64_t v9 = *(unsigned __int8 *)(v5 + 41);
  uint64_t v10 = *(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 16);

  return v10(a3, "verify_each", 11, v9);
}

void llvm::object_creator<llvm::sys::SmartMutex<true>>::call()
{
}

std::recursive_mutex *llvm::object_deleter<llvm::sys::SmartMutex<true>>::call(std::recursive_mutex *result)
{
  if (result)
  {
    std::recursive_mutex::~recursive_mutex(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call()
{
}

uint64_t llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2 != (void *)(v1 + 40)) {
      free(v2);
    }
    llvm::deallocate_buffer(*(llvm **)v1, (void *)(8 * *(unsigned int *)(v1 + 16)));
  }
  return result;
}

void mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(mlir::detail::PassCrashReproducerGenerator::Impl *this)
{
  uint64_t v2 = (char *)*((void *)this + 16);
  if (v2 != (char *)this + 144) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 13), (void *)(16 * *((unsigned int *)this + 30)));
}

void llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * v1));
  }
  *(void *)(a1 + 8) = 0;
  if (v1)
  {
    uint64_t v5 = *(llvm **)a1;
    memset_pattern16(v5, &unk_211F093D0, 16 * v1);
  }
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::detail::RecoveryReproducerContext>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v24 = 0;
  int v3 = (char *)(a1 + 16);
  int v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  uint64_t v5 = *(char **)a1;
  int v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7) {
    goto LABEL_21;
  }
  unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 8 * v7;
  if (v8 < 0xB)
  {
    uint64_t v10 = v4;
LABEL_12:
    uint64_t v19 = &v5[8 * v7];
    do
    {
      uint64_t v20 = *(void *)v6;
      *(void *)int v6 = 0;
      v6 += 8;
      *(void *)uint64_t v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  BOOL v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  uint64_t v10 = v4;
  if (!v11) {
    goto LABEL_12;
  }
  unint64_t v12 = v8 + 1;
  uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v10 = &v4[v13];
  int v6 = &v5[v13];
  uint64_t v14 = (long long *)(v5 + 16);
  uint64_t v15 = v4 + 16;
  uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v17 = *(v14 - 1);
    long long v18 = *v14;
    *(v14 - 1) = 0uLL;
    *uint64_t v14 = 0uLL;
    *(v15 - 1) = v17;
    *uint64_t v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v21 = *(void *)a1 - 8;
  do
  {
    uint64_t v22 = *(void *)(v21 + v9);
    *(void *)(v21 + v9) = 0;
    if (v22)
    {
      mlir::Operation::erase(*(mlir::Operation **)(v22 + 24));
      mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v22);
      if (*(char *)(v22 + 23) < 0) {
        operator delete(*(void **)v22);
      }
      MEMORY[0x21667D3C0](v22, 0x1032C4016633A97);
    }
    v9 -= 8;
  }
  while (v9);
  int v6 = *(char **)a1;
LABEL_21:
  int v23 = v24;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PassManager::runWithCrashRecovery(mlir::Operation *,mlir::AnalysisManager)::$_0>(uint64_t a1)
{
  uint64_t result = mlir::PassManager::runPasses(*(unsigned __int8 **)(a1 + 8), **(mlir ***)(a1 + 16), **(mlir::detail::NestedAnalysisMap ***)(a1 + 24));
  **(unsigned char **)a1 = result;
  return result;
}

uint64_t mlir::detail::pass_options::parseCommaSeparatedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t), uint64_t a7)
{
  unint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v26 = *MEMORY[0x263EF8340];
  v24[0] = (llvm *)v24;
  unint64_t v25 = (unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks
      + 2;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(((unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v24, a4, a5, 0, 0x2Cu);
  if (v11 == -1)
  {
LABEL_14:
    uint64_t v20 = a6(a7, v10, v9);
    unint64_t v21 = v25;
    if (v25 < 8) {
      return v20;
    }
    goto LABEL_17;
  }
  unint64_t v12 = v11;
  while (1)
  {
    unint64_t v13 = v9 >= v12 ? v12 : v9;
    if (!a6(a7, v10, v13)) {
      break;
    }
    if (v9 >= v12 + 1) {
      unint64_t v18 = v12 + 1;
    }
    else {
      unint64_t v18 = v9;
    }
    v10 += v18;
    v9 -= v18;
    if ((v25 & 2) != 0) {
      uint64_t v19 = v24;
    }
    else {
      uint64_t v19 = (llvm **)v24[0];
    }
    unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(v25 & 0xFFFFFFFFFFFFFFF8))((uint64_t)v19, v10, v9, 0, 0x2Cu);
    if (v12 == -1) {
      goto LABEL_14;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = v25;
  if (v25 >= 8)
  {
LABEL_17:
    if ((v21 & 4) != 0)
    {
      if ((v21 & 2) != 0) {
        uint64_t v22 = v24;
      }
      else {
        uint64_t v22 = (llvm **)v24[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v22, v14, v15, v16, v17);
    }
    if ((v21 & 2) == 0) {
      llvm::deallocate_buffer(v24[0], v24[1]);
    }
  }
  return v20;
}

uint64_t mlir::detail::PassOptions::copyOptionValuesFrom(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 160);
  uint64_t v3 = *(void *)(result + 168);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a2 + 160);
    uint64_t v5 = *(void *)(a2 + 168);
    if (v4 != v5)
    {
      uint64_t v6 = v4 + 8;
      uint64_t v7 = v2 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 - 8) + 40))(*(void *)(v7 - 8), *(void *)(v6 - 8));
        if (v7 == v3) {
          break;
        }
        v7 += 8;
        BOOL v8 = v6 == v5;
        v6 += 8;
      }
      while (!v8);
    }
  }
  return result;
}

uint64_t mlir::detail::PassOptions::parseFromString(uint64_t a1, __int8 *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  unint64_t v3 = a3;
  uint64_t v6 = (uint64_t *)(a1 + 128);
  while (2)
  {
    for (unint64_t i = 0; i != v3; ++i)
    {
      int v8 = a2[i];
      if (v8 == 61)
      {
        if (v3 >= i) {
          unint64_t v22 = i;
        }
        else {
          unint64_t v22 = v3;
        }
        uint64_t v68 = (uint64_t)a2;
        unint64_t v69 = v22;
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
        if (first_not_of >= v69) {
          unint64_t v24 = v69;
        }
        else {
          unint64_t v24 = first_not_of;
        }
        unint64_t v25 = v69 - v24;
        int64_t v70 = (int8x16_t *)(v68 + v24);
        unint64_t v71 = v69 - v24;
        uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v14 = v70;
        if (last_not_of + 1 < v71) {
          unint64_t v27 = last_not_of + 1;
        }
        else {
          unint64_t v27 = v71;
        }
        int64_t v28 = (const unsigned __int8 *)(v71 - v25 + v27);
        if (v71 >= (unint64_t)v28) {
          uint64_t v17 = v28;
        }
        else {
          uint64_t v17 = (const unsigned __int8 *)v71;
        }
        int64_t v70 = (int8x16_t *)&a2[v22];
        unint64_t v71 = v3 - v22;
        unint64_t v29 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
        if (v29 >= v71) {
          unint64_t v30 = v71;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v71 <= v29) {
          uint64_t v31 = (uint64_t)v70->i64 + v30;
        }
        else {
          uint64_t v31 = (uint64_t)v70->i64 + v30 + 1;
        }
        uint64_t v32 = 0;
        unint64_t v33 = (__PAIR128__(v71, v29) - __PAIR128__(v30, v71)) >> 64;
        if (v71 - v30 == v71 > v29)
        {
LABEL_87:
          if (v33 >= (unint64_t)v32) {
            unint64_t v51 = (unint64_t)v32;
          }
          else {
            unint64_t v51 = v33;
          }
          uint64_t v68 = v31;
          unint64_t v69 = v51;
          unint64_t v52 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
          if (v52 >= v69) {
            unint64_t v53 = v69;
          }
          else {
            unint64_t v53 = v52;
          }
          unint64_t v54 = v69 - v53;
          int64_t v70 = (int8x16_t *)(v68 + v53);
          unint64_t v71 = v69 - v53;
          uint64_t v55 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v20 = (char *)v70;
          if (v55 + 1 < v71) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v71;
          }
          size_t v57 = v71 - v54 + v56;
          if (v71 >= v57) {
            size_t v19 = v57;
          }
          else {
            size_t v19 = v71;
          }
          int64_t v70 = (int8x16_t *)(v31 + v51);
          unint64_t v71 = v33 - v51;
          unint64_t v58 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
          if (v58 >= v71) {
            unint64_t v59 = v71;
          }
          else {
            unint64_t v59 = v58;
          }
          a2 = &v70->i8[v59];
          unint64_t v3 = v71 - v59;
          if (!v17) {
            goto LABEL_3;
          }
LABEL_103:
          Key = (llvm *)llvm::StringMapImpl::FindKey(v6, v14, v17);
          if (Key != -1 && (int)Key != (unint64_t)*(unsigned int *)(a1 + 136))
          {
            if ((llvm::cl::ProvidePositionalOption(*(void *)(*(void *)(*v6 + 8 * (int)Key) + 8), v20, v19, 0) & 1) == 0) {
              goto LABEL_3;
            }
            return 0;
          }
          uint64_t v62 = (llvm::raw_ostream *)llvm::errs(Key);
          __int16 v63 = v62;
          uint64_t v64 = (void *)*((void *)v62 + 4);
          if (*((void *)v62 + 3) - (void)v64 > 0x25uLL)
          {
            qmemcpy(v64, "<Pass-Options-Parser>: no such option ", 38);
            long long v65 = (void *)(*((void *)v62 + 4) + 38);
            *((void *)v63 + 4) = v65;
            if ((unint64_t)v17 <= *((void *)v63 + 3) - (void)v65)
            {
LABEL_110:
              memcpy(v65, v14, (size_t)v17);
              uint64_t v66 = (unsigned __int8 *)*((void *)v63 + 3);
              unint64_t v67 = (unsigned __int8 *)&v17[*((void *)v63 + 4)];
              *((void *)v63 + 4) = v67;
              if (v66 != v67)
              {
LABEL_111:
                uint64_t result = 0;
                unsigned __int8 *v67 = 10;
                ++*((void *)v63 + 4);
                return result;
              }
LABEL_115:
              llvm::raw_ostream::write(v63, "\n", 1uLL);
              return 0;
            }
          }
          else
          {
            __int16 v63 = llvm::raw_ostream::write(v62, "<Pass-Options-Parser>: no such option ", 0x26uLL);
            long long v65 = (void *)*((void *)v63 + 4);
            if ((unint64_t)v17 <= *((void *)v63 + 3) - (void)v65) {
              goto LABEL_110;
            }
          }
          __int16 v63 = llvm::raw_ostream::write(v63, v14->i8, (size_t)v17);
          unint64_t v67 = (unsigned __int8 *)*((void *)v63 + 4);
          if (*((unsigned __int8 **)v63 + 3) != v67) {
            goto LABEL_111;
          }
          goto LABEL_115;
        }
        while (1)
        {
          int v36 = v32[v31];
          switch(v36)
          {
            case '""':
              size_t v48 = v33 - (void)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                unint64_t v49 = &v32[v31 + 1];
                int v50 = 34;
                goto LABEL_46;
              }
              break;
            case '\'':
              size_t v48 = v33 - (void)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                unint64_t v49 = &v32[v31 + 1];
                int v50 = 39;
LABEL_46:
                uint64_t v34 = (char *)memchr(v49, v50, v48);
                BOOL v35 = &v34[-v31] == (char *)-1 || v34 == 0;
                if (!v35) {
                  uint64_t v32 = &v34[-v31];
                }
              }
              break;
            case ' ':
              goto LABEL_87;
            default:
              long long v37 = v32 + 1;
              if (v36 == 123 && v37 != (char *)v33)
              {
                uint64_t v39 = 1;
                do
                {
                  unsigned int v40 = v37[v31];
                  if (v40 > 0x7A)
                  {
                    if (v40 == 123)
                    {
                      ++v39;
                    }
                    else if (v40 == 125 && !--v39)
                    {
                      goto LABEL_51;
                    }
                  }
                  else if (v40 == 34)
                  {
                    size_t v43 = v33 - (void)(v32 + 2);
                    if (v33 > (unint64_t)(v32 + 2))
                    {
                      uint64_t v44 = &v32[v31 + 2];
                      int v45 = 34;
LABEL_76:
                      BOOL v46 = (char *)memchr(v44, v45, v43);
                      if (&v46[-v31] != (char *)-1 && v46 != 0) {
                        long long v37 = &v46[-v31];
                      }
                    }
                  }
                  else
                  {
                    BOOL v35 = v40 == 39;
                    uint64_t v41 = v32 + 2;
                    if (v35 && v33 > (unint64_t)v41)
                    {
                      size_t v43 = v33 - (void)v41;
                      uint64_t v44 = &v41[v31];
                      int v45 = 39;
                      goto LABEL_76;
                    }
                  }
                  uint64_t v32 = v37++;
                }
                while (v37 != (char *)v33);
              }
              break;
          }
LABEL_51:
          if (++v32 == (char *)v33)
          {
            uint64_t v32 = (char *)v33;
            goto LABEL_87;
          }
        }
      }
      if (v8 == 32) {
        goto LABEL_9;
      }
    }
    unint64_t i = v3;
LABEL_9:
    if (v3 >= i) {
      unint64_t v9 = i;
    }
    else {
      unint64_t v9 = v3;
    }
    uint64_t v68 = (uint64_t)a2;
    unint64_t v69 = v9;
    unint64_t v10 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
    if (v10 >= v69) {
      unint64_t v11 = v69;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v12 = v69 - v11;
    int64_t v70 = (int8x16_t *)(v68 + v11);
    unint64_t v71 = v69 - v11;
    uint64_t v13 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v14 = v70;
    if (v13 + 1 < v71) {
      unint64_t v15 = v13 + 1;
    }
    else {
      unint64_t v15 = v71;
    }
    uint64_t v16 = (const unsigned __int8 *)(v71 - v12 + v15);
    if (v71 >= (unint64_t)v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = (const unsigned __int8 *)v71;
    }
    int64_t v70 = (int8x16_t *)&a2[v9];
    unint64_t v71 = v3 - v9;
    unint64_t v18 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
    size_t v19 = 0;
    uint64_t v20 = 0;
    if (v18 >= v71) {
      unint64_t v21 = v71;
    }
    else {
      unint64_t v21 = v18;
    }
    a2 = &v70->i8[v21];
    unint64_t v3 = v71 - v21;
    if (v17) {
      goto LABEL_103;
    }
LABEL_3:
    if (v3) {
      continue;
    }
    return 1;
  }
}

void mlir::detail::PassOptions::print(mlir::detail::PassOptions *this, llvm::raw_ostream *a2)
{
  v30[4] = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)this + 35)) {
    return;
  }
  uint64_t v4 = (char *)*((void *)this + 20);
  unint64_t v3 = (char *)*((void *)this + 21);
  __base = v30;
  uint64_t v29 = 0x400000000;
  uint64_t v5 = v3 - v4;
  if ((unint64_t)(v3 - v4) < 0x21)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    if (v4 == v3) {
      goto LABEL_12;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v30, v5 >> 3, 8);
    uint64_t v6 = v29;
    int v7 = v29;
    if (v4 == v3) {
      goto LABEL_12;
    }
  }
  int v8 = (char *)__base + 8 * v6;
  if ((unint64_t)(v5 - 8) < 0x38) {
    goto LABEL_32;
  }
  unint64_t v9 = (char *)__base + 8 * v6;
  if ((unint64_t)(v9 - v4) < 0x20) {
    goto LABEL_32;
  }
  unint64_t v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  int v8 = (void *)((char *)v8 + v11);
  unint64_t v12 = &v4[v11];
  uint64_t v13 = (long long *)(v4 + 16);
  uint64_t v14 = v9 + 16;
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *uint64_t v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v4 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_32:
    do
    {
      uint64_t v17 = *(void *)v4;
      v4 += 8;
      *v8++ = v17;
    }
    while (v4 != v3);
  }
LABEL_12:
  size_t v18 = v7 + ((unint64_t)v5 >> 3);
  LODWORD(v29) = v18;
  if (v18 >= 2) {
    qsort(__base, v18, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke);
  }
  size_t v19 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v19 < *((void *)a2 + 3))
  {
    *((void *)a2 + 4) = v19 + 1;
    unsigned char *v19 = 123;
    uint64_t v20 = v29;
    if (!v29) {
      goto LABEL_19;
    }
LABEL_18:
    unint64_t v21 = (char *)__base;
    (*(void (**)(void, llvm::raw_ostream *))(**(void **)__base + 24))(*(void *)__base, a2);
    if (v20 != 1)
    {
      unint64_t v24 = (uint64_t *)(v21 + 8);
      uint64_t v25 = 8 * v20 - 8;
      do
      {
        unint64_t v27 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v27)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          *unint64_t v27 = 32;
          ++*((void *)a2 + 4);
        }
        uint64_t v26 = *v24++;
        (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)v26 + 24))(v26, a2);
        v25 -= 8;
      }
      while (v25);
    }
    goto LABEL_19;
  }
  llvm::raw_ostream::write(a2, 123);
  uint64_t v20 = v29;
  if (v29) {
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v22 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v22 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 125);
    int v23 = __base;
    if (__base == v30) {
      return;
    }
  }
  else
  {
    *((void *)a2 + 4) = v22 + 1;
    *unint64_t v22 = 125;
    int v23 = __base;
    if (__base == v30) {
      return;
    }
  }
  free(v23);
}

uint64_t mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
  uint64_t v4 = *(const void **)(v3 + 16);
  size_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  size_t v7 = *(void *)(v6 + 24);
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = *(void *)(v6 + 24);
  }
  if (v8)
  {
    int v9 = memcmp(v4, *(const void **)(v6 + 16), v8);
    if (v9) {
      return (v9 >> 31) | 1u;
    }
  }
  if (v5 < v7) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 1;
  }
  if (v5 == v7) {
    return 0;
  }
  else {
    return v11;
  }
}

uint64_t llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallImpl<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if (a3 <= a4) {
    return -1;
  }
  int v8 = a5;
  while (1)
  {
    int v10 = *(unsigned __int8 *)(a2 + a4);
    if (v10 == v8) {
      return a4;
    }
    if (*(unsigned __int8 *)(a2 + a4) <= 0x27u)
    {
      if (v10 == 34)
      {
        size_t v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          unint64_t v12 = (void *)(a2 + a4 + 1);
          int v13 = 34;
LABEL_19:
          uint64_t v14 = memchr(v12, v13, v11);
          if (v14) {
            a4 = (unint64_t)v14 - a2;
          }
          else {
            a4 = -1;
          }
          goto LABEL_4;
        }
        goto LABEL_22;
      }
      if (v10 == 39)
      {
        size_t v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          unint64_t v12 = (void *)(a2 + a4 + 1);
          int v13 = 39;
          goto LABEL_19;
        }
LABEL_22:
        a4 = -1;
      }
    }
    else
    {
      switch(v10)
      {
        case '(':
          int v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '[':
          int v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '{':
          int v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        default:
          goto LABEL_4;
      }
      a4 = v9();
    }
LABEL_4:
    if (++a4 >= a3) {
      return -1;
    }
  }
}

mlir::Pass::Statistic *mlir::Pass::Statistic::Statistic(mlir::Pass::Statistic *this, mlir::Pass *a2, const char *a3, const char *a4)
{
  size_t v7 = (char *)*((void *)a2 + 17);
  unint64_t v6 = *((void *)a2 + 18);
  int v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *(void *)size_t v7 = this;
    uint64_t v9 = (uint64_t)(v7 + 8);
    goto LABEL_23;
  }
  int v10 = (char *)*((void *)a2 + 16);
  uint64_t v11 = (v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    abort();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = (char *)operator new(8 * v14);
    long long v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)long long v16 = this;
    uint64_t v9 = (uint64_t)(v16 + 8);
    size_t v18 = (char *)(v7 - v10);
    if (v7 == v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  long long v16 = (char *)(8 * v11);
  uint64_t v17 = 0;
  *(void *)(8 * v11) = this;
  uint64_t v9 = 8 * v11 + 8;
  size_t v18 = (char *)(v7 - v10);
  if (v7 != v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    int v8 = &v7[-v21];
    v16 -= v21;
    unint64_t v22 = &v15[8 * v11 - 16];
    int v23 = (long long *)(v7 - 16);
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)unint64_t v22 = v25;
      v22 -= 32;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v26 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v16 - 1) = v26;
        v16 -= 8;
      }
      while (v8 != v10);
    }
    int v8 = (char *)*((void *)a2 + 16);
  }
LABEL_21:
  *((void *)a2 + 16) = v16;
  *((void *)a2 + 17) = v9;
  *((void *)a2 + 18) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *((void *)a2 + 17) = v9;
  return this;
}

void mlir::OpPassManager::mergeStatisticsInto(mlir::OpPassManager *this, mlir::OpPassManager *a2)
{
  uint64_t v4 = mlir::OpPassManager::begin(this);
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule(this);
  unint64_t v6 = (uint64_t *)mlir::OpPassManager::begin(a2);
  uint64_t v7 = ZinIrHazardNode::GetLayerSchedule(a2);
  if (v4 != LayerSchedule)
  {
    int v8 = (uint64_t *)v7;
    if ((uint64_t *)v7 != v6)
    {
      do
      {
        uint64_t v9 = *(void *)v4;
        uint64_t v10 = *v6;
        uint64_t v11 = *(void *)(*(void *)v4 + 8);
        {
          unint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v28 = 81;
          unint64_t v20 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
          if (v28 >= v20) {
            unint64_t v21 = v20;
          }
          else {
            unint64_t v21 = v28;
          }
          unint64_t v22 = &v27[v21];
          unint64_t v23 = v28 - v21;
          uint64_t v24 = 18;
          if (v23 < 0x12) {
            uint64_t v24 = v23;
          }
          unint64_t v25 = v23 - v24;
          if (v25 >= v25 - 1) {
            uint64_t v26 = v25 - 1;
          }
          else {
            uint64_t v26 = v25;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
        }
        if (v11 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
        {
          uint64_t v12 = *(unsigned int *)(v9 + 352);
          uint64_t v13 = *(unsigned int *)(v10 + 352);
          if (v12 && v13 != 0)
          {
            uint64_t v15 = *(mlir::OpPassManager **)(v9 + 344);
            long long v16 = *(mlir::OpPassManager **)(v10 + 344);
            uint64_t v17 = 8 * v13 - 8;
            uint64_t v18 = 8 * v12 - 8;
            do
            {
              mlir::OpPassManager::mergeStatisticsInto(v15, v16);
              if (!v18) {
                break;
              }
              uint64_t v15 = (mlir::OpPassManager *)((char *)v15 + 8);
              long long v16 = (mlir::OpPassManager *)((char *)v16 + 8);
              uint64_t v19 = v17;
              v17 -= 8;
              v18 -= 8;
            }
            while (v19);
          }
        }
        v4 += 8;
        if (v4 == LayerSchedule) {
          break;
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
}

void mlir::PassManager::dumpStatistics(mlir::PassManager *this)
{
  prepareStatistics(this);
  llvm::CreateInfoOutputFile(v1);
}

void prepareStatistics(mlir::OpPassManager *a1)
{
  uint64_t v2 = mlir::OpPassManager::begin(a1);
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule(a1);
  if (v2 != LayerSchedule)
  {
    uint64_t v4 = LayerSchedule;
    do
    {
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = *(void *)(*(void *)v2 + 8);
      {
        unint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        unint64_t v24 = 81;
        unint64_t v16 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v24;
        }
        uint64_t v18 = &v23[v17];
        unint64_t v19 = v24 - v17;
        uint64_t v20 = 18;
        if (v19 < 0x12) {
          uint64_t v20 = v19;
        }
        unint64_t v21 = v19 - v20;
        if (v21 >= v21 - 1) {
          uint64_t v22 = v21 - 1;
        }
        else {
          uint64_t v22 = v21;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v18[v20], v22);
      }
      if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        uint64_t v7 = *(mlir::OpPassManager **)(v5 + 344);
        uint64_t v8 = *(unsigned int *)(v5 + 352);
        unsigned int v9 = *(_DWORD *)(v5 + 376);
        if (v9)
        {
          uint64_t v10 = *(void *)(v5 + 368);
          uint64_t v11 = v10 + 24 * v9;
          do
          {
            uint64_t v12 = *(unsigned int *)(v10 + 8);
            if (v12)
            {
              uint64_t v13 = 0;
              uint64_t v14 = 8 * v12;
              do
              {
                prepareStatistics((mlir::OpPassManager *)(*(void *)v10 + v13));
                mlir::OpPassManager::mergeStatisticsInto((mlir::OpPassManager *)(*(void *)v10 + v13), (mlir::OpPassManager *)((char *)v7 + v13));
                v13 += 8;
              }
              while (v14 != v13);
            }
            v10 += 24;
          }
          while (v10 != v11);
        }
        if (v8)
        {
          uint64_t v15 = 8 * v8;
          do
          {
            prepareStatistics(v7);
            uint64_t v7 = (mlir::OpPassManager *)((char *)v7 + 8);
            v15 -= 8;
          }
          while (v15);
        }
      }
      v2 += 8;
    }
    while (v2 != v4);
  }
}

void std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::~__func()
{
}

void *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381A00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C381A00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(const char ***)(*a2 + 8);
  uint64_t v5 = (const char **)&unk_267772000;
  while (v4 == (const char **)v5[332])
  {
    uint64_t v6 = *(unsigned int *)(v3 + 352);
    if (!v6) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 344);
    uint64_t v7 = v3 + 8 * v6;
    while (1)
    {
      uint64_t v4 = (const char **)mlir::OpPassManager::begin((mlir::OpPassManager *)v3);
      uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)v3);
      if (v4 != (const char **)LayerSchedule) {
        break;
      }
LABEL_6:
      v3 += 8;
      if (v3 == v7) {
        return;
      }
    }
    uint64_t v5 = (const char **)LayerSchedule;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v18 = *v4;
      uint64_t v10 = *(void *)(v9 + 24);
      if (!v10) {
        break;
      }
      (*(void (**)(uint64_t, const char **))(*(void *)v10 + 48))(v10, &v18);
      if (++v4 == v5) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_13:
    {
      uint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v19 = 81;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v19;
      }
      uint64_t v13 = &v18[v12];
      unint64_t v14 = v19 - v12;
      if (v19 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v19 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      v5[332] = (const char *)mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
    }
  }
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target_type()
{
}

void mlir::pdl::PDLDialect::PDLDialect(mlir::pdl::PDLDialect *this, mlir::MLIRContext *a2)
{
  *(void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"pdl", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id) = &unk_26C37E310;
  mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>();
}

void mlir::pdl::PDLDialect::~PDLDialect(llvm **this)
{
}

void sub_211746160()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>()
{
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verify(mlir::pdl::ApplyNativeConstraintOp *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && *(_DWORD *)(*(void *)this + 68)) {
    return 1;
  }
  unint64_t v11 = (void **)"expected at least one argument";
  __int16 v12 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v11, (uint64_t)v13);
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
  if (v13[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  }
  if (v20)
  {
    unint64_t v3 = __p;
    if (__p)
    {
      uint64_t v4 = v19;
      uint64_t v5 = __p;
      if (v19 != __p)
      {
        do
          uint64_t v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        uint64_t v5 = __p;
      }
      unint64_t v19 = v3;
      operator delete(v5);
    }
    uint64_t v6 = v16;
    if (v16)
    {
      uint64_t v7 = v17;
      uint64_t v8 = v16;
      if (v17 != v16)
      {
        do
        {
          uint64_t v10 = *--v7;
          uint64_t v9 = v10;
          void *v7 = 0;
          if (v10) {
            MEMORY[0x21667D390](v9, 0x1000C8077774924);
          }
        }
        while (v7 != v6);
        uint64_t v8 = v16;
      }
      uint64_t v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15) {
      free(v14);
    }
  }
  return v1;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verify(mlir::pdl::ApplyNativeRewriteOp *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && *(_DWORD *)(v1 + 68) || *(_DWORD *)(v1 + 36)) {
    return 1;
  }
  __int16 v12 = (void **)"expected at least one argument or result";
  __int16 v13 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = __p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      char v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = v18;
      uint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          uint64_t v11 = *--v8;
          uint64_t v10 = v11;
          void *v8 = 0;
          if (v11) {
            MEMORY[0x21667D390](v10, 0x1000C8077774924);
          }
        }
        while (v8 != v7);
        uint64_t v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::pdl::AttributeOp::verify(mlir::pdl::AttributeOp *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x800000) != 0 && *(_DWORD *)(v2 + 68))
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 72) + 24);
    if (*(void *)(v2 + 16 * ((v3 >> 23) & 1) + 64))
    {
LABEL_4:
      if (!v4) {
        return 1;
      }
      __int16 v23 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v22, (uint64_t)v24);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
      if (v24[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
      }
      if (!v31) {
        return v5;
      }
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = v30;
        uint64_t v8 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        unint64_t v30 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v27;
      if (!v27)
      {
LABEL_41:
        if (v25 != &v26) {
          free(v25);
        }
        return v5;
      }
      uint64_t v10 = v28;
      uint64_t v11 = v27;
      if (v28 == v27)
      {
LABEL_40:
        unint64_t v28 = v9;
        operator delete(v11);
        goto LABEL_41;
      }
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          MEMORY[0x21667D390](v12, 0x1000C8077774924);
        }
      }
      while (v10 != v9);
LABEL_39:
      uint64_t v11 = v27;
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (*(void *)(v2 + 16 * ((v3 >> 23) & 1) + 64)) {
      goto LABEL_4;
    }
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(v2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    __int16 v23 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v22, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (!v31) {
      return v5;
    }
    uint64_t v16 = __p;
    if (__p)
    {
      uint64_t v17 = v30;
      uint64_t v18 = __p;
      if (v30 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      unint64_t v30 = v16;
      operator delete(v18);
    }
    uint64_t v9 = v27;
    if (!v27) {
      goto LABEL_41;
    }
    unint64_t v19 = v28;
    uint64_t v11 = v27;
    if (v28 == v27) {
      goto LABEL_40;
    }
    do
    {
      uint64_t v21 = *--v19;
      uint64_t v20 = v21;
      void *v19 = 0;
      if (v21) {
        MEMORY[0x21667D390](v20, 0x1000C8077774924);
      }
    }
    while (v19 != v9);
    goto LABEL_39;
  }
  unint64_t v14 = *(mlir::Operation **)this;

  return verifyHasBindingUse(v14);
}

uint64_t mlir::pdl::AttributeOp::getValueType(mlir::pdl::AttributeOp *this)
{
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && *(_DWORD *)(v1 + 68)) {
    return *(void *)(*(void *)(v1 + 72) + 24);
  }
  else {
    return 0;
  }
}

uint64_t verifyHasBindingUse(mlir::Operation *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (mlir::Block *)*((void *)a1 + 2);
  if (!v2) {
    return 1;
  }
  uint64_t ParentOp = mlir::Block::getParentOp(v2);
  if (!ParentOp
    || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || (hasBindingUse(a1) & 1) != 0)
  {
    return 1;
  }
  __int16 v15 = 259;
  mlir::Operation::emitOpError((uint64_t)a1, &v14, (uint64_t)v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  }
  if (v23)
  {
    uint64_t v6 = __p;
    if (__p)
    {
      uint64_t v7 = v22;
      uint64_t v8 = __p;
      if (v22 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      uint64_t v22 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = v20;
      uint64_t v11 = v19;
      if (v20 != v19)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *uint64_t v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v19;
      }
      uint64_t v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18) {
      free(v17);
    }
  }
  return v4;
}

uint64_t mlir::pdl::OperationOp::verify(mlir::Operation **this)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  uint64_t v2 = (mlir::Block *)*((void *)*this + 2);
  if (!v2
    || (uint64_t ParentOp = mlir::Block::getParentOp(v2)) == 0
    || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    int v4 = 0;
    goto LABEL_5;
  }
  unint64_t v65 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v65 = 0;
  }
  *(void *)&long long v131 = *(void *)(v65 + 8);
  if ((void)v131)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v131);
    int v4 = 1;
LABEL_5:
    unint64_t v5 = *((unsigned int *)*this + 11);
    uint64_t v6 = (uint64_t)*this + 16 * ((v5 >> 23) & 1);
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v7 = v6 + 64;
    uint64_t v121 = v8;
    if (!BYTE3(v5)) {
      uint64_t v7 = 0;
    }
    unint64_t v9 = (*(_DWORD *)(v7 + 20) + *(_DWORD *)(v7 + 16)) - (unint64_t)*(unsigned int *)(v7 + 16);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v121);
    if (v10 == v9)
    {
      if (v4)
      {
        uint64_t v11 = *this;
        unint64_t v12 = *((unsigned int *)*this + 11);
        uint64_t v13 = (v12 >> 23) & 1;
        uint64_t v14 = (uint64_t)*this + 16 * v13 + 64;
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          uint64_t v14 = 0;
        }
        *(void *)&long long v131 = *(void *)(v14 + 8);
        if (!(void)v131)
        {
LABEL_14:
          unint64_t v19 = (_DWORD *)((char *)v11 + 16 * v13 + 64);
          if (!BYTE3(v12)) {
            unint64_t v19 = 0;
          }
          if ((v12 & 0x800000) != 0) {
            uint64_t v20 = *((void *)v11 + 9);
          }
          else {
            uint64_t v20 = 0;
          }
          int v21 = v19[4];
          int v22 = v19[5];
          int v23 = v19[6];
          v127 = v11;
          uint64_t v24 = *((void *)v11 + 2);
          int v25 = *((_DWORD *)v11 + 9);
          uint64_t v26 = (char *)v11 - 16;
          if (v25) {
            uint64_t v27 = (uint64_t)v26;
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = *(void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
          if (v28)
          {
            while (1)
            {
              uint64_t v29 = v28[2];
              if (v29
                && *(void *)(*(void *)(v29 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id)
              {
                if (mlir::OpOperand::getOperandNumber((unint64_t)v28))
                {
                  *(void *)&long long v131 = *(void *)(*(void *)(v29 + 72) + 24);
                  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v131);
                  if (*(void *)(DefiningOp + 16) != v24
                    || mlir::Operation::isBeforeInBlock((mlir::Block **)DefiningOp, v127))
                  {
                    break;
                  }
                }
              }
              unint64_t v28 = (void *)*v28;
              if (!v28) {
                goto LABEL_63;
              }
            }
          }
          else
          {
LABEL_63:
            if (v23)
            {
              uint64_t v66 = 0;
              uint64_t v67 = (v22 + v21);
              uint64_t v68 = (v23 + v67);
              uint64_t v69 = v20 + 32 * v67;
              uint64_t v70 = v68 - v67;
              while (1)
              {
                uint64_t v71 = *(void *)(v69 + 32 * v66 + 24);
                uint64_t v125 = v66;
                uint64_t v126 = v71;
                uint64_t v72 = mlir::Value::getDefiningOp((mlir::Value *)&v126);
                unsigned int v73 = *(void **)(*(void *)(v72 + 48) + 16);
                if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id)
                {
                  uint64_t v74 = v72;
                  if (v73 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
                  {
                    *(void *)&long long v131 = *(void *)(v72
                                                 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1)
                                                 + 64);
                    if (!(void)v131)
                    {
                      uint64_t v85 = (const char *)*(unsigned int *)(v72 + 36);
                      if (v85) {
                        uint64_t v86 = v72 - 16;
                      }
                      else {
                        uint64_t v86 = 0;
                      }
                      uint64_t v122 = v86;
                      unint64_t v123 = v85;
                      mlir::ResultRange::use_begin(&v122, (uint64_t *)&v128);
                      unint64_t v87 = (const char *)*(unsigned int *)(v74 + 36);
                      if (v87) {
                        uint64_t v88 = v74 - 16;
                      }
                      else {
                        uint64_t v88 = 0;
                      }
                      uint64_t v122 = v88;
                      unint64_t v123 = v87;
                      mlir::ResultRange::use_end(&v122, v134);
                      uint64_t v89 = v130;
                      uint64_t v133 = v130;
                      long long v131 = v128;
                      long long v132 = v129;
                      uint64_t v90 = v135;
                      while (v89 != v90)
                      {
                        uint64_t v91 = *(void *)(v89 + 16);
                        if (*(void *)(v91 + 16) != v24)
                        {
                          char v92 = *(void **)(*(void *)(v91 + 48) + 16);
                          BOOL v93 = v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                             || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                          if (v93 || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
                            goto LABEL_67;
                          }
                        }
                        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v128);
                        uint64_t v89 = v130;
                      }
LABEL_110:
                      LOWORD(v130) = 259;
                      mlir::OpState::emitOpError((uint64_t *)&v127, (void ***)&v128, (uint64_t)&v131);
                      mlir::Diagnostic::attachNote();
                    }
                    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v131);
                  }
                  else
                  {
                    if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id) {
                      goto LABEL_110;
                    }
                    if (!*(void *)(v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64))
                    {
                      uint64_t v75 = (const char *)*(unsigned int *)(v72 + 36);
                      if (v75) {
                        uint64_t v76 = v72 - 16;
                      }
                      else {
                        uint64_t v76 = 0;
                      }
                      uint64_t v122 = v76;
                      unint64_t v123 = v75;
                      mlir::ResultRange::use_begin(&v122, (uint64_t *)&v128);
                      uint64_t v77 = (const char *)*(unsigned int *)(v74 + 36);
                      if (v77) {
                        uint64_t v78 = v74 - 16;
                      }
                      else {
                        uint64_t v78 = 0;
                      }
                      uint64_t v122 = v78;
                      unint64_t v123 = v77;
                      mlir::ResultRange::use_end(&v122, v134);
                      uint64_t v79 = v130;
                      uint64_t v133 = v130;
                      long long v131 = v128;
                      long long v132 = v129;
                      uint64_t v80 = v135;
                      while (v79 != v80)
                      {
                        uint64_t v81 = *(void *)(v79 + 16);
                        if (*(void *)(v81 + 16) != v24)
                        {
                          int v82 = *(void **)(*(void *)(v81 + 48) + 16);
                          BOOL v83 = v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                             || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                          if (v83 || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
                            goto LABEL_67;
                          }
                        }
                        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v128);
                        uint64_t v79 = v130;
                      }
                      goto LABEL_110;
                    }
                  }
                }
LABEL_67:
                if (++v66 == v70) {
                  return verifyHasBindingUse(*this);
                }
              }
            }
            v101 = (char *)v127 + 16 * (((unint64_t)*((unsigned int *)v127 + 11) >> 23) & 1) + 64;
            if (!HIBYTE(*((_DWORD *)v127 + 11))) {
              v101 = 0;
            }
            *(void *)&long long v131 = *((void *)v101 + 1);
            if ((void)v131)
            {
              uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v131);
              v104 = v103;
              uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)v127 + 24));
              uint64_t v122 = mlir::RegisteredOperationName::lookup(AttrData, v104, Context);
              unint64_t v123 = v106;
              if ((_BYTE)v106)
              {
                if ((mlir::OperationName::hasTrait<mlir::OpTrait::ZeroResults>(&v122) & 1) == 0
                  && (mlir::OperationName::hasTrait<mlir::OpTrait::VariadicResults>(&v122) & 1) == 0)
                {
                  LOWORD(v130) = 259;
                  mlir::OpState::emitOpError((uint64_t *)&v127, (void ***)&v128, (uint64_t)&v131);
                  mlir::Diagnostic::attachNote();
                }
              }
            }
          }
          return verifyHasBindingUse(*this);
        }
        uint64_t v15 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v131);
        uint64_t v17 = v16;
        uint64_t v18 = mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
        mlir::OperationName::OperationName(&v131, v15, v17, v18);
        if (!mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>((uint64_t *)&v131))
        {
          uint64_t v11 = *this;
          unint64_t v12 = *((unsigned int *)*this + 11);
          uint64_t v13 = (v12 >> 23) & 1;
          goto LABEL_14;
        }
      }
      return verifyHasBindingUse(*this);
    }
    LOWORD(v130) = 257;
    mlir::OpState::emitOpError((uint64_t *)this, (void ***)&v128, (uint64_t)&v131);
    if ((void)v131)
    {
      LODWORD(v122) = 3;
      unint64_t v123 = "expected the same number of attribute values and attribute names, got ";
      uint64_t v124 = 70;
      uint64_t v32 = &v122;
      uint64_t v33 = *((void *)&v132 + 1);
      if (v133 >= HIDWORD(v133))
      {
        unint64_t v108 = v133 + 1;
        if (*((void *)&v132 + 1) <= (unint64_t)&v122
          && *((void *)&v132 + 1) + 24 * (unint64_t)v133 > (unint64_t)&v122)
        {
          long long v116 = (char *)&v122 - *((void *)&v132 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v108, 24);
          uint64_t v33 = *((void *)&v132 + 1);
          uint64_t v32 = (uint64_t *)&v116[*((void *)&v132 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v108, 24);
          uint64_t v32 = &v122;
          uint64_t v33 = *((void *)&v132 + 1);
        }
      }
      uint64_t v34 = v33 + 24 * v133;
      long long v35 = *(_OWORD *)v32;
      *(void *)(v34 + 16) = v32[2];
      *(_OWORD *)uint64_t v34 = v35;
      LODWORD(v133) = v133 + 1;
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v121);
    if ((void)v131)
    {
      LODWORD(v122) = 5;
      unint64_t v123 = v36;
      long long v37 = &v122;
      uint64_t v38 = *((void *)&v132 + 1);
      if (v133 >= HIDWORD(v133))
      {
        unint64_t v109 = v133 + 1;
        if (*((void *)&v132 + 1) <= (unint64_t)&v122
          && *((void *)&v132 + 1) + 24 * (unint64_t)v133 > (unint64_t)&v122)
        {
          v117 = (char *)&v122 - *((void *)&v132 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v109, 24);
          uint64_t v38 = *((void *)&v132 + 1);
          long long v37 = (uint64_t *)&v117[*((void *)&v132 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v109, 24);
          long long v37 = &v122;
          uint64_t v38 = *((void *)&v132 + 1);
        }
      }
      uint64_t v39 = v38 + 24 * v133;
      long long v40 = *(_OWORD *)v37;
      *(void *)(v39 + 16) = v37[2];
      *(_OWORD *)uint64_t v39 = v40;
      uint64_t v41 = (v133 + 1);
      LODWORD(v133) = v133 + 1;
      if ((void)v131)
      {
        LODWORD(v122) = 3;
        unint64_t v123 = " names and ";
        uint64_t v124 = 11;
        long long v42 = &v122;
        uint64_t v43 = *((void *)&v132 + 1);
        if (v41 >= HIDWORD(v133))
        {
          unint64_t v110 = v41 + 1;
          BOOL v111 = *((void *)&v132 + 1) + 24 * (unint64_t)v41 > (unint64_t)&v122;
          if (*((void *)&v132 + 1) <= (unint64_t)&v122 && v111)
          {
            uint64_t v118 = (char *)&v122 - *((void *)&v132 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v110, 24);
            uint64_t v43 = *((void *)&v132 + 1);
            long long v42 = (uint64_t *)&v118[*((void *)&v132 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v110, 24);
            long long v42 = &v122;
            uint64_t v43 = *((void *)&v132 + 1);
          }
        }
        uint64_t v44 = v43 + 24 * v133;
        long long v45 = *(_OWORD *)v42;
        *(void *)(v44 + 16) = v42[2];
        *(_OWORD *)uint64_t v44 = v45;
        uint64_t v46 = (v133 + 1);
        LODWORD(v133) = v133 + 1;
        if ((void)v131)
        {
          LODWORD(v122) = 5;
          unint64_t v123 = (const char *)v9;
          unint64_t v47 = &v122;
          uint64_t v48 = *((void *)&v132 + 1);
          if (v46 >= HIDWORD(v133))
          {
            unint64_t v112 = v46 + 1;
            BOOL v113 = *((void *)&v132 + 1) + 24 * (unint64_t)v46 > (unint64_t)&v122;
            if (*((void *)&v132 + 1) <= (unint64_t)&v122 && v113)
            {
              unint64_t v119 = (char *)&v122 - *((void *)&v132 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v112, 24);
              uint64_t v48 = *((void *)&v132 + 1);
              unint64_t v47 = (uint64_t *)&v119[*((void *)&v132 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v112, 24);
              unint64_t v47 = &v122;
              uint64_t v48 = *((void *)&v132 + 1);
            }
          }
          uint64_t v49 = v48 + 24 * v133;
          long long v50 = *(_OWORD *)v47;
          *(void *)(v49 + 16) = v47[2];
          *(_OWORD *)uint64_t v49 = v50;
          uint64_t v51 = (v133 + 1);
          LODWORD(v133) = v133 + 1;
          if ((void)v131)
          {
            LODWORD(v122) = 3;
            unint64_t v123 = " values";
            uint64_t v124 = 7;
            unint64_t v52 = &v122;
            uint64_t v53 = *((void *)&v132 + 1);
            if (v51 >= HIDWORD(v133))
            {
              unint64_t v114 = v51 + 1;
              BOOL v115 = *((void *)&v132 + 1) + 24 * (unint64_t)v51 > (unint64_t)&v122;
              if (*((void *)&v132 + 1) <= (unint64_t)&v122 && v115)
              {
                long long v120 = (char *)&v122 - *((void *)&v132 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v114, 24);
                uint64_t v53 = *((void *)&v132 + 1);
                unint64_t v52 = (uint64_t *)&v120[*((void *)&v132 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132 + 8, v134, v114, 24);
                unint64_t v52 = &v122;
                uint64_t v53 = *((void *)&v132 + 1);
              }
            }
            uint64_t v54 = v53 + 24 * v133;
            long long v55 = *(_OWORD *)v52;
            *(void *)(v54 + 16) = v52[2];
            *(_OWORD *)uint64_t v54 = v55;
            LODWORD(v133) = v133 + 1;
          }
        }
      }
    }
    uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
    if ((void)v131) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    }
    if (v140)
    {
      size_t v57 = __p;
      if (__p)
      {
        unint64_t v58 = v139;
        unint64_t v59 = __p;
        if (v139 != __p)
        {
          do
            unint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          unint64_t v59 = __p;
        }
        unint64_t v139 = v57;
        operator delete(v59);
      }
      int v60 = v136;
      if (!v136) {
        goto LABEL_127;
      }
      unint64_t v61 = v137;
      uint64_t v62 = v136;
      if (v137 == v136)
      {
LABEL_126:
        v137 = v60;
        operator delete(v62);
LABEL_127:
        if (*((uint64_t **)&v132 + 1) != v134) {
          free(*((void **)&v132 + 1));
        }
        return v56;
      }
      do
      {
        uint64_t v64 = *--v61;
        uint64_t v63 = v64;
        void *v61 = 0;
        if (v64) {
          MEMORY[0x21667D390](v63, 0x1000C8077774924);
        }
      }
      while (v61 != v60);
LABEL_125:
      uint64_t v62 = v136;
      goto LABEL_126;
    }
    return v56;
  }
  LOWORD(v130) = 259;
  mlir::OpState::emitOpError((uint64_t *)this, (void ***)&v128, (uint64_t)&v131);
  uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if ((void)v131) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  }
  if (v140)
  {
    uint64_t v95 = __p;
    if (__p)
    {
      char v96 = v139;
      int64_t v97 = __p;
      if (v139 != __p)
      {
        do
          char v96 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v96 - 1);
        while (v96 != v95);
        int64_t v97 = __p;
      }
      unint64_t v139 = v95;
      operator delete(v97);
    }
    int v60 = v136;
    if (!v136) {
      goto LABEL_127;
    }
    int64_t v98 = v137;
    uint64_t v62 = v136;
    if (v137 == v136) {
      goto LABEL_126;
    }
    do
    {
      uint64_t v100 = *--v98;
      uint64_t v99 = v100;
      *int64_t v98 = 0;
      if (v100) {
        MEMORY[0x21667D390](v99, 0x1000C8077774924);
      }
    }
    while (v98 != v60);
    goto LABEL_125;
  }
  return v56;
}

uint64_t mlir::pdl::OperationOp::getOpName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(void *)a2 = this;
    *(void *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::pdl::OperationOp::getAttributeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::OperationOp::getTypeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 20) + *(_DWORD *)(v2 + 16));
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

BOOL mlir::pdl::OperationOp::hasTypeInference(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  if (!v8) {
    return 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v8);
  uint64_t v5 = v4;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  mlir::OperationName::OperationName(&v8, AttrData, v5, Context);
  return mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>((uint64_t)&v8);
}

BOOL mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(*(void *)a1 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[17];
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = &v4[2 * v2];
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  return v4 != v5 && *v4 == v3 && v4[1] != 0;
}

BOOL mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>(uint64_t *a1)
{
  unint64_t v1 = &unk_267771000;
  {
    int v21 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v13 = v12;
    a1 = v21;
    if (v13)
    {
      unint64_t v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v23 = 76;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v23;
      }
      unint64_t v16 = &v22[v15];
      unint64_t v17 = v23 - v15;
      if (v23 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v23 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v21;
    }
  }
  uint64_t v2 = *a1;
  if (*(_UNKNOWN **)(*a1 + 16) == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  unint64_t v3 = *(unsigned int *)(v2 + 40);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v1[17];
  uint64_t v5 = *(void **)(v2 + 32);
  unint64_t v6 = &v5[2 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    uint64_t v8 = &v5[2 * (v3 >> 1)];
    unint64_t v10 = *v8;
    unint64_t v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v3 = v7;
    }
  }
  while (v3);
  return v5 != v6 && *v5 == v4 && v5[1] != 0;
}

uint64_t mlir::pdl::PatternOp::verifyRegions(mlir::pdl::PatternOp *this)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((*(void *)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(*(void *)this + 40);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    uint64_t v5 = (ZinIrHalH13g **)(v4 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Block::getTerminator(v5);
  if (v6) {
    BOOL v7 = *(void *)(*(void *)(v6 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    LOWORD(v59) = 259;
    mlir::OpState::emitOpError((uint64_t *)this, (void ***)v58, (uint64_t)&v62);
    mlir::Diagnostic::attachNote();
  }
  *(void *)&long long v62 = this;
  uint64_t v8 = *(void *)(v3 + 8);
  unint64_t v9 = v3;
  if (v8 != v3)
  {
    do
    {
      uint64_t v10 = v8 - 8;
      if (!v8) {
        uint64_t v10 = 0;
      }
      int v11 = (ZinIrHalH13g *)(v10 + 32);
      int v12 = *(ZinIrHalH13g **)(v10 + 40);
      while (v12 != v11)
      {
        int v13 = (ZinIrHalH13g *)*((void *)v12 + 1);
        ZinIrHalH13g::~ZinIrHalH13g(v12);
        int v15 = mlir::detail::walk<mlir::ForwardIterator>(v14, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::pdl::PatternOp::verifyRegions(void)::$_0>, (uint64_t)&v62, 1);
        int v12 = v13;
        if (!v15) {
          return 0;
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v3);
    unint64_t v9 = *(void *)(v3 + 8);
  }
  if (v9) {
    unint64_t v16 = v9 - 8;
  }
  else {
    unint64_t v16 = 0;
  }
  unint64_t v17 = (ZinIrHalH13g *)(v16 + 32);
  uint64_t v18 = *(ZinIrHalH13g **)(v16 + 40);
  if (v18 != (ZinIrHalH13g *)(v16 + 32))
  {
    while (1)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v18);
      if (*(_UNKNOWN **)(*(void *)(v19 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
        break;
      }
      uint64_t v18 = (ZinIrHalH13g *)*((void *)v18 + 1);
      if (v18 == v17) {
        goto LABEL_34;
      }
    }
    if (v18 != v17)
    {
      unsigned int v57 = 0;
      int64x2_t v56 = 0uLL;
      uint64_t v21 = *(void *)(v3 + 8);
      if (v21) {
        uint64_t v22 = v21 - 8;
      }
      else {
        uint64_t v22 = 0;
      }
      unint64_t v23 = (ZinIrHalH13g *)(v22 + 32);
      uint64_t v24 = *(ZinIrHalH13g **)(v22 + 40);
      if (v24 == (ZinIrHalH13g *)(v22 + 32)) {
        goto LABEL_91;
      }
      char v25 = 1;
LABEL_51:
      ZinIrHalH13g::~ZinIrHalH13g(v24);
      long long v35 = *(int **)(*(void *)(v34 + 48) + 16);
      if (v35 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
        && v35 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
        && v35 != &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
        && v35 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id
        && v35 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
      {
        goto LABEL_50;
      }
      uint64_t v40 = v34;
      uint64_t v41 = *(unsigned int *)(v34 + 36);
      uint64_t v42 = v34 - 16;
      if (v41) {
        uint64_t v43 = v34 - 16;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v60 = v43;
      uint64_t v61 = v41;
      mlir::ResultRange::use_begin(&v60, (uint64_t *)v58);
      uint64_t v44 = *(unsigned int *)(v40 + 36);
      if (v44) {
        uint64_t v45 = v42;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v60 = v45;
      uint64_t v61 = v44;
      mlir::ResultRange::use_end(&v60, v65);
      uint64_t v46 = v59;
      uint64_t v64 = v59;
      long long v62 = v58[0];
      long long v63 = v58[1];
      uint64_t v47 = v65[4];
      while (1)
      {
        if (v46 == v47) {
          goto LABEL_50;
        }
        uint64_t v48 = *(void *)(v46 + 16);
        uint64_t v49 = *(mlir::Block **)(v48 + 16);
        if (v49)
        {
          unint64_t Parent = mlir::Block::getParent(v49);
          if (*(_UNKNOWN **)(*(void *)(v48 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id
            || Parent
            && *(_UNKNOWN **)(*(void *)(*(void *)(Parent + 16) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
          {
LABEL_79:
            if (v25)
            {
              visit(v40, &v56);
            }
            else
            {
              if (!v57) {
                goto LABEL_92;
              }
              unsigned int v51 = (v57 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              uint64_t v52 = *(void *)(v56.i64[0] + 8 * v51);
              if (v52 != v40)
              {
                int v53 = 1;
                while (v52 != -4096)
                {
                  char v25 = 0;
                  unsigned int v54 = v51 + v53++;
                  unsigned int v51 = v54 & (v57 - 1);
                  uint64_t v52 = *(void *)(v56.i64[0] + 8 * v51);
                  if (v52 == v40) {
                    goto LABEL_50;
                  }
                }
LABEL_92:
                *(void *)&v58[0] = "the operations must form a connected component";
                LOWORD(v59) = 259;
                mlir::OpState::emitOpError((uint64_t *)this, (void ***)v58, (uint64_t)&v62);
                mlir::Diagnostic::attachNote();
              }
            }
            char v25 = 0;
LABEL_50:
            uint64_t v24 = (ZinIrHalH13g *)*((void *)v24 + 1);
            if (v24 != v23) {
              goto LABEL_51;
            }
LABEL_91:
            llvm::deallocate_buffer((llvm *)v56.i64[0], (void *)(8 * v57));
          }
        }
        else if (*(_UNKNOWN **)(*(void *)(v48 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
        {
          goto LABEL_79;
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v58);
        uint64_t v46 = v59;
      }
    }
  }
LABEL_34:
  LOWORD(v59) = 259;
  mlir::OpState::emitOpError((uint64_t *)this, (void ***)v58, (uint64_t)&v62);
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v62);
  if ((void)v62) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
  }
  if (v70)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v69;
      unint64_t v28 = __p;
      if (v69 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        unint64_t v28 = __p;
      }
      uint64_t v69 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v66;
    if (v66)
    {
      unint64_t v30 = v67;
      char v31 = v66;
      if (v67 != v66)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        char v31 = v66;
      }
      uint64_t v67 = v29;
      operator delete(v31);
    }
    if (*((uint64_t **)&v63 + 1) != v65) {
      free(*((void **)&v63 + 1));
    }
  }
  return v20;
}

uint64_t *visit(uint64_t a1, int64x2_t *a2)
{
  uint64_t v33 = a1;
  uint64_t result = (uint64_t *)mlir::Block::getParentOp(*(mlir::Block **)(a1 + 16));
  if (*(_UNKNOWN **)(result[6] + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || *(_UNKNOWN **)(*(void *)(a1 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    return result;
  }
  uint64_t v5 = a2->i64[0];
  uint64_t v6 = a2[1].u32[0];
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a1) {
      goto LABEL_11;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 8 * v7);
      if (v9 == a1)
      {
        uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
        goto LABEL_11;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(v5 + 8 * v6);
LABEL_11:
  if (v8 != (uint64_t *)(v5 + 8 * v6)) {
    return result;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2, &v33, (uint64_t)v29);
  int v12 = *(int **)(*(void *)(v33 + 48) + 16);
  if (!v33 || v12 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
  {
    *(void *)&v34[0] = a2;
    if (v33 && v12 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
    {
      *(void *)&v29[0] = *(void *)(*(void *)(v33 + 72) + 24);
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
      visit(DefiningOp, a2);
    }
    else if (v33 && v12 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(v34, v33);
    }
    goto LABEL_27;
  }
  unint64_t v13 = *(unsigned int *)(v33 + 44);
  uint64_t v14 = v33 + 16 * ((v13 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v33 + 44))) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(unsigned int *)(v14 + 16);
  if ((v13 & 0x800000) != 0)
  {
    uint64_t v16 = *(void *)(v33 + 72);
    if (!v15) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!v15) {
      goto LABEL_27;
    }
  }
  unint64_t v17 = (uint64_t *)(v16 + 24);
  do
  {
    uint64_t v18 = *v17;
    v17 += 4;
    *(void *)&v29[0] = v18;
    uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)v29);
    visit(v19, a2);
    --v15;
  }
  while (v15);
LABEL_27:
  uint64_t v21 = v33;
  uint64_t v22 = *(unsigned int *)(v33 + 36);
  uint64_t v23 = v33 - 16;
  if (v22) {
    uint64_t v24 = v33 - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)&v29[0] = v24;
  *((void *)&v29[0] + 1) = v22;
  mlir::ResultRange::use_begin((uint64_t *)v29, (uint64_t *)v34);
  uint64_t v25 = *(unsigned int *)(v21 + 36);
  if (v25) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 0;
  }
  v36[0] = v26;
  v36[1] = v25;
  uint64_t result = mlir::ResultRange::use_end(v36, v31);
  uint64_t v27 = v35;
  uint64_t v30 = v35;
  v29[0] = v34[0];
  v29[1] = v34[1];
  for (i = v32; v35 != i; uint64_t v27 = v35)
  {
    visit(*(void *)(v27 + 16), a2);
    uint64_t result = mlir::ResultRange::UseIterator::operator++((uint64_t *)v34);
  }
  return result;
}

void mlir::Region::emplaceBlock(mlir::Region *this)
{
}

void mlir::pdl::PatternOp::getRewriter(mlir::pdl::PatternOp *this)
{
  uint64_t v1 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v1) {
    mlir::Block::getTerminator((ZinIrHalH13g **)(v1 - 8));
  }
  else {
    mlir::Block::getTerminator(0);
  }
}

uint64_t mlir::pdl::RangeOp::verify(mlir::pdl::RangeOp *this)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  v53[0] = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53);
  uint64_t v3 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = *(unsigned int *)(v3 + 68);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v53[0] = v4;
  v53[1] = v5;
  mlir::OperandRange::getTypes(v53, &v46);
  uint64_t v6 = v46;
  uint64_t v7 = v48;
  if (v46 == v48 && v47 == v49) {
    return 1;
  }
  uint64_t v8 = v46 + 32 * v47 + 24;
  uint64_t v9 = ~v47 + v49;
  while (1)
  {
    RangeElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf((void *)(*(void *)(*(void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8));
    if (RangeElementTypeOrSelf != (void *)Value) {
      break;
    }
    BOOL v12 = v9-- != 0;
    v8 += 32;
    if (v6 == v7 && !v12) {
      return 1;
    }
  }
  uint64_t v15 = (uint64_t)RangeElementTypeOrSelf;
  uint64_t v44 = (void **)"expected operand to have element type ";
  __int16 v45 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v44, (uint64_t)v53);
  if (v53[0])
  {
    uint64_t v16 = &v50;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, Value);
    unint64_t v17 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v41 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        unint64_t v17 = (char *)v54;
        uint64_t v16 = (int *)((char *)v54 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        uint64_t v16 = &v50;
        unint64_t v17 = (char *)v54;
      }
    }
    uint64_t v18 = &v17[24 * v55];
    long long v19 = *(_OWORD *)v16;
    *((void *)v18 + 2) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v55;
    if (v53[0])
    {
      int v50 = 3;
      unsigned int v51 = ", but got ";
      uint64_t v52 = 10;
      uint64_t v21 = &v50;
      uint64_t v22 = (char *)v54;
      if (v20 >= v56)
      {
        unint64_t v38 = v20 + 1;
        BOOL v39 = (char *)v54 + 24 * v20 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          int64_t v42 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v22 = (char *)v54;
          uint64_t v21 = (int *)((char *)v54 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v21 = &v50;
          uint64_t v22 = (char *)v54;
        }
      }
      uint64_t v23 = &v22[24 * v55];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v23 = v24;
      ++v55;
      if (v53[0])
      {
        uint64_t v25 = &v50;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v15);
        uint64_t v26 = (char *)v54;
        if (v55 >= v56)
        {
          unint64_t v40 = v55 + 1;
          if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
          {
            int64_t v43 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v26 = (char *)v54;
            uint64_t v25 = (int *)((char *)v54 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v25 = &v50;
            uint64_t v26 = (char *)v54;
          }
        }
        uint64_t v27 = &v26[24 * v55];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = *((void *)v25 + 2);
        *(_OWORD *)uint64_t v27 = v28;
        ++v55;
      }
    }
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    uint64_t v29 = __p;
    if (__p)
    {
      uint64_t v30 = v61;
      char v31 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        char v31 = __p;
      }
      uint64_t v61 = v29;
      operator delete(v31);
    }
    uint64_t v32 = v58;
    if (v58)
    {
      uint64_t v33 = v59;
      uint64_t v34 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
        uint64_t v34 = v58;
      }
      uint64_t v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v13;
}

uint64_t mlir::pdl::ReplaceOp::verify(mlir::pdl::ReplaceOp *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v2 = (unsigned int *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  unsigned int v3 = v2[1];
  if ((v1 & 0x800000) == 0)
  {
    uint64_t v4 = 0;
    if (v3) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v4 = *(void *)(*(void *)this + 72);
  if (!v3) {
    return 1;
  }
LABEL_5:
  if (!*(void *)(v4 + 32 * *v2 + 24) || !v2[2]) {
    return 1;
  }
  __int16 v22 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, &v21, (uint64_t)v26);
  if (v26[0])
  {
    int v23 = 3;
    long long v24 = "expected no replacement values to be provided when the replacement operation is present";
    uint64_t v25 = 87;
    uint64_t v5 = &v23;
    uint64_t v6 = (char *)v27;
    if (v28 >= v29)
    {
      unint64_t v19 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        int64_t v20 = (char *)&v23 - (unsigned char *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        uint64_t v6 = (char *)v27;
        uint64_t v5 = (int *)((char *)v27 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        uint64_t v5 = &v23;
        uint64_t v6 = (char *)v27;
      }
    }
    uint64_t v7 = &v6[24 * v28];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    ++v28;
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v35)
  {
    int v10 = __p;
    if (__p)
    {
      int v11 = v34;
      BOOL v12 = __p;
      if (v34 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        BOOL v12 = __p;
      }
      uint64_t v34 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v31;
    if (v31)
    {
      uint64_t v14 = v32;
      uint64_t v15 = v31;
      if (v32 != v31)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v31;
      }
      uint64_t v32 = v13;
      operator delete(v15);
    }
    if (v27 != v30) {
      free(v27);
    }
  }
  return v9;
}

uint64_t mlir::pdl::ReplaceOp::getReplOperation(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v2 = (unsigned int *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  unsigned int v3 = v2[1];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * *v2 + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * *v2 + 24);
    }
  }
  return 0;
}

uint64_t mlir::pdl::ReplaceOp::getReplValues(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (v2[1] + *v2);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::ResultsOp::verify(mlir::pdl::ResultsOp *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  v27[0] = *(void ***)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
  if (v27[0])
  {
    mlir::IntegerAttr::getValue((uint64_t)v27, (llvm::APInt *)&v32);
    if (v33 >= 0x41 && v32 != 0) {
      MEMORY[0x21667D390]();
    }
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)(*(void *)(v1 - 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  __int16 v28 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, v27, (uint64_t)&v32);
  if (v32)
  {
    int v29 = 3;
    uint64_t v31 = 77;
    uint64_t v6 = &v29;
    uint64_t v7 = (char *)v34;
    if (v35 >= v36)
    {
      unint64_t v23 = v35 + 1;
      if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
      {
        int64_t v25 = (char *)&v29 - (unsigned char *)v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        uint64_t v7 = (char *)v34;
        uint64_t v6 = (int *)((char *)v34 + v25);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        uint64_t v6 = &v29;
        uint64_t v7 = (char *)v34;
      }
    }
    long long v8 = &v7[24 * v35];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)long long v8 = v9;
    ++v35;
    if (v32)
    {
      unint64_t v10 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      int v11 = &v29;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v29, v10);
      BOOL v12 = (char *)v34;
      if (v35 >= v36)
      {
        unint64_t v24 = v35 + 1;
        if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
        {
          int64_t v26 = (char *)&v29 - (unsigned char *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          BOOL v12 = (char *)v34;
          int v11 = (int *)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v11 = &v29;
          BOOL v12 = (char *)v34;
        }
      }
      uint64_t v13 = &v12[24 * v35];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v35;
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v32);
  if (v32) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
  }
  if (v42)
  {
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v41;
      uint64_t v17 = __p;
      if (v41 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      int64_t v41 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = v39;
      int64_t v20 = v38;
      if (v39 != v38)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        int64_t v20 = v38;
      }
      BOOL v39 = v18;
      operator delete(v20);
    }
    if (v34 != v37) {
      free(v34);
    }
  }
  return v3;
}

uint64_t mlir::pdl::ResultsOp::getIndex(mlir::pdl::ResultsOp *this)
{
  uint64_t v7 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (!v7) {
    return 0;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v7, (llvm::APInt *)&v5);
  if (v6 >= 0x41) {
    uint64_t v1 = v5;
  }
  else {
    uint64_t v1 = (unsigned int **)&v5;
  }
  uint64_t v2 = *(unsigned int *)v1;
  if (v6 >= 0x41 && v5 != 0) {
    MEMORY[0x21667D390]();
  }
  return v2 | 0x100000000;
}

uint64_t mlir::pdl::RewriteOp::verifyRegions(mlir::pdl::RewriteOp *this)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (v3 >> 23) & 1;
    uint64_t v5 = (void *)(((v2 + 16 * v4 + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    uint64_t v6 = v2 + 16 * v4;
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v7 = v6 + 64;
    v57[0] = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v22 = v2 + 16 * ((v3 >> 23) & 1);
    uint64_t v23 = *(void *)(v22 + 64);
    uint64_t v7 = v22 + 64;
    v57[0] = v23;
    if (v23)
    {
LABEL_3:
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v57);
      if ((void *)*v5 != v5)
      {
        __int16 v53 = 257;
        mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v57);
        if (v57[0])
        {
          int v54 = 3;
          unsigned int v55 = "expected rewrite region to be empty when rewrite is external";
          uint64_t v56 = 60;
          long long v9 = &v54;
          unint64_t v10 = (char *)v58;
          if (v59 >= v60)
          {
            unint64_t v46 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              int64_t v49 = (char *)&v54 - (unsigned char *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              unint64_t v10 = (char *)v58;
              long long v9 = (int *)((char *)v58 + v49);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              long long v9 = &v54;
              unint64_t v10 = (char *)v58;
            }
          }
          int v11 = &v10[24 * v59];
          long long v12 = *(_OWORD *)v9;
          *((void *)v11 + 2) = *((void *)v9 + 2);
          *(_OWORD *)int v11 = v12;
          ++v59;
        }
        uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
        if (v57[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
        }
        if (v66)
        {
          long long v14 = __p;
          if (__p)
          {
            uint64_t v15 = v65;
            uint64_t v16 = __p;
            if (v65 != __p)
            {
              do
                uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              uint64_t v16 = __p;
            }
            unint64_t v65 = v14;
            operator delete(v16);
          }
          uint64_t v17 = v62;
          if (!v62) {
            goto LABEL_64;
          }
          uint64_t v18 = v63;
          unint64_t v19 = v62;
          if (v63 == v62)
          {
LABEL_63:
            uint64_t v63 = v17;
            operator delete(v19);
LABEL_64:
            if (v58 != v61) {
              free(v58);
            }
            return v13;
          }
          do
          {
            uint64_t v21 = *--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              MEMORY[0x21667D390](v20, 0x1000C8077774924);
            }
          }
          while (v18 != v17);
LABEL_62:
          unint64_t v19 = v62;
          goto LABEL_63;
        }
        return v13;
      }
      return 1;
    }
  }
  if ((void *)*v5 == v5)
  {
    __int16 v53 = 257;
    mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v57);
    if (v57[0])
    {
      int v54 = 3;
      unsigned int v55 = "expected rewrite region to be non-empty if external name is not specified";
      uint64_t v56 = 73;
      unsigned int v35 = &v54;
      unsigned int v36 = (char *)v58;
      if (v59 >= v60)
      {
        unint64_t v48 = v59 + 1;
        if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
        {
          int64_t v51 = (char *)&v54 - (unsigned char *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          unsigned int v36 = (char *)v58;
          unsigned int v35 = (int *)((char *)v58 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          unsigned int v35 = &v54;
          unsigned int v36 = (char *)v58;
        }
      }
      unint64_t v37 = &v36[24 * v59];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = *((void *)v35 + 2);
      *(_OWORD *)unint64_t v37 = v38;
      ++v59;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    }
    if (v66)
    {
      BOOL v39 = __p;
      if (__p)
      {
        unint64_t v40 = v65;
        int64_t v41 = __p;
        if (v65 != __p)
        {
          do
            unint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          int64_t v41 = __p;
        }
        unint64_t v65 = v39;
        operator delete(v41);
      }
      uint64_t v17 = v62;
      if (!v62) {
        goto LABEL_64;
      }
      char v42 = v63;
      unint64_t v19 = v62;
      if (v63 == v62) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v44 = *--v42;
        uint64_t v43 = v44;
        void *v42 = 0;
        if (v44) {
          MEMORY[0x21667D390](v43, 0x1000C8077774924);
        }
      }
      while (v42 != v17);
      goto LABEL_62;
    }
    return v13;
  }
  if (BYTE3(v3)) {
    uint64_t v24 = v7;
  }
  else {
    uint64_t v24 = 0;
  }
  if (!*(_DWORD *)(v24 + 12)) {
    return 1;
  }
  __int16 v53 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v57);
  if (v57[0])
  {
    int v54 = 3;
    unsigned int v55 = "expected no external arguments when the rewrite is specified inline";
    uint64_t v56 = 67;
    int64_t v25 = &v54;
    int64_t v26 = (char *)v58;
    if (v59 >= v60)
    {
      unint64_t v47 = v59 + 1;
      if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
      {
        int64_t v50 = (char *)&v54 - (unsigned char *)v58;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        int64_t v26 = (char *)v58;
        int64_t v25 = (int *)((char *)v58 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        int64_t v25 = &v54;
        int64_t v26 = (char *)v58;
      }
    }
    uint64_t v27 = &v26[24 * v59];
    long long v28 = *(_OWORD *)v25;
    *((void *)v27 + 2) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v27 = v28;
    ++v59;
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  }
  if (v66)
  {
    int v29 = __p;
    if (__p)
    {
      uint64_t v30 = v65;
      uint64_t v31 = __p;
      if (v65 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        uint64_t v31 = __p;
      }
      unint64_t v65 = v29;
      operator delete(v31);
    }
    uint64_t v17 = v62;
    if (!v62) {
      goto LABEL_64;
    }
    uint64_t v32 = v63;
    unint64_t v19 = v62;
    if (v63 == v62) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v34 = *--v32;
      uint64_t v33 = v34;
      *uint64_t v32 = 0;
      if (v34) {
        MEMORY[0x21667D390](v33, 0x1000C8077774924);
      }
    }
    while (v32 != v17);
    goto LABEL_62;
  }
  return v13;
}

uint64_t mlir::pdl::RewriteOp::getExternalArgs(mlir::pdl::RewriteOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      long long v28 = &v76;
      int v29 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v69 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          int v29 = (char *)v80;
          long long v28 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          long long v28 = &v76;
          int v29 = (char *)v80;
        }
      }
      uint64_t v30 = &v29[24 * v81];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v32 = __p;
    if (__p)
    {
      uint64_t v33 = v87;
      uint64_t v34 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        uint64_t v34 = __p;
      }
      unint64_t v87 = v32;
      operator delete(v34);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    unsigned int v35 = v85;
    int64_t v25 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      uint64_t v37 = *--v35;
      uint64_t v36 = v37;
      void *v35 = 0;
      if (v37) {
        MEMORY[0x21667D390](v36, 0x1000C8077774924);
      }
    }
    while (v35 != v23);
    goto LABEL_78;
  }
  uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v75, "isNegated", 9uLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!mlir::BoolAttr::classof(v8))
    {
      a3(v79, a4);
      if (v79[0])
      {
        int v76 = 3;
        uint64_t v78 = 54;
        long long v38 = &v76;
        BOOL v39 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v64 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v70 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            BOOL v39 = (char *)v80;
            long long v38 = (int *)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            long long v38 = &v76;
            BOOL v39 = (char *)v80;
          }
        }
        unint64_t v40 = &v39[24 * v81];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)unint64_t v40 = v41;
        ++v81;
        if (v79[0])
        {
          char v42 = &v76;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
          uint64_t v43 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v67 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              int64_t v73 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              uint64_t v43 = (char *)v80;
              char v42 = (int *)((char *)v80 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              char v42 = &v76;
              uint64_t v43 = (char *)v80;
            }
          }
          uint64_t v44 = &v43[24 * v81];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = *((void *)v42 + 2);
          *(_OWORD *)uint64_t v44 = v45;
          ++v81;
          if (v79[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
          }
        }
      }
      if (!v88) {
        return 0;
      }
      unint64_t v46 = __p;
      if (__p)
      {
        unint64_t v47 = v87;
        unint64_t v48 = __p;
        if (v87 != __p)
        {
          do
            unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          unint64_t v48 = __p;
        }
        unint64_t v87 = v46;
        operator delete(v48);
      }
      uint64_t v23 = v84;
      if (!v84) {
        goto LABEL_80;
      }
      int64_t v49 = v85;
      int64_t v25 = v84;
      if (v85 == v84) {
        goto LABEL_79;
      }
      do
      {
        uint64_t v51 = *--v49;
        uint64_t v50 = v51;
        *int64_t v49 = 0;
        if (v51) {
          MEMORY[0x21667D390](v50, 0x1000C8077774924);
        }
      }
      while (v49 != v23);
      goto LABEL_78;
    }
    *a1 = v9;
  }
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v75, "name", 4uLL);
  if (!v10)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v77 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v78 = 64;
      uint64_t v52 = &v76;
      __int16 v53 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v66 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v72 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          __int16 v53 = (char *)v80;
          uint64_t v52 = (int *)((char *)v80 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          uint64_t v52 = &v76;
          __int16 v53 = (char *)v80;
        }
      }
      int v54 = &v53[24 * v81];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)int v54 = v55;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v56 = __p;
    if (__p)
    {
      unsigned int v57 = v87;
      unint64_t v58 = __p;
      if (v87 != __p)
      {
        do
          unsigned int v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      unint64_t v87 = v56;
      operator delete(v58);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    unsigned int v59 = v85;
    int64_t v25 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *unsigned int v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v23);
    goto LABEL_78;
  }
  uint64_t v11 = v10;
  if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v10;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    int v76 = 3;
    uint64_t v78 = 49;
    long long v12 = &v76;
    uint64_t v13 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v65 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        int64_t v71 = (char *)&v76 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        uint64_t v13 = (char *)v80;
        long long v12 = (int *)((char *)v80 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        long long v12 = &v76;
        uint64_t v13 = (char *)v80;
      }
    }
    long long v14 = &v13[24 * v81];
    long long v15 = *(_OWORD *)v12;
    *((void *)v14 + 2) = *((void *)v12 + 2);
    *(_OWORD *)long long v14 = v15;
    ++v81;
    if (v79[0])
    {
      uint64_t v16 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v11);
      uint64_t v17 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v74 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v17 = (char *)v80;
          uint64_t v16 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v16 = &v76;
          uint64_t v17 = (char *)v80;
        }
      }
      uint64_t v18 = &v17[24 * v81];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
  }
  if (v88)
  {
    uint64_t v20 = __p;
    if (__p)
    {
      uint64_t v21 = v87;
      uint64_t v22 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      unint64_t v87 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    uint64_t v24 = v85;
    int64_t v25 = v84;
    if (v85 == v84)
    {
LABEL_79:
      uint64_t v85 = v23;
      operator delete(v25);
LABEL_80:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      uint64_t v27 = *--v24;
      uint64_t v26 = v27;
      void *v24 = 0;
      if (v27) {
        MEMORY[0x21667D390](v26, 0x1000C8077774924);
      }
    }
    while (v24 != v23);
LABEL_78:
    int64_t v25 = v84;
    goto LABEL_79;
  }
  return 0;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v18 = a1;
  long long v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"isNegated", 9, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    uint64_t *v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      uint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"name", 4, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  uint64_t v17 = (uint64_t *)((char *)v19 + 16 * v16);
  uint64_t *v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  uint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  uint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  unsigned int v8 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (void **)"isNegated", (const char *)9, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v9, (void **)"name", (const char *)4, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getName(mlir::pdl::ApplyNativeConstraintOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v3);
}

BOOL mlir::pdl::ApplyNativeConstraintOp::getIsNegated(mlir::pdl::ApplyNativeConstraintOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v2);
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl(mlir::pdl::ApplyNativeConstraintOp *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    uint64_t v5 = *(void **)v3;
    v22[0] = v2;
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v4, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    v22[0] = *(void *)this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (void **)"isNegated", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    uint64_t v6 = *(void *)this;
    }
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *(unsigned int *)(v6 + 68);
      if (v7)
      {
        uint64_t v8 = 0;
        for (uint64_t i = *(void *)(v6 + 72) + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v8);
              i += 32)
        {
          if (v7 == ++v8) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t v20 = (void **)"requires attribute 'name'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v11 = __p;
      if (__p)
      {
        long long v12 = v28;
        uint64_t v13 = __p;
        if (v28 != __p)
        {
          do
            long long v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        long long v28 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v25;
      if (v25)
      {
        uint64_t v15 = v26;
        unsigned int v16 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v18 = *--v15;
            uint64_t v17 = v18;
            *uint64_t v15 = 0;
            if (v18) {
              MEMORY[0x21667D390](v17, 0x1000C8077774924);
            }
          }
          while (v15 != v14);
          unsigned int v16 = v25;
        }
        uint64_t v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (mlir::pdl::PDLType::classof(a2)) {
    return 1;
  }
  __int16 v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    uint64_t v51 = " #";
    uint64_t v52 = 2;
    uint64_t v11 = &v50;
    long long v12 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v44 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        long long v12 = (char *)v54;
        uint64_t v11 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v11 = &v50;
        long long v12 = (char *)v54;
      }
    }
    uint64_t v13 = &v12[24 * v55];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      uint64_t v51 = (const char *)a5;
      unsigned int v16 = &v50;
      uint64_t v17 = (char *)v54;
      if (v15 >= v56)
      {
        unint64_t v39 = v15 + 1;
        BOOL v40 = (char *)v54 + 24 * v15 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          int64_t v45 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v17 = (char *)v54;
          unsigned int v16 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          unsigned int v16 = &v50;
          uint64_t v17 = (char *)v54;
        }
      }
      uint64_t v18 = &v17[24 * v55];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        uint64_t v51 = " must be variadic of pdl type, but got ";
        uint64_t v52 = 39;
        __int16 v21 = &v50;
        uint64_t v22 = (char *)v54;
        if (v20 >= v56)
        {
          unint64_t v41 = v20 + 1;
          BOOL v42 = (char *)v54 + 24 * v20 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            int64_t v46 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            uint64_t v22 = (char *)v54;
            __int16 v21 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            __int16 v21 = &v50;
            uint64_t v22 = (char *)v54;
          }
        }
        uint64_t v23 = &v22[24 * v55];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v55;
        if (v53[0])
        {
          int64_t v25 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          uint64_t v26 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v47 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              uint64_t v26 = (char *)v54;
              int64_t v25 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              int64_t v25 = &v50;
              uint64_t v26 = (char *)v54;
            }
          }
          uint64_t v27 = &v26[24 * v55];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v55;
        }
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    char v29 = __p;
    if (__p)
    {
      uint64_t v30 = v61;
      long long v31 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        long long v31 = __p;
      }
      uint64_t v61 = v29;
      operator delete(v31);
    }
    uint64_t v32 = v58;
    if (v58)
    {
      uint64_t v33 = v59;
      uint64_t v34 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
        uint64_t v34 = v58;
      }
      unsigned int v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v10;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::parse(uint64_t a1, uint64_t a2)
{
  v18[16] = *MEMORY[0x263EF8340];
  v17[0] = v18;
  v17[1] = (void *)0x400000000;
  uint64_t v14 = 0;
  v15[0] = &v16;
  v15[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v14, v6)) {
    goto LABEL_12;
  }
  if (v14)
  {
    uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v7 + 8) = v14;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && (uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v17, 0, 1, 0xFFFFFFFFLL))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v15)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)&& (uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))&& (v9 = *(void *)(a2 + 8), v12[0] = a1, v12[1] = &v13, v12[2] = a2, mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(v9, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v12)))
  {
    BOOL v10 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v17, (uint64_t)v15, v8, a2 + 16) != 0;
  }
  else
  {
LABEL_12:
    BOOL v10 = 0;
  }
  if (v15[0] != &v16) {
    free(v15[0]);
  }
  if (v17[0] != v18) {
    free(v17[0]);
  }
  return v10;
}

void mlir::pdl::ApplyNativeConstraintOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  unint64_t v6 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v6 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v6 + 8));
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if (*((unsigned char **)v7 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, "(", 1uLL);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned char *v8 = 40;
    ++*((void *)v7 + 4);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_8:
      uint64_t v10 = *((unsigned int *)v9 + 17);
      uint64_t v11 = *((void *)v9 + 9);
      goto LABEL_9;
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_9:
  long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = ", ";
  uint64_t v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v11, 0, v11, v10, (uint64_t)a2, v12, (uint64_t)&v33);
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    unsigned char *v16 = 58;
    ++*((void *)v15 + 4);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  long long v19 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v20 = *((unsigned int *)v19 + 17);
    uint64_t v21 = *((void *)v19 + 9);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  v31[0] = v21;
  v31[1] = v20;
  mlir::OperandRange::getTypes(v31, (uint64_t *)&v33);
  v32[0] = (mlir::BoolAttr *)", ";
  v32[1] = (mlir::BoolAttr *)2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v33, v34, (uint64_t)v35, v36, (uint64_t)a2, (uint64_t)a2, (uint64_t)v32);
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ")", 1uLL);
  }
  else
  {
    *uint64_t v23 = 41;
    ++*((void *)v22 + 4);
  }
  uint64_t v33 = &v35;
  uint64_t v35 = "name";
  uint64_t v36 = 4;
  uint64_t v34 = 0x200000001;
  v32[0] = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v24 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v24 && v24 == mlir::Builder::getBoolAttr(v32, 0))
  {
    unsigned int v27 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, &v35, v34 + 1, 16);
      unsigned int v27 = v34;
    }
    long long v28 = (char *)v33 + 16 * v27;
    *long long v28 = "isNegated";
    v28[1] = 9;
    LODWORD(v34) = v34 + 1;
    int64_t v25 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_28;
    }
  }
  else
  {
    int64_t v25 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_28:
      uint64_t v26 = (mlir::Operation *)((char *)v25 + 56);
      goto LABEL_33;
    }
  }
  v32[0] = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v25);
  uint64_t v26 = (mlir::ArrayAttr *)v32;
LABEL_33:
  uint64_t Value = mlir::ArrayAttr::getValue(v26);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v30, v33, v34);
  if (v33 != &v35) {
    free(v33);
  }
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::getResults(mlir::pdl::ApplyNativeRewriteOp *this)
{
  if (*(_DWORD *)(*(void *)this + 36)) {
    return *(void *)this - 16;
  }
  else {
    return 0;
  }
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      unsigned int v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unsigned int v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          unsigned int v27 = (char *)v60;
        }
      }
      long long v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      long long v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "name", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v58 = 64;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    BOOL v40 = __p;
    if (__p)
    {
      unint64_t v41 = v67;
      BOOL v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 49;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    long long v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)long long v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      long long v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          long long v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      unint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl(mlir::pdl::ApplyNativeRewriteOp *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))return 0; {
    uint64_t v4 = *(void *)this;
    }
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 68);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(v4 + 72) + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            uint64_t v4 = *(void *)this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    uint64_t v9 = v4 - 16;
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v8)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
        if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, v11))break; {
        if (v8 == ++v11)
        }
          return 1;
      }
      return 0;
    }
    return 1;
  }
  else
  {
    uint64_t v23 = (void **)"requires attribute 'name'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        long long v31 = v14;
        operator delete(v16);
      }
      long long v17 = v28;
      if (v28)
      {
        uint64_t v18 = v29;
        long long v19 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v21 = *--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              MEMORY[0x21667D390](v20, 0x1000C8077774924);
            }
          }
          while (v18 != v17);
          long long v19 = v28;
        }
        long long v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

BOOL mlir::pdl::ApplyNativeRewriteOp::parse(uint64_t a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x263EF8340];
  v26[0] = v27;
  v26[1] = (void *)0x400000000;
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  uint64_t v20 = 0;
  __src = &v23;
  uint64_t v22 = 0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v20, v6)) {
    goto LABEL_22;
  }
  if (v20)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v20;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v26, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v24)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1)
    && !mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)
    || (uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    || (uint64_t v9 = *(void *)(a2 + 8),
        v18[0] = a1,
        v18[1] = &v19,
        uint64_t v18[2] = a2,
        (uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96))) != 0)
    && !mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))
  {
LABEL_22:
    BOOL v15 = 0;
    uint64_t v16 = __src;
    if (__src == &v23) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v11 = __src;
  uint64_t v12 = v22;
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  unint64_t v14 = v13 + v22;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if (v12)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  BOOL v15 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v26, (uint64_t)v24, v8, a2 + 16) != 0;
  uint64_t v16 = __src;
  if (__src != &v23) {
LABEL_23:
  }
    free(v16);
LABEL_24:
  if (v24[0] != &v25) {
    free(v24[0]);
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
  return v15;
}

void mlir::pdl::ApplyNativeRewriteOp::print(mlir::pdl::ApplyNativeRewriteOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0 || !*(_DWORD *)(*(void *)this + 68)) {
    goto LABEL_24;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
    uint64_t v8 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  unsigned char *v7 = 40;
  ++*((void *)v6 + 4);
  uint64_t v8 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v9 = *(unsigned int *)(v8 + 68);
  uint64_t v10 = *(void *)(v8 + 72);
LABEL_9:
  uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v39 = ", ";
  uint64_t v40 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10, 0, v10, v9, (uint64_t)a2, v11, (uint64_t)&v39);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 32;
  }
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *BOOL v15 = 58;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    uint64_t v19 = *(unsigned int *)(v18 + 68);
    uint64_t v20 = *(void *)(v18 + 72);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  unint64_t AttrDictionary = ", ";
  uint64_t v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
  if (*((unsigned char **)v21 + 3) == v22)
  {
    llvm::raw_ostream::write(v21, ")", 1uLL);
    uint64_t v23 = *(unsigned char **)this;
    if (!*(_DWORD *)(*(void *)this + 36)) {
      goto LABEL_37;
    }
    goto LABEL_25;
  }
  *uint64_t v22 = 41;
  ++*((void *)v21 + 4);
LABEL_24:
  uint64_t v23 = *(unsigned char **)this;
  if (!*(_DWORD *)(*(void *)this + 36)) {
    goto LABEL_37;
  }
LABEL_25:
  __int16 v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *uint64_t v25 = 32;
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if (*((unsigned char **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    *uint64_t v27 = 58;
    ++*((void *)v26 + 4);
  }
  long long v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v29 = (unsigned char *)*((void *)v28 + 4);
  if ((unint64_t)v29 >= *((void *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((void *)v28 + 4) = v29 + 1;
    unsigned char *v29 = 32;
  }
  uint64_t v30 = *(unsigned int *)(*(void *)this + 36);
  uint64_t v31 = *(void *)this - 16;
  if (!v30) {
    uint64_t v31 = 0;
  }
  uint64_t v35 = v31;
  uint64_t v36 = v30;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  unint64_t AttrDictionary = ", ";
  uint64_t v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  uint64_t v23 = *(unsigned char **)this;
LABEL_37:
  long long v39 = &v41;
  unint64_t v41 = "name";
  uint64_t v42 = 4;
  uint64_t v40 = 0x200000001;
  if (v23[47])
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v23);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v23 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v34, v39, v40);
  if (v39 != &v41) {
    free(v39);
  }
}

uint64_t mlir::pdl::AttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v22 = v4;
  if (v4)
  {
    uint64_t v6 = mlir::DictionaryAttr::get((uint64_t)&v22, "value", 5uLL);
    if (v6) {
      *a1 = v6;
    }
    return 1;
  }
  else
  {
    a3(v26, a4);
    if (v26[0])
    {
      int v23 = 3;
      __int16 v24 = "expected DictionaryAttr to set properties";
      uint64_t v25 = 41;
      uint64_t v8 = &v23;
      uint64_t v9 = (char *)v27;
      if (v28 >= v29)
      {
        unint64_t v20 = v28 + 1;
        if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
        {
          int64_t v21 = (char *)&v23 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          uint64_t v9 = (char *)v27;
          uint64_t v8 = (int *)((char *)v27 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          uint64_t v8 = &v23;
          uint64_t v9 = (char *)v27;
        }
      }
      uint64_t v10 = &v9[24 * v28];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      ++v28;
      if (v26[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      }
    }
    if (v35)
    {
      uint64_t v12 = __p;
      if (__p)
      {
        uint64_t v13 = v34;
        unint64_t v14 = __p;
        if (v34 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          unint64_t v14 = __p;
        }
        uint64_t v34 = v12;
        operator delete(v14);
      }
      BOOL v15 = v31;
      if (v31)
      {
        uint64_t v16 = v32;
        long long v17 = v31;
        if (v32 != v31)
        {
          do
          {
            uint64_t v19 = *--v16;
            uint64_t v18 = v19;
            void *v16 = 0;
            if (v19) {
              MEMORY[0x21667D390](v18, 0x1000C8077774924);
            }
          }
          while (v16 != v15);
          long long v17 = v31;
        }
        char v32 = v15;
        operator delete(v17);
      }
      if (v27 != v30) {
        free(v27);
      }
    }
    return 0;
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::pdl::AttributeOp::verifyInvariantsImpl(mlir::pdl::AttributeOp *this)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) == 0) {
    goto LABEL_27;
  }
  uint64_t v3 = (const char *)*(unsigned int *)(v2 + 68);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
      uint64_t v2 = *(void *)this;
      }
    }
LABEL_27:
    if (*(_DWORD *)(v2 + 36)) {
      uint64_t v27 = v2 - 16;
    }
    else {
      uint64_t v27 = 0;
    }
    unint64_t v28 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v28 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id) {
      return 1;
    }
    uint64_t v29 = *(void *)this;
    __int16 v77 = 261;
    v76[0] = (void **)"result";
    v76[1] = (void **)6;
    mlir::Operation::emitOpError(v29, v76, (uint64_t)v81);
    if (v81[0])
    {
      int v78 = 3;
      uint64_t v79 = " #";
      uint64_t v80 = 2;
      uint64_t v30 = &v78;
      uint64_t v31 = (char *)v82;
      if (v83 >= v84)
      {
        unint64_t v61 = v83 + 1;
        if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
        {
          int64_t v71 = (char *)&v78 - (unsigned char *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          uint64_t v31 = (char *)v82;
          uint64_t v30 = (int *)((char *)v82 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          uint64_t v30 = &v78;
          uint64_t v31 = (char *)v82;
        }
      }
      char v32 = &v31[24 * v83];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = *((void *)v30 + 2);
      *(_OWORD *)char v32 = v33;
      uint64_t v34 = ++v83;
      if (v81[0])
      {
        int v78 = 5;
        uint64_t v79 = 0;
        char v35 = &v78;
        uint64_t v36 = (char *)v82;
        if (v34 >= v84)
        {
          unint64_t v64 = v34 + 1;
          BOOL v65 = (char *)v82 + 24 * v34 > (char *)&v78;
          if (v82 <= &v78 && v65)
          {
            int64_t v73 = (char *)&v78 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            uint64_t v36 = (char *)v82;
            char v35 = (int *)((char *)v82 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            char v35 = &v78;
            uint64_t v36 = (char *)v82;
          }
        }
        uint64_t v37 = &v36[24 * v83];
        long long v38 = *(_OWORD *)v35;
        *((void *)v37 + 2) = *((void *)v35 + 2);
        *(_OWORD *)uint64_t v37 = v38;
        uint64_t v39 = ++v83;
        if (v81[0])
        {
          int v78 = 3;
          uint64_t v80 = 53;
          uint64_t v40 = &v78;
          unint64_t v41 = (char *)v82;
          if (v39 >= v84)
          {
            unint64_t v66 = v39 + 1;
            BOOL v67 = (char *)v82 + 24 * v39 > (char *)&v78;
            if (v82 <= &v78 && v67)
            {
              int64_t v74 = (char *)&v78 - (unsigned char *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              unint64_t v41 = (char *)v82;
              uint64_t v40 = (int *)((char *)v82 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              uint64_t v40 = &v78;
              unint64_t v41 = (char *)v82;
            }
          }
          uint64_t v42 = &v41[24 * v83];
          long long v43 = *(_OWORD *)v40;
          *((void *)v42 + 2) = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v42 = v43;
          ++v83;
          if (v81[0])
          {
            uint64_t v44 = &v78;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v78, v28);
            uint64_t v45 = (char *)v82;
            if (v83 >= v84)
            {
              unint64_t v68 = v83 + 1;
              if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
              {
                int64_t v75 = (char *)&v78 - (unsigned char *)v82;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                uint64_t v45 = (char *)v82;
                uint64_t v44 = (int *)((char *)v82 + v75);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                uint64_t v44 = &v78;
                uint64_t v45 = (char *)v82;
              }
            }
            int64_t v46 = &v45[24 * v83];
            long long v47 = *(_OWORD *)v44;
            *((void *)v46 + 2) = *((void *)v44 + 2);
            *(_OWORD *)int64_t v46 = v47;
            ++v83;
          }
        }
      }
    }
    char v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
    if (v81[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
    }
    if (v90)
    {
      unint64_t v49 = __p;
      if (__p)
      {
        unint64_t v50 = v89;
        int64_t v51 = __p;
        if (v89 != __p)
        {
          do
            unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          int64_t v51 = __p;
        }
        uint64_t v89 = v49;
        operator delete(v51);
      }
      int64_t v52 = v86;
      if (v86)
      {
        int64_t v53 = v87;
        int64_t v54 = v86;
        if (v87 != v86)
        {
          do
          {
            uint64_t v56 = *--v53;
            uint64_t v55 = v56;
            *int64_t v53 = 0;
            if (v56) {
              MEMORY[0x21667D390](v55, 0x1000C8077774924);
            }
          }
          while (v53 != v52);
          int64_t v54 = v86;
        }
        unint64_t v87 = v52;
        operator delete(v54);
      }
      if (v82 != v85) {
        free(v82);
      }
    }
    return v48 != 0;
  }
  v76[0] = (void **)"operand group starting at #";
  __int16 v77 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v76, (uint64_t)v81);
  if (v81[0])
  {
    int v78 = 5;
    uint64_t v79 = 0;
    uint64_t v4 = &v78;
    uint64_t v5 = (char *)v82;
    if (v83 >= v84)
    {
      unint64_t v58 = v83 + 1;
      if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
      {
        int64_t v69 = (char *)&v78 - (unsigned char *)v82;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        uint64_t v5 = (char *)v82;
        uint64_t v4 = (int *)((char *)v82 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        uint64_t v4 = &v78;
        uint64_t v5 = (char *)v82;
      }
    }
    uint64_t v6 = &v5[24 * v83];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v8 = ++v83;
    if (v81[0])
    {
      int v78 = 3;
      uint64_t v79 = " requires 0 or 1 element, but found ";
      uint64_t v80 = 36;
      uint64_t v9 = &v78;
      uint64_t v10 = (char *)v82;
      if (v8 >= v84)
      {
        unint64_t v59 = v8 + 1;
        BOOL v60 = (char *)v82 + 24 * v8 > (char *)&v78;
        if (v82 <= &v78 && v60)
        {
          int64_t v70 = (char *)&v78 - (unsigned char *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          uint64_t v10 = (char *)v82;
          uint64_t v9 = (int *)((char *)v82 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          uint64_t v9 = &v78;
          uint64_t v10 = (char *)v82;
        }
      }
      long long v11 = &v10[24 * v83];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)long long v11 = v12;
      uint64_t v13 = ++v83;
      if (v81[0])
      {
        int v78 = 5;
        uint64_t v79 = v3;
        unint64_t v14 = &v78;
        BOOL v15 = (char *)v82;
        if (v13 >= v84)
        {
          unint64_t v62 = v13 + 1;
          BOOL v63 = (char *)v82 + 24 * v13 > (char *)&v78;
          if (v82 <= &v78 && v63)
          {
            int64_t v72 = (char *)&v78 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            BOOL v15 = (char *)v82;
            unint64_t v14 = (int *)((char *)v82 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            unint64_t v14 = &v78;
            BOOL v15 = (char *)v82;
          }
        }
        uint64_t v16 = &v15[24 * v83];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v83;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
  if (v81[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
  }
  if (v90)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      unint64_t v20 = v89;
      int64_t v21 = __p;
      if (v89 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      uint64_t v89 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v86;
    if (v86)
    {
      int v23 = v87;
      __int16 v24 = v86;
      if (v87 != v86)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *int v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        __int16 v24 = v86;
      }
      unint64_t v87 = v22;
      operator delete(v24);
    }
    if (v82 != v85) {
      free(v82);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 48;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          int v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)int v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v58;
      unint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        unint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      uint64_t v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

uint64_t mlir::pdl::AttributeOp::parse(uint64_t a1, uint64_t a2)
{
  v29[16] = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v25, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 680))(a1, v25, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_19;
      }
      uint64_t v5 = v25;
      uint64_t v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        unint64_t v23 = v28 + 1;
        if (v27 <= v25 && (char *)v27 + 32 * v28 > (char *)v25)
        {
          int64_t v24 = (char *)v25 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          uint64_t v6 = (char *)v27;
          uint64_t v5 = (char *)v27 + v24;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          uint64_t v5 = v25;
          uint64_t v6 = (char *)v27;
        }
      }
      long long v7 = &v6[32 * v28];
      long long v8 = v5[1];
      *(_OWORD *)long long v7 = *v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 144))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 408))(a1, &v26, 0)) {
      goto LABEL_19;
    }
    if (v26)
    {
      uint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(a2);
      void *v9 = v26;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, a2 + 112))
  {
    mlir::NamedAttrList::get(a2 + 112, **(void **)(*(void *)(a2 + 8) + 96));
    long long v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
    uint64_t v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    unint64_t v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    uint64_t v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v16 = *(unsigned int *)(a2 + 72);
    if (v16 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v16) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!v28)
    {
LABEL_17:
      uint64_t v20 = 1;
      int64_t v21 = v27;
      if (v27 == v29) {
        return v20;
      }
      goto LABEL_20;
    }
    uint64_t v17 = a2 + 16;
    uint64_t v18 = (char *)v27;
    uint64_t v19 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v15, v17))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19) {
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  uint64_t v20 = 0;
  int64_t v21 = v27;
  if (v27 != v29) {
LABEL_20:
  }
    free(v21);
  return v20;
}

void mlir::pdl::AttributeOp::print(mlir::pdl::AttributeOp *this, mlir::OpAsmPrinter *a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
  {
    uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v7 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v7 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((void *)v6 + 4) = v7 + 1;
      unsigned char *v7 = 32;
    }
    long long v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      unsigned char *v9 = 58;
      ++*((void *)v8 + 4);
    }
    long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      unsigned char *v11 = 32;
    }
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *(void *)this;
      unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    }
  }
  if (*(void *)(v4 + 16 * ((v5 >> 23) & 1) + 64))
  {
    long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      unsigned char *v13 = 32;
    }
    unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "=", 1uLL);
    }
    else
    {
      *uint64_t v15 = 61;
      ++*((void *)v14 + 4);
    }
    uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v17 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 32);
    }
    else
    {
      *((void *)v16 + 4) = v17 + 1;
      unsigned char *v17 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
  }
  uint64_t v22 = v24;
  v24[0] = "value";
  v24[1] = 5;
  uint64_t v23 = 0x200000001;
  if (HIBYTE(v5))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v20, v22, v23);
  if (v22 != v24) {
    free(v22);
  }
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    long long v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        long long v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 55;
        uint64_t v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            uint64_t v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v58;
      uint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      uint64_t v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

BOOL mlir::pdl::EraseOp::parse(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v4);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, SingletonImpl, a2 + 16) != 0;
}

void mlir::pdl::EraseOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v11 = v13;
  uint64_t v12 = 0x200000000;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

BOOL mlir::pdl::OperandOp::verifyInvariantsImpl(mlir::pdl::OperandOp *this)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) == 0)
  {
LABEL_27:
    if (*(_DWORD *)(v2 + 36)) {
      uint64_t v27 = v2 - 16;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
  }
  uint64_t v3 = (const char *)*(unsigned int *)(v2 + 68);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
      uint64_t v2 = *(void *)this;
      }
    }
    goto LABEL_27;
  }
  unint64_t v38 = (void **)"operand group starting at #";
  __int16 v39 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v38, (uint64_t)v43);
  if (v43[0])
  {
    int v40 = 5;
    int64_t v41 = 0;
    uint64_t v4 = &v40;
    unsigned int v5 = (char *)v44;
    if (v45 >= v46)
    {
      unint64_t v30 = v45 + 1;
      if (v44 <= &v40 && (char *)v44 + 24 * v45 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        unsigned int v5 = (char *)v44;
        uint64_t v4 = (int *)((char *)v44 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        uint64_t v4 = &v40;
        unsigned int v5 = (char *)v44;
      }
    }
    uint64_t v6 = &v5[24 * v45];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v8 = ++v45;
    if (v43[0])
    {
      int v40 = 3;
      int64_t v41 = " requires 0 or 1 element, but found ";
      uint64_t v42 = 36;
      uint64_t v9 = &v40;
      long long v10 = (char *)v44;
      if (v8 >= v46)
      {
        unint64_t v31 = v8 + 1;
        BOOL v32 = (char *)v44 + 24 * v8 > (char *)&v40;
        if (v44 <= &v40 && v32)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          long long v10 = (char *)v44;
          uint64_t v9 = (int *)((char *)v44 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          uint64_t v9 = &v40;
          long long v10 = (char *)v44;
        }
      }
      uint64_t v11 = &v10[24 * v45];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v45;
      if (v43[0])
      {
        int v40 = 5;
        int64_t v41 = v3;
        unint64_t v14 = &v40;
        long long v15 = (char *)v44;
        if (v13 >= v46)
        {
          unint64_t v33 = v13 + 1;
          BOOL v34 = (char *)v44 + 24 * v13 > (char *)&v40;
          if (v44 <= &v40 && v34)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            long long v15 = (char *)v44;
            unint64_t v14 = (int *)((char *)v44 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            unint64_t v14 = &v40;
            long long v15 = (char *)v44;
          }
        }
        uint64_t v16 = &v15[24 * v45];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v45;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
  if (v43[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
  }
  if (v52)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      long long v20 = v51;
      int64_t v21 = __p;
      if (v51 != __p)
      {
        do
          long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      int64_t v51 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v48;
    if (v48)
    {
      uint64_t v23 = v49;
      long long v24 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        long long v24 = v48;
      }
      uint64_t v49 = v22;
      operator delete(v24);
    }
    if (v44 != v47) {
      free(v44);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 50;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v58;
      uint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v55;
    if (v55)
    {
      unint64_t v30 = v56;
      unint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        unint64_t v31 = v55;
      }
      uint64_t v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

uint64_t mlir::pdl::OperandOp::parse(uint64_t a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x263EF8340];
  uint64_t v25 = v27;
  uint64_t v26 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v24, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 680))(a1, v24, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_15;
      }
      unsigned int v5 = v24;
      uint64_t v6 = (char *)v25;
      if (v26 >= HIDWORD(v26))
      {
        unint64_t v22 = v26 + 1;
        if (v25 <= v24 && (char *)v25 + 32 * v26 > (char *)v24)
        {
          int64_t v23 = (char *)v24 - (unsigned char *)v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          uint64_t v6 = (char *)v25;
          unsigned int v5 = (void **)((char *)v25 + v23);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          unsigned int v5 = v24;
          uint64_t v6 = (char *)v25;
        }
      }
      long long v7 = &v6[32 * v26];
      long long v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)long long v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v26) = v26 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    long long v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
    uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v15 = *(unsigned int *)(a2 + 72);
    if (v15 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!v26)
    {
LABEL_13:
      uint64_t v19 = 1;
      long long v20 = v25;
      if (v25 == v27) {
        return v19;
      }
      goto LABEL_16;
    }
    uint64_t v16 = a2 + 16;
    long long v17 = (char *)v25;
    uint64_t v18 = 32 * v26;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, v14, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  uint64_t v19 = 0;
  long long v20 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v20);
  return v19;
}

void mlir::pdl::OperandOp::print(mlir::pdl::OperandOp *this, mlir::OpAsmPrinter *a2)
{
  v18[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
  {
    uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v7 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v7 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((void *)v6 + 4) = v7 + 1;
      unsigned char *v7 = 32;
    }
    long long v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      unsigned char *v9 = 58;
      ++*((void *)v8 + 4);
    }
    long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      unsigned char *v11 = 32;
    }
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *(void *)this;
      unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    }
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0x200000000;
  if (HIBYTE(v5))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v14, v16, v17);
  if (v16 != v18) {
    free(v16);
  }
}

BOOL mlir::pdl::OperandsOp::verifyInvariantsImpl(mlir::pdl::OperandsOp *this)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) == 0) {
    goto LABEL_27;
  }
  uint64_t v3 = (const char *)*(unsigned int *)(v2 + 68);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(v2, *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
      uint64_t v2 = *(void *)this;
      }
    }
LABEL_27:
    if (*(_DWORD *)(v2 + 36)) {
      uint64_t v27 = v2 - 16;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    uint64_t v29 = *(void *)this;
    unint64_t v30 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v82[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v82) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return 1;
      }
    }
    __int16 v78 = 261;
    v77[0] = (void **)"result";
    v77[1] = (void **)6;
    mlir::Operation::emitOpError(v29, v77, (uint64_t)v82);
    if (v82[0])
    {
      int v79 = 3;
      uint64_t v80 = " #";
      uint64_t v81 = 2;
      unint64_t v31 = &v79;
      uint64_t v32 = (char *)v83;
      if (v84 >= v85)
      {
        unint64_t v60 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          int64_t v71 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          uint64_t v32 = (char *)v83;
          unint64_t v31 = (int *)((char *)v83 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          unint64_t v31 = &v79;
          uint64_t v32 = (char *)v83;
        }
      }
      uint64_t v33 = &v32[24 * v84];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = *((void *)v31 + 2);
      *(_OWORD *)uint64_t v33 = v34;
      uint64_t v35 = ++v84;
      if (v82[0])
      {
        int v79 = 5;
        uint64_t v80 = 0;
        unint64_t v36 = &v79;
        BOOL v37 = (char *)v83;
        if (v35 >= v85)
        {
          unint64_t v63 = v35 + 1;
          BOOL v64 = (char *)v83 + 24 * v35 > (char *)&v79;
          if (v83 <= &v79 && v64)
          {
            int64_t v73 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            BOOL v37 = (char *)v83;
            unint64_t v36 = (int *)((char *)v83 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            unint64_t v36 = &v79;
            BOOL v37 = (char *)v83;
          }
        }
        unint64_t v38 = &v37[24 * v84];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = *((void *)v36 + 2);
        *(_OWORD *)unint64_t v38 = v39;
        uint64_t v40 = ++v84;
        if (v82[0])
        {
          int v79 = 3;
          uint64_t v81 = 66;
          int64_t v41 = &v79;
          int64_t v42 = (char *)v83;
          if (v40 >= v85)
          {
            unint64_t v67 = v40 + 1;
            BOOL v68 = (char *)v83 + 24 * v40 > (char *)&v79;
            if (v83 <= &v79 && v68)
            {
              int64_t v75 = (char *)&v79 - (unsigned char *)v83;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              int64_t v42 = (char *)v83;
              int64_t v41 = (int *)((char *)v83 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              int64_t v41 = &v79;
              int64_t v42 = (char *)v83;
            }
          }
          int64_t v43 = &v42[24 * v84];
          long long v44 = *(_OWORD *)v41;
          *((void *)v43 + 2) = *((void *)v41 + 2);
          *(_OWORD *)int64_t v43 = v44;
          ++v84;
          if (v82[0])
          {
            unsigned int v45 = &v79;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, v30);
            __int16 v46 = (char *)v83;
            if (v84 >= v85)
            {
              unint64_t v69 = v84 + 1;
              if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
              {
                int64_t v76 = (char *)&v79 - (unsigned char *)v83;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                __int16 v46 = (char *)v83;
                unsigned int v45 = (int *)((char *)v83 + v76);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                unsigned int v45 = &v79;
                __int16 v46 = (char *)v83;
              }
            }
            int v47 = &v46[24 * v84];
            long long v48 = *(_OWORD *)v45;
            *((void *)v47 + 2) = *((void *)v45 + 2);
            *(_OWORD *)int v47 = v48;
            ++v84;
          }
        }
      }
    }
    char v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
    if (v82[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
    }
    if (v91)
    {
      unint64_t v50 = __p;
      if (__p)
      {
        int64_t v51 = v90;
        unsigned int v52 = __p;
        if (v90 != __p)
        {
          do
            int64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          unsigned int v52 = __p;
        }
        char v90 = v50;
        operator delete(v52);
      }
      unsigned int v53 = v87;
      if (v87)
      {
        int64_t v54 = v88;
        uint64_t v55 = v87;
        if (v88 != v87)
        {
          do
          {
            uint64_t v57 = *--v54;
            uint64_t v56 = v57;
            *int64_t v54 = 0;
            if (v57) {
              MEMORY[0x21667D390](v56, 0x1000C8077774924);
            }
          }
          while (v54 != v53);
          uint64_t v55 = v87;
        }
        char v88 = v53;
        operator delete(v55);
      }
      if (v83 != v86) {
        free(v83);
      }
    }
    return v49 != 0;
  }
  v77[0] = (void **)"operand group starting at #";
  __int16 v78 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v77, (uint64_t)v82);
  if (v82[0])
  {
    int v79 = 5;
    uint64_t v80 = 0;
    uint64_t v4 = &v79;
    unsigned int v5 = (char *)v83;
    if (v84 >= v85)
    {
      unint64_t v59 = v84 + 1;
      if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
      {
        int64_t v70 = (char *)&v79 - (unsigned char *)v83;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        unsigned int v5 = (char *)v83;
        uint64_t v4 = (int *)((char *)v83 + v70);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        uint64_t v4 = &v79;
        unsigned int v5 = (char *)v83;
      }
    }
    uint64_t v6 = &v5[24 * v84];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v8 = ++v84;
    if (v82[0])
    {
      int v79 = 3;
      uint64_t v80 = " requires 0 or 1 element, but found ";
      uint64_t v81 = 36;
      uint64_t v9 = &v79;
      long long v10 = (char *)v83;
      if (v8 >= v85)
      {
        unint64_t v61 = v8 + 1;
        BOOL v62 = (char *)v83 + 24 * v8 > (char *)&v79;
        if (v83 <= &v79 && v62)
        {
          int64_t v72 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          long long v10 = (char *)v83;
          uint64_t v9 = (int *)((char *)v83 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          uint64_t v9 = &v79;
          long long v10 = (char *)v83;
        }
      }
      uint64_t v11 = &v10[24 * v84];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v84;
      if (v82[0])
      {
        int v79 = 5;
        uint64_t v80 = v3;
        uint64_t v14 = &v79;
        uint64_t v15 = (char *)v83;
        if (v13 >= v85)
        {
          unint64_t v65 = v13 + 1;
          BOOL v66 = (char *)v83 + 24 * v13 > (char *)&v79;
          if (v83 <= &v79 && v66)
          {
            int64_t v74 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            uint64_t v15 = (char *)v83;
            uint64_t v14 = (int *)((char *)v83 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            uint64_t v14 = &v79;
            uint64_t v15 = (char *)v83;
          }
        }
        uint64_t v16 = &v15[24 * v84];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v84;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
  if (v82[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
  }
  if (v91)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      long long v20 = v90;
      int64_t v21 = __p;
      if (v90 != __p)
      {
        do
          long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      char v90 = v19;
      operator delete(v21);
    }
    unint64_t v22 = v87;
    if (v87)
    {
      int64_t v23 = v88;
      long long v24 = v87;
      if (v88 != v87)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *int64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        long long v24 = v87;
      }
      char v88 = v22;
      operator delete(v24);
    }
    if (v83 != v86) {
      free(v83);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v53[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      return 1;
    }
  }
  __int16 v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    int64_t v51 = " #";
    uint64_t v52 = 2;
    long long v10 = &v50;
    uint64_t v11 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v44 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v11 = (char *)v54;
        long long v10 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        long long v10 = &v50;
        uint64_t v11 = (char *)v54;
      }
    }
    long long v12 = &v11[24 * v55];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)long long v12 = v13;
    uint64_t v14 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      int64_t v51 = (const char *)a5;
      uint64_t v15 = &v50;
      uint64_t v16 = (char *)v54;
      if (v14 >= v56)
      {
        unint64_t v39 = v14 + 1;
        BOOL v40 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          int64_t v45 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v16 = (char *)v54;
          uint64_t v15 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v15 = &v50;
          uint64_t v16 = (char *)v54;
        }
      }
      long long v17 = &v16[24 * v55];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)long long v17 = v18;
      uint64_t v19 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        uint64_t v52 = 64;
        long long v20 = &v50;
        int64_t v21 = (char *)v54;
        if (v19 >= v56)
        {
          unint64_t v41 = v19 + 1;
          BOOL v42 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            int64_t v46 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            int64_t v21 = (char *)v54;
            long long v20 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            long long v20 = &v50;
            int64_t v21 = (char *)v54;
          }
        }
        unint64_t v22 = &v21[24 * v55];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v22 = v23;
        ++v55;
        if (v53[0])
        {
          long long v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          uint64_t v25 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v47 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              uint64_t v25 = (char *)v54;
              long long v24 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              long long v24 = &v50;
              uint64_t v25 = (char *)v54;
            }
          }
          uint64_t v26 = &v25[24 * v55];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v55;
        }
      }
    }
  }
  uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    uint64_t v29 = __p;
    if (__p)
    {
      unint64_t v30 = v61;
      unint64_t v31 = __p;
      if (v61 != __p)
      {
        do
          unint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        unint64_t v31 = __p;
      }
      unint64_t v61 = v29;
      operator delete(v31);
    }
    uint64_t v32 = v58;
    if (v58)
    {
      uint64_t v33 = v59;
      long long v34 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
        long long v34 = v58;
      }
      unint64_t v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v28;
}

uint64_t mlir::pdl::OperandsOp::parse(uint64_t a1, uint64_t a2)
{
  v29[16] = *MEMORY[0x263EF8340];
  long long v27 = v29;
  uint64_t v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v26, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 680))(a1, v26, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_15;
      }
      unsigned int v5 = v26;
      uint64_t v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        unint64_t v24 = v28 + 1;
        if (v27 <= v26 && (char *)v27 + 32 * v28 > (char *)v26)
        {
          int64_t v25 = (char *)v26 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          uint64_t v6 = (char *)v27;
          unsigned int v5 = (void **)((char *)v27 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          unsigned int v5 = v26;
          uint64_t v6 = (char *)v27;
        }
      }
      long long v7 = &v6[32 * v28];
      long long v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)long long v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    uint64_t v12 = mlir::pdl::RangeType::get(SingletonImpl);
    long long v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    uint64_t v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v16 = mlir::pdl::RangeType::get(v15);
    uint64_t v17 = *(unsigned int *)(a2 + 72);
    if (v17 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v17) = v12;
    ++*(_DWORD *)(a2 + 72);
    if (!v28)
    {
LABEL_13:
      uint64_t v21 = 1;
      unint64_t v22 = v27;
      if (v27 == v29) {
        return v21;
      }
      goto LABEL_16;
    }
    uint64_t v18 = a2 + 16;
    uint64_t v19 = (char *)v27;
    uint64_t v20 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v19, v16, v18))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  uint64_t v21 = 0;
  unint64_t v22 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v22);
  return v21;
}

uint64_t mlir::pdl::OperationOp::getOperandValues(mlir::pdl::OperationOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

BOOL mlir::pdl::OperationOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v88 = v6;
  if (!v6)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      char v90 = "expected DictionaryAttr to set properties";
      uint64_t v91 = 41;
      uint64_t v26 = &v89;
      long long v27 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v74 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v81 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          long long v27 = (char *)v93;
          uint64_t v26 = (int *)((char *)v93 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          uint64_t v26 = &v89;
          long long v27 = (char *)v93;
        }
      }
      uint64_t v28 = &v27[24 * v94];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    unint64_t v30 = __p;
    if (__p)
    {
      unint64_t v31 = v100;
      uint64_t v32 = __p;
      if (v100 != __p)
      {
        do
          unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v100 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    uint64_t v33 = v98;
    long long v23 = v97;
    if (v98 == v97)
    {
LABEL_99:
      int64_t v98 = v21;
      operator delete(v23);
LABEL_100:
      if (v93 != v96) {
        free(v93);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_98:
    long long v23 = v97;
    goto LABEL_99;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v88, "attributeValueNames", 0x13uLL);
  if (!v8)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      char v90 = "expected key entry for attributeValueNames in DictionaryAttr to set Properties.";
      uint64_t v91 = 79;
      uint64_t v36 = &v89;
      BOOL v37 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v76 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v83 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          BOOL v37 = (char *)v93;
          uint64_t v36 = (int *)((char *)v93 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          uint64_t v36 = &v89;
          BOOL v37 = (char *)v93;
        }
      }
      unint64_t v38 = &v37[24 * v94];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    BOOL v40 = __p;
    if (__p)
    {
      unint64_t v41 = v100;
      BOOL v42 = __p;
      if (v100 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      uint64_t v100 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v43 = v98;
    long long v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_98;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v91 = 64;
      long long v10 = &v89;
      uint64_t v11 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v75 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v82 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          uint64_t v11 = (char *)v93;
          long long v10 = (int *)((char *)v93 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          long long v10 = &v89;
          uint64_t v11 = (char *)v93;
        }
      }
      uint64_t v12 = &v11[24 * v94];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v94;
      if (v92[0])
      {
        uint64_t v14 = &v89;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v9);
        uint64_t v15 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v77 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v84 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v15 = (char *)v93;
            uint64_t v14 = (int *)((char *)v93 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v14 = &v89;
            uint64_t v15 = (char *)v93;
          }
        }
        uint64_t v16 = &v15[24 * v94];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v100;
      uint64_t v20 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v100 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v22 = v98;
    long long v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
    goto LABEL_98;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v88, "opName", 6uLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v91 = 51;
        long long v48 = &v89;
        __int16 v49 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v78 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v85 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            __int16 v49 = (char *)v93;
            long long v48 = (int *)((char *)v93 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            long long v48 = &v89;
            __int16 v49 = (char *)v93;
          }
        }
        int v50 = &v49[24 * v94];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)int v50 = v51;
        ++v94;
        if (v92[0])
        {
          uint64_t v52 = &v89;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v47);
          unsigned int v53 = (char *)v93;
          if (v94 >= v95)
          {
            unint64_t v79 = v94 + 1;
            if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
            {
              int64_t v86 = (char *)&v89 - (unsigned char *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              unsigned int v53 = (char *)v93;
              uint64_t v52 = (int *)((char *)v93 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              uint64_t v52 = &v89;
              unsigned int v53 = (char *)v93;
            }
          }
          int64_t v54 = &v53[24 * v94];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)int64_t v54 = v55;
          ++v94;
          if (v92[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
          }
        }
      }
      if (!v101) {
        return 0;
      }
      unsigned int v56 = __p;
      if (__p)
      {
        uint64_t v57 = v100;
        unint64_t v58 = __p;
        if (v100 != __p)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          unint64_t v58 = __p;
        }
        uint64_t v100 = v56;
        operator delete(v58);
      }
      uint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      unint64_t v59 = v98;
      long long v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        uint64_t v61 = *--v59;
        uint64_t v60 = v61;
        *unint64_t v59 = 0;
        if (v61) {
          MEMORY[0x21667D390](v60, 0x1000C8077774924);
        }
      }
      while (v59 != v21);
      goto LABEL_98;
    }
    a1[1] = v46;
  }
  char v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operandSegmentSizes", 0x13uLL);
  if (!v62)
  {
    char v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operand_segment_sizes", 0x15uLL);
    if (!v62)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        char v90 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v91 = 79;
        BOOL v64 = &v89;
        unint64_t v65 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v80 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v87 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            unint64_t v65 = (char *)v93;
            BOOL v64 = (int *)((char *)v93 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            BOOL v64 = &v89;
            unint64_t v65 = (char *)v93;
          }
        }
        BOOL v66 = &v65[24 * v94];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)BOOL v66 = v67;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
      if (!v101) {
        return 0;
      }
      BOOL v68 = __p;
      if (__p)
      {
        unint64_t v69 = v100;
        int64_t v70 = __p;
        if (v100 != __p)
        {
          do
            unint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
          while (v69 != v68);
          int64_t v70 = __p;
        }
        uint64_t v100 = v68;
        operator delete(v70);
      }
      uint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      int64_t v71 = v98;
      long long v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        uint64_t v73 = *--v71;
        uint64_t v72 = v73;
        void *v71 = 0;
        if (v73) {
          MEMORY[0x21667D390](v72, 0x1000C8077774924);
        }
      }
      while (v71 != v21);
      goto LABEL_98;
    }
  }
  return mlir::convertFromAttribute(a1 + 2, (const char *)3, v62, a3, a4) != 0;
}

uint64_t mlir::pdl::OperationOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v29[6] = *MEMORY[0x263EF8340];
  uint64_t v26 = a1;
  long long v27 = v29;
  uint64_t v28 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v26, (uint64_t)"attributeValueNames", 19, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v7 = v28;
    }
    uint64_t v8 = (uint64_t *)((char *)v27 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"opName", 6, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v13 = v28;
    }
    uint64_t v14 = (uint64_t *)((char *)v27 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v15 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
  uint64_t v16 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"operandSegmentSizes", 19, v15);
  uint64_t v18 = v17;
  unsigned int v19 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
    unsigned int v19 = v28;
  }
  uint64_t v20 = (uint64_t *)((char *)v27 + 16 * v19);
  uint64_t *v20 = v16;
  v20[1] = v18;
  BOOL v21 = __CFADD__(v28, 1);
  uint64_t v22 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (v21)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v24 = v27;
    if (v27 == v29) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v26, (uint64_t *)v27, v22);
  uint64_t v24 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v24);
  return DictionaryAttr;
}

unint64_t mlir::pdl::OperationOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v21 = v1;
    long long v23 = a1;
    uint64_t v2 = &unk_267770000;
    int v13 = v12;
    unint64_t v1 = v21;
    a1 = v23;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v1 = v21;
      a1 = v23;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v22 = v5;
    uint64_t v24 = a1;
    uint64_t v2 = &unk_267770000;
    int v16 = v15;
    unint64_t v5 = v22;
    a1 = v24;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v5 = v22;
      a1 = v24;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v27 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  {
    uint64_t v25 = a1;
    uint64_t v2 = &unk_267770000;
    int v19 = v18;
    a1 = v25;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      uint64_t v2 = (void *)&unk_267770000;
      a1 = v25;
    }
  }
  uint64_t v8 = *(unint64_t *)((char *)a1 + 20);
  uint64_t v9 = __ROR8__(v8 + 12, 12);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (a1[2] ^ v2[385] ^ v9);
  unint64_t v26 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47))) ^ v8;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v28, (uint64_t *)&v27, (uint64_t *)&v26);
}

uint64_t mlir::pdl::OperationOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  if (__n == 6)
  {
    if (!memcmp(__s1, "opName", 6uLL)) {
      return a2[1];
    }
    return 0;
  }
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    }
    return 0;
  }
  if (__n != 19) {
    return 0;
  }
  if (*(void *)__s1 != 0x7475626972747461
    || *((void *)__s1 + 1) != 0x614E65756C615665
    || *(void *)(__s1 + 11) != 0x73656D614E65756CLL)
  {
    if (!memcmp(__s1, "operandSegmentSizes", 0x13uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    }
    return 0;
  }
  return *a2;
}

uint64_t mlir::pdl::OperationOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 6)
  {
    uint64_t result = memcmp(__s1, "opName", 6uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 8) = v8;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else
  {
    if (a3 == 21)
    {
      uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
      if (result) {
        return result;
      }
    }
    else
    {
      if (a3 != 19) {
        return result;
      }
      if (*(void *)__s1 == 0x7475626972747461
        && *((void *)__s1 + 1) == 0x614E65756C615665
        && *(void *)(__s1 + 11) == 0x73656D614E65756CLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          *(void *)uint64_t result = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
        return result;
      }
      uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
      if (result) {
        return result;
      }
    }
    if (a4)
    {
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
      if (result) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      int v12 = v9;
      if (result)
      {
        uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
        if (result == 3)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
          if (v10) {
            return (uint64_t)memmove((void *)(v5 + 16), (const void *)result, 4 * v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      {
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    uint64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    uint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v10 = (char *)v41;
        uint64_t v9 = (void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        uint64_t v10 = (char *)v41;
      }
    }
    uint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      uint64_t v35 = a2;
      uint64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        uint64_t v36 = "' failed to satisfy constraint: string array attribute";
        uint64_t v37 = 54;
        int v13 = &v35;
        unint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unint64_t v14 = (char *)v41;
            int v13 = (void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            int v13 = &v35;
            unint64_t v14 = (char *)v41;
          }
        }
        int v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)int v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    int v18 = __p;
    if (__p)
    {
      int v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      long long v48 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v45;
    if (v45)
    {
      unint64_t v22 = v46;
      long long v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *unint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        long long v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

BOOL mlir::pdl::OperationOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      int v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          unint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            unint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        unint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          unint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    long long v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 2, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 4, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::OperationOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 16, 3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 16), 3);
  }
  return result;
}

BOOL mlir::pdl::OperationOp::verifyInvariantsImpl(mlir::pdl::OperationOp *this)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    v131[0] = v2;
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v5, (void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0; {
    v131[0] = *(void *)this;
    }
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v4, (void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0; {
    uint64_t v6 = *(void *)this;
    }
    unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v8 = (v7 >> 23) & 1;
    uint64_t v9 = *(void *)this + 16 * v8 + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(unsigned int *)(v9 + 16);
    if ((v7 & 0x800000) != 0)
    {
      uint64_t v11 = *(void *)(v6 + 72);
      if (v10) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v10)
      {
LABEL_11:
        uint64_t v12 = 0;
        uint64_t v13 = v11 + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*(void *)this, *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v12))
        {
          ++v12;
          v13 += 32;
          if (v10 == v12)
          {
            uint64_t v6 = *(void *)this;
            unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
            uint64_t v8 = (v7 >> 23) & 1;
            int v14 = v7 & 0x800000;
            goto LABEL_35;
          }
        }
        return 0;
      }
    }
    int v14 = v7 & 0x800000;
LABEL_35:
    uint64_t v24 = v6 + 16 * v8 + 64;
    if (BYTE3(v7)) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = *(_DWORD *)(v25 + 20);
    if (v14)
    {
      uint64_t v27 = *(void *)(v6 + 72);
      if (v26) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v27 = 0;
      if (v26)
      {
LABEL_40:
        uint64_t v28 = 0;
        uint64_t v29 = *(unsigned int *)(v25 + 16);
        uint64_t v30 = v27 + 32 * v29;
        uint64_t v31 = (v26 + v29) - v29;
        do
        {
          unint64_t v32 = *(void *)(*(void *)(v30 + 32 * v28 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          if (*(_UNKNOWN **)(*(void *)v32 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
          {
            uint64_t v33 = *(void *)this;
            __int16 v127 = 261;
            uint64_t v125 = (void **)"operand";
            uint64_t v126 = 7;
            mlir::Operation::emitOpError(v33, &v125, (uint64_t)v131);
            if (v131[0])
            {
              int v128 = 3;
              long long v129 = " #";
              uint64_t v130 = 2;
              int64_t v34 = (char *)v132;
              if (v133 >= v134)
              {
                unint64_t v61 = v133 + 1;
                if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                {
                  int64_t v67 = (char *)&v128 - (unsigned char *)v132;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  int64_t v34 = (char *)v132;
                  uint64_t v35 = (int *)((char *)v132 + v67);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  uint64_t v35 = &v128;
                  int64_t v34 = (char *)v132;
                }
              }
              else
              {
                uint64_t v35 = &v128;
              }
              uint64_t v36 = &v34[24 * v133];
              long long v37 = *(_OWORD *)v35;
              *((void *)v36 + 2) = *((void *)v35 + 2);
              *(_OWORD *)uint64_t v36 = v37;
              uint64_t v38 = ++v133;
              if (v131[0])
              {
                int v128 = 5;
                long long v129 = (const char *)v10;
                uint64_t v39 = (char *)v132;
                if (v38 >= v134)
                {
                  unint64_t v62 = v38 + 1;
                  BOOL v63 = (char *)v132 + 24 * v38 > (char *)&v128;
                  if (v132 <= &v128 && v63)
                  {
                    int64_t v68 = (char *)&v128 - (unsigned char *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    uint64_t v39 = (char *)v132;
                    uint64_t v40 = (int *)((char *)v132 + v68);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    uint64_t v40 = &v128;
                    uint64_t v39 = (char *)v132;
                  }
                }
                else
                {
                  uint64_t v40 = &v128;
                }
                unint64_t v41 = &v39[24 * v133];
                long long v42 = *(_OWORD *)v40;
                *((void *)v41 + 2) = *((void *)v40 + 2);
                *(_OWORD *)unint64_t v41 = v42;
                uint64_t v43 = ++v133;
                if (v131[0])
                {
                  int v128 = 3;
                  uint64_t v130 = 65;
                  uint64_t v44 = (char *)v132;
                  if (v43 >= v134)
                  {
                    unint64_t v64 = v43 + 1;
                    BOOL v65 = (char *)v132 + 24 * v43 > (char *)&v128;
                    if (v132 <= &v128 && v65)
                    {
                      int64_t v69 = (char *)&v128 - (unsigned char *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      uint64_t v44 = (char *)v132;
                      uint64_t v45 = (int *)((char *)v132 + v69);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      uint64_t v45 = &v128;
                      uint64_t v44 = (char *)v132;
                    }
                  }
                  else
                  {
                    uint64_t v45 = &v128;
                  }
                  uint64_t v46 = &v44[24 * v133];
                  long long v47 = *(_OWORD *)v45;
                  *((void *)v46 + 2) = *((void *)v45 + 2);
                  *(_OWORD *)uint64_t v46 = v47;
                  ++v133;
                  if (v131[0])
                  {
                    long long v48 = &v128;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v32);
                    char v49 = (char *)v132;
                    if (v133 >= v134)
                    {
                      unint64_t v66 = v133 + 1;
                      if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                      {
                        int64_t v70 = (char *)&v128 - (unsigned char *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        char v49 = (char *)v132;
                        long long v48 = (int *)((char *)v132 + v70);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        long long v48 = &v128;
                        char v49 = (char *)v132;
                      }
                    }
                    uint64_t v50 = &v49[24 * v133];
                    long long v51 = *(_OWORD *)v48;
                    *((void *)v50 + 2) = *((void *)v48 + 2);
                    *(_OWORD *)uint64_t v50 = v51;
                    ++v133;
                  }
                }
              }
            }
            char v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
            if (v131[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
            }
            if (v140)
            {
              unsigned int v53 = __p;
              if (__p)
              {
                int64_t v54 = v139;
                long long v55 = __p;
                if (v139 != __p)
                {
                  do
                    int64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                  while (v54 != v53);
                  long long v55 = __p;
                }
                unint64_t v139 = v53;
                operator delete(v55);
              }
              unsigned int v56 = v136;
              if (v136)
              {
                uint64_t v57 = v137;
                unint64_t v58 = v136;
                if (v137 != v136)
                {
                  do
                  {
                    uint64_t v60 = *--v57;
                    uint64_t v59 = v60;
                    *uint64_t v57 = 0;
                    if (v60) {
                      MEMORY[0x21667D390](v59, 0x1000C8077774924);
                    }
                  }
                  while (v57 != v56);
                  unint64_t v58 = v136;
                }
                v137 = v56;
                operator delete(v58);
              }
              if (v132 != v135) {
                free(v132);
              }
            }
            if (!v52) {
              return 0;
            }
          }
          LODWORD(v10) = v10 + 1;
        }
        while (++v28 != v31);
      }
    }
    uint64_t v71 = *(void *)this;
    unint64_t v72 = *(unsigned int *)(*(void *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v73 = (_DWORD *)(*(void *)this + 16 * ((v72 >> 23) & 1) + 64);
    }
    else {
      uint64_t v73 = 0;
    }
    int v74 = v73[6];
    if ((v72 & 0x800000) != 0)
    {
      uint64_t v75 = *(void *)(v71 + 72);
      if (v74) {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v75 = 0;
      if (v74)
      {
LABEL_96:
        uint64_t v76 = 0;
        uint64_t v77 = (v73[5] + v73[4]);
        uint64_t v78 = v75 + 32 * v77;
        uint64_t v79 = (v74 + v77) - v77;
        while (1)
        {
          unint64_t v80 = *(void *)(*(void *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          int64_t v81 = *(void **)(*(void *)v80 + 136);
          if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
          {
            uint64_t v82 = *(void *)this;
            if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
              || (v131[0] = *(void *)(*(void *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8,
                  *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v131) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id))
            {
              __int16 v127 = 261;
              uint64_t v125 = (void **)"operand";
              uint64_t v126 = 7;
              mlir::Operation::emitOpError(v82, &v125, (uint64_t)v131);
              if (v131[0])
              {
                int v128 = 3;
                long long v129 = " #";
                uint64_t v130 = 2;
                int64_t v83 = (char *)v132;
                if (v133 >= v134)
                {
                  unint64_t v110 = v133 + 1;
                  if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                  {
                    int64_t v116 = (char *)&v128 - (unsigned char *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    int64_t v83 = (char *)v132;
                    int64_t v84 = (int *)((char *)v132 + v116);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    int64_t v84 = &v128;
                    int64_t v83 = (char *)v132;
                  }
                }
                else
                {
                  int64_t v84 = &v128;
                }
                int64_t v85 = &v83[24 * v133];
                long long v86 = *(_OWORD *)v84;
                *((void *)v85 + 2) = *((void *)v84 + 2);
                *(_OWORD *)int64_t v85 = v86;
                uint64_t v87 = ++v133;
                if (v131[0])
                {
                  int v128 = 5;
                  long long v129 = (const char *)v10;
                  uint64_t v88 = (char *)v132;
                  if (v87 >= v134)
                  {
                    unint64_t v111 = v87 + 1;
                    BOOL v112 = (char *)v132 + 24 * v87 > (char *)&v128;
                    if (v132 <= &v128 && v112)
                    {
                      int64_t v117 = (char *)&v128 - (unsigned char *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      uint64_t v88 = (char *)v132;
                      int v89 = (int *)((char *)v132 + v117);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      int v89 = &v128;
                      uint64_t v88 = (char *)v132;
                    }
                  }
                  else
                  {
                    int v89 = &v128;
                  }
                  char v90 = &v88[24 * v133];
                  long long v91 = *(_OWORD *)v89;
                  *((void *)v90 + 2) = *((void *)v89 + 2);
                  *(_OWORD *)char v90 = v91;
                  uint64_t v92 = ++v133;
                  if (v131[0])
                  {
                    int v128 = 3;
                    uint64_t v130 = 87;
                    BOOL v93 = (char *)v132;
                    if (v92 >= v134)
                    {
                      unint64_t v113 = v92 + 1;
                      BOOL v114 = (char *)v132 + 24 * v92 > (char *)&v128;
                      if (v132 <= &v128 && v114)
                      {
                        int64_t v118 = (char *)&v128 - (unsigned char *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        BOOL v93 = (char *)v132;
                        unsigned int v94 = (int *)((char *)v132 + v118);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        unsigned int v94 = &v128;
                        BOOL v93 = (char *)v132;
                      }
                    }
                    else
                    {
                      unsigned int v94 = &v128;
                    }
                    unsigned int v95 = &v93[24 * v133];
                    long long v96 = *(_OWORD *)v94;
                    *((void *)v95 + 2) = *((void *)v94 + 2);
                    *(_OWORD *)unsigned int v95 = v96;
                    ++v133;
                    if (v131[0])
                    {
                      int64_t v97 = &v128;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v80);
                      int64_t v98 = (char *)v132;
                      if (v133 >= v134)
                      {
                        unint64_t v115 = v133 + 1;
                        if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                        {
                          int64_t v119 = (char *)&v128 - (unsigned char *)v132;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          int64_t v98 = (char *)v132;
                          int64_t v97 = (int *)((char *)v132 + v119);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          int64_t v97 = &v128;
                          int64_t v98 = (char *)v132;
                        }
                      }
                      uint64_t v99 = &v98[24 * v133];
                      long long v100 = *(_OWORD *)v97;
                      *((void *)v99 + 2) = *((void *)v97 + 2);
                      *(_OWORD *)uint64_t v99 = v100;
                      ++v133;
                    }
                  }
                }
              }
              char v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
              if (v131[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
              }
              if (v140)
              {
                uint64_t v102 = __p;
                if (__p)
                {
                  unint64_t v103 = v139;
                  v104 = __p;
                  if (v139 != __p)
                  {
                    do
                      unint64_t v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
                    while (v103 != v102);
                    v104 = __p;
                  }
                  unint64_t v139 = v102;
                  operator delete(v104);
                }
                __int16 v105 = v136;
                if (v136)
                {
                  unint64_t v106 = v137;
                  int v107 = v136;
                  if (v137 != v136)
                  {
                    do
                    {
                      uint64_t v109 = *--v106;
                      uint64_t v108 = v109;
                      *unint64_t v106 = 0;
                      if (v109) {
                        MEMORY[0x21667D390](v108, 0x1000C8077774924);
                      }
                    }
                    while (v106 != v105);
                    int v107 = v136;
                  }
                  v137 = v105;
                  operator delete(v107);
                }
                if (v132 != v135) {
                  free(v132);
                }
              }
              if (!v101) {
                return 0;
              }
            }
          }
          LODWORD(v10) = v10 + 1;
          if (++v76 == v79)
          {
            uint64_t v71 = *(void *)this;
            break;
          }
        }
      }
    }
    int v120 = *(_DWORD *)(v71 + 36);
    uint64_t v121 = v71 - 16;
    if (v120) {
      uint64_t v122 = v121;
    }
    else {
      uint64_t v122 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v122, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
  }
  else
  {
    uint64_t v125 = (void **)"requires attribute 'attributeValueNames'";
    __int16 v127 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v125, (uint64_t)v131);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
    if (v131[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
    }
    if (v140)
    {
      __int16 v16 = __p;
      if (__p)
      {
        uint64_t v17 = v139;
        int v18 = __p;
        if (v139 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          int v18 = __p;
        }
        unint64_t v139 = v16;
        operator delete(v18);
      }
      int v19 = v136;
      if (v136)
      {
        uint64_t v20 = v137;
        unint64_t v21 = v136;
        if (v137 != v136)
        {
          do
          {
            uint64_t v23 = *--v20;
            uint64_t v22 = v23;
            void *v20 = 0;
            if (v23) {
              MEMORY[0x21667D390](v22, 0x1000C8077774924);
            }
          }
          while (v20 != v19);
          unint64_t v21 = v136;
        }
        v137 = v19;
        operator delete(v21);
      }
      if (v132 != v135) {
        free(v132);
      }
    }
  }
  return v15;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v54[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v54) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
      return 1;
    }
  }
  __int16 v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    int v51 = 3;
    char v52 = " #";
    uint64_t v53 = 2;
    uint64_t v11 = &v51;
    uint64_t v12 = (char *)v55;
    if (v56 >= v57)
    {
      unint64_t v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        int64_t v45 = (char *)&v51 - (unsigned char *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v12 = (char *)v55;
        uint64_t v11 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v11 = &v51;
        uint64_t v12 = (char *)v55;
      }
    }
    uint64_t v13 = &v12[24 * v56];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v56;
    if (v54[0])
    {
      int v51 = 5;
      char v52 = (const char *)a5;
      __int16 v16 = &v51;
      uint64_t v17 = (char *)v55;
      if (v15 >= v57)
      {
        unint64_t v40 = v15 + 1;
        BOOL v41 = (char *)v55 + 24 * v15 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          uint64_t v17 = (char *)v55;
          __int16 v16 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          __int16 v16 = &v51;
          uint64_t v17 = (char *)v55;
        }
      }
      int v18 = &v17[24 * v56];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)int v18 = v19;
      uint64_t v20 = ++v56;
      if (v54[0])
      {
        int v51 = 3;
        uint64_t v53 = 89;
        unint64_t v21 = &v51;
        uint64_t v22 = (char *)v55;
        if (v20 >= v57)
        {
          unint64_t v42 = v20 + 1;
          BOOL v43 = (char *)v55 + 24 * v20 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            int64_t v47 = (char *)&v51 - (unsigned char *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            uint64_t v22 = (char *)v55;
            unint64_t v21 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            unint64_t v21 = &v51;
            uint64_t v22 = (char *)v55;
          }
        }
        uint64_t v23 = &v22[24 * v56];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v56;
        if (v54[0])
        {
          uint64_t v25 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          int v26 = (char *)v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              int64_t v48 = (char *)&v51 - (unsigned char *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              int v26 = (char *)v55;
              uint64_t v25 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v25 = &v51;
              int v26 = (char *)v55;
            }
          }
          uint64_t v27 = &v26[24 * v56];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v56;
        }
      }
    }
  }
  uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  }
  if (v63)
  {
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v62;
      unint64_t v32 = __p;
      if (v62 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      unint64_t v62 = v30;
      operator delete(v32);
    }
    uint64_t v33 = v59;
    if (v59)
    {
      int64_t v34 = v60;
      uint64_t v35 = v59;
      if (v60 != v59)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *int64_t v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        uint64_t v35 = v59;
      }
      uint64_t v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58) {
      free(v55);
    }
  }
  return v29;
}

BOOL mlir::pdl::OperationOp::parse(uint64_t a1, uint64_t a2)
{
  v54[4] = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  char v49 = v51;
  uint64_t v50 = 0x400000000;
  v47[0] = &v48;
  v47[1] = (void *)0x100000000;
  unint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  BOOL v41 = v43;
  uint64_t v42 = 0x400000000;
  v39[0] = &v40;
  v39[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  unsigned __int16 v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, &v37, v6);
  if (v7 >= 0x100u)
  {
    if (!(_BYTE)v7) {
      goto LABEL_18;
    }
    if (v37)
    {
      uint64_t v8 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2);
      *(void *)(v8 + 8) = v37;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v49, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v47)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v36 = v9;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  char v52 = v54;
  uint64_t v53 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 80))(a1)
    || (v38[0] = a1,
        v38[1] = &v52,
        v38[2] = &v44,
        (*(unsigned __int8 (**)(uint64_t, void, uint64_t (*)(uint64_t *), void *, void, void))(*(void *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>, v38, 0, 0))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 88))(a1))
  {
    uint64_t ArrayAttr = mlir::Builder::getArrayAttr(v10, (uint64_t)v52, v53);
    char v12 = 0;
    uint64_t v13 = v52;
    if (v52 == v54) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t ArrayAttr = 0;
  char v12 = 1;
  uint64_t v13 = v52;
  if (v52 != v54) {
LABEL_16:
  }
    free(v13);
LABEL_17:
  if (v12) {
    goto LABEL_18;
  }
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2) = ArrayAttr;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
      goto LABEL_18;
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v41, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v39)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  v38[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  char v52 = (void *)a1;
  uint64_t v53 = (uint64_t)v38;
  v54[0] = a2;
  uint64_t v19 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v18 + 96));
  if (v19)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v19, (void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18; {
  }
    }
  uint64_t v20 = mlir::NamedAttrList::get(a2 + 112, *(void *)(*(void *)(v18 + 96) + 8));
  if (v20)
  {
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v20, (void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18; {
  }
    }
  uint64_t v35 = v17;
  int v21 = v50;
  int v22 = v45;
  int v23 = v42;
  long long v24 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2);
  void v24[4] = v21;
  void v24[5] = v22;
  v24[6] = v23;
  uint64_t v25 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v25);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  long long v28 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v29 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v28);
  uint64_t v30 = mlir::StorageUniquer::getSingletonImpl(v29, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  uint64_t v31 = *(unsigned int *)(a2 + 72);
  if (v31 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v31) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v32 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v49, (uint64_t)v47, v36, v32))
  {
LABEL_18:
    BOOL v14 = 0;
    uint64_t v15 = v39[0];
    if (v39[0] == &v40) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v45)
  {
    uint64_t v33 = (char *)v44;
    uint64_t v34 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v33, v30, v32))
    {
      v33 += 32;
      v34 -= 32;
      if (!v34) {
        goto LABEL_51;
      }
    }
    goto LABEL_18;
  }
LABEL_51:
  BOOL v14 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v41, (uint64_t)v39, v35, v32) != 0;
  uint64_t v15 = v39[0];
  if (v39[0] != &v40) {
LABEL_19:
  }
    free(v15);
LABEL_20:
  if (v41 != v43) {
    free(v41);
  }
  if (v44 != v46) {
    free(v44);
  }
  if (v47[0] != &v48) {
    free(v47[0]);
  }
  if (v49 != v51) {
    free(v49);
  }
  return v14;
}

void mlir::pdl::OperationOp::print(mlir::pdl::OperationOp *this, mlir::OpAsmPrinter *a2)
{
  unint64_t v3 = this;
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = *(void *)this + 16 * v6 + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v7 = 0;
  }
  if (*(void *)(v7 + 8))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      unsigned char *v9 = 32;
    }
    unint64_t v10 = *(void *)v3 + 16 * (((unint64_t)*(unsigned int *)(*(void *)v3 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      unint64_t v10 = 0;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v10 + 8));
    uint64_t v4 = *(void *)v3;
    unint64_t v5 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v6 = (v5 >> 23) & 1;
  }
  uint64_t v11 = v4 + 16 * v6 + 64;
  if (!BYTE3(v5)) {
    uint64_t v11 = 0;
  }
  if (*(_DWORD *)(v11 + 16))
  {
    char v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, "(", 1uLL);
    }
    else
    {
      unsigned char *v13 = 40;
      ++*((void *)v12 + 4);
    }
    unint64_t v14 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v15 = *(void *)v3 + 16 * ((v14 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(unsigned int *)(v15 + 16);
    if ((v14 & 0x800000) != 0) {
      uint64_t v17 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&v102);
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
    if ((unint64_t)v20 >= *((void *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 32);
    }
    else
    {
      *((void *)v19 + 4) = v20 + 1;
      unsigned char *v20 = 32;
    }
    int v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v22 = (unsigned char *)*((void *)v21 + 4);
    if (*((unsigned char **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, ":", 1uLL);
    }
    else
    {
      *int v22 = 58;
      ++*((void *)v21 + 4);
    }
    int v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v24 = (unsigned char *)*((void *)v23 + 4);
    if ((unint64_t)v24 >= *((void *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((void *)v23 + 4) = v24 + 1;
      unsigned char *v24 = 32;
    }
    unint64_t v25 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v26 = *(void *)v3 + 16 * ((v25 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(unsigned int *)(v26 + 16);
    if ((v25 & 0x800000) != 0) {
      uint64_t v28 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v98 = v28;
    uint64_t v99 = v27;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    unint64_t AttrDictionary = ", ";
    uint64_t v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
    if (*((unsigned char **)v29 + 3) == v30)
    {
      llvm::raw_ostream::write(v29, ")", 1uLL);
    }
    else
    {
      unsigned char *v30 = 41;
      ++*((void *)v29 + 4);
    }
  }
  uint64_t v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v32 = (unsigned char *)*((void *)v31 + 4);
  if ((unint64_t)v32 >= *((void *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((void *)v31 + 4) = v32 + 1;
    *uint64_t v32 = 32;
  }
  unint64_t v33 = *(unsigned int *)(*(void *)v3 + 44);
  uint64_t v34 = (void **)(*(void *)v3 + 16 * ((v33 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
    uint64_t v35 = *(void *)v3 + 16 * ((v33 >> 23) & 1) + 64;
  }
  else {
    uint64_t v35 = 0;
  }
  if ((v33 & 0x800000) != 0)
  {
    uint64_t v36 = *(void *)(*(void *)v3 + 72);
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    uint64_t v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v38) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    uint64_t v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v96) {
      goto LABEL_57;
    }
  }
  unint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v40 = (_WORD *)*((void *)v39 + 4);
  int64_t v97 = v3;
  if (*((void *)v39 + 3) - (void)v40 <= 1uLL)
  {
    llvm::raw_ostream::write(v39, " {", 2uLL);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    uint64_t v42 = v41 << 32;
    if (!(v41 << 32)) {
      goto LABEL_53;
    }
LABEL_49:
    int v43 = v41;
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *Value);
    uint64_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v46 = *((void *)v45 + 4);
    if ((unint64_t)(*((void *)v45 + 3) - v46) > 2)
    {
      *(unsigned char *)(v46 + 2) = 32;
      *(_WORD *)uint64_t v46 = 15648;
      *((void *)v45 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v45, " = ", 3uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v36 + 32 * v37 + 24));
    if (v42 != 0x100000000)
    {
      uint64_t v88 = v36 + 32 * v37;
      uint64_t v89 = 1;
      uint64_t v90 = 0x100000000;
      do
      {
        long long v91 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v92 = (_WORD *)*((void *)v91 + 4);
        if (*((void *)v91 + 3) - (void)v92 > 1uLL)
        {
          _WORD *v92 = 8236;
          *((void *)v91 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v91, ", ", 2uLL);
        }
        uint64_t v93 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(v93 + 8 * v89));
        unsigned int v94 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v95 = *((void *)v94 + 4);
        if ((unint64_t)(*((void *)v94 + 3) - v95) > 2)
        {
          *(unsigned char *)(v95 + 2) = 32;
          *(_WORD *)uint64_t v95 = 15648;
          *((void *)v94 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v94, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v88 + (v90 >> 27) + 24));
        ++v89;
        v90 += 0x100000000;
      }
      while (v43 != v89);
    }
    goto LABEL_53;
  }
  _WORD *v40 = 31520;
  *((void *)v39 + 4) += 2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
  uint64_t v42 = v41 << 32;
  if (v41 << 32) {
    goto LABEL_49;
  }
LABEL_53:
  int64_t v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v48 = (unsigned char *)*((void *)v47 + 4);
  if ((unint64_t)v48 >= *((void *)v47 + 3))
  {
    llvm::raw_ostream::write(v47, 125);
  }
  else
  {
    *((void *)v47 + 4) = v48 + 1;
    *uint64_t v48 = 125;
  }
  unint64_t v3 = v97;
LABEL_57:
  unint64_t v49 = *(void *)v3 + 16 * (((unint64_t)*(unsigned int *)(*(void *)v3 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
    unint64_t v49 = 0;
  }
  if (*(_DWORD *)(v49 + 24))
  {
    uint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v51 = (unsigned char *)*((void *)v50 + 4);
    if ((unint64_t)v51 >= *((void *)v50 + 3))
    {
      llvm::raw_ostream::write(v50, 32);
    }
    else
    {
      *((void *)v50 + 4) = v51 + 1;
      *int v51 = 32;
    }
    char v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v53 = (_WORD *)*((void *)v52 + 4);
    if (*((void *)v52 + 3) - (void)v53 > 1uLL)
    {
      *uint64_t v53 = 15917;
      *((void *)v52 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v52, "->", 2uLL);
    }
    int64_t v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v55 = (unsigned char *)*((void *)v54 + 4);
    if ((unint64_t)v55 >= *((void *)v54 + 3))
    {
      llvm::raw_ostream::write(v54, 32);
    }
    else
    {
      *((void *)v54 + 4) = v55 + 1;
      *long long v55 = 32;
    }
    unsigned int v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v57 = (unsigned char *)*((void *)v56 + 4);
    if (*((unsigned char **)v56 + 3) == v57)
    {
      llvm::raw_ostream::write(v56, "(", 1uLL);
    }
    else
    {
      *unsigned int v57 = 40;
      ++*((void *)v56 + 4);
    }
    unint64_t v58 = *(unsigned int *)(*(void *)v3 + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v59 = (_DWORD *)(*(void *)v3 + 16 * ((v58 >> 23) & 1) + 64);
    }
    else {
      uint64_t v59 = 0;
    }
    int v60 = v59[4];
    int v61 = v59[5];
    int v62 = v59[6];
    if ((v58 & 0x800000) != 0) {
      uint64_t v63 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (v61 + v60);
    uint64_t v65 = v63 + 32 * v64;
    uint64_t v66 = (v62 + v64) - v64;
    int64_t v67 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v65, 0, v65, v66, (uint64_t)a2, v67, (uint64_t)&v102);
    int64_t v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v69 = (unsigned char *)*((void *)v68 + 4);
    if ((unint64_t)v69 >= *((void *)v68 + 3))
    {
      llvm::raw_ostream::write(v68, 32);
    }
    else
    {
      *((void *)v68 + 4) = v69 + 1;
      unsigned char *v69 = 32;
    }
    int64_t v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v71 = (unsigned char *)*((void *)v70 + 4);
    if (*((unsigned char **)v70 + 3) == v71)
    {
      llvm::raw_ostream::write(v70, ":", 1uLL);
    }
    else
    {
      unsigned char *v71 = 58;
      ++*((void *)v70 + 4);
    }
    unint64_t v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v73 = (unsigned char *)*((void *)v72 + 4);
    if ((unint64_t)v73 >= *((void *)v72 + 3))
    {
      llvm::raw_ostream::write(v72, 32);
    }
    else
    {
      *((void *)v72 + 4) = v73 + 1;
      *uint64_t v73 = 32;
    }
    unint64_t v74 = *(unsigned int *)(*(void *)v3 + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v75 = (_DWORD *)(*(void *)v3 + 16 * ((v74 >> 23) & 1) + 64);
    }
    else {
      uint64_t v75 = 0;
    }
    int v76 = v75[4];
    int v77 = v75[5];
    int v78 = v75[6];
    if ((v74 & 0x800000) != 0) {
      uint64_t v79 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v79 = 0;
    }
    uint64_t v80 = (v77 + v76);
    uint64_t v98 = v79 + 32 * v80;
    uint64_t v99 = (v78 + v80) - v80;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    unint64_t AttrDictionary = ", ";
    uint64_t v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    int64_t v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v82 = (unsigned char *)*((void *)v81 + 4);
    if (*((unsigned char **)v81 + 3) == v82)
    {
      llvm::raw_ostream::write(v81, ")", 1uLL);
    }
    else
    {
      *uint64_t v82 = 41;
      ++*((void *)v81 + 4);
    }
  }
  uint64_t v102 = &v104;
  v104 = "operandSegmentSizes";
  uint64_t v105 = 19;
  unint64_t v106 = "opName";
  uint64_t v107 = 6;
  uint64_t v103 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, 3uLL, 16);
  int64_t v83 = (char *)v102 + 16 * v103;
  *int64_t v83 = "attributeValueNames";
  v83[1] = 19;
  LODWORD(v103) = v103 + 1;
  int64_t v84 = *(mlir::Operation **)v3;
  if (*(unsigned char *)(*(void *)v3 + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v84);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v84 + 56);
  }
  uint64_t v86 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, v86, v87, v102, v103);
  if (v102 != &v104) {
    free(v102);
  }
}

uint64_t mlir::pdl::PatternOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      int v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      uint64_t v26 = &v76;
      uint64_t v27 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v69 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v27 = (char *)v80;
          uint64_t v26 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v26 = &v76;
          uint64_t v27 = (char *)v80;
        }
      }
      uint64_t v28 = &v27[24 * v81];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v87;
      uint64_t v32 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v87 = v30;
      operator delete(v32);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    unint64_t v33 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_77;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v75, "benefit", 7uLL);
  if (!v8)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      int v77 = "expected key entry for benefit in DictionaryAttr to set Properties.";
      uint64_t v78 = 67;
      uint64_t v36 = &v76;
      uint64_t v37 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v71 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          uint64_t v37 = (char *)v80;
          uint64_t v36 = (int *)((char *)v80 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          uint64_t v36 = &v76;
          uint64_t v37 = (char *)v80;
        }
      }
      uint64_t v38 = &v37[24 * v81];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v40 = __p;
    if (__p)
    {
      uint64_t v41 = v87;
      uint64_t v42 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v87 = v40;
      operator delete(v42);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    int v43 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *int v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_77;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v78 = 52;
      unint64_t v10 = &v76;
      uint64_t v11 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v64 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v70 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          uint64_t v11 = (char *)v80;
          unint64_t v10 = (int *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          unint64_t v10 = &v76;
          uint64_t v11 = (char *)v80;
        }
      }
      char v12 = &v11[24 * v81];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)char v12 = v13;
      ++v81;
      if (v79[0])
      {
        unint64_t v14 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
        uint64_t v15 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v72 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            uint64_t v15 = (char *)v80;
            unint64_t v14 = (int *)((char *)v80 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            unint64_t v14 = &v76;
            uint64_t v15 = (char *)v80;
          }
        }
        uint64_t v16 = &v15[24 * v81];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v81;
        if (v79[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
        }
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v87;
      uint64_t v20 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v87 = v18;
      operator delete(v20);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    int v22 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *int v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
    goto LABEL_77;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v75, "sym_name", 8uLL);
  if (!v46) {
    return 1;
  }
  uint64_t v47 = v46;
  if (*(_UNKNOWN **)(*(void *)v46 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v46;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    int v76 = 3;
    uint64_t v78 = 53;
    uint64_t v48 = &v76;
    unint64_t v49 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v67 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        int64_t v73 = (char *)&v76 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        unint64_t v49 = (char *)v80;
        uint64_t v48 = (int *)((char *)v80 + v73);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        uint64_t v48 = &v76;
        unint64_t v49 = (char *)v80;
      }
    }
    uint64_t v50 = &v49[24 * v81];
    long long v51 = *(_OWORD *)v48;
    *((void *)v50 + 2) = *((void *)v48 + 2);
    *(_OWORD *)uint64_t v50 = v51;
    ++v81;
    if (v79[0])
    {
      char v52 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v47);
      uint64_t v53 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v74 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v53 = (char *)v80;
          char v52 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          char v52 = &v76;
          uint64_t v53 = (char *)v80;
        }
      }
      int64_t v54 = &v53[24 * v81];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)int64_t v54 = v55;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
  }
  if (v88)
  {
    unsigned int v56 = __p;
    if (__p)
    {
      unsigned int v57 = v87;
      unint64_t v58 = __p;
      if (v87 != __p)
      {
        do
          unsigned int v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      uint64_t v87 = v56;
      operator delete(v58);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    uint64_t v59 = v85;
    int v23 = v84;
    if (v85 == v84)
    {
LABEL_78:
      int64_t v85 = v21;
      operator delete(v23);
LABEL_79:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *uint64_t v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v21);
LABEL_77:
    int v23 = v84;
    goto LABEL_78;
  }
  return 0;
}

uint64_t mlir::pdl::PatternOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"benefit", 7, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    uint64_t *v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      unint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  uint64_t *v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  unint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  unint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::PatternOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v8, (void **)"benefit", (const char *)7, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v9, (void **)"sym_name", (const char *)8, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    goto LABEL_11;
  }
  uint64_t v36 = a1;
  uint64_t Value = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 16)) {
    goto LABEL_11;
  }
  uint64_t v35 = a1;
  mlir::IntegerAttr::getValue((uint64_t)&v35, (llvm::APInt *)&v41);
  unsigned int v10 = v42[0] - 1;
  if (v42[0] >= 0x41) {
    uint64_t v11 = (uint64_t *)(v41 + 8 * (v10 >> 6));
  }
  else {
    uint64_t v11 = &v41;
  }
  uint64_t v12 = (1 << v10) & *v11;
  if (v42[0] >= 0x41 && v41) {
    MEMORY[0x21667D390]();
  }
  if (!v12) {
    return 1;
  }
LABEL_11:
  a4(&v41, a5);
  if (v41)
  {
    LODWORD(Value) = 3;
    uint64_t v38 = "attribute '";
    uint64_t v39 = 11;
    p_uint64_t Value = &Value;
    uint64_t v14 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v31 = v44 + 1;
      if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
      {
        int64_t v33 = (char *)&Value - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        uint64_t v14 = (char *)v43;
        p_uint64_t Value = (void ***)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        p_uint64_t Value = &Value;
        uint64_t v14 = (char *)v43;
      }
    }
    uint64_t v15 = &v14[24 * v44];
    long long v16 = *(_OWORD *)p_Value;
    *((void *)v15 + 2) = p_Value[2];
    *(_OWORD *)uint64_t v15 = v16;
    ++v44;
    if (v41)
    {
      __int16 v40 = 261;
      uint64_t Value = a2;
      uint64_t v38 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v42, &Value);
      if (v41)
      {
        LODWORD(Value) = 3;
        uint64_t v38 = "' failed to satisfy constraint: 16-bit signless integer attribute whose value is non-negative";
        uint64_t v39 = 93;
        long long v17 = &Value;
        uint64_t v18 = (char *)v43;
        if (v44 >= v45)
        {
          unint64_t v32 = v44 + 1;
          if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
          {
            int64_t v34 = (char *)&Value - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            uint64_t v18 = (char *)v43;
            long long v17 = (void ***)((char *)v43 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            long long v17 = &Value;
            uint64_t v18 = (char *)v43;
          }
        }
        uint64_t v19 = &v18[24 * v44];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = v17[2];
        *(_OWORD *)uint64_t v19 = v20;
        ++v44;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v51)
  {
    int v22 = __p;
    if (__p)
    {
      int v23 = v50;
      uint64_t v24 = __p;
      if (v50 != __p)
      {
        do
          int v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v50 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v47;
    if (v47)
    {
      uint64_t v26 = v48;
      uint64_t v27 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v29 = *--v26;
          uint64_t v28 = v29;
          *uint64_t v26 = 0;
          if (v29) {
            MEMORY[0x21667D390](v28, 0x1000C8077774924);
          }
        }
        while (v26 != v25);
        uint64_t v27 = v47;
      }
      uint64_t v48 = v25;
      operator delete(v27);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v21;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::pdl::PatternOp::verifyInvariantsImpl(mlir::pdl::PatternOp *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    uint64_t v50 = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v4, (void **)"benefit", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0; {
    uint64_t v50 = *(void *)this;
    }
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v5, (void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0; {
    uint64_t v6 = *(void *)this;
    }
    unint64_t v7 = ((*(void *)this
         + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
         + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
         + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(*(void *)this + 40);
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8 != v7 && *(void *)(v8 + 8) == v7) {
      return 1;
    }
    v45[0] = (void **)"region #";
    __int16 v46 = 259;
    mlir::Operation::emitOpError(v6, v45, (uint64_t)&v50);
    if (v50)
    {
      LODWORD(v43[0]) = 5;
      v43[1] = 0;
      uint64_t v9 = v43;
      unsigned int v10 = (char *)v52;
      if (v53 >= v54)
      {
        unint64_t v37 = v53 + 1;
        if (v52 <= v43 && (char *)v52 + 24 * v53 > (char *)v43)
        {
          int64_t v39 = (char *)v43 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          unsigned int v10 = (char *)v52;
          uint64_t v9 = (void ***)((char *)v52 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          uint64_t v9 = v43;
          unsigned int v10 = (char *)v52;
        }
      }
      uint64_t v11 = &v10[24 * v53];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = v9[2];
      *(_OWORD *)uint64_t v11 = v12;
      ++v53;
      BOOL v13 = v50 == 0;
    }
    else
    {
      BOOL v13 = 1;
    }
    __int16 v42 = 1283;
    v41[0] = " ('";
    v41[2] = "bodyRegion";
    v41[3] = 10;
    v43[0] = (void **)v41;
    v43[2] = (void **)"') ";
    __int16 v44 = 770;
    if (!v13)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v51, v43);
      if (v50)
      {
        int v47 = 3;
        uint64_t v48 = "failed to verify constraint: region with 1 blocks";
        uint64_t v49 = 49;
        int v23 = &v47;
        uint64_t v24 = (char *)v52;
        if (v53 >= v54)
        {
          unint64_t v38 = v53 + 1;
          if (v52 <= &v47 && (char *)v52 + 24 * v53 > (char *)&v47)
          {
            int64_t v40 = (char *)&v47 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            uint64_t v24 = (char *)v52;
            int v23 = (int *)((char *)v52 + v40);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            int v23 = &v47;
            uint64_t v24 = (char *)v52;
          }
        }
        uint64_t v25 = &v24[24 * v53];
        long long v26 = *(_OWORD *)v23;
        *((void *)v25 + 2) = *((void *)v23 + 2);
        *(_OWORD *)uint64_t v25 = v26;
        ++v53;
      }
    }
    char v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    }
    if (v60)
    {
      uint64_t v28 = __p;
      if (__p)
      {
        uint64_t v29 = v59;
        uint64_t v30 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        uint64_t v59 = v28;
        operator delete(v30);
      }
      unint64_t v31 = v56;
      if (v56)
      {
        unint64_t v32 = v57;
        int64_t v33 = v56;
        if (v57 != v56)
        {
          do
          {
            uint64_t v35 = *--v32;
            uint64_t v34 = v35;
            *unint64_t v32 = 0;
            if (v35) {
              MEMORY[0x21667D390](v34, 0x1000C8077774924);
            }
          }
          while (v32 != v31);
          int64_t v33 = v56;
        }
        unsigned int v57 = v31;
        operator delete(v33);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
    return v27 != 0;
  }
  else
  {
    v45[0] = (void **)"requires attribute 'benefit'";
    __int16 v46 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v45, (uint64_t)&v50);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    }
    if (v60)
    {
      uint64_t v15 = __p;
      if (__p)
      {
        long long v16 = v59;
        long long v17 = __p;
        if (v59 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          long long v17 = __p;
        }
        uint64_t v59 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v56;
      if (v56)
      {
        uint64_t v19 = v57;
        long long v20 = v56;
        if (v57 != v56)
        {
          do
          {
            uint64_t v22 = *--v19;
            uint64_t v21 = v22;
            void *v19 = 0;
            if (v22) {
              MEMORY[0x21667D390](v21, 0x1000C8077774924);
            }
          }
          while (v19 != v18);
          long long v20 = v56;
        }
        unsigned int v57 = v18;
        operator delete(v20);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
  }
  return v14;
}

void mlir::pdl::PatternOp::parse()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void mlir::pdl::PatternOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v34[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v4 = 0;
  }
  if (*(void *)(v4 + 8))
  {
    uint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v6 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 32);
    }
    else
    {
      *((void *)v5 + 4) = v6 + 1;
      *uint64_t v6 = 32;
    }
    unint64_t v7 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v7 = 0;
    }
    unint64_t v32 = *(void **)(v7 + 8);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v32);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, AttrData, v9);
  }
  unsigned int v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    unsigned char *v13 = 58;
    ++*((void *)v12 + 4);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  long long v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (_DWORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 6uLL)
  {
    *(_DWORD *)((char *)v17 + 3) = 1953064549;
    _DWORD *v17 = 1701733730;
    *((void *)v16 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v16, "benefit", 7uLL);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "(", 1uLL);
  }
  else
  {
    unsigned char *v19 = 40;
    ++*((void *)v18 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  long long v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if (*((unsigned char **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    unsigned char *v21 = 41;
    ++*((void *)v20 + 4);
  }
  unint64_t v32 = v34;
  v34[0] = "sym_name";
  v34[1] = 8;
  _OWORD v34[2] = "benefit";
  v34[3] = 7;
  uint64_t v33 = 0x200000002;
  uint64_t v22 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v25, v32, v33);
  long long v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
    uint64_t v28 = *this;
    unint64_t v29 = *((unsigned int *)*this + 11);
    if ((v29 & 0x7FFFFF) != 0) {
      goto LABEL_33;
    }
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *char v27 = 32;
    uint64_t v28 = *this;
    unint64_t v29 = *((unsigned int *)*this + 11);
    if ((v29 & 0x7FFFFF) != 0)
    {
LABEL_33:
      unint64_t v30 = (((unint64_t)v28 + 16 * ((v29 >> 23) & 1) + ((v29 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v28 + 10);
      goto LABEL_36;
    }
  }
  unint64_t v30 = 0;
LABEL_36:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v30, 1, 1, 0);
  if (v32 != v34) {
    free(v32);
  }
}

uint64_t mlir::pdl::RangeOp::verifyInvariantsImpl(mlir::pdl::RangeOp *this)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && (uint64_t v3 = *(unsigned int *)(v2 + 68), v3))
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 72) + 24;
    while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)v5 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v4))
    {
      ++v4;
      v5 += 32;
      if (v3 == v4)
      {
        uint64_t v2 = *(void *)this;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v6 = *(_DWORD *)(v2 + 36);
    uint64_t v7 = v2 - 16;
    if (v6) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    uint64_t v10 = *(void *)this;
    uint64_t v11 = (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v11 + 17) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v55[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v55) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        return 1;
      }
      v50[0] = v11;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v50) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return 1;
      }
    }
    __int16 v51 = 261;
    v50[0] = (void **)"result";
    v50[1] = (void **)6;
    mlir::Operation::emitOpError(v10, v50, (uint64_t)v55);
    if (v55[0])
    {
      int v52 = 3;
      unsigned int v53 = " #";
      uint64_t v54 = 2;
      long long v12 = &v52;
      BOOL v13 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v46 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          BOOL v13 = (char *)v56;
          long long v12 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          long long v12 = &v52;
          BOOL v13 = (char *)v56;
        }
      }
      uint64_t v14 = &v13[24 * v57];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      uint64_t v16 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        unsigned int v53 = 0;
        long long v17 = &v52;
        uint64_t v18 = (char *)v56;
        if (v16 >= v58)
        {
          unint64_t v41 = v16 + 1;
          BOOL v42 = (char *)v56 + 24 * v16 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            int64_t v47 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v18 = (char *)v56;
            long long v17 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            long long v17 = &v52;
            uint64_t v18 = (char *)v56;
          }
        }
        uint64_t v19 = &v18[24 * v57];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        uint64_t v21 = ++v57;
        if (v55[0])
        {
          int v52 = 3;
          uint64_t v54 = 99;
          uint64_t v22 = &v52;
          int v23 = (char *)v56;
          if (v21 >= v58)
          {
            unint64_t v43 = v21 + 1;
            BOOL v44 = (char *)v56 + 24 * v21 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              int64_t v48 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              int v23 = (char *)v56;
              uint64_t v22 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              uint64_t v22 = &v52;
              int v23 = (char *)v56;
            }
          }
          uint64_t v24 = &v23[24 * v57];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = *((void *)v22 + 2);
          *(_OWORD *)uint64_t v24 = v25;
          ++v57;
          if (v55[0])
          {
            long long v26 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v11);
            char v27 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v49 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                char v27 = (char *)v56;
                long long v26 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                long long v26 = &v52;
                char v27 = (char *)v56;
              }
            }
            uint64_t v28 = &v27[24 * v57];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = *((void *)v26 + 2);
            *(_OWORD *)uint64_t v28 = v29;
            ++v57;
          }
        }
      }
    }
    char v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      unint64_t v31 = __p;
      if (__p)
      {
        unint64_t v32 = v63;
        uint64_t v33 = __p;
        if (v63 != __p)
        {
          do
            unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        unint64_t v63 = v31;
        operator delete(v33);
      }
      uint64_t v34 = v60;
      if (v60)
      {
        uint64_t v35 = v61;
        uint64_t v36 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v38 = *--v35;
            uint64_t v37 = v38;
            void *v35 = 0;
            if (v38) {
              MEMORY[0x21667D390](v37, 0x1000C8077774924);
            }
          }
          while (v35 != v34);
          uint64_t v36 = v60;
        }
        uint64_t v61 = v34;
        operator delete(v36);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
    if (v30) {
      return 1;
    }
  }
  return 0;
}

BOOL mlir::pdl::RangeOp::parse(uint64_t a1, uint64_t a2)
{
  v18[16] = *MEMORY[0x263EF8340];
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v12 = 0;
  BOOL v13 = &v15;
  uint64_t v14 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 0, 1, 0xFFFFFFFFLL)|| v17&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&v13)))
  {
    goto LABEL_13;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v13, v14);
  if (v11[1])
  {
    uint64_t v5 = (void *)mlir::TypeRange::dereference_iterator(v11[0], 0);
    RangeElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf(v5);
    uint64_t v12 = mlir::pdl::RangeType::get((uint64_t)RangeElementTypeOrSelf);
  }
  else if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v12))
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
LABEL_13:
    BOOL v8 = 0;
    uint64_t v9 = v13;
    if (v13 == &v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = v12;
  ++*(_DWORD *)(a2 + 72);
  BOOL v8 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v16, (uint64_t)&v13, v4, a2 + 16) != 0;
  uint64_t v9 = v13;
  if (v13 != &v15) {
LABEL_14:
  }
    free(v9);
LABEL_15:
  if (v16 != v18) {
    free(v16);
  }
  return v8;
}

void mlir::pdl::RangeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v42[2] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      *uint64_t v5 = 32;
    }
    int v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *((unsigned int *)v6 + 17);
      uint64_t v8 = *((void *)v6 + 9);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v39 = ", ";
    unint64_t v40 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v39);
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      unsigned char *v11 = 32;
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ":", 1uLL);
    }
    else
    {
      unsigned char *v13 = 58;
      ++*((void *)v12 + 4);
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if ((unint64_t)v15 >= *((void *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((void *)v14 + 4) = v15 + 1;
      *uint64_t v15 = 32;
    }
    uint64_t v16 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v17 = *((unsigned int *)v16 + 17);
      uint64_t v18 = *((void *)v16 + 9);
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
    v36[0] = v18;
    v36[1] = v17;
    mlir::OperandRange::getTypes(v36, (uint64_t *)&v39);
    unint64_t AttrDictionary = ", ";
    uint64_t v38 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, v41[0], v41[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  }
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    unsigned char *v20 = 32;
  }
  uint64_t v21 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v22 = *((unsigned int *)v21 + 17);
    int v23 = (const char *)*((void *)v21 + 9);
  }
  else
  {
    int v23 = 0;
    uint64_t v22 = 0;
  }
  unint64_t AttrDictionary = v23;
  uint64_t v38 = v22;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v33);
  mlir::ValueRange::ValueRange((unint64_t *)&v39, v33 + 32 * v34, v35 - v34);
  mlir::TypeRange::TypeRange(v42, (uint64_t)v39, v40);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v24 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0);
  if (!v42[1])
  {
    unint64_t v26 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    char v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v28 = (_WORD *)*((void *)v27 + 4);
    if (*((void *)v27 + 3) - (void)v28 > 1uLL)
    {
      *uint64_t v28 = 8250;
      *((void *)v27 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v27, ": ", 2uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, v26);
  }
  int64_t v39 = v41;
  unint64_t v40 = 0x200000000;
  long long v29 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v29);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v29 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v32, v39, v40);
  if (v39 != v41) {
    free(v39);
  }
}

BOOL mlir::pdl::ReplaceOp::setPropertiesFromAttr(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v36 = v6;
  if (!v6)
  {
    a3(v40, a4);
    if (v40[0])
    {
      int v37 = 3;
      uint64_t v38 = "expected DictionaryAttr to set properties";
      uint64_t v39 = 41;
      uint64_t v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v42 >= v43)
      {
        unint64_t v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          int64_t v34 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v11 = (char *)v41;
          uint64_t v10 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
      }
    }
    if (!v49) {
      return 0;
    }
    uint64_t v14 = __p;
    if (__p)
    {
      uint64_t v15 = v48;
      uint64_t v16 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      int64_t v48 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_43;
    }
    uint64_t v18 = v46;
    uint64_t v19 = v45;
    if (v46 == v45)
    {
LABEL_42:
      int64_t v46 = v17;
      operator delete(v19);
LABEL_43:
      if (v41 != v44) {
        free(v41);
      }
      return 0;
    }
    do
    {
      uint64_t v21 = *--v18;
      uint64_t v20 = v21;
      void *v18 = 0;
      if (v21) {
        MEMORY[0x21667D390](v20, 0x1000C8077774924);
      }
    }
    while (v18 != v17);
LABEL_41:
    uint64_t v19 = v45;
    goto LABEL_42;
  }
  uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v36, "operandSegmentSizes", 0x13uLL);
  if (!v8)
  {
    uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v36, "operand_segment_sizes", 0x15uLL);
    if (!v8)
    {
      a3(v40, a4);
      if (v40[0])
      {
        int v37 = 3;
        uint64_t v38 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v39 = 79;
        uint64_t v22 = &v37;
        int v23 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v33 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v35 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            int v23 = (char *)v41;
            uint64_t v22 = (int *)((char *)v41 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            uint64_t v22 = &v37;
            int v23 = (char *)v41;
          }
        }
        uint64_t v24 = &v23[24 * v42];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v42;
        if (v40[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
        }
      }
      if (!v49) {
        return 0;
      }
      unint64_t v26 = __p;
      if (__p)
      {
        char v27 = v48;
        uint64_t v28 = __p;
        if (v48 != __p)
        {
          do
            char v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        int64_t v48 = v26;
        operator delete(v28);
      }
      uint64_t v17 = v45;
      if (!v45) {
        goto LABEL_43;
      }
      long long v29 = v46;
      uint64_t v19 = v45;
      if (v46 == v45) {
        goto LABEL_42;
      }
      do
      {
        uint64_t v31 = *--v29;
        uint64_t v30 = v31;
        void *v29 = 0;
        if (v31) {
          MEMORY[0x21667D390](v30, 0x1000C8077774924);
        }
      }
      while (v29 != v17);
      goto LABEL_41;
    }
  }
  return mlir::convertFromAttribute(a1, (const char *)3, v8, a3, a4) != 0;
}

uint64_t mlir::pdl::ReplaceOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t a2)
{
  v16[6] = *MEMORY[0x263EF8340];
  long long v13 = a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  uint64_t v2 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2, 3);
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v13, (uint64_t)"operandSegmentSizes", 19, v2);
  uint64_t v5 = v4;
  unsigned int v6 = v15;
  if (v15 >= HIDWORD(v15))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v15 + 1, 16);
    unsigned int v6 = v15;
  }
  uint64_t v7 = (uint64_t *)((char *)v14 + 16 * v6);
  uint64_t *v7 = NamedAttr;
  v7[1] = v5;
  BOOL v8 = __CFADD__(v15, 1);
  uint64_t v9 = (v15 + 1);
  LODWORD(v15) = v15 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v11 = v14;
    if (v14 == v16) {
      return DictionaryAttr;
    }
    goto LABEL_8;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v13, (uint64_t *)v14, v9);
  uint64_t v11 = v14;
  if (v14 != v16) {
LABEL_8:
  }
    free(v11);
  return DictionaryAttr;
}

unint64_t mlir::pdl::ReplaceOp::computePropertiesHash(void *a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v17 = a1;
    uint64_t v1 = &unk_267770000;
    int v11 = v10;
    a1 = v17;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v17;
    }
  }
  uint64_t v2 = v1[385];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)((char *)a1 + 4);
  {
    uint64_t v15 = v4;
    uint64_t v18 = v2;
    uint64_t v16 = v3;
    uint64_t v4 = v15;
    uint64_t v3 = v16;
    uint64_t v2 = v18;
    uint64_t v1 = &unk_267770000;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      uint64_t v4 = v15;
      uint64_t v3 = v16;
      uint64_t v2 = v18;
      uint64_t v1 = (void *)&unk_267770000;
    }
  }
  uint64_t v5 = __ROR8__(v4 + 12, 12);
  unint64_t v6 = (0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v5 ^ ((0x9DDFEA08EB382D69 * (v3 ^ v2 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ v2 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v3 ^ v2 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ v2 ^ v5)))) >> 47))) ^ v4;
  uint64_t v7 = 8 * v6 + 8;
  unint64_t v8 = v1[385] ^ HIDWORD(v6);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)))) >> 47));
}

uint64_t mlir::pdl::ReplaceOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = (void *)result;
  if (a3 == 19)
  {
    uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if (result) {
      return result;
    }
  }
  else
  {
    if (a3 != 21) {
      return result;
    }
    BOOL v6 = *(void *)__s1 == 0x5F646E617265706FLL && *((void *)__s1 + 1) == 0x5F746E656D676573;
    if (!v6 || *(void *)(__s1 + 13) != 0x73657A69735F746ELL) {
      return result;
    }
  }
  if (a4)
  {
    uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    if (result) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = 0;
    }
    int v10 = v8;
    if (result)
    {
      uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
      if (result == 3)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v10);
        if (v9) {
          return (uint64_t)memmove(v5, (const void *)result, 4 * v9);
        }
      }
    }
  }
  return result;
}

BOOL mlir::pdl::ReplaceOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          BOOL v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            BOOL v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          unint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    unint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, v3, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::ReplaceOp::verifyInvariantsImpl(mlir::pdl::ReplaceOp *this)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v4 = (v3 >> 23) & 1;
  uint64_t v5 = (const char *)*(unsigned int *)(*(void *)this + 16 * v4 + 64);
  if ((v3 & 0x800000) != 0)
  {
    uint64_t v6 = *(void *)(v2 + 72);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5)
    {
LABEL_3:
      uint64_t v7 = 0;
      uint64_t v8 = v6 + 24;
      while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v7))
      {
        ++v7;
        v8 += 32;
        if (v5 == v7)
        {
          uint64_t v2 = *(void *)this;
          unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
          uint64_t v4 = (v3 >> 23) & 1;
          int v9 = v3 & 0x800000;
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
  int v9 = v3 & 0x800000;
LABEL_9:
  if (BYTE3(v3)) {
    uint64_t v10 = (unsigned int *)(v2 + 16 * v4 + 64);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *v10;
  unsigned int v12 = v10[1];
  if (v9)
  {
    uint64_t v13 = *(void *)(v2 + 72);
    unint64_t v14 = v12 + v11 - v11;
    if (v14 > 1)
    {
LABEL_14:
      long long v55 = (void **)"operand group starting at #";
      __int16 v56 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, &v55, (uint64_t)v60);
      if (v60[0])
      {
        int v57 = 5;
        unsigned int v58 = v5;
        uint64_t v15 = &v57;
        __int16 v16 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v47 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v52 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            __int16 v16 = (char *)v61;
            uint64_t v15 = (int *)((char *)v61 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            uint64_t v15 = &v57;
            __int16 v16 = (char *)v61;
          }
        }
        uint64_t v17 = &v16[24 * v62];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v17 = v18;
        uint64_t v19 = ++v62;
        if (v60[0])
        {
          int v57 = 3;
          unsigned int v58 = " requires 0 or 1 element, but found ";
          uint64_t v59 = 36;
          uint64_t v20 = &v57;
          uint64_t v21 = (char *)v61;
          if (v19 >= v63)
          {
            unint64_t v48 = v19 + 1;
            BOOL v49 = (char *)v61 + 24 * v19 > (char *)&v57;
            if (v61 <= &v57 && v49)
            {
              int64_t v53 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              uint64_t v21 = (char *)v61;
              uint64_t v20 = (int *)((char *)v61 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              uint64_t v20 = &v57;
              uint64_t v21 = (char *)v61;
            }
          }
          uint64_t v22 = &v21[24 * v62];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          uint64_t v24 = ++v62;
          if (v60[0])
          {
            int v57 = 5;
            unsigned int v58 = (const char *)v14;
            char v25 = &v57;
            uint64_t v26 = (char *)v61;
            if (v24 >= v63)
            {
              unint64_t v50 = v24 + 1;
              BOOL v51 = (char *)v61 + 24 * v24 > (char *)&v57;
              if (v61 <= &v57 && v51)
              {
                int64_t v54 = (char *)&v57 - (unsigned char *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                uint64_t v26 = (char *)v61;
                char v25 = (int *)((char *)v61 + v54);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                char v25 = &v57;
                uint64_t v26 = (char *)v61;
              }
            }
            char v27 = &v26[24 * v62];
            long long v28 = *(_OWORD *)v25;
            *((void *)v27 + 2) = *((void *)v25 + 2);
            *(_OWORD *)char v27 = v28;
            ++v62;
          }
        }
      }
      uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (v69)
      {
        uint64_t v30 = __p;
        if (__p)
        {
          uint64_t v31 = v68;
          unint64_t v32 = __p;
          if (v68 != __p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            unint64_t v32 = __p;
          }
          unint64_t v68 = v30;
          operator delete(v32);
        }
        unint64_t v33 = v65;
        if (v65)
        {
          int64_t v34 = v66;
          int64_t v35 = v65;
          if (v66 != v65)
          {
            do
            {
              uint64_t v37 = *--v34;
              uint64_t v36 = v37;
              *int64_t v34 = 0;
              if (v37) {
                MEMORY[0x21667D390](v36, 0x1000C8077774924);
              }
            }
            while (v34 != v33);
            int64_t v35 = v65;
          }
          unint64_t v66 = v33;
          operator delete(v35);
        }
        if (v61 != v64) {
          free(v61);
        }
      }
      return v29;
    }
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = v12 + v11 - v11;
    if (v14 > 1) {
      goto LABEL_14;
    }
  }
  if (!v12)
  {
LABEL_45:
    uint64_t v39 = v2 + 16 * v4 + 64;
    if (BYTE3(v3)) {
      unint64_t v40 = (_DWORD *)v39;
    }
    else {
      unint64_t v40 = 0;
    }
    int v41 = v40[2];
    if (v9)
    {
      uint64_t v42 = *(void *)(v2 + 72);
      if (v41) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if (v41)
      {
LABEL_50:
        uint64_t v43 = (v40[1] + *v40);
        uint64_t v44 = (v41 + v43) - v43;
        for (uint64_t i = v42 + 32 * v43 + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v5);
              i += 32)
        {
          LODWORD(v5) = v5 + 1;
          if (!--v44) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  uint64_t v38 = v13 + 32 * v11 + 24;
  while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)v38 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v5))
  {
    LODWORD(v5) = v5 + 1;
    v38 += 32;
    if (!--v14)
    {
      uint64_t v2 = *(void *)this;
      unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
      uint64_t v4 = (v3 >> 23) & 1;
      int v9 = v3 & 0x800000;
      goto LABEL_45;
    }
  }
  return 0;
}

BOOL mlir::pdl::ReplaceOp::parse(uint64_t a1, uint64_t a2)
{
  v34[4] = *MEMORY[0x263EF8340];
  memset(v34, 0, 24);
  uint64_t v31 = v33;
  uint64_t v32 = 0x400000000;
  v29[0] = &v30;
  v29[1] = (void *)0x100000000;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v34, 1)) {
    goto LABEL_22;
  }
  __int16 v25 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "with", 4, v24))goto LABEL_22; {
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  }
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v31, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v29)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  memset(v24, 0, 24);
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 680))(a1, v24, 1);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5) {
      goto LABEL_22;
    }
    uint64_t v6 = v24;
    uint64_t v7 = (char *)v26;
    if (v27 >= HIDWORD(v27))
    {
      unint64_t v22 = v27 + 1;
      if (v26 <= v24 && (char *)v26 + 32 * v27 > (char *)v24)
      {
        int64_t v23 = (char *)v24 - (unsigned char *)v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        uint64_t v7 = (char *)v26;
        uint64_t v6 = (char *)v26 + v23;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        uint64_t v6 = v24;
        uint64_t v7 = (char *)v26;
      }
    }
    uint64_t v8 = &v7[32 * v27];
    long long v9 = v6[1];
    *(_OWORD *)uint64_t v8 = *v6;
    *((_OWORD *)v8 + 1) = v9;
    LODWORD(v27) = v27 + 1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_22;
  }
  int v10 = v27;
  int v11 = v32;
  unsigned int v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  _DWORD *v12 = 1;
  v12[1] = v10;
  void v12[2] = v11;
  uint64_t v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v16 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v34, SingletonImpl, v16))
  {
LABEL_22:
    BOOL v19 = 0;
    uint64_t v20 = v26;
    if (v26 == v28) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v27)
  {
    uint64_t v17 = (char *)v26;
    uint64_t v18 = 32 * v27;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, SingletonImpl, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_20;
      }
    }
    goto LABEL_22;
  }
LABEL_20:
  BOOL v19 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v31, (uint64_t)v29, v4, v16) != 0;
  uint64_t v20 = v26;
  if (v26 != v28) {
LABEL_23:
  }
    free(v20);
LABEL_24:
  if (v29[0] != &v30) {
    free(v29[0]);
  }
  if (v31 != v33) {
    free(v31);
  }
  return v19;
}

void mlir::pdl::ReplaceOp::print(mlir::pdl::ReplaceOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 3uLL)
  {
    _DWORD *v9 = 1752459639;
    *((void *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "with", 4uLL);
  }
  unint64_t v10 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v10 = 0;
  }
  if (*(_DWORD *)(v10 + 8))
  {
    int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v12 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, "(", 1uLL);
    }
    else
    {
      unsigned char *v12 = 40;
      ++*((void *)v11 + 4);
    }
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v14 = (int *)(*(void *)this + 16 * ((v13 >> 23) & 1) + 64);
    }
    else {
      unint64_t v14 = 0;
    }
    int v15 = *v14;
    int v16 = v14[1];
    int v17 = v14[2];
    if ((v13 & 0x800000) != 0) {
      uint64_t v18 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (v16 + v15);
    uint64_t v20 = v18 + 32 * v19;
    uint64_t v21 = (v17 + v19) - v19;
    unint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v53 = ", ";
    uint64_t v54 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v20, 0, v20, v21, (uint64_t)a2, v22, (uint64_t)&v53);
    int64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
    if ((unint64_t)v24 >= *((void *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((void *)v23 + 4) = v24 + 1;
      unsigned char *v24 = 32;
    }
    __int16 v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, ":", 1uLL);
    }
    else
    {
      *uint64_t v26 = 58;
      ++*((void *)v25 + 4);
    }
    uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v28 = (unsigned char *)*((void *)v27 + 4);
    if ((unint64_t)v28 >= *((void *)v27 + 3))
    {
      llvm::raw_ostream::write(v27, 32);
    }
    else
    {
      *((void *)v27 + 4) = v28 + 1;
      *long long v28 = 32;
    }
    unint64_t v29 = *(unsigned int *)(*(void *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v30 = (int *)(*(void *)this + 16 * ((v29 >> 23) & 1) + 64);
    }
    else {
      uint64_t v30 = 0;
    }
    int v31 = *v30;
    int v32 = v30[1];
    int v33 = v30[2];
    if ((v29 & 0x800000) != 0) {
      uint64_t v34 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = (v32 + v31);
    v51[0] = v34 + 32 * v35;
    v51[1] = (v33 + v35) - v35;
    mlir::OperandRange::getTypes(v51, (uint64_t *)&v53);
    v52[0] = ", ";
    v52[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v53, v54, (uint64_t)v55, v56, (uint64_t)a2, (uint64_t)a2, (uint64_t)v52);
    uint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v37 = (unsigned char *)*((void *)v36 + 4);
    if (*((unsigned char **)v36 + 3) == v37)
    {
      llvm::raw_ostream::write(v36, ")", 1uLL);
    }
    else
    {
      *uint64_t v37 = 41;
      ++*((void *)v36 + 4);
    }
  }
  uint64_t v38 = *(void **)this;
  unint64_t v39 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v40 = (unsigned int *)(*(void *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v40 = 0;
  }
  unsigned int v41 = v40[1];
  if ((v39 & 0x800000) != 0)
  {
    uint64_t v42 = v38[9];
    if (!v41) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v42 = 0;
    if (!v41) {
      goto LABEL_52;
    }
  }
  if (!*(void *)(v42 + 32 * *v40 + 24)) {
    goto LABEL_52;
  }
  uint64_t v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v44 = (unsigned char *)*((void *)v43 + 4);
  if ((unint64_t)v44 >= *((void *)v43 + 3))
  {
    llvm::raw_ostream::write(v43, 32);
  }
  else
  {
    *((void *)v43 + 4) = v44 + 1;
    *uint64_t v44 = 32;
  }
  uint64_t v38 = *(void **)this;
  unint64_t v39 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v45 = (unsigned int *)(*(void *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v45 = 0;
  }
  unsigned int v46 = v45[1];
  if ((v39 & 0x800000) != 0)
  {
    uint64_t v47 = v38[9];
    if (!v46) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v47 = 0;
    if (!v46) {
      goto LABEL_52;
    }
  }
  if (*(void *)(v47 + 32 * *v45 + 24))
  {
    (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
    uint64_t v38 = *(void **)this;
    LODWORD(v39) = *(_DWORD *)(*(void *)this + 44);
  }
LABEL_52:
  int64_t v53 = &v55;
  long long v55 = "operandSegmentSizes";
  uint64_t v56 = 19;
  uint64_t v54 = 0x200000001;
  if (BYTE3(v39))
  {
    v52[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v38);
    unint64_t v48 = (mlir::ArrayAttr *)v52;
  }
  else
  {
    unint64_t v48 = (mlir::ArrayAttr *)(v38 + 7);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v48);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v50, v53, v54);
  if (v53 != &v55) {
    free(v53);
  }
}

uint64_t mlir::pdl::ResultOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      long long v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      int v31 = v67;
      int v32 = __p;
      if (v67 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int v33 = v65;
    int64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *int v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "index", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for index in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v40 = __p;
    if (__p)
    {
      unsigned int v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unsigned int v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    int64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    unint64_t v10 = &v56;
    int v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        int v11 = (char *)v60;
        unint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unint64_t v10 = &v56;
        int v11 = (char *)v60;
      }
    }
    unsigned int v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      int v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          int v15 = (char *)v60;
        }
      }
      int v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v22 = v65;
    int64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    int64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl::ResultOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  unsigned int v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"index", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(void **a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    int v31 = a1;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v31) = 3;
    int v32 = "attribute '";
    uint64_t v33 = 11;
    unint64_t v10 = &v31;
    int v11 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        int v11 = (char *)v37;
        unint64_t v10 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unint64_t v10 = &v31;
        int v11 = (char *)v37;
      }
    }
    unsigned int v12 = &v11[24 * v38];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)unsigned int v12 = v13;
    ++v38;
    if (Value)
    {
      __int16 v34 = 261;
      int v31 = a2;
      int v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (Value)
      {
        LODWORD(v31) = 3;
        int v32 = "' failed to satisfy constraint: 32-bit signless integer attribute";
        uint64_t v33 = 65;
        uint64_t v14 = &v31;
        int v15 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            int v15 = (char *)v37;
            uint64_t v14 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v14 = &v31;
            int v15 = (char *)v37;
          }
        }
        int v16 = &v15[24 * v38];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)int v16 = v17;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v45)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v44;
      uint64_t v20 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v44 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v41;
    if (v41)
    {
      unint64_t v22 = v42;
      int64_t v23 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *unint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        int64_t v23 = v41;
      }
      uint64_t v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t *mlir::pdl::ResultOp::getIndex(mlir::pdl::ResultOp *this)
{
  uint64_t v5 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  mlir::IntegerAttr::getValue((uint64_t)&v5, (llvm::APInt *)&v3);
  if (v4 <= 0x40) {
    return v3;
  }
  uint64_t v2 = *v3;
  MEMORY[0x21667D390]();
  return (uint64_t *)v2;
}

BOOL mlir::pdl::ResultOp::verifyInvariantsImpl(mlir::pdl::ResultOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v16 = (void **)"requires attribute 'index'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        BOOL v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        int v11 = v22;
        unsigned int v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          unsigned int v12 = v21;
        }
        unint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::pdl::ResultOp::parse(uint64_t a1, uint64_t a2)
{
  v21[4] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v21, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType)) {
    return 0;
  }
  if (v18)
  {
    uint64_t v6 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v6 = v18;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "of", 2, v19))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    return 0;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v19[0] = a1;
  v19[1] = &v17;
  void v19[2] = a2;
  BOOL v8 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v7 + 96));
  if (v8)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v8, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0; {
  }
    }
  uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  unsigned int v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
  uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, v14, a2 + 16) != 0;
}

void mlir::pdl::ResultOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  BOOL v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v17 = v19;
  v19[0] = "index";
  v19[1] = 5;
  uint64_t v18 = 0x200000001;
  unsigned int v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v17, v18);
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t mlir::pdl::ResultsOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      char v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      unint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          unint64_t v27 = (char *)v48;
        }
      }
      unint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    int64_t v30 = __p;
    if (__p)
    {
      int v31 = v55;
      int v32 = __p;
      if (v55 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    int64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "index", 5uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 50;
    unint64_t v10 = &v44;
    int v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        int v11 = (char *)v48;
        unint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v10 = &v44;
        int v11 = (char *)v48;
      }
    }
    unsigned int v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    ++v49;
    if (v47[0])
    {
      uint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          uint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      int v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = __p;
  if (__p)
  {
    uint64_t v19 = v55;
    __int16 v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      __int16 v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    unint64_t v22 = v53;
    int64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_41:
    int64_t v23 = v52;
LABEL_42:
    int64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::pdl::ResultsOp::verifyInvariantsImpl(mlir::pdl::ResultsOp *this)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v52[0] = v2;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v52)|| !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  unint64_t v6 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  uint64_t v8 = *(void *)this;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v52[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v52) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
      return 1;
    }
  }
  __int16 v48 = 261;
  v47[0] = (void **)"result";
  v47[1] = (void **)6;
  mlir::Operation::emitOpError(v8, v47, (uint64_t)v52);
  if (v52[0])
  {
    int v49 = 3;
    unsigned int v50 = " #";
    uint64_t v51 = 2;
    uint64_t v9 = &v49;
    unint64_t v10 = (char *)v53;
    if (v54 >= v55)
    {
      unint64_t v37 = v54 + 1;
      if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
      {
        int64_t v43 = (char *)&v49 - (unsigned char *)v53;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        unint64_t v10 = (char *)v53;
        uint64_t v9 = (int *)((char *)v53 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        uint64_t v9 = &v49;
        unint64_t v10 = (char *)v53;
      }
    }
    int v11 = &v10[24 * v54];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)int v11 = v12;
    uint64_t v13 = ++v54;
    if (v52[0])
    {
      int v49 = 5;
      unsigned int v50 = 0;
      uint64_t v14 = &v49;
      uint64_t v15 = (char *)v53;
      if (v13 >= v55)
      {
        unint64_t v38 = v13 + 1;
        BOOL v39 = (char *)v53 + 24 * v13 > (char *)&v49;
        if (v53 <= &v49 && v39)
        {
          int64_t v44 = (char *)&v49 - (unsigned char *)v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          uint64_t v15 = (char *)v53;
          uint64_t v14 = (int *)((char *)v53 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          uint64_t v14 = &v49;
          uint64_t v15 = (char *)v53;
        }
      }
      int v16 = &v15[24 * v54];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      uint64_t v18 = ++v54;
      if (v52[0])
      {
        int v49 = 3;
        uint64_t v51 = 77;
        uint64_t v19 = &v49;
        __int16 v20 = (char *)v53;
        if (v18 >= v55)
        {
          unint64_t v40 = v18 + 1;
          BOOL v41 = (char *)v53 + 24 * v18 > (char *)&v49;
          if (v53 <= &v49 && v41)
          {
            int64_t v45 = (char *)&v49 - (unsigned char *)v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            __int16 v20 = (char *)v53;
            uint64_t v19 = (int *)((char *)v53 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            uint64_t v19 = &v49;
            __int16 v20 = (char *)v53;
          }
        }
        uint64_t v21 = &v20[24 * v54];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        ++v54;
        if (v52[0])
        {
          int64_t v23 = &v49;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v49, v6);
          uint64_t v24 = (char *)v53;
          if (v54 >= v55)
          {
            unint64_t v42 = v54 + 1;
            if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
            {
              int64_t v46 = (char *)&v49 - (unsigned char *)v53;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              uint64_t v24 = (char *)v53;
              int64_t v23 = (int *)((char *)v53 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              int64_t v23 = &v49;
              uint64_t v24 = (char *)v53;
            }
          }
          uint64_t v25 = &v24[24 * v54];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)uint64_t v25 = v26;
          ++v54;
        }
      }
    }
  }
  char v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
  if (v52[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
  }
  if (v61)
  {
    unint64_t v28 = __p;
    if (__p)
    {
      long long v29 = v60;
      int64_t v30 = __p;
      if (v60 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        int64_t v30 = __p;
      }
      char v60 = v28;
      operator delete(v30);
    }
    int v31 = v57;
    if (v57)
    {
      int v32 = v58;
      uint64_t v33 = v57;
      if (v58 != v57)
      {
        do
        {
          uint64_t v35 = *--v32;
          uint64_t v34 = v35;
          *int v32 = 0;
          if (v35) {
            MEMORY[0x21667D390](v34, 0x1000C8077774924);
          }
        }
        while (v32 != v31);
        uint64_t v33 = v57;
      }
      uint64_t v58 = v31;
      operator delete(v33);
    }
    if (v53 != v56) {
      free(v53);
    }
  }
  return v27 != 0;
}

BOOL mlir::pdl::ResultsOp::parse(uint64_t *a1, uint64_t a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  memset(v24, 0, 24);
  uint64_t v23 = 0;
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 424))(a1, &v20, IntegerType);
  if (v6 >= 0x100u)
  {
    if (!(_BYTE)v6) {
      return 0;
    }
    if (v20)
    {
      uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(a2);
      void *v7 = v20;
    }
  }
  __int16 v22 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, void *))(*a1 + 368))(a1, "of", 2, v21)) {
    return 0;
  }
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, void *, uint64_t))(*a1 + 672))(a1, v24, 1)) {
    return 0;
  }
  uint64_t v8 = *a1;
  if (v20)
  {
    if (!(*(unsigned __int8 (**)(uint64_t *))(v8 + 56))(a1)
      || !(*(unsigned __int8 (**)(uint64_t *, uint64_t *))(*a1 + 504))(a1, &v23))
    {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(v8 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    uint64_t v23 = mlir::pdl::RangeType::get(SingletonImpl);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, uint64_t))(*a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a2 + 8);
  v21[0] = a1;
  v21[1] = &v19;
  v21[2] = a2;
  uint64_t v13 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v12 + 96));
  if (v13)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v13, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))return 0; {
  }
    }
  uint64_t v14 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  uint64_t v15 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v14);
  uint64_t v16 = mlir::StorageUniquer::getSingletonImpl(v15, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  if (v17 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v17) = v23;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t *, void *, uint64_t, uint64_t))(*a1 + 696))(a1, v24, v16, a2 + 16) != 0;
}

void mlir::pdl::ResultsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v27[4] = *MEMORY[0x263EF8340];
  if (*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      *uint64_t v5 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  }
  unsigned __int16 v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 32;
  }
  uint64_t v14 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v15 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if (v14)
  {
    unint64_t v17 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v19 = (_DWORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 3uLL)
    {
      _DWORD *v19 = 540945696;
      *((void *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, " -> ", 4uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, v17);
  }
  uint64_t v25 = v27;
  v27[0] = "index";
  v27[1] = 5;
  uint64_t v26 = 0x200000001;
  uint64_t v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v25, v26);
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t mlir::pdl::RewriteOp::getRoot(mlir::pdl::RewriteOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 24);
    }
  }
  return 0;
}

BOOL mlir::pdl::RewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected DictionaryAttr to set properties";
      uint64_t v59 = 41;
      uint64_t v26 = &v57;
      char v27 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v52 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          char v27 = (char *)v61;
          uint64_t v26 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v26 = &v57;
          char v27 = (char *)v61;
        }
      }
      unint64_t v28 = &v27[24 * v62];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    int64_t v30 = __p;
    if (__p)
    {
      int v31 = v68;
      int v32 = __p;
      if (v68 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      char v68 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v65;
    if (!v65) {
      goto LABEL_64;
    }
    uint64_t v33 = v66;
    uint64_t v23 = v65;
    if (v66 == v65)
    {
LABEL_63:
      unint64_t v66 = v21;
      operator delete(v23);
LABEL_64:
      if (v61 != v64) {
        free(v61);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_62:
    uint64_t v23 = v65;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v56, "name", 4uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v59 = 49;
        unint64_t v10 = &v57;
        int v11 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v49 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v53 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            int v11 = (char *)v61;
            unint64_t v10 = (int *)((char *)v61 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            unint64_t v10 = &v57;
            int v11 = (char *)v61;
          }
        }
        uint64_t v12 = &v11[24 * v62];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v62;
        if (v60[0])
        {
          uint64_t v14 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v9);
          uint64_t v15 = (char *)v61;
          if (v62 >= v63)
          {
            unint64_t v50 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              int64_t v54 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              uint64_t v15 = (char *)v61;
              uint64_t v14 = (int *)((char *)v61 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              uint64_t v14 = &v57;
              uint64_t v15 = (char *)v61;
            }
          }
          uint64_t v16 = &v15[24 * v62];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v62;
          if (v60[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
          }
        }
      }
      if (!v69) {
        return 0;
      }
      uint64_t v18 = __p;
      if (__p)
      {
        uint64_t v19 = v68;
        uint64_t v20 = __p;
        if (v68 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        char v68 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      __int16 v22 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *__int16 v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operandSegmentSizes", 0x13uLL);
  if (!v36)
  {
    uint64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operand_segment_sizes", 0x15uLL);
    if (!v36)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v58 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v59 = 79;
        unint64_t v38 = &v57;
        BOOL v39 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v51 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v55 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            BOOL v39 = (char *)v61;
            unint64_t v38 = (int *)((char *)v61 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            unint64_t v38 = &v57;
            BOOL v39 = (char *)v61;
          }
        }
        unint64_t v40 = &v39[24 * v62];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)unint64_t v40 = v41;
        ++v62;
        if (v60[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
        }
      }
      if (!v69) {
        return 0;
      }
      unint64_t v42 = __p;
      if (__p)
      {
        int64_t v43 = v68;
        int64_t v44 = __p;
        if (v68 != __p)
        {
          do
            int64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          int64_t v44 = __p;
        }
        char v68 = v42;
        operator delete(v44);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      int64_t v45 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        void *v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v21);
      goto LABEL_62;
    }
  }
  return mlir::convertFromAttribute(a1 + 1, (const char *)2, v36, a3, a4) != 0;
}

uint64_t mlir::pdl::RewriteOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v23[6] = *MEMORY[0x263EF8340];
  uint64_t v20 = a1;
  uint64_t v21 = v23;
  uint64_t v22 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v20, (uint64_t)"name", 4, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
      unsigned int v7 = v22;
    }
    uint64_t v8 = (uint64_t *)((char *)v21 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v22) = v22 + 1;
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  uint64_t v10 = mlir::Builder::getNamedAttr(&v20, (uint64_t)"operandSegmentSizes", 19, v9);
  uint64_t v12 = v11;
  unsigned int v13 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
    unsigned int v13 = v22;
  }
  uint64_t v14 = (uint64_t *)((char *)v21 + 16 * v13);
  *uint64_t v14 = v10;
  v14[1] = v12;
  BOOL v15 = __CFADD__(v22, 1);
  uint64_t v16 = (v22 + 1);
  LODWORD(v22) = v22 + 1;
  if (v15)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v18 = v21;
    if (v21 == v23) {
      return DictionaryAttr;
    }
    goto LABEL_12;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v20, (uint64_t *)v21, v16);
  uint64_t v18 = v21;
  if (v21 != v23) {
LABEL_12:
  }
    free(v18);
  return DictionaryAttr;
}

uint64_t mlir::pdl::RewriteOp::setInherentAttr(uint64_t result, _DWORD *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 21)
  {
    uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
    if (result) {
      return result;
    }
  }
  else
  {
    if (a3 != 19)
    {
      if (a3 == 4 && *__s1 == 1701667182)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      return result;
    }
    uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if (result) {
      return result;
    }
  }
  if (a4)
  {
    uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    uint64_t v6 = result ? a4 : 0;
    uint64_t v9 = v6;
    if (result)
    {
      uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9);
      if (result == 2)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
        if (v7) {
          return (uint64_t)memmove((void *)(v5 + 8), (const void *)result, 4 * v7);
        }
      }
    }
  }
  return result;
}

BOOL mlir::pdl::RewriteOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      BOOL v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    uint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 1, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::RewriteOp::verifyInvariantsImpl(mlir::pdl::RewriteOp *this)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v55[0] = v2;
  if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v55))return 0; {
  uint64_t v4 = *(void *)this;
  }
  unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = *(void *)this + 16 * v6 + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (const char *)*(unsigned int *)(v7 + 8);
  if ((v5 & 0x800000) == 0)
  {
    uint64_t v9 = 0;
    if (v8 > 1) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)(v4 + 72);
  if (v8 <= 1)
  {
LABEL_32:
    if (!v8)
    {
      int v33 = v5 & 0x800000;
LABEL_36:
      uint64_t v34 = v4 + 16 * v6 + 64;
      if (BYTE3(v5)) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      int v36 = *(_DWORD *)(v35 + 12);
      if (v33)
      {
        uint64_t v37 = *(void *)(v4 + 72);
        if (v36) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v37 = 0;
        if (v36)
        {
LABEL_41:
          uint64_t v38 = *(unsigned int *)(v35 + 8);
          uint64_t v39 = (v36 + v38) - v38;
          for (uint64_t i = v37 + 32 * v38 + 24;
                mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v8);
                i += 32)
          {
            LODWORD(v8) = v8 + 1;
            if (!--v39) {
              return 1;
            }
          }
          return 0;
        }
      }
      return 1;
    }
    if (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(v4, *(void *)(*(void *)(v9 + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      uint64_t v4 = *(void *)this;
      unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
      uint64_t v6 = (v5 >> 23) & 1;
      int v33 = v5 & 0x800000;
      LODWORD(v8) = 1;
      goto LABEL_36;
    }
    return 0;
  }
LABEL_6:
  unint64_t v50 = (void **)"operand group starting at #";
  __int16 v51 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v50, (uint64_t)v55);
  if (v55[0])
  {
    int v52 = 5;
    int64_t v53 = 0;
    uint64_t v10 = &v52;
    uint64_t v11 = (char *)v56;
    if (v57 >= v58)
    {
      unint64_t v42 = v57 + 1;
      if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
      {
        int64_t v47 = (char *)&v52 - (unsigned char *)v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        uint64_t v11 = (char *)v56;
        uint64_t v10 = (int *)((char *)v56 + v47);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        uint64_t v10 = &v52;
        uint64_t v11 = (char *)v56;
      }
    }
    uint64_t v12 = &v11[24 * v57];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    uint64_t v14 = ++v57;
    if (v55[0])
    {
      int v52 = 3;
      int64_t v53 = " requires 0 or 1 element, but found ";
      uint64_t v54 = 36;
      BOOL v15 = &v52;
      __int16 v16 = (char *)v56;
      if (v14 >= v58)
      {
        unint64_t v43 = v14 + 1;
        BOOL v44 = (char *)v56 + 24 * v14 > (char *)&v52;
        if (v56 <= &v52 && v44)
        {
          int64_t v48 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          __int16 v16 = (char *)v56;
          BOOL v15 = (int *)((char *)v56 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          BOOL v15 = &v52;
          __int16 v16 = (char *)v56;
        }
      }
      uint64_t v17 = &v16[24 * v57];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        int64_t v53 = v8;
        uint64_t v20 = &v52;
        uint64_t v21 = (char *)v56;
        if (v19 >= v58)
        {
          unint64_t v45 = v19 + 1;
          BOOL v46 = (char *)v56 + 24 * v19 > (char *)&v52;
          if (v56 <= &v52 && v46)
          {
            int64_t v49 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            uint64_t v21 = (char *)v56;
            uint64_t v20 = (int *)((char *)v56 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            uint64_t v20 = &v52;
            uint64_t v21 = (char *)v56;
          }
        }
        uint64_t v22 = &v21[24 * v57];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v57;
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
  if (v55[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
  }
  if (v64)
  {
    char v25 = __p;
    if (__p)
    {
      uint64_t v26 = v63;
      char v27 = __p;
      if (v63 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        char v27 = __p;
      }
      unsigned int v63 = v25;
      operator delete(v27);
    }
    unint64_t v28 = v60;
    if (v60)
    {
      long long v29 = v61;
      int64_t v30 = v60;
      if (v61 != v60)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        int64_t v30 = v60;
      }
      char v61 = v28;
      operator delete(v30);
    }
    if (v56 != v59) {
      free(v56);
    }
  }
  return v24;
}

void mlir::pdl::RewriteOp::parse()
{
  v9[16] = *MEMORY[0x263EF8340];
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  uint64_t v4 = &v6;
  uint64_t v5 = 0x400000000;
  uint64_t v0 = 0;
  unint64_t v1 = &v3;
  uint64_t v2 = 0x100000000;
  operator new();
}

void mlir::pdl::RewriteOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *this;
  unint64_t v5 = (*this)[11];
  unint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = (uint64_t)&(*this)[4 * v6 + 16];
  if (!HIBYTE((*this)[11])) {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(v7 + 8);
  if ((v5 & 0x800000) != 0)
  {
    uint64_t v9 = *((void *)v4 + 9);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (*(void *)(v9 + 24))
  {
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      unsigned char *v11 = 32;
    }
    uint64_t v4 = *this;
    unint64_t v12 = (*this)[11];
    unint64_t v6 = (v12 >> 23) & 1;
    uint64_t v13 = (uint64_t)&(*this)[4 * v6 + 16];
    if (!HIBYTE((*this)[11])) {
      uint64_t v13 = 0;
    }
    int v14 = *(_DWORD *)(v13 + 8);
    if ((v12 & 0x800000) != 0)
    {
      uint64_t v15 = *((void *)v4 + 9);
      if (!v14) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (!v14) {
        goto LABEL_15;
      }
    }
    if (*(void *)(v15 + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *this;
      unint64_t v6 = ((unint64_t)(*this)[11] >> 23) & 1;
    }
  }
LABEL_15:
  if (!*(void *)&v4[4 * v6 + 16]) {
    goto LABEL_52;
  }
  __int16 v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (_DWORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 3uLL)
  {
    _DWORD *v19 = 1752459639;
    *((void *)v18 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v18, "with", 4uLL);
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16]);
  unint64_t v22 = (unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16];
  if (!HIBYTE((*this)[11])) {
    unint64_t v22 = 0;
  }
  if (!*(_DWORD *)(v22 + 12))
  {
LABEL_52:
    BOOL v46 = *this;
    unint64_t v47 = (*this)[11];
    if ((v47 & 0x7FFFFF) != 0) {
      goto LABEL_53;
    }
LABEL_56:
    if (!MEMORY[0]) {
      goto LABEL_63;
    }
LABEL_57:
    int64_t v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v50 = (unsigned char *)*((void *)v49 + 4);
    if ((unint64_t)v50 >= *((void *)v49 + 3))
    {
      llvm::raw_ostream::write(v49, 32);
      __int16 v51 = *this;
      unint64_t v52 = (*this)[11];
      if ((v52 & 0x7FFFFF) != 0) {
        goto LABEL_59;
      }
    }
    else
    {
      *((void *)v49 + 4) = v50 + 1;
      *unint64_t v50 = 32;
      __int16 v51 = *this;
      unint64_t v52 = (*this)[11];
      if ((v52 & 0x7FFFFF) != 0)
      {
LABEL_59:
        unint64_t v53 = (((unint64_t)&v51[4 * ((v52 >> 23) & 1) + 17] + ((v52 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v51[10];
LABEL_62:
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v53, 1, 1, 0);
        BOOL v46 = *this;
        LODWORD(v47) = (*this)[11];
        goto LABEL_63;
      }
    }
    unint64_t v53 = 0;
    goto LABEL_62;
  }
  long long v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if (*((unsigned char **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, "(", 1uLL);
  }
  else
  {
    unsigned char *v24 = 40;
    ++*((void *)v23 + 4);
  }
  unint64_t v25 = (*this)[11];
  if (HIBYTE((*this)[11])) {
    uint64_t v26 = (uint64_t)&(*this)[4 * ((v25 >> 23) & 1) + 16];
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(unsigned int *)(v26 + 8);
  int v28 = *(_DWORD *)(v26 + 12);
  if ((v25 & 0x800000) != 0) {
    uint64_t v29 = *((void *)*this + 9);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = v29 + 32 * v27;
  uint64_t v31 = (v28 + v27) - v27;
  uint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v59 = ", ";
  uint64_t v60 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v30, 0, v30, v31, (uint64_t)a2, v32, (uint64_t)&v59);
  int v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v34 = (unsigned char *)*((void *)v33 + 4);
  if ((unint64_t)v34 >= *((void *)v33 + 3))
  {
    llvm::raw_ostream::write(v33, 32);
  }
  else
  {
    *((void *)v33 + 4) = v34 + 1;
    *uint64_t v34 = 32;
  }
  uint64_t v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v36 = (unsigned char *)*((void *)v35 + 4);
  if (*((unsigned char **)v35 + 3) == v36)
  {
    llvm::raw_ostream::write(v35, ":", 1uLL);
  }
  else
  {
    *int v36 = 58;
    ++*((void *)v35 + 4);
  }
  uint64_t v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v38 = (unsigned char *)*((void *)v37 + 4);
  if ((unint64_t)v38 >= *((void *)v37 + 3))
  {
    llvm::raw_ostream::write(v37, 32);
  }
  else
  {
    *((void *)v37 + 4) = v38 + 1;
    *uint64_t v38 = 32;
  }
  unint64_t v39 = (*this)[11];
  if (HIBYTE((*this)[11])) {
    uint64_t v40 = (uint64_t)&(*this)[4 * ((v39 >> 23) & 1) + 16];
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = *(unsigned int *)(v40 + 8);
  int v42 = *(_DWORD *)(v40 + 12);
  if ((v39 & 0x800000) != 0) {
    uint64_t v43 = *((void *)*this + 9);
  }
  else {
    uint64_t v43 = 0;
  }
  v57[0] = v43 + 32 * v41;
  v57[1] = (v42 + v41) - v41;
  mlir::OperandRange::getTypes(v57, (uint64_t *)&v59);
  v58[0] = ", ";
  v58[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v59, v60, (uint64_t)v61, v62, (uint64_t)a2, (uint64_t)a2, (uint64_t)v58);
  BOOL v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v45 = (unsigned char *)*((void *)v44 + 4);
  if (*((unsigned char **)v44 + 3) != v45)
  {
    unsigned char *v45 = 41;
    ++*((void *)v44 + 4);
    goto LABEL_52;
  }
  llvm::raw_ostream::write(v44, ")", 1uLL);
  BOOL v46 = *this;
  unint64_t v47 = (*this)[11];
  if ((v47 & 0x7FFFFF) == 0) {
    goto LABEL_56;
  }
LABEL_53:
  int64_t v48 = (void *)((((unint64_t)&v46[4 * ((v47 >> 23) & 1) + 17] + ((v47 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * v46[10]);
  if ((void *)*v48 != v48) {
    goto LABEL_57;
  }
LABEL_63:
  uint64_t v59 = &v61;
  char v61 = "operandSegmentSizes";
  uint64_t v62 = 19;
  unsigned int v63 = "name";
  uint64_t v64 = 4;
  uint64_t v60 = 0x200000002;
  if (BYTE3(v47))
  {
    v58[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v46);
    uint64_t v54 = (mlir::ArrayAttr *)v58;
  }
  else
  {
    uint64_t v54 = (mlir::ArrayAttr *)(v46 + 14);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v54);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v56, v59, v60);
  if (v59 != &v61) {
    free(v59);
  }
}

uint64_t mlir::pdl::TypeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      unint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      uint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          uint64_t v27 = (char *)v48;
        }
      }
      int v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)int v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v55;
      uint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      int64_t v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    int v33 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *int v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantType", 0xCuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 57;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    unint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      int v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          int v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          int v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      __int16 v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)__int16 v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  long long v18 = __p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    int64_t v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    unint64_t v22 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_41:
    long long v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::pdl::TypeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantType", 12, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    uint64_t v33 = a1;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    BOOL v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        BOOL v8 = (char *)v35;
        uint64_t v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        BOOL v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: any type attribute";
        uint64_t v31 = 50;
        uint64_t v11 = &v29;
        unint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v12 = (char *)v35;
            uint64_t v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            unint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    __int16 v16 = __p;
    if (__p)
    {
      long long v17 = v42;
      long long v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        long long v18 = __p;
      }
      int64_t v42 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      int64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  unsigned int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    BOOL v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)BOOL v8 = v9;
    ++v47;
  }
  int64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypeAttr]";
  unint64_t v41 = 64;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    int64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          long long v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      __int16 v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)__int16 v16 = v17;
      ++v47;
      if (v44)
      {
        long long v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            long long v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          *int64_t v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      __int16 v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::pdl::TypeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v15[0] = a1;
  v15[1] = &v16;
  void v15[2] = a2;
  uint64_t v5 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v5, (void **)"constantType", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))return 0; {
  }
    }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    uint64_t v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::TypeAttr>(a1, &v17, v8))
    {
      if (v17)
      {
        long long v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(a2);
        void *v9 = v17;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  if (v13 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v13) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypeOp::print(mlir::pdl::TypeOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = "constantType";
  v17[1] = 12;
  uint64_t v16 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      unsigned char *v9 = 32;
    }
    unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      unsigned char *v11 = 58;
      ++*((void *)v10 + 4);
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      unsigned char *v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17) {
    free(v15);
  }
}

uint64_t mlir::pdl::TypesOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      unint64_t v26 = &v44;
      int64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          int64_t v27 = (char *)v48;
          unint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unint64_t v26 = &v44;
          int64_t v27 = (char *)v48;
        }
      }
      int64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)int64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v55;
      unint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    long long v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    unint64_t v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantTypes", 0xDuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 58;
    unint64_t v10 = &v44;
    unint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v11 = (char *)v48;
        unint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v10 = &v44;
        unint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      long long v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          long long v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          long long v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  long long v18 = __p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  long long v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::pdl::TypesOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantTypes", 13, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(void **a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v35 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      {
        uint64_t v39 = *(void *)Value;
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    int64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    unint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v10 = (char *)v41;
        uint64_t v9 = (void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        unint64_t v10 = (char *)v41;
      }
    }
    unint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)unint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      uint64_t v35 = a2;
      int64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        int64_t v36 = "' failed to satisfy constraint: type array attribute";
        uint64_t v37 = 52;
        long long v13 = &v35;
        uint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            uint64_t v14 = (char *)v41;
            long long v13 = (void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            long long v13 = &v35;
            uint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    long long v18 = __p;
    if (__p)
    {
      uint64_t v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unsigned int v48 = v18;
      operator delete(v20);
    }
    long long v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl::TypesOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v16[0] = a1;
  v16[1] = &v17;
  v16[2] = a2;
  unsigned int v5 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v5, (void **)"constantTypes", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v16))return 0; {
  }
    }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    uint64_t v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v8))
    {
      if (v18)
      {
        uint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(a2);
        void *v9 = v18;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypesOp::print(mlir::pdl::TypesOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = "constantTypes";
  v17[1] = 13;
  uint64_t v16 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      unsigned char *v9 = 32;
    }
    unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      unsigned char *v11 = 58;
      ++*((void *)v10 + 4);
    }
    long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      unsigned char *v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17) {
    free(v15);
  }
}

uint64_t hasBindingUse(mlir::Operation *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 9);
  uint64_t v3 = (char *)a1 - 16;
  if (v2) {
    uint64_t v4 = (char *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)&v13[0] = v4;
  *((void *)&v13[0] + 1) = v2;
  mlir::ResultRange::use_begin((uint64_t *)v13, (uint64_t *)v17);
  uint64_t v5 = *((unsigned int *)a1 + 9);
  if (v5) {
    uint64_t v6 = (uint64_t)v3;
  }
  else {
    uint64_t v6 = 0;
  }
  v19[0] = v6;
  v19[1] = v5;
  mlir::ResultRange::use_end(v19, v15);
  uint64_t v7 = v18;
  uint64_t v14 = v18;
  v13[0] = v17[0];
  v13[1] = v17[1];
  uint64_t v8 = v16;
  if (v18 == v16) {
    return 0;
  }
  while (1)
  {
    uint64_t v9 = *(mlir::Operation **)(v7 + 16);
    unint64_t v10 = *(int **)(*((void *)v9 + 6) + 16);
    BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
       || v10 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id;
    if (!v11 || (hasBindingUse(v9) & 1) != 0) {
      break;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v17);
    uint64_t v7 = v18;
    if (v18 == v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ZeroResults>(void *a1)
{
  unint64_t v1 = &unk_267770000;
  {
    long long v12 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[429]);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::VariadicResults>(void *a1)
{
  unint64_t v1 = &unk_267771000;
  {
    long long v12 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v14 = 87;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[437]);
}

uint64_t mlir::Diagnostic::append<char const(&)[56],mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  long long v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      uint64_t v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, uint64_t *a2, const char *a3)
{
  mlir::Diagnostic::operator<<(a1, *a2);
  size_t v5 = strlen(a3);
  uint64_t v6 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  int v16 = 3;
  BOOL v17 = a3;
  size_t v18 = v5;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v13 = v8 + 1;
    BOOL v14 = v7 + 24 * v8 > (unint64_t)&v16;
    if (v7 <= (unint64_t)&v16 && v14)
    {
      uint64_t v15 = (char *)&v16 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v15[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v16;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  return visit(DefiningOp, *a1);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v18 = 0;
  memset(v17, 0, 24);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(*a1, &v18, 0)
    || !(*(unsigned __int8 (**)(void))(*(void *)*a1 + 136))()
    || !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)*a1 + 672))(*a1, v17, 1))
  {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = v18;
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    uint64_t v15 = v18;
    uint64_t v16 = a1[1];
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    uint64_t v3 = v15;
    uint64_t v2 = v16;
    LODWORD(v4) = *(_DWORD *)(v16 + 8);
  }
  *(void *)(*(void *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  unint64_t v7 = *(void *)v5;
  uint64_t v8 = (char *)v17;
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v12 = v6 + 1;
    BOOL v13 = v7 + 32 * v6 > (unint64_t)v17;
    if (v7 <= (unint64_t)v17 && v13)
    {
      BOOL v14 = (char *)v17 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      uint64_t v8 = &v14[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      uint64_t v8 = (char *)v17;
    }
  }
  uint64_t v9 = (_OWORD *)(v7 + 32 * *(unsigned int *)(v5 + 8));
  long long v10 = *((_OWORD *)v8 + 1);
  _OWORD *v9 = *(_OWORD *)v8;
  v9[1] = v10;
  ++*(_DWORD *)(v5 + 8);
  return 1;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeConstraintOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeRewriteOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::AttributeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::EraseOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::OperandOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::OperandsOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::OperationOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::RangeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::ReplaceOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::RewriteOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::TypeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl::TypesOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeConstraintOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        long long v10 = v11;
      }
      else {
        long long v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 4)
  {
    if (*(_DWORD *)a3 != 1701667182) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 9) {
      return 0;
    }
    if (*(void *)a3 != 0x65746167654E7369 || *(unsigned char *)(a3 + 8) != 100) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 4)
  {
    if (*(_DWORD *)result == 1701667182)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          char v9 = a4;
        }
        else {
          char v9 = 0;
        }
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 9 && *(void *)result == 0x65746167654E7369 && *(unsigned char *)(result + 8) == 100)
  {
    if (a4)
    {
      uint64_t result = mlir::BoolAttr::classof(a4);
      if (result) {
        long long v10 = a4;
      }
      else {
        long long v10 = 0;
      }
      *uint64_t v5 = v10;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isNegated", 9, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  char v9 = (void *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (void **)"isNegated", (const char *)9, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"name", (const char *)4, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getOpPropertyByteSize()
{
  return 16;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  uint64_t v6 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  uint64_t v6 = result;
  if (!*(void *)a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v6, 0);
    *(void *)a3 = result;
  }
  return result;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v5 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  uint64_t v5 = result;
  if (!*a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v5, 0);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[338];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ApplyNativeConstraintOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl((mlir::pdl::ApplyNativeConstraintOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::ApplyNativeConstraintOp::verify((mlir::pdl::ApplyNativeConstraintOp *)&v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    uint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        uint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "pdl.pattern";
  v37[1] = 11;
  if (*v8)
  {
    int64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    BOOL v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      int v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        int v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      int v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        int v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeRewriteOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      *uint64_t v5 = v8;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v113 = 87;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[437];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[344];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ApplyNativeRewriteOp::print((mlir::pdl::ApplyNativeRewriteOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  unint64_t v5 = a1;
  if (!mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl((mlir::pdl::ApplyNativeRewriteOp *)&v5)) {
    return 0;
  }
  unint64_t v5 = a1;
  return mlir::pdl::ApplyNativeRewriteOp::verify((mlir::pdl::ApplyNativeRewriteOp *)&v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "pdl.rewrite";
  v37[1] = 11;
  if (*v8)
  {
    int64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    BOOL v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      int v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        int v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      int v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        int v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::AttributeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(unsigned char *)(result + 4) == 101) {
    *uint64_t v5 = a4;
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::AttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      unint64_t v113 = 118;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[348];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::AttributeOp::print((mlir::pdl::AttributeOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::AttributeOp::verifyInvariantsImpl((mlir::pdl::AttributeOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::AttributeOp::verify((mlir::pdl::AttributeOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::EraseOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v87 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v94 = 83;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      int v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267770000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v94 = 82;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      int v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[29];
  long long v9 = &unk_267772000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    long long v9 = (void *)&unk_267772000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v94 = 109;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      long long v9 = (void *)&unk_267772000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[344];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      int v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::EraseOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t)a1)
      && mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<Empty>]";
      unint64_t v113 = 114;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[352];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[431];
  long long v9 = &unk_267771000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    long long v9 = (void *)&unk_267771000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      long long v9 = (void *)&unk_267771000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[338];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::OperandOp::print((mlir::pdl::OperandOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t)a1)
    && (uint64_t v6 = a1, mlir::pdl::OperandOp::verifyInvariantsImpl((mlir::pdl::OperandOp *)&v6)))
  {
    return verifyHasBindingUse(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandsOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v113 = 114;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[431];
  long long v9 = &unk_267771000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    long long v9 = (void *)&unk_267771000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      long long v9 = (void *)&unk_267771000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[338];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::OperandOp::print((mlir::pdl::OperandOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t)a1)
    && (uint64_t v6 = a1, mlir::pdl::OperandsOp::verifyInvariantsImpl((mlir::pdl::OperandsOp *)&v6)))
  {
    return verifyHasBindingUse(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperationOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::pdl::OperationOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl::OperationOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }
  if (*v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"attributeValueNames", 19, *v6);
  }
  uint64_t v7 = v6[1];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"opName", 6, v7);
  }
  uint64_t v8 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 2), 3);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v9, (void **)"attributeValueNames", (const char *)0x13, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"opName", (const char *)6, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::initProperties(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(void *)&long long v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::OperationOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::pdl::OperationOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a3 + 12);
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 != *(void *)a2) {
    return 0;
  }
  if (*(void *)(a3 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  return *(void *)(a3 + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(a3 + 24) == (unint64_t)*(unsigned int *)(a2 + 24);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl::OperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::pdl::OperationOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v124 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      unint64_t v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v133 = 81;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      unint64_t v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<Empty>]";
      unint64_t v133 = 118;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      unint64_t v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[356];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v133 = 86;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      unint64_t v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v133 = 88;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      unint64_t v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v133 = 96;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      unint64_t v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      unint64_t v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = v13[435];
  long long v15 = &unk_267771000;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      long long v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v133 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      uint64_t v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v14 == a1 || v15[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::OperationOp::print((mlir::pdl::OperationOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::OperationOp::verifyInvariantsImpl((mlir::pdl::OperationOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::OperationOp::verify(&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.pattern", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C370178;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getParseAssemblyFn(void (**a1)()@<X8>)
{
  *a1 = mlir::pdl::PatternOp::parse;
  a1[3] = (void (*)())((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 8)
  {
    if (*(void *)a3 != 0x656D616E5F6D7973) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 7) {
      return 0;
    }
    if (*(_DWORD *)a3 != 1701733730 || *(_DWORD *)(a3 + 3) != 1953064549) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 8)
  {
    if (*(void *)result == 0x656D616E5F6D7973)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v9 = a4;
        }
        else {
          uint64_t v9 = 0;
        }
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 7 && *(_DWORD *)result == 1701733730 && *(_DWORD *)(result + 3) == 1953064549)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = 0;
      }
      *uint64_t v5 = v10;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"benefit", 7, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v9, (void **)"benefit", (const char *)7, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"sym_name", (const char *)8, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::PatternOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::PatternOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *uint64_t v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isDeclaration;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      unint64_t v14 = 73;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[411], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isOptionalSymbol()
{
  return 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getDefaultDialect()
{
  return "pdl";
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267770000;
  {
    uint64_t v165 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v176 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v176 = 83;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267770000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      unint64_t v176 = 91;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[441];
  uint64_t v17 = &unk_267770000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267770000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      unint64_t v176 = 87;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267770000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[437];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v176 = 86;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[350] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::PatternOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroResults<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::PatternOp>,mlir::OpTrait::SingleBlock<mlir::pdl::PatternOp>,mlir::OpTrait::OpInvariants<mlir::pdl::PatternOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl::PatternOp>,mlir::SymbolOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::PatternOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroResults<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::PatternOp>,mlir::OpTrait::SingleBlock<mlir::pdl::PatternOp>,mlir::OpTrait::OpInvariants<mlir::pdl::PatternOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl::PatternOp>,mlir::SymbolOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::PatternOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    && (uint64_t v7 = a1, mlir::pdl::PatternOp::verifyInvariantsImpl((mlir::pdl::PatternOp *)&v7)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(a1);
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2)) {
    return 0;
  }
  uint64_t v4 = a1;
  return mlir::pdl::PatternOp::verifyRegions((mlir::pdl::PatternOp *)&v4) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::RangeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v176 = 114;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v176 = 109;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[344];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[435];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::RangeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::RangeOp::verifyInvariantsImpl((mlir::pdl::RangeOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::RangeOp::verify((mlir::pdl::RangeOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ReplaceOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  unint64_t v8 = *(unsigned int *)(a2 + 44);
  if (a4 == 19)
  {
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(void *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 21) {
      return 0;
    }
    BOOL v9 = *a3 == 0x5F646E617265706FLL && a3[1] == 0x5F746E656D676573;
    if (!v9 || *(void *)((char *)a3 + 13) != 0x73657A69735F746ELL) {
      return 0;
    }
  }
  if (BYTE3(v8)) {
    uint64_t v14 = a2 + 16 * ((v8 >> 23) & 1) + 64;
  }
  else {
    uint64_t v14 = 0;
  }
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14, 3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl::ReplaceOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v6 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v6, 3);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getOpPropertyByteSize()
{
  return 12;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a4)
  {
    uint64_t v4 = *a4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a4 + 2);
    *(void *)a3 = v4;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(void *)a3 = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ReplaceOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v4 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v4 = 0;
  }

  return mlir::pdl::ReplaceOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)a3 == *(void *)a2 && *(_DWORD *)(a3 + 8) == (unint64_t)*(unsigned int *)(a2 + 8);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::hashProperties(uint64_t a1, void *a2)
{
  return mlir::pdl::ReplaceOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::writeProperties;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = (int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v5 = 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v5, 3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v7);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a3, v5, 3);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v124 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      unint64_t v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    uint64_t v3 = (void *)&unk_267770000;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v133 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      unint64_t v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v133 = 86;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      unint64_t v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v133 = 97;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      unint64_t v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v133 = 96;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      unint64_t v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[47];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v133 = 109;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      unint64_t v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = v11[344];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      unint64_t v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = v13[435];
  long long v15 = &unk_267771000;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v133 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      unint64_t v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v14 == a1 || v15[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ReplaceOp::print((mlir::pdl::ReplaceOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::ReplaceOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl::ReplaceOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::ReplaceOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::pdl::ReplaceOp::verify((mlir::pdl::ReplaceOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::ReplaceOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl::ReplaceOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::ReplaceOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::ReplaceOp::verifyInvariantsImpl((mlir::pdl::ReplaceOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.result", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C36FFE8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ResultOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<Empty>]";
      unint64_t v176 = 114;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[352];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl::ResultOp::verifyInvariantsImpl((mlir::pdl::ResultOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.results", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C370308;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ResultsOp::parse;
  a1[3] = (BOOL (*)(uint64_t *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<Empty>]";
      unint64_t v176 = 112;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[372];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ResultsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::pdl::ResultsOp::verifyInvariantsImpl((mlir::pdl::ResultsOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl::ResultsOp::verify((mlir::pdl::ResultsOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getParseAssemblyFn(void (**a1)()@<X8>)
{
  *a1 = mlir::pdl::RewriteOp::parse;
  a1[3] = (void (*)())((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                           + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v8 = 0;
  }
  if (a4 == 21)
  {
    if (*a3 != 0x5F646E617265706FLL
      || a3[1] != 0x5F746E656D676573
      || *(void *)((char *)a3 + 13) != 0x73657A69735F746ELL)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 19)
    {
      if (a4 == 4 && *(_DWORD *)a3 == 1701667182) {
        return *(void *)v8;
      }
      return 0;
    }
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(void *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v8 + 8, 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl::RewriteOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }
  if (*v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, *v6);
  }
  uint64_t v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 1), 2);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::RewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::RewriteOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getDefaultDialect()
{
  return "pdl";
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267770000;
  {
    uint64_t v234 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v40 = v39;
    a1 = v234;
    if (v40)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v248 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v248;
      }
      int v43 = &v247[v42];
      unint64_t v44 = v248 - v42;
      if (v248 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v248 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v234;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267770000;
  {
    uint64_t v222 = v2;
    uint64_t v235 = a1;
    char v3 = (void *)&unk_267770000;
    int v49 = v48;
    uint64_t v2 = v222;
    a1 = v235;
    if (v49)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v248 = 83;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v248;
      }
      int v52 = &v247[v51];
      unint64_t v53 = v248 - v51;
      if (v248 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v248 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v222;
      a1 = v235;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v223 = v2;
    uint64_t v236 = a1;
    uint64_t v211 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v211;
    uint64_t v2 = v223;
    int v58 = v57;
    a1 = v236;
    if (v58)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v248 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v248;
      }
      int v61 = &v247[v60];
      unint64_t v62 = v248 - v60;
      if (v248 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v248 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v211;
      uint64_t v2 = v223;
      a1 = v236;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v224 = v2;
    uint64_t v237 = a1;
    uint64_t v201 = v6;
    uint64_t v212 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v201;
    uint64_t v4 = v212;
    int v67 = v66;
    uint64_t v2 = v224;
    a1 = v237;
    if (v67)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v248 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v248;
      }
      int v70 = &v247[v69];
      unint64_t v71 = v248 - v69;
      if (v248 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v248 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v201;
      uint64_t v4 = v212;
      uint64_t v2 = v224;
      a1 = v237;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v225 = v2;
    uint64_t v238 = a1;
    uint64_t v202 = v6;
    uint64_t v213 = v4;
    uint64_t v192 = v8;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v192;
    uint64_t v6 = v202;
    uint64_t v4 = v213;
    int v76 = v75;
    uint64_t v2 = v225;
    a1 = v238;
    if (v76)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v248 = 109;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v248;
      }
      int v79 = &v247[v78];
      unint64_t v80 = v248 - v78;
      if (v248 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v248 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v192;
      uint64_t v6 = v202;
      uint64_t v4 = v213;
      uint64_t v2 = v225;
      a1 = v238;
    }
  }
  uint64_t v10 = v9[338];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v226 = v2;
    uint64_t v239 = a1;
    uint64_t v203 = v6;
    uint64_t v214 = v4;
    uint64_t v184 = v10;
    uint64_t v193 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v184;
    uint64_t v8 = v193;
    uint64_t v6 = v203;
    uint64_t v4 = v214;
    int v85 = v84;
    uint64_t v2 = v226;
    a1 = v239;
    if (v85)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      unint64_t v248 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v248;
      }
      int v88 = &v247[v87];
      unint64_t v89 = v248 - v87;
      if (v248 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v248 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v184;
      uint64_t v8 = v193;
      uint64_t v6 = v203;
      uint64_t v4 = v214;
      uint64_t v2 = v226;
      a1 = v239;
    }
  }
  uint64_t v12 = v11[161];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v227 = v2;
    uint64_t v240 = a1;
    uint64_t v204 = v6;
    uint64_t v215 = v4;
    uint64_t v185 = v10;
    uint64_t v194 = v8;
    uint64_t v177 = v12;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v177;
    uint64_t v10 = v185;
    uint64_t v8 = v194;
    uint64_t v6 = v204;
    uint64_t v4 = v215;
    int v94 = v93;
    uint64_t v2 = v227;
    a1 = v240;
    if (v94)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v248 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v248;
      }
      uint64_t v97 = &v247[v96];
      unint64_t v98 = v248 - v96;
      if (v248 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v248 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v177;
      uint64_t v10 = v185;
      uint64_t v8 = v194;
      uint64_t v6 = v204;
      uint64_t v4 = v215;
      uint64_t v2 = v227;
      a1 = v240;
    }
  }
  uint64_t v14 = v13[159];
  long long v15 = &unk_267771000;
  {
    uint64_t v228 = v2;
    uint64_t v241 = a1;
    uint64_t v205 = v6;
    uint64_t v216 = v4;
    uint64_t v186 = v10;
    uint64_t v195 = v8;
    uint64_t v171 = v14;
    uint64_t v178 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v171;
    uint64_t v12 = v178;
    uint64_t v10 = v186;
    uint64_t v8 = v195;
    uint64_t v6 = v205;
    uint64_t v4 = v216;
    int v103 = v102;
    uint64_t v2 = v228;
    a1 = v241;
    if (v103)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v248 = 83;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v248;
      }
      uint64_t v106 = &v247[v105];
      unint64_t v107 = v248 - v105;
      if (v248 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v248 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v171;
      uint64_t v12 = v178;
      uint64_t v10 = v186;
      uint64_t v8 = v195;
      uint64_t v6 = v205;
      uint64_t v4 = v216;
      uint64_t v2 = v228;
      a1 = v241;
    }
  }
  uint64_t v16 = v15[443];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v229 = v2;
    uint64_t v242 = a1;
    uint64_t v206 = v6;
    uint64_t v217 = v4;
    uint64_t v187 = v10;
    uint64_t v196 = v8;
    uint64_t v172 = v14;
    uint64_t v179 = v12;
    uint64_t v166 = v16;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v166;
    uint64_t v14 = v172;
    uint64_t v12 = v179;
    uint64_t v10 = v187;
    uint64_t v8 = v196;
    uint64_t v6 = v206;
    uint64_t v4 = v217;
    int v112 = v111;
    uint64_t v2 = v229;
    a1 = v242;
    if (v112)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v248 = 96;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v248;
      }
      uint64_t v115 = &v247[v114];
      unint64_t v116 = v248 - v114;
      if (v248 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v248 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v166;
      uint64_t v14 = v172;
      uint64_t v12 = v179;
      uint64_t v10 = v187;
      uint64_t v8 = v196;
      uint64_t v6 = v206;
      uint64_t v4 = v217;
      uint64_t v2 = v229;
      a1 = v242;
    }
  }
  uint64_t v18 = v17[47];
  unint64_t v19 = &unk_267770000;
  {
    uint64_t v230 = v2;
    uint64_t v243 = a1;
    uint64_t v207 = v6;
    uint64_t v218 = v4;
    uint64_t v188 = v10;
    uint64_t v197 = v8;
    uint64_t v173 = v14;
    uint64_t v180 = v12;
    uint64_t v162 = v18;
    uint64_t v167 = v16;
    unint64_t v19 = (void *)&unk_267770000;
    uint64_t v18 = v162;
    uint64_t v16 = v167;
    uint64_t v14 = v173;
    uint64_t v12 = v180;
    uint64_t v10 = v188;
    uint64_t v8 = v197;
    uint64_t v6 = v207;
    uint64_t v4 = v218;
    int v121 = v120;
    uint64_t v2 = v230;
    a1 = v243;
    if (v121)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v248 = 84;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v248;
      }
      uint64_t v124 = &v247[v123];
      unint64_t v125 = v248 - v123;
      if (v248 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v248 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      unint64_t v19 = (void *)&unk_267770000;
      uint64_t v18 = v162;
      uint64_t v16 = v167;
      uint64_t v14 = v173;
      uint64_t v12 = v180;
      uint64_t v10 = v188;
      uint64_t v8 = v197;
      uint64_t v6 = v207;
      uint64_t v4 = v218;
      uint64_t v2 = v230;
      a1 = v243;
    }
  }
  uint64_t v20 = v19[435];
  int v21 = &unk_267771000;
  {
    uint64_t v231 = v2;
    uint64_t v244 = a1;
    uint64_t v208 = v6;
    uint64_t v219 = v4;
    uint64_t v189 = v10;
    uint64_t v198 = v8;
    uint64_t v174 = v14;
    uint64_t v181 = v12;
    uint64_t v163 = v18;
    uint64_t v168 = v16;
    uint64_t v159 = v20;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v159;
    uint64_t v18 = v163;
    uint64_t v16 = v168;
    uint64_t v14 = v174;
    uint64_t v12 = v181;
    uint64_t v10 = v189;
    uint64_t v8 = v198;
    uint64_t v6 = v208;
    uint64_t v4 = v219;
    int v130 = v129;
    uint64_t v2 = v231;
    a1 = v244;
    if (v130)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v248 = 89;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v248;
      }
      uint64_t v133 = &v247[v132];
      unint64_t v134 = v248 - v132;
      if (v248 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v248 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v159;
      uint64_t v18 = v163;
      uint64_t v16 = v168;
      uint64_t v14 = v174;
      uint64_t v12 = v181;
      uint64_t v10 = v189;
      uint64_t v8 = v198;
      uint64_t v6 = v208;
      uint64_t v4 = v219;
      uint64_t v2 = v231;
      a1 = v244;
    }
  }
  uint64_t v22 = v21[320];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v232 = v2;
    uint64_t v245 = a1;
    uint64_t v209 = v6;
    uint64_t v220 = v4;
    uint64_t v190 = v10;
    uint64_t v199 = v8;
    uint64_t v175 = v14;
    uint64_t v182 = v12;
    uint64_t v164 = v18;
    uint64_t v169 = v16;
    uint64_t v157 = v22;
    uint64_t v160 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v157;
    uint64_t v20 = v160;
    uint64_t v18 = v164;
    uint64_t v16 = v169;
    uint64_t v14 = v175;
    uint64_t v12 = v182;
    uint64_t v10 = v190;
    uint64_t v8 = v199;
    uint64_t v6 = v209;
    uint64_t v4 = v220;
    int v139 = v138;
    uint64_t v2 = v232;
    a1 = v245;
    if (v139)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v248 = 84;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v248;
      }
      uint64_t v142 = &v247[v141];
      unint64_t v143 = v248 - v141;
      if (v248 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v248 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v157;
      uint64_t v20 = v160;
      uint64_t v18 = v164;
      uint64_t v16 = v169;
      uint64_t v14 = v175;
      uint64_t v12 = v182;
      uint64_t v10 = v190;
      uint64_t v8 = v199;
      uint64_t v6 = v209;
      uint64_t v4 = v220;
      uint64_t v2 = v232;
      a1 = v245;
    }
  }
  uint64_t v24 = v23[233];
  int v25 = &unk_267771000;
  {
    uint64_t v233 = v2;
    uint64_t v246 = a1;
    uint64_t v210 = v6;
    uint64_t v221 = v4;
    uint64_t v191 = v10;
    uint64_t v200 = v8;
    uint64_t v176 = v14;
    uint64_t v183 = v12;
    uint64_t v165 = v18;
    uint64_t v170 = v16;
    uint64_t v158 = v22;
    uint64_t v161 = v20;
    uint64_t v156 = v24;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v156;
    uint64_t v22 = v158;
    uint64_t v20 = v161;
    uint64_t v18 = v165;
    uint64_t v16 = v170;
    uint64_t v14 = v176;
    uint64_t v12 = v183;
    uint64_t v10 = v191;
    uint64_t v8 = v200;
    uint64_t v6 = v210;
    uint64_t v4 = v221;
    int v148 = v147;
    uint64_t v2 = v233;
    a1 = v246;
    if (v148)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v248 = 86;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v248;
      }
      uint64_t v151 = &v247[v150];
      unint64_t v152 = v248 - v150;
      if (v248 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v248 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v156;
      uint64_t v22 = v158;
      uint64_t v20 = v161;
      uint64_t v18 = v165;
      uint64_t v16 = v170;
      uint64_t v14 = v176;
      uint64_t v12 = v183;
      uint64_t v10 = v191;
      uint64_t v8 = v200;
      uint64_t v6 = v210;
      uint64_t v4 = v221;
      uint64_t v2 = v233;
      a1 = v246;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v25[350] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::RewriteOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroResults<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::RewriteOp>,mlir::OpTrait::VariadicOperands<mlir::pdl::RewriteOp>,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::RewriteOp>,mlir::OpTrait::NoTerminator<mlir::pdl::RewriteOp>,mlir::OpTrait::NoRegionArguments<mlir::pdl::RewriteOp>,mlir::OpTrait::SingleBlock<mlir::pdl::RewriteOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::RewriteOp>,mlir::OpTrait::OpInvariants<mlir::pdl::RewriteOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::RewriteOp>,mlir::OpTrait::IsTerminator<mlir::pdl::RewriteOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::RewriteOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroResults<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::RewriteOp>,mlir::OpTrait::VariadicOperands<mlir::pdl::RewriteOp>,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::RewriteOp>,mlir::OpTrait::NoTerminator<mlir::pdl::RewriteOp>,mlir::OpTrait::NoRegionArguments<mlir::pdl::RewriteOp>,mlir::OpTrait::SingleBlock<mlir::pdl::RewriteOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::RewriteOp>,mlir::OpTrait::OpInvariants<mlir::pdl::RewriteOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::RewriteOp>,mlir::OpTrait::IsTerminator<mlir::pdl::RewriteOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::RewriteOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t)a1)
    && mlir::OpTrait::impl::verifyNoRegionArguments(a1, v5)
    && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (uint64_t v8 = a1, mlir::pdl::RewriteOp::verifyInvariantsImpl((mlir::pdl::RewriteOp *)&v8)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(uint64_t a1)
{
  uint64_t v2 = a1;
  return mlir::pdl::RewriteOp::verifyRegions((mlir::pdl::RewriteOp *)&v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::TypeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 12 && (*(void *)a3 == 0x746E6174736E6F63 ? (BOOL v7 = *(_DWORD *)(a3 + 8) == 1701869908) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 12 && *(void *)result == 0x746E6174736E6F63 && *(_DWORD *)(result + 8) == 1701869908)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *unint64_t v5 = v9;
    }
    else
    {
      *unint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"constantType", 12, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v7, (void **)"constantType", (const char *)0xC, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::TypeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::TypeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      int v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      unint64_t v113 = 113;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[380];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      int v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      int v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      int v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      int v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::TypeOp::print((mlir::pdl::TypeOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypeOp>,mlir::OpTrait::OneResult<mlir::pdl::TypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypeOp>>((mlir::OpTrait::impl *)a1, a2))return 0; {
  if (*(void *)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 16])
  }
    return 1;
  return verifyHasBindingUse((mlir::Operation *)a1) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypeOp>,mlir::OpTrait::OneResult<mlir::pdl::TypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5)) {
    return 0;
  }
  uint64_t v6 = *((void *)a1 + 2 * (((unint64_t)*((unsigned int *)a1 + 11) >> 23) & 1) + 8);
  uint64_t v10 = a1;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v6, (void **)"constantType", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  if (*((_DWORD *)a1 + 9))
  }
    uint64_t v7 = (uint64_t)a1 - 16;
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1((uint64_t)a1, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::TypesOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 13
    && (*a3 == 0x746E6174736E6F63 ? (BOOL v7 = *(void *)((char *)a3 + 5) == 0x7365707954746E61) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

void *mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 13 && *result == 0x746E6174736E6F63 && *(void *)((char *)result + 5) == 0x7365707954746E61)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"constantTypes", 13, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (void **)"constantTypes", (const char *)0xD, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::TypesOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::TypesOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      int v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v113 = 114;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      int v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      int v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      int v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      int v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::TypesOp::print((mlir::pdl::TypesOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypesOp>,mlir::OpTrait::OneResult<mlir::pdl::TypesOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::pdl::TypesOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypesOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypesOp>>((mlir::OpTrait::impl *)a1, a2))return 0; {
  if (*(void *)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 16])
  }
    return 1;
  return verifyHasBindingUse((mlir::Operation *)a1) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypesOp>,mlir::OpTrait::OneResult<mlir::pdl::TypesOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::pdl::TypesOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypesOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypesOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5)) {
    return 0;
  }
  uint64_t v6 = (void **)*((void *)a1 + 2 * (((unint64_t)*((unsigned int *)a1 + 11) >> 23) & 1) + 8);
  uint64_t v10 = a1;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v6, (void **)"constantTypes", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  if (*((_DWORD *)a1 + 9))
  }
    uint64_t v7 = (uint64_t)a1 - 16;
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5((uint64_t)a1, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::pdl::PatternOp::verifyRegions(void)::$_0>(uint64_t **a1, uint64_t a2)
{
  v8[24] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 48);
  if (*(_UNKNOWN **)(v3 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v8[0] = *(void *)(v3 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v8);
    if (!Values) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t Values = *(void *)(v3 + 24);
    if (!Values)
    {
LABEL_6:
      __int16 v7 = 259;
      mlir::OpState::emitOpError(v2, &v6, (uint64_t)v8);
      mlir::Diagnostic::attachNote();
    }
  }
  if (*(_UNKNOWN **)(Values + 24) != &mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id) {
    goto LABEL_6;
  }
  return 1;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a3 + 12);
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::PatternOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::RewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::AsmParser::parseAttribute<mlir::TypeAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v20, a3)) {
    return 0;
  }
  uint64_t v7 = v20;
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  unsigned int v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v27;
      uint64_t v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v24;
    if (v24)
    {
      long long v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *long long v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      int v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    int v21 = __p[0];
    if (__p[0])
    {
      int v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    unint64_t v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *int v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::pdl::RangeType::get(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v3);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v4[0] = &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
  v4[1] = &Context;
  return mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3pdl6detail16RangeTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_9RangeTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id, &v3);
}

uint64_t mlir::pdl::PDLDialect::parseType(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  __int16 v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  if ((unsigned __int16)generatedTypeParser(a2, (llvm::StringRef *)&v36, (mlir::Type *)&v35) >= 0x100u) {
    return v35;
  }
  v34[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, mlir::AsmParser *, uint64_t, _WORD *))(*(void *)a2 + 24))(&v42, a2, v4, v34);
  if (v42)
  {
    LODWORD(v38) = 3;
    uint64_t v40 = 15;
    unint64_t v5 = &v38;
    uint64_t v6 = (char *)v44;
    if (v45 >= v46)
    {
      unint64_t v28 = v45 + 1;
      if (v44 <= &v38 && (char *)v44 + 24 * v45 > (char *)&v38)
      {
        int64_t v31 = (char *)&v38 - (unsigned char *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v28, 24);
        uint64_t v6 = (char *)v44;
        unint64_t v5 = (void ***)((char *)v44 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v28, 24);
        unint64_t v5 = &v38;
        uint64_t v6 = (char *)v44;
      }
    }
    long long v7 = &v6[24 * v45];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)long long v7 = v8;
    ++v45;
    if (v42)
    {
      __int16 v41 = 261;
      uint64_t v38 = v36;
      int v39 = v37;
      mlir::Diagnostic::operator<<((uint64_t)v43, &v38);
      if (v42)
      {
        LODWORD(v38) = 3;
        uint64_t v40 = 14;
        uint64_t v9 = &v38;
        uint64_t v10 = (char *)v44;
        if (v45 >= v46)
        {
          unint64_t v29 = v45 + 1;
          if (v44 <= &v38 && (char *)v44 + 24 * v45 > (char *)&v38)
          {
            int64_t v32 = (char *)&v38 - (unsigned char *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
            uint64_t v10 = (char *)v44;
            uint64_t v9 = (void ***)((char *)v44 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
            uint64_t v9 = &v38;
            uint64_t v10 = (char *)v44;
          }
        }
        uint64_t v11 = &v10[24 * v45];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = v9[2];
        *(_OWORD *)uint64_t v11 = v12;
        ++v45;
        if (v42)
        {
          uint64_t v13 = *(void ***)(a1 + 8);
          long long v14 = *(const char **)(a1 + 16);
          __int16 v41 = 261;
          uint64_t v38 = v13;
          int v39 = v14;
          mlir::Diagnostic::operator<<((uint64_t)v43, &v38);
          if (v42)
          {
            LODWORD(v38) = 3;
            uint64_t v40 = 1;
            unint64_t v15 = &v38;
            uint64_t v16 = (char *)v44;
            if (v45 >= v46)
            {
              unint64_t v30 = v45 + 1;
              if (v44 <= &v38 && (char *)v44 + 24 * v45 > (char *)&v38)
              {
                int64_t v33 = (char *)&v38 - (unsigned char *)v44;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
                uint64_t v16 = (char *)v44;
                unint64_t v15 = (void ***)((char *)v44 + v33);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
                unint64_t v15 = &v38;
                uint64_t v16 = (char *)v44;
              }
            }
            uint64_t v17 = &v16[24 * v45];
            long long v18 = *(_OWORD *)v15;
            *((void *)v17 + 2) = v15[2];
            *(_OWORD *)uint64_t v17 = v18;
            ++v45;
            if (v42) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
            }
          }
        }
      }
    }
  }
  if (v52)
  {
    int v19 = __p;
    if (__p)
    {
      unint64_t v20 = v51;
      int v21 = __p;
      if (v51 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int v21 = __p;
      }
      unint64_t v51 = v19;
      operator delete(v21);
    }
    int v22 = v48;
    if (v48)
    {
      uint64_t v23 = v49;
      unint64_t v24 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        unint64_t v24 = v48;
      }
      uint64_t v49 = v22;
      operator delete(v24);
    }
    if (v44 != v47) {
      free(v44);
    }
  }
  return 0;
}

uint64_t generatedTypeParser(mlir::AsmParser *a1, llvm::StringRef *a2, mlir::Type *a3)
{
  v20[0] = a1;
  uint64_t v6 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  v22[2] = 0;
  long long v21 = 0uLL;
  v20[1] = v6;
  v22[0] = 0;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, long long *))(*(void *)a1 + 608))(a1, &v21))
  {
    uint64_t v23 = "attribute";
    uint64_t v24 = 9;
    if (!v22[2])
    {
      if (*((void *)&v21 + 1))
      {
        if (*((void *)&v21 + 1) == 9 && *(void *)v21 == 0x7475626972747461 && *(unsigned char *)(v21 + 8) == 101)
        {
          uint64_t Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
          TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
          long long v14 = &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id;
          goto LABEL_54;
        }
        uint64_t v23 = "operation";
        uint64_t v24 = 9;
      }
      else
      {
        (*(void (**)(void, const char **, uint64_t))(*(void *)v20[0] + 616))(v20[0], &v23, 1);
        uint64_t v23 = "operation";
        uint64_t v24 = 9;
        if (v22[2]) {
          return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
        }
      }
      if (*((void *)&v21 + 1))
      {
        if (*((void *)&v21 + 1) == 9 && *(void *)v21 == 0x6F6974617265706FLL && *(unsigned char *)(v21 + 8) == 110)
        {
          uint64_t v16 = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
          TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v16);
          long long v14 = &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id;
          goto LABEL_54;
        }
        uint64_t v23 = "range";
        uint64_t v24 = 5;
      }
      else
      {
        (*(void (**)(void, const char **, uint64_t))(*(void *)v20[0] + 616))(v20[0], &v23, 1);
        uint64_t v23 = "range";
        uint64_t v24 = 5;
        if (v22[2]) {
          return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
        }
      }
      if (*((void *)&v21 + 1))
      {
        if (*((void *)&v21 + 1) == 5 && *(_DWORD *)v21 == 1735287154 && *(unsigned char *)(v21 + 4) == 101)
        {
          uint64_t SingletonImpl = mlir::pdl::RangeType::parse(a1, v7);
LABEL_55:
          *(void *)a3 = SingletonImpl;
          v22[0] = SingletonImpl != 0;
          *(_WORD *)&v22[1] = 257;
          return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
        }
        uint64_t v23 = "type";
        uint64_t v24 = 4;
      }
      else
      {
        (*(void (**)(void, const char **, uint64_t))(*(void *)v20[0] + 616))(v20[0], &v23, 1);
        uint64_t v23 = "type";
        uint64_t v24 = 4;
        if (v22[2]) {
          return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
        }
      }
      if (!*((void *)&v21 + 1))
      {
        (*(void (**)(void, const char **, uint64_t))(*(void *)v20[0] + 616))(v20[0], &v23, 1);
        uint64_t v23 = "value";
        uint64_t v24 = 5;
        if (v22[2]) {
          return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
        }
        goto LABEL_28;
      }
      if (*((void *)&v21 + 1) != 4 || *(_DWORD *)v21 != 1701869940)
      {
        uint64_t v23 = "value";
        uint64_t v24 = 5;
LABEL_28:
        if (!*((void *)&v21 + 1))
        {
          (*(void (**)(void, const char **, uint64_t))(*(void *)v20[0] + 616))(v20[0], &v23, 1);
          if (v22[2]) {
            return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
          }
          goto LABEL_51;
        }
        if (*((void *)&v21 + 1) != 5
          || (*(_DWORD *)v21 == 1970037110 ? (BOOL v11 = *(unsigned char *)(v21 + 4) == 101) : (BOOL v11 = 0), !v11))
        {
LABEL_51:
          *(_OWORD *)a2 = v21;
          *(_WORD *)int v22 = 0;
          goto LABEL_39;
        }
        long long v12 = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
        TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v12);
        long long v14 = &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id;
        goto LABEL_54;
      }
      long long v18 = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v18);
      long long v14 = &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id;
LABEL_54:
      uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)v14);
      goto LABEL_55;
    }
  }
  else
  {
    if (!v22[2])
    {
      *(_WORD *)int v22 = 256;
LABEL_39:
      v22[2] = 1;
      return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
    }
    *(_WORD *)int v22 = 256;
  }
  return mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)v20);
}

llvm::raw_ostream *mlir::pdl::PDLDialect::printType(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  return generatedTypePrinter(a2, a3);
}

llvm::raw_ostream *generatedTypePrinter(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)result + 136);
  if (v3 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
  {
    __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v7 = *((void *)result + 4);
    if ((unint64_t)(*((void *)result + 3) - v7) <= 8)
    {
      long long v8 = "attribute";
      size_t v9 = 9;
      return llvm::raw_ostream::write(result, v8, v9);
    }
    char v10 = 101;
    BOOL v11 = "attribute";
    goto LABEL_20;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
  {
    __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v7 = *((void *)result + 4);
    if ((unint64_t)(*((void *)result + 3) - v7) <= 8)
    {
      long long v8 = "operation";
      size_t v9 = 9;
      return llvm::raw_ostream::write(result, v8, v9);
    }
    char v10 = 110;
    BOOL v11 = "operation";
LABEL_20:
    *(unsigned char *)(v7 + 8) = v10;
    *(void *)uint64_t v7 = *(void *)v11;
    *((void *)result + 4) += 9;
    return result;
  }
  uint64_t v4 = result;
  if (result && v3 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    unint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v6 = *((void *)v5 + 4);
    if ((unint64_t)(*((void *)v5 + 3) - v6) > 4)
    {
      *(unsigned char *)(v6 + 4) = 101;
      *(_DWORD *)uint64_t v6 = 1735287154;
      *((void *)v5 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v5, "range", 5uLL);
    }
    long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, "<", 1uLL);
    }
    else
    {
      unsigned char *v13 = 60;
      ++*((void *)v12 + 4);
    }
    generatedTypePrinter(*((void *)v4 + 1), a2);
    __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    unint64_t v15 = (unsigned char *)*((void *)result + 4);
    if (*((unsigned char **)result + 3) != v15)
    {
      *unint64_t v15 = 62;
      ++*((void *)result + 4);
      return result;
    }
    long long v8 = ">";
    size_t v9 = 1;
    return llvm::raw_ostream::write(result, v8, v9);
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
  {
    __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    long long v14 = (_DWORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v14 <= 3uLL)
    {
      long long v8 = "type";
      size_t v9 = 4;
      return llvm::raw_ostream::write(result, v8, v9);
    }
    *long long v14 = 1701869940;
    *((void *)result + 4) += 4;
  }
  else if (v3 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
  {
    __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v16 = *((void *)result + 4);
    if ((unint64_t)(*((void *)result + 3) - v16) <= 4)
    {
      long long v8 = "value";
      size_t v9 = 5;
      return llvm::raw_ostream::write(result, v8, v9);
    }
    *(unsigned char *)(v16 + 4) = 101;
    *(_DWORD *)uint64_t v16 = 1970037110;
    *((void *)result + 4) += 5;
  }
  return result;
}

void mlir::pdl::PDLDialect::registerTypes(mlir::pdl::PDLDialect *this)
{
}

BOOL mlir::pdl::PDLType::classof(uint64_t a1)
{
  return *(void *)(**(void **)a1 + 24) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id;
}

void *mlir::pdl::getRangeElementTypeOrSelf(void *result)
{
  if (result)
  {
    if (*(_UNKNOWN **)(*result + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
      return (void *)result[1];
    }
  }
  return result;
}

uint64_t mlir::pdl::RangeType::parse(mlir::pdl::RangeType *this, mlir::AsmParser *a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (!(*(unsigned __int8 (**)(mlir::pdl::RangeType *, mlir::AsmParser *))(*(void *)this + 152))(this, a2))return 0; {
  uint64_t v3 = (*(uint64_t (**)(mlir::pdl::RangeType *))(*(void *)this + 40))(this);
  }
  uint64_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  if ((unsigned __int16)generatedTypeParser(this, (llvm::StringRef *)&v42, (mlir::Type *)&v44) <= 0xFFu)
  {
    uint64_t v4 = (*(uint64_t (**)(mlir::pdl::RangeType *))(*(void *)this + 16))(this);
    __int16 v41 = 259;
    (*(void (**)(void **__return_ptr, mlir::pdl::RangeType *, uint64_t, uint64_t *))(*(void *)this + 24))(&v49, this, v4, v40);
    if (v49)
    {
      __int16 v48 = 261;
      uint64_t Context = v42;
      unsigned int v46 = v43;
      mlir::Diagnostic::operator<<((uint64_t)&p_Context, &Context);
      if (v49)
      {
        LODWORD(Context) = 3;
        unsigned int v46 = "'";
        uint64_t v47 = 1;
        unint64_t v5 = &Context;
        uint64_t v6 = (char *)v51;
        if (v52 >= v53)
        {
          unint64_t v34 = v52 + 1;
          if (v51 <= &Context && (char *)v51 + 24 * v52 > (char *)&Context)
          {
            int64_t v37 = (char *)&Context - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v34, 24);
            uint64_t v6 = (char *)v51;
            unint64_t v5 = (void ***)((char *)v51 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v34, 24);
            unint64_t v5 = &Context;
            uint64_t v6 = (char *)v51;
          }
        }
        uint64_t v7 = &v6[24 * v52];
        long long v8 = *(_OWORD *)v5;
        *((void *)v7 + 2) = v5[2];
        *(_OWORD *)uint64_t v7 = v8;
        ++v52;
        if (v49) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
        }
      }
    }
    if (!v59) {
      return 0;
    }
    size_t v9 = __p;
    if (__p)
    {
      char v10 = v58;
      BOOL v11 = __p;
      if (v58 != __p)
      {
        do
          char v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        BOOL v11 = __p;
      }
      int v58 = v9;
      operator delete(v11);
    }
    long long v12 = v55;
    if (!v55) {
      goto LABEL_44;
    }
    uint64_t v13 = v56;
    long long v14 = v55;
    if (v56 == v55) {
      goto LABEL_43;
    }
    do
    {
      uint64_t v16 = *--v13;
      uint64_t v15 = v16;
      void *v13 = 0;
      if (v16) {
        MEMORY[0x21667D390](v15, 0x1000C8077774924);
      }
    }
    while (v13 != v12);
    goto LABEL_42;
  }
  uint64_t v17 = v44;
  if (v44 && (*(unsigned __int8 (**)(mlir::pdl::RangeType *))(*(void *)this + 168))(this))
  {
    if (*(_UNKNOWN **)(*(void *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v40[0] = v17;
      uint64_t Context = (void **)mlir::Attribute::getContext((mlir::Attribute *)v40);
      TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer((mlir::MLIRContext *)Context);
      uint64_t v49 = &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
      p_uint64_t Context = &Context;
      return mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3pdl6detail16RangeTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_9RangeTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)&v49, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id, v40);
    }
    __int16 v48 = 257;
    (*(void (**)(void **__return_ptr, mlir::pdl::RangeType *, uint64_t, void ***))(*(void *)this + 24))(&v49, this, v3, &Context);
    if (v49)
    {
      LODWORD(v40[0]) = 3;
      v40[1] = (uint64_t)"element of pdl.range cannot be another range, but got";
      void v40[2] = 53;
      unint64_t v20 = v40;
      long long v21 = (char *)v51;
      if (v52 >= v53)
      {
        unint64_t v35 = v52 + 1;
        if (v51 <= v40 && (char *)v51 + 24 * v52 > (char *)v40)
        {
          int64_t v38 = (char *)v40 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
          long long v21 = (char *)v51;
          unint64_t v20 = (uint64_t *)((char *)v51 + v38);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
          unint64_t v20 = v40;
          long long v21 = (char *)v51;
        }
      }
      int v22 = &v21[24 * v52];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)int v22 = v23;
      ++v52;
      if (v49)
      {
        uint64_t v24 = v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v40, v17);
        uint64_t v25 = (char *)v51;
        if (v52 >= v53)
        {
          unint64_t v36 = v52 + 1;
          if (v51 <= v40 && (char *)v51 + 24 * v52 > (char *)v40)
          {
            int64_t v39 = (char *)v40 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
            uint64_t v25 = (char *)v51;
            uint64_t v24 = (uint64_t *)((char *)v51 + v39);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
            uint64_t v24 = v40;
            uint64_t v25 = (char *)v51;
          }
        }
        uint64_t v26 = &v25[24 * v52];
        long long v27 = *(_OWORD *)v24;
        *((void *)v26 + 2) = v24[2];
        *(_OWORD *)uint64_t v26 = v27;
        ++v52;
        if (v49) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
        }
      }
    }
    if (v59)
    {
      unint64_t v28 = __p;
      if (__p)
      {
        unint64_t v29 = v58;
        unint64_t v30 = __p;
        if (v58 != __p)
        {
          do
            unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          unint64_t v30 = __p;
        }
        int v58 = v28;
        operator delete(v30);
      }
      long long v12 = v55;
      if (!v55) {
        goto LABEL_44;
      }
      int64_t v31 = v56;
      long long v14 = v55;
      if (v56 == v55)
      {
LABEL_43:
        uint64_t v56 = v12;
        operator delete(v14);
LABEL_44:
        if (v51 != v54) {
          free(v51);
        }
        return 0;
      }
      do
      {
        uint64_t v33 = *--v31;
        uint64_t v32 = v33;
        *int64_t v31 = 0;
        if (v33) {
          MEMORY[0x21667D390](v32, 0x1000C8077774924);
        }
      }
      while (v31 != v12);
LABEL_42:
      long long v14 = v55;
      goto LABEL_43;
    }
  }
  return 0;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v17 = *a5;
  uint64_t v6 = &unk_267770000;
  {
    long long v14 = a1;
    uint64_t v6 = &unk_267770000;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      uint64_t v6 = (void *)&unk_267770000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  uint64_t v7 = v6[385];
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (8 * ((v17 >> 4) ^ (v17 >> 9)) + 8));
  v15[0] = &v17;
  v15[1] = v18;
  uint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl::detail::RangeTypeStorage * mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::pdl::detail::RangeTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl::detail::RangeTypeStorage * mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::pdl::detail::RangeTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl::detail::RangeTypeStorage * mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::pdl::detail::RangeTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl::detail::RangeTypeStorage * mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::pdl::detail::RangeTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    unint64_t v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    void *v12 = 0;
    v12[1] = v4;
    uint64_t v13 = a1[1];
    long long v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    void *v12 = 0;
    v12[1] = v4;
    uint64_t v13 = a1[1];
    long long v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir3pdl6detail16RangeTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_9RangeTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void *mlir::Dialect::addType<mlir::pdl::AttributeType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  long long v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::pdl::AttributeType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  int v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13AttributeTypeENSD_7PDLTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v20 = &v12;
  long long v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13AttributeTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  int v22 = &v11;
  long long v23 = &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  uint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    BOOL v7 = (void **)((char *)v14 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  uint64_t v24 = &v11;
  uint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id;
  uint64_t v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl13AttributeTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  long long v14 = &v24;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::pdl::OperationType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  long long v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::pdl::OperationType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  int v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13OperationTypeENSD_7PDLTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v20 = &v12;
  long long v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13OperationTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  int v22 = &v11;
  long long v23 = &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  uint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    BOOL v7 = (void **)((char *)v14 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  uint64_t v24 = &v11;
  uint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id;
  uint64_t v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl13OperationTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  long long v14 = &v24;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void mlir::Dialect::addType<mlir::pdl::RangeType>(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v24, 0, sizeof(v24));
  int v22 = v24;
  int v23 = 0;
  uint64_t v11 = a1;
  unint64_t v12 = v14;
  uint64_t v13 = 0x300000000;
  unint64_t v16 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v15[0] = (llvm *)mlir::detail::StorageUserBase<mlir::pdl::RangeType,mlir::pdl::PDLType,mlir::pdl::detail::RangeTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v17 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9RangeTypeENSD_7PDLTypeENSD_6detail16RangeTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v18 = &v10;
  int v19 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9RangeTypeENSC_7PDLTypeENSC_6detail16RangeTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  unint64_t v20 = &v9;
  long long v21 = &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id, (uint64_t)&v11);
  char v3 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        uint64_t v4 = v15;
      }
      else {
        uint64_t v4 = (llvm **)v15[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v5 = v12;
  if (v13)
  {
    uint64_t v6 = 16 * v13;
    BOOL v7 = (void **)((char *)v12 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v12;
  }
  if (v5 != v14) {
    free(v5);
  }
  mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void *mlir::Dialect::addType<mlir::pdl::TypeType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  long long v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::pdl::TypeType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  int v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl8TypeTypeENSD_7PDLTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v20 = &v12;
  long long v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl8TypeTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  int v22 = &v11;
  int v23 = &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  uint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    BOOL v7 = (void **)((char *)v14 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  uint64_t v24 = &v11;
  uint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id;
  uint64_t v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl8TypeTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  long long v14 = &v24;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::pdl::ValueType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  long long v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::pdl::ValueType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  int v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9ValueTypeENSD_7PDLTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v20 = &v12;
  long long v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9ValueTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  int v22 = &v11;
  int v23 = &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  uint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    BOOL v7 = (void **)((char *)v14 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  uint64_t v24 = &v11;
  uint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id;
  uint64_t v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl9ValueTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  long long v14 = &v24;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t mlir::detail::StorageUserBase<mlir::pdl::AttributeType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13AttributeTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl13AttributeTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::pdl::OperationType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl13OperationTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl13OperationTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::pdl::RangeType,mlir::pdl::PDLType,mlir::pdl::detail::RangeTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9RangeTypeENSD_7PDLTypeENSD_6detail16RangeTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9RangeTypeENSC_7PDLTypeENSC_6detail16RangeTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v5 = *a5;
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v9 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
  v10[1] = &Context;
  return mlir::StorageUniquer::get<mlir::pdl::detail::RangeTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3pdl6detail16RangeTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_9RangeTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id, &v9);
}

uint64_t mlir::detail::StorageUserBase<mlir::pdl::TypeType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl8TypeTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl8TypeTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::pdl::ValueType,mlir::pdl::PDLType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_3pdl9ValueTypeENSC_7PDLTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_3pdl9ValueTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

void mlir::pdl_interp::PDLInterpDialect::PDLInterpDialect(mlir::pdl_interp::PDLInterpDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v2 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"pdl_interp", 10, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::PDLInterpDialect,void>::id);
  *uint64_t v2 = &unk_26C35C5E0;
  char v3 = (uint64_t *)v2[4];
  if (!mlir::MLIRContext::isDialectLoading(v3, (uint64_t)"pdl", 3))
  {
    uint64_t v4 = v3;
    mlir::MLIRContext::getOrLoadDialect(v3, (uint64_t)"pdl", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl::PDLDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl::PDLDialect>(void)::{lambda(void)#1}>, (uint64_t)&v4);
  }
  mlir::Dialect::addOperations<mlir::pdl_interp::ApplyConstraintOp,mlir::pdl_interp::ApplyRewriteOp,mlir::pdl_interp::AreEqualOp,mlir::pdl_interp::BranchOp,mlir::pdl_interp::CheckAttributeOp,mlir::pdl_interp::CheckOperandCountOp,mlir::pdl_interp::CheckOperationNameOp,mlir::pdl_interp::CheckResultCountOp,mlir::pdl_interp::CheckTypeOp,mlir::pdl_interp::CheckTypesOp,mlir::pdl_interp::ContinueOp,mlir::pdl_interp::CreateAttributeOp,mlir::pdl_interp::CreateOperationOp,mlir::pdl_interp::CreateRangeOp,mlir::pdl_interp::CreateTypeOp,mlir::pdl_interp::CreateTypesOp,mlir::pdl_interp::EraseOp,mlir::pdl_interp::ExtractOp,mlir::pdl_interp::FinalizeOp,mlir::pdl_interp::ForEachOp,mlir::pdl_interp::FuncOp,mlir::pdl_interp::GetAttributeOp,mlir::pdl_interp::GetAttributeTypeOp,mlir::pdl_interp::GetDefiningOpOp,mlir::pdl_interp::GetOperandOp,mlir::pdl_interp::GetOperandsOp,mlir::pdl_interp::GetResultOp,mlir::pdl_interp::GetResultsOp,mlir::pdl_interp::GetUsersOp,mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::IsNotNullOp,mlir::pdl_interp::RecordMatchOp,mlir::pdl_interp::ReplaceOp,mlir::pdl_interp::SwitchAttributeOp,mlir::pdl_interp::SwitchOperandCountOp,mlir::pdl_interp::SwitchOperationNameOp,mlir::pdl_interp::SwitchResultCountOp,mlir::pdl_interp::SwitchTypeOp,mlir::pdl_interp::SwitchTypesOp>();
}

void mlir::pdl_interp::PDLInterpDialect::~PDLInterpDialect(llvm **this)
{
}

void sub_21177797C()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::pdl_interp::ApplyConstraintOp,mlir::pdl_interp::ApplyRewriteOp,mlir::pdl_interp::AreEqualOp,mlir::pdl_interp::BranchOp,mlir::pdl_interp::CheckAttributeOp,mlir::pdl_interp::CheckOperandCountOp,mlir::pdl_interp::CheckOperationNameOp,mlir::pdl_interp::CheckResultCountOp,mlir::pdl_interp::CheckTypeOp,mlir::pdl_interp::CheckTypesOp,mlir::pdl_interp::ContinueOp,mlir::pdl_interp::CreateAttributeOp,mlir::pdl_interp::CreateOperationOp,mlir::pdl_interp::CreateRangeOp,mlir::pdl_interp::CreateTypeOp,mlir::pdl_interp::CreateTypesOp,mlir::pdl_interp::EraseOp,mlir::pdl_interp::ExtractOp,mlir::pdl_interp::FinalizeOp,mlir::pdl_interp::ForEachOp,mlir::pdl_interp::FuncOp,mlir::pdl_interp::GetAttributeOp,mlir::pdl_interp::GetAttributeTypeOp,mlir::pdl_interp::GetDefiningOpOp,mlir::pdl_interp::GetOperandOp,mlir::pdl_interp::GetOperandsOp,mlir::pdl_interp::GetResultOp,mlir::pdl_interp::GetResultsOp,mlir::pdl_interp::GetUsersOp,mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::IsNotNullOp,mlir::pdl_interp::RecordMatchOp,mlir::pdl_interp::ReplaceOp,mlir::pdl_interp::SwitchAttributeOp,mlir::pdl_interp::SwitchOperandCountOp,mlir::pdl_interp::SwitchOperationNameOp,mlir::pdl_interp::SwitchResultCountOp,mlir::pdl_interp::SwitchTypeOp,mlir::pdl_interp::SwitchTypesOp>()
{
}

uint64_t mlir::pdl_interp::CreateOperationOp::verify(mlir::pdl_interp::CreateOperationOp *this)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v3 = v2 + 64;
  if (!v4) {
    return 1;
  }
  if (BYTE3(v1)) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(_DWORD *)(v6 + 32))
  {
    v40[0] = (void **)"with inferred results cannot also have explicit result types";
    __int16 v41 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v40, (uint64_t)&v45);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
    if (v45) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
    }
    if (v55)
    {
      uint64_t v8 = __p;
      if (__p)
      {
        uint64_t v9 = v54;
        char v10 = __p;
        if (v54 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          char v10 = __p;
        }
        uint64_t v54 = v8;
        operator delete(v10);
      }
      uint64_t v11 = v51;
      if (!v51) {
        goto LABEL_44;
      }
      unint64_t v12 = v52;
      uint64_t v13 = v51;
      if (v52 == v51)
      {
LABEL_43:
        unsigned int v52 = v11;
        operator delete(v13);
LABEL_44:
        if (v47 != v50) {
          free(v47);
        }
        return v7;
      }
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        void *v12 = 0;
        if (v15) {
          MEMORY[0x21667D390](v14, 0x1000C8077774924);
        }
      }
      while (v12 != v11);
LABEL_42:
      uint64_t v13 = v51;
      goto LABEL_43;
    }
    return v7;
  }
  uint64_t v45 = *(void *)(v6 + 16);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v45);
  uint64_t v18 = v17;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  mlir::OperationName::OperationName(&v39, AttrData, v18, Context);
  if (mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>((uint64_t)&v39)) {
    return 1;
  }
  __int16 v41 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, v40, (uint64_t)&v45);
  if (v45)
  {
    int v42 = 3;
    int v43 = "has inferred results, but the created operation '";
    uint64_t v44 = 49;
    unint64_t v20 = &v42;
    long long v21 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v35 = v48 + 1;
      if (v47 <= &v42 && (char *)v47 + 24 * v48 > (char *)&v42)
      {
        int64_t v37 = (char *)&v42 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        long long v21 = (char *)v47;
        unint64_t v20 = (int *)((char *)v47 + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        unint64_t v20 = &v42;
        long long v21 = (char *)v47;
      }
    }
    int v22 = &v21[24 * v48];
    long long v23 = *(_OWORD *)v20;
    *((void *)v22 + 2) = *((void *)v20 + 2);
    *(_OWORD *)int v22 = v23;
    ++v48;
    if (v45)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v46, v39);
      if (v45)
      {
        int v42 = 3;
        int v43 = "' does not support result type inference (or is not registered)";
        uint64_t v44 = 63;
        uint64_t v24 = &v42;
        uint64_t v25 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v36 = v48 + 1;
          if (v47 <= &v42 && (char *)v47 + 24 * v48 > (char *)&v42)
          {
            int64_t v38 = (char *)&v42 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            uint64_t v25 = (char *)v47;
            uint64_t v24 = (int *)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            uint64_t v24 = &v42;
            uint64_t v25 = (char *)v47;
          }
        }
        uint64_t v26 = &v25[24 * v48];
        long long v27 = *(_OWORD *)v24;
        *((void *)v26 + 2) = *((void *)v24 + 2);
        *(_OWORD *)uint64_t v26 = v27;
        ++v48;
      }
    }
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    unint64_t v28 = __p;
    if (__p)
    {
      unint64_t v29 = v54;
      unint64_t v30 = __p;
      if (v54 != __p)
      {
        do
          unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        unint64_t v30 = __p;
      }
      uint64_t v54 = v28;
      operator delete(v30);
    }
    uint64_t v11 = v51;
    if (!v51) {
      goto LABEL_44;
    }
    int64_t v31 = v52;
    uint64_t v13 = v51;
    if (v52 == v51) {
      goto LABEL_43;
    }
    do
    {
      uint64_t v33 = *--v31;
      uint64_t v32 = v33;
      *int64_t v31 = 0;
      if (v33) {
        MEMORY[0x21667D390](v32, 0x1000C8077774924);
      }
    }
    while (v31 != v11);
    goto LABEL_42;
  }
  return v7;
}

BOOL mlir::pdl_interp::CreateOperationOp::getInferredResultTypes(mlir::pdl_interp::CreateOperationOp *this)
{
  return *(void *)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64) != 0;
}

uint64_t mlir::pdl_interp::CreateOperationOp::getName(mlir::pdl_interp::CreateOperationOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v3);
}

void mlir::pdl_interp::ForEachOp::build(uint64_t a1, mlir::OperationState *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)&v4, 1);
  mlir::OperationState::addRegion(a2);
}

uint64_t mlir::pdl_interp::ForEachOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  memset(&v8[4], 0, 24);
  char v12 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  memset(v8, 0, 24);
  if ((*(unsigned __int8 (**)(void))(*(void *)a1 + 720))())
  {
    uint64_t v6 = (mlir::Block *)" after loop variable";
    __int16 v7 = 259;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, mlir::Block **))(*(void *)a1 + 368))(a1, "in", 2, &v6))
    {
      if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
      {
        uint64_t v4 = mlir::pdl::RangeType::get(v9);
        if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, v4, (uint64_t)a2 + 16))
        {
          mlir::OperationState::addRegion(a2);
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::pdl_interp::ForEachOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v4) {
    uint64_t v5 = v4 - 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = **(void **)(v5 + 48);
  __int16 v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v8 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
  }
  else
  {
    *((void *)v7 + 4) = v8 + 1;
    unsigned char *v8 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v6);
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = *((void *)v9 + 4);
  if ((unint64_t)(*((void *)v9 + 3) - v10) > 2)
  {
    *(unsigned char *)(v10 + 2) = 32;
    *(_WORD *)uint64_t v10 = 14880;
    *((void *)v9 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v9, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  char v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v12 = (_DWORD *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v12 > 3uLL)
  {
    _DWORD *v12 = 544106784;
    *((void *)v11 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v11, " in ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
    uint64_t v15 = *this;
    unint64_t v16 = *((unsigned int *)*this + 11);
    if ((v16 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
    uint64_t v15 = *this;
    unint64_t v16 = *((unsigned int *)*this + 11);
    if ((v16 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v17 = (((unint64_t)v15 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v15 + 10);
      goto LABEL_18;
    }
  }
  unint64_t v17 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v17, 0, 1, 0);
  uint64_t v18 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v18);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v18 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v21, 0, 0);
  int v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v23 = (_DWORD *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v23 > 3uLL)
  {
    *long long v23 = 540945696;
    *((void *)v22 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v22, " -> ", 4uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
}

uint64_t mlir::pdl_interp::ForEachOp::getSuccessor(mlir::pdl_interp::ForEachOp *this)
{
  return *(void *)(((*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 24);
}

uint64_t mlir::pdl_interp::ForEachOp::verify(mlir::pdl_interp::ForEachOp *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((void *)*v4 == v4) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!MEMORY[0]) {
      goto LABEL_27;
    }
  }
  uint64_t v5 = v4[1];
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (((*(void *)(v6 + 56) - *(void *)(v6 + 48)) & 0x7FFFFFFF8) != 8)
  {
LABEL_27:
    v25[0] = (void **)"requires exactly one argument";
    __int16 v26 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v25, (uint64_t)v27);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      uint64_t v18 = __p;
      if (__p)
      {
        int v19 = v33;
        unint64_t v20 = __p;
        if (v33 != __p)
        {
          do
            int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        uint64_t v33 = v18;
        operator delete(v20);
      }
      uint64_t v13 = v30;
      if (!v30) {
        goto LABEL_43;
      }
      uint64_t v21 = v31;
      uint64_t v15 = v30;
      if (v31 == v30)
      {
LABEL_42:
        int64_t v31 = v13;
        operator delete(v15);
LABEL_43:
        if (v28 != &v29) {
          free(v28);
        }
        return v9;
      }
      do
      {
        uint64_t v23 = *--v21;
        uint64_t v22 = v23;
        void *v21 = 0;
        if (v23) {
          MEMORY[0x21667D390](v22, 0x1000C8077774924);
        }
      }
      while (v21 != v13);
LABEL_41:
      uint64_t v15 = v30;
      goto LABEL_42;
    }
    return v9;
  }
  uint64_t v7 = *(void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(v2 + 40)
                 + 8);
  if (v7) {
    uint64_t v8 = v7 - 8;
  }
  else {
    uint64_t v8 = 0;
  }
  if (mlir::pdl::RangeType::get(*(void *)(**(void **)(v8 + 48) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  v25[0] = (void **)"operand must be a range of loop variable type";
  __int16 v26 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v25, (uint64_t)v27);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      char v11 = v33;
      char v12 = __p;
      if (v33 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        char v12 = __p;
      }
      uint64_t v33 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v30;
    if (!v30) {
      goto LABEL_43;
    }
    uint64_t v14 = v31;
    uint64_t v15 = v30;
    if (v31 == v30) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v17 = *--v14;
      uint64_t v16 = v17;
      *uint64_t v14 = 0;
      if (v17) {
        MEMORY[0x21667D390](v16, 0x1000C8077774924);
      }
    }
    while (v14 != v13);
    goto LABEL_41;
  }
  return v9;
}

void mlir::pdl_interp::FuncOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  _OWORD v17[2] = *MEMORY[0x263EF8340];
  uint64_t v16 = a5;
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v16);
  mlir::ValueRange::ValueRange(v17, Inputs, v15);
  mlir::detail::FunctionOpInterfaceTrait<mlir::pdl_interp::FuncOp>::buildWithEntryBlock(a1, a2, a3, a4, a5, a6, a7);
}

void mlir::detail::FunctionOpInterfaceTrait<mlir::pdl_interp::FuncOp>::buildWithEntryBlock(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  __int16 v19 = 261;
  v18[0] = a3;
  v18[1] = a4;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v18);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v22 = 261;
  unint64_t v20 = "sym_name";
  uint64_t v21 = 8;
  uint64_t v13 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v20);
  ZinMirCacheTensors::ZinMirCacheTensors(v23, v13, StringAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v23[0], v23[1]);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  uint64_t v15 = mlir::TypeAttr::get(a5);
  ZinMirCacheTensors::ZinMirCacheTensors(&v20, v14, v15);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v20, v21);
  *(void *)(a2 + 192) = 0;
  uint64_t v16 = *(unsigned int *)(a2 + 120);
  unint64_t v17 = v16 + ((16 * a7) >> 4);
  if (v17 > *(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v17, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 120);
  }
  if (a7)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v16), a6, 16 * a7);
    LODWORD(v16) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v16 + a7;
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

uint64_t mlir::pdl_interp::FuncOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::pdl_interp::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::pdl_interp::SwitchAttributeOp::verify(Operation **this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int64_t v38 = *this;
  mlir::SuccessorRange::SuccessorRange(v42, v38);
  mlir::SuccessorRange::SuccessorRange(v42, v38);
  unint64_t v1 = v42[1] - 1;
  v42[0] = *((void *)v38 + 2 * (((unint64_t)*((unsigned int *)v38 + 11) >> 23) & 1) + 8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v42);
  if ((const char *)v1 == v2) {
    return 1;
  }
  uint64_t v4 = v2;
  unint64_t v36 = (void **)"expected number of cases to match the number of case values, got ";
  __int16 v37 = 259;
  mlir::OpState::emitOpError((uint64_t *)&v38, &v36, (uint64_t)v42);
  if (v42[0])
  {
    int v39 = 5;
    uint64_t v40 = (const char *)v1;
    uint64_t v5 = &v39;
    uint64_t v6 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v28 = v44 + 1;
      if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
      {
        int64_t v33 = (char *)&v39 - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        uint64_t v6 = (char *)v43;
        uint64_t v5 = (int *)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        uint64_t v5 = &v39;
        uint64_t v6 = (char *)v43;
      }
    }
    uint64_t v7 = &v6[24 * v44];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v44;
    if (v42[0])
    {
      int v39 = 3;
      uint64_t v40 = " but expected ";
      uint64_t v41 = 14;
      uint64_t v10 = &v39;
      char v11 = (char *)v43;
      if (v9 >= v45)
      {
        unint64_t v29 = v9 + 1;
        BOOL v30 = (char *)v43 + 24 * v9 > (char *)&v39;
        if (v43 <= &v39 && v30)
        {
          int64_t v34 = (char *)&v39 - (unsigned char *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          char v11 = (char *)v43;
          uint64_t v10 = (int *)((char *)v43 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          uint64_t v10 = &v39;
          char v11 = (char *)v43;
        }
      }
      char v12 = &v11[24 * v44];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)char v12 = v13;
      uint64_t v14 = ++v44;
      if (v42[0])
      {
        int v39 = 5;
        uint64_t v40 = v4;
        uint64_t v15 = &v39;
        uint64_t v16 = (char *)v43;
        if (v14 >= v45)
        {
          unint64_t v31 = v14 + 1;
          BOOL v32 = (char *)v43 + 24 * v14 > (char *)&v39;
          if (v43 <= &v39 && v32)
          {
            int64_t v35 = (char *)&v39 - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
            uint64_t v16 = (char *)v43;
            uint64_t v15 = (int *)((char *)v43 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
            uint64_t v15 = &v39;
            uint64_t v16 = (char *)v43;
          }
        }
        unint64_t v17 = &v16[24 * v44];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)unint64_t v17 = v18;
        ++v44;
      }
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  }
  if (v51)
  {
    __int16 v19 = __p;
    if (__p)
    {
      unint64_t v20 = v50;
      uint64_t v21 = __p;
      if (v50 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      unint64_t v50 = v19;
      operator delete(v21);
    }
    __int16 v22 = v47;
    if (v47)
    {
      uint64_t v23 = v48;
      uint64_t v24 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v47;
      }
      unsigned int v48 = v22;
      operator delete(v24);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v3;
}

uint64_t mlir::pdl_interp::SwitchOperandCountOp::verify(Operation **this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int64_t v38 = *this;
  mlir::SuccessorRange::SuccessorRange(v42, v38);
  mlir::SuccessorRange::SuccessorRange(v42, v38);
  unint64_t v1 = v42[1] - 1;
  v42[0] = *((void *)v38 + 2 * (((unint64_t)*((unsigned int *)v38 + 11) >> 23) & 1) + 8);
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v42);
  if (v1 == NumElements) {
    return 1;
  }
  uint64_t v4 = (const char *)NumElements;
  unint64_t v36 = (void **)"expected number of cases to match the number of case values, got ";
  __int16 v37 = 259;
  mlir::OpState::emitOpError((uint64_t *)&v38, &v36, (uint64_t)v42);
  if (v42[0])
  {
    int v39 = 5;
    uint64_t v40 = (const char *)v1;
    uint64_t v5 = &v39;
    uint64_t v6 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v28 = v44 + 1;
      if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
      {
        int64_t v33 = (char *)&v39 - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        uint64_t v6 = (char *)v43;
        uint64_t v5 = (int *)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        uint64_t v5 = &v39;
        uint64_t v6 = (char *)v43;
      }
    }
    uint64_t v7 = &v6[24 * v44];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v44;
    if (v42[0])
    {
      int v39 = 3;
      uint64_t v40 = " but expected ";
      uint64_t v41 = 14;
      uint64_t v10 = &v39;
      char v11 = (char *)v43;
      if (v9 >= v45)
      {
        unint64_t v29 = v9 + 1;
        BOOL v30 = (char *)v43 + 24 * v9 > (char *)&v39;
        if (v43 <= &v39 && v30)
        {
          int64_t v34 = (char *)&v39 - (unsigned char *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          char v11 = (char *)v43;
          uint64_t v10 = (int *)((char *)v43 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          uint64_t v10 = &v39;
          char v11 = (char *)v43;
        }
      }
      char v12 = &v11[24 * v44];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)char v12 = v13;
      uint64_t v14 = ++v44;
      if (v42[0])
      {
        int v39 = 5;
        uint64_t v40 = v4;
        uint64_t v15 = &v39;
        uint64_t v16 = (char *)v43;
        if (v14 >= v45)
        {
          unint64_t v31 = v14 + 1;
          BOOL v32 = (char *)v43 + 24 * v14 > (char *)&v39;
          if (v43 <= &v39 && v32)
          {
            int64_t v35 = (char *)&v39 - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
            uint64_t v16 = (char *)v43;
            uint64_t v15 = (int *)((char *)v43 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
            uint64_t v15 = &v39;
            uint64_t v16 = (char *)v43;
          }
        }
        unint64_t v17 = &v16[24 * v44];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)unint64_t v17 = v18;
        ++v44;
      }
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  }
  if (v51)
  {
    __int16 v19 = __p;
    if (__p)
    {
      unint64_t v20 = v50;
      uint64_t v21 = __p;
      if (v50 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      unint64_t v50 = v19;
      operator delete(v21);
    }
    __int16 v22 = v47;
    if (v47)
    {
      uint64_t v23 = v48;
      uint64_t v24 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v47;
      }
      unsigned int v48 = v22;
      operator delete(v24);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v3;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::ApplyConstraintOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, mlir::MLIRContext *a7, uint64_t a8, uint64_t a9)
{
  mlir::OperationState::addOperands(a2, a5, a6);
  __int16 v21 = 261;
  v20[0] = a3;
  v20[1] = a4;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v20);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(a2)
            + 8) = StringAttr;
  uint64_t BoolAttr = mlir::Builder::getBoolAttr(a1, a7);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(a2) = BoolAttr;
  uint64_t v17 = *(unsigned int *)(a2 + 208);
  if (v17 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v17) = a8;
  unsigned int v18 = *(_DWORD *)(a2 + 212);
  uint64_t v19 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v19;
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v19) = a9;
  ++*(_DWORD *)(a2 + 208);
}

uint64_t mlir::pdl_interp::ApplyConstraintOp::verifyInvariantsImpl(mlir::pdl_interp::ApplyConstraintOp *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    uint64_t v5 = *(void **)v3;
    v22[0] = v2;
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v4, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    v22[0] = *(void *)this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (void **)"isNegated", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    uint64_t v6 = *(void *)this;
    }
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *(unsigned int *)(v6 + 68);
      if (v7)
      {
        uint64_t v8 = 0;
        for (uint64_t i = *(void *)(v6 + 72) + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v8);
              i += 32)
        {
          if (v7 == ++v8) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  else
  {
    unint64_t v20 = (void **)"requires attribute 'name'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      char v11 = __p;
      if (__p)
      {
        char v12 = v28;
        long long v13 = __p;
        if (v28 != __p)
        {
          do
            char v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          long long v13 = __p;
        }
        unint64_t v28 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v25;
      if (v25)
      {
        uint64_t v15 = v26;
        uint64_t v16 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v18 = *--v15;
            uint64_t v17 = v18;
            *uint64_t v15 = 0;
            if (v18) {
              MEMORY[0x21667D390](v17, 0x1000C8077774924);
            }
          }
          while (v15 != v14);
          uint64_t v16 = v25;
        }
        uint64_t v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

BOOL mlir::pdl_interp::ApplyConstraintOp::parse(uint64_t a1, uint64_t a2)
{
  v23[16] = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  v22[0] = v23;
  v22[1] = (void *)0x400000000;
  v20[0] = &v21;
  v20[1] = (void *)0x100000000;
  uint64_t v17 = v19;
  uint64_t v18 = 0x200000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v15, v6))
  {
    if (v15)
    {
      uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(a2);
      *(void *)(v7 + 8) = v15;
    }
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v22, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
        {
          if (mlir::AsmParser::parseTypeList(a1, (uint64_t)v20))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
            {
              uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
              {
                uint64_t v9 = *(void *)(a2 + 8);
                v13[0] = a1;
                v13[1] = (uint64_t)&v14;
                _OWORD v13[2] = a2;
                if (mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(v9, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v13))
                {
                  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
                  {
                    v13[0] = 0;
                    unsigned __int16 v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v13);
                    if (v10 < 0x100u)
                    {
LABEL_13:
                      mlir::BlockRange::BlockRange(v16, (uint64_t)v17, v18);
                      mlir::OperationState::addSuccessors((unsigned int *)a2, v16[0], v16[1]);
                      BOOL v11 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v22, (uint64_t)v20, v8, a2 + 16) != 0;
                      goto LABEL_18;
                    }
                    while ((_BYTE)v10)
                    {
                      llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v17, v13);
                      if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1)) {
                        goto LABEL_13;
                      }
                      LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v13);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v11 = 0;
LABEL_18:
  if (v17 != v19) {
    free(v17);
  }
  if (v20[0] != &v21) {
    free(v20[0]);
  }
  if (v22[0] != v23) {
    free(v22[0]);
  }
  return v11;
}

uint64_t llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a1, a2);
  }
  *(void *)(*(void *)a1 + 8 * v2) = *a2;
  unsigned int v3 = v2 + 1;
  *(_DWORD *)(a1 + 8) = v3;
  return *(void *)a1 + 8 * v3 - 8;
}

void mlir::pdl_interp::ApplyConstraintOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  unint64_t v6 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v6 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v6 + 8));
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if (*((unsigned char **)v7 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, "(", 1uLL);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned char *v8 = 40;
    ++*((void *)v7 + 4);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_8:
      uint64_t v10 = *((unsigned int *)v9 + 17);
      uint64_t v11 = *((void *)v9 + 9);
      goto LABEL_9;
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_9:
  char v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v42 = ", ";
  uint64_t v43 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v11, 0, v11, v10, (uint64_t)a2, v12, (uint64_t)&v42);
  long long v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    unsigned char *v16 = 58;
    ++*((void *)v15 + 4);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  uint64_t v19 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v20 = *((unsigned int *)v19 + 17);
    uint64_t v21 = *((void *)v19 + 9);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  v39[0] = v21;
  v39[1] = v20;
  mlir::OperandRange::getTypes(v39, (uint64_t *)&v42);
  uint64_t Context = (mlir::BoolAttr *)", ";
  uint64_t v41 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v42, v43, (uint64_t)v44, v45, (uint64_t)a2, (uint64_t)a2, (uint64_t)&Context);
  __int16 v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ")", 1uLL);
  }
  else
  {
    *uint64_t v23 = 41;
    ++*((void *)v22 + 4);
  }
  int v42 = &v44;
  unsigned int v44 = "name";
  uint64_t v45 = 4;
  uint64_t v43 = 0x200000001;
  uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((Operation *)((char *)*this + 24));
  uint64_t v24 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v24 && v24 == mlir::Builder::getBoolAttr(&Context, 0))
  {
    unsigned int v27 = v43;
    if (v43 >= HIDWORD(v43))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, &v44, v43 + 1, 16);
      unsigned int v27 = v43;
    }
    unint64_t v28 = (char *)v42 + 16 * v27;
    *unint64_t v28 = "isNegated";
    v28[1] = 9;
    LODWORD(v43) = v43 + 1;
    uint64_t v25 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v25 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_28:
      p_uint64_t Context = (mlir::Operation *)((char *)v25 + 56);
      goto LABEL_33;
    }
  }
  uint64_t Context = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v25);
  p_uint64_t Context = (mlir::ArrayAttr *)&Context;
LABEL_33:
  uint64_t Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v30, v42, v43);
  unint64_t v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v32 = (unsigned char *)*((void *)v31 + 4);
  if ((unint64_t)v32 >= *((void *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((void *)v31 + 4) = v32 + 1;
    *BOOL v32 = 32;
  }
  int64_t v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v34 = (_WORD *)*((void *)v33 + 4);
  if (*((void *)v33 + 3) - (void)v34 > 1uLL)
  {
    *int64_t v34 = 15917;
    *((void *)v33 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v33, "->", 2uLL);
  }
  int64_t v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v36 = (unsigned char *)*((void *)v35 + 4);
  if ((unint64_t)v36 >= *((void *)v35 + 3))
  {
    llvm::raw_ostream::write(v35, 32);
  }
  else
  {
    *((void *)v35 + 4) = v36 + 1;
    *unint64_t v36 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&Context, *this);
  __int16 v37 = Context;
  uint64_t v38 = v41;
  uint64_t Context = (mlir::BoolAttr *)", ";
  uint64_t v41 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v37, 0, (uint64_t)v37, v38, (uint64_t)a2, (uint64_t)a2, (uint64_t)&Context);
  if (v42 != &v44) {
    free(v42);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl_interp::ApplyRewriteOp::getName(mlir::pdl_interp::ApplyRewriteOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v2);
}

void mlir::pdl_interp::ApplyRewriteOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  mlir::OperationState::addOperands(a2, a6, a7);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(a2) = a5;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (a4 + v11 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v11, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a2 + 64) + 8 * v11;
    do
    {
      *(void *)(v13 + 8 * v12) = mlir::TypeRange::dereference_iterator(a3, v12);
      ++v12;
    }
    while (a4 != v12);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + a4;
}

uint64_t mlir::pdl_interp::ApplyRewriteOp::verifyInvariantsImpl(mlir::pdl_interp::ApplyRewriteOp *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))return 0; {
    uint64_t v4 = *(void *)this;
    }
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 68);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(v4 + 72) + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            uint64_t v4 = *(void *)this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    uint64_t v9 = v4 - 16;
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v8)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
        if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, v11))break; {
        if (v8 == ++v11)
        }
          return 1;
      }
      return 0;
    }
    return 1;
  }
  else
  {
    uint64_t v23 = (void **)"requires attribute 'name'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        unint64_t v31 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v28;
      if (v28)
      {
        uint64_t v18 = v29;
        uint64_t v19 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v21 = *--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              MEMORY[0x21667D390](v20, 0x1000C8077774924);
            }
          }
          while (v18 != v17);
          uint64_t v19 = v28;
        }
        char v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

BOOL mlir::pdl_interp::ApplyRewriteOp::parse(uint64_t a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x263EF8340];
  v26[0] = v27;
  v26[1] = (void *)0x400000000;
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  uint64_t v20 = 0;
  __src = &v23;
  uint64_t v22 = 0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v20, v6)) {
    goto LABEL_22;
  }
  if (v20)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v20;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v26, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v24)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1)
    && !mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)
    || (uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    || (uint64_t v9 = *(void *)(a2 + 8),
        v18[0] = a1,
        v18[1] = &v19,
        void v18[2] = a2,
        (uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96))) != 0)
    && !mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))
  {
LABEL_22:
    BOOL v15 = 0;
    uint64_t v16 = __src;
    if (__src == &v23) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v11 = __src;
  uint64_t v12 = v22;
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  unint64_t v14 = v13 + v22;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if (v12)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  BOOL v15 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v26, (uint64_t)v24, v8, a2 + 16) != 0;
  uint64_t v16 = __src;
  if (__src != &v23) {
LABEL_23:
  }
    free(v16);
LABEL_24:
  if (v24[0] != &v25) {
    free(v24[0]);
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
  return v15;
}

void mlir::pdl_interp::AreEqualOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  uint64_t v9 = *(unsigned int *)(a2 + 208);
  if (v9 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v9) = a5;
  unsigned int v10 = *(_DWORD *)(a2 + 212);
  uint64_t v11 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v11;
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v11) = a6;
  ++*(_DWORD *)(a2 + 208);
}

uint64_t mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (mlir::pdl::PDLType::classof(a2)) {
    return 1;
  }
  __int16 v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    char v51 = " #";
    uint64_t v52 = 2;
    uint64_t v11 = &v50;
    uint64_t v12 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v44 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v12 = (char *)v54;
        uint64_t v11 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v11 = &v50;
        uint64_t v12 = (char *)v54;
      }
    }
    uint64_t v13 = &v12[24 * v55];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      char v51 = (const char *)a5;
      uint64_t v16 = &v50;
      uint64_t v17 = (char *)v54;
      if (v15 >= v56)
      {
        unint64_t v39 = v15 + 1;
        BOOL v40 = (char *)v54 + 24 * v15 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          int64_t v45 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v17 = (char *)v54;
          uint64_t v16 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v16 = &v50;
          uint64_t v17 = (char *)v54;
        }
      }
      uint64_t v18 = &v17[24 * v55];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        char v51 = " must be pdl type, but got ";
        uint64_t v52 = 27;
        uint64_t v21 = &v50;
        uint64_t v22 = (char *)v54;
        if (v20 >= v56)
        {
          unint64_t v41 = v20 + 1;
          BOOL v42 = (char *)v54 + 24 * v20 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            int64_t v46 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            uint64_t v22 = (char *)v54;
            uint64_t v21 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            uint64_t v21 = &v50;
            uint64_t v22 = (char *)v54;
          }
        }
        uint64_t v23 = &v22[24 * v55];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v55;
        if (v53[0])
        {
          uint64_t v25 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          uint64_t v26 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v47 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              uint64_t v26 = (char *)v54;
              uint64_t v25 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              uint64_t v25 = &v50;
              uint64_t v26 = (char *)v54;
            }
          }
          uint64_t v27 = &v26[24 * v55];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v55;
        }
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    char v29 = __p;
    if (__p)
    {
      uint64_t v30 = v61;
      unint64_t v31 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        unint64_t v31 = __p;
      }
      int v61 = v29;
      operator delete(v31);
    }
    char v32 = v58;
    if (v58)
    {
      uint64_t v33 = v59;
      int64_t v34 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
        int64_t v34 = v58;
      }
      char v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v10;
}

BOOL mlir::pdl_interp::AreEqualOp::parse(uint64_t a1, unsigned int *a2)
{
  v17[16] = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  v16[0] = v17;
  v16[1] = (void *)0x400000000;
  uint64_t v12 = v14;
  uint64_t v13 = 0x200000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v16, 0, 1, 0xFFFFFFFFLL))goto LABEL_16; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_16;
  v10[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v10)) {
    goto LABEL_16;
  }
  uint64_t v15 = v10[0];
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, unsigned int *))(*(void *)a1 + 456))(a1, a2 + 28)
    || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    goto LABEL_16;
  }
  v10[0] = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v10);
  if (v5 < 0x100u) {
    goto LABEL_7;
  }
  if (!(_BYTE)v5)
  {
LABEL_16:
    BOOL v6 = 0;
    uint64_t v7 = v12;
    if (v12 == v14) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v12, v10);
  while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v10)) {
      goto LABEL_16;
    }
    int v8 = v13;
    if (v13 >= HIDWORD(v13))
    {
      llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v12, v10);
    }
    else
    {
      *((void *)v12 + v13) = v10[0];
      LODWORD(v13) = v8 + 1;
    }
  }
LABEL_7:
  mlir::BlockRange::BlockRange(v11, (uint64_t)v12, v13);
  mlir::OperationState::addSuccessors(a2, v11[0], v11[1]);
  v10[0] = (uint64_t)&v15;
  v10[1] = 1;
  void v10[2] = (uint64_t)&v15;
  v10[3] = 1;
  BOOL v6 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::detail::concat_range<mlir::Type const,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>>>(a1, (uint64_t *)v16, v10, v4, (uint64_t)(a2 + 4)) != 0;
  uint64_t v7 = v12;
  if (v12 != v14) {
LABEL_17:
  }
    free(v7);
LABEL_18:
  if (v16[0] != v17) {
    free(v16[0]);
  }
  return v6;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::detail::concat_range<mlir::Type const,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const char *)*((unsigned int *)a2 + 2);
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v10 = *a3 + 8 * v9;
  uint64_t v11 = a3[2];
  uint64_t v12 = a3[3];
  uint64_t v13 = v11 + 8 * v12;
  v65[0] = *a3;
  v60[0] = v11;
  long long v14 = 0;
  if (v9 | v12)
  {
    uint64_t v15 = v11;
    uint64_t v16 = v8;
    while (1)
    {
      if (v16 == v10)
      {
        uint64_t v18 = v13;
        uint64_t v16 = v10;
        if (v15 == v13) {
          goto LABEL_8;
        }
        uint64_t v17 = v60;
        uint64_t v16 = v15;
      }
      else
      {
        uint64_t v17 = v65;
      }
      void *v17 = v16 + 8;
      uint64_t v16 = v65[0];
      uint64_t v18 = v60[0];
LABEL_8:
      ++v14;
      uint64_t v15 = v18;
      if (v16 == v10)
      {
        uint64_t v15 = v18;
        if (v18 == v13) {
          break;
        }
      }
    }
  }
  if (v14 == v7)
  {
    uint64_t v19 = *a2;
    v65[0] = v8;
    v60[0] = v11;
    if (v7)
    {
      uint64_t v20 = 32 * (void)v7;
      while (1)
      {
        uint64_t v21 = v65[0];
        uint64_t v22 = v60[0];
        if (v60[0] == v13) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = (void *)v60[0];
        }
        if (v65[0] != v10 && v65[0] != 0) {
          uint64_t v23 = (void *)v65[0];
        }
        if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v19, *v23, a5))break; {
        if (v21 != v10 || v22 != v13)
        }
        {
          if (v21 == v10) {
            uint64_t v26 = v60;
          }
          else {
            uint64_t v26 = v65;
          }
          if (v21 == v10) {
            uint64_t v27 = v22;
          }
          else {
            uint64_t v27 = v21;
          }
          *uint64_t v26 = v27 + 8;
        }
        v19 += 32;
        v20 -= 32;
        if (!v20) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v61 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v65, a1, a4, v60);
    if (v65[0])
    {
      int v62 = 5;
      uint64_t v63 = v7;
      long long v28 = &v62;
      char v29 = (char *)v66;
      if (v67 >= v68)
      {
        unint64_t v52 = v67 + 1;
        if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
        {
          int64_t v57 = (char *)&v62 - (unsigned char *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
          char v29 = (char *)v66;
          long long v28 = (int *)((char *)v66 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
          long long v28 = &v62;
          char v29 = (char *)v66;
        }
      }
      uint64_t v30 = &v29[24 * v67];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      uint64_t v32 = ++v67;
      if (v65[0])
      {
        int v62 = 3;
        uint64_t v63 = " operands present, but expected ";
        uint64_t v64 = 32;
        uint64_t v33 = &v62;
        int64_t v34 = (char *)v66;
        if (v32 >= v68)
        {
          unint64_t v53 = v32 + 1;
          BOOL v54 = (char *)v66 + 24 * v32 > (char *)&v62;
          if (v66 <= &v62 && v54)
          {
            int64_t v58 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            int64_t v34 = (char *)v66;
            uint64_t v33 = (int *)((char *)v66 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            uint64_t v33 = &v62;
            int64_t v34 = (char *)v66;
          }
        }
        uint64_t v35 = &v34[24 * v67];
        long long v36 = *(_OWORD *)v33;
        *((void *)v35 + 2) = *((void *)v33 + 2);
        *(_OWORD *)uint64_t v35 = v36;
        uint64_t v37 = ++v67;
        if (v65[0])
        {
          int v62 = 5;
          uint64_t v63 = v14;
          unint64_t v38 = &v62;
          unint64_t v39 = (char *)v66;
          if (v37 >= v68)
          {
            unint64_t v55 = v37 + 1;
            BOOL v56 = (char *)v66 + 24 * v37 > (char *)&v62;
            if (v66 <= &v62 && v56)
            {
              int64_t v59 = (char *)&v62 - (unsigned char *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              unint64_t v39 = (char *)v66;
              unint64_t v38 = (int *)((char *)v66 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              unint64_t v38 = &v62;
              unint64_t v39 = (char *)v66;
            }
          }
          BOOL v40 = &v39[24 * v67];
          long long v41 = *(_OWORD *)v38;
          *((void *)v40 + 2) = *((void *)v38 + 2);
          *(_OWORD *)BOOL v40 = v41;
          ++v67;
        }
      }
    }
    uint64_t v42 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
    if (v65[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
    }
    if (v74)
    {
      unint64_t v43 = __p;
      if (__p)
      {
        int64_t v44 = v73;
        int64_t v45 = __p;
        if (v73 != __p)
        {
          do
            int64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          int64_t v45 = __p;
        }
        unint64_t v73 = v43;
        operator delete(v45);
      }
      int64_t v46 = v70;
      if (v70)
      {
        int64_t v47 = v71;
        unsigned int v48 = v70;
        if (v71 != v70)
        {
          do
          {
            uint64_t v50 = *--v47;
            uint64_t v49 = v50;
            *int64_t v47 = 0;
            if (v50) {
              MEMORY[0x21667D390](v49, 0x1000C8077774924);
            }
          }
          while (v47 != v46);
          unsigned int v48 = v70;
        }
        unint64_t v71 = v46;
        operator delete(v48);
      }
      if (v66 != v69) {
        free(v66);
      }
    }
  }
  return v42;
}

void mlir::pdl_interp::AreEqualOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  BOOL v6 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v7 = *((void *)v6 + 9);
    uint64_t v8 = *((unsigned int *)v6 + 17);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = ", ";
  uint64_t v31 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v7, 0, v7, v8, (uint64_t)a2, v9, (uint64_t)&v30);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    unsigned char *v13 = 58;
    ++*((void *)v12 + 4);
  }
  long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v32;
  uint64_t v31 = 0x200000000;
  uint64_t v16 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v16);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v19, v30, v31);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (_WORD *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v23 > 1uLL)
  {
    *uint64_t v23 = 15917;
    *((void *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "->", 2uLL);
  }
  long long v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *uint64_t v25 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v26 = (uint64_t)AttrDictionary;
  uint64_t v27 = v29;
  unint64_t AttrDictionary = ", ";
  uint64_t v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v26, 0, v26, v27, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::pdl_interp::BranchOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, &v7)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = v7;
  uint64_t v5 = *(unsigned int *)(a2 + 208);
  if (v5 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v5) = v4;
  ++*(_DWORD *)(a2 + 208);
  return 1;
}

void mlir::pdl_interp::BranchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
  uint64_t v11 = v13;
  uint64_t v12 = 0x200000000;
  BOOL v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

uint64_t mlir::pdl_interp::CheckAttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v36 = v6;
  if (!v6)
  {
    a3(v40, a4);
    if (v40[0])
    {
      int v37 = 3;
      unint64_t v38 = "expected DictionaryAttr to set properties";
      uint64_t v39 = 41;
      uint64_t v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v42 >= v43)
      {
        unint64_t v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          int64_t v34 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v11 = (char *)v41;
          uint64_t v10 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
      }
    }
    if (!v49) {
      return 0;
    }
    long long v14 = __p;
    if (__p)
    {
      uint64_t v15 = v48;
      uint64_t v16 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      unsigned int v48 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_41;
    }
    uint64_t v18 = v46;
    uint64_t v19 = v45;
    if (v46 == v45) {
      goto LABEL_40;
    }
    do
    {
      uint64_t v21 = *--v18;
      uint64_t v20 = v21;
      void *v18 = 0;
      if (v21) {
        MEMORY[0x21667D390](v20, 0x1000C8077774924);
      }
    }
    while (v18 != v17);
    goto LABEL_39;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v36, "constantValue", 0xDuLL);
  if (v8)
  {
    *a1 = v8;
    return 1;
  }
  a3(v40, a4);
  if (v40[0])
  {
    int v37 = 3;
    unint64_t v38 = "expected key entry for constantValue in DictionaryAttr to set Properties.";
    uint64_t v39 = 73;
    uint64_t v22 = &v37;
    uint64_t v23 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v33 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v35 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
        uint64_t v23 = (char *)v41;
        uint64_t v22 = (int *)((char *)v41 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
        uint64_t v22 = &v37;
        uint64_t v23 = (char *)v41;
      }
    }
    long long v24 = &v23[24 * v42];
    long long v25 = *(_OWORD *)v22;
    *((void *)v24 + 2) = *((void *)v22 + 2);
    *(_OWORD *)long long v24 = v25;
    ++v42;
    if (v40[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
    }
  }
  if (v49)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v48;
      long long v28 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        long long v28 = __p;
      }
      unsigned int v48 = v26;
      operator delete(v28);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_41;
    }
    uint64_t v29 = v46;
    uint64_t v19 = v45;
    if (v46 == v45)
    {
LABEL_40:
      int64_t v46 = v17;
      operator delete(v19);
LABEL_41:
      if (v41 != v44) {
        free(v41);
      }
      return 0;
    }
    do
    {
      uint64_t v31 = *--v29;
      uint64_t v30 = v31;
      void *v29 = 0;
      if (v31) {
        MEMORY[0x21667D390](v30, 0x1000C8077774924);
      }
    }
    while (v29 != v17);
LABEL_39:
    uint64_t v19 = v45;
    goto LABEL_40;
  }
  return 0;
}

uint64_t mlir::pdl_interp::CheckAttributeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantValue", 13, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CheckAttributeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(a2) = a4;
  uint64_t v10 = *(unsigned int *)(a2 + 208);
  if (v10 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v10) = a5;
  unsigned int v11 = *(_DWORD *)(a2 + 212);
  uint64_t v12 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v12;
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v12) = a6;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckAttributeOp::verifyInvariantsImpl(mlir::pdl_interp::CheckAttributeOp *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64)) {
    return mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  unsigned int v11 = (void **)"requires attribute 'constantValue'";
  __int16 v12 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v11, (uint64_t)v13);
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
  if (v13[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  }
  if (v20)
  {
    uint64_t v3 = __p;
    if (__p)
    {
      uint64_t v4 = v19;
      unsigned int v5 = __p;
      if (v19 != __p)
      {
        do
          uint64_t v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        unsigned int v5 = __p;
      }
      uint64_t v19 = v3;
      operator delete(v5);
    }
    uint64_t v6 = v16;
    if (v16)
    {
      uint64_t v7 = v17;
      BOOL v8 = v16;
      if (v17 != v16)
      {
        do
        {
          uint64_t v10 = *--v7;
          uint64_t v9 = v10;
          void *v7 = 0;
          if (v10) {
            MEMORY[0x21667D390](v9, 0x1000C8077774924);
          }
        }
        while (v7 != v6);
        BOOL v8 = v16;
      }
      uint64_t v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15) {
      free(v14);
    }
  }
  return v1;
}

uint64_t mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    unsigned int v48 = " #";
    uint64_t v49 = 2;
    uint64_t v7 = &v47;
    BOOL v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        BOOL v8 = (char *)v51;
        uint64_t v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v7 = &v47;
        BOOL v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      unsigned int v48 = (const char *)a5;
      __int16 v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          __int16 v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          __int16 v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      uint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 53;
        uint64_t v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            uint64_t v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          uint64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              uint64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v58;
      long long v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        long long v28 = __p;
      }
      int64_t v58 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      BOOL v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

BOOL mlir::pdl_interp::CheckAttributeOp::parse(uint64_t a1, uint64_t a2)
{
  void v19[4] = *MEMORY[0x263EF8340];
  memset(v19, 0, 24);
  uint64_t v12 = 0;
  uint64_t v16 = v18;
  uint64_t v17 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v19, 1))
  {
    __int16 v14 = 257;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "is", 2, v13))
    {
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 408))(a1, &v12, 0))
      {
        if (v12)
        {
          uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(a2);
          *uint64_t v4 = v12;
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
        {
          mlir::NamedAttrList::get(a2 + 112, **(void **)(*(void *)(a2 + 8) + 96));
          if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
          {
            v13[0] = 0;
            unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v13);
            if (v5 < 0x100u) {
              goto LABEL_9;
            }
            if ((_BYTE)v5)
            {
              llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v16, v13);
              while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
              {
                if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v13)) {
                  goto LABEL_18;
                }
                int v10 = v17;
                if (v17 >= HIDWORD(v17))
                {
                  llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v16, v13);
                }
                else
                {
                  *((void *)v16 + v17) = v13[0];
                  LODWORD(v17) = v10 + 1;
                }
              }
LABEL_9:
              mlir::BlockRange::BlockRange(v15, (uint64_t)v16, v17);
              mlir::OperationState::addSuccessors((unsigned int *)a2, v15[0], v15[1]);
              uint64_t v6 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
              uint64_t v7 = mlir::Builder::getType<mlir::pdl::AttributeType>(v6);
              BOOL v8 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v19, v7, a2 + 16) != 0;
              uint64_t v9 = v16;
              if (v16 == v18) {
                return v8;
              }
              goto LABEL_19;
            }
          }
        }
      }
    }
  }
LABEL_18:
  BOOL v8 = 0;
  uint64_t v9 = v16;
  if (v16 != v18) {
LABEL_19:
  }
    free(v9);
  return v8;
}

uint64_t mlir::Builder::getType<mlir::pdl::AttributeType>(mlir::MLIRContext **a1)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);

  return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
}

void mlir::pdl_interp::CheckAttributeOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  BOOL v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 29545;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "is", 2uLL);
  }
  int v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v26 = v28;
  v28[0] = "constantValue";
  v28[1] = 13;
  uint64_t v27 = 0x200000001;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v26, v27);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 15917;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "->", 2uLL);
  }
  long long v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v22 = (uint64_t)AttrDictionary;
  uint64_t v23 = v25;
  unint64_t AttrDictionary = ", ";
  uint64_t v25 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v22, 0, v22, v23, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t mlir::pdl_interp::CheckOperandCountOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      unint64_t v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      uint64_t v26 = &v76;
      uint64_t v27 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v69 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v27 = (char *)v80;
          uint64_t v26 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v26 = &v76;
          uint64_t v27 = (char *)v80;
        }
      }
      long long v28 = &v27[24 * v81];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v87;
      uint64_t v32 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v87 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    uint64_t v33 = v85;
    uint64_t v23 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_78;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v75, "compareAtLeast", 0xEuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v79, a4);
      if (v79[0])
      {
        int v76 = 3;
        uint64_t v78 = 59;
        int v10 = &v76;
        uint64_t v11 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v64 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v70 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            uint64_t v11 = (char *)v80;
            int v10 = (int *)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            int v10 = &v76;
            uint64_t v11 = (char *)v80;
          }
        }
        uint64_t v12 = &v11[24 * v81];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v81;
        if (v79[0])
        {
          __int16 v14 = &v76;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
          uint64_t v15 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v65 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              int64_t v71 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              uint64_t v15 = (char *)v80;
              __int16 v14 = (int *)((char *)v80 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              __int16 v14 = &v76;
              uint64_t v15 = (char *)v80;
            }
          }
          uint64_t v16 = &v15[24 * v81];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v81;
          if (v79[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
          }
        }
      }
      if (!v88) {
        return 0;
      }
      uint64_t v18 = __p;
      if (__p)
      {
        uint64_t v19 = v87;
        long long v20 = __p;
        if (v87 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          long long v20 = __p;
        }
        uint64_t v87 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v84;
      if (!v84) {
        goto LABEL_80;
      }
      uint64_t v22 = v85;
      uint64_t v23 = v84;
      if (v85 == v84) {
        goto LABEL_79;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_78;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v75, "count", 5uLL);
  if (!v36)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      unint64_t v77 = "expected key entry for count in DictionaryAttr to set Properties.";
      uint64_t v78 = 65;
      unsigned int v52 = &v76;
      unsigned int v53 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v67 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v73 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
          unsigned int v53 = (char *)v80;
          unsigned int v52 = (int *)((char *)v80 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
          unsigned int v52 = &v76;
          unsigned int v53 = (char *)v80;
        }
      }
      BOOL v54 = &v53[24 * v81];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)BOOL v54 = v55;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    BOOL v56 = __p;
    if (__p)
    {
      int64_t v57 = v87;
      int64_t v58 = __p;
      if (v87 != __p)
      {
        do
          int64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        int64_t v58 = __p;
      }
      uint64_t v87 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    char v59 = v85;
    uint64_t v23 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *char v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v21);
    goto LABEL_78;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[1] = v36;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    int v76 = 3;
    uint64_t v78 = 50;
    unint64_t v38 = &v76;
    BOOL v39 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v66 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        int64_t v72 = (char *)&v76 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
        BOOL v39 = (char *)v80;
        unint64_t v38 = (int *)((char *)v80 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
        unint64_t v38 = &v76;
        BOOL v39 = (char *)v80;
      }
    }
    unint64_t v40 = &v39[24 * v81];
    long long v41 = *(_OWORD *)v38;
    *((void *)v40 + 2) = *((void *)v38 + 2);
    *(_OWORD *)unint64_t v40 = v41;
    ++v81;
    if (v79[0])
    {
      int64_t v42 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v37);
      int64_t v43 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v74 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          int64_t v43 = (char *)v80;
          int64_t v42 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          int64_t v42 = &v76;
          int64_t v43 = (char *)v80;
        }
      }
      int64_t v44 = &v43[24 * v81];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = *((void *)v42 + 2);
      *(_OWORD *)int64_t v44 = v45;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
  }
  if (v88)
  {
    __int16 v46 = __p;
    if (__p)
    {
      int v47 = v87;
      unsigned int v48 = __p;
      if (v87 != __p)
      {
        do
          int v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unsigned int v48 = __p;
      }
      uint64_t v87 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    uint64_t v49 = v85;
    uint64_t v23 = v84;
    if (v85 == v84)
    {
LABEL_79:
      uint64_t v85 = v21;
      operator delete(v23);
LABEL_80:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      uint64_t v51 = *--v49;
      uint64_t v50 = v51;
      *uint64_t v49 = 0;
      if (v51) {
        MEMORY[0x21667D390](v50, 0x1000C8077774924);
      }
    }
    while (v49 != v21);
LABEL_78:
    uint64_t v23 = v84;
    goto LABEL_79;
  }
  return 0;
}

uint64_t mlir::pdl_interp::CheckOperandCountOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"compareAtLeast", 14, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    uint64_t *v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      int v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"count", 5, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  uint64_t *v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  int v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  int v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    goto LABEL_11;
  }
  uint64_t v36 = a1;
  uint64_t Value = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32)) {
    goto LABEL_11;
  }
  uint64_t v35 = a1;
  mlir::IntegerAttr::getValue((uint64_t)&v35, (llvm::APInt *)&v41);
  unsigned int v10 = v42[0] - 1;
  if (v42[0] >= 0x41) {
    uint64_t v11 = (uint64_t *)(v41 + 8 * (v10 >> 6));
  }
  else {
    uint64_t v11 = &v41;
  }
  uint64_t v12 = (1 << v10) & *v11;
  if (v42[0] >= 0x41 && v41) {
    MEMORY[0x21667D390]();
  }
  if (!v12) {
    return 1;
  }
LABEL_11:
  a4(&v41, a5);
  if (v41)
  {
    LODWORD(Value) = 3;
    unint64_t v38 = "attribute '";
    uint64_t v39 = 11;
    p_uint64_t Value = &Value;
    uint64_t v14 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v31 = v44 + 1;
      if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
      {
        int64_t v33 = (char *)&Value - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        uint64_t v14 = (char *)v43;
        p_uint64_t Value = (void ***)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        p_uint64_t Value = &Value;
        uint64_t v14 = (char *)v43;
      }
    }
    uint64_t v15 = &v14[24 * v44];
    long long v16 = *(_OWORD *)p_Value;
    *((void *)v15 + 2) = p_Value[2];
    *(_OWORD *)uint64_t v15 = v16;
    ++v44;
    if (v41)
    {
      __int16 v40 = 261;
      uint64_t Value = a2;
      unint64_t v38 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v42, &Value);
      if (v41)
      {
        LODWORD(Value) = 3;
        unint64_t v38 = "' failed to satisfy constraint: 32-bit signless integer attribute whose value is non-negative";
        uint64_t v39 = 93;
        long long v17 = &Value;
        uint64_t v18 = (char *)v43;
        if (v44 >= v45)
        {
          unint64_t v32 = v44 + 1;
          if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
          {
            int64_t v34 = (char *)&Value - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            uint64_t v18 = (char *)v43;
            long long v17 = (void ***)((char *)v43 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            long long v17 = &Value;
            uint64_t v18 = (char *)v43;
          }
        }
        uint64_t v19 = &v18[24 * v44];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = v17[2];
        *(_OWORD *)uint64_t v19 = v20;
        ++v44;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v51)
  {
    uint64_t v22 = __p;
    if (__p)
    {
      uint64_t v23 = v50;
      uint64_t v24 = __p;
      if (v50 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v50 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v47;
    if (v47)
    {
      uint64_t v26 = v48;
      uint64_t v27 = v47;
      if (v48 != v47)
      {
        do
        {
          uint64_t v29 = *--v26;
          uint64_t v28 = v29;
          *uint64_t v26 = 0;
          if (v29) {
            MEMORY[0x21667D390](v28, 0x1000C8077774924);
          }
        }
        while (v26 != v25);
        uint64_t v27 = v47;
      }
      unsigned int v48 = v25;
      operator delete(v27);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v21;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t *mlir::pdl_interp::CheckOperandCountOp::getCount(mlir::pdl_interp::CheckOperandCountOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(v1 + 8);
  mlir::IntegerAttr::getValue((uint64_t)&v6, (llvm::APInt *)&v4);
  if (v5 <= 0x40) {
    return v4;
  }
  uint64_t v3 = *v4;
  MEMORY[0x21667D390]();
  return (uint64_t *)v3;
}

void mlir::pdl_interp::CheckOperandCountOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, 0x20u);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(a2)
            + 8) = IntegerAttr;
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v15);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  uint64_t v17 = *(unsigned int *)(a2 + 208);
  if (v17 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v17) = a6;
  unsigned int v18 = *(_DWORD *)(a2 + 212);
  uint64_t v19 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v19;
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v19) = a7;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckOperandCountOp::verifyInvariantsImpl(mlir::pdl_interp::CheckOperandCountOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    v18[0] = v2;
    if (mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v4, (void **)"count", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& (v18[0] = *(void *)this, mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (void **)"compareAtLeast", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)))
    {
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    long long v16 = (void **)"requires attribute 'count'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        unsigned int v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            unsigned int v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unsigned int v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::pdl_interp::CheckOperandCountOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v27[4] = *MEMORY[0x263EF8340];
  memset(v27, 0, 24);
  uint64_t v20 = 0;
  uint64_t v24 = v26;
  uint64_t v25 = 0x200000000;
  __int16 v22 = 257;
  if ((*(unsigned __int8 (**)(void))(*(void *)a1 + 368))())
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1))
    {
      __int16 v22 = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "is", 2, v21))
      {
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "at_least", 8))
        {
          uint64_t v4 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
          uint64_t UnitAttr = mlir::Builder::getUnitAttr(v4, v5);
          *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
        }
        uint64_t v7 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        Integeruint64_t Type = mlir::Builder::getIntegerType(v7, 0x20u);
        if (mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v20, IntegerType))
        {
          if (v20)
          {
            uint64_t v9 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(a2);
            *(void *)(v9 + 8) = v20;
          }
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v10 = *(void *)(a2 + 8);
            v21[0] = a1;
            v21[1] = (uint64_t)&v19;
            v21[2] = a2;
            uint64_t v11 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v10 + 96));
            if (!v11
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v11, (void **)"compareAtLeast", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))
            {
              uint64_t v12 = mlir::NamedAttrList::get(a2 + 112, *(void *)(*(void *)(v10 + 96) + 8));
              if (!v12
                || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v12, (void **)"count", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))
              {
                if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
                {
                  v21[0] = 0;
                  unsigned __int16 v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v21);
                  if (v13 < 0x100u)
                  {
LABEL_16:
                    mlir::BlockRange::BlockRange(v23, (uint64_t)v24, v25);
                    mlir::OperationState::addSuccessors((unsigned int *)a2, v23[0], v23[1]);
                    uint64_t v14 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                    uint64_t v15 = mlir::Builder::getType<mlir::pdl::OperationType>(v14);
                    BOOL v16 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v27, v15, a2 + 16) != 0;
                    goto LABEL_25;
                  }
                  if ((_BYTE)v13)
                  {
                    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v24, v21);
                    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
                    {
                      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v21)) {
                        goto LABEL_24;
                      }
                      int v17 = v25;
                      if (v25 >= HIDWORD(v25))
                      {
                        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v24, v21);
                      }
                      else
                      {
                        *((void *)v24 + v25) = v21[0];
                        LODWORD(v25) = v17 + 1;
                      }
                    }
                    goto LABEL_16;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_24:
  BOOL v16 = 0;
LABEL_25:
  if (v24 != v26) {
    free(v24);
  }
  return v16;
}

uint64_t mlir::Builder::getType<mlir::pdl::OperationType>(mlir::MLIRContext **a1)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);

  return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
}

void mlir::pdl_interp::CheckOperandCountOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v37[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  unsigned int v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 29545;
    *((void *)v12 + 4) += 2;
    if (!*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8)) {
      goto LABEL_23;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, "is", 2uLL);
    if (!*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8)) {
      goto LABEL_23;
    }
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  BOOL v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v17 = (void *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 7uLL)
  {
    void *v17 = 0x747361656C5F7461;
    *((void *)v16 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v16, "at_least", 8uLL);
  }
LABEL_23:
  unsigned int v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    unsigned char *v19 = 32;
  }
  unint64_t v20 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v20 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v20 + 8));
  uint64_t v35 = v37;
  v37[0] = "compareAtLeast";
  v37[1] = 14;
  void v37[2] = "count";
  void v37[3] = 5;
  uint64_t v36 = 0x200000002;
  mlir::Attribute::getContext((Operation *)((char *)*this + 24));
  uint64_t v21 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v21);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v21 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v24, v35, v36);
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if ((unint64_t)v26 >= *((void *)v25 + 3))
  {
    llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((void *)v25 + 4) = v26 + 1;
    *uint64_t v26 = 32;
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 > 1uLL)
  {
    *uint64_t v28 = 15917;
    *((void *)v27 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v27, "->", 2uLL);
  }
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
  if ((unint64_t)v30 >= *((void *)v29 + 3))
  {
    llvm::raw_ostream::write(v29, 32);
  }
  else
  {
    *((void *)v29 + 4) = v30 + 1;
    unsigned char *v30 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v31 = (uint64_t)AttrDictionary;
  uint64_t v32 = v34;
  unint64_t AttrDictionary = ", ";
  uint64_t v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v31, 0, v31, v32, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v35 != v37) {
    free(v35);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CheckOperationNameOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  __int16 v18 = 261;
  v17[0] = a4;
  v17[1] = a5;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v17);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(a2) = StringAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  unsigned int v15 = *(_DWORD *)(a2 + 212);
  uint64_t v16 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v16;
  if (v16 >= v15)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v16) = a7;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckOperationNameOp::verifyInvariantsImpl(mlir::pdl_interp::CheckOperationNameOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'name'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        __int16 v22 = v5;
        operator delete(v7);
      }
      unsigned int v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        uint64_t v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v19;
        }
        unint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::CheckOperationNameOp::parse(uint64_t a1, uint64_t a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  memset(v24, 0, 24);
  uint64_t v17 = 0;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  __int16 v19 = 257;
  if ((*(unsigned __int8 (**)(void))(*(void *)a1 + 368))())
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1))
    {
      __int16 v19 = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "is", 2, v18))
      {
        uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v6 = mlir::NoneType::get(*v4, v5);
        if (mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v17, v6))
        {
          if (v17)
          {
            uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(a2);
            void *v7 = v17;
          }
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v8 = *(void *)(a2 + 8);
            v18[0] = a1;
            v18[1] = (uint64_t)&v16;
            void v18[2] = a2;
            uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
            if (!v9
              || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v9, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))
            {
              if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
              {
                v18[0] = 0;
                unsigned __int16 v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v18);
                if (v10 < 0x100u)
                {
LABEL_12:
                  mlir::BlockRange::BlockRange(v20, (uint64_t)v21, v22);
                  mlir::OperationState::addSuccessors((unsigned int *)a2, v20[0], v20[1]);
                  uint64_t v11 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                  uint64_t v12 = mlir::Builder::getType<mlir::pdl::OperationType>(v11);
                  BOOL v13 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v24, v12, a2 + 16) != 0;
                  goto LABEL_21;
                }
                if ((_BYTE)v10)
                {
                  llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v21, v18);
                  while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
                  {
                    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v18)) {
                      goto LABEL_20;
                    }
                    int v14 = v22;
                    if (v22 >= HIDWORD(v22))
                    {
                      llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v21, v18);
                    }
                    else
                    {
                      *((void *)v21 + v22) = v18[0];
                      LODWORD(v22) = v14 + 1;
                    }
                  }
                  goto LABEL_12;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_20:
  BOOL v13 = 0;
LABEL_21:
  if (v21 != v23) {
    free(v21);
  }
  return v13;
}

void mlir::pdl_interp::CheckOperationNameOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  unsigned __int16 v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 29545;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "is", 2uLL);
  }
  int v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *__int16 v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v30 = v32;
  v32[0] = "name";
  v32[1] = 4;
  uint64_t v31 = 0x200000001;
  uint64_t v16 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v16);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v19, v30, v31);
  unint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v23 = (_WORD *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v23 > 1uLL)
  {
    *char v23 = 15917;
    *((void *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "->", 2uLL);
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *uint64_t v25 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v26 = (uint64_t)AttrDictionary;
  uint64_t v27 = v29;
  unint64_t AttrDictionary = ", ";
  uint64_t v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v26, 0, v26, v27, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CheckResultCountOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, 0x20u);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(a2)
            + 8) = IntegerAttr;
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v15);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  uint64_t v17 = *(unsigned int *)(a2 + 208);
  if (v17 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v17) = a6;
  unsigned int v18 = *(_DWORD *)(a2 + 212);
  uint64_t v19 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v19;
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v19) = a7;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckResultCountOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v27[4] = *MEMORY[0x263EF8340];
  memset(v27, 0, 24);
  uint64_t v20 = 0;
  uint64_t v24 = v26;
  uint64_t v25 = 0x200000000;
  __int16 v22 = 257;
  if ((*(unsigned __int8 (**)(void))(*(void *)a1 + 368))())
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1))
    {
      __int16 v22 = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "is", 2, v21))
      {
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "at_least", 8))
        {
          uint64_t v4 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
          uint64_t UnitAttr = mlir::Builder::getUnitAttr(v4, v5);
          *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
        }
        uint64_t v7 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        Integeruint64_t Type = mlir::Builder::getIntegerType(v7, 0x20u);
        if (mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v20, IntegerType))
        {
          if (v20)
          {
            uint64_t v9 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(a2);
            *(void *)(v9 + 8) = v20;
          }
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v10 = *(void *)(a2 + 8);
            v21[0] = a1;
            v21[1] = (uint64_t)&v19;
            v21[2] = a2;
            uint64_t v11 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v10 + 96));
            if (!v11
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v11, (void **)"compareAtLeast", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))
            {
              uint64_t v12 = mlir::NamedAttrList::get(a2 + 112, *(void *)(*(void *)(v10 + 96) + 8));
              if (!v12
                || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v12, (void **)"count", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))
              {
                if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
                {
                  v21[0] = 0;
                  unsigned __int16 v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v21);
                  if (v13 < 0x100u)
                  {
LABEL_16:
                    mlir::BlockRange::BlockRange(v23, (uint64_t)v24, v25);
                    mlir::OperationState::addSuccessors((unsigned int *)a2, v23[0], v23[1]);
                    int v14 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                    uint64_t v15 = mlir::Builder::getType<mlir::pdl::OperationType>(v14);
                    BOOL v16 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v27, v15, a2 + 16) != 0;
                    goto LABEL_25;
                  }
                  if ((_BYTE)v13)
                  {
                    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v24, v21);
                    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
                    {
                      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v21)) {
                        goto LABEL_24;
                      }
                      int v17 = v25;
                      if (v25 >= HIDWORD(v25))
                      {
                        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v24, v21);
                      }
                      else
                      {
                        *((void *)v24 + v25) = v21[0];
                        LODWORD(v25) = v17 + 1;
                      }
                    }
                    goto LABEL_16;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_24:
  BOOL v16 = 0;
LABEL_25:
  if (v24 != v26) {
    free(v24);
  }
  return v16;
}

uint64_t mlir::pdl_interp::CheckTypeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int64_t v33 = v65;
    char v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *int64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "type", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for type in DictionaryAttr to set Properties.";
      uint64_t v58 = 64;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    __int16 v40 = __p;
    if (__p)
    {
      uint64_t v41 = v67;
      int64_t v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int64_t v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int64_t v43 = v65;
    char v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *int64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 49;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      int v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          int v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      BOOL v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)BOOL v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unsigned int v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    __int16 v22 = v65;
    char v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      unint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *__int16 v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    char v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl_interp::CheckTypeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"type", 4, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl_interp::CheckTypeOp::getType(mlir::pdl_interp::CheckTypeOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
}

void mlir::pdl_interp::CheckTypeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(a2) = a4;
  uint64_t v10 = *(unsigned int *)(a2 + 208);
  if (v10 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v10) = a5;
  unsigned int v11 = *(_DWORD *)(a2 + 212);
  uint64_t v12 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v12;
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v12) = a6;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckTypeOp::verifyInvariantsImpl(mlir::pdl_interp::CheckTypeOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (void **)"type", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'type'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned int v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        __int16 v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        uint64_t v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::CheckTypeOp::parse(uint64_t a1, uint64_t a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  memset(v24, 0, 24);
  uint64_t v17 = 0;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1))
  {
    __int16 v19 = 257;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "is", 2, v18))
    {
      uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v6 = mlir::NoneType::get(*v4, v5);
      if (mlir::AsmParser::parseAttribute<mlir::TypeAttr>(a1, &v17, v6))
      {
        if (v17)
        {
          uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(a2);
          void *v7 = v17;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
        {
          uint64_t v8 = *(void *)(a2 + 8);
          v18[0] = a1;
          v18[1] = (uint64_t)&v16;
          void v18[2] = a2;
          uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
          if (!v9
            || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v9, (void **)"type", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
            {
              v18[0] = 0;
              unsigned __int16 v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v18);
              if (v10 < 0x100u)
              {
LABEL_11:
                mlir::BlockRange::BlockRange(v20, (uint64_t)v21, v22);
                mlir::OperationState::addSuccessors((unsigned int *)a2, v20[0], v20[1]);
                uint64_t v11 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                uint64_t v12 = mlir::Builder::getType<mlir::pdl::TypeType>(v11);
                BOOL v13 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v24, v12, a2 + 16) != 0;
                goto LABEL_20;
              }
              if ((_BYTE)v10)
              {
                llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v21, v18);
                while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
                {
                  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v18)) {
                    goto LABEL_19;
                  }
                  int v14 = v22;
                  if (v22 >= HIDWORD(v22))
                  {
                    llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v21, v18);
                  }
                  else
                  {
                    *((void *)v21 + v22) = v18[0];
                    LODWORD(v22) = v14 + 1;
                  }
                }
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  BOOL v13 = 0;
LABEL_20:
  if (v21 != v23) {
    free(v21);
  }
  return v13;
}

uint64_t mlir::Builder::getType<mlir::pdl::TypeType>(mlir::MLIRContext **a1)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);

  return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
}

void mlir::pdl_interp::CheckTypeOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 29545;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "is", 2uLL);
  }
  unsigned __int16 v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v26 = v28;
  v28[0] = "type";
  v28[1] = 4;
  uint64_t v27 = 0x200000001;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v26, v27);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 15917;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "->", 2uLL);
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v22 = (uint64_t)AttrDictionary;
  uint64_t v23 = v25;
  unint64_t AttrDictionary = ", ";
  uint64_t v25 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v22, 0, v22, v23, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t mlir::pdl_interp::CheckTypesOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *int64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "types", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for types in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    __int16 v40 = __p;
    if (__p)
    {
      uint64_t v41 = v67;
      int64_t v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int64_t v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *int64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    unsigned __int16 v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        unsigned __int16 v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unsigned __int16 v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      int v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          int v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      __int16 v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      unint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl_interp::CheckTypesOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"types", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CheckTypesOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(a2) = a4;
  uint64_t v10 = *(unsigned int *)(a2 + 208);
  if (v10 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v10) = a5;
  unsigned int v11 = *(_DWORD *)(a2 + 212);
  uint64_t v12 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v12;
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v12) = a6;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::CheckTypesOp::verifyInvariantsImpl(mlir::pdl_interp::CheckTypesOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v3, (void **)"types", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'types'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned int v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        uint64_t v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::CheckTypesOp::parse(uint64_t a1, uint64_t a2)
{
  void v25[4] = *MEMORY[0x263EF8340];
  memset(v25, 0, 24);
  uint64_t v18 = 0;
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1))
  {
    __int16 v20 = 257;
    if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "are", 3, v19))
    {
      uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v6 = mlir::NoneType::get(*v4, v5);
      if (mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v6))
      {
        if (v18)
        {
          uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(a2);
          void *v7 = v18;
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
        {
          uint64_t v8 = *(void *)(a2 + 8);
          v19[0] = a1;
          v19[1] = (uint64_t)&v17;
          uint64_t v19[2] = a2;
          uint64_t v9 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
          if (!v9
            || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v9, (void **)"types", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
            {
              v19[0] = 0;
              unsigned __int16 v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v19);
              if (v10 < 0x100u)
              {
LABEL_11:
                mlir::BlockRange::BlockRange(v21, (uint64_t)v22, v23);
                mlir::OperationState::addSuccessors((unsigned int *)a2, v21[0], v21[1]);
                uint64_t v11 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                uint64_t v12 = mlir::Builder::getType<mlir::pdl::TypeType>(v11);
                uint64_t v13 = mlir::pdl::RangeType::get(v12);
                BOOL v14 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v25, v13, a2 + 16) != 0;
                goto LABEL_20;
              }
              if ((_BYTE)v10)
              {
                llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v22, v19);
                while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
                {
                  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v19)) {
                    goto LABEL_19;
                  }
                  int v15 = v23;
                  if (v23 >= HIDWORD(v23))
                  {
                    llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v22, v19);
                  }
                  else
                  {
                    *((void *)v22 + v23) = v19[0];
                    LODWORD(v23) = v15 + 1;
                  }
                }
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  BOOL v14 = 0;
LABEL_20:
  if (v22 != v24) {
    free(v22);
  }
  return v14;
}

void mlir::pdl_interp::CheckTypesOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 101;
    *(_WORD *)uint64_t v9 = 29281;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, "are", 3uLL);
  }
  unsigned __int16 v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v26 = v28;
  v28[0] = "types";
  v28[1] = 5;
  uint64_t v27 = 0x200000001;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v26, v27);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 15917;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "->", 2uLL);
  }
  __int16 v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v22 = (uint64_t)AttrDictionary;
  uint64_t v23 = v25;
  unint64_t AttrDictionary = ", ";
  uint64_t v25 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v22, 0, v22, v23, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v26 != v28) {
    free(v26);
  }
}

BOOL mlir::pdl_interp::ContinueOp::parse(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112) != 0;
}

uint64_t mlir::pdl_interp::CreateAttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v36 = v6;
  if (!v6)
  {
    a3(v40, a4);
    if (v40[0])
    {
      int v37 = 3;
      unint64_t v38 = "expected DictionaryAttr to set properties";
      uint64_t v39 = 41;
      unsigned __int16 v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v42 >= v43)
      {
        unint64_t v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          int64_t v34 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v11 = (char *)v41;
          unsigned __int16 v10 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          unsigned __int16 v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
      }
    }
    if (!v49) {
      return 0;
    }
    BOOL v14 = __p;
    if (__p)
    {
      uint64_t v15 = v48;
      uint64_t v16 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      unint64_t v48 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_41;
    }
    uint64_t v18 = v46;
    __int16 v19 = v45;
    if (v46 == v45) {
      goto LABEL_40;
    }
    do
    {
      uint64_t v21 = *--v18;
      uint64_t v20 = v21;
      void *v18 = 0;
      if (v21) {
        MEMORY[0x21667D390](v20, 0x1000C8077774924);
      }
    }
    while (v18 != v17);
    goto LABEL_39;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v36, "value", 5uLL);
  if (v8)
  {
    *a1 = v8;
    return 1;
  }
  a3(v40, a4);
  if (v40[0])
  {
    int v37 = 3;
    unint64_t v38 = "expected key entry for value in DictionaryAttr to set Properties.";
    uint64_t v39 = 65;
    uint64_t v22 = &v37;
    uint64_t v23 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v33 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v35 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
        uint64_t v23 = (char *)v41;
        uint64_t v22 = (int *)((char *)v41 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
        uint64_t v22 = &v37;
        uint64_t v23 = (char *)v41;
      }
    }
    uint64_t v24 = &v23[24 * v42];
    long long v25 = *(_OWORD *)v22;
    *((void *)v24 + 2) = *((void *)v22 + 2);
    *(_OWORD *)uint64_t v24 = v25;
    ++v42;
    if (v40[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
    }
  }
  if (v49)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = v48;
      uint64_t v28 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unint64_t v48 = v26;
      operator delete(v28);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_41;
    }
    long long v29 = v46;
    __int16 v19 = v45;
    if (v46 == v45)
    {
LABEL_40:
      __int16 v46 = v17;
      operator delete(v19);
LABEL_41:
      if (v41 != v44) {
        free(v41);
      }
      return 0;
    }
    do
    {
      uint64_t v31 = *--v29;
      uint64_t v30 = v31;
      void *v29 = 0;
      if (v31) {
        MEMORY[0x21667D390](v30, 0x1000C8077774924);
      }
    }
    while (v29 != v17);
LABEL_39:
    __int16 v19 = v45;
    goto LABEL_40;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CreateAttributeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(a2) = a3;
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::CreateAttributeOp::verifyInvariantsImpl(mlir::pdl_interp::CreateAttributeOp *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    int v3 = *(_DWORD *)(v2 + 36);
    uint64_t v4 = v2 - 16;
    if (v3) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
    return mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
  }
  else
  {
    uint64_t v17 = (void **)"requires attribute 'value'";
    __int16 v18 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v17, (uint64_t)v19);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
    if (v19[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
    }
    if (v26)
    {
      uint64_t v9 = __p;
      if (__p)
      {
        unsigned __int16 v10 = v25;
        uint64_t v11 = __p;
        if (v25 != __p)
        {
          do
            unsigned __int16 v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          uint64_t v11 = __p;
        }
        long long v25 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v22;
      if (v22)
      {
        long long v13 = v23;
        BOOL v14 = v22;
        if (v23 != v22)
        {
          do
          {
            uint64_t v16 = *--v13;
            uint64_t v15 = v16;
            void *v13 = 0;
            if (v16) {
              MEMORY[0x21667D390](v15, 0x1000C8077774924);
            }
          }
          while (v13 != v12);
          BOOL v14 = v22;
        }
        uint64_t v23 = v12;
        operator delete(v14);
      }
      if (v20 != &v21) {
        free(v20);
      }
    }
  }
  return v7;
}

uint64_t mlir::pdl_interp::CreateAttributeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 408))(a1, &v10, 0)) {
    return 0;
  }
  if (v10)
  {
    uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v4 = v10;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, a2 + 112)) {
    return 0;
  }
  mlir::NamedAttrList::get(a2 + 112, **(void **)(*(void *)(a2 + 8) + 96));
  uint64_t v5 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v5);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl_interp::CreateAttributeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v13[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v11 = v13;
  v13[0] = "value";
  v13[1] = 5;
  uint64_t v12 = 0x200000001;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

uint64_t mlir::pdl_interp::CreateOperationOp::getInputOperands(mlir::pdl_interp::CreateOperationOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

uint64_t mlir::pdl_interp::CreateOperationOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v108 = v6;
  if (!v6)
  {
    a3(v112, a4);
    if (v112[0])
    {
      int v109 = 3;
      uint64_t v110 = "expected DictionaryAttr to set properties";
      uint64_t v111 = 41;
      char v26 = &v109;
      uint64_t v27 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v90 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          int64_t v99 = (char *)&v109 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          uint64_t v27 = (char *)v113;
          char v26 = (int *)((char *)v113 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v90, 24);
          char v26 = &v109;
          uint64_t v27 = (char *)v113;
        }
      }
      uint64_t v28 = &v27[24 * v114];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v114;
      if (v112[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v120;
      unint64_t v32 = __p;
      if (v120 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      int v120 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v117;
    if (!v117) {
      goto LABEL_116;
    }
    unint64_t v33 = v118;
    uint64_t v23 = v117;
    if (v118 == v117)
    {
LABEL_115:
      unint64_t v118 = v21;
      operator delete(v23);
LABEL_116:
      if (v113 != v116) {
        free(v113);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_114:
    uint64_t v23 = v117;
    goto LABEL_115;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v108, "inferredResultTypes", 0x13uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v112, a4);
      if (v112[0])
      {
        int v109 = 3;
        uint64_t v111 = 64;
        uint64_t v10 = &v109;
        uint64_t v11 = (char *)v113;
        if (v114 >= v115)
        {
          unint64_t v91 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            int64_t v100 = (char *)&v109 - (unsigned char *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
            uint64_t v11 = (char *)v113;
            uint64_t v10 = (int *)((char *)v113 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v91, 24);
            uint64_t v10 = &v109;
            uint64_t v11 = (char *)v113;
          }
        }
        uint64_t v12 = &v11[24 * v114];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v114;
        if (v112[0])
        {
          BOOL v14 = &v109;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v9);
          uint64_t v15 = (char *)v113;
          if (v114 >= v115)
          {
            unint64_t v92 = v114 + 1;
            if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
            {
              int64_t v101 = (char *)&v109 - (unsigned char *)v113;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
              uint64_t v15 = (char *)v113;
              BOOL v14 = (int *)((char *)v113 + v101);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v92, 24);
              BOOL v14 = &v109;
              uint64_t v15 = (char *)v113;
            }
          }
          uint64_t v16 = &v15[24 * v114];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v114;
          if (v112[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
          }
        }
      }
      if (!v121) {
        return 0;
      }
      __int16 v18 = __p;
      if (__p)
      {
        __int16 v19 = v120;
        uint64_t v20 = __p;
        if (v120 != __p)
        {
          do
            __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        int v120 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v117;
      if (!v117) {
        goto LABEL_116;
      }
      uint64_t v22 = v118;
      uint64_t v23 = v117;
      if (v118 == v117) {
        goto LABEL_115;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_114;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v108, "inputAttributeNames", 0x13uLL);
  if (!v36)
  {
    a3(v112, a4);
    if (v112[0])
    {
      int v109 = 3;
      uint64_t v110 = "expected key entry for inputAttributeNames in DictionaryAttr to set Properties.";
      uint64_t v111 = 79;
      int64_t v52 = &v109;
      int64_t v53 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v94 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          int64_t v103 = (char *)&v109 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          int64_t v53 = (char *)v113;
          int64_t v52 = (int *)((char *)v113 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v94, 24);
          int64_t v52 = &v109;
          int64_t v53 = (char *)v113;
        }
      }
      int64_t v54 = &v53[24 * v114];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)int64_t v54 = v55;
      ++v114;
      if (v112[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121) {
      return 0;
    }
    int v56 = __p;
    if (__p)
    {
      int64_t v57 = v120;
      uint64_t v58 = __p;
      if (v120 != __p)
      {
        do
          int64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      int v120 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v117;
    if (!v117) {
      goto LABEL_116;
    }
    char v59 = v118;
    uint64_t v23 = v117;
    if (v118 == v117) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *char v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v21);
    goto LABEL_114;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a3(v112, a4);
    if (v112[0])
    {
      int v109 = 3;
      uint64_t v111 = 64;
      unint64_t v38 = &v109;
      uint64_t v39 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v93 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          int64_t v102 = (char *)&v109 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          uint64_t v39 = (char *)v113;
          unint64_t v38 = (int *)((char *)v113 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v93, 24);
          unint64_t v38 = &v109;
          uint64_t v39 = (char *)v113;
        }
      }
      __int16 v40 = &v39[24 * v114];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)__int16 v40 = v41;
      ++v114;
      if (v112[0])
      {
        unsigned int v42 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v37);
        unsigned int v43 = (char *)v113;
        if (v114 >= v115)
        {
          unint64_t v95 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            int64_t v104 = (char *)&v109 - (unsigned char *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
            unsigned int v43 = (char *)v113;
            unsigned int v42 = (int *)((char *)v113 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v95, 24);
            unsigned int v42 = &v109;
            unsigned int v43 = (char *)v113;
          }
        }
        uint64_t v44 = &v43[24 * v114];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = *((void *)v42 + 2);
        *(_OWORD *)uint64_t v44 = v45;
        ++v114;
        if (v112[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
        }
      }
    }
    if (!v121) {
      return 0;
    }
    __int16 v46 = __p;
    if (__p)
    {
      unint64_t v47 = v120;
      unint64_t v48 = __p;
      if (v120 != __p)
      {
        do
          unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unint64_t v48 = __p;
      }
      int v120 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v117;
    if (!v117) {
      goto LABEL_116;
    }
    char v49 = v118;
    uint64_t v23 = v117;
    if (v118 == v117) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v51 = *--v49;
      uint64_t v50 = v51;
      *char v49 = 0;
      if (v51) {
        MEMORY[0x21667D390](v50, 0x1000C8077774924);
      }
    }
    while (v49 != v21);
    goto LABEL_114;
  }
  a1[1] = v36;
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v108, "name", 4uLL);
  if (!v62)
  {
    a3(v112, a4);
    if (v112[0])
    {
      int v109 = 3;
      uint64_t v110 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v111 = 64;
      uint64_t v78 = &v109;
      int v79 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v97 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          int64_t v106 = (char *)&v109 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
          int v79 = (char *)v113;
          uint64_t v78 = (int *)((char *)v113 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v97, 24);
          uint64_t v78 = &v109;
          int v79 = (char *)v113;
        }
      }
      unint64_t v80 = &v79[24 * v114];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = *((void *)v78 + 2);
      *(_OWORD *)unint64_t v80 = v81;
      ++v114;
      if (v112[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
      }
    }
    if (!v121) {
      return 0;
    }
    unsigned int v82 = __p;
    if (__p)
    {
      uint64_t v83 = v120;
      uint64_t v84 = __p;
      if (v120 != __p)
      {
        do
          uint64_t v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        uint64_t v84 = __p;
      }
      int v120 = v82;
      operator delete(v84);
    }
    uint64_t v21 = v117;
    if (!v117) {
      goto LABEL_116;
    }
    uint64_t v85 = v118;
    uint64_t v23 = v117;
    if (v118 == v117) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v87 = *--v85;
      uint64_t v86 = v87;
      *uint64_t v85 = 0;
      if (v87) {
        MEMORY[0x21667D390](v86, 0x1000C8077774924);
      }
    }
    while (v85 != v21);
    goto LABEL_114;
  }
  uint64_t v63 = v62;
  if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a3(v112, a4);
    if (v112[0])
    {
      int v109 = 3;
      uint64_t v111 = 49;
      unint64_t v64 = &v109;
      unint64_t v65 = (char *)v113;
      if (v114 >= v115)
      {
        unint64_t v96 = v114 + 1;
        if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
        {
          int64_t v105 = (char *)&v109 - (unsigned char *)v113;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          unint64_t v65 = (char *)v113;
          unint64_t v64 = (int *)((char *)v113 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v96, 24);
          unint64_t v64 = &v109;
          unint64_t v65 = (char *)v113;
        }
      }
      unint64_t v66 = &v65[24 * v114];
      long long v67 = *(_OWORD *)v64;
      *((void *)v66 + 2) = *((void *)v64 + 2);
      *(_OWORD *)unint64_t v66 = v67;
      ++v114;
      if (v112[0])
      {
        char v68 = &v109;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v109, v63);
        uint64_t v69 = (char *)v113;
        if (v114 >= v115)
        {
          unint64_t v98 = v114 + 1;
          if (v113 <= &v109 && (char *)v113 + 24 * v114 > (char *)&v109)
          {
            int64_t v107 = (char *)&v109 - (unsigned char *)v113;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            uint64_t v69 = (char *)v113;
            char v68 = (int *)((char *)v113 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v116, v98, 24);
            char v68 = &v109;
            uint64_t v69 = (char *)v113;
          }
        }
        int64_t v70 = &v69[24 * v114];
        long long v71 = *(_OWORD *)v68;
        *((void *)v70 + 2) = *((void *)v68 + 2);
        *(_OWORD *)int64_t v70 = v71;
        ++v114;
        if (v112[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v112);
        }
      }
    }
    if (!v121) {
      return 0;
    }
    int64_t v72 = __p;
    if (__p)
    {
      int64_t v73 = v120;
      int64_t v74 = __p;
      if (v120 != __p)
      {
        do
          int64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        int64_t v74 = __p;
      }
      int v120 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v117;
    if (!v117) {
      goto LABEL_116;
    }
    uint64_t v75 = v118;
    uint64_t v23 = v117;
    if (v118 == v117) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v77 = *--v75;
      uint64_t v76 = v77;
      *uint64_t v75 = 0;
      if (v77) {
        MEMORY[0x21667D390](v76, 0x1000C8077774924);
      }
    }
    while (v75 != v21);
    goto LABEL_114;
  }
  a1[2] = v62;
  uint64_t v89 = (void *)mlir::DictionaryAttr::get((uint64_t)&v108, "operandSegmentSizes", 0x13uLL);
  if (v89 || (uint64_t v89 = (void *)mlir::DictionaryAttr::get((uint64_t)&v108, "operand_segment_sizes", 0x15uLL)) != 0)
  {
    if (mlir::convertFromAttribute(a1 + 3, (const char *)3, v89, a3, a4)) {
      return 1;
    }
  }
  else
  {
    a3(v112, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v112, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v112);
  }
  return 0;
}

uint64_t mlir::pdl_interp::CreateOperationOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v35[6] = *MEMORY[0x263EF8340];
  unint64_t v32 = a1;
  unint64_t v33 = v35;
  uint64_t v34 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"inferredResultTypes", 19, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v7 = v34;
    }
    uint64_t v8 = (uint64_t *)((char *)v33 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"inputAttributeNames", 19, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v13 = v34;
    }
    BOOL v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *BOOL v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"name", 4, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v19 = v34;
    }
    uint64_t v20 = (uint64_t *)((char *)v33 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
  uint64_t v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  uint64_t v24 = v23;
  unsigned int v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    unsigned int v25 = v34;
  }
  char v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *char v26 = v22;
  v26[1] = v24;
  BOOL v27 = __CFADD__(v34, 1);
  uint64_t v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v30 = v33;
    if (v33 == v35) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (uint64_t *)v33, v28);
  uint64_t v30 = v33;
  if (v33 != v35) {
LABEL_20:
  }
    free(v30);
  return DictionaryAttr;
}

unint64_t mlir::pdl_interp::CreateOperationOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v27 = v1;
    uint64_t v30 = a1;
    uint64_t v2 = &unk_267770000;
    int v16 = v15;
    unint64_t v1 = v27;
    a1 = v30;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v1 = v27;
      a1 = v30;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v28 = v5;
    uint64_t v31 = a1;
    uint64_t v2 = &unk_267770000;
    int v19 = v18;
    unint64_t v5 = v28;
    a1 = v31;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v5 = v28;
      a1 = v31;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v36 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v29 = v8;
    unint64_t v32 = a1;
    uint64_t v2 = &unk_267770000;
    int v22 = v21;
    unint64_t v8 = v29;
    a1 = v32;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v8 = v29;
      a1 = v32;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v35 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  {
    unint64_t v33 = a1;
    uint64_t v2 = &unk_267770000;
    int v25 = v24;
    a1 = v33;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      uint64_t v2 = (void *)&unk_267770000;
      a1 = v33;
    }
  }
  uint64_t v11 = *(unint64_t *)((char *)a1 + 28);
  uint64_t v12 = __ROR8__(v11 + 12, 12);
  unint64_t v13 = 0x9DDFEA08EB382D69 * (a1[3] ^ v2[385] ^ v12);
  unint64_t v34 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47))) ^ v11;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v37, (uint64_t *)&v36, (uint64_t *)&v35, (uint64_t *)&v34);
}

uint64_t mlir::pdl_interp::CreateOperationOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  if (__n == 4)
  {
    if (!memcmp(__s1, "name", 4uLL)) {
      return a2[2];
    }
    return 0;
  }
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
    }
    return 0;
  }
  if (__n != 19) {
    return 0;
  }
  if (*(void *)__s1 == 0x6465727265666E69
    && *((void *)__s1 + 1) == 0x7954746C75736552
    && *(void *)(__s1 + 11) == 0x7365707954746C75)
  {
    return *a2;
  }
  if (*(void *)__s1 != 0x7474417475706E69
    || *((void *)__s1 + 1) != 0x614E657475626972
    || *(void *)(__s1 + 11) != 0x73656D614E657475)
  {
    if (!memcmp(__s1, "operandSegmentSizes", 0x13uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
    }
    return 0;
  }
  return a2[1];
}

uint64_t mlir::pdl_interp::CreateOperationOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 4)
  {
    uint64_t result = memcmp(__s1, "name", 4uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          unint64_t v10 = a4;
        }
        else {
          unint64_t v10 = 0;
        }
        *(void *)(v5 + 16) = v10;
      }
      else
      {
        *(void *)(v5 + 16) = 0;
      }
    }
  }
  else
  {
    if (a3 == 21)
    {
      uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
      if (result) {
        return result;
      }
    }
    else
    {
      if (a3 != 19) {
        return result;
      }
      if (*(void *)__s1 == 0x6465727265666E69
        && *((void *)__s1 + 1) == 0x7954746C75736552
        && *(void *)(__s1 + 11) == 0x7365707954746C75)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            unint64_t v13 = a4;
          }
          else {
            unint64_t v13 = 0;
          }
          *(void *)uint64_t result = v13;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
        return result;
      }
      if (*(void *)__s1 == 0x7474417475706E69
        && *((void *)__s1 + 1) == 0x614E657475626972
        && *(void *)(__s1 + 11) == 0x73656D614E657475)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            BOOL v14 = a4;
          }
          else {
            BOOL v14 = 0;
          }
          *(void *)(result + 8) = v14;
        }
        else
        {
          *(void *)(result + 8) = 0;
        }
        return result;
      }
      uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
      if (result) {
        return result;
      }
    }
    if (a4)
    {
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
      if (result) {
        uint64_t v11 = a4;
      }
      else {
        uint64_t v11 = 0;
      }
      int v15 = v11;
      if (result)
      {
        uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v15);
        if (result == 3)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v15);
          if (v12) {
            return (uint64_t)memmove((void *)(v5 + 24), (const void *)result, 4 * v12);
          }
        }
      }
    }
  }
  return result;
}

BOOL mlir::pdl_interp::CreateOperationOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (void **)"inferredResultTypes", (const char *)0x13, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v9, (void **)"inputAttributeNames", (const char *)0x13, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"name", (const char *)4, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL mlir::pdl_interp::CreateOperationOp::readProperties(uint64_t a1, uint64_t a2)
{
  v10[24] = *MEMORY[0x263EF8340];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 2))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 4)
    {
      unint64_t v7 = "size mismatch for operand/result_segment_size";
      __int16 v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v10, a1, &v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    unint64_t v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 3, v4, 4 * v5);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::pdl_interp::CreateOperationOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 3);
  }
  return result;
}

uint64_t mlir::pdl_interp::CreateOperationOp::getInputAttributeNames(mlir::pdl_interp::CreateOperationOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 8);
}

__n128 mlir::pdl_interp::CreateOperationOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  mlir::pdl_interp::CreateOperationOp::build(a1, a2, SingletonImpl, a3, a4, a9, a10, v22, a11, a12, a13, a5, a6, a7);
  return result;
}

void mlir::pdl_interp::CreateOperationOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  int v14 = a7;
  mlir::OperationState::addOperands(a2, a6, a7);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::OperationState::addOperands(a2, a12, a13);
  int v19 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2);
  v19[6] = v14;
  v19[7] = a10;
  v19[8] = a13;
  __int16 v26 = 261;
  v25[0] = a4;
  v25[1] = a5;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v25);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2)
            + 16) = StringAttr;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2)
            + 8) = a11;
  if (a14)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v21);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
  }
  uint64_t v23 = *(unsigned int *)(a2 + 72);
  if (v23 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v23) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::CreateOperationOp::verifyInvariantsImpl(mlir::pdl_interp::CreateOperationOp *this)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = v3[1];
  if (!v4)
  {
    int v120 = (void **)"requires attribute 'inputAttributeNames'";
    __int16 v122 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v120, (uint64_t)v126);
    uint64_t v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v126);
    if (v126[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v126);
    }
    if (!v135) {
      return v57;
    }
    uint64_t v58 = __p;
    if (__p)
    {
      char v59 = v134;
      uint64_t v60 = __p;
      if (v134 != __p)
      {
        do
          char v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
        while (v59 != v58);
        uint64_t v60 = __p;
      }
      unint64_t v134 = v58;
      operator delete(v60);
    }
    uint64_t v61 = v131;
    if (v131)
    {
      uint64_t v62 = v132;
      uint64_t v63 = v131;
      if (v132 == v131) {
        goto LABEL_96;
      }
      do
      {
        uint64_t v65 = *--v62;
        uint64_t v64 = v65;
        *uint64_t v62 = 0;
        if (v65) {
          MEMORY[0x21667D390](v64, 0x1000C8077774924);
        }
      }
      while (v62 != v61);
LABEL_95:
      uint64_t v63 = v131;
LABEL_96:
      unint64_t v132 = v61;
      operator delete(v63);
    }
LABEL_97:
    if (v127 != v130) {
      free(v127);
    }
    return v57;
  }
  uint64_t v5 = v3[2];
  if (!v5)
  {
    int v120 = (void **)"requires attribute 'name'";
    __int16 v122 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v120, (uint64_t)v126);
    uint64_t v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v126);
    if (v126[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v126);
    }
    if (!v135) {
      return v57;
    }
    unint64_t v66 = __p;
    if (__p)
    {
      long long v67 = v134;
      char v68 = __p;
      if (v134 != __p)
      {
        do
          long long v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        char v68 = __p;
      }
      unint64_t v134 = v66;
      operator delete(v68);
    }
    uint64_t v61 = v131;
    if (v131)
    {
      uint64_t v69 = v132;
      uint64_t v63 = v131;
      if (v132 == v131) {
        goto LABEL_96;
      }
      do
      {
        uint64_t v71 = *--v69;
        uint64_t v70 = v71;
        void *v69 = 0;
        if (v71) {
          MEMORY[0x21667D390](v70, 0x1000C8077774924);
        }
      }
      while (v69 != v61);
      goto LABEL_95;
    }
    goto LABEL_97;
  }
  uint64_t v6 = *v3;
  v126[0] = v2;
  if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v5, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v126))return 0; {
  v126[0] = *(void *)this;
  }
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v4, (void **)"inputAttributeNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v126))return 0; {
  v126[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v6, (void **)"inferredResultTypes", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v126))return 0; {
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  }
  uint64_t v8 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)this + 72);
    if (v9) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v9)
    {
LABEL_13:
      uint64_t v11 = 0;
      uint64_t v12 = v10 + 24;
      while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*(void *)this, *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11) {
          goto LABEL_16;
        }
      }
      return 0;
    }
  }
LABEL_16:
  uint64_t ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands(this, 1u);
  if (v14)
  {
    uint64_t v15 = ODSOperands;
    uint64_t v16 = v14;
    uint64_t v17 = 0;
    do
    {
      unint64_t v18 = *(void *)(*(void *)(v15 + 32 * v17 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
      {
        uint64_t v19 = *(void *)this;
        __int16 v122 = 261;
        int v120 = (void **)"operand";
        uint64_t v121 = 7;
        mlir::Operation::emitOpError(v19, &v120, (uint64_t)v126);
        if (v126[0])
        {
          int v123 = 3;
          uint64_t v124 = " #";
          uint64_t v125 = 2;
          unint64_t v20 = (char *)v127;
          if (v128 >= v129)
          {
            unint64_t v47 = v128 + 1;
            if (v127 <= &v123 && (char *)v127 + 24 * v128 > (char *)&v123)
            {
              int64_t v53 = (char *)&v123 - (unsigned char *)v127;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v47, 24);
              unint64_t v20 = (char *)v127;
              int v21 = (int *)((char *)v127 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v47, 24);
              int v21 = &v123;
              unint64_t v20 = (char *)v127;
            }
          }
          else
          {
            int v21 = &v123;
          }
          uint64_t v22 = &v20[24 * v128];
          long long v23 = *(_OWORD *)v21;
          *((void *)v22 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          uint64_t v24 = ++v128;
          if (v126[0])
          {
            int v123 = 5;
            uint64_t v124 = (const char *)v9;
            int v25 = (char *)v127;
            if (v24 >= v129)
            {
              unint64_t v48 = v24 + 1;
              BOOL v49 = (char *)v127 + 24 * v24 > (char *)&v123;
              if (v127 <= &v123 && v49)
              {
                int64_t v54 = (char *)&v123 - (unsigned char *)v127;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v48, 24);
                int v25 = (char *)v127;
                __int16 v26 = (int *)((char *)v127 + v54);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v48, 24);
                __int16 v26 = &v123;
                int v25 = (char *)v127;
              }
            }
            else
            {
              __int16 v26 = &v123;
            }
            unint64_t v27 = &v25[24 * v128];
            long long v28 = *(_OWORD *)v26;
            *((void *)v27 + 2) = *((void *)v26 + 2);
            *(_OWORD *)unint64_t v27 = v28;
            uint64_t v29 = ++v128;
            if (v126[0])
            {
              int v123 = 3;
              uint64_t v125 = 65;
              uint64_t v30 = (char *)v127;
              if (v29 >= v129)
              {
                unint64_t v50 = v29 + 1;
                BOOL v51 = (char *)v127 + 24 * v29 > (char *)&v123;
                if (v127 <= &v123 && v51)
                {
                  int64_t v55 = (char *)&v123 - (unsigned char *)v127;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v50, 24);
                  uint64_t v30 = (char *)v127;
                  uint64_t v31 = (int *)((char *)v127 + v55);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v50, 24);
                  uint64_t v31 = &v123;
                  uint64_t v30 = (char *)v127;
                }
              }
              else
              {
                uint64_t v31 = &v123;
              }
              unint64_t v32 = &v30[24 * v128];
              long long v33 = *(_OWORD *)v31;
              *((void *)v32 + 2) = *((void *)v31 + 2);
              *(_OWORD *)unint64_t v32 = v33;
              ++v128;
              if (v126[0])
              {
                unint64_t v34 = &v123;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v123, v18);
                unint64_t v35 = (char *)v127;
                if (v128 >= v129)
                {
                  unint64_t v52 = v128 + 1;
                  if (v127 <= &v123 && (char *)v127 + 24 * v128 > (char *)&v123)
                  {
                    int64_t v56 = (char *)&v123 - (unsigned char *)v127;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v52, 24);
                    unint64_t v35 = (char *)v127;
                    unint64_t v34 = (int *)((char *)v127 + v56);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v52, 24);
                    unint64_t v34 = &v123;
                    unint64_t v35 = (char *)v127;
                  }
                }
                unint64_t v36 = &v35[24 * v128];
                long long v37 = *(_OWORD *)v34;
                *((void *)v36 + 2) = *((void *)v34 + 2);
                *(_OWORD *)unint64_t v36 = v37;
                ++v128;
              }
            }
          }
        }
        char v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v126);
        if (v126[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v126);
        }
        if (v135)
        {
          uint64_t v39 = __p;
          if (__p)
          {
            __int16 v40 = v134;
            long long v41 = __p;
            if (v134 != __p)
            {
              do
                __int16 v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
              while (v40 != v39);
              long long v41 = __p;
            }
            unint64_t v134 = v39;
            operator delete(v41);
          }
          unsigned int v42 = v131;
          if (v131)
          {
            unsigned int v43 = v132;
            uint64_t v44 = v131;
            if (v132 != v131)
            {
              do
              {
                uint64_t v46 = *--v43;
                uint64_t v45 = v46;
                *unsigned int v43 = 0;
                if (v46) {
                  MEMORY[0x21667D390](v45, 0x1000C8077774924);
                }
              }
              while (v43 != v42);
              uint64_t v44 = v131;
            }
            unint64_t v132 = v42;
            operator delete(v44);
          }
          if (v127 != v130) {
            free(v127);
          }
        }
        if (!v38) {
          return 0;
        }
      }
      LODWORD(v9) = v9 + 1;
    }
    while (++v17 != v16);
  }
  uint64_t v72 = mlir::memref::ReinterpretCastOp::getODSOperands(this, 2u);
  if (v73)
  {
    uint64_t v74 = v72;
    uint64_t v75 = v73;
    uint64_t v76 = 0;
    do
    {
      unint64_t v77 = *(void *)(*(void *)(v74 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v78 = *(void **)(*(void *)v77 + 136);
      if (v78 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
      {
        uint64_t v79 = *(void *)this;
        if (v78 != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
          || (v126[0] = *(void *)(*(void *)(v74 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8,
              *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v126) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id))
        {
          __int16 v122 = 261;
          int v120 = (void **)"operand";
          uint64_t v121 = 7;
          mlir::Operation::emitOpError(v79, &v120, (uint64_t)v126);
          if (v126[0])
          {
            int v123 = 3;
            uint64_t v124 = " #";
            uint64_t v125 = 2;
            unint64_t v80 = (char *)v127;
            if (v128 >= v129)
            {
              unint64_t v107 = v128 + 1;
              if (v127 <= &v123 && (char *)v127 + 24 * v128 > (char *)&v123)
              {
                int64_t v113 = (char *)&v123 - (unsigned char *)v127;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v107, 24);
                unint64_t v80 = (char *)v127;
                long long v81 = (int *)((char *)v127 + v113);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v107, 24);
                long long v81 = &v123;
                unint64_t v80 = (char *)v127;
              }
            }
            else
            {
              long long v81 = &v123;
            }
            unsigned int v82 = &v80[24 * v128];
            long long v83 = *(_OWORD *)v81;
            *((void *)v82 + 2) = *((void *)v81 + 2);
            *(_OWORD *)unsigned int v82 = v83;
            uint64_t v84 = ++v128;
            if (v126[0])
            {
              int v123 = 5;
              uint64_t v124 = (const char *)v9;
              uint64_t v85 = (char *)v127;
              if (v84 >= v129)
              {
                unint64_t v108 = v84 + 1;
                BOOL v109 = (char *)v127 + 24 * v84 > (char *)&v123;
                if (v127 <= &v123 && v109)
                {
                  int64_t v114 = (char *)&v123 - (unsigned char *)v127;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v108, 24);
                  uint64_t v85 = (char *)v127;
                  uint64_t v86 = (int *)((char *)v127 + v114);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v108, 24);
                  uint64_t v86 = &v123;
                  uint64_t v85 = (char *)v127;
                }
              }
              else
              {
                uint64_t v86 = &v123;
              }
              uint64_t v87 = &v85[24 * v128];
              long long v88 = *(_OWORD *)v86;
              *((void *)v87 + 2) = *((void *)v86 + 2);
              *(_OWORD *)uint64_t v87 = v88;
              uint64_t v89 = ++v128;
              if (v126[0])
              {
                int v123 = 3;
                uint64_t v125 = 87;
                unint64_t v90 = (char *)v127;
                if (v89 >= v129)
                {
                  unint64_t v110 = v89 + 1;
                  BOOL v111 = (char *)v127 + 24 * v89 > (char *)&v123;
                  if (v127 <= &v123 && v111)
                  {
                    int64_t v115 = (char *)&v123 - (unsigned char *)v127;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v110, 24);
                    unint64_t v90 = (char *)v127;
                    unint64_t v91 = (int *)((char *)v127 + v115);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v110, 24);
                    unint64_t v91 = &v123;
                    unint64_t v90 = (char *)v127;
                  }
                }
                else
                {
                  unint64_t v91 = &v123;
                }
                unint64_t v92 = &v90[24 * v128];
                long long v93 = *(_OWORD *)v91;
                *((void *)v92 + 2) = *((void *)v91 + 2);
                *(_OWORD *)unint64_t v92 = v93;
                ++v128;
                if (v126[0])
                {
                  unint64_t v94 = &v123;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v123, v77);
                  unint64_t v95 = (char *)v127;
                  if (v128 >= v129)
                  {
                    unint64_t v112 = v128 + 1;
                    if (v127 <= &v123 && (char *)v127 + 24 * v128 > (char *)&v123)
                    {
                      int64_t v116 = (char *)&v123 - (unsigned char *)v127;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v112, 24);
                      unint64_t v95 = (char *)v127;
                      unint64_t v94 = (int *)((char *)v127 + v116);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, v130, v112, 24);
                      unint64_t v94 = &v123;
                      unint64_t v95 = (char *)v127;
                    }
                  }
                  unint64_t v96 = &v95[24 * v128];
                  long long v97 = *(_OWORD *)v94;
                  *((void *)v96 + 2) = *((void *)v94 + 2);
                  *(_OWORD *)unint64_t v96 = v97;
                  ++v128;
                }
              }
            }
          }
          char v98 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v126);
          if (v126[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v126);
          }
          if (v135)
          {
            int64_t v99 = __p;
            if (__p)
            {
              int64_t v100 = v134;
              int64_t v101 = __p;
              if (v134 != __p)
              {
                do
                  int64_t v100 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v100 - 1);
                while (v100 != v99);
                int64_t v101 = __p;
              }
              unint64_t v134 = v99;
              operator delete(v101);
            }
            int64_t v102 = v131;
            if (v131)
            {
              int64_t v103 = v132;
              int64_t v104 = v131;
              if (v132 != v131)
              {
                do
                {
                  uint64_t v106 = *--v103;
                  uint64_t v105 = v106;
                  *int64_t v103 = 0;
                  if (v106) {
                    MEMORY[0x21667D390](v105, 0x1000C8077774924);
                  }
                }
                while (v103 != v102);
                int64_t v104 = v131;
              }
              unint64_t v132 = v102;
              operator delete(v104);
            }
            if (v127 != v130) {
              free(v127);
            }
          }
          if (!v98) {
            return 0;
          }
        }
      }
      LODWORD(v9) = v9 + 1;
    }
    while (++v76 != v75);
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v118 = *(void *)this - 16;
  }
  else {
    uint64_t v118 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v118, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::pdl_interp::CreateOperationOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v33 = 0;
  uint64_t v45 = v47;
  uint64_t v46 = 0x400000000;
  v43[0] = &v44;
  v43[1] = (void *)0x100000000;
  __int16 v40 = v42;
  uint64_t v41 = 0x400000000;
  long long v37 = v39;
  uint64_t v38 = 0x400000000;
  v35[0] = &v36;
  v35[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v33, v6)) {
    goto LABEL_17;
  }
  if (v33)
  {
    uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v7 + 16) = v33;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v45, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v43)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v32 = v8;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  __src = v50;
  uint64_t v49 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 80))(a1)
    || (v34[0] = a1,
        v34[1] = &__src,
        _OWORD v34[2] = &v40,
        (*(unsigned __int8 (**)(uint64_t, void, uint64_t (*)(uint64_t *), void *, void, void))(*(void *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseCreateOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>, v34, 0, 0))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 88))(a1))
  {
    uint64_t ArrayAttr = mlir::Builder::getArrayAttr(v9, (uint64_t)__src, v49);
    char v11 = 0;
    uint64_t v12 = __src;
    if (__src == v50) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t ArrayAttr = 0;
  char v11 = 1;
  uint64_t v12 = __src;
  if (__src != v50) {
LABEL_15:
  }
    free(v12);
LABEL_16:
  if (v11) {
    goto LABEL_17;
  }
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2)
            + 8) = ArrayAttr;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 160))(a1))
    {
      __int16 v51 = 257;
      if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "inferred", 8, &__src)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 168))(a1))
      {
        goto LABEL_17;
      }
      uint64_t v17 = (mlir::UnitAttr **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t UnitAttr = mlir::Builder::getUnitAttr(v17, v18);
      if (UnitAttr) {
        *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2) = UnitAttr;
      }
    }
    else if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1) {
           || !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v37, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 552))(a1, v35)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    }
    {
      goto LABEL_17;
    }
  }
  v34[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_17;
  }
  uint64_t v20 = *(void *)(a2 + 8);
  __src = (void *)a1;
  uint64_t v49 = (uint64_t)v34;
  v50[0] = a2;
  if (!mlir::pdl_interp::CreateOperationOp::verifyInherentAttrs(v20, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateOperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))goto LABEL_17; {
  uint64_t v31 = v16;
  }
  int v21 = v46;
  int v22 = v41;
  int v23 = v38;
  uint64_t v24 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(a2);
  v24[6] = v21;
  v24[7] = v22;
  v24[8] = v23;
  int v25 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  __src = (void *)mlir::Builder::getType<mlir::pdl::OperationType>(v25);
  __int16 v26 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v27 = mlir::Builder::getType<mlir::pdl::AttributeType>(v26);
  mlir::OperationState::addTypes(a2, &__src, 1);
  uint64_t v28 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v45, (uint64_t)v43, v32, v28))goto LABEL_17; {
  if (v41)
  }
  {
    uint64_t v29 = (char *)v40;
    uint64_t v30 = 32 * v41;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v29, v27, v28))
    {
      v29 += 32;
      v30 -= 32;
      if (!v30) {
        goto LABEL_47;
      }
    }
LABEL_17:
    BOOL v13 = 0;
    uint64_t v14 = v35[0];
    if (v35[0] == &v36) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_47:
  BOOL v13 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v37, (uint64_t)v35, v31, v28) != 0;
  uint64_t v14 = v35[0];
  if (v35[0] != &v36) {
LABEL_18:
  }
    free(v14);
LABEL_19:
  if (v37 != v39) {
    free(v37);
  }
  if (v40 != v42) {
    free(v40);
  }
  if (v43[0] != &v44) {
    free(v43[0]);
  }
  if (v45 != v47) {
    free(v45);
  }
  return v13;
}

void mlir::pdl_interp::CreateOperationOp::print(mlir::pdl_interp::CreateOperationOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  unint64_t v6 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v6 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v6 + 16));
  unint64_t v7 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v7 = 0;
  }
  if (*(_DWORD *)(v7 + 24))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "(", 1uLL);
    }
    else
    {
      unsigned char *v9 = 40;
      ++*((void *)v8 + 4);
    }
    unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned int *)(v11 + 24);
    if ((v10 & 0x800000) != 0) {
      uint64_t v13 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v89 = ", ";
    unint64_t v90 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v13, 0, v13, v12, (uint64_t)a2, v14, (uint64_t)&v89);
    uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
    if ((unint64_t)v16 >= *((void *)v15 + 3))
    {
      llvm::raw_ostream::write(v15, 32);
    }
    else
    {
      *((void *)v15 + 4) = v16 + 1;
      unsigned char *v16 = 32;
    }
    uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v18 = (unsigned char *)*((void *)v17 + 4);
    if (*((unsigned char **)v17 + 3) == v18)
    {
      llvm::raw_ostream::write(v17, ":", 1uLL);
    }
    else
    {
      unsigned char *v18 = 58;
      ++*((void *)v17 + 4);
    }
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
    if ((unint64_t)v20 >= *((void *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 32);
    }
    else
    {
      *((void *)v19 + 4) = v20 + 1;
      unsigned char *v20 = 32;
    }
    unint64_t v21 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v22 = *(void *)this + 16 * ((v21 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int *)(v22 + 24);
    if ((v21 & 0x800000) != 0) {
      uint64_t v24 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v24 = 0;
    }
    v86[0] = v24;
    v86[1] = v23;
    mlir::OperandRange::getTypes(v86, (uint64_t *)&v89);
    unint64_t AttrDictionary = ", ";
    uint64_t v88 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v89, v90, (uint64_t)v91, v92, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    int v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    __int16 v26 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, ")", 1uLL);
    }
    else
    {
      *__int16 v26 = 41;
      ++*((void *)v25 + 4);
    }
  }
  unint64_t v27 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v28 = *(void *)this + 16 * ((v27 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v28 = 0;
  }
  if ((v27 & 0x800000) != 0)
  {
    uint64_t v29 = *(void *)(*(void *)this + 72);
    uint64_t v30 = *(unsigned int *)(v28 + 24);
    uint64_t v89 = *(void **)(v28 + 8);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    if (!v31) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = *(unsigned int *)(v28 + 24);
    uint64_t v89 = *(void **)(v28 + 8);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    if (!v81) {
      goto LABEL_48;
    }
  }
  uint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (_WORD *)*((void *)v32 + 4);
  unsigned int v82 = this;
  if (*((void *)v32 + 3) - (void)v33 <= 1uLL)
  {
    llvm::raw_ostream::write(v32, " {", 2uLL);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    uint64_t v35 = v34 << 32;
    if (!(v34 << 32)) {
      goto LABEL_44;
    }
LABEL_40:
    int v36 = v34;
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *Value);
    uint64_t v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v39 = *((void *)v38 + 4);
    if ((unint64_t)(*((void *)v38 + 3) - v39) > 2)
    {
      *(unsigned char *)(v39 + 2) = 32;
      *(_WORD *)uint64_t v39 = 15648;
      *((void *)v38 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v38, " = ", 3uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v29 + 32 * v30 + 24));
    if (v35 != 0x100000000)
    {
      uint64_t v61 = v29 + 32 * v30;
      uint64_t v62 = 1;
      uint64_t v63 = v36;
      uint64_t v64 = 0x100000000;
      do
      {
        uint64_t v65 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        unint64_t v66 = (_WORD *)*((void *)v65 + 4);
        if (*((void *)v65 + 3) - (void)v66 > 1uLL)
        {
          *unint64_t v66 = 8236;
          *((void *)v65 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v65, ", ", 2uLL);
        }
        uint64_t v67 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(v67 + 8 * v62));
        char v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v69 = *((void *)v68 + 4);
        if ((unint64_t)(*((void *)v68 + 3) - v69) > 2)
        {
          *(unsigned char *)(v69 + 2) = 32;
          *(_WORD *)uint64_t v69 = 15648;
          *((void *)v68 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v68, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v61 + (v64 >> 27) + 24));
        ++v62;
        v64 += 0x100000000;
      }
      while (v63 != v62);
    }
    goto LABEL_44;
  }
  *uint64_t v33 = 31520;
  *((void *)v32 + 4) += 2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
  uint64_t v35 = v34 << 32;
  if (v34 << 32) {
    goto LABEL_40;
  }
LABEL_44:
  __int16 v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v41 = (unsigned char *)*((void *)v40 + 4);
  if ((unint64_t)v41 >= *((void *)v40 + 3))
  {
    llvm::raw_ostream::write(v40, 125);
  }
  else
  {
    *((void *)v40 + 4) = v41 + 1;
    *uint64_t v41 = 125;
  }
  this = v82;
LABEL_48:
  unsigned int v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v43 = (unsigned char *)*((void *)v42 + 4);
  if ((unint64_t)v43 >= *((void *)v42 + 3))
  {
    llvm::raw_ostream::write(v42, 32);
  }
  else
  {
    *((void *)v42 + 4) = v43 + 1;
    *unsigned int v43 = 32;
  }
  unint64_t v44 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v45 = (_DWORD *)(*(void *)this + 16 * ((v44 >> 23) & 1) + 64);
  }
  else {
    uint64_t v45 = 0;
  }
  int v46 = v45[6];
  int v47 = v45[7];
  int v48 = v45[8];
  if ((v44 & 0x800000) != 0)
  {
    uint64_t v49 = *(void *)(*(void *)this + 72);
    uint64_t v50 = (v47 + v46);
    uint64_t v51 = (v48 + v50);
    uint64_t v52 = v49 + 32 * v50;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v50 = (v47 + v46);
    uint64_t v51 = (v48 + v50);
    uint64_t v52 = 32 * v50;
  }
  uint64_t v53 = v51 - v50;
  unint64_t AttrDictionary = (const char *)(v49 + 32 * v50);
  uint64_t v88 = v51 - v50;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v83);
  mlir::ValueRange::ValueRange((unint64_t *)&v89, v83 + 32 * v84, v85 - v84);
  mlir::TypeRange::TypeRange((unint64_t *)&v95, (uint64_t)v89, v90);
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    int64_t v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v55 = (void *)*((void *)v54 + 4);
    if (*((void *)v54 + 3) - (void)v55 <= 0xDuLL)
    {
      llvm::raw_ostream::write(v54, " -> <inferred>", 0xEuLL);
      goto LABEL_78;
    }
    qmemcpy(v55, " -> <inferred>", 14);
    uint64_t v60 = *((void *)v54 + 4) + 14;
    goto LABEL_77;
  }
  uint64_t v56 = v96;
  if (!v96) {
    goto LABEL_78;
  }
  uint64_t v57 = v95;
  uint64_t v58 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v59 = *((void *)v58 + 4);
  if ((unint64_t)(*((void *)v58 + 3) - v59) > 4)
  {
    *(unsigned char *)(v59 + 4) = 40;
    *(_DWORD *)uint64_t v59 = 540945696;
    *((void *)v58 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v58, " -> (", 5uLL);
  }
  uint64_t v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v89 = ", ";
  unint64_t v90 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v52, 0, v52, v53, (uint64_t)a2, v70, (uint64_t)&v89);
  uint64_t v71 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v72 = *((void *)v71 + 4);
  if ((unint64_t)(*((void *)v71 + 3) - v72) > 2)
  {
    *(unsigned char *)(v72 + 2) = 32;
    *(_WORD *)uint64_t v72 = 14880;
    *((void *)v71 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v71, " : ", 3uLL);
  }
  uint64_t v89 = ", ";
  unint64_t v90 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void llvm::interleaveComma<mlir::TypeRange,mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::TypeRange,void llvm::interleaveComma<mlir::TypeRange,mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v57, 0, v57, v56, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v89);
  int64_t v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v73 = (unsigned char *)*((void *)v54 + 4);
  if (*((unsigned char **)v54 + 3) != v73)
  {
    *uint64_t v73 = 41;
    uint64_t v60 = *((void *)v54 + 4) + 1;
LABEL_77:
    *((void *)v54 + 4) = v60;
    goto LABEL_78;
  }
  llvm::raw_ostream::write(v54, ")", 1uLL);
LABEL_78:
  uint64_t v89 = &v91;
  unint64_t v91 = "operandSegmentSizes";
  uint64_t v92 = 19;
  long long v93 = "name";
  uint64_t v94 = 4;
  unint64_t v90 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, &v91, 3uLL, 16);
  uint64_t v74 = (char *)v89 + 16 * v90;
  *uint64_t v74 = "inputAttributeNames";
  v74[1] = 19;
  uint64_t v75 = (v90 + 1);
  LODWORD(v90) = v75;
  if (v75 >= HIDWORD(v90))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, &v91, v75 + 1, 16);
    LODWORD(v75) = v90;
  }
  uint64_t v76 = (char *)v89 + 16 * v75;
  *uint64_t v76 = "inferredResultTypes";
  v76[1] = 19;
  LODWORD(v90) = v90 + 1;
  mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v77 = *(mlir::Operation **)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v77);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v77 + 56);
  }
  uint64_t v79 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, v79, v80, v89, v90);
  if (v89 != &v91) {
    free(v89);
  }
}

void mlir::pdl_interp::CreateRangeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OperationState::addOperands(a2, a4, a5);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::CreateRangeOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned char v18[16] = *MEMORY[0x263EF8340];
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v12 = 0;
  uint64_t v13 = &v15;
  uint64_t v14 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 0, 1, 0xFFFFFFFFLL)|| v17&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&v13)))
  {
    goto LABEL_13;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v13, v14);
  if (v11[1])
  {
    uint64_t v5 = (void *)mlir::TypeRange::dereference_iterator(v11[0], 0);
    RangeElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf(v5);
    uint64_t v12 = mlir::pdl::RangeType::get((uint64_t)RangeElementTypeOrSelf);
  }
  else if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v12))
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
LABEL_13:
    BOOL v8 = 0;
    uint64_t v9 = v13;
    if (v13 == &v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = v12;
  ++*(_DWORD *)(a2 + 72);
  BOOL v8 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v16, (uint64_t)&v13, v4, a2 + 16) != 0;
  uint64_t v9 = v13;
  if (v13 != &v15) {
LABEL_14:
  }
    free(v9);
LABEL_15:
  if (v16 != v18) {
    free(v16);
  }
  return v8;
}

uint64_t mlir::pdl_interp::CreateTypeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      __int16 v26 = &v56;
      unint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v27 = (char *)v60;
          __int16 v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          __int16 v26 = &v56;
          unint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "value", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for value in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      int v36 = &v56;
      long long v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          long long v37 = (char *)v60;
          int v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int v36 = &v56;
          long long v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    __int16 v40 = __p;
    if (__p)
    {
      uint64_t v41 = v67;
      unsigned int v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unsigned int v42 = __p;
      }
      uint64_t v67 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unsigned int v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *unsigned int v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    unint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        unint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v67 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CreateTypeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(a2) = a3;
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::CreateTypeOp::verifyInvariantsImpl(mlir::pdl_interp::CreateTypeOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (void **)"requires attribute 'value'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::pdl_interp::CreateTypeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::TypeAttr>(a1, &v17, v6)) {
    return 0;
  }
  if (v17)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v17;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v15[0] = a1;
  v15[1] = &v16;
  uint64_t v15[2] = a2;
  uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
  if (v9)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v9, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))return 0; {
  }
    }
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  if (v13 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v13) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl_interp::CreateTypeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v13[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v11 = v13;
  v13[0] = "value";
  v13[1] = 5;
  uint64_t v12 = 0x200000001;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::CreateTypesOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v7 = mlir::pdl::RangeType::get(SingletonImpl);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(a2) = a3;
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::pdl_interp::CreateTypesOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(a2) = a4;
  uint64_t v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::CreateTypesOp::verifyInvariantsImpl(mlir::pdl_interp::CreateTypesOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v3, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (void **)"requires attribute 'value'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::pdl_interp::CreateTypesOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v6)) {
    return 0;
  }
  if (v18)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v18;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v16[0] = a1;
  v16[1] = &v17;
  uint64_t v16[2] = a2;
  uint64_t v9 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
  if (v9)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v9, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v16))return 0; {
  }
    }
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl_interp::EraseOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v3, 1);
}

BOOL mlir::pdl_interp::EraseOp::parse(uint64_t a1, uint64_t a2)
{
  void v8[4] = *MEMORY[0x263EF8340];
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v4);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, SingletonImpl, a2 + 16) != 0;
}

BOOL mlir::pdl_interp::ExtractOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v6, (void **)"index", (const char *)5, a3, a4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::ExtractOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v12 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, 0x20u);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(a2) = IntegerAttr;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = Value;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::pdl_interp::ExtractOp::verifyInvariantsImpl(mlir::pdl_interp::ExtractOp *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v3, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps10(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      return 0;
    }
    if (*(_DWORD *)(*(void *)this + 36)) {
      uint64_t v4 = *(void *)this - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    if (!mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
    if (*(_DWORD *)(*(void *)this + 36))
    }
      uint64_t v6 = *(void *)this - 16;
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
    if (mlir::pdl::RangeType::get(*(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
      return 1;
    __int16 v25 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v9 = __p;
      if (__p)
      {
        unint64_t v10 = v32;
        uint64_t v11 = __p;
        if (v32 != __p)
        {
          do
            unint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          uint64_t v11 = __p;
        }
        uint64_t v32 = v9;
        operator delete(v11);
      }
      unint64_t v12 = v29;
      if (!v29) {
        goto LABEL_43;
      }
      uint64_t v13 = v30;
      uint64_t v14 = v29;
      if (v30 == v29)
      {
LABEL_42:
        uint64_t v30 = v12;
        operator delete(v14);
LABEL_43:
        if (v27 != &v28) {
          free(v27);
        }
        return v8;
      }
      do
      {
        uint64_t v16 = *--v13;
        uint64_t v15 = v16;
        void *v13 = 0;
        if (v16) {
          MEMORY[0x21667D390](v15, 0x1000C8077774924);
        }
      }
      while (v13 != v12);
LABEL_41:
      uint64_t v14 = v29;
      goto LABEL_42;
    }
  }
  else
  {
    v24[0] = (void **)"requires attribute 'index'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        uint64_t v18 = v32;
        uint64_t v19 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        uint64_t v32 = v17;
        operator delete(v19);
      }
      unint64_t v12 = v29;
      if (!v29) {
        goto LABEL_43;
      }
      uint64_t v20 = v30;
      uint64_t v14 = v29;
      if (v30 == v29) {
        goto LABEL_42;
      }
      do
      {
        uint64_t v22 = *--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v20 != v12);
      goto LABEL_41;
    }
  }
  return v8;
}

uint64_t mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps10(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v54[0] = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v54);
    if (mlir::pdl::PDLType::classof(Value)) {
      return 1;
    }
  }
  __int16 v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    int v51 = 3;
    int64_t v52 = " #";
    uint64_t v53 = 2;
    unint64_t v12 = &v51;
    uint64_t v13 = (char *)v55;
    if (v56 >= v57)
    {
      unint64_t v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        int64_t v45 = (char *)&v51 - (unsigned char *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v13 = (char *)v55;
        unint64_t v12 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        unint64_t v12 = &v51;
        uint64_t v13 = (char *)v55;
      }
    }
    uint64_t v14 = &v13[24 * v56];
    long long v15 = *(_OWORD *)v12;
    *((void *)v14 + 2) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v14 = v15;
    uint64_t v16 = ++v56;
    if (v54[0])
    {
      int v51 = 5;
      int64_t v52 = (const char *)a5;
      uint64_t v17 = &v51;
      uint64_t v18 = (char *)v55;
      if (v16 >= v57)
      {
        unint64_t v40 = v16 + 1;
        BOOL v41 = (char *)v55 + 24 * v16 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          uint64_t v18 = (char *)v55;
          uint64_t v17 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          uint64_t v17 = &v51;
          uint64_t v18 = (char *)v55;
        }
      }
      uint64_t v19 = &v18[24 * v56];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = *((void *)v17 + 2);
      *(_OWORD *)uint64_t v19 = v20;
      uint64_t v21 = ++v56;
      if (v54[0])
      {
        int v51 = 3;
        int64_t v52 = " must be range of pdl type values, but got ";
        uint64_t v53 = 43;
        uint64_t v22 = &v51;
        uint64_t v23 = (char *)v55;
        if (v21 >= v57)
        {
          unint64_t v42 = v21 + 1;
          BOOL v43 = (char *)v55 + 24 * v21 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            int64_t v47 = (char *)&v51 - (unsigned char *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            uint64_t v23 = (char *)v55;
            uint64_t v22 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            uint64_t v22 = &v51;
            uint64_t v23 = (char *)v55;
          }
        }
        uint64_t v24 = &v23[24 * v56];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v56;
        if (v54[0])
        {
          uint64_t v26 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          unint64_t v27 = (char *)v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              int64_t v48 = (char *)&v51 - (unsigned char *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v27 = (char *)v55;
              uint64_t v26 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v26 = &v51;
              unint64_t v27 = (char *)v55;
            }
          }
          uint64_t v28 = &v27[24 * v56];
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = *((void *)v26 + 2);
          *(_OWORD *)uint64_t v28 = v29;
          ++v56;
        }
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  }
  if (v63)
  {
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v62;
      uint64_t v32 = __p;
      if (v62 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unsigned int v62 = v30;
      operator delete(v32);
    }
    char v33 = v59;
    if (v59)
    {
      uint64_t v34 = v60;
      uint64_t v35 = v59;
      if (v60 != v59)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *uint64_t v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        uint64_t v35 = v59;
      }
      uint64_t v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58) {
      free(v55);
    }
  }
  return v11;
}

BOOL mlir::pdl_interp::ExtractOp::parse(uint64_t a1, uint64_t a2)
{
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v22, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType)) {
    return 0;
  }
  if (v18)
  {
    uint64_t v6 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v6 = v18;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "of", 2, v19))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v19[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v19)) {
    return 0;
  }
  uint64_t v7 = v19[0];
  uint64_t __src = v19[0];
  v15[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v19[0] = a1;
  v19[1] = (uint64_t)v15;
  uint64_t v19[2] = a2;
  if (!mlir::pdl_interp::ExtractOp::verifyInherentAttrs(v8, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ExtractOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0; {
  uint64_t v17 = v7;
  }
  if (mlir::pdl::PDLType::classof(v7))
  {
    mlir::OperationState::addTypes(a2, &__src, 1);
    uint64_t v9 = mlir::pdl::RangeType::get(__src);
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v22, v9, a2 + 16) != 0;
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v16 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v19, a1, v12, v15);
    uint64_t v13 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v19, "'result' must be pdl type, but got ");
    uint64_t v14 = mlir::InFlightDiagnostic::append<mlir::Type &>(v13, &v17);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v19);
  }
  return v10;
}

void mlir::pdl_interp::ExtractOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v27[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 32;
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *long long v15 = 58;
    ++*((void *)v14 + 4);
  }
  __int16 v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v18 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v25 = v27;
  v27[0] = "index";
  v27[1] = 5;
  uint64_t v26 = 0x200000001;
  __int16 v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v25, v26);
  if (v25 != v27) {
    free(v25);
  }
}

BOOL mlir::pdl_interp::FinalizeOp::parse(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112) != 0;
}

uint64_t mlir::pdl_interp::FuncOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v92 = v6;
  if (!v6)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      uint64_t v94 = "expected DictionaryAttr to set properties";
      uint64_t v95 = 41;
      uint64_t v26 = &v93;
      unint64_t v27 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v77 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v84 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v77, 24);
          unint64_t v27 = (char *)v97;
          uint64_t v26 = (uint64_t *)((char *)v97 + v84);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v77, 24);
          uint64_t v26 = &v93;
          unint64_t v27 = (char *)v97;
        }
      }
      uint64_t v28 = &v27[24 * v98];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v104;
      uint64_t v32 = __p;
      if (v104 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      int64_t v104 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    char v33 = v102;
    uint64_t v23 = v101;
    if (v102 == v101)
    {
LABEL_102:
      int64_t v102 = v21;
      operator delete(v23);
LABEL_103:
      if (v97 != v100) {
        free(v97);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *char v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_101:
    uint64_t v23 = v101;
    goto LABEL_102;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v92, "arg_attrs", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v96, a4);
      if (v96[0])
      {
        LODWORD(v93) = 3;
        uint64_t v95 = 54;
        uint64_t v10 = &v93;
        uint64_t v11 = (char *)v97;
        if (v98 >= v99)
        {
          unint64_t v78 = v98 + 1;
          if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
          {
            int64_t v85 = (char *)&v93 - (unsigned char *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            uint64_t v11 = (char *)v97;
            uint64_t v10 = (uint64_t *)((char *)v97 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            uint64_t v10 = &v93;
            uint64_t v11 = (char *)v97;
          }
        }
        uint64_t v12 = &v11[24 * v98];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v98;
        if (v96[0])
        {
          uint64_t v14 = &v93;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v93, v9);
          long long v15 = (char *)v97;
          if (v98 >= v99)
          {
            unint64_t v79 = v98 + 1;
            if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
            {
              int64_t v86 = (char *)&v93 - (unsigned char *)v97;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v79, 24);
              long long v15 = (char *)v97;
              uint64_t v14 = (uint64_t *)((char *)v97 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v79, 24);
              uint64_t v14 = &v93;
              long long v15 = (char *)v97;
            }
          }
          __int16 v16 = &v15[24 * v98];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)__int16 v16 = v17;
          ++v98;
          if (v96[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
          }
        }
      }
      if (!v105) {
        return 0;
      }
      uint64_t v18 = __p;
      if (__p)
      {
        uint64_t v19 = v104;
        __int16 v20 = __p;
        if (v104 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          __int16 v20 = __p;
        }
        int64_t v104 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v101;
      if (!v101) {
        goto LABEL_103;
      }
      uint64_t v22 = v102;
      uint64_t v23 = v101;
      if (v102 == v101) {
        goto LABEL_102;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_101;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v92, "function_type", 0xDuLL);
  if (!v36)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      uint64_t v94 = "expected key entry for function_type in DictionaryAttr to set Properties.";
      uint64_t v95 = 73;
      int64_t v52 = &v93;
      uint64_t v53 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v81 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v88 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v81, 24);
          uint64_t v53 = (char *)v97;
          int64_t v52 = (uint64_t *)((char *)v97 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v81, 24);
          int64_t v52 = &v93;
          uint64_t v53 = (char *)v97;
        }
      }
      int64_t v54 = &v53[24 * v98];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = v52[2];
      *(_OWORD *)int64_t v54 = v55;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    unsigned int v56 = __p;
    if (__p)
    {
      unsigned int v57 = v104;
      uint64_t v58 = __p;
      if (v104 != __p)
      {
        do
          unsigned int v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      int64_t v104 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    uint64_t v59 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      *uint64_t v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v21);
    goto LABEL_101;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      uint64_t v95 = 58;
      uint64_t v38 = &v93;
      unint64_t v39 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v80 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v87 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
          unint64_t v39 = (char *)v97;
          uint64_t v38 = (uint64_t *)((char *)v97 + v87);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
          uint64_t v38 = &v93;
          unint64_t v39 = (char *)v97;
        }
      }
      unint64_t v40 = &v39[24 * v98];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = v38[2];
      *(_OWORD *)unint64_t v40 = v41;
      ++v98;
      if (v96[0])
      {
        unint64_t v42 = &v93;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v93, v37);
        BOOL v43 = (char *)v97;
        if (v98 >= v99)
        {
          unint64_t v82 = v98 + 1;
          if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
          {
            int64_t v89 = (char *)&v93 - (unsigned char *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v82, 24);
            BOOL v43 = (char *)v97;
            unint64_t v42 = (uint64_t *)((char *)v97 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v82, 24);
            unint64_t v42 = &v93;
            BOOL v43 = (char *)v97;
          }
        }
        unint64_t v44 = &v43[24 * v98];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)unint64_t v44 = v45;
        ++v98;
        if (v96[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
        }
      }
    }
    if (!v105) {
      return 0;
    }
    int64_t v46 = __p;
    if (__p)
    {
      int64_t v47 = v104;
      int64_t v48 = __p;
      if (v104 != __p)
      {
        do
          int64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        int64_t v48 = __p;
      }
      int64_t v104 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    unint64_t v49 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      uint64_t v51 = *--v49;
      uint64_t v50 = v51;
      *unint64_t v49 = 0;
      if (v51) {
        MEMORY[0x21667D390](v50, 0x1000C8077774924);
      }
    }
    while (v49 != v21);
    goto LABEL_101;
  }
  a1[1] = v36;
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v92, "res_attrs", 9uLL);
  uint64_t v93 = v62;
  if (v62)
  {
    if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v96, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v63, &v93);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v96);
      return 0;
    }
    a1[2] = v62;
  }
  uint64_t v64 = mlir::DictionaryAttr::get((uint64_t)&v92, "sym_name", 8uLL);
  uint64_t v91 = v64;
  if (!v64)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      uint64_t v94 = "expected key entry for sym_name in DictionaryAttr to set Properties.";
      uint64_t v95 = 68;
      unint64_t v66 = &v93;
      uint64_t v67 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v83 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v90 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v83, 24);
          uint64_t v67 = (char *)v97;
          unint64_t v66 = (uint64_t *)((char *)v97 + v90);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v83, 24);
          unint64_t v66 = &v93;
          uint64_t v67 = (char *)v97;
        }
      }
      char v68 = &v67[24 * v98];
      long long v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = v66[2];
      *(_OWORD *)char v68 = v69;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    uint64_t v70 = __p;
    if (__p)
    {
      uint64_t v71 = v104;
      uint64_t v72 = __p;
      if (v104 != __p)
      {
        do
          uint64_t v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        uint64_t v72 = __p;
      }
      int64_t v104 = v70;
      operator delete(v72);
    }
    uint64_t v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    uint64_t v73 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      uint64_t v75 = *--v73;
      uint64_t v74 = v75;
      *uint64_t v73 = 0;
      if (v75) {
        MEMORY[0x21667D390](v74, 0x1000C8077774924);
      }
    }
    while (v73 != v21);
    goto LABEL_101;
  }
  if (*(_UNKNOWN **)(*(void *)v64 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[3] = v64;
    return 1;
  }
  a3(v96, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &v91);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v96);
  return 0;
}

uint64_t mlir::pdl_interp::FuncOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v33[6] = *MEMORY[0x263EF8340];
  uint64_t v30 = a1;
  uint64_t v31 = v33;
  uint64_t v32 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"arg_attrs", 9, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    unsigned int v6 = v32;
  }
  uint64_t v7 = (uint64_t *)((char *)v31 + 16 * v6);
  uint64_t *v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"function_type", 13, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v13 = v32;
    }
    uint64_t v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"res_attrs", 9, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v19 = v32;
    }
    __int16 v20 = (uint64_t *)((char *)v31 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"sym_name", 8, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v25 = v32;
    }
    uint64_t v26 = (uint64_t *)((char *)v31 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  unint64_t v27 = v31;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v31 == v33) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (uint64_t *)v31, v8);
  unint64_t v27 = v31;
  if (v31 != v33) {
LABEL_20:
  }
    free(v27);
  return DictionaryAttr;
}

unint64_t mlir::pdl_interp::FuncOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v26 = v1;
    long long v29 = a1;
    uint64_t v2 = &unk_267770000;
    int v16 = v15;
    unint64_t v1 = v26;
    a1 = v29;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v1 = v26;
      a1 = v29;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v36 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v27 = v5;
    uint64_t v30 = a1;
    uint64_t v2 = &unk_267770000;
    int v19 = v18;
    unint64_t v5 = v27;
    a1 = v30;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v5 = v27;
      a1 = v30;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v35 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v28 = v8;
    uint64_t v31 = a1;
    uint64_t v2 = &unk_267770000;
    int v22 = v21;
    unint64_t v8 = v28;
    a1 = v31;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v8 = v28;
      a1 = v31;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v34 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v32 = v11;
    unint64_t v11 = v32;
    uint64_t v2 = &unk_267770000;
    if (v24)
    {
      unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v25 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v25;
      unint64_t v11 = v32;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v11) ^ HIDWORD(v11));
  unint64_t v33 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v36, (uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33);
}

uint64_t mlir::pdl_interp::FuncOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  if (__n == 8)
  {
    if (!memcmp(__s1, "sym_name", 8uLL)) {
      return a2[3];
    }
    return 0;
  }
  if (__n == 13)
  {
    if (!memcmp(__s1, "function_type", 0xDuLL)) {
      return a2[1];
    }
    return 0;
  }
  if (__n != 9) {
    return 0;
  }
  if (*__s1 == 0x727474615F677261 && *((unsigned char *)__s1 + 8) == 115) {
    return *a2;
  }
  if (memcmp(__s1, "res_attrs", 9uLL)) {
    return 0;
  }
  return a2[2];
}

uint64_t mlir::pdl_interp::FuncOp::setInherentAttr(uint64_t result, void *__s1, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  switch(a3)
  {
    case 8:
      uint64_t result = memcmp(__s1, "sym_name", 8uLL);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          v5[3] = v7;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 13:
      uint64_t result = memcmp(__s1, "function_type", 0xDuLL);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 9:
      if (*__s1 == 0x727474615F677261 && *((unsigned char *)__s1 + 8) == 115)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          *(void *)uint64_t result = v9;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "res_attrs", 9uLL);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
              uint64_t v10 = a4;
            }
            else {
              uint64_t v10 = 0;
            }
            v5[2] = v10;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
  }
  return result;
}

BOOL mlir::pdl_interp::FuncOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v8, (void **)"arg_attrs", (const char *)9, a3, a4))
  {
    uint64_t v9 = (void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps2(v9, (void **)"function_type", (const char *)0xD, (void (*)(void ***__return_ptr, uint64_t))a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v10, (void **)"res_attrs", (const char *)9, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v11, (void **)"sym_name", (const char *)8, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::pdl_interp::FuncOp::verifyInvariantsImpl(mlir::pdl_interp::FuncOp *this)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (void **)v3[1];
  if (v4)
  {
    uint64_t v5 = v3[3];
    if (v5)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[2];
      uint64_t v58 = v2;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v5, (void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v58))return 0; {
      uint64_t v58 = *(void *)this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps2(v4, (void **)"function_type", (const char *)0xD, (void (*)(void ***__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps8(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v58))return 0; {
      uint64_t v58 = *(void *)this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v6, (void **)"arg_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v58))return 0; {
      uint64_t v58 = *(void *)this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v7, (void **)"res_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v58))return 0; {
      uint64_t v8 = *(void *)this;
      }
      unint64_t v9 = *(unsigned int *)(*(void *)this + 44);
      if ((v9 & 0x7FFFFF) != 0)
      {
        unint64_t v10 = ((v8 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v8 + 40);
        if (*(void *)(v10 + 8) == v10)
        {
LABEL_46:
          v53[0] = (void **)"region #";
          __int16 v54 = 259;
          mlir::Operation::emitOpError(v8, v53, (uint64_t)&v58);
          if (v58)
          {
            LODWORD(v51[0]) = 5;
            v51[1] = 0;
            unint64_t v26 = v51;
            unint64_t v27 = (char *)v60;
            if (v61 >= v62)
            {
              unint64_t v45 = v61 + 1;
              if (v60 <= v51 && (char *)v60 + 24 * v61 > (char *)v51)
              {
                int64_t v47 = (char *)v51 - (unsigned char *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
                unint64_t v27 = (char *)v60;
                unint64_t v26 = (void ***)((char *)v60 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
                unint64_t v26 = v51;
                unint64_t v27 = (char *)v60;
              }
            }
            unint64_t v28 = &v27[24 * v61];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = v26[2];
            *(_OWORD *)unint64_t v28 = v29;
            ++v61;
            BOOL v30 = v58 == 0;
          }
          else
          {
            BOOL v30 = 1;
          }
          __int16 v50 = 1283;
          v49[0] = " ('";
          void v49[2] = "body";
          v49[3] = 4;
          v51[0] = (void **)v49;
          uint64_t v51[2] = (void **)"') ";
          __int16 v52 = 770;
          if (!v30)
          {
            mlir::Diagnostic::operator<<((uint64_t)&v59, v51);
            if (v58)
            {
              int v55 = 3;
              unsigned int v56 = "failed to verify constraint: region with at least 1 blocks";
              uint64_t v57 = 58;
              uint64_t v31 = &v55;
              unint64_t v32 = (char *)v60;
              if (v61 >= v62)
              {
                unint64_t v46 = v61 + 1;
                if (v60 <= &v55 && (char *)v60 + 24 * v61 > (char *)&v55)
                {
                  int64_t v48 = (char *)&v55 - (unsigned char *)v60;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
                  unint64_t v32 = (char *)v60;
                  uint64_t v31 = (int *)((char *)v60 + v48);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
                  uint64_t v31 = &v55;
                  unint64_t v32 = (char *)v60;
                }
              }
              unint64_t v33 = &v32[24 * v61];
              long long v34 = *(_OWORD *)v31;
              *((void *)v33 + 2) = *((void *)v31 + 2);
              *(_OWORD *)unint64_t v33 = v34;
              ++v61;
            }
          }
          char v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          if (v58) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          }
          if (v68)
          {
            unint64_t v36 = __p;
            if (__p)
            {
              uint64_t v37 = v67;
              uint64_t v38 = __p;
              if (v67 != __p)
              {
                do
                  uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
                while (v37 != v36);
                uint64_t v38 = __p;
              }
              uint64_t v67 = v36;
              operator delete(v38);
            }
            unint64_t v39 = v64;
            if (v64)
            {
              unint64_t v40 = v65;
              long long v41 = v64;
              if (v65 != v64)
              {
                do
                {
                  uint64_t v43 = *--v40;
                  uint64_t v42 = v43;
                  void *v40 = 0;
                  if (v43) {
                    MEMORY[0x21667D390](v42, 0x1000C8077774924);
                  }
                }
                while (v40 != v39);
                long long v41 = v64;
              }
              uint64_t v65 = v39;
              operator delete(v41);
            }
            if (v60 != v63) {
              free(v60);
            }
          }
          return v35 != 0;
        }
      }
      else if (!MEMORY[8])
      {
        goto LABEL_46;
      }
      return 1;
    }
    v53[0] = (void **)"requires attribute 'sym_name'";
    __int16 v54 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v53, (uint64_t)&v58);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
    if (v58) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
    }
    if (v68)
    {
      unint64_t v20 = __p;
      if (__p)
      {
        int v21 = v67;
        int v22 = __p;
        if (v67 != __p)
        {
          do
            int v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          int v22 = __p;
        }
        uint64_t v67 = v20;
        operator delete(v22);
      }
      int v15 = v64;
      if (!v64) {
        goto LABEL_43;
      }
      unint64_t v23 = v65;
      unint64_t v17 = v64;
      if (v65 == v64)
      {
LABEL_42:
        uint64_t v65 = v15;
        operator delete(v17);
LABEL_43:
        if (v60 != v63) {
          free(v60);
        }
        return v11;
      }
      do
      {
        uint64_t v25 = *--v23;
        uint64_t v24 = v25;
        *unint64_t v23 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v23 != v15);
LABEL_41:
      unint64_t v17 = v64;
      goto LABEL_42;
    }
  }
  else
  {
    v53[0] = (void **)"requires attribute 'function_type'";
    __int16 v54 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v53, (uint64_t)&v58);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
    if (v58) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
    }
    if (v68)
    {
      unint64_t v12 = __p;
      if (__p)
      {
        unint64_t v13 = v67;
        uint64_t v14 = __p;
        if (v67 != __p)
        {
          do
            unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v67 = v12;
        operator delete(v14);
      }
      int v15 = v64;
      if (!v64) {
        goto LABEL_43;
      }
      int v16 = v65;
      unint64_t v17 = v64;
      if (v65 == v64) {
        goto LABEL_42;
      }
      do
      {
        uint64_t v19 = *--v16;
        uint64_t v18 = v19;
        void *v16 = 0;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x1000C8077774924);
        }
      }
      while (v16 != v15);
      goto LABEL_41;
    }
  }
  return v11;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::GetAttributeOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  __int16 v14 = 261;
  v13[0] = a5;
  v13[1] = a6;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v13);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(a2) = StringAttr;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetAttributeOp::verifyInvariantsImpl(mlir::pdl_interp::GetAttributeOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v16 = (void **)"requires attribute 'name'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        unint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        int v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::pdl_interp::GetAttributeOp::parse(uint64_t a1, uint64_t a2)
{
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  memset(v22, 0, 24);
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v19, v6)) {
    return 0;
  }
  if (v19)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v19;
  }
  __int16 v21 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "of", 2, v20))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v20[0] = a1;
  v20[1] = &v18;
  uint64_t v20[2] = a2;
  uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
  if (v9)
  {
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v9, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v20))return 0; {
  }
    }
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  uint64_t v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
  uint64_t v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  if (v16 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v16) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v22, v15, a2 + 16) != 0;
}

void mlir::pdl_interp::GetAttributeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v19[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  __int16 v17 = v19;
  v19[0] = "name";
  v19[1] = 4;
  uint64_t v18 = 0x200000001;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v17, v18);
  if (v17 != v19) {
    free(v17);
  }
}

void mlir::pdl_interp::GetAttributeTypeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v8 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v8, 1);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetAttributeTypeOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v4);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v7 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v8 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v7);
  uint64_t v9 = mlir::StorageUniquer::getSingletonImpl(v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v10) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, v9, a2 + 16) != 0;
}

void mlir::pdl_interp::GetAttributeTypeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v15 = v17;
  uint64_t v16 = 0x200000000;
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v15, v16);
  if (v15 != v17) {
    free(v15);
  }
}

uint64_t mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v54[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v54) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
      return 1;
    }
  }
  __int16 v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    int v51 = 3;
    __int16 v52 = " #";
    uint64_t v53 = 2;
    uint64_t v11 = &v51;
    __int16 v12 = (char *)v55;
    if (v56 >= v57)
    {
      unint64_t v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        int64_t v45 = (char *)&v51 - (unsigned char *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        __int16 v12 = (char *)v55;
        uint64_t v11 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v11 = &v51;
        __int16 v12 = (char *)v55;
      }
    }
    uint64_t v13 = &v12[24 * v56];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v56;
    if (v54[0])
    {
      int v51 = 5;
      __int16 v52 = (const char *)a5;
      uint64_t v16 = &v51;
      __int16 v17 = (char *)v55;
      if (v15 >= v57)
      {
        unint64_t v40 = v15 + 1;
        BOOL v41 = (char *)v55 + 24 * v15 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          __int16 v17 = (char *)v55;
          uint64_t v16 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          uint64_t v16 = &v51;
          __int16 v17 = (char *)v55;
        }
      }
      uint64_t v18 = &v17[24 * v56];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v56;
      if (v54[0])
      {
        int v51 = 3;
        uint64_t v53 = 77;
        __int16 v21 = &v51;
        int v22 = (char *)v55;
        if (v20 >= v57)
        {
          unint64_t v42 = v20 + 1;
          BOOL v43 = (char *)v55 + 24 * v20 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            int64_t v47 = (char *)&v51 - (unsigned char *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            int v22 = (char *)v55;
            __int16 v21 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            __int16 v21 = &v51;
            int v22 = (char *)v55;
          }
        }
        unint64_t v23 = &v22[24 * v56];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)unint64_t v23 = v24;
        ++v56;
        if (v54[0])
        {
          char v25 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          uint64_t v26 = (char *)v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              int64_t v48 = (char *)&v51 - (unsigned char *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v26 = (char *)v55;
              char v25 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              char v25 = &v51;
              uint64_t v26 = (char *)v55;
            }
          }
          unint64_t v27 = &v26[24 * v56];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)unint64_t v27 = v28;
          ++v56;
        }
      }
    }
  }
  uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  }
  if (v63)
  {
    BOOL v30 = __p;
    if (__p)
    {
      uint64_t v31 = v62;
      unint64_t v32 = __p;
      if (v62 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      unsigned int v62 = v30;
      operator delete(v32);
    }
    unint64_t v33 = v59;
    if (v59)
    {
      long long v34 = v60;
      char v35 = v59;
      if (v60 != v59)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *long long v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        char v35 = v59;
      }
      uint64_t v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58) {
      free(v55);
    }
  }
  return v29;
}

BOOL mlir::pdl_interp::GetDefiningOpOp::parse(uint64_t a1, uint64_t a2)
{
  void v15[4] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  v11[0] = (uint64_t)v15;
  v11[1] = 1;
  uint64_t v14 = 0;
  v10[0] = &v14;
  v10[1] = 1;
  __int16 v13 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v12[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v12)) {
    return 0;
  }
  uint64_t v14 = v12[0];
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v5 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v5);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v10, v4, a2 + 16) != 0;
}

void mlir::pdl_interp::GetDefiningOpOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  __int16 v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    unsigned char *v13 = 58;
    ++*((void *)v12 + 4);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  __int16 v21 = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v16 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v16);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v19, v21, v22);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::GetOperandOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v12 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, 0x20u);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a5);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(a2) = IntegerAttr;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetOperandOp::verifyInvariantsImpl(mlir::pdl_interp::GetOperandOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v3, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (void **)"requires attribute 'index'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        uint64_t v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        long long v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::pdl_interp::GetOperandOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v21, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType)) {
    return 0;
  }
  if (v18)
  {
    uint64_t v6 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v6 = v18;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "of", 2, v19))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    return 0;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v19[0] = a1;
  v19[1] = &v17;
  uint64_t v19[2] = a2;
  uint64_t v8 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v7 + 96));
  if (v8)
  {
    if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v8, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0; {
  }
    }
  uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  uint64_t v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
  uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, v14, a2 + 16) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::GetOperandsOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a5 & 0xFF00000000) != 0)
  {
    I32uint64_t IntegerAttr = mlir::Builder::getI32IntegerAttr(a1, a5);
    uint64_t v10 = a4;
    mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
    if (I32IntegerAttr) {
      *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(a2) = I32IntegerAttr;
    }
  }
  else
  {
    uint64_t v10 = a4;
    mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetOperandsOp::verifyInvariantsImpl(mlir::pdl_interp::GetOperandsOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v7 = v2;
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v3, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::pdl_interp::GetOperandsOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  memset(v18, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 424))(a1, &v14, IntegerType);
  if (v6 >= 0x100u)
  {
    if (!(_BYTE)v6) {
      return 0;
    }
    if (v14)
    {
      uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(a2);
      void *v7 = v14;
    }
  }
  __int16 v16 = 257;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "of", 2, v15))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v18, 1))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        v15[0] = 0;
        if (mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v15))
        {
          uint64_t __src = v15[0];
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v8 = *(void *)(a2 + 8);
            v15[0] = a1;
            v15[1] = (uint64_t)&v13;
            uint64_t v15[2] = a2;
            uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
            if (!v9
              || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v9, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))
            {
              uint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
              uint64_t v11 = mlir::Builder::getType<mlir::pdl::OperationType>(v10);
              mlir::OperationState::addTypes(a2, &__src, 1);
              return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v11, a2 + 16) != 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

void mlir::pdl_interp::GetOperandsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v27[4] = *MEMORY[0x263EF8340];
  if (*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      *uint64_t v5 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  }
  unsigned __int16 v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 32;
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *uint64_t v15 = 58;
    ++*((void *)v14 + 4);
  }
  __int16 v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v18 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  char v25 = v27;
  v27[0] = "index";
  v27[1] = 5;
  uint64_t v26 = 0x200000001;
  __int16 v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v25, v26);
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::GetResultOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v12 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, 0x20u);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a5);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(a2) = IntegerAttr;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetResultOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v21, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType)) {
    return 0;
  }
  if (v18)
  {
    unsigned __int16 v6 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(a2);
    *unsigned __int16 v6 = v18;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "of", 2, v19))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    return 0;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v19[0] = a1;
  v19[1] = &v17;
  uint64_t v19[2] = a2;
  uint64_t v8 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v7 + 96));
  if (v8)
  {
    if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v8, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0; {
  }
    }
  uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  uint64_t v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
  uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, v14, a2 + 16) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::GetResultsOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a5 & 0xFF00000000) != 0)
  {
    I32uint64_t IntegerAttr = mlir::Builder::getI32IntegerAttr(a1, a5);
    uint64_t v10 = a4;
    mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
    if (I32IntegerAttr) {
      *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(a2) = I32IntegerAttr;
    }
  }
  else
  {
    uint64_t v10 = a4;
    mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::pdl_interp::GetResultsOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  uint64_t v7 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v9 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v9, 1);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetResultsOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  memset(v18, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v4, 0x20u);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 424))(a1, &v14, IntegerType);
  if (v6 >= 0x100u)
  {
    if (!(_BYTE)v6) {
      return 0;
    }
    if (v14)
    {
      uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(a2);
      void *v7 = v14;
    }
  }
  __int16 v16 = 257;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "of", 2, v15))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v18, 1))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        v15[0] = 0;
        if (mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v15))
        {
          uint64_t __src = v15[0];
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v8 = *(void *)(a2 + 8);
            v15[0] = a1;
            v15[1] = (uint64_t)&v13;
            uint64_t v15[2] = a2;
            uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
            if (!v9
              || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v9, (void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))
            {
              uint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
              uint64_t v11 = mlir::Builder::getType<mlir::pdl::OperationType>(v10);
              mlir::OperationState::addTypes(a2, &__src, 1);
              return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v11, a2 + 16) != 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

void mlir::pdl_interp::GetUsersOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v7 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v9 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v9, 1);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::pdl_interp::GetUsersOp::verifyInvariantsImpl(mlir::pdl_interp::GetUsersOp *this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (!mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v49[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v49) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id) {
      return 1;
    }
  }
  __int16 v45 = 261;
  v44[0] = (void **)"result";
  v44[1] = (void **)6;
  mlir::Operation::emitOpError(v4, v44, (uint64_t)v49);
  if (v49[0])
  {
    int v46 = 3;
    int64_t v47 = " #";
    uint64_t v48 = 2;
    unsigned __int16 v6 = &v46;
    uint64_t v7 = (char *)v50;
    if (v51 >= v52)
    {
      unint64_t v34 = v51 + 1;
      if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
      {
        int64_t v40 = (char *)&v46 - (unsigned char *)v50;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        uint64_t v7 = (char *)v50;
        unsigned __int16 v6 = (int *)((char *)v50 + v40);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        unsigned __int16 v6 = &v46;
        uint64_t v7 = (char *)v50;
      }
    }
    uint64_t v8 = &v7[24 * v51];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    uint64_t v10 = ++v51;
    if (v49[0])
    {
      int v46 = 5;
      int64_t v47 = 0;
      uint64_t v11 = &v46;
      uint64_t v12 = (char *)v50;
      if (v10 >= v52)
      {
        unint64_t v35 = v10 + 1;
        BOOL v36 = (char *)v50 + 24 * v10 > (char *)&v46;
        if (v50 <= &v46 && v36)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          uint64_t v12 = (char *)v50;
          uint64_t v11 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          uint64_t v11 = &v46;
          uint64_t v12 = (char *)v50;
        }
      }
      uint64_t v13 = &v12[24 * v51];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v15 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        uint64_t v48 = 71;
        __int16 v16 = &v46;
        uint64_t v17 = (char *)v50;
        if (v15 >= v52)
        {
          unint64_t v37 = v15 + 1;
          BOOL v38 = (char *)v50 + 24 * v15 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            uint64_t v17 = (char *)v50;
            __int16 v16 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            __int16 v16 = &v46;
            uint64_t v17 = (char *)v50;
          }
        }
        uint64_t v18 = &v17[24 * v51];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        ++v51;
        if (v49[0])
        {
          __int16 v20 = &v46;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v46, v5);
          __int16 v21 = (char *)v50;
          if (v51 >= v52)
          {
            unint64_t v39 = v51 + 1;
            if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              __int16 v21 = (char *)v50;
              __int16 v20 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              __int16 v20 = &v46;
              __int16 v21 = (char *)v50;
            }
          }
          uint64_t v22 = &v21[24 * v51];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          ++v51;
        }
      }
    }
  }
  char v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
  if (v49[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
  }
  if (v58)
  {
    char v25 = __p;
    if (__p)
    {
      uint64_t v26 = v57;
      unint64_t v27 = __p;
      if (v57 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        unint64_t v27 = __p;
      }
      unsigned int v57 = v25;
      operator delete(v27);
    }
    long long v28 = v54;
    if (v54)
    {
      uint64_t v29 = v55;
      BOOL v30 = v54;
      if (v55 != v54)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        BOOL v30 = v54;
      }
      int v55 = v28;
      operator delete(v30);
    }
    if (v50 != v53) {
      free(v50);
    }
  }
  return v24 != 0;
}

BOOL mlir::pdl_interp::GetUsersOp::parse(uint64_t a1, uint64_t a2)
{
  void v16[4] = *MEMORY[0x263EF8340];
  memset(v16, 0, 24);
  v12[0] = (uint64_t)v16;
  v12[1] = 1;
  uint64_t v15 = 0;
  v11[0] = &v15;
  v11[1] = 1;
  __int16 v14 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v16, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v13[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v13)) {
    return 0;
  }
  uint64_t v15 = v13[0];
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  unint64_t v5 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v5);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v8 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v12, v11, v4, a2 + 16) != 0;
}

void mlir::pdl_interp::GetValueTypeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*a1);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v8 = SingletonImpl;
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    uint64_t v8 = mlir::pdl::RangeType::get(SingletonImpl);
  }
  uint64_t v10 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v10, 1);
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::pdl_interp::GetValueTypeOp::verifyInvariantsImpl(mlir::pdl_interp::GetValueTypeOp *this)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (!mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  unint64_t v4 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *(void **)(*(void *)v4 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
    goto LABEL_81;
  }
  uint64_t v6 = *(void *)this;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v63[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      goto LABEL_81;
    }
  }
  __int16 v59 = 261;
  v58[0] = (void **)"result";
  v58[1] = (void **)6;
  mlir::Operation::emitOpError(v6, v58, (uint64_t)v63);
  if (v63[0])
  {
    int v60 = 3;
    unsigned int v61 = " #";
    uint64_t v62 = 2;
    uint64_t v7 = &v60;
    uint64_t v8 = (char *)v64;
    if (v65 >= v66)
    {
      unint64_t v48 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        int64_t v54 = (char *)&v60 - (unsigned char *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v48, 24);
        uint64_t v8 = (char *)v64;
        uint64_t v7 = (int *)((char *)v64 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v48, 24);
        uint64_t v7 = &v60;
        uint64_t v8 = (char *)v64;
      }
    }
    uint64_t v9 = &v8[24 * v65];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v65;
    if (v63[0])
    {
      int v60 = 5;
      unsigned int v61 = 0;
      uint64_t v12 = &v60;
      uint64_t v13 = (char *)v64;
      if (v11 >= v66)
      {
        unint64_t v49 = v11 + 1;
        BOOL v50 = (char *)v64 + 24 * v11 > (char *)&v60;
        if (v64 <= &v60 && v50)
        {
          int64_t v55 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
          uint64_t v13 = (char *)v64;
          uint64_t v12 = (int *)((char *)v64 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
          uint64_t v12 = &v60;
          uint64_t v13 = (char *)v64;
        }
      }
      __int16 v14 = &v13[24 * v65];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)__int16 v14 = v15;
      uint64_t v16 = ++v65;
      if (v63[0])
      {
        int v60 = 3;
        uint64_t v62 = 75;
        uint64_t v17 = &v60;
        uint64_t v18 = (char *)v64;
        if (v16 >= v66)
        {
          unint64_t v51 = v16 + 1;
          BOOL v52 = (char *)v64 + 24 * v16 > (char *)&v60;
          if (v64 <= &v60 && v52)
          {
            int64_t v56 = (char *)&v60 - (unsigned char *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
            uint64_t v18 = (char *)v64;
            uint64_t v17 = (int *)((char *)v64 + v56);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
            uint64_t v17 = &v60;
            uint64_t v18 = (char *)v64;
          }
        }
        long long v19 = &v18[24 * v65];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)long long v19 = v20;
        ++v65;
        if (v63[0])
        {
          __int16 v21 = &v60;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, v4);
          uint64_t v22 = (char *)v64;
          if (v65 >= v66)
          {
            unint64_t v53 = v65 + 1;
            if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
            {
              int64_t v57 = (char *)&v60 - (unsigned char *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
              uint64_t v22 = (char *)v64;
              __int16 v21 = (int *)((char *)v64 + v57);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
              __int16 v21 = &v60;
              uint64_t v22 = (char *)v64;
            }
          }
          long long v23 = &v22[24 * v65];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)long long v23 = v24;
          ++v65;
        }
      }
    }
  }
  char v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
  if (v63[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
  }
  if (v72)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      unint64_t v27 = v71;
      long long v28 = __p;
      if (v71 != __p)
      {
        do
          unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        long long v28 = __p;
      }
      uint64_t v71 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v68;
    if (v68)
    {
      BOOL v30 = v69;
      uint64_t v31 = v68;
      if (v69 != v68)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v68;
      }
      uint64_t v69 = v29;
      operator delete(v31);
    }
    if (v64 != v67) {
      free(v64);
    }
  }
  if (!v25) {
    return 0;
  }
LABEL_81:
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v34 = *(void *)this - 16;
  }
  else {
    uint64_t v34 = 0;
  }
  v63[0] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v63);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  if (*(_UNKNOWN **)(*(void *)v63[0] + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    uint64_t SingletonImpl = mlir::pdl::RangeType::get(SingletonImpl);
  }
  if (SingletonImpl == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  __int16 v59 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v58, (uint64_t)v63);
  uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
  if (v63[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
  }
  if (v72)
  {
    unint64_t v39 = __p;
    if (__p)
    {
      int64_t v40 = v71;
      int64_t v41 = __p;
      if (v71 != __p)
      {
        do
          int64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        int64_t v41 = __p;
      }
      uint64_t v71 = v39;
      operator delete(v41);
    }
    int64_t v42 = v68;
    if (v68)
    {
      int64_t v43 = v69;
      unint64_t v44 = v68;
      if (v69 != v68)
      {
        do
        {
          uint64_t v46 = *--v43;
          uint64_t v45 = v46;
          *int64_t v43 = 0;
          if (v46) {
            MEMORY[0x21667D390](v45, 0x1000C8077774924);
          }
        }
        while (v43 != v42);
        unint64_t v44 = v68;
      }
      uint64_t v69 = v42;
      operator delete(v44);
    }
    if (v64 != v67) {
      free(v64);
    }
  }
  return v38;
}

BOOL mlir::pdl_interp::GetValueTypeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  memset(v21, 0, 24);
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v19[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, v19)) {
    return 0;
  }
  uint64_t v4 = v19[0];
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v18 = v4;
  unint64_t v5 = *(void **)(*(void *)v4 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
    && (v19[0] = v4,
        *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id))
  {
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    if (v11 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v11) = v4;
    ++*(_DWORD *)(a2 + 72);
    v19[0] = v4;
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v19);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    uint64_t v15 = SingletonImpl;
    if (*(_UNKNOWN **)(*(void *)v19[0] + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
      uint64_t v15 = mlir::pdl::RangeType::get(SingletonImpl);
    }
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, v15, a2 + 16) != 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v17 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 24))(v19, a1, v6, v16);
    uint64_t v8 = mlir::InFlightDiagnostic::append<mlir::Type &>(v7, &v18);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v8);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v19);
  }
  return v9;
}

void mlir::pdl_interp::GetValueTypeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v25[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    unsigned char *v13 = 58;
    ++*((void *)v12 + 4);
  }
  __int16 v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v16 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v18 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v18);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v18 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v23, v24);
  if (v23 != v25) {
    free(v23);
  }
}

void mlir::pdl_interp::IsNotNullOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  uint64_t v8 = *(unsigned int *)(a2 + 208);
  if (v8 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v8) = a4;
  unsigned int v9 = *(_DWORD *)(a2 + 212);
  uint64_t v10 = (*(_DWORD *)(a2 + 208) + 1);
  *(_DWORD *)(a2 + 208) = v10;
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v10) = a5;
  ++*(_DWORD *)(a2 + 208);
}

BOOL mlir::pdl_interp::IsNotNullOp::parse(uint64_t a1, unsigned int *a2)
{
  uint64_t v18[4] = *MEMORY[0x263EF8340];
  memset(v18, 0, 24);
  v12[0] = (uint64_t)v18;
  v12[1] = 1;
  uint64_t v17 = 0;
  v11[0] = &v17;
  v11[1] = 1;
  __int16 v14 = v16;
  uint64_t v15 = 0x200000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v18, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
    {
      uint64_t v10 = 0;
      if (mlir::AsmParser::parseType<mlir::pdl::PDLType>(a1, &v10))
      {
        uint64_t v17 = v10;
        (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
        if ((*(unsigned __int8 (**)(uint64_t, unsigned int *))(*(void *)a1 + 456))(a1, a2 + 28))
        {
          if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
          {
            uint64_t v10 = 0;
            unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, &v10);
            if (v5 < 0x100u) {
              goto LABEL_7;
            }
            if ((_BYTE)v5)
            {
              llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v14, &v10);
              while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
              {
                if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, &v10)) {
                  goto LABEL_16;
                }
                int v8 = v15;
                if (v15 >= HIDWORD(v15))
                {
                  llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v14, &v10);
                }
                else
                {
                  *((void *)v14 + v15) = v10;
                  LODWORD(v15) = v8 + 1;
                }
              }
LABEL_7:
              mlir::BlockRange::BlockRange(v13, (uint64_t)v14, v15);
              mlir::OperationState::addSuccessors(a2, v13[0], v13[1]);
              BOOL v6 = mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v12, v11, v4, (uint64_t)(a2 + 4)) != 0;
              uint64_t v7 = v14;
              if (v14 == v16) {
                return v6;
              }
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
LABEL_16:
  BOOL v6 = 0;
  uint64_t v7 = v14;
  if (v14 != v16) {
LABEL_17:
  }
    free(v7);
  return v6;
}

void mlir::pdl_interp::IsNotNullOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  BOOL v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  int v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    unsigned char *v9 = 58;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v26, v27);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 15917;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "->", 2uLL);
  }
  __int16 v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, *this);
  uint64_t v22 = (uint64_t)AttrDictionary;
  uint64_t v23 = v25;
  unint64_t AttrDictionary = ", ";
  uint64_t v25 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v22, 0, v22, v23, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t mlir::pdl_interp::RecordMatchOp::getODSOperands(mlir::pdl_interp::RecordMatchOp *this, unsigned int a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v3 = *(void *)this + 16 * ((v2 >> 23) & 1) + 64;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a2 >= 8)
  {
    uint64_t v4 = a2 & 0xFFFFFFF8;
    uint64_t v7 = (int32x4_t *)(v3 + 48);
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v4;
    int32x4_t v10 = 0uLL;
    do
    {
      int32x4_t v8 = vaddq_s32(v7[-1], v8);
      int32x4_t v10 = vaddq_s32(*v7, v10);
      v7 += 2;
      v9 -= 8;
    }
    while (v9);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v4 == a2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
  }
  uint64_t v11 = a2 - v4;
  uint64_t v12 = (int *)(v3 + 4 * v4 + 32);
  do
  {
    int v13 = *v12++;
    v5 += v13;
    --v11;
  }
  while (v11);
LABEL_13:
  uint64_t v6 = v5;
LABEL_14:
  if ((v2 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v6;
  }
  else {
    return 32 * v6;
  }
}

uint64_t mlir::pdl_interp::RecordMatchOp::getInputs(mlir::pdl_interp::RecordMatchOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

uint64_t mlir::pdl_interp::RecordMatchOp::getMatchedOps(mlir::pdl_interp::RecordMatchOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 32);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

BOOL mlir::pdl_interp::RecordMatchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v110 = v6;
  if (!v6)
  {
    a3(v114, a4);
    if (v114[0])
    {
      LODWORD(v111) = 3;
      unint64_t v112 = "expected DictionaryAttr to set properties";
      uint64_t v113 = 41;
      uint64_t v26 = &v111;
      uint64_t v27 = (char *)v115;
      if (v116 >= v117)
      {
        unint64_t v92 = v116 + 1;
        if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
        {
          int64_t v101 = (char *)&v111 - (unsigned char *)v115;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v92, 24);
          uint64_t v27 = (char *)v115;
          uint64_t v26 = (uint64_t *)((char *)v115 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v92, 24);
          uint64_t v26 = &v111;
          uint64_t v27 = (char *)v115;
        }
      }
      long long v28 = &v27[24 * v116];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)long long v28 = v29;
      ++v116;
      if (v114[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
      }
    }
    if (!v123) {
      return 0;
    }
    BOOL v30 = __p;
    if (__p)
    {
      uint64_t v31 = v122;
      uint64_t v32 = __p;
      if (v122 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      __int16 v122 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v119;
    if (!v119) {
      goto LABEL_116;
    }
    uint64_t v33 = v120;
    uint64_t v23 = v119;
    if (v120 == v119)
    {
LABEL_115:
      int v120 = v21;
      operator delete(v23);
LABEL_116:
      if (v115 != v118) {
        free(v115);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_114:
    uint64_t v23 = v119;
    goto LABEL_115;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v110, "benefit", 7uLL);
  if (!v8)
  {
    a3(v114, a4);
    if (v114[0])
    {
      LODWORD(v111) = 3;
      unint64_t v112 = "expected key entry for benefit in DictionaryAttr to set Properties.";
      uint64_t v113 = 67;
      BOOL v36 = &v111;
      unint64_t v37 = (char *)v115;
      if (v116 >= v117)
      {
        unint64_t v94 = v116 + 1;
        if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
        {
          int64_t v103 = (char *)&v111 - (unsigned char *)v115;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v94, 24);
          unint64_t v37 = (char *)v115;
          BOOL v36 = (uint64_t *)((char *)v115 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v94, 24);
          BOOL v36 = &v111;
          unint64_t v37 = (char *)v115;
        }
      }
      uint64_t v38 = &v37[24 * v116];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)uint64_t v38 = v39;
      ++v116;
      if (v114[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
      }
    }
    if (!v123) {
      return 0;
    }
    int64_t v40 = __p;
    if (__p)
    {
      int64_t v41 = v122;
      int64_t v42 = __p;
      if (v122 != __p)
      {
        do
          int64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int64_t v42 = __p;
      }
      __int16 v122 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v119;
    if (!v119) {
      goto LABEL_116;
    }
    int64_t v43 = v120;
    uint64_t v23 = v119;
    if (v120 == v119) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *int64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_114;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v114, a4);
    if (v114[0])
    {
      LODWORD(v111) = 3;
      uint64_t v113 = 52;
      int32x4_t v10 = &v111;
      uint64_t v11 = (char *)v115;
      if (v116 >= v117)
      {
        unint64_t v93 = v116 + 1;
        if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
        {
          int64_t v102 = (char *)&v111 - (unsigned char *)v115;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v93, 24);
          uint64_t v11 = (char *)v115;
          int32x4_t v10 = (uint64_t *)((char *)v115 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v93, 24);
          int32x4_t v10 = &v111;
          uint64_t v11 = (char *)v115;
        }
      }
      uint64_t v12 = &v11[24 * v116];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = v10[2];
      *(_OWORD *)uint64_t v12 = v13;
      ++v116;
      if (v114[0])
      {
        __int16 v14 = &v111;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v111, v9);
        uint64_t v15 = (char *)v115;
        if (v116 >= v117)
        {
          unint64_t v95 = v116 + 1;
          if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
          {
            int64_t v104 = (char *)&v111 - (unsigned char *)v115;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v95, 24);
            uint64_t v15 = (char *)v115;
            __int16 v14 = (uint64_t *)((char *)v115 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v95, 24);
            __int16 v14 = &v111;
            uint64_t v15 = (char *)v115;
          }
        }
        uint64_t v16 = &v15[24 * v116];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)uint64_t v16 = v17;
        ++v116;
        if (v114[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
        }
      }
    }
    if (!v123) {
      return 0;
    }
    uint64_t v18 = __p;
    if (__p)
    {
      long long v19 = v122;
      __int16 v20 = __p;
      if (v122 != __p)
      {
        do
          long long v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        __int16 v20 = __p;
      }
      __int16 v122 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v119;
    if (!v119) {
      goto LABEL_116;
    }
    uint64_t v22 = v120;
    uint64_t v23 = v119;
    if (v120 == v119) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
    goto LABEL_114;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v110, "generatedOps", 0xCuLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v114, a4);
      if (v114[0])
      {
        LODWORD(v111) = 3;
        uint64_t v113 = 57;
        unint64_t v48 = &v111;
        unint64_t v49 = (char *)v115;
        if (v116 >= v117)
        {
          unint64_t v96 = v116 + 1;
          if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
          {
            int64_t v105 = (char *)&v111 - (unsigned char *)v115;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v96, 24);
            unint64_t v49 = (char *)v115;
            unint64_t v48 = (uint64_t *)((char *)v115 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v96, 24);
            unint64_t v48 = &v111;
            unint64_t v49 = (char *)v115;
          }
        }
        BOOL v50 = &v49[24 * v116];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = v48[2];
        *(_OWORD *)BOOL v50 = v51;
        ++v116;
        if (v114[0])
        {
          BOOL v52 = &v111;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v111, v47);
          unint64_t v53 = (char *)v115;
          if (v116 >= v117)
          {
            unint64_t v97 = v116 + 1;
            if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
            {
              int64_t v106 = (char *)&v111 - (unsigned char *)v115;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v97, 24);
              unint64_t v53 = (char *)v115;
              BOOL v52 = (uint64_t *)((char *)v115 + v106);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v97, 24);
              BOOL v52 = &v111;
              unint64_t v53 = (char *)v115;
            }
          }
          int64_t v54 = &v53[24 * v116];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = v52[2];
          *(_OWORD *)int64_t v54 = v55;
          ++v116;
          if (v114[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
          }
        }
      }
      if (!v123) {
        return 0;
      }
      int64_t v56 = __p;
      if (__p)
      {
        int64_t v57 = v122;
        char v58 = __p;
        if (v122 != __p)
        {
          do
            int64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          char v58 = __p;
        }
        __int16 v122 = v56;
        operator delete(v58);
      }
      uint64_t v21 = v119;
      if (!v119) {
        goto LABEL_116;
      }
      __int16 v59 = v120;
      uint64_t v23 = v119;
      if (v120 == v119) {
        goto LABEL_115;
      }
      do
      {
        uint64_t v61 = *--v59;
        uint64_t v60 = v61;
        *__int16 v59 = 0;
        if (v61) {
          MEMORY[0x21667D390](v60, 0x1000C8077774924);
        }
      }
      while (v59 != v21);
      goto LABEL_114;
    }
    a1[1] = v46;
  }
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v110, "rewriter", 8uLL);
  if (!v62)
  {
    a3(v114, a4);
    if (v114[0])
    {
      LODWORD(v111) = 3;
      unint64_t v112 = "expected key entry for rewriter in DictionaryAttr to set Properties.";
      uint64_t v113 = 68;
      unint64_t v78 = &v111;
      unint64_t v79 = (char *)v115;
      if (v116 >= v117)
      {
        unint64_t v99 = v116 + 1;
        if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
        {
          int64_t v108 = (char *)&v111 - (unsigned char *)v115;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v99, 24);
          unint64_t v79 = (char *)v115;
          unint64_t v78 = (uint64_t *)((char *)v115 + v108);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v99, 24);
          unint64_t v78 = &v111;
          unint64_t v79 = (char *)v115;
        }
      }
      unint64_t v80 = &v79[24 * v116];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = v78[2];
      *(_OWORD *)unint64_t v80 = v81;
      ++v116;
      if (v114[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
      }
    }
    if (!v123) {
      return 0;
    }
    unint64_t v82 = __p;
    if (__p)
    {
      unint64_t v83 = v122;
      int64_t v84 = __p;
      if (v122 != __p)
      {
        do
          unint64_t v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        int64_t v84 = __p;
      }
      __int16 v122 = v82;
      operator delete(v84);
    }
    uint64_t v21 = v119;
    if (!v119) {
      goto LABEL_116;
    }
    int64_t v85 = v120;
    uint64_t v23 = v119;
    if (v120 == v119) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v87 = *--v85;
      uint64_t v86 = v87;
      *int64_t v85 = 0;
      if (v87) {
        MEMORY[0x21667D390](v86, 0x1000C8077774924);
      }
    }
    while (v85 != v21);
    goto LABEL_114;
  }
  uint64_t v63 = v62;
  if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
  {
    a3(v114, a4);
    if (v114[0])
    {
      LODWORD(v111) = 3;
      uint64_t v113 = 53;
      uint64_t v64 = &v111;
      unsigned int v65 = (char *)v115;
      if (v116 >= v117)
      {
        unint64_t v98 = v116 + 1;
        if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
        {
          int64_t v107 = (char *)&v111 - (unsigned char *)v115;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v98, 24);
          unsigned int v65 = (char *)v115;
          uint64_t v64 = (uint64_t *)((char *)v115 + v107);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v98, 24);
          uint64_t v64 = &v111;
          unsigned int v65 = (char *)v115;
        }
      }
      unsigned int v66 = &v65[24 * v116];
      long long v67 = *(_OWORD *)v64;
      *((void *)v66 + 2) = v64[2];
      *(_OWORD *)unsigned int v66 = v67;
      ++v116;
      if (v114[0])
      {
        char v68 = &v111;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v111, v63);
        uint64_t v69 = (char *)v115;
        if (v116 >= v117)
        {
          unint64_t v100 = v116 + 1;
          if (v115 <= &v111 && (char *)v115 + 24 * v116 > (char *)&v111)
          {
            int64_t v109 = (char *)&v111 - (unsigned char *)v115;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v100, 24);
            uint64_t v69 = (char *)v115;
            char v68 = (uint64_t *)((char *)v115 + v109);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v118, v100, 24);
            char v68 = &v111;
            uint64_t v69 = (char *)v115;
          }
        }
        uint64_t v70 = &v69[24 * v116];
        long long v71 = *(_OWORD *)v68;
        *((void *)v70 + 2) = v68[2];
        *(_OWORD *)uint64_t v70 = v71;
        ++v116;
        if (v114[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v114);
        }
      }
    }
    if (!v123) {
      return 0;
    }
    char v72 = __p;
    if (__p)
    {
      uint64_t v73 = v122;
      uint64_t v74 = __p;
      if (v122 != __p)
      {
        do
          uint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        uint64_t v74 = __p;
      }
      __int16 v122 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v119;
    if (!v119) {
      goto LABEL_116;
    }
    uint64_t v75 = v120;
    uint64_t v23 = v119;
    if (v120 == v119) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v77 = *--v75;
      uint64_t v76 = v77;
      *uint64_t v75 = 0;
      if (v77) {
        MEMORY[0x21667D390](v76, 0x1000C8077774924);
      }
    }
    while (v75 != v21);
    goto LABEL_114;
  }
  a1[2] = v62;
  uint64_t v89 = mlir::DictionaryAttr::get((uint64_t)&v110, "rootKind", 8uLL);
  uint64_t v111 = v89;
  if (v89)
  {
    if (*(_UNKNOWN **)(*(void *)v89 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v114, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v90, &v111);
LABEL_123:
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v114);
      return 0;
    }
    a1[3] = v89;
  }
  uint64_t v91 = (void *)mlir::DictionaryAttr::get((uint64_t)&v110, "operandSegmentSizes", 0x13uLL);
  if (!v91)
  {
    uint64_t v91 = (void *)mlir::DictionaryAttr::get((uint64_t)&v110, "operand_segment_sizes", 0x15uLL);
    if (!v91)
    {
      a3(v114, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v114, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_123;
    }
  }
  return mlir::convertFromAttribute(a1 + 4, (const char *)2, v91, a3, a4) != 0;
}

uint64_t mlir::pdl_interp::RecordMatchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v41[6] = *MEMORY[0x263EF8340];
  uint64_t v38 = a1;
  long long v39 = v41;
  uint64_t v40 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v38, (uint64_t)"benefit", 7, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v7 = v40;
    }
    uint64_t v8 = (uint64_t *)((char *)v39 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"generatedOps", 12, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v13 = v40;
    }
    __int16 v14 = (uint64_t *)((char *)v39 + 16 * v13);
    *__int16 v14 = v10;
    v14[1] = v12;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"rewriter", 8, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v19 = v40;
    }
    __int16 v20 = (uint64_t *)((char *)v39 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"rootKind", 8, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v25 = v40;
    }
    uint64_t v26 = (uint64_t *)((char *)v39 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v27 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 2);
  uint64_t v28 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"operandSegmentSizes", 19, v27);
  uint64_t v30 = v29;
  unsigned int v31 = v40;
  if (v40 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
    unsigned int v31 = v40;
  }
  uint64_t v32 = (uint64_t *)((char *)v39 + 16 * v31);
  *uint64_t v32 = v28;
  v32[1] = v30;
  BOOL v33 = __CFADD__(v40, 1);
  uint64_t v34 = (v40 + 1);
  LODWORD(v40) = v40 + 1;
  if (v33)
  {
    uint64_t DictionaryAttr = 0;
    BOOL v36 = v39;
    if (v39 == v41) {
      return DictionaryAttr;
    }
    goto LABEL_24;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v38, (uint64_t *)v39, v34);
  BOOL v36 = v39;
  if (v39 != v41) {
LABEL_24:
  }
    free(v36);
  return DictionaryAttr;
}

unint64_t mlir::pdl_interp::RecordMatchOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v32 = v1;
    BOOL v36 = a1;
    uint64_t v2 = &unk_267770000;
    int v18 = v17;
    unint64_t v1 = v32;
    a1 = v36;
    if (v18)
    {
      unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v19 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      unint64_t v1 = v32;
      a1 = v36;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v33 = v5;
    unint64_t v37 = a1;
    uint64_t v2 = &unk_267770000;
    int v21 = v20;
    unint64_t v5 = v33;
    a1 = v37;
    if (v21)
    {
      unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v22 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v22;
      unint64_t v5 = v33;
      a1 = v37;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v34 = v8;
    uint64_t v38 = a1;
    uint64_t v2 = &unk_267770000;
    int v24 = v23;
    unint64_t v8 = v34;
    a1 = v38;
    if (v24)
    {
      unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v25 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v25;
      unint64_t v8 = v34;
      a1 = v38;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v35 = v11;
    long long v39 = a1;
    uint64_t v2 = &unk_267770000;
    int v27 = v26;
    unint64_t v11 = v35;
    a1 = v39;
    if (v27)
    {
      unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v28 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v28;
      unint64_t v11 = v35;
      a1 = v39;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v11) ^ HIDWORD(v11));
  unint64_t v42 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  {
    uint64_t v40 = a1;
    uint64_t v2 = &unk_267770000;
    int v30 = v29;
    a1 = v40;
    if (v30)
    {
      unint64_t v31 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v31 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v31;
      uint64_t v2 = (void *)&unk_267770000;
      a1 = v40;
    }
  }
  uint64_t v14 = v2[385] ^ *((unsigned int *)a1 + 9);
  unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (8 * *((unsigned int *)a1 + 8) + 8));
  unint64_t v41 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41);
}

uint64_t mlir::pdl_interp::RecordMatchOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, _DWORD *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 != 1701733730 || *(_DWORD *)((char *)__s1 + 3) != 1953064549) {
        goto LABEL_14;
      }
      return *a2;
    case 8uLL:
      if (!memcmp(__s1, "rewriter", __n)) {
        return a2[2];
      }
      if (*(void *)__s1 != 0x646E694B746F6F72) {
        goto LABEL_14;
      }
      return a2[3];
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_14;
    case 0xCuLL:
      if (memcmp(__s1, "generatedOps", __n)) {
        goto LABEL_14;
      }
      uint64_t result = a2[1];
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_14;
      }
      goto LABEL_16;
    case 0x15uLL:
      if (!memcmp(__s1, "operand_segment_sizes", __n)) {
LABEL_16:
      }
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 2);
      else {
LABEL_14:
      }
        uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::pdl_interp::RecordMatchOp::setInherentAttr(uint64_t result, _DWORD *__s1, size_t a3, void *a4)
{
  unint64_t v6 = (void *)result;
  switch(a3)
  {
    case 7uLL:
      if (*__s1 == 1701733730 && *(_DWORD *)((char *)__s1 + 3) == 1953064549)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            unint64_t v12 = a4;
          }
          else {
            unint64_t v12 = 0;
          }
          *(void *)uint64_t result = v12;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 8uLL:
      uint64_t result = memcmp(__s1, "rewriter", a3);
      if (result)
      {
        if (*(void *)__s1 == 0x646E694B746F6F72)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
              unint64_t v8 = a4;
            }
            else {
              unint64_t v8 = 0;
            }
            v6[3] = v8;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
          unint64_t v13 = a4;
        }
        else {
          unint64_t v13 = 0;
        }
        v6[2] = v13;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "generatedOps", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          v6[1] = v9;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_23;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_23:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v10 = result ? a4 : 0;
          uint64_t v14 = v10;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
            if (result == 2)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v14);
              if (v11) {
                uint64_t result = (uint64_t)memmove(v6 + 4, (const void *)result, 4 * v11);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::pdl_interp::RecordMatchOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"benefit", 7, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"generatedOps", 12, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"rewriter", 8, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"rootKind", 8, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 2);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::pdl_interp::RecordMatchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v8, (void **)"benefit", (const char *)7, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v9, (void **)"generatedOps", (const char *)0xC, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps10(v10, (void **)"rewriter", (const char *)8, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v11, (void **)"rootKind", (const char *)8, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps10(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1 || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      int v29 = a2;
      int v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int v30 = "' failed to satisfy constraint: symbol reference attribute";
        uint64_t v31 = 58;
        uint64_t v11 = &v29;
        unint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v12 = (char *)v35;
            uint64_t v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            unint64_t v12 = (char *)v35;
          }
        }
        unint64_t v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)unint64_t v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = __p;
    if (__p)
    {
      int v17 = v42;
      int v18 = __p;
      if (v42 != __p)
      {
        do
          int v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        int v18 = __p;
      }
      unint64_t v42 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v39;
    if (v39)
    {
      int v20 = v40;
      int v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        int v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::pdl_interp::RecordMatchOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3 + 1))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = __p;
        if (__p)
        {
          unint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          int v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    unint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 4, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::SymbolRefAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 3)
      && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
       || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)2));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::SymbolRefAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  unint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  uint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolRefAttr]";
  unint64_t v41 = 69;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          long long v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      __int16 v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)__int16 v16 = v17;
      ++v47;
      if (v44)
      {
        int v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            int v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            int v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      int v24 = v53;
      char v25 = __p;
      if (v53 != __p)
      {
        do
          int v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        char v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          *int64_t v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      long long v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::pdl_interp::RecordMatchOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 32, 2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 24));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 32), 2);
  }
  return result;
}

uint64_t mlir::pdl_interp::RecordMatchOp::getRewriter(mlir::pdl_interp::RecordMatchOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 16);
}

uint64_t mlir::pdl_interp::RecordMatchOp::getRootKind@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 24);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(void *)a2 = this;
    *(void *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::pdl_interp::RecordMatchOp::getBenefit(mlir::pdl_interp::RecordMatchOp *this)
{
  uint64_t v5 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  mlir::IntegerAttr::getValue((uint64_t)&v5, (llvm::APInt *)&v3);
  if (v4 <= 0x40) {
    return (unsigned __int16)v3;
  }
  uint64_t v2 = *v3;
  MEMORY[0x21667D390]();
  return (unsigned __int16)v2;
}

void mlir::pdl_interp::RecordMatchOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v15 = a4;
  mlir::OperationState::addOperands(a2, a3, a4);
  mlir::OperationState::addOperands(a2, a5, a6);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2)
            + 32) = v15 | ((unint64_t)a6 << 32);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2)
            + 16) = a7;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2)
  }
              + 24) = a8;
  if (a9) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2)
  }
              + 8) = a9;
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(a2) = a10;
  uint64_t v17 = *(unsigned int *)(a2 + 208);
  if (v17 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v17) = a11;
  ++*(_DWORD *)(a2 + 208);
}

uint64_t mlir::pdl_interp::RecordMatchOp::verifyInvariantsImpl(mlir::pdl_interp::RecordMatchOp *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (!*v3)
  {
    v74[0] = (void **)"requires attribute 'benefit'";
    __int16 v75 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v74, (uint64_t)v79);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
    if (v79[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88) {
      return v14;
    }
    uint64_t v20 = __p;
    if (__p)
    {
      long long v21 = v87;
      uint64_t v22 = __p;
      if (v87 != __p)
      {
        do
          long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v87 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v84;
    if (v84)
    {
      int v24 = v85;
      char v25 = v84;
      if (v85 == v84) {
        goto LABEL_98;
      }
      do
      {
        uint64_t v27 = *--v24;
        uint64_t v26 = v27;
        void *v24 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v24 != v23);
LABEL_97:
      char v25 = v84;
LABEL_98:
      int64_t v85 = v23;
      operator delete(v25);
    }
LABEL_99:
    if (v80 != v83) {
      free(v80);
    }
    return v14;
  }
  uint64_t v5 = v3[2];
  if (!v5)
  {
    v74[0] = (void **)"requires attribute 'rewriter'";
    __int16 v75 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v74, (uint64_t)v79);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
    if (v79[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88) {
      return v14;
    }
    long long v67 = __p;
    if (__p)
    {
      char v68 = v87;
      uint64_t v69 = __p;
      if (v87 != __p)
      {
        do
          char v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
        while (v68 != v67);
        uint64_t v69 = __p;
      }
      uint64_t v87 = v67;
      operator delete(v69);
    }
    uint64_t v23 = v84;
    if (v84)
    {
      uint64_t v70 = v85;
      char v25 = v84;
      if (v85 == v84) {
        goto LABEL_98;
      }
      do
      {
        uint64_t v72 = *--v70;
        uint64_t v71 = v72;
        *uint64_t v70 = 0;
        if (v72) {
          MEMORY[0x21667D390](v71, 0x1000C8077774924);
        }
      }
      while (v70 != v23);
      goto LABEL_97;
    }
    goto LABEL_99;
  }
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[3];
  v79[0] = v2;
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps10(v5, (void **)"rewriter", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v79))return 0; {
  v79[0] = *(void *)this;
  }
  if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"rootKind", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v79))return 0; {
  v79[0] = *(void *)this;
  }
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v6, (void **)"generatedOps", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v79))return 0; {
  v79[0] = *(void *)this;
  }
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v4, (void **)"benefit", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v79))return 0; {
  unint64_t v8 = *(unsigned int *)(*(void *)this + 44);
  }
  uint64_t v9 = *(void *)this + 16 * ((v8 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v9 + 32);
  if ((v8 & 0x800000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)this + 72);
    if (v10) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (v10)
    {
LABEL_14:
      uint64_t v12 = 0;
      uint64_t v13 = v11 + 24;
      while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*(void *)this, *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v12))
      {
        ++v12;
        v13 += 32;
        if (v10 == v12) {
          goto LABEL_17;
        }
      }
      return 0;
    }
  }
LABEL_17:
  uint64_t v14 = 1;
  uint64_t ODSOperands = mlir::pdl_interp::RecordMatchOp::getODSOperands(this, 1u);
  if (v16)
  {
    uint64_t v17 = ODSOperands;
    uint64_t v18 = v16;
    uint64_t v19 = 0;
    while (1)
    {
      unint64_t v28 = *(void *)(*(void *)(v17 + 32 * v19 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)v28 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
      {
        uint64_t v29 = *(void *)this;
        __int16 v75 = 261;
        v74[0] = (void **)"operand";
        v74[1] = (void **)7;
        mlir::Operation::emitOpError(v29, v74, (uint64_t)v79);
        if (v79[0])
        {
          int v76 = 3;
          uint64_t v77 = " #";
          uint64_t v78 = 2;
          uint64_t v30 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v57 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              int64_t v63 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v57, 24);
              uint64_t v30 = (char *)v80;
              uint64_t v31 = (int *)((char *)v80 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v57, 24);
              uint64_t v31 = &v76;
              uint64_t v30 = (char *)v80;
            }
          }
          else
          {
            uint64_t v31 = &v76;
          }
          unint64_t v32 = &v30[24 * v81];
          long long v33 = *(_OWORD *)v31;
          *((void *)v32 + 2) = *((void *)v31 + 2);
          *(_OWORD *)unint64_t v32 = v33;
          uint64_t v34 = ++v81;
          if (v79[0])
          {
            int v76 = 5;
            uint64_t v77 = (const char *)v10;
            int64_t v35 = (char *)v80;
            if (v34 >= v82)
            {
              unint64_t v58 = v34 + 1;
              BOOL v59 = (char *)v80 + 24 * v34 > (char *)&v76;
              if (v80 <= &v76 && v59)
              {
                int64_t v64 = (char *)&v76 - (unsigned char *)v80;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
                int64_t v35 = (char *)v80;
                int64_t v36 = (int *)((char *)v80 + v64);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
                int64_t v36 = &v76;
                int64_t v35 = (char *)v80;
              }
            }
            else
            {
              int64_t v36 = &v76;
            }
            int64_t v37 = &v35[24 * v81];
            long long v38 = *(_OWORD *)v36;
            *((void *)v37 + 2) = *((void *)v36 + 2);
            *(_OWORD *)int64_t v37 = v38;
            uint64_t v39 = ++v81;
            if (v79[0])
            {
              int v76 = 3;
              uint64_t v78 = 67;
              uint64_t v40 = (char *)v80;
              if (v39 >= v82)
              {
                unint64_t v60 = v39 + 1;
                BOOL v61 = (char *)v80 + 24 * v39 > (char *)&v76;
                if (v80 <= &v76 && v61)
                {
                  int64_t v65 = (char *)&v76 - (unsigned char *)v80;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                  uint64_t v40 = (char *)v80;
                  unint64_t v41 = (int *)((char *)v80 + v65);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                  unint64_t v41 = &v76;
                  uint64_t v40 = (char *)v80;
                }
              }
              else
              {
                unint64_t v41 = &v76;
              }
              uint64_t v42 = &v40[24 * v81];
              long long v43 = *(_OWORD *)v41;
              *((void *)v42 + 2) = *((void *)v41 + 2);
              *(_OWORD *)uint64_t v42 = v43;
              ++v81;
              if (v79[0])
              {
                uint64_t v44 = &v76;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v28);
                uint64_t v45 = (char *)v80;
                if (v81 >= v82)
                {
                  unint64_t v62 = v81 + 1;
                  if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                  {
                    int64_t v66 = (char *)&v76 - (unsigned char *)v80;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                    uint64_t v45 = (char *)v80;
                    uint64_t v44 = (int *)((char *)v80 + v66);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                    uint64_t v44 = &v76;
                    uint64_t v45 = (char *)v80;
                  }
                }
                uint64_t v46 = &v45[24 * v81];
                long long v47 = *(_OWORD *)v44;
                *((void *)v46 + 2) = *((void *)v44 + 2);
                *(_OWORD *)uint64_t v46 = v47;
                ++v81;
              }
            }
          }
        }
        char v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
        if (v79[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
        }
        if (v88)
        {
          unint64_t v49 = __p;
          if (__p)
          {
            BOOL v50 = v87;
            long long v51 = __p;
            if (v87 != __p)
            {
              do
                BOOL v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
              while (v50 != v49);
              long long v51 = __p;
            }
            uint64_t v87 = v49;
            operator delete(v51);
          }
          BOOL v52 = v84;
          if (v84)
          {
            unint64_t v53 = v85;
            char v54 = v84;
            if (v85 != v84)
            {
              do
              {
                uint64_t v56 = *--v53;
                uint64_t v55 = v56;
                *unint64_t v53 = 0;
                if (v56) {
                  MEMORY[0x21667D390](v55, 0x1000C8077774924);
                }
              }
              while (v53 != v52);
              char v54 = v84;
            }
            int64_t v85 = v52;
            operator delete(v54);
          }
          if (v80 != v83) {
            free(v80);
          }
        }
        if (!v48) {
          break;
        }
      }
      LODWORD(v10) = v10 + 1;
      ++v19;
      uint64_t v14 = 1;
      if (v19 == v18) {
        return v14;
      }
    }
    return 0;
  }
  return v14;
}

uint64_t mlir::pdl_interp::RecordMatchOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  unsigned char v46[16] = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  v42[0] = &v43;
  v42[1] = (void *)0x100000000;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v39 = v41;
  uint64_t v40 = 0x400000000;
  unint64_t v32 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::SymbolRefAttr>(a1, &v36, v6)) {
    goto LABEL_49;
  }
  if (v36)
  {
    uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>((uint64_t)a2);
    *(void *)(v7 + 16) = v36;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v44, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v42)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_49;
  }
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "benefit", 7, v37))goto LABEL_49; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
  }
    goto LABEL_49;
  uint64_t v9 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v9, 0x10u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v35, IntegerType)) {
    goto LABEL_49;
  }
  if (v35)
  {
    uint64_t v11 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>((uint64_t)a2);
    void *v11 = v35;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
    || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
  {
    goto LABEL_49;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "generatedOps", 12))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
      goto LABEL_49;
    }
    uint64_t v12 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v14 = mlir::NoneType::get(*v12, v13);
    if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v34, v14)) {
      goto LABEL_49;
    }
    if (v34)
    {
      uint64_t v15 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>((uint64_t)a2);
      *(void *)(v15 + 8) = v34;
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
      || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      goto LABEL_49;
    }
  }
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "loc", 3, v37))goto LABEL_49; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
  }
    goto LABEL_49;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    goto LABEL_49;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v39, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    goto LABEL_49;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    __int16 v38 = 257;
    if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "root", 4, v37))goto LABEL_49; {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
    }
      goto LABEL_49;
    uint64_t v16 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v18 = mlir::NoneType::get(*v16, v17);
    if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v33, v18)) {
      goto LABEL_49;
    }
    if (v33)
    {
      uint64_t v19 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>((uint64_t)a2);
      *(void *)(v19 + 24) = v33;
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)) {
      goto LABEL_49;
    }
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14)) {
    goto LABEL_49;
  }
  uint64_t v20 = *((void *)a2 + 1);
  v37[0] = a1;
  v37[1] = &v31;
  void v37[2] = a2;
  if (!mlir::pdl_interp::RecordMatchOp::verifyInherentAttrs(v20, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::RecordMatchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v37))goto LABEL_49; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
  }
    goto LABEL_49;
  if (!(*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v32)) {
    goto LABEL_49;
  }
  mlir::OperationState::addSuccessors(a2, v32);
  uint64_t v21 = v45;
  uint64_t v22 = v40;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>((uint64_t)a2)
            + 32) = v21 | (v22 << 32);
  uint64_t v23 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v24 = mlir::Builder::getType<mlir::pdl::OperationType>(v23);
  char v25 = (void *)((char *)a2 + 16);
  if (!mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v44, (uint64_t)v42, v8, (uint64_t)a2 + 16))goto LABEL_49; {
  if (v40)
  }
  {
    uint64_t v26 = (char *)v39;
    uint64_t v27 = 32 * v40;
    uint64_t v28 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, void *))(*(void *)a1 + 696))(a1, v26, v24, v25))
    {
      v26 += 32;
      v27 -= 32;
      if (!v27) {
        goto LABEL_50;
      }
    }
LABEL_49:
    uint64_t v28 = 0;
LABEL_50:
    uint64_t v29 = v39;
    if (v39 != v41) {
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  uint64_t v28 = 1;
  uint64_t v29 = v39;
  if (v39 != v41) {
LABEL_51:
  }
    free(v29);
LABEL_52:
  if (v42[0] != &v43) {
    free(v42[0]);
  }
  if (v44 != v46) {
    free(v44);
  }
  return v28;
}

void mlir::pdl_interp::RecordMatchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  unint64_t v6 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v6 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v6 + 16));
  unint64_t v7 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v7 = 0;
  }
  if (*(_DWORD *)(v7 + 32))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "(", 1uLL);
    }
    else
    {
      unsigned char *v9 = 40;
      ++*((void *)v8 + 4);
    }
    unint64_t v10 = *((unsigned int *)*this + 11);
    uint64_t v11 = (uint64_t)*this + 16 * ((v10 >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned int *)(v11 + 32);
    if ((v10 & 0x800000) != 0) {
      uint64_t v13 = *((void *)*this + 9);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v13, 0, v13, v12, (uint64_t)a2, v14, (uint64_t)&v102);
    uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
    if ((unint64_t)v16 >= *((void *)v15 + 3))
    {
      llvm::raw_ostream::write(v15, 32);
    }
    else
    {
      *((void *)v15 + 4) = v16 + 1;
      unsigned char *v16 = 32;
    }
    uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
    if (*((unsigned char **)v17 + 3) == v18)
    {
      llvm::raw_ostream::write(v17, ":", 1uLL);
    }
    else
    {
      unsigned char *v18 = 58;
      ++*((void *)v17 + 4);
    }
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
    if ((unint64_t)v20 >= *((void *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 32);
    }
    else
    {
      *((void *)v19 + 4) = v20 + 1;
      unsigned char *v20 = 32;
    }
    unint64_t v21 = *((unsigned int *)*this + 11);
    uint64_t v22 = (uint64_t)*this + 16 * ((v21 >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int *)(v22 + 32);
    if ((v21 & 0x800000) != 0) {
      uint64_t v24 = *((void *)*this + 9);
    }
    else {
      uint64_t v24 = 0;
    }
    v100[0] = v24;
    v100[1] = v23;
    mlir::OperandRange::getTypes(v100, (uint64_t *)&v102);
    v101[0] = ", ";
    v101[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)v101);
    char v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, ")", 1uLL);
    }
    else
    {
      *uint64_t v26 = 41;
      ++*((void *)v25 + 4);
    }
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    *uint64_t v28 = 32;
  }
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
  if (*((unsigned char **)v29 + 3) == v30)
  {
    llvm::raw_ostream::write(v29, ":", 1uLL);
  }
  else
  {
    unsigned char *v30 = 58;
    ++*((void *)v29 + 4);
  }
  uint64_t v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v32 = (unsigned char *)*((void *)v31 + 4);
  if ((unint64_t)v32 >= *((void *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((void *)v31 + 4) = v32 + 1;
    *unint64_t v32 = 32;
  }
  uint64_t v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v34 = (_DWORD *)*((void *)v33 + 4);
  if (*((void *)v33 + 3) - (void)v34 > 6uLL)
  {
    *(_DWORD *)((char *)v34 + 3) = 1953064549;
    *uint64_t v34 = 1701733730;
    *((void *)v33 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v33, "benefit", 7uLL);
  }
  uint64_t v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v36 = (unsigned char *)*((void *)v35 + 4);
  if (*((unsigned char **)v35 + 3) == v36)
  {
    llvm::raw_ostream::write(v35, "(", 1uLL);
  }
  else
  {
    *uint64_t v36 = 40;
    ++*((void *)v35 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  int64_t v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v38 = (unsigned char *)*((void *)v37 + 4);
  if (*((unsigned char **)v37 + 3) == v38)
  {
    llvm::raw_ostream::write(v37, ")", 1uLL);
  }
  else
  {
    *__int16 v38 = 41;
    ++*((void *)v37 + 4);
  }
  uint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v40 = (unsigned char *)*((void *)v39 + 4);
  if (*((unsigned char **)v39 + 3) == v40)
  {
    llvm::raw_ostream::write(v39, ",", 1uLL);
  }
  else
  {
    unsigned char *v40 = 44;
    ++*((void *)v39 + 4);
  }
  unint64_t v41 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v41 = 0;
  }
  if (*(void *)(v41 + 8))
  {
    uint64_t v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v43 = (unsigned char *)*((void *)v42 + 4);
    if ((unint64_t)v43 >= *((void *)v42 + 3))
    {
      llvm::raw_ostream::write(v42, 32);
    }
    else
    {
      *((void *)v42 + 4) = v43 + 1;
      *uint64_t v43 = 32;
    }
    uint64_t v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v45 = *((void *)v44 + 4);
    if ((unint64_t)(*((void *)v44 + 3) - v45) > 0xB)
    {
      *(_DWORD *)(v45 + 8) = 1936740196;
      *(void *)uint64_t v45 = *(void *)"generatedOps";
      *((void *)v44 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v44, "generatedOps", 0xCuLL);
    }
    uint64_t v46 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v47 = (unsigned char *)*((void *)v46 + 4);
    if (*((unsigned char **)v46 + 3) == v47)
    {
      llvm::raw_ostream::write(v46, "(", 1uLL);
    }
    else
    {
      *long long v47 = 40;
      ++*((void *)v46 + 4);
    }
    unint64_t v48 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v48 = 0;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v48 + 8));
    unint64_t v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v50 = (unsigned char *)*((void *)v49 + 4);
    if (*((unsigned char **)v49 + 3) == v50)
    {
      llvm::raw_ostream::write(v49, ")", 1uLL);
    }
    else
    {
      *BOOL v50 = 41;
      ++*((void *)v49 + 4);
    }
    long long v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v52 = (unsigned char *)*((void *)v51 + 4);
    if (*((unsigned char **)v51 + 3) == v52)
    {
      llvm::raw_ostream::write(v51, ",", 1uLL);
    }
    else
    {
      *BOOL v52 = 44;
      ++*((void *)v51 + 4);
    }
  }
  unint64_t v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v54 = (unsigned char *)*((void *)v53 + 4);
  if ((unint64_t)v54 >= *((void *)v53 + 3))
  {
    llvm::raw_ostream::write(v53, 32);
  }
  else
  {
    *((void *)v53 + 4) = v54 + 1;
    *char v54 = 32;
  }
  uint64_t v55 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v56 = *((void *)v55 + 4);
  if ((unint64_t)(*((void *)v55 + 3) - v56) > 2)
  {
    *(unsigned char *)(v56 + 2) = 99;
    *(_WORD *)uint64_t v56 = 28524;
    *((void *)v55 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v55, "loc", 3uLL);
  }
  unint64_t v57 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v58 = (unsigned char *)*((void *)v57 + 4);
  if (*((unsigned char **)v57 + 3) == v58)
  {
    llvm::raw_ostream::write(v57, "(", 1uLL);
  }
  else
  {
    *unint64_t v58 = 40;
    ++*((void *)v57 + 4);
  }
  BOOL v59 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v60 = (unsigned char *)*((void *)v59 + 4);
  if (*((unsigned char **)v59 + 3) == v60)
  {
    llvm::raw_ostream::write(v59, "[", 1uLL);
  }
  else
  {
    unsigned char *v60 = 91;
    ++*((void *)v59 + 4);
  }
  unint64_t v61 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v62 = (uint64_t)*this + 16 * ((v61 >> 23) & 1) + 64;
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v63 = *(unsigned int *)(v62 + 32);
  int v64 = *(_DWORD *)(v62 + 36);
  if ((v61 & 0x800000) != 0) {
    uint64_t v65 = *((void *)*this + 9);
  }
  else {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + 32 * v63;
  uint64_t v67 = (v64 + v63) - v63;
  char v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v102 = ", ";
  uint64_t v103 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v66, 0, v66, v67, (uint64_t)a2, v68, (uint64_t)&v102);
  uint64_t v69 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v70 = (unsigned char *)*((void *)v69 + 4);
  if (*((unsigned char **)v69 + 3) == v70)
  {
    llvm::raw_ostream::write(v69, "]", 1uLL);
  }
  else
  {
    *uint64_t v70 = 93;
    ++*((void *)v69 + 4);
  }
  uint64_t v71 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v72 = (unsigned char *)*((void *)v71 + 4);
  if (*((unsigned char **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, ")", 1uLL);
  }
  else
  {
    *uint64_t v72 = 41;
    ++*((void *)v71 + 4);
  }
  unint64_t v73 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v73 = 0;
  }
  if (*(void *)(v73 + 24))
  {
    uint64_t v74 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    __int16 v75 = (unsigned char *)*((void *)v74 + 4);
    if (*((unsigned char **)v74 + 3) == v75)
    {
      llvm::raw_ostream::write(v74, ",", 1uLL);
    }
    else
    {
      *__int16 v75 = 44;
      ++*((void *)v74 + 4);
    }
    int v76 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v77 = (unsigned char *)*((void *)v76 + 4);
    if ((unint64_t)v77 >= *((void *)v76 + 3))
    {
      llvm::raw_ostream::write(v76, 32);
    }
    else
    {
      *((void *)v76 + 4) = v77 + 1;
      *uint64_t v77 = 32;
    }
    uint64_t v78 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v79 = (_DWORD *)*((void *)v78 + 4);
    if (*((void *)v78 + 3) - (void)v79 > 3uLL)
    {
      *unint64_t v79 = 1953460082;
      *((void *)v78 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v78, "root", 4uLL);
    }
    unint64_t v80 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v81 = (unsigned char *)*((void *)v80 + 4);
    if (*((unsigned char **)v80 + 3) == v81)
    {
      llvm::raw_ostream::write(v80, "(", 1uLL);
    }
    else
    {
      *unsigned int v81 = 40;
      ++*((void *)v80 + 4);
    }
    unint64_t v82 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v82 = 0;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v82 + 24));
    unint64_t v83 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v84 = (unsigned char *)*((void *)v83 + 4);
    if (*((unsigned char **)v83 + 3) == v84)
    {
      llvm::raw_ostream::write(v83, ")", 1uLL);
    }
    else
    {
      *int64_t v84 = 41;
      ++*((void *)v83 + 4);
    }
  }
  int64_t v102 = &v104;
  int64_t v104 = "operandSegmentSizes";
  uint64_t v105 = 19;
  int64_t v106 = "rewriter";
  uint64_t v107 = 8;
  uint64_t v103 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, 3uLL, 16);
  int64_t v85 = (char *)v102 + 16 * v103;
  *int64_t v85 = "benefit";
  v85[1] = 7;
  uint64_t v86 = (v103 + 1);
  LODWORD(v103) = v86;
  if (v86 >= HIDWORD(v103))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v86 + 1, 16);
    LODWORD(v86) = v103;
  }
  uint64_t v87 = (char *)v102 + 16 * v86;
  *uint64_t v87 = "generatedOps";
  v87[1] = 12;
  uint64_t v88 = (v103 + 1);
  LODWORD(v103) = v88;
  if (v88 >= HIDWORD(v103))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v88 + 1, 16);
    LODWORD(v88) = v103;
  }
  uint64_t v89 = (char *)v102 + 16 * v88;
  *uint64_t v89 = "rootKind";
  v89[1] = 8;
  LODWORD(v103) = v103 + 1;
  uint64_t v90 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v101[0] = mlir::Operation::getAttrDictionary(v90);
    uint64_t v91 = (mlir::ArrayAttr *)v101;
  }
  else
  {
    uint64_t v91 = (mlir::Operation *)((char *)v90 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v91);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v93, v102, v103);
  unint64_t v94 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v95 = (unsigned char *)*((void *)v94 + 4);
  if ((unint64_t)v95 >= *((void *)v94 + 3))
  {
    llvm::raw_ostream::write(v94, 32);
  }
  else
  {
    *((void *)v94 + 4) = v95 + 1;
    *unint64_t v95 = 32;
  }
  unint64_t v96 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v97 = (_WORD *)*((void *)v96 + 4);
  if (*((void *)v96 + 3) - (void)v97 > 1uLL)
  {
    *unint64_t v97 = 15917;
    *((void *)v96 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v96, "->", 2uLL);
  }
  unint64_t v98 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v99 = (unsigned char *)*((void *)v98 + 4);
  if ((unint64_t)v99 >= *((void *)v98 + 3))
  {
    llvm::raw_ostream::write(v98, 32);
  }
  else
  {
    *((void *)v98 + 4) = v99 + 1;
    *unint64_t v99 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
  if (v102 != &v104) {
    free(v102);
  }
}

void mlir::pdl_interp::ReplaceOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v8, 1);
  mlir::OperationState::addOperands(a2, a4, a5);
}

BOOL mlir::pdl_interp::ReplaceOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  v12[0] = &v13;
  v12[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  BOOL v8 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)
    && (__int16 v11 = 257,
        (*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, unsigned char *))(*(void *)a1 + 368))(a1, "with", 4, v10))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)&& (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v14, 0, 1, 0xFFFFFFFFLL))&& (!v15|| (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v12))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)&& ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))&& (v5 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1),
        uint64_t v6 = mlir::Builder::getType<mlir::pdl::OperationType>(v5),
        uint64_t v7 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, v6, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v14, (uint64_t)v12, v4, v7) != 0;
  if (v12[0] != &v13) {
    free(v12[0]);
  }
  if (v14 != v16) {
    free(v14);
  }
  return v8;
}

void mlir::pdl_interp::ReplaceOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v40[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  BOOL v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 3uLL)
  {
    _DWORD *v9 = 1752459639;
    *((void *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "with", 4uLL);
  }
  unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "(", 1uLL);
    uint64_t v14 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_20:
    uint64_t v16 = 0;
    uint64_t v17 = -1;
    goto LABEL_17;
  }
  unsigned char *v13 = 40;
  ++*((void *)v12 + 4);
  uint64_t v14 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v15 = *((unsigned int *)v14 + 17);
  if (v15 == 1) {
    goto LABEL_31;
  }
  uint64_t v16 = *((void *)v14 + 9);
  uint64_t v17 = v15 - 1;
LABEL_17:
  uint64_t v18 = v16 + 32;
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v38 = ", ";
  uint64_t v39 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&v38);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ":", 1uLL);
  }
  else
  {
    *uint64_t v23 = 58;
    ++*((void *)v22 + 4);
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    *char v25 = 32;
  }
  uint64_t v26 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v27 = *((unsigned int *)v26 + 17);
    uint64_t v28 = *((void *)v26 + 9);
    uint64_t v29 = v27 - 1;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = -1;
  }
  v36[0] = v28 + 32;
  v36[1] = v29;
  mlir::OperandRange::getTypes(v36, (uint64_t *)&v38);
  v37[0] = ", ";
  v37[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v38, v39, v40[0], v40[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)v37);
LABEL_31:
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if (*((unsigned char **)v30 + 3) == v31)
  {
    llvm::raw_ostream::write(v30, ")", 1uLL);
  }
  else
  {
    *uint64_t v31 = 41;
    ++*((void *)v30 + 4);
  }
  __int16 v38 = v40;
  uint64_t v39 = 0x200000000;
  unint64_t v32 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v37[0] = mlir::Operation::getAttrDictionary(v32);
    uint64_t v33 = (mlir::ArrayAttr *)v37;
  }
  else
  {
    uint64_t v33 = (mlir::Operation *)((char *)v32 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v33);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v35, v38, v39);
  if (v38 != v40) {
    free(v38);
  }
}

uint64_t mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      unint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "caseValues", 0xAuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected key entry for caseValues in DictionaryAttr to set Properties.";
      uint64_t v58 = 70;
      uint64_t v36 = &v56;
      int64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          int64_t v37 = (char *)v60;
        }
      }
      __int16 v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)__int16 v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = __p;
    if (__p)
    {
      unint64_t v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v67 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 55;
    unint64_t v10 = &v56;
    __int16 v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        __int16 v11 = (char *)v60;
        unint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unint64_t v10 = &v56;
        __int16 v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v67 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"caseValues", 10, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

BOOL mlir::pdl_interp::SwitchAttributeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v6, (void **)"caseValues", (const char *)0xA, a3, a4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchAttributeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ArrayAttr = mlir::Builder::getArrayAttr(a1, a4, a5);
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(a2) = ArrayAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
}

BOOL mlir::pdl_interp::SwitchAttributeOp::verifyInvariantsImpl(mlir::pdl_interp::SwitchAttributeOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v3, (void **)"caseValues", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'caseValues'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned int v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        unint64_t v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          unint64_t v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::SwitchAttributeOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  memset(v24, 0, 24);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1)) {
    goto LABEL_21;
  }
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v18))goto LABEL_21; {
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v17, v6)) {
    goto LABEL_21;
  }
  if (v17)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>((uint64_t)a2);
    void *v7 = v17;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_21;
  }
  v18[0] = 0;
  unsigned __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v18);
  if (v8 >= 0x100u)
  {
    if (!(_BYTE)v8) {
      goto LABEL_21;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v21, v18);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v18)) {
        goto LABEL_21;
      }
      int v13 = v22;
      if (v22 >= HIDWORD(v22))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v21, v18);
      }
      else
      {
        *((void *)v21 + v22) = v18[0];
        LODWORD(v22) = v13 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v9 = *((void *)a2 + 1);
      v18[0] = a1;
      v18[1] = (uint64_t)&v15;
      void v18[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchAttributeOp::verifyInherentAttrs(v9, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v16))
      {
        mlir::OperationState::addSuccessors(a2, v16);
        mlir::BlockRange::BlockRange(v20, (uint64_t)v21, v22);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v20[0], v20[1]);
        unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v11 = mlir::Builder::getType<mlir::pdl::AttributeType>(v10);
        BOOL v12 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v24, v11, (void *)a2 + 2) != 0;
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  BOOL v12 = 0;
LABEL_22:
  if (v21 != v23) {
    free(v21);
  }
  return v12;
}

void mlir::pdl_interp::SwitchAttributeOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v31[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  unsigned __int16 v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 28532;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "to", 2uLL);
  }
  unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  BOOL v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "(", 1uLL);
  }
  else
  {
    unsigned char *v13 = 40;
    ++*((void *)v12 + 4);
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v29, *this);
  uint64_t v14 = v29;
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v29, *this);
  uint64_t v15 = v30 - 1;
  long long v29 = ", ";
  uint64_t v30 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v14 + 32, 0, (uint64_t)v14 + 32, v15, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v29);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ")", 1uLL);
  }
  else
  {
    unsigned char *v17 = 41;
    ++*((void *)v16 + 4);
  }
  long long v29 = v31;
  v31[0] = "caseValues";
  v31[1] = 10;
  uint64_t v30 = 0x200000001;
  uint64_t v18 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v18);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v18 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v29, v30);
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *char v23 = 32;
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (_WORD *)*((void *)v24 + 4);
  if (*((void *)v24 + 3) - (void)v25 > 1uLL)
  {
    *uint64_t v25 = 15917;
    *((void *)v24 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v24, "->", 2uLL);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *uint64_t v27 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
  if (v29 != v31) {
    free(v29);
  }
}

uint64_t mlir::pdl_interp::SwitchOperandCountOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      BOOL v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          BOOL v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          BOOL v12 = (char *)v60;
        }
      }
      int v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)int v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v67;
      uint64_t v17 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      uint64_t v67 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    __int16 v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      void *v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "caseValues", 0xAuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected key entry for caseValues in DictionaryAttr to set Properties.";
      uint64_t v58 = 70;
      char v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          char v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          char v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      uint64_t v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)uint64_t v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v27 = __p;
    if (__p)
    {
      uint64_t v28 = v67;
      long long v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        long long v29 = __p;
      }
      uint64_t v67 = v27;
      operator delete(v29);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = *--v30;
      uint64_t v31 = v32;
      void *v30 = 0;
      if (v32) {
        MEMORY[0x21667D390](v31, 0x1000C8077774924);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::DenseIntElementsAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 55;
    uint64_t v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        uint64_t v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    uint64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)uint64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      int64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      __int16 v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          __int16 v38 = (char *)v60;
          int64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int64_t v37 = &v56;
          __int16 v38 = (char *)v60;
        }
      }
      long long v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)long long v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v41 = __p;
    if (__p)
    {
      uint64_t v42 = v67;
      uint64_t v43 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        uint64_t v43 = __p;
      }
      uint64_t v67 = v41;
      operator delete(v43);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      uint64_t v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = *--v44;
      uint64_t v45 = v46;
      *uint64_t v44 = 0;
      if (v46) {
        MEMORY[0x21667D390](v45, 0x1000C8077774924);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

BOOL mlir::pdl_interp::SwitchOperandCountOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v6, (void **)"caseValues", (const char *)0xA, a3, a4);
}

uint64_t mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (mlir::DenseIntElementsAttr::classof(a1))
  {
    uint64_t v33 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v33);
    uint64_t v39 = v10;
    uint64_t OperandRange = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 32)) {
      return 1;
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(OperandRange) = 3;
    uint64_t v35 = "attribute '";
    uint64_t v36 = 11;
    p_uint64_t OperandRange = &OperandRange;
    int v13 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &OperandRange && (char *)v40 + 24 * v41 > (char *)&OperandRange)
      {
        int64_t v31 = (char *)&OperandRange - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        int v13 = (char *)v40;
        p_uint64_t OperandRange = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        p_uint64_t OperandRange = &OperandRange;
        int v13 = (char *)v40;
      }
    }
    long long v14 = &v13[24 * v41];
    long long v15 = *(_OWORD *)p_OperandRange;
    *((void *)v14 + 2) = p_OperandRange[2];
    *(_OWORD *)long long v14 = v15;
    ++v41;
    if (Value)
    {
      __int16 v37 = 261;
      uint64_t OperandRange = a2;
      uint64_t v35 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v39, &OperandRange);
      if (Value)
      {
        LODWORD(OperandRange) = 3;
        uint64_t v35 = "' failed to satisfy constraint: 32-bit signless integer elements attribute";
        uint64_t v36 = 74;
        uint64_t v16 = &OperandRange;
        uint64_t v17 = (char *)v40;
        if (v41 >= v42)
        {
          unint64_t v30 = v41 + 1;
          if (v40 <= &OperandRange && (char *)v40 + 24 * v41 > (char *)&OperandRange)
          {
            int64_t v32 = (char *)&OperandRange - (unsigned char *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            uint64_t v17 = (char *)v40;
            uint64_t v16 = (void ***)((char *)v40 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            uint64_t v16 = &OperandRange;
            uint64_t v17 = (char *)v40;
          }
        }
        uint64_t v18 = &v17[24 * v41];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)uint64_t v18 = v19;
        ++v41;
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v48)
  {
    uint64_t v20 = __p;
    if (__p)
    {
      uint64_t v21 = v47;
      uint64_t v22 = __p;
      if (v47 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      unint64_t v47 = v20;
      operator delete(v22);
    }
    char v23 = v44;
    if (v44)
    {
      uint64_t v24 = v45;
      uint64_t v25 = v44;
      if (v45 != v44)
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          void *v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v44;
      }
      uint64_t v45 = v23;
      operator delete(v25);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
  return v11;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchOperandCountOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t I32VectorAttr = mlir::Builder::getI32VectorAttr(a1, a4, a5);
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(a2) = I32VectorAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
}

BOOL mlir::pdl_interp::SwitchOperandCountOp::verifyInvariantsImpl(mlir::pdl_interp::SwitchOperandCountOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v3, (void **)"caseValues", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'caseValues'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned int v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        uint64_t v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::SwitchOperandCountOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  memset(v21, 0, 24);
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v18 = v20;
  uint64_t v19 = 0x200000000;
  __int16 v16 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    goto LABEL_22;
  }
  __int16 v16 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v15)|| !mlir::AsmParser::parseAttribute<mlir::DenseIntElementsAttr>(a1, &v14, 0))
  {
    goto LABEL_22;
  }
  if (v14)
  {
    uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>((uint64_t)a2);
    *uint64_t v4 = v14;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_22;
  }
  v15[0] = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v15);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5) {
      goto LABEL_22;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v18, v15);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v15)) {
        goto LABEL_22;
      }
      int v10 = v19;
      if (v19 >= HIDWORD(v19))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v18, v15);
      }
      else
      {
        *((void *)v18 + v19) = v15[0];
        LODWORD(v19) = v10 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v6 = *((void *)a2 + 1);
      v15[0] = a1;
      v15[1] = (uint64_t)&v12;
      uint64_t v15[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchOperandCountOp::verifyInherentAttrs(v6, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v13))
      {
        mlir::OperationState::addSuccessors(a2, v13);
        mlir::BlockRange::BlockRange(v17, (uint64_t)v18, v19);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v17[0], v17[1]);
        uint64_t v7 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v8 = mlir::Builder::getType<mlir::pdl::OperationType>(v7);
        BOOL v9 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v21, v8, (void *)a2 + 2) != 0;
        goto LABEL_23;
      }
    }
  }
LABEL_22:
  BOOL v9 = 0;
LABEL_23:
  if (v18 != v20) {
    free(v18);
  }
  return v9;
}

void mlir::pdl_interp::SwitchOperandCountOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  int v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 28532;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "to", 2uLL);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *__int16 v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  __int16 v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, "(", 1uLL);
  }
  else
  {
    unsigned char *v17 = 40;
    ++*((void *)v16 + 4);
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v33, *this);
  uint64_t v18 = v33;
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v33, *this);
  uint64_t v19 = v34 - 1;
  uint64_t v33 = ", ";
  uint64_t v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v18 + 32, 0, (uint64_t)v18 + 32, v19, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v33);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if (*((unsigned char **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    unsigned char *v21 = 41;
    ++*((void *)v20 + 4);
  }
  uint64_t v33 = v35;
  v35[0] = "caseValues";
  v35[1] = 10;
  uint64_t v34 = 0x200000001;
  uint64_t v22 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v25, v33, v34);
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *uint64_t v27 = 32;
  }
  uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v29 = (_WORD *)*((void *)v28 + 4);
  if (*((void *)v28 + 3) - (void)v29 > 1uLL)
  {
    _WORD *v29 = 15917;
    *((void *)v28 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v28, "->", 2uLL);
  }
  unint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *int64_t v31 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
  if (v33 != v35) {
    free(v33);
  }
}

BOOL mlir::pdl_interp::SwitchOperationNameOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v6, (void **)"caseValues", (const char *)0xA, a3, a4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchOperationNameOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v34[16] = *MEMORY[0x263EF8340];
  unint64_t v16 = 8 * a5;
  int64_t v32 = v34;
  uint64_t v33 = 0x800000000;
  if ((unint64_t)(8 * a5) < 0x41)
  {
    uint64_t v17 = 0;
    int v19 = 0;
    uint64_t v18 = v34;
    if (!a5) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, (8 * a5) >> 3, 16);
    uint64_t v17 = v33;
    uint64_t v18 = (uint64_t *)v32;
    int v19 = v33;
    if (!a5) {
      goto LABEL_8;
    }
  }
  unint64_t v30 = a1;
  uint64_t v20 = a3;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v24 = &v18[2 * v17];
  unint64_t v25 = v16;
  do
  {
    uint64_t v26 = *a4++;
    uint64_t v31 = *(void *)(v26 + 8);
    uint64_t *v24 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v31);
    v24[1] = v27;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  int v19 = v33;
  uint64_t v18 = (uint64_t *)v32;
  a8 = v23;
  a7 = v22;
  a6 = v21;
  a3 = v20;
  a1 = v30;
LABEL_8:
  LODWORD(v33) = v19 + (v16 >> 3);
  Struint64_t ArrayAttr = mlir::Builder::getStrArrayAttr(a1, v18, v33);
  uint64_t v31 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(a2) = StrArrayAttr;
  uint64_t v29 = *(unsigned int *)(a2 + 208);
  if (v29 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v29) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
  if (v32 != v34) {
    free(v32);
  }
}

BOOL mlir::pdl_interp::SwitchOperationNameOp::verifyInvariantsImpl(mlir::pdl_interp::SwitchOperationNameOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v3, (void **)"caseValues", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'caseValues'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned __int16 v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v19;
      if (v19)
      {
        BOOL v9 = v20;
        int v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          int v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::SwitchOperationNameOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  memset(v24, 0, 24);
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1)) {
    goto LABEL_22;
  }
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v18))goto LABEL_22; {
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v17, v6)) {
    goto LABEL_22;
  }
  if (v17)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>((uint64_t)a2);
    void *v7 = v17;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_22;
  }
  v18[0] = 0;
  unsigned __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v18);
  if (v8 >= 0x100u)
  {
    if (!(_BYTE)v8) {
      goto LABEL_22;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v21, v18);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v18)) {
        goto LABEL_22;
      }
      int v13 = v22;
      if (v22 >= HIDWORD(v22))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v21, v18);
      }
      else
      {
        *((void *)v21 + v22) = v18[0];
        LODWORD(v22) = v13 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v9 = *((void *)a2 + 1);
      v18[0] = a1;
      v18[1] = (uint64_t)&v15;
      void v18[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchOperationNameOp::verifyInherentAttrs(v9, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v16))
      {
        mlir::OperationState::addSuccessors(a2, v16);
        mlir::BlockRange::BlockRange(v20, (uint64_t)v21, v22);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v20[0], v20[1]);
        int v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v11 = mlir::Builder::getType<mlir::pdl::OperationType>(v10);
        BOOL v12 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v24, v11, (void *)a2 + 2) != 0;
        goto LABEL_23;
      }
    }
  }
LABEL_22:
  BOOL v12 = 0;
LABEL_23:
  if (v21 != v23) {
    free(v21);
  }
  return v12;
}

void mlir::pdl_interp::SwitchOperationNameOp::print(Operation **this, mlir::OpAsmPrinter *a2)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 26223;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "of", 2uLL);
  }
  unsigned __int16 v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  int v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  BOOL v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 28532;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "to", 2uLL);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  unint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, "(", 1uLL);
  }
  else
  {
    unsigned char *v17 = 40;
    ++*((void *)v16 + 4);
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v33, *this);
  uint64_t v18 = v33;
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v33, *this);
  uint64_t v19 = v34 - 1;
  uint64_t v33 = ", ";
  uint64_t v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v18 + 32, 0, (uint64_t)v18 + 32, v19, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v33);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if (*((unsigned char **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    unsigned char *v21 = 41;
    ++*((void *)v20 + 4);
  }
  uint64_t v33 = v35;
  v35[0] = "caseValues";
  v35[1] = 10;
  uint64_t v34 = 0x200000001;
  uint64_t v22 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v25, v33, v34);
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *uint64_t v27 = 32;
  }
  uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v29 = (_WORD *)*((void *)v28 + 4);
  if (*((void *)v28 + 3) - (void)v29 > 1uLL)
  {
    _WORD *v29 = 15917;
    *((void *)v28 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v28, "->", 2uLL);
  }
  unint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 176))(a2, *(void *)((((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 24));
  if (v33 != v35) {
    free(v33);
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchResultCountOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t I32VectorAttr = mlir::Builder::getI32VectorAttr(a1, a4, a5);
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(a2) = I32VectorAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
}

BOOL mlir::pdl_interp::SwitchResultCountOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  memset(v21, 0, 24);
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v18 = v20;
  uint64_t v19 = 0x200000000;
  __int16 v16 = 257;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 368))()) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    goto LABEL_22;
  }
  __int16 v16 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v15)|| !mlir::AsmParser::parseAttribute<mlir::DenseIntElementsAttr>(a1, &v14, 0))
  {
    goto LABEL_22;
  }
  if (v14)
  {
    uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>((uint64_t)a2);
    *uint64_t v4 = v14;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_22;
  }
  v15[0] = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v15);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5) {
      goto LABEL_22;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v18, v15);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v15)) {
        goto LABEL_22;
      }
      int v10 = v19;
      if (v19 >= HIDWORD(v19))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v18, v15);
      }
      else
      {
        *((void *)v18 + v19) = v15[0];
        LODWORD(v19) = v10 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v6 = *((void *)a2 + 1);
      v15[0] = a1;
      v15[1] = (uint64_t)&v12;
      uint64_t v15[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchOperandCountOp::verifyInherentAttrs(v6, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v13))
      {
        mlir::OperationState::addSuccessors(a2, v13);
        mlir::BlockRange::BlockRange(v17, (uint64_t)v18, v19);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v17[0], v17[1]);
        uint64_t v7 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v8 = mlir::Builder::getType<mlir::pdl::OperationType>(v7);
        BOOL v9 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v21, v8, (void *)a2 + 2) != 0;
        goto LABEL_23;
      }
    }
  }
LABEL_22:
  BOOL v9 = 0;
LABEL_23:
  if (v18 != v20) {
    free(v18);
  }
  return v9;
}

BOOL mlir::pdl_interp::SwitchTypeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = (void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v6, (void **)"caseValues", (const char *)0xA, a3, a4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchTypeOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ArrayAttr = mlir::Builder::getArrayAttr(a1, a4, a5);
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(a2) = ArrayAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
}

BOOL mlir::pdl_interp::SwitchTypeOp::verifyInvariantsImpl(mlir::pdl_interp::SwitchTypeOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v3, (void **)"caseValues", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'caseValues'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned __int16 v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v19;
      if (v19)
      {
        BOOL v9 = v20;
        int v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          int v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::SwitchTypeOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  void v24[4] = *MEMORY[0x263EF8340];
  memset(v24, 0, 24);
  __int16 v16 = 0;
  uint64_t v17 = 0;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1)) {
    goto LABEL_21;
  }
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v18))goto LABEL_21; {
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v17, v6)) {
    goto LABEL_21;
  }
  if (v17)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>((uint64_t)a2);
    void *v7 = v17;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_21;
  }
  v18[0] = 0;
  unsigned __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v18);
  if (v8 >= 0x100u)
  {
    if (!(_BYTE)v8) {
      goto LABEL_21;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v21, v18);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v18)) {
        goto LABEL_21;
      }
      int v13 = v22;
      if (v22 >= HIDWORD(v22))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v21, v18);
      }
      else
      {
        *((void *)v21 + v22) = v18[0];
        LODWORD(v22) = v13 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v9 = *((void *)a2 + 1);
      v18[0] = a1;
      v18[1] = (uint64_t)&v15;
      void v18[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchTypeOp::verifyInherentAttrs(v9, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v16))
      {
        mlir::OperationState::addSuccessors(a2, v16);
        mlir::BlockRange::BlockRange(v20, (uint64_t)v21, v22);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v20[0], v20[1]);
        int v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v11 = mlir::Builder::getType<mlir::pdl::TypeType>(v10);
        BOOL v12 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v24, v11, (void *)a2 + 2) != 0;
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  BOOL v12 = 0;
LABEL_22:
  if (v21 != v23) {
    free(v21);
  }
  return v12;
}

BOOL mlir::pdl_interp::SwitchTypesOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(v6, (void **)"caseValues", (const char *)0xA, a3, a4);
}

uint64_t mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        long long v40 = *(void ***)Value;
        uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        uint64_t v33 = v31 + 8 * v32;
        if (v33 != v30)
        {
          while (*(void *)v30
               && *(_UNKNOWN **)(**(void **)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
          {
            uint64_t v44 = *(void *)v30;
            mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
            v30 += 8;
            if (v30 == v33) {
              goto LABEL_25;
            }
          }
          goto LABEL_3;
        }
LABEL_25:
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v44, a5);
  if (v44)
  {
    LODWORD(v40) = 3;
    unsigned int v41 = "attribute '";
    uint64_t v42 = 11;
    uint64_t v9 = &v40;
    int v10 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v35 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v37 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v35, 24);
        int v10 = (char *)v46;
        uint64_t v9 = (void ***)((char *)v46 + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v35, 24);
        uint64_t v9 = &v40;
        int v10 = (char *)v46;
      }
    }
    uint64_t v11 = &v10[24 * v47];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v47;
    if (v44)
    {
      __int16 v43 = 261;
      long long v40 = a2;
      unsigned int v41 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
      if (v44)
      {
        LODWORD(v40) = 3;
        unsigned int v41 = "' failed to satisfy constraint: type-array array attribute";
        uint64_t v42 = 58;
        int v13 = &v40;
        uint64_t v14 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v36 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v38 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
            uint64_t v14 = (char *)v46;
            int v13 = (void ***)((char *)v46 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
            int v13 = &v40;
            uint64_t v14 = (char *)v46;
          }
        }
        uint64_t v15 = &v14[24 * v47];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v47;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      __int16 v19 = v53;
      uint64_t v20 = __p;
      if (v53 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int64_t v53 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v50;
    if (v50)
    {
      uint64_t v22 = v51;
      char v23 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        char v23 = v50;
      }
      int64_t v51 = v21;
      operator delete(v23);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v17;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::pdl_interp::SwitchTypesOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ArrayAttr = mlir::Builder::getArrayAttr(a1, a4, a5);
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(a2) = ArrayAttr;
  uint64_t v14 = *(unsigned int *)(a2 + 208);
  if (v14 >= *(_DWORD *)(a2 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 200, (void *)(a2 + 216), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 208);
  }
  *(void *)(*(void *)(a2 + 200) + 8 * v14) = a6;
  ++*(_DWORD *)(a2 + 208);
  mlir::OperationState::addSuccessors((unsigned int *)a2, a7, a8);
}

BOOL mlir::pdl_interp::SwitchTypesOp::verifyInvariantsImpl(mlir::pdl_interp::SwitchTypesOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(v3, (void **)"caseValues", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'caseValues'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      unsigned __int16 v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      unsigned __int16 v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        int v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          int v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

BOOL mlir::pdl_interp::SwitchTypesOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  void v25[4] = *MEMORY[0x263EF8340];
  memset(v25, 0, 24);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1)) {
    goto LABEL_21;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, v19))goto LABEL_21; {
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v6)) {
    goto LABEL_21;
  }
  if (v18)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>((uint64_t)a2);
    void *v7 = v18;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_21;
  }
  v19[0] = 0;
  unsigned __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 776))(a1, v19);
  if (v8 >= 0x100u)
  {
    if (!(_BYTE)v8) {
      goto LABEL_21;
    }
    llvm::SmallVectorImpl<mlir::Block *>::emplace_back<mlir::Block *&>((uint64_t)&v22, v19);
    while ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 768))(a1, v19)) {
        goto LABEL_21;
      }
      int v14 = v23;
      if (v23 >= HIDWORD(v23))
      {
        llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v22, v19);
      }
      else
      {
        *((void *)v22 + v23) = v19[0];
        LODWORD(v23) = v14 + 1;
      }
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, (void *)a2 + 14))
    {
      uint64_t v9 = *((void *)a2 + 1);
      v19[0] = a1;
      v19[1] = (uint64_t)&v16;
      uint64_t v19[2] = (uint64_t)a2;
      if (mlir::pdl_interp::SwitchTypesOp::verifyInherentAttrs(v9, (uint64_t)a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)&& (*(unsigned __int8 (**)(uint64_t, mlir::Block **))(*(void *)a1 + 768))(a1, &v17))
      {
        mlir::OperationState::addSuccessors(a2, v17);
        mlir::BlockRange::BlockRange(v21, (uint64_t)v22, v23);
        mlir::OperationState::addSuccessors((unsigned int *)a2, v21[0], v21[1]);
        int v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        uint64_t v11 = mlir::Builder::getType<mlir::pdl::TypeType>(v10);
        uint64_t v12 = mlir::pdl::RangeType::get(v11);
        BOOL v13 = (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *))(*(void *)a1 + 696))(a1, v25, v12, (void *)a2 + 2) != 0;
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  BOOL v13 = 0;
LABEL_22:
  if (v22 != v24) {
    free(v22);
  }
  return v13;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseCreateOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v18 = 0;
  memset(v17, 0, 24);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(*a1, &v18, 0)
    || !(*(unsigned __int8 (**)(void))(*(void *)*a1 + 136))()
    || !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)*a1 + 672))(*a1, v17, 1))
  {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = v18;
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    uint64_t v15 = v18;
    uint64_t v16 = a1[1];
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    uint64_t v3 = v15;
    uint64_t v2 = v16;
    LODWORD(v4) = *(_DWORD *)(v16 + 8);
  }
  *(void *)(*(void *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  unint64_t v7 = *(void *)v5;
  unsigned __int16 v8 = (char *)v17;
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v12 = v6 + 1;
    BOOL v13 = v7 + 32 * v6 > (unint64_t)v17;
    if (v7 <= (unint64_t)v17 && v13)
    {
      int v14 = (char *)v17 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      unsigned __int16 v8 = &v14[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      unsigned __int16 v8 = (char *)v17;
    }
  }
  uint64_t v9 = (_OWORD *)(v7 + 32 * *(unsigned int *)(v5 + 8));
  long long v10 = *((_OWORD *)v8 + 1);
  _OWORD *v9 = *(_OWORD *)v8;
  v9[1] = v10;
  ++*(_DWORD *)(v5 + 8);
  return 1;
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void llvm::interleaveComma<mlir::TypeRange,mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::TypeRange,void llvm::interleaveComma<mlir::TypeRange,mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::TypeRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = result;
  BOOL v13 = result == a3;
  if (result != a3 || a2 != a4)
  {
    unint64_t v14 = mlir::TypeRange::dereference_iterator(result, a2);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, v14);
    uint64_t v15 = a2 + 1;
    if (!v13 || v15 != a4)
    {
      if (!v13)
      {
        while (1)
        {
          uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          uint64_t v18 = *(const char **)a7;
          unint64_t v19 = *(void *)(a7 + 8);
          __int16 v20 = (void *)*((void *)v17 + 4);
          if (v19 > *((void *)v17 + 3) - (void)v20)
          {
            llvm::raw_ostream::write(v17, v18, *(void *)(a7 + 8));
          }
          else if (v19)
          {
            memcpy(v20, v18, *(void *)(a7 + 8));
            *((void *)v17 + 4) += v19;
          }
          unint64_t v16 = mlir::TypeRange::dereference_iterator(v12, v15);
          (*(void (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, v16);
          ++v15;
        }
      }
      do
      {
        uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        uint64_t v23 = *(const char **)a7;
        unint64_t v24 = *(void *)(a7 + 8);
        uint64_t v25 = (void *)*((void *)v22 + 4);
        if (v24 > *((void *)v22 + 3) - (void)v25)
        {
          llvm::raw_ostream::write(v22, v23, *(void *)(a7 + 8));
        }
        else if (v24)
        {
          memcpy(v25, v23, *(void *)(a7 + 8));
          *((void *)v22 + 4) += v24;
        }
        unint64_t v21 = mlir::TypeRange::dereference_iterator(v12, v15);
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, v21);
        ++v15;
      }
      while (a4 != v15);
    }
  }
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps8(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl::PDLDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl::PDLDialect>(void)::{lambda(void)#1}>()
{
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::ApplyConstraintOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::ApplyRewriteOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::AreEqualOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::BranchOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::ContinueOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::CreateOperationOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::CreateRangeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::EraseOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::FinalizeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::ForEachOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::GetAttributeTypeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::GetDefiningOpOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::GetUsersOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::GetValueTypeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::IsNotNullOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::RecordMatchOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::pdl_interp::ReplaceOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ApplyConstraintOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        long long v10 = v11;
      }
      else {
        long long v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 4)
  {
    if (*(_DWORD *)a3 != 1701667182) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 9) {
      return 0;
    }
    if (*(void *)a3 != 0x65746167654E7369 || *(unsigned char *)(a3 + 8) != 100) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 4)
  {
    if (*(_DWORD *)result == 1701667182)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          char v9 = a4;
        }
        else {
          char v9 = 0;
        }
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 9 && *(void *)result == 0x65746167654E7369 && *(unsigned char *)(result + 8) == 100)
  {
    if (a4)
    {
      uint64_t result = mlir::BoolAttr::classof(a4);
      if (result) {
        long long v10 = a4;
      }
      else {
        long long v10 = 0;
      }
      *uint64_t v5 = v10;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isNegated", 9, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  char v9 = (void *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (void **)"isNegated", (const char *)9, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"name", (const char *)4, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::getOpPropertyByteSize()
{
  return 16;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  uint64_t v6 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  uint64_t v6 = result;
  if (!*(void *)a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v6, 0);
    *(void *)a3 = result;
  }
  return result;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v5 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  uint64_t v5 = result;
  if (!*a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v5, 0);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyConstraintOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyConstraintOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyConstraintOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyConstraintOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyConstraintOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyConstraintOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267772000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NSuccessors<2>::Impl<Empty>]";
      unint64_t v113 = 92;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      __int16 v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NSuccessors<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NSuccessors<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[45];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      int64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unsigned int v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[320];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v113 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      unint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::ApplyConstraintOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && (uint64_t v6 = a1,
        mlir::pdl_interp::ApplyConstraintOp::verifyInvariantsImpl((mlir::pdl_interp::ApplyConstraintOp *)&v6)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::ApplyConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ApplyRewriteOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      *uint64_t v5 = v8;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ApplyRewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyRewriteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyRewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyRewriteOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyRewriteOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ApplyRewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v87 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v94 = 83;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      int v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267771000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v94 = 87;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[437];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v94 = 88;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      int v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v94 = 89;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      int v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[320] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ApplyNativeRewriteOp::print((mlir::pdl::ApplyNativeRewriteOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
  {
    return 0;
  }
  unint64_t v5 = a1;
  return mlir::pdl_interp::ApplyRewriteOp::verifyInvariantsImpl((mlir::pdl_interp::ApplyRewriteOp *)&v5) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::ApplyRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, unsigned int *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::AreEqualOp::parse;
  a1[3] = (BOOL (*)(uint64_t, unsigned int *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::AreEqualOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::AreEqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::AreEqualOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::AreEqualOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::AreEqualOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::AreEqualOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NSuccessors<2>::Impl<Empty>]";
      unint64_t v176 = 92;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NSuccessors<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NSuccessors<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[45];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v176 = 90;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[89];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      uint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[233];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameTypeOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      int64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameTypeOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameTypeOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[358] == a1;
}