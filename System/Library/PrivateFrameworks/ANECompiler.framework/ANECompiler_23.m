void anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2::operator() const(mlir::Block *)::{lambda(mlir::Value,mlir::Operation *)#1}::operator()(uint64_t a1, unint64_t a2, mlir::Block **a3)
{
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  unsigned char *v40;
  int v41;
  _DWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  llvm *v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  void *buffer;
  unsigned int v59;
  unint64_t v60;
  void *v61;
  unsigned int v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  llvm *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;

  v86 = a2;
  if (**(void **)a1 == a2) {
    return;
  }
  v4 = a2;
  v6 = *(void *)(a1 + 8);
  v87 = 0;
  v8 = v87;
  if (!v7)
  {
    v88 = v87;
    v20 = *(_DWORD *)(v6 + 8);
    v21 = *(unsigned int *)(v6 + 16);
    if (4 * v20 + 4 >= (3 * v21))
    {
      v22 = 2 * v21;
    }
    else
    {
      v22 = *(_DWORD *)(v6 + 16);
      if ((int)v21 + ~v20 - *(_DWORD *)(v6 + 12) > v21 >> 3)
      {
        *(_DWORD *)(v6 + 8) = v20 + 1;
        if (*(void *)v8 == -4096) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    v53 = *(llvm **)v6;
    v54 = (v22 - 1) | ((unint64_t)(v22 - 1) >> 1);
    v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
    v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
    if ((v56 + 1) > 0x40) {
      v57 = v56 + 1;
    }
    else {
      v57 = 64;
    }
    *(_DWORD *)(v6 + 16) = v57;
    buffer = llvm::allocate_buffer(40 * v57, (std::align_val_t)8uLL);
    *(void *)v6 = buffer;
    if (!v53)
    {
      *(void *)(v6 + 8) = 0;
      v62 = *(_DWORD *)(v6 + 16);
      if (v62)
      {
        v63 = 40 * v62 - 40;
        v64 = buffer;
        if (v63 < 0x28) {
          goto LABEL_125;
        }
        v65 = v63 / 0x28 + 1;
        v64 = &buffer[5 * (v65 & 0xFFFFFFFFFFFFFFELL)];
        v66 = v65 & 0xFFFFFFFFFFFFFFELL;
        v67 = buffer;
        do
        {
          *v67 = -4096;
          v67[5] = -4096;
          v67 += 10;
          v66 -= 2;
        }
        while (v66);
        if (v65 != (v65 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_125:
          do
          {
            *v64 = -4096;
            v64 += 5;
          }
          while (v64 != &buffer[5 * v62]);
        }
      }
      v8 = v88;
      ++*(_DWORD *)(v6 + 8);
      if (*(void *)v8 == -4096)
      {
LABEL_18:
        *(void *)v8 = v4;
        operator new();
      }
LABEL_17:
      --*(_DWORD *)(v6 + 12);
      goto LABEL_18;
    }
    *(void *)(v6 + 8) = 0;
    v59 = *(_DWORD *)(v6 + 16);
    if (v59)
    {
      v60 = 40 * v59 - 40;
      if (v60 < 0x28)
      {
        v61 = buffer;
LABEL_86:
        v71 = &buffer[5 * v59];
        do
        {
          *v61 = -4096;
          v61 += 5;
        }
        while (v61 != v71);
        goto LABEL_88;
      }
      v68 = v60 / 0x28 + 1;
      v61 = &buffer[5 * (v68 & 0xFFFFFFFFFFFFFFELL)];
      v69 = v68 & 0xFFFFFFFFFFFFFFELL;
      v70 = buffer;
      do
      {
        *v70 = -4096;
        v70[5] = -4096;
        v70 += 10;
        v69 -= 2;
      }
      while (v69);
      if (v68 != (v68 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_86;
      }
    }
LABEL_88:
    if (v21)
    {
      v72 = 40 * v21;
      v73 = v53;
      do
      {
        if ((*(void *)v73 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v89 = 0;
          v74 = v89;
          *v89 = *(void *)v73;
          v75 = *((void *)v73 + 1);
          *((void *)v73 + 1) = 0;
          v74[1] = v75;
          v76 = *(void *)((char *)v73 + 29);
          *((_OWORD *)v74 + 1) = *((_OWORD *)v73 + 1);
          *(void *)((char *)v74 + 29) = v76;
          ++*(_DWORD *)(v6 + 8);
          v77 = *((void *)v73 + 1);
          *((void *)v73 + 1) = 0;
          if (v77)
          {
            if (*(_DWORD *)(v77 + 272))
            {
              llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(v77, (void (*)(void *, void, uint64_t))llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode, 0);
              *(_DWORD *)(v77 + 272) = 0;
              *(_OWORD *)(v77 + 240) = 0u;
              *(_OWORD *)(v77 + 256) = 0u;
              *(_OWORD *)(v77 + 208) = 0u;
              *(_OWORD *)(v77 + 224) = 0u;
              *(_OWORD *)(v77 + 176) = 0u;
              *(_OWORD *)(v77 + 192) = 0u;
              *(_OWORD *)(v77 + 144) = 0u;
              *(_OWORD *)(v77 + 160) = 0u;
              *(_OWORD *)(v77 + 112) = 0u;
              *(_OWORD *)(v77 + 128) = 0u;
              *(_OWORD *)(v77 + 80) = 0u;
              *(_OWORD *)(v77 + 96) = 0u;
              *(_OWORD *)(v77 + 48) = 0u;
              *(_OWORD *)(v77 + 64) = 0u;
              *(_OWORD *)(v77 + 16) = 0u;
              *(_OWORD *)(v77 + 32) = 0u;
              *(_OWORD *)v77 = 0u;
            }
            *(_DWORD *)(v77 + 276) = 0;
            MEMORY[0x21667D3C0](v77, 0x1020C4078626902);
          }
        }
        v73 = (llvm *)((char *)v73 + 40);
        v72 -= 40;
      }
      while (v72);
    }
    llvm::deallocate_buffer(v53, (void *)(40 * v21));
  }
  v9 = *(void *)(v87 + 8);
  v10 = *(void *)(a1 + 24);
  v11 = *(_DWORD *)(v10 + 16);
  if (!v11) {
    goto LABEL_57;
  }
  v12 = v11 - 1;
  v13 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = *(void *)v10 + 16 * v13;
  v15 = *(void *)v14;
  if (*(mlir::Block ***)v14 != a3)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        v18 = 0;
      }
      else {
        v18 = v15 == -8192;
      }
      if (v18) {
        v16 = v14;
      }
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = *(void *)v10 + 16 * (v19 & v12);
      v15 = *(void *)v14;
      if (*(mlir::Block ***)v14 == a3) {
        goto LABEL_24;
      }
    }
    if (v16) {
      v14 = v16;
    }
    v45 = *(_DWORD *)(v10 + 8);
    if (4 * v45 + 4 < 3 * v11)
    {
      if (v11 + ~v45 - *(_DWORD *)(v10 + 12) > v11 >> 3) {
        goto LABEL_21;
      }
      goto LABEL_58;
    }
LABEL_57:
    v11 *= 2;
LABEL_58:
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v10, v11);
    v46 = *(_DWORD *)(v10 + 16) - 1;
    v47 = v46 & ((a3 >> 4) ^ (a3 >> 9));
    v14 = *(void *)v10 + 16 * v47;
    v48 = *(void *)v14;
    if (*(mlir::Block ***)v14 == a3)
    {
LABEL_59:
      ++*(_DWORD *)(v10 + 8);
      if (a3 == (mlir::Block **)-4096) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    v78 = 0;
    v79 = 1;
    while (v48 != -4096)
    {
      if (v78) {
        v80 = 0;
      }
      else {
        v80 = v48 == -8192;
      }
      if (v80) {
        v78 = v14;
      }
      v81 = v47 + v79++;
      v47 = v81 & v46;
      v14 = *(void *)v10 + 16 * (v81 & v46);
      v48 = *(void *)v14;
      if (*(mlir::Block ***)v14 == a3) {
        goto LABEL_59;
      }
    }
    if (v78) {
      v14 = v78;
    }
LABEL_21:
    v23 = *(void *)v14;
    ++*(_DWORD *)(v10 + 8);
    if (v23 == -4096)
    {
LABEL_23:
      *(void *)v14 = a3;
      *(_DWORD *)(v14 + 8) = 0;
      v4 = v86;
      goto LABEL_24;
    }
LABEL_22:
    --*(_DWORD *)(v10 + 12);
    goto LABEL_23;
  }
LABEL_24:
  v24 = *(unsigned int *)(v14 + 8);
  v25 = *(void *)(a1 + 32);
  mlir::LivenessBlockInfo::getEndOperation(**(void **)(a1 + 40), (uint64_t **)v4, a3);
  v27 = v26;
  v28 = *(_DWORD *)(v25 + 16);
  if (!v28) {
    goto LABEL_64;
  }
  v29 = v28 - 1;
  v30 = ((v26 >> 4) ^ (v26 >> 9)) & (v28 - 1);
  v31 = *(void *)v25 + 16 * v30;
  v32 = *(void *)v31;
  if (v26 == *(void *)v31) {
    goto LABEL_40;
  }
  v33 = 0;
  v34 = 1;
  while (v32 != -4096)
  {
    if (v33) {
      v35 = 0;
    }
    else {
      v35 = v32 == -8192;
    }
    if (v35) {
      v33 = v31;
    }
    v36 = v30 + v34++;
    v30 = v36 & v29;
    v31 = *(void *)v25 + 16 * (v36 & v29);
    v32 = *(void *)v31;
    if (v26 == *(void *)v31) {
      goto LABEL_40;
    }
  }
  if (v33) {
    v31 = v33;
  }
  v49 = *(_DWORD *)(v25 + 8);
  if (4 * v49 + 4 < 3 * v28)
  {
    if (v28 + ~v49 - *(_DWORD *)(v25 + 12) > v28 >> 3) {
      goto LABEL_37;
    }
  }
  else
  {
LABEL_64:
    v28 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v25, v28);
  v50 = *(_DWORD *)(v25 + 16) - 1;
  v51 = v50 & ((v27 >> 4) ^ (v27 >> 9));
  v31 = *(void *)v25 + 16 * v51;
  v52 = *(void *)v31;
  if (v27 == *(void *)v31)
  {
LABEL_66:
    ++*(_DWORD *)(v25 + 8);
    if (v27 == -4096) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  v82 = 0;
  v83 = 1;
  while (v52 != -4096)
  {
    if (v82) {
      v84 = 0;
    }
    else {
      v84 = v52 == -8192;
    }
    if (v84) {
      v82 = v31;
    }
    v85 = v51 + v83++;
    v51 = v85 & v50;
    v31 = *(void *)v25 + 16 * (v85 & v50);
    v52 = *(void *)v31;
    if (v27 == *(void *)v31) {
      goto LABEL_66;
    }
  }
  if (v82) {
    v31 = v82;
  }
LABEL_37:
  v37 = *(void *)v31;
  ++*(_DWORD *)(v25 + 8);
  if (v37 != -4096) {
LABEL_38:
  }
    --*(_DWORD *)(v25 + 12);
LABEL_39:
  *(void *)v31 = v27;
  *(_DWORD *)(v31 + 8) = 0;
  v4 = v86;
LABEL_40:
  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(v9, v24, *(unsigned int *)(v31 + 8), 0);
  v38 = *(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v38 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    v38 = 0;
  }
  v89 = (void *)v38;
  if (v38)
  {
    v39 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v89) + 136);
    if (v39 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v43 = *(unsigned __int8 *)(v8 + 20);
      v40 = (unsigned char *)(v8 + 20);
      v42 = v40 - 4;
      if (v43)
      {
LABEL_50:
        *v42 = 0;
        return;
      }
    }
    else if (v39 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v44 = *(unsigned __int8 *)(v8 + 28);
      v40 = (unsigned char *)(v8 + 28);
      v42 = v40 - 4;
      if (v44) {
        goto LABEL_50;
      }
    }
    else
    {
      if (v39 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return;
      }
      v41 = *(unsigned __int8 *)(v8 + 36);
      v40 = (unsigned char *)(v8 + 36);
      v42 = v40 - 4;
      if (v41) {
        goto LABEL_50;
      }
    }
    *v40 = 1;
    goto LABEL_50;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  v15[8] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 272))
  {
    uint64_t v12 = a1;
    v13 = v15;
    uint64_t v14 = 0x400000000;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(&v12, a2);
LABEL_44:
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert((uint64_t)&v12, a2, a3, a4);
    if (v13 != v15) {
      free(v13);
    }
    return;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 276);
  if (v7 == 16)
  {
    uint64_t v12 = a1;
    v13 = v15;
    HIDWORD(v14) = 4;
    if (*(void *)(a1 + 8) >= a2)
    {
      uint64_t v8 = 16;
    }
    else if (*(void *)(a1 + 24) >= a2)
    {
      uint64_t v8 = 0x100000010;
    }
    else if (*(void *)(a1 + 40) >= a2)
    {
      uint64_t v8 = 0x200000010;
    }
    else if (*(void *)(a1 + 56) >= a2)
    {
      uint64_t v8 = 0x300000010;
    }
    else if (*(void *)(a1 + 72) >= a2)
    {
      uint64_t v8 = 0x400000010;
    }
    else if (*(void *)(a1 + 88) >= a2)
    {
      uint64_t v8 = 0x500000010;
    }
    else if (*(void *)(a1 + 104) >= a2)
    {
      uint64_t v8 = 0x600000010;
    }
    else if (*(void *)(a1 + 120) >= a2)
    {
      uint64_t v8 = 0x700000010;
    }
    else if (*(void *)(a1 + 136) >= a2)
    {
      uint64_t v8 = 0x800000010;
    }
    else if (*(void *)(a1 + 152) >= a2)
    {
      uint64_t v8 = 0x900000010;
    }
    else if (*(void *)(a1 + 168) >= a2)
    {
      uint64_t v8 = 0xA00000010;
    }
    else if (*(void *)(a1 + 184) >= a2)
    {
      uint64_t v8 = 0xB00000010;
    }
    else if (*(void *)(a1 + 200) >= a2)
    {
      uint64_t v8 = 0xC00000010;
    }
    else if (*(void *)(a1 + 216) >= a2)
    {
      uint64_t v8 = 0xD00000010;
    }
    else if (*(void *)(a1 + 232) >= a2)
    {
      uint64_t v8 = 0xE00000010;
    }
    else if (*(void *)(a1 + 248) >= a2)
    {
      uint64_t v8 = 0xF00000010;
    }
    else
    {
      uint64_t v8 = 0x1000000010;
    }
    v15[0] = a1;
    v15[1] = v8;
    LODWORD(v14) = 1;
    goto LABEL_44;
  }
  int v9 = 0;
  if (v7)
  {
    v10 = (unint64_t *)(a1 + 8);
    while (1)
    {
      unint64_t v11 = *v10;
      v10 += 2;
      if (v11 >= a2) {
        break;
      }
      if (v7 == ++v9)
      {
        int v9 = *(_DWORD *)(a1 + 276);
        break;
      }
    }
  }
  LODWORD(v12) = v9;
  *(_DWORD *)(a1 + 276) = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(a1, &v12, v7, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::ByteCodeLiveRange>>,mlir::Value,anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::ByteCodeLiveRange>>::LookupBucketFor<mlir::Value>(uint64_t a1, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    v5 = &unk_267770000;
    {
      uint64_t v24 = a1;
      v21 = a3;
      v22 = a4;
      int v23 = a2;
      unint64_t v20 = v4;
      v5 = &unk_267770000;
      unint64_t v4 = v20;
      a3 = v21;
      a2 = v23;
      a4 = v22;
      int v18 = v17;
      a1 = v24;
      if (v18)
      {
        unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v19 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        v5 = (void *)&unk_267770000;
        unint64_t v4 = v20;
        a3 = v21;
        a2 = v23;
        a1 = v24;
        a4 = v22;
      }
    }
    uint64_t v6 = (v5[385] + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    int v8 = a2 - 1;
    unsigned int v9 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    v10 = (void *)(a1 + 40 * v9);
    uint64_t v11 = *v10;
    if (*a3 == *v10)
    {
LABEL_4:
      *a4 = v10;
      return 1;
    }
    else
    {
      v13 = 0;
      int v14 = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        v10 = (void *)(a1 + 40 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a3 == *v10) {
          goto LABEL_4;
        }
      }
      if (v13) {
        v10 = v13;
      }
      *a4 = v10;
      return 0;
    }
  }
  else
  {
    *a4 = 0;
    return 0;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(uint64_t a1, void (*a2)(void *, void, uint64_t), uint64_t a3)
{
  v33[4] = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 272);
  if (v3)
  {
    v31 = v33;
    uint64_t v32 = 0x400000000;
    v28 = v30;
    uint64_t v29 = 0x400000000;
    if (*(_DWORD *)(a1 + 276))
    {
      unsigned int v6 = 0;
      unsigned int v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 8 + 8 * v7);
        if (v6 >= HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v6 + 1, 8);
          unsigned int v6 = v32;
        }
        *((void *)v31 + v6) = v8;
        unsigned int v6 = v32 + 1;
        LODWORD(v32) = v32 + 1;
        ++v7;
      }
      while (v7 != *(_DWORD *)(a1 + 276));
      int v3 = *(_DWORD *)(a1 + 272);
    }
    uint64_t v9 = (v3 - 1);
    if (v3 != 1)
    {
      v10 = (void *)(a1 + (a3 >> 1));
      if (a3)
      {
        do
        {
          uint64_t v17 = v32;
          if (v32)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = 0;
              unsigned int v20 = v29;
              uint64_t v21 = 8 * (*((void *)v31 + v18) & 0x3FLL) + 8;
              do
              {
                uint64_t v22 = *(void *)((*((void *)v31 + v18) & 0xFFFFFFFFFFFFFFC0) + v19);
                if (v20 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v20 + 1, 8);
                  unsigned int v20 = v29;
                }
                v28[v20] = v22;
                unsigned int v20 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v19 += 8;
              }
              while (v21 != v19);
              (*(void (**)(void *, void, uint64_t))(*v10 + a2))(v10, *((void *)v31 + v18++), v9);
            }
            while (v18 != v17);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          uint64_t v9 = (v9 - 1);
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v11 = v32;
          if (v32)
          {
            uint64_t v12 = 0;
            do
            {
              uint64_t v13 = 0;
              unsigned int v14 = v29;
              uint64_t v15 = 8 * (*((void *)v31 + v12) & 0x3FLL) + 8;
              do
              {
                uint64_t v16 = *(void *)((*((void *)v31 + v12) & 0xFFFFFFFFFFFFFFC0) + v13);
                if (v14 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v14 + 1, 8);
                  unsigned int v14 = v29;
                }
                v28[v14] = v16;
                unsigned int v14 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v13 += 8;
              }
              while (v15 != v13);
              a2(v10, *((void *)v31 + v12++), v9);
            }
            while (v12 != v11);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          uint64_t v9 = (v9 - 1);
        }
        while (v9);
      }
    }
    if (v32)
    {
      int v23 = (void *)(a1 + (a3 >> 1));
      uint64_t v24 = 0;
      if (a3)
      {
        uint64_t v26 = 8 * v32;
        do
        {
          (*(void (**)(void *, void, void))(*v23 + a2))(v23, *(void *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v26 != v24);
      }
      else
      {
        uint64_t v25 = 8 * v32;
        do
        {
          a2(v23, *(void *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v25 != v24);
      }
    }
    if (v28 != (void *)v30) {
      free(v28);
    }
    if (v31 != v33) {
      free(v31);
    }
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode(uint64_t result, uint64_t a2)
{
  v2 = *(unint64_t **)(result + 280);
  *(void *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  unint64_t *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 != a1 + 16 && *(void *)a2 != a2 + 16)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v5;
    int v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v6;
    return;
  }
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a1 + 12) < v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
    {
LABEL_7:
      unsigned int v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v8;
      }
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8) {
      goto LABEL_7;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8, 8);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v8 >= v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  if (!v10)
  {
LABEL_11:
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    int v13 = v8 - v9;
    if (v8 > v9) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)(*(void *)a1 + v14);
    *(void *)(*(void *)a1 + v14) = *(void *)(*(void *)a2 + v14);
    *(void *)(v15 + v14) = v16;
    v14 += 8;
  }
  while (8 * v10 != v14);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  int v13 = v8 - v9;
  if (v8 > v9)
  {
LABEL_12:
    if (v10 != v8)
    {
      memcpy((void *)(*(void *)a2 + 8 * v12), (const void *)(*(void *)a1 + 8 * v10), *(void *)a1 + 8 * v11 - (*(void *)a1 + 8 * v10));
      unsigned int v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v13 + v9;
    *(_DWORD *)(a1 + 8) = v10;
    return;
  }
LABEL_23:
  int v17 = v9 - v8;
  if (v9 > v8)
  {
    if (v10 != v9)
    {
      memcpy((void *)(*(void *)a1 + 8 * v11), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v12 - (*(void *)a2 + 8 * v10));
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v17 + v8;
    *(_DWORD *)(a2 + 8) = v10;
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = *(void *)a1;
  if (!*(_DWORD *)(*(void *)a1 + 272))
  {
    uint64_t v9 = a1 + 8;
    uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)a1, (_DWORD *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4), *(unsigned int *)(v8 + 276), a2, a3, a4);
    if (result <= 0x10)
    {
      *(_DWORD *)(v8 + 276) = result;
      *(_DWORD *)(*(void *)v9 + 8) = result;
      return result;
    }
    unint64_t v11 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(v8, (unsigned int *)*(unsigned int *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4));
    llvm::IntervalMapImpl::Path::replaceRoot((unsigned int *)(a1 + 8), v8 + 8, *(_DWORD *)(v8 + 276), v11);
  }

  return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert((_DWORD *)a1, a2, a3, a4);
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 256) != a6
    || (uint64_t v9 = a1 + 16 * v8, v11 = *(void *)(v9 + 8), v10 = (void *)(v9 + 8), v11 + 1 != a4))
  {
    if (v7 == 16) {
      return 17;
    }
LABEL_11:
    int v16 = a3 - v7;
    if (a3 == v7)
    {
      int v17 = (void *)(a1 + 16 * a3);
      *int v17 = a4;
      v17[1] = a5;
      *(unsigned char *)(a1 + a3 + 256) = a6;
      return (a3 + 1);
    }
    if (*(unsigned __int8 *)(a1 + v7 + 256) == a6)
    {
      uint64_t v18 = (void *)(a1 + 16 * v7);
      if (a5 + 1 == *v18)
      {
        *uint64_t v18 = a4;
        return a3;
      }
    }
    if (a3 == 16) {
      return 17;
    }
    uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
    uint64_t v20 = (~v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      uint64_t v25 = (a3 - 1);
      if (v20 <= v25)
      {
        uint64_t v26 = (16 * a3) | 8;
        unint64_t v27 = a1 + v26;
        uint64_t v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          uint64_t v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            uint64_t v30 = (16 * (a3 - 1)) | 8;
            unint64_t v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              uint64_t v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 256 - v20 <= a1 + (unint64_t)a3 + 256
                && a1 + v25 + 256 - v20 <= (unint64_t)(a1 + v25 + 256))
              {
                unint64_t v33 = a1 + v29 - v28;
                unint64_t v34 = a1 + v26 - v28;
                unint64_t v35 = v29 + a1 + 16;
                unint64_t v36 = a1 + v32 - v28;
                unint64_t v37 = a1 + v30 - v28;
                unint64_t v38 = v32 + a1 + 16;
                unint64_t v39 = a1 + a3 + 256 - v20;
                unint64_t v40 = a3 + a1 + 257;
                unint64_t v41 = a1 + v25 + 256 - v20;
                unint64_t v42 = v25 + a1 + 257;
                BOOL v44 = v33 < v31 && v36 < v27;
                BOOL v46 = v33 < v38 && v37 < v27;
                BOOL v48 = v33 < v40 && v39 < v27;
                BOOL v50 = v33 < v42 && v41 < v27;
                BOOL v52 = v34 < v31 && v36 < v35;
                BOOL v54 = v34 < v38 && v37 < v35;
                BOOL v56 = v34 < v40 && v39 < v35;
                BOOL v58 = v34 < v42 && v41 < v35;
                BOOL v60 = v36 < v40 && v39 < v31;
                BOOL v62 = v37 < v40 && v39 < v38;
                BOOL v64 = v39 < v42 && v41 < v40;
                BOOL v65 = v34 >= v27 || v33 >= v35;
                if (!v65 || v44)
                {
                  uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
                }
                else
                {
                  uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
                  if (!v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                  {
                    uint64_t v66 = v20 + 1;
                    if (v20 < 0xF)
                    {
                      uint64_t v67 = 0;
                      goto LABEL_117;
                    }
                    uint64_t v67 = v66 & 0x1FFFFFFF0;
                    uint64_t v78 = v66 & 0x1FFFFFFF0;
                    unsigned int v79 = a3;
                    do
                    {
                      uint64_t v80 = v79 - 1;
                      v81 = (const double *)(a1 - 240 + 16 * v80);
                      v82 = v81;
                      float64x2x2_t v172 = vld2q_f64(v82);
                      v82 += 4;
                      float64x2x2_t v174 = vld2q_f64(v82);
                      v83 = v81 + 8;
                      float64x2x2_t v176 = vld2q_f64(v83);
                      v84 = v81 + 12;
                      float64x2x2_t v178 = vld2q_f64(v84);
                      v85 = v81 + 16;
                      float64x2x2_t v179 = vld2q_f64(v85);
                      v86 = v81 + 20;
                      float64x2x2_t v180 = vld2q_f64(v86);
                      v87 = v81 + 24;
                      float64x2x2_t v181 = vld2q_f64(v87);
                      v81 += 28;
                      float64x2x2_t v182 = vld2q_f64(v81);
                      v88 = (double *)(a1 - 248 + 16 * v79);
                      v89 = v88 + 1;
                      vst2q_f64(v89, v172);
                      v90 = v88 + 5;
                      vst2q_f64(v90, v174);
                      v91 = v88 + 9;
                      vst2q_f64(v91, v176);
                      v92 = v88 + 13;
                      vst2q_f64(v92, v178);
                      v93 = v88 + 17;
                      vst2q_f64(v93, v179);
                      v94 = v88 + 21;
                      vst2q_f64(v94, v180);
                      v95 = v88 + 25;
                      vst2q_f64(v95, v181);
                      v88 += 29;
                      vst2q_f64(v88, v182);
                      *(_OWORD *)(a1 + 241 + v79) = *(_OWORD *)(a1 + 241 + v80);
                      v79 -= 16;
                      v78 -= 16;
                    }
                    while (v78);
                    if (v66 == v67) {
                      goto LABEL_22;
                    }
                    if ((v66 & 8) != 0)
                    {
LABEL_117:
                      v16 -= v66 & 0xFFFFFFF8;
                      unsigned int v68 = a3 - v67;
                      uint64_t v69 = v67 - (v66 & 0x1FFFFFFF8);
                      do
                      {
                        uint64_t v70 = v68 - 1;
                        v71 = (const double *)(a1 - 112 + 16 * v70);
                        v72 = v71;
                        float64x2x2_t v171 = vld2q_f64(v72);
                        v72 += 4;
                        float64x2x2_t v173 = vld2q_f64(v72);
                        v73 = v71 + 8;
                        float64x2x2_t v175 = vld2q_f64(v73);
                        v71 += 12;
                        float64x2x2_t v177 = vld2q_f64(v71);
                        v74 = (double *)(a1 - 120 + 16 * v68);
                        v75 = v74 + 1;
                        vst2q_f64(v75, v171);
                        v76 = v74 + 5;
                        vst2q_f64(v76, v173);
                        v77 = v74 + 9;
                        vst2q_f64(v77, v175);
                        v74 += 13;
                        vst2q_f64(v74, v177);
                        *(void *)(a1 + 249 + v68) = *(void *)(a1 + 249 + v70);
                        v68 -= 8;
                        v69 += 8;
                      }
                      while (v69);
                      if (v66 == (v66 & 0x1FFFFFFF8)) {
                        goto LABEL_22;
                      }
                      goto LABEL_20;
                    }
                    v16 -= v67;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    unsigned int v21 = v7 + v16;
    do
    {
      uint64_t v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(unsigned char *)(a1 + 256 + v21--) = *(unsigned char *)(a1 + 256 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    int v23 = (void *)(a1 + 16 * v7);
    *int v23 = a4;
    v23[1] = a5;
    *uint64_t v19 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if (a3 != v7 && *(unsigned __int8 *)(a1 + v7 + 256) == a6)
  {
    uint64_t v12 = 16 * v7;
    if (a5 + 1 == *(void *)(a1 + 16 * v7))
    {
      void *v10 = *(void *)(a1 + 16 * v7 + 8);
      uint64_t v13 = (v7 + 1);
      if (v13 == a3) {
        return (a3 - 1);
      }
      unsigned int v14 = ~v7 + a3;
      if (v14 < 8)
      {
        unsigned int v15 = v7;
        goto LABEL_243;
      }
      uint64_t v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        unsigned int v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        unsigned int v15 = v7;
      }
      else
      {
        unint64_t v97 = a1 + v12;
        unint64_t v98 = a1 + v12 + 8;
        uint64_t v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          unsigned int v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          unsigned int v15 = v7;
        }
        else
        {
          uint64_t v100 = 16 * (v7 + 1);
          unint64_t v101 = a1 + v100;
          unint64_t v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            unsigned int v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            unsigned int v15 = v7;
          }
          else
          {
            uint64_t v103 = v12 + v99;
            unint64_t v104 = a1 + (v103 | 8);
            unint64_t v105 = v103 + a1 + 16;
            unint64_t v106 = v7 + a1 + 256;
            unint64_t v107 = v7 + a1 + v96 + 257;
            unint64_t v108 = a1 + ((v99 + v100) | 8);
            unint64_t v109 = v99 + v100 + a1 + 16;
            unint64_t v110 = v13 + a1 + 256;
            unint64_t v111 = v13 + a1 + v96 + 257;
            BOOL v113 = v97 < v107 && v106 < v104;
            BOOL v115 = v97 < v108 && v101 < v104;
            BOOL v117 = v97 < v109 && v102 < v104;
            BOOL v119 = v97 < v111 && v110 < v104;
            BOOL v121 = v98 < v107 && v106 < v105;
            BOOL v123 = v98 < v108 && v101 < v105;
            BOOL v125 = v98 < v109 && v102 < v105;
            BOOL v127 = v98 < v111 && v110 < v105;
            BOOL v129 = v106 < v108 && v101 < v107;
            BOOL v131 = v106 < v109 && v102 < v107;
            BOOL v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              unsigned int v15 = v7;
              goto LABEL_243;
            }
            if (v113)
            {
              unsigned int v15 = v7;
            }
            else if (v115)
            {
              unsigned int v15 = v7;
            }
            else if (v117)
            {
              unsigned int v15 = v7;
            }
            else if (v119)
            {
              unsigned int v15 = v7;
            }
            else if (v121)
            {
              unsigned int v15 = v7;
            }
            else if (v123)
            {
              unsigned int v15 = v7;
            }
            else if (v125)
            {
              unsigned int v15 = v7;
            }
            else if (v127)
            {
              unsigned int v15 = v7;
            }
            else if (v129)
            {
              unsigned int v15 = v7;
            }
            else if (v131)
            {
              unsigned int v15 = v7;
            }
            else if (v133)
            {
              unsigned int v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                unsigned int v135 = 0;
                goto LABEL_224;
              }
              unsigned int v135 = v14 & 0xFFFFFFF0;
              unsigned int v136 = v7;
              unsigned int v137 = v14 & 0xFFFFFFF0;
              do
              {
                uint64_t v138 = v136 + 1;
                v139 = (long long *)(a1 + 16 * v138);
                long long v141 = *v139;
                long long v140 = v139[1];
                long long v143 = v139[2];
                long long v142 = v139[3];
                uint64_t v144 = v136;
                long long v146 = v139[4];
                long long v145 = v139[5];
                long long v148 = v139[6];
                long long v147 = v139[7];
                long long v150 = v139[8];
                long long v149 = v139[9];
                long long v152 = v139[10];
                long long v151 = v139[11];
                long long v154 = v139[12];
                long long v153 = v139[13];
                long long v156 = v139[14];
                long long v155 = v139[15];
                v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                _OWORD *v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 256 + v144) = *(_OWORD *)(a1 + 256 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135) {
                return (a3 - 1);
              }
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                unsigned int v15 = v7 + (v14 & 0xFFFFFFF8);
                unsigned int v158 = v135 - (v14 & 0xFFFFFFF8);
                unsigned int v159 = v135 + v7;
                do
                {
                  uint64_t v160 = v159 + 1;
                  v161 = (long long *)(a1 + 16 * v160);
                  long long v163 = *v161;
                  long long v162 = v161[1];
                  long long v165 = v161[2];
                  long long v164 = v161[3];
                  long long v167 = v161[4];
                  long long v166 = v161[5];
                  long long v169 = v161[6];
                  long long v168 = v161[7];
                  v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  _OWORD *v170 = v163;
                  v170[1] = v162;
                  *(void *)(a1 + 256 + v159) = *(void *)(a1 + 256 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8)) {
                  return (a3 - 1);
                }
                goto LABEL_243;
              }
              unsigned int v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_243:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(unsigned char *)(a1 + 256 + v15) = *(unsigned char *)(a1 + 256 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while (a3 != v13);
      return (a3 - 1);
    }
  }
  void *v10 = a5;
  return a3;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(_DWORD *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 276);
  if (v5)
  {
    uint64_t v6 = 0;
    while (*(void *)(v4 + 136 + 8 * v6) < a2)
    {
      if (v5 == ++v6)
      {
        uint64_t v6 = *(unsigned int *)(*(void *)a1 + 276);
        int v7 = *(_DWORD *)(v4 + 272);
        uint64_t v8 = (uint64_t)(a1 + 2);
        a1[4] = 0;
        int v9 = a1[5];
        if (v7) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
    }
    int v12 = *(_DWORD *)(v4 + 272);
    uint64_t v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    int v9 = a1[5];
    if (v12) {
      goto LABEL_8;
    }
LABEL_11:
    if (v9)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
LABEL_19:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v8, a1 + 6, 1uLL, 16);
    uint64_t v11 = a1[4];
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  int v10 = *(_DWORD *)(v4 + 272);
  uint64_t v8 = (uint64_t)(a1 + 2);
  a1[4] = 0;
  int v9 = a1[5];
  if (!v10) {
    goto LABEL_11;
  }
LABEL_8:
  v4 += 8;
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v11 = 0;
LABEL_13:
  uint64_t v13 = (void *)(*(void *)v8 + 16 * v11);
  void *v13 = v4;
  v13[1] = v5 | (v6 << 32);
  int v14 = a1[4];
  a1[4] = v14 + 1;
  if (v14 != -1 && *(_DWORD *)(*(void *)v8 + 12) < *(_DWORD *)(*(void *)v8 + 8))
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind((uint64_t)a1, a2);
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1 + 8;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8) + 16 * (v5 - 1);
  int v7 = *(_DWORD *)(*(void *)a1 + 272);
  uint64_t v8 = *(void *)(*(void *)v6 + 8 * *(unsigned int *)(v6 + 12));
  int v9 = v7 - v5;
  if (v7 != v5)
  {
    do
    {
      unsigned int v10 = 0;
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        unsigned int v12 = v10;
        unint64_t v13 = *(void *)((v8 & 0xFFFFFFFFFFFFFFC0) + 8 * v10++ + 0x60);
      }
      while (v13 < a2);
      if (v5 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
        unsigned int v5 = *(_DWORD *)(a1 + 16);
      }
      int v14 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v5);
      *int v14 = v11;
      v14[1] = (v8 & 0x3F | ((unint64_t)v12 << 32)) + 1;
      unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v5;
      uint64_t v8 = *(void *)(v11 + 8 * v12);
      --v9;
    }
    while (v9);
  }
  unsigned int v15 = 0;
  do
  {
    unsigned int v16 = v15;
    unint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFFC0) + 16 * v15++ + 8);
  }
  while (v17 < a2);
  uint64_t v18 = v16;
  if (v5 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v19 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v5);
  *uint64_t v19 = v8 & 0xFFFFFFFFFFFFFFC0;
  v19[1] = (v8 & 0x3F | (v18 << 32)) + 1;
  ++*(_DWORD *)(a1 + 16);
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert(_DWORD *a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v9 = a1[4];
  if (!v9 || (uint64_t v10 = *(void *)v8, *(_DWORD *)(*(void *)v8 + 12) >= *(_DWORD *)(*(void *)v8 + 8)))
  {
    uint64_t v11 = *(unsigned int *)(*(void *)a1 + 272);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(void *)a1 + 272));
    uint64_t v10 = *((void *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    unsigned int v9 = a1[4];
  }
  uint64_t v12 = v10 + 16 * v9;
  if (!*(_DWORD *)(v12 - 4) && **(void **)(v12 - 16) > a2)
  {
    uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling(v8, v9 - 1);
    if (LeftSibling)
    {
      if (*(unsigned __int8 *)(LeftSibling + 176) == a4)
      {
        unint64_t v14 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
        uint64_t v15 = LeftSibling & 0x3F;
        unsigned int v16 = (unint64_t *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8);
        if (*(void *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8) + 1 == a2)
        {
          uint64_t v17 = a1[4];
          uint64_t v18 = *(void *)(*((void *)a1 + 1) + 16 * v17 - 16);
          llvm::IntervalMapImpl::Path::moveLeft(v8, v17 - 1);
          if (*(void *)v18 > a3 && (*(unsigned __int8 *)(v18 + 176) != a4 || a3 + 1 != *(void *)v18))
          {
            unsigned int v20 = a1[4] - 1;
            *unsigned int v16 = a3;
            return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop((uint64_t)a1, v20, a3);
          }
          a2 = *(void *)(v14 + 16 * v15);
          llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase((llvm::IntervalMapImpl::Path *)a1, 0);
        }
      }
    }
    else
    {
      **(void **)a1 = a2;
    }
  }
  uint64_t v22 = (_DWORD *)(*((void *)a1 + 1) + 16 * a1[4]);
  int v23 = *--v22;
  uint64_t v24 = *(v22 - 1);
  BOOL v25 = v23 == v24;
  uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)(v22 - 3), v22, v24, a2, a3, a4);
  if (result >= 0xC)
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, a1[4] - 1);
    uint64_t v26 = (_DWORD *)(*((void *)a1 + 1) + 16 * a1[4]);
    int v27 = *--v26;
    uint64_t v28 = *(v26 - 1);
    BOOL v25 = v27 == v28;
    uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)(v26 - 3), v26, v28, a2, a3, a4);
  }
  int v29 = a1[4];
  uint64_t v30 = *((void *)a1 + 1);
  *(_DWORD *)(v30 + 16 * (v29 - 1) + 8) = result;
  if (v29 != 1)
  {
    uint64_t v31 = v30 + 16 * (v29 - 2);
    *(void *)(*(void *)v31 + 8 * *(unsigned int *)(v31 + 12)) = *(void *)(*(void *)v31
                                                                                + 8 * *(unsigned int *)(v31 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25)
  {
    int v32 = a1[4];
    unsigned int v33 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v34 = *(void *)v8;
      uint64_t v35 = 16 * v33;
      while (1)
      {
        uint64_t v36 = v35 - 16;
        if (v35 == 16) {
          break;
        }
        uint64_t v37 = v34 + v35;
        uint64_t v38 = *(void *)(v37 - 16);
        uint64_t v40 = v37 - 8;
        LODWORD(v37) = *(_DWORD *)(v37 - 8);
        uint64_t v39 = *(unsigned int *)(v40 + 4);
        *(void *)(v38 + 8 * v39 + 96) = a3;
        LODWORD(v38) = v37 - 1;
        uint64_t v35 = v36;
        if (v39 != v38) {
          return result;
        }
      }
      *(void *)(*(void *)v34 + 8 * *(unsigned int *)(v34 + 12) + 128) = a3;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(uint64_t a1, unsigned int *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v15, a2, 1);
  uint64_t v4 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  unint64_t v5 = (unint64_t)v4;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  uint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = 0;
    do
    {
      v4[v7] = *(_OWORD *)(a1 + 16 * v7);
      *((unsigned char *)v4 + v7 + 176) = *(unsigned char *)(a1 + v7 + 256);
      ++v7;
    }
    while (v6 != v7);
    unsigned int v8 = v15;
  }
  else
  {
    unsigned int v8 = 0;
  }
  unint64_t v9 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  int v10 = v16;
  if (v16)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v8 + v11;
      *(_OWORD *)(v9 + 16 * v11) = *(_OWORD *)(a1 + 16 * v12);
      *(unsigned char *)(v9 + v11++ + 176) = *(unsigned char *)(a1 + v12 + 256);
    }
    while (v10 != v11);
    uint64_t v13 = (v16 - 1);
  }
  else
  {
    uint64_t v13 = 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 136) = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0) + 16 * (v15 - 1) + 8);
  *(void *)(a1 + 8) = v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1);
  *(void *)(a1 + 144) = *(void *)((v9 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0) + 16 * v13 + 8);
  *(void *)(a1 + 16) = v9 & 0xFFFFFFFFFFFFFFC0 | v13;
  *(void *)a1 = *(void *)(v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0);
  *(void *)(a1 + 272) = 0x200000001;
  return v3;
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = 16 * a2;
    while (1)
    {
      uint64_t v5 = v4 - 16;
      if (v4 == 16) {
        break;
      }
      uint64_t v6 = v3 + v4;
      uint64_t v7 = *(void *)(v6 - 16);
      uint64_t v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      uint64_t v8 = *(unsigned int *)(v9 + 4);
      *(void *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      uint64_t v4 = v5;
      if (v8 != v7) {
        return result;
      }
    }
    *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12) + 128) = a3;
  }
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase(llvm::IntervalMapImpl::Path *this, int a2)
{
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((unsigned int *)this + 4);
  uint64_t v8 = v4 + 16 * v7;
  uint64_t v9 = *(void **)(v8 - 16);
  int v10 = *(_DWORD *)(v8 - 8);
  if (v10 == 1)
  {
    uint64_t v11 = *(void **)(v6 + 280);
    *uint64_t v9 = *v11;
    *uint64_t v11 = v9;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode((uint64_t *)this, *(_DWORD *)(v6 + 272));
    if (a2)
    {
      if (*(_DWORD *)(v6 + 272))
      {
        uint64_t v12 = *((unsigned int *)this + 4);
        if (v12)
        {
          uint64_t v13 = *v5;
          if (*(_DWORD *)(*v5 + 12) < *(_DWORD *)(*v5 + 8))
          {
            unint64_t v14 = (int *)(v13 + 12);
            uint64_t v15 = *((unsigned int *)this + 4);
            while (1)
            {
              int v16 = *v14;
              v14 += 4;
              if (v16) {
                break;
              }
              if (!--v15)
              {
                uint64_t v17 = *(void **)(v13 + 16 * v12 - 16);
                goto LABEL_150;
              }
            }
          }
        }
      }
    }
    return;
  }
  uint64_t v18 = *(unsigned int *)(v8 - 4);
  uint64_t v19 = (v18 + 1);
  if (v19 != v10)
  {
    unsigned int v20 = v10 + ~v18;
    if (v20 < 8)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    uint64_t v22 = (v10 - 2 - v18);
    uint64_t v23 = 2 * v18;
    uint64_t v24 = (char *)&v9[2 * v18];
    unint64_t v25 = (unint64_t)(v24 + 8);
    uint64_t v26 = 16 * v22;
    uint64_t v27 = 2 * (v18 + 1);
    uint64_t v28 = (char *)&v9[v27];
    unint64_t v29 = (unint64_t)&v9[v27 + 1];
    if (v10 - 2 < v18
      || v10 - 1 < v19
      || (unint64_t)&v24[v26 + 8] < v25
      || &v24[v26] < v24
      || v29 + v26 < v29
      || &v9[v27 + (unint64_t)v26 / 8] < (void *)v28)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    uint64_t v35 = (char *)v9 + ((v23 * 8 + v26) | 8);
    unint64_t v36 = (unint64_t)&v9[v23 + 2 + (unint64_t)v26 / 8];
    unint64_t v37 = (unint64_t)v9 + v18 + 176;
    unint64_t v38 = (unint64_t)v9 + v18 + v22 + 177;
    uint64_t v39 = (char *)v9 + ((v26 + v27 * 8) | 8);
    unint64_t v40 = (unint64_t)&v9[(unint64_t)v26 / 8 + 2 + v27];
    unint64_t v41 = (unint64_t)v9 + v19 + 176;
    unint64_t v42 = (unint64_t)v9 + v19 + v22 + 177;
    BOOL v44 = (unint64_t)v24 < v38 && v37 < (unint64_t)v35;
    BOOL v46 = v24 < v39 && v28 < v35;
    BOOL v48 = (unint64_t)v24 < v40 && v29 < (unint64_t)v35;
    BOOL v50 = (unint64_t)v24 < v42 && v41 < (unint64_t)v35;
    BOOL v52 = v25 < v38 && v37 < v36;
    BOOL v54 = v25 < (unint64_t)v39 && (unint64_t)v28 < v36;
    BOOL v56 = v25 < v40 && v29 < v36;
    BOOL v58 = v25 < v42 && v41 < v36;
    BOOL v60 = v37 < (unint64_t)v39 && (unint64_t)v28 < v38;
    BOOL v62 = v37 < v40 && v29 < v38;
    BOOL v64 = v37 < v42 && v41 < v38;
    if (v25 < (unint64_t)v35 && (unint64_t)v24 < v36)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    if (v44)
    {
      unsigned int v21 = v18;
    }
    else if (v46)
    {
      unsigned int v21 = v18;
    }
    else if (v48)
    {
      unsigned int v21 = v18;
    }
    else if (v50)
    {
      unsigned int v21 = v18;
    }
    else if (v52)
    {
      unsigned int v21 = v18;
    }
    else if (v54)
    {
      unsigned int v21 = v18;
    }
    else if (v56)
    {
      unsigned int v21 = v18;
    }
    else if (v58)
    {
      unsigned int v21 = v18;
    }
    else if (v60)
    {
      unsigned int v21 = v18;
    }
    else if (v62)
    {
      unsigned int v21 = v18;
    }
    else if (v64)
    {
      unsigned int v21 = v18;
    }
    else
    {
      if (v20 < 0x10)
      {
        unsigned int v66 = 0;
        goto LABEL_120;
      }
      unsigned int v66 = v20 & 0xFFFFFFF0;
      unsigned int v67 = v18;
      unsigned int v68 = v20 & 0xFFFFFFF0;
      do
      {
        uint64_t v69 = v67 + 1;
        uint64_t v70 = (long long *)&v9[2 * v69];
        long long v72 = *v70;
        long long v71 = v70[1];
        long long v74 = v70[2];
        long long v73 = v70[3];
        uint64_t v75 = v67;
        long long v77 = v70[4];
        long long v76 = v70[5];
        long long v79 = v70[6];
        long long v78 = v70[7];
        long long v81 = v70[8];
        long long v80 = v70[9];
        long long v83 = v70[10];
        long long v82 = v70[11];
        long long v85 = v70[12];
        long long v84 = v70[13];
        long long v87 = v70[14];
        long long v86 = v70[15];
        v88 = &v9[2 * v67];
        v88[14] = v87;
        v88[15] = v86;
        v88[12] = v85;
        v88[13] = v84;
        v88[10] = v83;
        v88[11] = v82;
        v88[8] = v81;
        v88[9] = v80;
        v88[6] = v79;
        v88[7] = v78;
        v88[4] = v77;
        v88[5] = v76;
        v88[2] = v74;
        v88[3] = v73;
        _OWORD *v88 = v72;
        v88[1] = v71;
        v67 += 16;
        *(_OWORD *)((char *)v9 + v75 + 176) = *(_OWORD *)((char *)v9 + v69 + 176);
        v68 -= 16;
      }
      while (v68);
      if (v20 == v66) {
        goto LABEL_135;
      }
      if ((v20 & 8) != 0)
      {
LABEL_120:
        LODWORD(v19) = v19 + (v20 & 0xFFFFFFF8);
        unsigned int v21 = v18 + (v20 & 0xFFFFFFF8);
        unsigned int v89 = v66 - (v20 & 0xFFFFFFF8);
        unsigned int v90 = v66 + v18;
        do
        {
          uint64_t v91 = v90 + 1;
          v92 = (long long *)&v9[2 * v91];
          long long v94 = *v92;
          long long v93 = v92[1];
          long long v96 = v92[2];
          long long v95 = v92[3];
          long long v98 = v92[4];
          long long v97 = v92[5];
          long long v100 = v92[6];
          long long v99 = v92[7];
          unint64_t v101 = &v9[2 * v90];
          v101[6] = v100;
          v101[7] = v99;
          v101[4] = v98;
          v101[5] = v97;
          v101[2] = v96;
          v101[3] = v95;
          *unint64_t v101 = v94;
          v101[1] = v93;
          *(void *)((char *)v9 + v90 + 176) = *(void *)((char *)v9 + v91 + 176);
          v90 += 8;
          v89 += 8;
        }
        while (v89);
        if (v20 == (v20 & 0xFFFFFFF8)) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      unsigned int v21 = v18 + v66;
      LODWORD(v19) = v19 + v66;
    }
    do
    {
LABEL_134:
      *(_OWORD *)&v9[2 * v21] = *(_OWORD *)&v9[2 * v19];
      *((unsigned char *)v9 + v21 + 176) = *((unsigned char *)v9 + v19 + 176);
      LODWORD(v19) = v19 + 1;
      ++v21;
    }
    while (v10 != v19);
LABEL_135:
    uint64_t v4 = *((void *)this + 1);
    uint64_t v7 = *((unsigned int *)this + 4);
    int v10 = *(_DWORD *)(v4 + 16 * v7 - 8);
  }
  uint64_t v102 = *(unsigned int *)(v6 + 272);
  *(_DWORD *)(v4 + 16 * v102 + 8) = v10 - 1;
  if (v102)
  {
    uint64_t v103 = v4 + 16 * (v102 - 1);
    *(void *)(*(void *)v103 + 8 * *(unsigned int *)(v103 + 12)) = *(void *)(*(void *)v103
                                                                                  + 8 * *(unsigned int *)(v103 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v10 - 2);
    uint64_t v4 = *((void *)this + 1);
    uint64_t v7 = *((unsigned int *)this + 4);
  }
  uint64_t v104 = v4 + 16 * v7;
  if (*(_DWORD *)(v104 - 4) == v10 - 1)
  {
    uint64_t v105 = *(unsigned int *)(v6 + 272);
    if (v105)
    {
      uint64_t v106 = v9[2 * (v10 - 2) + 1];
      uint64_t v107 = 16 * v105;
      while (1)
      {
        uint64_t v108 = v107 - 16;
        if (v107 == 16) {
          break;
        }
        uint64_t v109 = v4 + v107;
        uint64_t v110 = *(void *)(v109 - 16);
        uint64_t v112 = v109 - 8;
        LODWORD(v109) = *(_DWORD *)(v109 - 8);
        uint64_t v111 = *(unsigned int *)(v112 + 4);
        *(void *)(v110 + 8 * v111 + 96) = v106;
        LODWORD(v110) = v109 - 1;
        uint64_t v107 = v108;
        if (v111 != v110) {
          goto LABEL_153;
        }
      }
      *(void *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 12) + 128) = v106;
    }
LABEL_153:
    llvm::IntervalMapImpl::Path::moveRight(v5, v105);
  }
  else if (a2)
  {
    if (v7)
    {
      BOOL v113 = (int *)(v4 + 12);
      while (1)
      {
        int v114 = *v113;
        v113 += 4;
        if (v114) {
          break;
        }
        if (!--v7) {
          goto LABEL_149;
        }
      }
    }
    else
    {
LABEL_149:
      uint64_t v17 = *(void **)(v104 - 16);
LABEL_150:
      *(void *)uint64_t v6 = *v17;
    }
  }
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 176) != a6
    || (uint64_t v9 = a1 + 16 * v8, v11 = *(void *)(v9 + 8), v10 = (void *)(v9 + 8), v11 + 1 != a4))
  {
    if (v7 == 11) {
      return 12;
    }
LABEL_11:
    int v16 = a3 - v7;
    if (a3 == v7)
    {
      uint64_t v17 = (void *)(a1 + 16 * a3);
      *uint64_t v17 = a4;
      v17[1] = a5;
      *(unsigned char *)(a1 + a3 + 176) = a6;
      return (a3 + 1);
    }
    uint64_t v18 = (unsigned __int8 *)(a1 + v7 + 176);
    if (*v18 == a6)
    {
      uint64_t v19 = (void *)(a1 + 16 * v7);
      if (a5 + 1 == *v19)
      {
        *uint64_t v19 = a4;
        return a3;
      }
    }
    if (a3 == 11) {
      return 12;
    }
    uint64_t v20 = (~v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      uint64_t v25 = (a3 - 1);
      if (v20 <= v25)
      {
        uint64_t v26 = (16 * a3) | 8;
        unint64_t v27 = a1 + v26;
        uint64_t v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          uint64_t v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            uint64_t v30 = (16 * (a3 - 1)) | 8;
            unint64_t v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              uint64_t v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 176 - v20 <= a1 + (unint64_t)a3 + 176
                && a1 + v25 + 176 - v20 <= (unint64_t)(a1 + v25 + 176))
              {
                unint64_t v33 = a1 + v29 - v28;
                unint64_t v34 = a1 + v26 - v28;
                unint64_t v35 = v29 + a1 + 16;
                unint64_t v36 = a1 + v32 - v28;
                unint64_t v37 = a1 + v30 - v28;
                unint64_t v38 = v32 + a1 + 16;
                unint64_t v39 = a1 + a3 + 176 - v20;
                unint64_t v40 = a3 + a1 + 177;
                unint64_t v41 = a1 + v25 + 176 - v20;
                unint64_t v42 = v25 + a1 + 177;
                BOOL v43 = v33 >= v31 || v36 >= v27;
                BOOL v44 = !v43;
                BOOL v171 = v44;
                BOOL v45 = v33 >= v38 || v37 >= v27;
                BOOL v46 = !v45;
                BOOL v47 = v33 >= v40 || v39 >= v27;
                BOOL v48 = !v47;
                BOOL v49 = v33 >= v42 || v41 >= v27;
                BOOL v50 = !v49;
                BOOL v51 = v34 >= v31 || v36 >= v35;
                BOOL v52 = !v51;
                BOOL v53 = v34 >= v38 || v37 >= v35;
                BOOL v54 = !v53;
                BOOL v55 = v34 >= v40 || v39 >= v35;
                BOOL v56 = !v55;
                BOOL v57 = v34 >= v42 || v41 >= v35;
                BOOL v58 = !v57;
                BOOL v59 = v36 >= v40 || v39 >= v31;
                BOOL v60 = !v59;
                BOOL v61 = v37 >= v40 || v39 >= v38;
                BOOL v62 = !v61;
                BOOL v63 = v39 >= v42 || v41 >= v40;
                BOOL v64 = !v63;
                BOOL v65 = v34 >= v27 || v33 >= v35;
                if (v65 && !v171 && !v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                {
                  uint64_t v66 = v20 + 1;
                  if (v20 < 0xF)
                  {
                    uint64_t v67 = 0;
                    goto LABEL_117;
                  }
                  uint64_t v67 = v66 & 0x1FFFFFFF0;
                  uint64_t v78 = v66 & 0x1FFFFFFF0;
                  unsigned int v79 = a3;
                  do
                  {
                    uint64_t v80 = v79 - 1;
                    long long v81 = (const double *)(a1 - 240 + 16 * v80);
                    long long v82 = v81;
                    float64x2x2_t v173 = vld2q_f64(v82);
                    v82 += 4;
                    float64x2x2_t v175 = vld2q_f64(v82);
                    long long v83 = v81 + 8;
                    float64x2x2_t v177 = vld2q_f64(v83);
                    long long v84 = v81 + 12;
                    float64x2x2_t v179 = vld2q_f64(v84);
                    long long v85 = v81 + 16;
                    float64x2x2_t v180 = vld2q_f64(v85);
                    long long v86 = v81 + 20;
                    float64x2x2_t v181 = vld2q_f64(v86);
                    long long v87 = v81 + 24;
                    float64x2x2_t v182 = vld2q_f64(v87);
                    v81 += 28;
                    float64x2x2_t v183 = vld2q_f64(v81);
                    v88 = (double *)(a1 - 248 + 16 * v79);
                    unsigned int v89 = v88 + 1;
                    vst2q_f64(v89, v173);
                    unsigned int v90 = v88 + 5;
                    vst2q_f64(v90, v175);
                    uint64_t v91 = v88 + 9;
                    vst2q_f64(v91, v177);
                    v92 = v88 + 13;
                    vst2q_f64(v92, v179);
                    long long v93 = v88 + 17;
                    vst2q_f64(v93, v180);
                    long long v94 = v88 + 21;
                    vst2q_f64(v94, v181);
                    long long v95 = v88 + 25;
                    vst2q_f64(v95, v182);
                    v88 += 29;
                    vst2q_f64(v88, v183);
                    *(_OWORD *)(a1 + 161 + v79) = *(_OWORD *)(a1 + 161 + v80);
                    v79 -= 16;
                    v78 -= 16;
                  }
                  while (v78);
                  if (v66 == v67) {
                    goto LABEL_22;
                  }
                  if ((v66 & 8) != 0)
                  {
LABEL_117:
                    v16 -= v66 & 0xFFFFFFF8;
                    unsigned int v68 = a3 - v67;
                    uint64_t v69 = v67 - (v66 & 0x1FFFFFFF8);
                    do
                    {
                      uint64_t v70 = v68 - 1;
                      long long v71 = (const double *)(a1 - 112 + 16 * v70);
                      long long v72 = v71;
                      float64x2x2_t v172 = vld2q_f64(v72);
                      v72 += 4;
                      float64x2x2_t v174 = vld2q_f64(v72);
                      long long v73 = v71 + 8;
                      float64x2x2_t v176 = vld2q_f64(v73);
                      v71 += 12;
                      float64x2x2_t v178 = vld2q_f64(v71);
                      long long v74 = (double *)(a1 - 120 + 16 * v68);
                      uint64_t v75 = v74 + 1;
                      vst2q_f64(v75, v172);
                      long long v76 = v74 + 5;
                      vst2q_f64(v76, v174);
                      long long v77 = v74 + 9;
                      vst2q_f64(v77, v176);
                      v74 += 13;
                      vst2q_f64(v74, v178);
                      *(void *)(a1 + 169 + v68) = *(void *)(a1 + 169 + v70);
                      v68 -= 8;
                      v69 += 8;
                    }
                    while (v69);
                    if (v66 == (v66 & 0x1FFFFFFF8)) {
                      goto LABEL_22;
                    }
                    goto LABEL_20;
                  }
                  v16 -= v67;
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    unsigned int v21 = v7 + v16;
    do
    {
      uint64_t v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(unsigned char *)(a1 + 176 + v21--) = *(unsigned char *)(a1 + 176 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    uint64_t v23 = (void *)(a1 + 16 * v7);
    *uint64_t v23 = a4;
    v23[1] = a5;
    *uint64_t v18 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if (a3 != v7 && *(unsigned __int8 *)(a1 + v7 + 176) == a6)
  {
    uint64_t v12 = 16 * v7;
    if (a5 + 1 == *(void *)(a1 + 16 * v7))
    {
      void *v10 = *(void *)(a1 + 16 * v7 + 8);
      uint64_t v13 = (v7 + 1);
      if (v13 == a3) {
        return (a3 - 1);
      }
      unsigned int v14 = ~v7 + a3;
      if (v14 < 8)
      {
        unsigned int v15 = v7;
        goto LABEL_242;
      }
      uint64_t v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        unsigned int v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        unsigned int v15 = v7;
      }
      else
      {
        unint64_t v97 = a1 + v12;
        unint64_t v98 = a1 + v12 + 8;
        uint64_t v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          unsigned int v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          unsigned int v15 = v7;
        }
        else
        {
          uint64_t v100 = 16 * (v7 + 1);
          unint64_t v101 = a1 + v100;
          unint64_t v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            unsigned int v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            unsigned int v15 = v7;
          }
          else
          {
            uint64_t v103 = v12 + v99;
            unint64_t v104 = a1 + (v103 | 8);
            unint64_t v105 = v103 + a1 + 16;
            unint64_t v106 = v7 + a1 + 176;
            unint64_t v107 = v7 + a1 + v96 + 177;
            unint64_t v108 = a1 + ((v99 + v100) | 8);
            unint64_t v109 = v99 + v100 + a1 + 16;
            unint64_t v110 = v13 + a1 + 176;
            unint64_t v111 = v13 + a1 + v96 + 177;
            BOOL v113 = v97 < v107 && v106 < v104;
            BOOL v115 = v97 < v108 && v101 < v104;
            BOOL v117 = v97 < v109 && v102 < v104;
            BOOL v119 = v97 < v111 && v110 < v104;
            BOOL v121 = v98 < v107 && v106 < v105;
            BOOL v123 = v98 < v108 && v101 < v105;
            BOOL v125 = v98 < v109 && v102 < v105;
            BOOL v127 = v98 < v111 && v110 < v105;
            BOOL v129 = v106 < v108 && v101 < v107;
            BOOL v131 = v106 < v109 && v102 < v107;
            BOOL v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              unsigned int v15 = v7;
              goto LABEL_242;
            }
            if (v113)
            {
              unsigned int v15 = v7;
            }
            else if (v115)
            {
              unsigned int v15 = v7;
            }
            else if (v117)
            {
              unsigned int v15 = v7;
            }
            else if (v119)
            {
              unsigned int v15 = v7;
            }
            else if (v121)
            {
              unsigned int v15 = v7;
            }
            else if (v123)
            {
              unsigned int v15 = v7;
            }
            else if (v125)
            {
              unsigned int v15 = v7;
            }
            else if (v127)
            {
              unsigned int v15 = v7;
            }
            else if (v129)
            {
              unsigned int v15 = v7;
            }
            else if (v131)
            {
              unsigned int v15 = v7;
            }
            else if (v133)
            {
              unsigned int v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                unsigned int v135 = 0;
                goto LABEL_224;
              }
              unsigned int v135 = v14 & 0xFFFFFFF0;
              unsigned int v136 = v7;
              unsigned int v137 = v14 & 0xFFFFFFF0;
              do
              {
                uint64_t v138 = v136 + 1;
                v139 = (long long *)(a1 + 16 * v138);
                long long v141 = *v139;
                long long v140 = v139[1];
                long long v143 = v139[2];
                long long v142 = v139[3];
                uint64_t v144 = v136;
                long long v146 = v139[4];
                long long v145 = v139[5];
                long long v148 = v139[6];
                long long v147 = v139[7];
                long long v150 = v139[8];
                long long v149 = v139[9];
                long long v152 = v139[10];
                long long v151 = v139[11];
                long long v154 = v139[12];
                long long v153 = v139[13];
                long long v156 = v139[14];
                long long v155 = v139[15];
                v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                _OWORD *v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 176 + v144) = *(_OWORD *)(a1 + 176 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135) {
                return (a3 - 1);
              }
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                unsigned int v15 = v7 + (v14 & 0xFFFFFFF8);
                unsigned int v158 = v135 - (v14 & 0xFFFFFFF8);
                unsigned int v159 = v135 + v7;
                do
                {
                  uint64_t v160 = v159 + 1;
                  v161 = (long long *)(a1 + 16 * v160);
                  long long v163 = *v161;
                  long long v162 = v161[1];
                  long long v165 = v161[2];
                  long long v164 = v161[3];
                  long long v167 = v161[4];
                  long long v166 = v161[5];
                  long long v169 = v161[6];
                  long long v168 = v161[7];
                  v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  _OWORD *v170 = v163;
                  v170[1] = v162;
                  *(void *)(a1 + 176 + v159) = *(void *)(a1 + 176 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8)) {
                  return (a3 - 1);
                }
                goto LABEL_242;
              }
              unsigned int v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_242:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(unsigned char *)(a1 + 176 + v15) = *(unsigned char *)(a1 + 176 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while (a3 != v13);
      return (a3 - 1);
    }
  }
  void *v10 = a5;
  return a3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v5 = a2;
  unint64_t v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  uint64_t v8 = LeftSibling;
  if (LeftSibling)
  {
    int v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    unint64_t v6 = (v9 + v6);
    *(void *)&long long v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    unsigned int v10 = 1;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)v4 + 16 * v5;
  int v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  int v13 = v12 + v9;
  unint64_t v14 = v10 + 1;
  *(void *)((unint64_t)&v67 | (8 * v10)) = *(void *)v11;
  uint64_t RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    int v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((void *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    unint64_t v14 = v10 | 2;
  }
  if (v13 + 1 <= (11 * v14))
  {
    unsigned int v17 = 0;
  }
  else
  {
    if (v14 == 1) {
      unsigned int v17 = 1;
    }
    else {
      unsigned int v17 = v14 - 1;
    }
    uint64_t v18 = v17;
    v69[v14] = v69[v18];
    uint64_t v19 = 8 * v17;
    *((void *)&v67 + v14) = *(void *)((char *)&v67 + v19);
    v69[v18] = 0;
    uint64_t v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(*(void *)this + 280));
    *uint64_t v20 = 0u;
    v20[1] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    unint64_t v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(void *)((char *)&v67 + v19) = v20;
  }
  unint64_t v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xBu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8) {
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  }
  uint64_t v22 = v63 - 1;
  uint64_t v23 = *(void *)(v67 + 16 * v22 + 8);
  uint64_t v24 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v63;
  if (!v2)
  {
LABEL_18:
    if (v14 != 1) {
      goto LABEL_24;
    }
LABEL_19:
    inserted = 0;
    int v32 = v21;
    if (v21) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  *(void *)(*(void *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  uint64_t v25 = *(void *)v4;
  uint64_t v26 = 16 * v5;
  while (1)
  {
    uint64_t v27 = v26 - 16;
    if (v26 == 16) {
      break;
    }
    uint64_t v28 = v25 + v26;
    uint64_t v29 = *(unsigned int *)(v28 - 4);
    *(void *)(*(void *)(v28 - 16) + 8 * v29 + 96) = v23;
    int v30 = *(_DWORD *)(v28 - 8) - 1;
    uint64_t v26 = v27;
    if (v29 != v30) {
      goto LABEL_18;
    }
  }
  *(void *)(*(void *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if (v14 == 1) {
    goto LABEL_19;
  }
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v35 = (v64 - 1);
  uint64_t v36 = *(void *)(*((void *)&v67 + 1) + 16 * v35 + 8);
  if (v17 != 1)
  {
    uint64_t v37 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v64;
    if (v2)
    {
      *(void *)(*(void *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      uint64_t v38 = *(void *)v4;
      uint64_t v39 = 16 * v2;
      while (1)
      {
        uint64_t v40 = v39 - 16;
        if (v39 == 16) {
          break;
        }
        uint64_t v41 = v38 + v39;
        uint64_t v42 = *(unsigned int *)(v41 - 4);
        *(void *)(*(void *)(v41 - 16) + 8 * v42 + 96) = v36;
        int v43 = *(_DWORD *)(v41 - 8) - 1;
        uint64_t v39 = v40;
        if (v42 != v43) {
          goto LABEL_32;
        }
      }
      inserted = 0;
      *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
    else
    {
LABEL_32:
      inserted = 0;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
LABEL_26:
    int v32 = v21 - 1;
    if (v21 == 1) {
      goto LABEL_22;
    }
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((void *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  v2 += inserted;
  if (v14 == 2) {
    goto LABEL_26;
  }
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v44 = (v65 - 1);
  uint64_t v45 = *(void *)(v68 + 16 * v44 + 8);
  if (v17 == 2)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    v2 += inserted;
    if (v14 != 3) {
      goto LABEL_35;
    }
    goto LABEL_42;
  }
  uint64_t v48 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v65;
  if (!v2)
  {
LABEL_41:
    if (v14 != 3) {
      goto LABEL_35;
    }
LABEL_42:
    int v32 = v21 - 2;
    if (v21 != 2) {
      goto LABEL_20;
    }
LABEL_22:
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return inserted;
  }
  *(void *)(*(void *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  uint64_t v49 = *(void *)v4;
  uint64_t v50 = 16 * v2;
  while (1)
  {
    uint64_t v51 = v50 - 16;
    if (v50 == 16) {
      break;
    }
    uint64_t v52 = v49 + v50;
    uint64_t v53 = *(unsigned int *)(v52 - 4);
    *(void *)(*(void *)(v52 - 16) + 8 * v53 + 96) = v45;
    int v54 = *(_DWORD *)(v52 - 8) - 1;
    uint64_t v50 = v51;
    if (v53 != v54) {
      goto LABEL_41;
    }
  }
  *(void *)(*(void *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if (v14 == 3) {
    goto LABEL_42;
  }
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v46 = (v66 - 1);
  uint64_t v47 = *(void *)(*((void *)&v68 + 1) + 16 * v46 + 8);
  if (v17 == 3)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    v2 += inserted;
  }
  else
  {
    uint64_t v55 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v66;
    if (v2)
    {
      *(void *)(*(void *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      uint64_t v56 = *(void *)v4;
      uint64_t v57 = 16 * v2;
      while (1)
      {
        uint64_t v58 = v57 - 16;
        if (v57 == 16) {
          break;
        }
        uint64_t v59 = v56 + v57;
        uint64_t v60 = *(unsigned int *)(v59 - 4);
        *(void *)(*(void *)(v59 - 16) + 8 * v60 + 96) = v47;
        int v61 = *(_DWORD *)(v59 - 8) - 1;
        uint64_t v57 = v58;
        if (v60 != v61) {
          goto LABEL_54;
        }
      }
      *(void *)(*(void *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if (v14 == 4)
  {
    int v32 = v21 - 3;
    if (v21 == 3) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v8 = v5 + 16 * v7;
    int v9 = *(void **)v8;
    int v10 = *(_DWORD *)(v8 + 8);
    if (v10 == 1)
    {
      uint64_t v11 = *(void **)(v4 + 280);
      *int v9 = *v11;
      *uint64_t v11 = v9;
      llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(a1, a2 - 1);
      goto LABEL_69;
    }
    uint64_t v18 = *(unsigned int *)(v5 + 16 * v7 + 12);
    unsigned int v19 = v18 + 1;
    if (v18 + 1 == v10)
    {
LABEL_62:
      int v64 = v10 - 1;
      *(_DWORD *)(v5 + 16 * v7 + 8) = v10 - 1;
      uint64_t v65 = (v10 - 2);
      *(void *)(*(void *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) = *(void *)(*(void *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) & 0xFFFFFFFFFFFFFFC0 | v65;
      uint64_t v66 = *v6;
      if (*(_DWORD *)(*v6 + 16 * v7 + 12) == v64)
      {
        uint64_t v67 = v9[v65 + 12];
        long long v68 = (_DWORD *)(v66 + 16 * v7 - 8);
        uint64_t v69 = a2 - 1;
        while (--v69)
        {
          uint64_t v70 = *((void *)v68 - 1);
          int v72 = *v68;
          uint64_t v71 = v68[1];
          v68 -= 4;
          *(void *)(v70 + 8 * v71 + 96) = v67;
          if (v71 != v72 - 1) {
            goto LABEL_68;
          }
        }
        *(void *)(*(void *)v66 + 8 * *(unsigned int *)(v66 + 12) + 128) = v67;
LABEL_68:
        llvm::IntervalMapImpl::Path::moveRight(v6, a2 - 1);
      }
      goto LABEL_69;
    }
    unsigned int v20 = v10 + ~v18;
    if (v20 >= 0x16)
    {
      if (v10 - 2 >= v18 && v10 - 1 >= v19)
      {
        uint64_t v35 = (char *)&v9[v18];
        uint64_t v36 = v35 + 96;
        uint64_t v37 = (char *)&v9[v19];
        unint64_t v38 = v35 - v37;
        uint64_t v39 = v37 + 96;
        unint64_t v40 = v37 + 96 - v35;
        unint64_t v41 = v36 - v37;
        unint64_t v42 = v36 - v39;
        if (v38 >= 0x10 && v40 >= 0x10 && v41 >= 0x10 && v42 >= 0x10)
        {
          v19 += v20 & 0xFFFFFFFE;
          unsigned int v21 = v18 + (v20 & 0xFFFFFFFE);
          unsigned int v59 = v20 & 0xFFFFFFFE;
          do
          {
            uint64_t v60 = (v18 + 1);
            uint64_t v61 = v18;
            *(_OWORD *)&v9[v61] = *(_OWORD *)&v9[v60];
            *(_OWORD *)&v9[v61 + 12] = *(_OWORD *)&v9[v60 + 12];
            LODWORD(v18) = v18 + 2;
            v59 -= 2;
          }
          while (v59);
          if (v20 == (v20 & 0xFFFFFFFE)) {
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v21 = v18;
        }
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
      }
    }
    else
    {
      unsigned int v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
    }
    do
    {
      uint64_t v62 = v19;
      uint64_t v63 = v21;
      v9[v63] = v9[v62];
      v9[v63 + 12] = v9[v62 + 12];
      ++v19;
      ++v21;
    }
    while (v10 != v19);
LABEL_61:
    uint64_t v5 = *v6;
    int v10 = *(_DWORD *)(*v6 + 16 * v7 + 8);
    goto LABEL_62;
  }
  uint64_t v12 = *(unsigned int *)(v5 + 12);
  int v13 = *(_DWORD *)(v4 + 276);
  unsigned int v14 = v12 + 1;
  if (v12 + 1 != v13)
  {
    uint64_t v15 = v4 + 8;
    unsigned int v16 = v13 + ~v12;
    if (v16 >= 0x18)
    {
      if (v13 - 2 >= v12 && v13 - 1 >= v14)
      {
        uint64_t v24 = v4 + 8 * v12;
        uint64_t v25 = v24 + 136;
        v24 += 8;
        uint64_t v26 = v4 + 8 * v14;
        uint64_t v27 = v26 + 8;
        unint64_t v28 = v24 - (v26 + 8);
        v26 += 136;
        unint64_t v29 = v26 - v24;
        unint64_t v30 = v25 - v27;
        unint64_t v31 = v25 - v26;
        if (v28 >= 0x10 && v29 >= 0x10 && v30 >= 0x10 && v31 >= 0x10)
        {
          v14 += v16 & 0xFFFFFFFE;
          unsigned int v17 = v12 + (v16 & 0xFFFFFFFE);
          unsigned int v46 = v16 & 0xFFFFFFFE;
          do
          {
            uint64_t v47 = 8 * (v12 + 1);
            uint64_t v48 = 8 * v12;
            *(_OWORD *)(v15 + v48) = *(_OWORD *)(v15 + v47);
            *(_OWORD *)(v4 + 136 + v48) = *(_OWORD *)(v4 + 136 + v47);
            LODWORD(v12) = v12 + 2;
            v46 -= 2;
          }
          while (v46);
          if (v16 == (v16 & 0xFFFFFFFE)) {
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v17 = v12;
        }
      }
      else
      {
        unsigned int v17 = v12;
      }
    }
    else
    {
      unsigned int v17 = v12;
    }
    do
    {
      uint64_t v49 = 8 * v14;
      uint64_t v50 = 8 * v17;
      *(void *)(v15 + v50) = *(void *)(v15 + v49);
      *(void *)(v4 + 136 + v50) = *(void *)(v4 + 136 + v49);
      ++v14;
      ++v17;
    }
    while (v13 != v14);
LABEL_46:
    int v13 = *(_DWORD *)(v4 + 276);
    uint64_t v5 = *v6;
  }
  int v51 = v13 - 1;
  *(_DWORD *)(v4 + 276) = v51;
  *(_DWORD *)(v5 + 8) = v51;
  if (v51)
  {
LABEL_69:
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v73 = *v6;
      if (*(_DWORD *)(*v6 + 12) < *(_DWORD *)(*v6 + 8))
      {
        uint64_t v74 = *(void *)(*(void *)(v73 + 16 * v7)
                        + 8 * *(unsigned int *)(v73 + 16 * v7 + 12));
        uint64_t v75 = 16 * a2;
        uint64_t v76 = v73 + v75;
        *(void *)uint64_t v76 = v74 & 0xFFFFFFFFFFFFFFC0;
        *(_DWORD *)(v76 + 8) = (v74 & 0x3F) + 1;
        *(_DWORD *)(*v6 + v75 + 12) = 0;
      }
    }
    return;
  }
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  uint64_t v52 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    uint64_t v53 = v52 + 8;
    unsigned int v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v56 = 0;
    }
    else
    {
      uint64_t v77 = v52 + 8;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      uint64_t v53 = v77;
      uint64_t v56 = *((unsigned int *)a1 + 4);
    }
    uint64_t v57 = (void *)(*v6 + 16 * v56);
    *uint64_t v57 = v53;
  }
  else
  {
    unsigned int v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v78 = v52;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      uint64_t v52 = v78;
      uint64_t v58 = *((unsigned int *)a1 + 4);
    }
    uint64_t v57 = (void *)(*v6 + 16 * v58);
    *uint64_t v57 = v52;
  }
  v57[1] = v54;
  ++*v55;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v356 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v4 = (int)v356;
    uint64_t v358 = a4;
    uint64_t v359 = result;
    unsigned int v360 = a2;
    while (1)
    {
      uint64_t v5 = 4 * v4;
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v4);
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v4);
      if (v6 != v7) {
        break;
      }
LABEL_3:
      if (!--v4)
      {
        if (a2 < 2) {
          return result;
        }
        uint64_t v179 = 0;
        while (1)
        {
          uint64_t v180 = 4 * v179;
          unsigned int v181 = *(_DWORD *)(a3 + 4 * v179);
          unsigned int v182 = *(_DWORD *)(a4 + 4 * v179);
          if (v181 != v182) {
            break;
          }
LABEL_270:
          if (++v179 == v356) {
            return result;
          }
        }
        LODWORD(v183) = v179;
        uint64_t v362 = v179;
        while (2)
        {
          uint64_t v183 = (v183 + 1);
          if (v183 == a2) {
            goto LABEL_270;
          }
          v185 = *(char **)(result + 8 * v183);
          uint64_t v186 = *(unsigned int *)(a3 + 4 * v183);
          uint64_t v187 = *(void *)(result + 8 * v179);
          unint64_t v188 = v181 - v182;
          if ((int)v188 >= 1)
          {
            unint64_t v189 = (11 - v186);
            if (v181 >= v188) {
              unsigned int v190 = v181 - v182;
            }
            else {
              unsigned int v190 = v181;
            }
            if (v189 >= v190) {
              int v184 = v190;
            }
            else {
              int v184 = 11 - v186;
            }
            if (!v186) {
              goto LABEL_508;
            }
            if (v186 >= 8)
            {
              uint64_t v200 = (v186 - 1);
              uint64_t v201 = (v200 + v184);
              if (!__CFADD__(v200, v184))
              {
                v202 = v185 + 8;
                uint64_t v203 = 16 * (v200 + v184);
                unint64_t v204 = (unint64_t)&v185[v203 + 8];
                uint64_t v205 = 16 * (v186 - 1);
                unint64_t v206 = (unint64_t)&v185[v205 + 8];
                unint64_t v207 = (unint64_t)(v185 + 176);
                if (v204 - v205 > v204
                  || &v185[v203 - v205] > &v185[v203]
                  || (unint64_t)v202 > v206
                  || v185 > &v185[v205]
                  || &v185[v201 + 176 - v200] > &v185[v201 + 176]
                  || v207 > (unint64_t)&v185[v200 + 176])
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  uint64_t result = v359;
                  goto LABEL_501;
                }
                v213 = &v185[v203 - v205];
                unint64_t v214 = (unint64_t)&v202[v203 - v205];
                unint64_t v215 = (unint64_t)&v185[v203 + 16];
                unint64_t v216 = (unint64_t)&v185[v205 + 16];
                unint64_t v217 = v207 + v201 - v200;
                unint64_t v218 = (unint64_t)&v185[v201 + 177];
                v219 = &v185[v200 + 177];
                BOOL v221 = (unint64_t)v213 < v206 && (unint64_t)v185 < v204;
                BOOL v223 = (unint64_t)v213 < v216 && (unint64_t)v202 < v204;
                BOOL v225 = (unint64_t)v213 < v218 && v217 < v204;
                BOOL v227 = v213 < v219 && v207 < v204;
                BOOL v229 = v214 < v206 && (unint64_t)v185 < v215;
                BOOL v231 = v214 < v216 && (unint64_t)v202 < v215;
                BOOL v233 = v214 < v218 && v217 < v215;
                BOOL v235 = v214 < (unint64_t)v219 && v207 < v215;
                BOOL v237 = (unint64_t)v185 < v218 && v217 < v206;
                BOOL v239 = (unint64_t)v202 < v218 && v217 < v216;
                BOOL v241 = v217 < (unint64_t)v219 && v207 < v218;
                if (v214 < v204 && (unint64_t)v213 < v215)
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  uint64_t result = v359;
                  a2 = v360;
                  uint64_t v179 = v362;
                  goto LABEL_501;
                }
                a2 = v360;
                uint64_t result = v359;
                if (v221 || v223 || v225 || v227 || v229 || v231 || v233 || v235 || v237 || v239)
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  uint64_t v179 = v362;
                  goto LABEL_501;
                }
                a4 = v358;
                uint64_t v179 = v362;
                if (!v241)
                {
                  if (v186 >= 0x10)
                  {
                    uint64_t v243 = v186 & 0xFFFFFFF0;
                    uint64_t v306 = v243;
                    uint64_t v307 = *(unsigned int *)(a3 + 4 * v183);
                    do
                    {
                      uint64_t v308 = (v307 - 1);
                      v309 = (const double *)&v185[16 * v308 - 240];
                      v310 = v309;
                      float64x2x2_t v366 = vld2q_f64(v310);
                      v310 += 4;
                      float64x2x2_t v370 = vld2q_f64(v310);
                      v311 = v309 + 8;
                      float64x2x2_t v374 = vld2q_f64(v311);
                      v312 = v309 + 12;
                      float64x2x2_t v378 = vld2q_f64(v312);
                      v313 = v309 + 16;
                      float64x2x2_t v380 = vld2q_f64(v313);
                      v314 = v309 + 20;
                      float64x2x2_t v382 = vld2q_f64(v314);
                      v315 = v309 + 24;
                      float64x2x2_t v384 = vld2q_f64(v315);
                      v309 += 28;
                      uint64_t v316 = (v184 - 1 + v307);
                      float64x2x2_t v386 = vld2q_f64(v309);
                      v317 = (double *)&v185[16 * v316 - 248];
                      v318 = v317 + 1;
                      vst2q_f64(v318, v366);
                      v319 = v317 + 5;
                      vst2q_f64(v319, v370);
                      v320 = v317 + 9;
                      vst2q_f64(v320, v374);
                      v321 = v317 + 13;
                      vst2q_f64(v321, v378);
                      v322 = v317 + 17;
                      vst2q_f64(v322, v380);
                      v323 = v317 + 21;
                      vst2q_f64(v323, v382);
                      v324 = v317 + 25;
                      vst2q_f64(v324, v384);
                      v317 += 29;
                      vst2q_f64(v317, v386);
                      *(_OWORD *)&v185[v316 + 161] = *(_OWORD *)&v185[v308 + 161];
                      v307 -= 16;
                      v306 -= 16;
                    }
                    while (v306);
                    if (v243 == v186) {
                      goto LABEL_508;
                    }
                    if ((v186 & 8) != 0) {
                      goto LABEL_399;
                    }
                    int v191 = v186 & 0xF;
                  }
                  else
                  {
                    uint64_t v243 = 0;
LABEL_399:
                    int v191 = v186 & 7;
                    unsigned int v244 = ~v243 + v186 + v184;
                    uint64_t v245 = ~v243 + v186;
                    uint64_t v246 = v243 - (v186 & 0xFFFFFFF8);
                    do
                    {
                      v247 = (const double *)&v185[16 * v245 - 112];
                      v248 = v247;
                      float64x2x2_t v365 = vld2q_f64(v248);
                      v248 += 4;
                      float64x2x2_t v369 = vld2q_f64(v248);
                      v249 = v247 + 8;
                      float64x2x2_t v373 = vld2q_f64(v249);
                      v247 += 12;
                      float64x2x2_t v377 = vld2q_f64(v247);
                      v250 = (double *)&v185[16 * v244 - 120];
                      v251 = v250 + 1;
                      vst2q_f64(v251, v365);
                      v252 = v250 + 5;
                      vst2q_f64(v252, v369);
                      v253 = v250 + 9;
                      vst2q_f64(v253, v373);
                      v250 += 13;
                      vst2q_f64(v250, v377);
                      *(void *)&v185[v244 + 169] = *(void *)&v185[v245 + 169];
                      v244 -= 8;
                      v245 -= 8;
                      v246 += 8;
                    }
                    while (v246);
                    if ((v186 & 0xFFFFFFF8) == v186)
                    {
LABEL_508:
                      if (v184)
                      {
                        uint64_t v330 = 0;
                        unsigned int v331 = v181 - v184;
                        unint64_t v332 = v181;
                        if (v181 >= v188) {
                          unint64_t v332 = v188;
                        }
                        if (v332 >= v189) {
                          int v333 = v189;
                        }
                        else {
                          int v333 = v332;
                        }
                        do
                        {
                          uint64_t v334 = v331 + v330;
                          *(_OWORD *)&v185[16 * v330] = *(_OWORD *)(v187 + 16 * v334);
                          v185[v330++ + 176] = *(unsigned char *)(v187 + v334 + 176);
                        }
                        while (v333 != v330);
                      }
LABEL_274:
                      *(_DWORD *)(a3 + 4 * v183) += v184;
                      unsigned int v181 = *(_DWORD *)(a3 + v180) - v184;
                      *(_DWORD *)(a3 + v180) = v181;
                      unsigned int v182 = *(_DWORD *)(a4 + v180);
                      if (v181 >= v182) {
                        goto LABEL_270;
                      }
                      continue;
                    }
                  }
LABEL_501:
                  uint64_t v325 = (v191 - 1);
                  int v326 = -v191;
                  unint64_t v327 = v181;
                  if (v181 >= v188) {
                    unint64_t v327 = v188;
                  }
                  if (v327 >= v189) {
                    int v328 = v189;
                  }
                  else {
                    int v328 = v327;
                  }
                  do
                  {
                    uint64_t v329 = (v328 + v325);
                    *(_OWORD *)&v185[16 * v329] = *(_OWORD *)&v185[16 * v325];
                    v185[v329 + 176] = v185[v325-- + 176];
                    BOOL v44 = __CFADD__(v326++, 1);
                  }
                  while (!v44);
                  goto LABEL_508;
                }
              }
            }
            int v191 = *(_DWORD *)(a3 + 4 * v183);
            goto LABEL_501;
          }
          break;
        }
        unsigned int v192 = 11 - v181;
        if (v182 - v181 < v186) {
          unsigned int v193 = v182 - v181;
        }
        else {
          unsigned int v193 = *(_DWORD *)(a3 + 4 * v183);
        }
        if (v192 >= v193) {
          uint64_t v194 = v193;
        }
        else {
          uint64_t v194 = v192;
        }
        if (v194)
        {
          for (uint64_t i = 0; i != v194; ++i)
          {
            uint64_t v196 = v181 + i;
            *(_OWORD *)(v187 + 16 * v196) = *(_OWORD *)&v185[16 * i];
            *(unsigned char *)(v187 + v196 + 176) = v185[i + 176];
          }
        }
        if (v194 != v186)
        {
          uint64_t v197 = (v186 + ~v194);
          if (v197 < 7)
          {
            uint64_t v198 = 0;
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v198 = 0;
          if ((int)v186 - 1 < v194)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          unint64_t v254 = (unint64_t)(v185 + 8);
          uint64_t v255 = 16 * v194;
          unint64_t v256 = (unint64_t)&v185[v255 + 8];
          uint64_t v257 = 16 * (v186 - 1 - v194);
          if (v256 + v257 < v256)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          unint64_t v258 = (unint64_t)&v185[v255];
          if (&v185[v255 + v257] < &v185[v255])
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v259 = v179;
          uint64_t v198 = 0;
          unint64_t v260 = v254 + 16 * v197;
          unint64_t v261 = (unint64_t)&v185[16 * v197 + 16];
          unint64_t v262 = (unint64_t)(v185 + 176);
          v263 = &v185[v197 + 177];
          uint64_t v264 = v255 + 16 * v197;
          unint64_t v265 = v254 + v264;
          v266 = &v185[v264 + 16];
          unint64_t v267 = (unint64_t)&v185[v194 + 176];
          unint64_t v268 = (unint64_t)&v185[v194 + 177 + v197];
          BOOL v270 = v185 < v263 && v262 < v260;
          BOOL v272 = (unint64_t)v185 < v265 && v258 < v260;
          BOOL v274 = v185 < v266 && v256 < v260;
          BOOL v276 = (unint64_t)v185 < v268 && v267 < v260;
          BOOL v278 = v254 < (unint64_t)v263 && v262 < v261;
          BOOL v280 = v254 < v265 && v258 < v261;
          BOOL v282 = v254 < (unint64_t)v266 && v256 < v261;
          BOOL v284 = v254 < v268 && v267 < v261;
          BOOL v286 = v262 < v265 && v258 < (unint64_t)v263;
          BOOL v288 = v262 < (unint64_t)v266 && v256 < (unint64_t)v263;
          BOOL v290 = v262 < v268 && v267 < (unint64_t)v263;
          if (v254 < v260 && (unint64_t)v185 < v261)
          {
            unsigned int v199 = v194;
            uint64_t result = v359;
            uint64_t v179 = v259;
            a2 = v360;
            goto LABEL_533;
          }
          uint64_t result = v359;
          uint64_t v179 = v259;
          if (v270 || v272 || v274)
          {
            unsigned int v199 = v194;
            a2 = v360;
            goto LABEL_533;
          }
          a2 = v360;
          if (v276)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v278)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v280)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v282)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v284)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v286)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v288)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v290)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v292 = v197 + 1;
          if (v197 >= 0xF)
          {
            uint64_t v198 = v292 & 0x1FFFFFFF0;
            v335 = v185 + 176;
            unsigned int v336 = v194;
            uint64_t v337 = v292 & 0x1FFFFFFF0;
            v338 = v185;
            do
            {
              v339 = (long long *)&v185[16 * v336];
              long long v341 = *v339;
              long long v340 = v339[1];
              long long v343 = v339[2];
              long long v342 = v339[3];
              long long v345 = v339[4];
              long long v344 = v339[5];
              long long v347 = v339[6];
              long long v346 = v339[7];
              long long v349 = v339[8];
              long long v348 = v339[9];
              long long v351 = v339[10];
              long long v350 = v339[11];
              long long v353 = v339[12];
              long long v352 = v339[13];
              long long v354 = v339[15];
              *((_OWORD *)v338 + 14) = v339[14];
              *((_OWORD *)v338 + 15) = v354;
              *((_OWORD *)v338 + 12) = v353;
              *((_OWORD *)v338 + 13) = v352;
              *((_OWORD *)v338 + 10) = v351;
              *((_OWORD *)v338 + 11) = v350;
              *((_OWORD *)v338 + 8) = v349;
              *((_OWORD *)v338 + 9) = v348;
              *((_OWORD *)v338 + 6) = v347;
              *((_OWORD *)v338 + 7) = v346;
              *((_OWORD *)v338 + 4) = v345;
              *((_OWORD *)v338 + 5) = v344;
              *((_OWORD *)v338 + 2) = v343;
              *((_OWORD *)v338 + 3) = v342;
              *(_OWORD *)v338 = v341;
              *((_OWORD *)v338 + 1) = v340;
              v338 += 256;
              v355 = &v185[v336];
              v336 += 16;
              *v335++ = *((_OWORD *)v355 + 11);
              v337 -= 16;
            }
            while (v337);
            if (v292 != v198)
            {
              if ((v292 & 8) == 0)
              {
                unsigned int v199 = v194 + v198;
                goto LABEL_533;
              }
              goto LABEL_491;
            }
          }
          else
          {
            uint64_t v198 = 0;
LABEL_491:
            uint64_t v293 = v198;
            uint64_t v198 = v292 & 0x1FFFFFFF8;
            unsigned int v199 = v194 + (v292 & 0xFFFFFFF8);
            v294 = &v185[16 * v293];
            v295 = &v185[v293 + 176];
            uint64_t v296 = v293 - (v292 & 0x1FFFFFFF8);
            unsigned int v297 = v194 + v293;
            do
            {
              v298 = (long long *)&v185[16 * v297];
              long long v300 = *v298;
              long long v299 = v298[1];
              long long v302 = v298[2];
              long long v301 = v298[3];
              long long v304 = v298[4];
              long long v303 = v298[5];
              long long v305 = v298[7];
              *((_OWORD *)v294 + 6) = v298[6];
              *((_OWORD *)v294 + 7) = v305;
              *((_OWORD *)v294 + 4) = v304;
              *((_OWORD *)v294 + 5) = v303;
              *((_OWORD *)v294 + 2) = v302;
              *((_OWORD *)v294 + 3) = v301;
              *(_OWORD *)v294 = v300;
              *((_OWORD *)v294 + 1) = v299;
              v294 += 128;
              *(void *)v295 = *(void *)&v185[v297 + 176];
              v295 += 8;
              v297 += 8;
              v296 += 8;
            }
            while (v296);
            if (v292 != v198)
            {
              do
              {
LABEL_533:
                *(_OWORD *)&v185[16 * v198] = *(_OWORD *)&v185[16 * v199];
                v185[v198++ + 176] = v185[v199++ + 176];
              }
              while (v186 != v199);
            }
          }
        }
        int v184 = -(int)v194;
        goto LABEL_274;
      }
    }
    uint64_t v8 = v4;
    uint64_t v361 = v4;
    while (1)
    {
      if (!v8) {
        goto LABEL_3;
      }
      --v8;
      int v10 = *(char **)(result + 8 * v4);
      uint64_t v11 = *(void *)(result + 8 * v8);
      unint64_t v12 = *(unsigned int *)(a3 + 4 * v8);
      unint64_t v13 = v7 - v6;
      if ((int)v13 >= 1)
      {
        unint64_t v14 = 11 - v6;
        if (v12 >= v13) {
          unsigned int v9 = v7 - v6;
        }
        else {
          unsigned int v9 = *(_DWORD *)(a3 + 4 * v8);
        }
        if (v14 < v9) {
          unsigned int v9 = 11 - v6;
        }
        if (!v6) {
          goto LABEL_142;
        }
        if (v6 >= 8)
        {
          uint64_t v24 = v6 - 1;
          uint64_t v25 = v24 + v9;
          if (!__CFADD__(v24, v9))
          {
            uint64_t v26 = v10 + 8;
            uint64_t v27 = 16 * (v24 + v9);
            unint64_t v28 = (unint64_t)&v10[v27 + 8];
            uint64_t v29 = 16 * (v6 - 1);
            unint64_t v30 = (unint64_t)&v10[v29 + 8];
            unint64_t v31 = (unint64_t)(v10 + 176);
            if (v28 - v29 > v28
              || &v10[v27 - v29] > &v10[v27]
              || (unint64_t)v26 > v30
              || v10 > &v10[v29]
              || &v10[v25 + 176 - v24] > &v10[v25 + 176]
              || v31 > (unint64_t)&v10[v24 + 176])
            {
              int v15 = v6;
            }
            else
            {
              uint64_t v357 = v6;
              uint64_t v37 = &v10[v27 - v29];
              unint64_t v38 = (unint64_t)&v26[v27 - v29];
              unint64_t v39 = (unint64_t)&v10[v27 + 16];
              unint64_t v40 = (unint64_t)&v10[v29 + 16];
              unint64_t v41 = v31 + v25 - v24;
              unint64_t v42 = (unint64_t)&v10[v25 + 177];
              int v43 = &v10[v24 + 177];
              BOOL v44 = (unint64_t)v37 >= v30 || (unint64_t)v10 >= v28;
              char v45 = !v44;
              BOOL v47 = (unint64_t)v37 < v40 && (unint64_t)v26 < v28;
              BOOL v49 = (unint64_t)v37 < v42 && v41 < v28;
              BOOL v51 = v37 < v43 && v31 < v28;
              BOOL v53 = v38 < v30 && (unint64_t)v10 < v39;
              BOOL v55 = v38 < v40 && (unint64_t)v26 < v39;
              BOOL v57 = v38 < v42 && v41 < v39;
              BOOL v59 = v38 < (unint64_t)v43 && v31 < v39;
              BOOL v61 = (unint64_t)v10 < v42 && v41 < v30;
              BOOL v63 = (unint64_t)v26 < v42 && v41 < v40;
              BOOL v65 = v41 < (unint64_t)v43 && v31 < v42;
              if (v38 < v28 && (unint64_t)v37 < v39)
              {
                int v15 = v6;
                a4 = v358;
                a2 = v360;
                uint64_t result = v359;
                goto LABEL_133;
              }
              uint64_t result = v359;
              if ((v45 & 1) == 0 && !v47 && !v49 && !v51 && !v53 && !v55)
              {
                uint64_t v4 = v361;
                if (v57 || v59)
                {
                  int v15 = v6;
                  a4 = v358;
                }
                else
                {
                  a4 = v358;
                  if (!v61 && !v63)
                  {
                    a2 = v360;
                    if (v65)
                    {
                      int v15 = v6;
                    }
                    else if (v6 >= 0x10)
                    {
                      uint64_t v67 = v6 & 0xFFFFFFF0;
                      uint64_t v129 = v67;
                      uint64_t v130 = v6;
                      do
                      {
                        uint64_t v131 = (v130 - 1);
                        v132 = (const double *)&v10[16 * v131 - 240];
                        BOOL v133 = v132;
                        float64x2x2_t v363 = vld2q_f64(v133);
                        v133 += 4;
                        float64x2x2_t v367 = vld2q_f64(v133);
                        v134 = v132 + 8;
                        float64x2x2_t v371 = vld2q_f64(v134);
                        unsigned int v135 = v132 + 12;
                        float64x2x2_t v375 = vld2q_f64(v135);
                        unsigned int v136 = v132 + 16;
                        float64x2x2_t v379 = vld2q_f64(v136);
                        unsigned int v137 = v132 + 20;
                        float64x2x2_t v381 = vld2q_f64(v137);
                        uint64_t v138 = v132 + 24;
                        float64x2x2_t v383 = vld2q_f64(v138);
                        v132 += 28;
                        uint64_t v139 = v9 - 1 + v130;
                        float64x2x2_t v385 = vld2q_f64(v132);
                        long long v140 = (double *)&v10[16 * v139 - 248];
                        long long v141 = v140 + 1;
                        vst2q_f64(v141, v363);
                        long long v142 = v140 + 5;
                        vst2q_f64(v142, v367);
                        long long v143 = v140 + 9;
                        vst2q_f64(v143, v371);
                        uint64_t v144 = v140 + 13;
                        vst2q_f64(v144, v375);
                        long long v145 = v140 + 17;
                        vst2q_f64(v145, v379);
                        long long v146 = v140 + 21;
                        vst2q_f64(v146, v381);
                        long long v147 = v140 + 25;
                        vst2q_f64(v147, v383);
                        v140 += 29;
                        vst2q_f64(v140, v385);
                        *(_OWORD *)&v10[v139 + 161] = *(_OWORD *)&v10[v131 + 161];
                        v130 -= 16;
                        v129 -= 16;
                      }
                      while (v129);
                      if (v67 == v6) {
                        goto LABEL_142;
                      }
                      if ((v6 & 8) != 0) {
                        goto LABEL_248;
                      }
                      int v15 = v6 & 0xF;
                    }
                    else
                    {
                      uint64_t v67 = 0;
LABEL_248:
                      int v15 = v6 & 7;
                      unsigned int v148 = ~v67 + v6 + v9;
                      uint64_t v149 = ~v67 + v357;
                      uint64_t v150 = v67 - (v357 & 0xFFFFFFF8);
                      do
                      {
                        long long v151 = (const double *)&v10[16 * v149 - 112];
                        long long v152 = v151;
                        float64x2x2_t v364 = vld2q_f64(v152);
                        v152 += 4;
                        float64x2x2_t v368 = vld2q_f64(v152);
                        long long v153 = v151 + 8;
                        float64x2x2_t v372 = vld2q_f64(v153);
                        v151 += 12;
                        float64x2x2_t v376 = vld2q_f64(v151);
                        long long v154 = (double *)&v10[16 * v148 - 120];
                        long long v155 = v154 + 1;
                        vst2q_f64(v155, v364);
                        long long v156 = v154 + 5;
                        vst2q_f64(v156, v368);
                        v157 = v154 + 9;
                        vst2q_f64(v157, v372);
                        v154 += 13;
                        vst2q_f64(v154, v376);
                        *(void *)&v10[v148 + 169] = *(void *)&v10[v149 + 169];
                        v148 -= 8;
                        v149 -= 8;
                        v150 += 8;
                      }
                      while (v150);
                      if ((v357 & 0xFFFFFFF8) == v357)
                      {
LABEL_142:
                        if (v9)
                        {
                          uint64_t v73 = 0;
                          int v74 = v12 - v9;
                          if (v12 >= v13) {
                            unint64_t v75 = v13;
                          }
                          else {
                            unint64_t v75 = v12;
                          }
                          if (v75 >= v14) {
                            int v76 = v14;
                          }
                          else {
                            int v76 = v75;
                          }
                          do
                          {
                            uint64_t v77 = (v74 + v73);
                            *(_OWORD *)&v10[16 * v73] = *(_OWORD *)(v11 + 16 * v77);
                            v10[v73++ + 176] = *(unsigned char *)(v11 + v77 + 176);
                          }
                          while (v76 != v73);
                        }
                        goto LABEL_7;
                      }
                    }
LABEL_134:
                    uint64_t v68 = (v15 - 1);
                    int v69 = -v15;
                    if (v12 >= v13) {
                      unint64_t v70 = v13;
                    }
                    else {
                      unint64_t v70 = v12;
                    }
                    if (v70 >= v14) {
                      int v71 = v14;
                    }
                    else {
                      int v71 = v70;
                    }
                    do
                    {
                      uint64_t v72 = (v71 + v68);
                      *(_OWORD *)&v10[16 * v72] = *(_OWORD *)&v10[16 * v68];
                      v10[v72 + 176] = v10[v68-- + 176];
                      BOOL v44 = __CFADD__(v69++, 1);
                    }
                    while (!v44);
                    goto LABEL_142;
                  }
                  int v15 = v6;
                }
                a2 = v360;
                goto LABEL_134;
              }
              int v15 = v6;
            }
            a4 = v358;
            a2 = v360;
LABEL_133:
            uint64_t v4 = v361;
            goto LABEL_134;
          }
        }
        int v15 = v6;
        goto LABEL_134;
      }
      unsigned int v16 = 11 - v12;
      if (v6 - v7 < v6) {
        unsigned int v17 = v6 - v7;
      }
      else {
        unsigned int v17 = v6;
      }
      if (v16 >= v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = v16;
      }
      if (v18)
      {
        for (uint64_t j = 0; j != v18; ++j)
        {
          uint64_t v20 = (v12 + j);
          *(_OWORD *)(v11 + 16 * v20) = *(_OWORD *)&v10[16 * j];
          *(unsigned char *)(v11 + v20 + 176) = v10[j + 176];
        }
      }
      if (v18 != v6) {
        break;
      }
LABEL_6:
      unsigned int v9 = -(int)v18;
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      unsigned int v6 = *(_DWORD *)(a3 + v5) + v9;
      *(_DWORD *)(a3 + v5) = v6;
      unsigned int v7 = *(_DWORD *)(a4 + v5);
      if (v6 >= v7) {
        goto LABEL_3;
      }
    }
    uint64_t v21 = v6 + ~v18;
    if (v21 < 7)
    {
      uint64_t v22 = 0;
      unsigned int v23 = v18;
      goto LABEL_258;
    }
    uint64_t v22 = 0;
    if (v6 - 1 < v18)
    {
      unsigned int v23 = v18;
    }
    else
    {
      unint64_t v78 = (unint64_t)(v10 + 8);
      uint64_t v79 = 16 * v18;
      unint64_t v80 = (unint64_t)&v10[v79 + 8];
      uint64_t v81 = 16 * (v6 - 1 - v18);
      if (v80 + v81 < v80)
      {
        unsigned int v23 = v18;
      }
      else
      {
        unint64_t v82 = (unint64_t)&v10[v79];
        if (&v10[v79 + v81] < &v10[v79])
        {
          unsigned int v23 = v18;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v83 = v78 + 16 * v21;
          unint64_t v84 = (unint64_t)&v10[16 * v21 + 16];
          unint64_t v85 = (unint64_t)(v10 + 176);
          long long v86 = &v10[v21 + 177];
          uint64_t v87 = v79 + 16 * v21;
          unint64_t v88 = v78 + v87;
          unsigned int v89 = &v10[v87 + 16];
          unint64_t v90 = (unint64_t)&v10[v18 + 176];
          unint64_t v91 = (unint64_t)&v10[v18 + 177 + v21];
          BOOL v93 = v10 < v86 && v85 < v83;
          BOOL v95 = (unint64_t)v10 < v88 && v82 < v83;
          BOOL v97 = v10 < v89 && v80 < v83;
          BOOL v99 = (unint64_t)v10 < v91 && v90 < v83;
          BOOL v101 = v78 < (unint64_t)v86 && v85 < v84;
          BOOL v103 = v78 < v88 && v82 < v84;
          BOOL v105 = v78 < (unint64_t)v89 && v80 < v84;
          BOOL v107 = v78 < v91 && v90 < v84;
          BOOL v109 = v85 < v88 && v82 < (unint64_t)v86;
          BOOL v111 = v85 < (unint64_t)v89 && v80 < (unint64_t)v86;
          BOOL v113 = v85 < v91 && v90 < (unint64_t)v86;
          if (v78 < v83 && (unint64_t)v10 < v84)
          {
            unsigned int v23 = v18;
            uint64_t result = v359;
            uint64_t v4 = v361;
            goto LABEL_258;
          }
          uint64_t result = v359;
          if (v93 || v95 || v97 || v99 || v101 || v103 || v105 || v107 || v109 || v111 || v113)
          {
            unsigned int v23 = v18;
            uint64_t v4 = v361;
          }
          else
          {
            uint64_t v115 = v21 + 1;
            if (v21 < 0xF)
            {
              uint64_t v22 = 0;
              uint64_t v4 = v361;
              goto LABEL_238;
            }
            uint64_t v22 = v115 & 0x1FFFFFFF0;
            unsigned int v158 = v10 + 176;
            unsigned int v159 = v18;
            uint64_t v160 = v115 & 0x1FFFFFFF0;
            v161 = v10;
            do
            {
              long long v162 = (long long *)&v10[16 * v159];
              long long v164 = *v162;
              long long v163 = v162[1];
              long long v166 = v162[2];
              long long v165 = v162[3];
              long long v168 = v162[4];
              long long v167 = v162[5];
              long long v170 = v162[6];
              long long v169 = v162[7];
              long long v172 = v162[8];
              long long v171 = v162[9];
              long long v174 = v162[10];
              long long v173 = v162[11];
              long long v176 = v162[12];
              long long v175 = v162[13];
              long long v177 = v162[15];
              *((_OWORD *)v161 + 14) = v162[14];
              *((_OWORD *)v161 + 15) = v177;
              *((_OWORD *)v161 + 12) = v176;
              *((_OWORD *)v161 + 13) = v175;
              *((_OWORD *)v161 + 10) = v174;
              *((_OWORD *)v161 + 11) = v173;
              *((_OWORD *)v161 + 8) = v172;
              *((_OWORD *)v161 + 9) = v171;
              *((_OWORD *)v161 + 6) = v170;
              *((_OWORD *)v161 + 7) = v169;
              *((_OWORD *)v161 + 4) = v168;
              *((_OWORD *)v161 + 5) = v167;
              *((_OWORD *)v161 + 2) = v166;
              *((_OWORD *)v161 + 3) = v165;
              *(_OWORD *)v161 = v164;
              *((_OWORD *)v161 + 1) = v163;
              v161 += 256;
              float64x2x2_t v178 = &v10[v159];
              v159 += 16;
              *v158++ = *((_OWORD *)v178 + 11);
              v160 -= 16;
            }
            while (v160);
            uint64_t v4 = v361;
            if (v115 == v22) {
              goto LABEL_6;
            }
            if ((v115 & 8) != 0)
            {
LABEL_238:
              uint64_t v116 = v22;
              uint64_t v22 = v115 & 0x1FFFFFFF8;
              unsigned int v23 = v18 + (v115 & 0xFFFFFFF8);
              BOOL v117 = &v10[16 * v116];
              v118 = &v10[v116 + 176];
              uint64_t v119 = v116 - (v115 & 0x1FFFFFFF8);
              unsigned int v120 = v18 + v116;
              do
              {
                BOOL v121 = (long long *)&v10[16 * v120];
                long long v123 = *v121;
                long long v122 = v121[1];
                long long v125 = v121[2];
                long long v124 = v121[3];
                long long v127 = v121[4];
                long long v126 = v121[5];
                long long v128 = v121[7];
                *((_OWORD *)v117 + 6) = v121[6];
                *((_OWORD *)v117 + 7) = v128;
                *((_OWORD *)v117 + 4) = v127;
                *((_OWORD *)v117 + 5) = v126;
                *((_OWORD *)v117 + 2) = v125;
                *((_OWORD *)v117 + 3) = v124;
                *(_OWORD *)BOOL v117 = v123;
                *((_OWORD *)v117 + 1) = v122;
                v117 += 128;
                *(void *)v118 = *(void *)&v10[v120 + 176];
                v118 += 8;
                v120 += 8;
                v119 += 8;
              }
              while (v119);
              if (v115 == v22) {
                goto LABEL_6;
              }
              goto LABEL_258;
            }
            unsigned int v23 = v18 + v22;
          }
        }
      }
    }
    do
    {
LABEL_258:
      *(_OWORD *)&v10[16 * v22] = *(_OWORD *)&v10[16 * v23];
      v10[v22++ + 176] = v10[v23++ + 176];
    }
    while (v6 != v23);
    goto LABEL_6;
  }
  return result;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = (unsigned int *)(a1 + 8);
  uint64_t v8 = *(void *)a1;
  unsigned int v9 = (uint64_t *)(a2 == 1);
  if (a2 == 1)
  {
    uint64_t v10 = *(unsigned int *)(v8 + 276);
    if (v10 <= 0xF)
    {
      uint64_t v11 = v8 + 8;
      uint64_t v12 = *(unsigned int *)(*(void *)v7 + 12);
      if (v10 != v12)
      {
        int v13 = v10 - v12;
        uint64_t v14 = (v10 + ~v12);
        if (v14 < 0x39 || (int)v12 + 1 > v10) {
          goto LABEL_26;
        }
        uint64_t v15 = 8 * v10 + v8;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = v15 + 8 - 8 * v14;
        unint64_t v18 = v15 + 136;
        unint64_t v19 = v15 + 136 - 8 * v14;
        uint64_t v20 = 8 * (v10 - 1);
        BOOL v21 = v14 > (int)v10 - 1 || v17 > v16;
        BOOL v22 = v21 || v19 > v18;
        BOOL v23 = v22 || v20 + v8 + 8 - 8 * v14 > (unint64_t)(v20 + v8 + 8);
        if (v23 || v20 + v8 + 136 - 8 * v14 > (unint64_t)(v20 + v8 + 136)) {
          goto LABEL_26;
        }
        uint64_t v25 = 8 * v10 + v8;
        uint64_t v26 = v20 + v8;
        uint64_t v27 = v20 + v8 + 8;
        if ((unint64_t)(v27 - (v25 + 8)) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v28 = v26 + 136;
        if ((unint64_t)(v25 + 8 - v28) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v29 = v25 + 136;
        if ((unint64_t)(v27 - v29) < 0x10) {
          goto LABEL_26;
        }
        if ((unint64_t)(v28 - v29) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v30 = v14 + 1;
        v13 -= v30 & 0xFFFFFFFE;
        uint64_t v31 = v30 & 0x1FFFFFFFELL;
        do
        {
          uint64_t v32 = 8 * (v10 - 1);
          uint64_t v33 = 8 * v10;
          *(_OWORD *)(v8 + v33) = *(_OWORD *)(v8 + v32);
          *(_OWORD *)(v8 + 128 + v33) = *(_OWORD *)(v8 + 128 + v32);
          LODWORD(v10) = v10 - 2;
          v31 -= 2;
        }
        while (v31);
        if (v30 != (v30 & 0x1FFFFFFFELL))
        {
LABEL_26:
          unsigned int v34 = v12 + v13;
          do
          {
            uint64_t v35 = 8 * v34--;
            uint64_t v36 = 8 * v34;
            *(void *)(v11 + v35) = *(void *)(v11 + v36);
            *(void *)(v8 + 136 + v35) = *(void *)(v8 + 136 + v36);
            --v13;
          }
          while (v13);
        }
      }
      uint64_t v37 = (void *)(v11 + 8 * v12);
      *uint64_t v37 = a3;
      v37[16] = a4;
      LODWORD(v37) = *(_DWORD *)(v8 + 276) + 1;
      *(_DWORD *)(v8 + 276) = v37;
      uint64_t v38 = *(void *)v7;
      *(_DWORD *)(v38 + 8) = v37;
      uint64_t v39 = *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12));
      *(void *)(v38 + 16) = v39 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v38 + 24) = (v39 & 0x3F) + 1;
      return 0;
    }
    unint64_t v41 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(*(void *)a1, (unsigned int *)*(unsigned int *)(*(void *)v7 + 12));
    llvm::IntervalMapImpl::Path::replaceRoot(v7, v8 + 8, *(_DWORD *)(v8 + 276), v41);
    a2 = 2;
  }
  uint64_t v42 = (a2 - 1);
  if (*(_DWORD *)(a1 + 16)
    && (uint64_t v43 = *(void *)v7, *(_DWORD *)(*(void *)v7 + 12) < *(_DWORD *)(*(void *)v7 + 8)))
  {
    unsigned int v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12) {
      goto LABEL_33;
    }
  }
  else
  {
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)v7, a2 - 1);
    uint64_t v43 = *(void *)v7;
    ++*(_DWORD *)(*(void *)v7 + 16 * v42 + 12);
    unsigned int v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12)
    {
LABEL_33:
      char v45 = (uint64_t *)(v43 + 16 * v42);
      uint64_t v46 = *v45;
      uint64_t v47 = *((unsigned int *)v45 + 3);
      if (v44 == v47) {
        goto LABEL_61;
      }
LABEL_37:
      int v50 = v44 - v47;
      uint64_t v51 = v44 + ~v47;
      if (v51 < 0x35 || (int)v47 + 1 > v44) {
        goto LABEL_59;
      }
      uint64_t v52 = 8 * v44;
      uint64_t v53 = 8 * (v44 - 1);
      BOOL v54 = v51 > v44 - 1 || v46 + v52 - 8 * v51 > (unint64_t)(v46 + v52);
      BOOL v55 = v54 || v46 + v52 + 96 - 8 * v51 > (unint64_t)(v46 + v52 + 96);
      BOOL v56 = v55 || v46 + v53 - 8 * v51 > (unint64_t)(v46 + v53);
      if (v56 || v46 + v53 + 96 - 8 * v51 > (unint64_t)(v46 + v53 + 96)) {
        goto LABEL_59;
      }
      uint64_t v58 = v52 + v46;
      uint64_t v59 = v53 + v46;
      if ((unint64_t)(v59 - v58) < 0x10) {
        goto LABEL_59;
      }
      if ((unint64_t)(v58 - (v59 + 96)) < 0x10) {
        goto LABEL_59;
      }
      uint64_t v60 = v58 + 96;
      if ((unint64_t)(v59 - v60) < 0x10) {
        goto LABEL_59;
      }
      if ((unint64_t)(v59 + 96 - v60) < 0x10) {
        goto LABEL_59;
      }
      uint64_t v61 = v51 + 1;
      v50 -= v61 & 0xFFFFFFFE;
      uint64_t v62 = v61 & 0x1FFFFFFFELL;
      do
      {
        uint64_t v63 = 8 * (v44 - 1);
        uint64_t v64 = 8 * v44;
        *(_OWORD *)(v46 - 8 + v64) = *(_OWORD *)(v46 - 8 + v63);
        *(_OWORD *)(v46 + 88 + v64) = *(_OWORD *)(v46 + 88 + v63);
        v44 -= 2;
        v62 -= 2;
      }
      while (v62);
      if (v61 != (v61 & 0x1FFFFFFFELL))
      {
LABEL_59:
        unsigned int v65 = v47 + v50;
        do
        {
          uint64_t v66 = 8 * v65--;
          uint64_t v67 = 8 * v65;
          *(void *)(v46 + v66) = *(void *)(v46 + v67);
          *(void *)(v46 + 96 + v66) = *(void *)(v46 + 96 + v67);
          --v50;
        }
        while (v50);
      }
      goto LABEL_61;
    }
  }
  unsigned int v9 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, v42);
  uint64_t v42 = (v42 + v9);
  uint64_t v48 = *(void *)(a1 + 8);
  unsigned int v44 = *(_DWORD *)(v48 + 16 * v42 + 8);
  BOOL v49 = (uint64_t *)(v48 + 16 * v42);
  uint64_t v46 = *v49;
  uint64_t v47 = *((unsigned int *)v49 + 3);
  if (v44 != v47) {
    goto LABEL_37;
  }
LABEL_61:
  uint64_t v68 = (void *)(v46 + 8 * v47);
  *uint64_t v68 = a3;
  v68[12] = a4;
  uint64_t v69 = *(void *)v7;
  uint64_t v70 = *(void *)v7 + 16 * v42;
  uint64_t v71 = *(unsigned int *)(v70 + 8);
  *(_DWORD *)(v70 + 8) = v71 + 1;
  if (v42)
  {
    *(void *)(*(void *)(v69 + 16 * (v42 - 1))
              + 8 * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) = *(void *)(*(void *)(v69 + 16 * (v42 - 1))
                                                                                                + 8
                                                                                                * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v71;
    uint64_t v69 = *(void *)v7;
    uint64_t v72 = *(void *)v7 + 16 * v42;
    unsigned int v73 = *(_DWORD *)(v72 + 12);
    if (v73 == *(_DWORD *)(v72 + 8) - 1)
    {
      int v74 = (_DWORD *)(v72 - 8);
      uint64_t v75 = v42;
      while (--v75)
      {
        uint64_t v76 = *((void *)v74 - 1);
        int v78 = *v74;
        uint64_t v77 = v74[1];
        v74 -= 4;
        *(void *)(v76 + 8 * v77 + 96) = a4;
        if (v77 != v78 - 1) {
          goto LABEL_69;
        }
      }
      *(void *)(*(void *)v69 + 8 * *(unsigned int *)(v69 + 12) + 128) = a4;
    }
  }
  else
  {
    unsigned int v73 = *(_DWORD *)(v70 + 12);
  }
LABEL_69:
  uint64_t v79 = *(void *)(*(void *)(v69 + 16 * v42) + 8 * v73);
  uint64_t v80 = v69 + 16 * (v42 + 1);
  *(void *)uint64_t v80 = v79 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v80 + 8) = (v79 & 0x3F) + 1;
  return v9;
}

void *llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  if (result)
  {
    *(void *)a1 = *result;
  }
  else
  {
    *(void *)(a1 + 88) += 192;
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      BOOL v4 = ((v3 + 63) & 0xFFFFFFFFFFFFFFC0) - v3 + 192 > *(void *)(a1 + 16) - v3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 32) >> 7;
      if (v5 >= 0x1E) {
        LOBYTE(v5) = 30;
      }
      uint64_t v6 = 4096 << v5;
      buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
      uint64_t v8 = *(unsigned int *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        uint64_t v10 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        buffer = v10;
        LODWORD(v8) = *(_DWORD *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v8) = buffer;
      ++*(_DWORD *)(a1 + 32);
      unsigned int v9 = &buffer[v6];
      uint64_t result = (void *)((unint64_t)(buffer + 63) & 0xFFFFFFFFFFFFFFC0);
      *(void *)(a1 + 8) = result + 24;
      *(void *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t result = (void *)((v3 + 63) & 0xFFFFFFFFFFFFFFC0);
      *(void *)(a1 + 8) = result + 24;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(uint64_t a1, unsigned int *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unint64_t v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v35, a2, 1);
  unint64_t v4 = a1 + 8;
  unsigned int v5 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  unint64_t v6 = (unint64_t)v5;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  uint64_t v7 = v35;
  if (v35)
  {
    if (v35 >= 6
      && ((unint64_t)v5 < 8 * (unint64_t)v35 + a1 + 136
        ? (BOOL v8 = v4 >= (unint64_t)v5 + 8 * v35 + 96)
        : (BOOL v8 = 1),
          v8))
    {
      uint64_t v9 = v35 & 0xFFFFFFFE;
      uint64_t v10 = (long long *)(a1 + 136);
      uint64_t v11 = v9;
      uint64_t v12 = v5;
      do
      {
        *uint64_t v12 = *(v10 - 8);
        long long v13 = *v10++;
        v12[6] = v13;
        ++v12;
        v11 -= 2;
      }
      while (v11);
      if (v9 == v7) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v14 = v7 - v9;
    uint64_t v15 = 8 * v9;
    unint64_t v16 = (uint64_t *)(8 * v9 + a1 + 136);
    unint64_t v17 = (void *)((char *)v5 + v15);
    do
    {
      *unint64_t v17 = *(v16 - 16);
      uint64_t v18 = *v16++;
      v17[12] = v18;
      ++v17;
      --v14;
    }
    while (v14);
LABEL_15:
    unsigned int v19 = v35;
    goto LABEL_17;
  }
  unsigned int v19 = 0;
LABEL_17:
  unint64_t v20 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  *(_OWORD *)unint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  uint64_t v21 = v36;
  if (!v36)
  {
    uint64_t v29 = 0xFFFFFFFFLL;
    goto LABEL_27;
  }
  if (v36 < 0xC
    || __CFADD__(v19, v36 - 1)
    || (v22 = 8 * (v36 - 1), uint64_t v23 = a1 + 8 * v19, v20 < v23 + v22 + 144) && v23 + 8 < v22 + v20 + 104)
  {
    uint64_t v24 = 0;
    unsigned int v25 = v19;
  }
  else
  {
    uint64_t v24 = v36 & 0xFFFFFFFE;
    unsigned int v25 = v19 + (v36 & 0xFFFFFFFE);
    unsigned int v31 = v19;
    uint64_t v32 = v24;
    uint64_t v33 = (_OWORD *)v20;
    do
    {
      unsigned int v34 = (_OWORD *)(v4 + 8 * v31);
      *uint64_t v33 = *v34;
      v33[6] = v34[8];
      ++v33;
      v31 += 2;
      v32 -= 2;
    }
    while (v32);
    if (v24 == v21) {
      goto LABEL_25;
    }
  }
  int v26 = v21 + v19;
  uint64_t v27 = (void *)(v20 + 8 * v24);
  do
  {
    uint64_t v28 = (void *)(v4 + 8 * v25);
    *uint64_t v27 = *v28;
    v27[12] = v28[16];
    ++v25;
    ++v27;
  }
  while (v26 != v25);
LABEL_25:
  uint64_t v29 = v36 - 1;
LABEL_27:
  *(void *)(a1 + 136) = *(void *)((v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1) & 0xFFFFFFC0) + 8 * (v35 - 1) + 0x60);
  *(void *)(a1 + 8) = v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1);
  *(void *)(a1 + 144) = *(void *)((v20 & 0xFFFFFFFFFFFFFFC0 | v29 & 0xFFFFFFFFFFFFFFC0) + 8 * v29 + 0x60);
  *(void *)(a1 + 16) = v20 & 0xFFFFFFFFFFFFFFC0 | v29;
  *(_DWORD *)(a1 + 276) = 2;
  ++*(_DWORD *)(a1 + 272);
  return v3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v70 = *MEMORY[0x263EF8340];
  unint64_t v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v5 = a2;
  unint64_t v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  uint64_t v8 = LeftSibling;
  if (LeftSibling)
  {
    int v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    unint64_t v6 = (v9 + v6);
    *(void *)&long long v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    unsigned int v10 = 1;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)v4 + 16 * v5;
  int v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  int v13 = v12 + v9;
  unint64_t v14 = v10 + 1;
  *(void *)((unint64_t)&v67 | (8 * v10)) = *(void *)v11;
  uint64_t RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    int v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((void *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    unint64_t v14 = v10 | 2;
  }
  if (v13 + 1 <= (12 * v14))
  {
    unsigned int v17 = 0;
  }
  else
  {
    if (v14 == 1) {
      unsigned int v17 = 1;
    }
    else {
      unsigned int v17 = v14 - 1;
    }
    uint64_t v18 = v17;
    v69[v14] = v69[v18];
    uint64_t v19 = 8 * v17;
    *((void *)&v67 + v14) = *(void *)((char *)&v67 + v19);
    v69[v18] = 0;
    unint64_t v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(*(void *)this + 280));
    *unint64_t v20 = 0u;
    v20[1] = 0u;
    v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    unint64_t v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(void *)((char *)&v67 + v19) = v20;
  }
  unint64_t v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xCu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8) {
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  }
  uint64_t v22 = v63 - 1;
  uint64_t v23 = *(void *)(v67 + 8 * v22 + 96);
  uint64_t v24 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v63;
  if (!v2)
  {
LABEL_18:
    if (v14 != 1) {
      goto LABEL_24;
    }
LABEL_19:
    uint64_t inserted = 0;
    int v32 = v21;
    if (v21) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  *(void *)(*(void *)(v24 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v24 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  uint64_t v25 = *(void *)v4;
  uint64_t v26 = 16 * v5;
  while (1)
  {
    uint64_t v27 = v26 - 16;
    if (v26 == 16) {
      break;
    }
    uint64_t v28 = v25 + v26;
    uint64_t v29 = *(unsigned int *)(v28 - 4);
    *(void *)(*(void *)(v28 - 16) + 8 * v29 + 96) = v23;
    int v30 = *(_DWORD *)(v28 - 8) - 1;
    uint64_t v26 = v27;
    if (v29 != v30) {
      goto LABEL_18;
    }
  }
  *(void *)(*(void *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if (v14 == 1) {
    goto LABEL_19;
  }
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v35 = (v64 - 1);
  uint64_t v36 = *(void *)(*((void *)&v67 + 1) + 8 * v35 + 96);
  if (v17 != 1)
  {
    uint64_t v37 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v64;
    if (v2)
    {
      *(void *)(*(void *)(v37 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v37 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      uint64_t v38 = *(void *)v4;
      uint64_t v39 = 16 * v2;
      while (1)
      {
        uint64_t v40 = v39 - 16;
        if (v39 == 16) {
          break;
        }
        uint64_t v41 = v38 + v39;
        uint64_t v42 = *(unsigned int *)(v41 - 4);
        *(void *)(*(void *)(v41 - 16) + 8 * v42 + 96) = v36;
        int v43 = *(_DWORD *)(v41 - 8) - 1;
        uint64_t v39 = v40;
        if (v42 != v43) {
          goto LABEL_32;
        }
      }
      uint64_t inserted = 0;
      *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
    else
    {
LABEL_32:
      uint64_t inserted = 0;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
LABEL_26:
    int v32 = v21 - 1;
    if (v21 == 1) {
      goto LABEL_22;
    }
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((void *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  uint64_t v2 = (v2 + inserted);
  if (v14 == 2) {
    goto LABEL_26;
  }
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v44 = (v65 - 1);
  uint64_t v45 = *(void *)(v68 + 8 * v44 + 96);
  if (v17 == 2)
  {
    uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    uint64_t v2 = (v2 + inserted);
    if (v14 != 3) {
      goto LABEL_35;
    }
    goto LABEL_42;
  }
  uint64_t v48 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v65;
  if (!v2)
  {
LABEL_41:
    if (v14 != 3) {
      goto LABEL_35;
    }
LABEL_42:
    int v32 = v21 - 2;
    if (v21 != 2) {
      goto LABEL_20;
    }
LABEL_22:
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return (uint64_t *)inserted;
  }
  *(void *)(*(void *)(v48 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v48 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  uint64_t v49 = *(void *)v4;
  uint64_t v50 = 16 * v2;
  while (1)
  {
    uint64_t v51 = v50 - 16;
    if (v50 == 16) {
      break;
    }
    uint64_t v52 = v49 + v50;
    uint64_t v53 = *(unsigned int *)(v52 - 4);
    *(void *)(*(void *)(v52 - 16) + 8 * v53 + 96) = v45;
    int v54 = *(_DWORD *)(v52 - 8) - 1;
    uint64_t v50 = v51;
    if (v53 != v54) {
      goto LABEL_41;
    }
  }
  *(void *)(*(void *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if (v14 == 3) {
    goto LABEL_42;
  }
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v46 = (v66 - 1);
  uint64_t v47 = *(void *)(*((void *)&v68 + 1) + 8 * v46 + 96);
  if (v17 == 3)
  {
    uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    LODWORD(v2) = v2 + inserted;
  }
  else
  {
    uint64_t v55 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v66;
    if (v2)
    {
      *(void *)(*(void *)(v55 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v55 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      uint64_t v56 = *(void *)v4;
      uint64_t v57 = 16 * v2;
      while (1)
      {
        uint64_t v58 = v57 - 16;
        if (v57 == 16) {
          break;
        }
        uint64_t v59 = v56 + v57;
        uint64_t v60 = *(unsigned int *)(v59 - 4);
        *(void *)(*(void *)(v59 - 16) + 8 * v60 + 96) = v47;
        int v61 = *(_DWORD *)(v59 - 8) - 1;
        uint64_t v57 = v58;
        if (v60 != v61) {
          goto LABEL_54;
        }
      }
      *(void *)(*(void *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if (v14 == 4)
  {
    int v32 = v21 - 3;
    if (v21 == 3) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v5 = (int)v4;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v5);
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 != v7) {
        break;
      }
LABEL_3:
      if (!--v5)
      {
        if (a2 < 2) {
          return result;
        }
        uint64_t v74 = 0;
        while (1)
        {
          unsigned int v75 = *(_DWORD *)(a3 + 4 * v74);
          unsigned int v76 = *(_DWORD *)(a4 + 4 * v74);
          if (v75 != v76) {
            break;
          }
LABEL_102:
          if (++v74 == v4) {
            return result;
          }
        }
        LODWORD(v77) = v74;
        while (2)
        {
          uint64_t v77 = (v77 + 1);
          if (v77 == a2) {
            goto LABEL_102;
          }
          unint64_t v79 = *(void *)(result + 8 * v77);
          uint64_t v80 = *(unsigned int *)(a3 + 4 * v77);
          uint64_t v81 = *(void *)(result + 8 * v74);
          unsigned int v82 = v75 - v76;
          if ((int)(v75 - v76) >= 1)
          {
            LODWORD(v83) = 12 - v80;
            if (v75 >= v82) {
              unsigned int v78 = v75 - v76;
            }
            else {
              unsigned int v78 = v75;
            }
            if (v83 < v78) {
              unsigned int v78 = 12 - v80;
            }
            if (v80)
            {
              if (v80 < 0x32 || __CFADD__(v80 - 1, v78)) {
                goto LABEL_153;
              }
              uint64_t v84 = 8 * (v80 - 1 + v78);
              uint64_t v85 = 8 * (v80 - 1);
              BOOL v86 = v79 + v84 - v85 > v79 + v84 || v79 + 96 + v84 - v85 > v79 + 96 + v84;
              BOOL v87 = v86 || v79 > v79 + v85;
              BOOL v88 = v87 || v79 + 96 > v79 + 96 + v85;
              if (v88
                || (unint64_t v89 = v85 + v79, (unint64_t)(v85 - v84) < 0x10)
                || (unint64_t v90 = v79 + 96 + v85, v84 + v79 - v90 < 0x10)
                || (unint64_t v91 = v79 + 96 + v84, v89 - v91 < 0x10)
                || v90 - v91 < 0x10)
              {
LABEL_153:
                int v92 = *(_DWORD *)(a3 + 4 * v77);
              }
              else
              {
                int v92 = *(_DWORD *)(a3 + 4 * v77) & 1;
                uint64_t v93 = v80 & 0xFFFFFFFE;
                uint64_t v94 = *(unsigned int *)(a3 + 4 * v77);
                do
                {
                  uint64_t v95 = 8 * (v94 - 1);
                  uint64_t v96 = 8 * (v78 - 1 + v94);
                  *(_OWORD *)(v79 - 8 + v96) = *(_OWORD *)(v79 - 8 + v95);
                  *(_OWORD *)(v79 + 88 + v96) = *(_OWORD *)(v79 + 88 + v95);
                  v94 -= 2;
                  v93 -= 2;
                }
                while (v93);
                if ((v80 & 0xFFFFFFFE) == v80) {
                  goto LABEL_156;
                }
              }
              unint64_t v106 = (void *)(v79 + 8 * (v92 - 1));
              do
              {
                BOOL v107 = (void *)(v79 + 8 * (v78 - 1 + v92));
                *BOOL v107 = *v106;
                v107[12] = v106[12];
                --v106;
                --v92;
              }
              while (v92);
            }
LABEL_156:
            if (v78)
            {
              uint64_t v108 = 0;
              unsigned int v109 = v75 - v78;
              if (v75 < v82) {
                unsigned int v82 = v75;
              }
              if (v82 >= v83) {
                uint64_t v83 = v83;
              }
              else {
                uint64_t v83 = v82;
              }
              if (v83 < 0xA || v75 - 1 < v109)
              {
LABEL_167:
                unsigned int v112 = v75 - v78;
                goto LABEL_168;
              }
              uint64_t v110 = 8 * (v78 - 1);
              uint64_t v111 = 8 * (v75 - v78);
              if (v79 < v81 + v111 + v110 + 104 && v81 + v111 < v79 + v110 + 104)
              {
                uint64_t v108 = 0;
                goto LABEL_167;
              }
              uint64_t v108 = v83 & 0xFFFFFFFE;
              unsigned int v112 = v109 + (v83 & 0xFFFFFFFE);
              uint64_t v129 = v108;
              uint64_t v130 = (_OWORD *)v79;
              do
              {
                uint64_t v131 = (_OWORD *)(v81 + 8 * v109);
                *uint64_t v130 = *v131;
                v130[6] = v131[6];
                ++v130;
                v109 += 2;
                v129 -= 2;
              }
              while (v129);
              if (v108 != v83)
              {
LABEL_168:
                BOOL v113 = (void *)(v79 + 8 * v108);
                do
                {
                  int v114 = (void *)(v81 + 8 * v112);
                  *BOOL v113 = *v114;
                  v113[12] = v114[12];
                  ++v112;
                  ++v113;
                }
                while (v75 != v112);
              }
            }
LABEL_106:
            *(_DWORD *)(a3 + 4 * v77) += v78;
            unsigned int v75 = *(_DWORD *)(a3 + 4 * v74) - v78;
            *(_DWORD *)(a3 + 4 * v74) = v75;
            unsigned int v76 = *(_DWORD *)(a4 + 4 * v74);
            if (v75 >= v76) {
              goto LABEL_102;
            }
            continue;
          }
          break;
        }
        unsigned int v97 = 12 - v75;
        if (v76 - v75 < v80) {
          LODWORD(v98) = v76 - v75;
        }
        else {
          LODWORD(v98) = *(_DWORD *)(a3 + 4 * v77);
        }
        if (v97 >= v98) {
          uint64_t v98 = v98;
        }
        else {
          uint64_t v98 = v97;
        }
        if (v98)
        {
          if (v98 < 0xA
            || __CFADD__(v75, v98 - 1)
            || ((unint64_t v99 = v81 + 8 * v75, v79 < v99 + 8 * v98 + 96) ? (v100 = v99 >= v79 + 8 * v98 + 96) : (v100 = 1),
                !v100))
          {
            uint64_t v101 = 0;
            unsigned int v102 = v75;
            goto LABEL_172;
          }
          uint64_t v101 = v98 & 0xFFFFFFFE;
          unsigned int v102 = v75 + (v98 & 0xFFFFFFFE);
          uint64_t v103 = v101;
          unint64_t v104 = *(_OWORD **)(result + 8 * v77);
          do
          {
            BOOL v105 = (_OWORD *)(v81 + 8 * v75);
            *BOOL v105 = *v104;
            v105[6] = v104[6];
            ++v104;
            v75 += 2;
            v103 -= 2;
          }
          while (v103);
          if (v101 != v98)
          {
LABEL_172:
            uint64_t v115 = v98 - v101;
            uint64_t v116 = (void *)(v79 + 8 * v101);
            do
            {
              BOOL v117 = (void *)(v81 + 8 * v102);
              *BOOL v117 = *v116;
              v117[12] = v116[12];
              ++v102;
              ++v116;
              --v115;
            }
            while (v115);
          }
        }
        if (v98 != v80)
        {
          uint64_t v118 = 0;
          uint64_t v119 = (v80 + ~v98);
          if (v119 < 0x15
            || (int)v80 - 1 < v98
            || (v118 = 0, uint64_t v120 = 8 * v98, (unint64_t)(v120 + 96) < 0x10)
            || (unint64_t)(96 - v120) < 0x10
            || !v98)
          {
            unsigned int v122 = v98;
            goto LABEL_185;
          }
          uint64_t v121 = v119 + 1;
          uint64_t v118 = (v119 + 1) & 0x1FFFFFFFELL;
          unsigned int v122 = v98 + v118;
          unsigned int v123 = v98;
          uint64_t v124 = v118;
          long long v125 = (_OWORD *)v79;
          do
          {
            long long v126 = (_OWORD *)(v79 + 8 * v123);
            *long long v125 = *v126;
            v125[6] = v126[6];
            ++v125;
            v123 += 2;
            v124 -= 2;
          }
          while (v124);
          if (v121 != v118)
          {
LABEL_185:
            long long v127 = (void *)(v79 + 8 * v118);
            do
            {
              long long v128 = (void *)(v79 + 8 * v122);
              *long long v127 = *v128;
              v127[12] = v128[12];
              ++v122;
              ++v127;
            }
            while (v80 != v122);
          }
        }
        unsigned int v78 = -(int)v98;
        goto LABEL_106;
      }
    }
    uint64_t v8 = v5;
    while (1)
    {
      if (!v8) {
        goto LABEL_3;
      }
      --v8;
      unint64_t v10 = *(void *)(result + 8 * v5);
      uint64_t v11 = *(void *)(result + 8 * v8);
      uint64_t v12 = *(unsigned int *)(a3 + 4 * v8);
      unsigned int v13 = v7 - v6;
      if ((int)(v7 - v6) < 1)
      {
        unsigned int v44 = 12 - v12;
        if (v6 - v7 < v6) {
          LODWORD(v45) = v6 - v7;
        }
        else {
          LODWORD(v45) = v6;
        }
        if (v44 >= v45) {
          uint64_t v45 = v45;
        }
        else {
          uint64_t v45 = v44;
        }
        if (v45)
        {
          if (v45 < 0xA
            || __CFADD__(v12, v45 - 1)
            || ((unint64_t v46 = v11 + 8 * v12, v10 < v46 + 8 * v45 + 96) ? (v47 = v46 >= v10 + 8 * v45 + 96) : (v47 = 1), !v47))
          {
            uint64_t v48 = 0;
            unsigned int v49 = *(_DWORD *)(a3 + 4 * v8);
            goto LABEL_75;
          }
          uint64_t v48 = v45 & 0xFFFFFFFE;
          unsigned int v49 = v12 + (v45 & 0xFFFFFFFE);
          uint64_t v50 = v48;
          uint64_t v51 = *(_OWORD **)(result + 8 * v5);
          do
          {
            uint64_t v52 = (_OWORD *)(v11 + 8 * v12);
            *uint64_t v52 = *v51;
            v52[6] = v51[6];
            ++v51;
            LODWORD(v12) = v12 + 2;
            v50 -= 2;
          }
          while (v50);
          if (v48 != v45)
          {
LABEL_75:
            uint64_t v53 = v45 - v48;
            int v54 = (void *)(v10 + 8 * v48);
            do
            {
              uint64_t v55 = (void *)(v11 + 8 * v49);
              *uint64_t v55 = *v54;
              v55[12] = v54[12];
              ++v49;
              ++v54;
              --v53;
            }
            while (v53);
          }
        }
        if (v45 != v6)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v6 + ~v45;
          if (v57 < 0x15
            || v6 - 1 < v45
            || (uint64_t v56 = 0, v58 = 8 * v45, (unint64_t)(v58 + 96) < 0x10)
            || (unint64_t)(96 - v58) < 0x10
            || !v45)
          {
            unsigned int v60 = v45;
            goto LABEL_88;
          }
          uint64_t v59 = v57 + 1;
          uint64_t v56 = (v57 + 1) & 0x1FFFFFFFELL;
          unsigned int v60 = v45 + v56;
          unsigned int v61 = v45;
          uint64_t v62 = v56;
          unsigned int v63 = (_OWORD *)v10;
          do
          {
            int v64 = (_OWORD *)(v10 + 8 * v61);
            *unsigned int v63 = *v64;
            v63[6] = v64[6];
            ++v63;
            v61 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v59 != v56)
          {
LABEL_88:
            int v65 = (void *)(v10 + 8 * v56);
            do
            {
              int v66 = (void *)(v10 + 8 * v60);
              *int v65 = *v66;
              v65[12] = v66[12];
              ++v60;
              ++v65;
            }
            while (v6 != v60);
          }
        }
        unsigned int v9 = -(int)v45;
        goto LABEL_7;
      }
      LODWORD(v14) = 12 - v6;
      if (v12 >= v13) {
        unsigned int v9 = v7 - v6;
      }
      else {
        unsigned int v9 = *(_DWORD *)(a3 + 4 * v8);
      }
      if (v14 < v9) {
        unsigned int v9 = 12 - v6;
      }
      if (v6)
      {
        uint64_t v15 = v6;
        if (v6 < 0x32) {
          goto LABEL_38;
        }
        unsigned int v16 = v6 - 1;
        unsigned int v17 = v6 - 1 + v9;
        if (__CFADD__(v16, v9)) {
          goto LABEL_38;
        }
        uint64_t v18 = 8 * v17;
        uint64_t v19 = 8 * v16;
        BOOL v20 = v10 + v18 - v19 > v10 + v18 || v10 + 96 + v18 - v19 > v10 + 96 + v18;
        BOOL v21 = v20 || v10 > v10 + v19;
        if (v21 || v10 + 96 > v10 + 96 + v19) {
          goto LABEL_38;
        }
        unint64_t v23 = v18 + v10;
        unint64_t v24 = v10 + 96 + v18;
        unint64_t v25 = v19 + v10;
        unint64_t v26 = v19 + v10 - v23;
        unint64_t v27 = v10 + 96 + v19;
        unint64_t v28 = v23 - v27;
        unint64_t v29 = v25 - v24;
        unint64_t v30 = v27 - v24;
        BOOL v31 = v26 >= 0x10 && v28 >= 0x10;
        BOOL v32 = v31 && v29 >= 0x10;
        if (!v32 || v30 < 0x10)
        {
LABEL_38:
          int v34 = v15;
LABEL_39:
          uint64_t v35 = (void *)(v10 + 8 * (v34 - 1));
          do
          {
            uint64_t v36 = (void *)(v10 + 8 * (v9 - 1 + v34));
            *uint64_t v36 = *v35;
            v36[12] = v35[12];
            --v35;
            --v34;
          }
          while (v34);
          goto LABEL_41;
        }
        int v34 = v15 & 1;
        uint64_t v70 = v15 & 0xFFFFFFFE;
        uint64_t v71 = v15;
        do
        {
          uint64_t v72 = 8 * (v71 - 1);
          uint64_t v73 = 8 * (v9 - 1 + v71);
          *(_OWORD *)(v10 - 8 + v73) = *(_OWORD *)(v10 - 8 + v72);
          *(_OWORD *)(v10 + 88 + v73) = *(_OWORD *)(v10 + 88 + v72);
          v71 -= 2;
          v70 -= 2;
        }
        while (v70);
        if ((v15 & 0xFFFFFFFE) != v15) {
          goto LABEL_39;
        }
      }
LABEL_41:
      if (v9)
      {
        uint64_t v37 = 0;
        unsigned int v38 = v12 - v9;
        if (v12 < v13) {
          unsigned int v13 = v12;
        }
        if (v13 >= v14) {
          uint64_t v14 = v14;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14 < 0xA || (int)v12 - 1 < v38)
        {
LABEL_52:
          unsigned int v41 = v12 - v9;
        }
        else
        {
          uint64_t v39 = 8 * (v9 - 1);
          uint64_t v40 = 8 * (v12 - v9);
          if (v10 < v11 + v40 + v39 + 104 && v11 + v40 < v10 + v39 + 104)
          {
            uint64_t v37 = 0;
            goto LABEL_52;
          }
          uint64_t v37 = v14 & 0xFFFFFFFE;
          unsigned int v41 = v38 + (v14 & 0xFFFFFFFE);
          uint64_t v67 = v37;
          long long v68 = (_OWORD *)v10;
          do
          {
            uint64_t v69 = (_OWORD *)(v11 + 8 * v38);
            *long long v68 = *v69;
            v68[6] = v69[6];
            ++v68;
            v38 += 2;
            v67 -= 2;
          }
          while (v67);
          if (v37 == v14) {
            goto LABEL_7;
          }
        }
        uint64_t v42 = (void *)(v10 + 8 * v37);
        do
        {
          int v43 = (void *)(v11 + 8 * v41);
          *uint64_t v42 = *v43;
          v42[12] = v43[12];
          ++v41;
          ++v42;
        }
        while (v12 != v41);
      }
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v5) + v9;
      *(_DWORD *)(a3 + 4 * v5) = v6;
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 >= v7) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void llvm::IntervalMapOverlaps<llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>,llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>>::advance(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v3 + 12) < *(_DWORD *)(v3 + 8))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 104);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 96);
        if (*(_DWORD *)(v5 + 12) < *(_DWORD *)(v5 + 8))
        {
          uint64_t v6 = v3 + 16 * v1;
          uint64_t v7 = *(void *)(v6 - 16);
          uint64_t v8 = *(unsigned int *)(v6 - 4);
          uint64_t v9 = a1 + 88;
          uint64_t v10 = v5 + 16 * v4;
          uint64_t v11 = *(void *)(v10 - 16);
          uint64_t v12 = *(unsigned int *)(v10 - 4);
          unint64_t v13 = *(void *)(v11 + 16 * v12);
          if (*(void *)(v7 + 16 * v8 + 8) >= v13)
          {
            unint64_t v15 = *(void *)(v7 + 16 * v8);
            if (*(void *)(v11 + 16 * v12 + 8) < v15)
            {
              uint64_t v16 = *(void *)v9;
              if (!*(_DWORD *)(*(void *)v9 + 272))
              {
                int v17 = *(_DWORD *)(v16 + 276);
                if (v12 == v17) {
                  goto LABEL_25;
                }
                do
                {
                  if (*(void *)(v16 + 16 * v12 + 8) >= v15) {
                    goto LABEL_25;
                  }
                  LODWORD(v12) = v12 + 1;
                }
                while (v17 != v12);
LABEL_24:
                LODWORD(v12) = v17;
                goto LABEL_25;
              }
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v14 = *(void *)a1;
            if (*(_DWORD *)(*(void *)a1 + 272))
            {
              llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v13);
            }
            else
            {
              int v18 = *(_DWORD *)(v14 + 276);
              if (v8 != v18)
              {
                while (*(void *)(v14 + 16 * v8 + 8) < v13)
                {
                  LODWORD(v8) = v8 + 1;
                  if (v18 == v8)
                  {
                    LODWORD(v8) = *(_DWORD *)(v14 + 276);
                    break;
                  }
                }
              }
              *(_DWORD *)(v6 - 4) = v8;
            }
            uint64_t v19 = *(unsigned int *)(a1 + 16);
            if (v19)
            {
              uint64_t v20 = *(void *)(a1 + 8);
              if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
              {
                uint64_t v21 = *(void *)(a1 + 96) + 16 * *(unsigned int *)(a1 + 104);
                uint64_t v22 = *(void *)(v21 - 16);
                uint64_t v23 = *(unsigned int *)(v21 - 4);
                if (*(void *)(v22 + 16 * v23 + 8) < *(void *)(*(void *)(v20 + 16 * v19 - 16)
                                                                 + 16 * *(unsigned int *)(v20 + 16 * v19 - 4)))
                {
                  unint64_t v24 = *(void *)(v22 + 16 * v23);
                  do
                  {
                    if (!v19) {
                      break;
                    }
                    if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
                    {
                      uint64_t v27 = *(void *)a1;
                      if (*(_DWORD *)(*(void *)a1 + 272))
                      {
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v24);
                      }
                      else
                      {
                        uint64_t v28 = v20 + 16 * v19;
                        unsigned int v29 = *(_DWORD *)(v28 - 4);
                        int v30 = *(_DWORD *)(v27 + 276);
                        if (v29 != v30)
                        {
                          while (*(void *)(v27 + 16 * v29 + 8) < v24)
                          {
                            if (v30 == ++v29)
                            {
                              unsigned int v29 = *(_DWORD *)(v27 + 276);
                              break;
                            }
                          }
                        }
                        *(_DWORD *)(v28 - 4) = v29;
                      }
                    }
                    uint64_t v31 = *(unsigned int *)(a1 + 16);
                    if (!v31) {
                      break;
                    }
                    uint64_t v32 = *(void *)(a1 + 8);
                    if (*(_DWORD *)(v32 + 12) >= *(_DWORD *)(v32 + 8)) {
                      break;
                    }
                    uint64_t v33 = *(void *)(a1 + 96);
                    uint64_t v34 = *(unsigned int *)(a1 + 104);
                    uint64_t v10 = v33 + 16 * v34;
                    uint64_t v12 = *(unsigned int *)(v10 - 4);
                    unint64_t v15 = *(void *)(*(void *)(v32 + 16 * v31 - 16) + 16 * *(unsigned int *)(v32 + 16 * v31 - 4));
                    if (*(void *)(*(void *)(v10 - 16) + 16 * v12 + 8) >= v15) {
                      break;
                    }
                    if (v34 && *(_DWORD *)(v33 + 12) < *(_DWORD *)(v33 + 8))
                    {
                      uint64_t v35 = *(void *)v9;
                      if (*(_DWORD *)(*(void *)v9 + 272))
                      {
LABEL_23:
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1 + 88, v15);
                      }
                      else
                      {
                        int v17 = *(_DWORD *)(v35 + 276);
                        if (v12 != v17)
                        {
                          while (*(void *)(v35 + 16 * v12 + 8) < v15)
                          {
                            LODWORD(v12) = v12 + 1;
                            if (v17 == v12) {
                              goto LABEL_24;
                            }
                          }
                        }
LABEL_25:
                        *(_DWORD *)(v10 - 4) = v12;
                      }
                    }
                    uint64_t v25 = *(unsigned int *)(a1 + 104);
                    if (!v25) {
                      break;
                    }
                    uint64_t v26 = *(void *)(a1 + 96);
                    if (*(_DWORD *)(v26 + 12) >= *(_DWORD *)(v26 + 8)) {
                      break;
                    }
                    uint64_t v20 = *(void *)(a1 + 8);
                    uint64_t v19 = *(unsigned int *)(a1 + 16);
                    unint64_t v24 = *(void *)(*(void *)(v26 + 16 * v25 - 16) + 16 * *(unsigned int *)(v26 + 16 * v25 - 4));
                  }
                  while (*(void *)(*(void *)(v20 + 16 * v19 - 16) + 16 * *(unsigned int *)(v20 + 16 * v19 - 4) + 8) < v24);
                }
              }
            }
          }
        }
      }
    }
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = v3 + 16 * v4;
  uint64_t v6 = *(void *)(v5 - 16);
  if (*(void *)(v6 + 16 * (*(_DWORD *)(v5 - 8) - 1) + 8) >= a2)
  {
    unsigned int v16 = *(_DWORD *)(v5 - 4);
    do
      unint64_t v17 = *(void *)(v6 + 16 * v16++ + 8);
    while (v17 < a2);
    *(_DWORD *)(v5 - 4) = v16 - 1;
    return;
  }
  *(_DWORD *)(a1 + 16) = v4 - 1;
  unsigned int v7 = v4 - 2;
  if (v4 == 2)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(unsigned int *)(v3 + 12);
    uint64_t v20 = *(void *)a1 + 8;
    uint64_t v21 = *(unsigned int *)(*(void *)a1 + 276);
    if (v19 != v21) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v4 != 3)
    {
      if (*(void *)(*(void *)(v3 + 16 * (v4 - 3))
                     + 8 * *(unsigned int *)(v3 + 16 * (v4 - 3) + 12)
                     + 96) >= a2)
      {
LABEL_9:
        uint64_t v10 = (uint64_t *)(v3 + 16 * v7);
        uint64_t v11 = *v10;
        unsigned int v14 = *((_DWORD *)v10 + 3);
        uint64_t v12 = (_DWORD *)v10 + 3;
        unsigned int v13 = v14;
        do
          unint64_t v15 = *(void *)(v11 + 8 * v13++ + 96);
        while (v15 < a2);
        *uint64_t v12 = v13 - 1;
LABEL_12:
LABEL_14:
        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(a1, a2);
        return;
      }
      unsigned int v8 = v4 - 4;
      while (1)
      {
        *(_DWORD *)(a1 + 16) = v8 + 2;
        if (!v8) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)(v3 + 16 * v8) + 8 * *(unsigned int *)(v3 + 16 * v8 + 12) + 96);
        --v8;
        if (v9 >= a2)
        {
          unsigned int v7 = v8 + 2;
          goto LABEL_9;
        }
      }
    }
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(unsigned int *)(v3 + 12);
    if (*(void *)(*(void *)a1 + 8 * v19 + 136) >= a2)
    {
      unsigned int v28 = *(_DWORD *)(v3 + 28);
      do
        unint64_t v29 = *(void *)(*(void *)(v3 + 16) + 8 * v28++ + 96);
      while (v29 < a2);
      *(_DWORD *)(v3 + 28) = v28 - 1;
      goto LABEL_14;
    }
    uint64_t v20 = v18 + 8;
    uint64_t v21 = *(unsigned int *)(v18 + 276);
    if (v19 != v21)
    {
LABEL_22:
      while (*(void *)(v20 + 8 * v19 + 128) < a2)
      {
        uint64_t v19 = (v19 + 1);
        if (v21 == v19)
        {
          uint64_t v19 = v21;
          break;
        }
      }
    }
  }
  int v22 = *(_DWORD *)(v18 + 272);
  *(_DWORD *)(a1 + 16) = 0;
  int v23 = *(_DWORD *)(a1 + 20);
  if (v22)
  {
    if (v23)
    {
      uint64_t v24 = 0;
    }
    else
    {
      unint64_t v38 = a2;
      uint64_t v40 = a1;
      uint64_t v34 = v21;
      uint64_t v36 = a1 + 8;
      uint64_t v30 = v20;
      uint64_t v32 = v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
      uint64_t v20 = v30;
      uint64_t v19 = v32;
      uint64_t v21 = v34;
      uint64_t v2 = v36;
      a2 = v38;
      a1 = v40;
      uint64_t v24 = *(unsigned int *)(v40 + 16);
      uint64_t v3 = *(void *)(v40 + 8);
    }
    uint64_t v25 = (uint64_t *)(v3 + 16 * v24);
    *uint64_t v25 = v20;
    v25[1] = v21 | (v19 << 32);
    LODWORD(v25) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v25 + 1;
    if (v25 == -1) {
      return;
    }
    goto LABEL_33;
  }
  if (v23)
  {
    uint64_t v26 = 0;
  }
  else
  {
    unint64_t v39 = a2;
    uint64_t v41 = a1;
    uint64_t v35 = v21;
    uint64_t v37 = a1 + 8;
    uint64_t v31 = v18;
    uint64_t v33 = v19;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
    uint64_t v18 = v31;
    uint64_t v19 = v33;
    uint64_t v21 = v35;
    uint64_t v2 = v37;
    a2 = v39;
    a1 = v41;
    uint64_t v26 = *(unsigned int *)(v41 + 16);
    uint64_t v3 = *(void *)(v41 + 8);
  }
  uint64_t v27 = (void *)(v3 + 16 * v26);
  *uint64_t v27 = v18;
  v27[1] = v21 | (v19 << 32);
  LODWORD(v27) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v27 + 1;
  if (v27 != -1)
  {
LABEL_33:
    if (*(_DWORD *)(*(void *)v2 + 12) >= *(_DWORD *)(*(void *)v2 + 8)) {
      return;
    }
    goto LABEL_12;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::goToBegin(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    unsigned int v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      uint64_t v5 = *((unsigned int *)a1 + 4);
    }
    uint64_t v6 = (void *)(*v2 + 16 * v5);
    *uint64_t v6 = v3 + 8;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v7 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      uint64_t v7 = *((unsigned int *)a1 + 4);
    }
    uint64_t v6 = (void *)(*v2 + 16 * v7);
    *uint64_t v6 = v3;
  }
  v6[1] = v4;
  unsigned int v8 = *((_DWORD *)a1 + 4);
  unsigned int v9 = v8 + 1;
  *((_DWORD *)a1 + 4) = v8 + 1;
  unsigned int v10 = *(_DWORD *)(*a1 + 272);
  if (v10) {
    BOOL v11 = v8 >= v10;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    do
    {
      uint64_t v12 = a1[1];
      uint64_t v13 = *(void *)(*(void *)(v12 + 16 * v8) + 8 * *(unsigned int *)(v12 + 16 * v8 + 12));
      if (v9 >= *((_DWORD *)a1 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, a1 + 3, v9 + 1, 16);
        unsigned int v9 = *((_DWORD *)a1 + 4);
        uint64_t v12 = a1[1];
      }
      unsigned int v14 = (unint64_t *)(v12 + 16 * v9);
      *unsigned int v14 = v13 & 0xFFFFFFFFFFFFFFC0;
      v14[1] = (v13 & 0x3F) + 1;
      unsigned int v8 = *((_DWORD *)a1 + 4);
      unsigned int v9 = v8 + 1;
      *((_DWORD *)a1 + 4) = v8 + 1;
    }
    while (v8 < v10);
  }
}

double mlir::Region::getOps<mlir::pdl_interp::FuncOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  unsigned int v4 = v10;
  *(void *)uint64_t v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        unsigned int v4 = *(ZinIrHalH13g **)v12)
  {
    uint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  unint64_t v17 = i;
  *(void *)unsigned int v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unsigned int v10 = buffer + 8;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unsigned int v10 = buffer + 8;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  *(void *)buffer = a3;
  buffer[4] = 0;
  *uint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

void anonymous namespace'::ByteCodeWriter::appendPDLValue(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(void **)(*(void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
  {
    __int16 v5 = 0;
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2]) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
  {
    __int16 v5 = 1;
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2]) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    uint64_t v15 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      __int16 v5 = 3;
    }
    else {
      __int16 v5 = 5;
    }
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2]) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = 4 * (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2])
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v8, 2);
      uint64_t v7 = v6[1];
    }
  }
LABEL_12:
  *(_WORD *)(*v6 + 2 * v7) = v5;
  ++v6[1];
  unsigned int v10 = *(void **)(a1 + 24);
  long long v9 = *(uint64_t **)(a1 + 32);
  unint64_t v14 = a2;
  uint64_t v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v14, &v15))
  {
    __int16 v11 = *((_WORD *)v15 + 4);
  }
  else
  {
    uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v14, &v14, v15);
    __int16 v11 = 0;
    *uint64_t v12 = v14;
    *((_WORD *)v12 + 4) = 0;
  }
  uint64_t v13 = v10[1];
  if ((unint64_t)(v13 + 1) > v10[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v10, v10 + 3, v13 + 1, 2);
    uint64_t v13 = v10[1];
  }
  *(_WORD *)(*v10 + 2 * v13) = v11;
  ++v10[1];
}

void anonymous namespace'::ByteCodeWriter::append(_anonymous_namespace_::ByteCodeWriter *this, mlir::Block *a2)
{
  unint64_t v17 = a2;
  int v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(*(void *)this + 40 * v5);
    uint64_t v7 = (mlir::Block *)*v6;
    if ((mlir::Block *)*v6 == a2) {
      goto LABEL_14;
    }
    unint64_t v8 = 0;
    int v9 = 1;
    while (v7 != (mlir::Block *)-4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == (mlir::Block *)-8192;
      }
      if (v10) {
        unint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (uint64_t *)(*(void *)this + 40 * v5);
      uint64_t v7 = (mlir::Block *)*v6;
      if ((mlir::Block *)*v6 == a2) {
        goto LABEL_14;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>((uint64_t)this, v12, (uint64_t *)&v17);
LABEL_14:
  int v13 = *(_DWORD *)(*((void *)this + 3) + 8);
  uint64_t v14 = *((unsigned int *)v6 + 4);
  if (v14 >= *((_DWORD *)v6 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 1), v6 + 3, v14 + 1, 4);
    LODWORD(v14) = *((_DWORD *)v6 + 4);
  }
  *(_DWORD *)(v6[1] + 4 * v14) = v13;
  ++*((_DWORD *)v6 + 4);
  uint64_t v15 = (void *)*((void *)this + 3);
  uint64_t v16 = v15[1];
  if (v15[2] < (unint64_t)(v16 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v15, v15 + 3, v16 + 2, 2);
    uint64_t v16 = v15[1];
  }
  *(_DWORD *)(*v15 + 2 * v16) = 0;
  v15[1] += 2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  BOOL v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  unint64_t v18 = 40 * v17 - 40;
  uint64_t v19 = buffer;
  if (v18 < 0x28) {
    goto LABEL_34;
  }
  unint64_t v20 = v18 / 0x28 + 1;
  uint64_t v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  uint64_t v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  int v22 = buffer;
  do
  {
    void *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *uint64_t v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  uint64_t v7 = *a3;
  int v23 = v17 - 1;
  unsigned int v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[5 * v24];
  uint64_t v25 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = a2;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      a2 = &buffer[5 * v24];
      uint64_t v25 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v26) {
      a2 = v26;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x400000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    unint64_t v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      int v9 = *(void **)a1;
LABEL_7:
      int v13 = &v7[5 * v6];
      do
      {
        *int v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x28 + 1;
    int v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v17 = (void *)(*(void *)a1 + 40 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          unint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -8192;
            }
            if (v22) {
              unint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 40 * (v23 & v15));
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        *uint64_t v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x400000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3) {
          free(v19);
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

void anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::PDLType>,mlir::SuccessorRange>(_anonymous_namespace_::ByteCodeWriter *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*((void *)a1 + 3);
  unint64_t v8 = (uint64_t *)*((void *)a1 + 4);
  unint64_t v14 = a2;
  int v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v8, &v14, &v15))
  {
    __int16 v9 = *((_WORD *)v15 + 4);
  }
  else
  {
    unint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v14, &v14, v15);
    __int16 v9 = 0;
    void *v10 = v14;
    *((_WORD *)v10 + 4) = 0;
  }
  uint64_t v11 = v7[1];
  if ((unint64_t)(v11 + 1) > v7[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v7, v7 + 3, v11 + 1, 2);
    *(_WORD *)(*v7 + 2 * v7[1]++) = v9;
    if (!a4) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v7 + 2 * v11) = v9;
    ++v7[1];
    if (!a4) {
      return;
    }
  }
  unint64_t v12 = (mlir::Block **)(a3 + 24);
  do
  {
    int v13 = *v12;
    v12 += 4;
    --a4;
  }
  while (a4);
}

uint64_t *anonymous namespace'::Generator::getMemIndex<mlir::Attribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v4 = a1 + 120;
  uint64_t v5 = v6;
  __int16 v7 = **(_WORD **)(v4 + 96);
  unsigned int v8 = *(_DWORD *)(v4 + 16);
  if (!v8)
  {
    unint64_t v10 = 0;
    goto LABEL_13;
  }
  unsigned int v9 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v10 = (uint64_t *)(v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        unint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & (v8 - 1);
      unint64_t v10 = (uint64_t *)(v5 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        return v10 + 1;
      }
    }
    if (v12) {
      unint64_t v10 = v12;
    }
LABEL_13:
    uint64_t v16 = *(void *)(*(void *)(v4 + 64) + 8) - **(void **)(v4 + 64);
    int v17 = *(_DWORD *)(a1 + 128);
    if (4 * v17 + 4 >= 3 * v8)
    {
      v8 *= 2;
    }
    else if (v8 + ~v17 - *(_DWORD *)(a1 + 132) > v8 >> 3)
    {
      goto LABEL_15;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v4, v8);
    uint64_t v43 = *(void *)(a1 + 120);
    int v44 = *(_DWORD *)(a1 + 136) - 1;
    unsigned int v45 = v44 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v10 = (uint64_t *)(v43 + 16 * v45);
    uint64_t v46 = *v10;
    if (*v10 == a2)
    {
      uint64_t v18 = a2;
LABEL_16:
      ++*(_DWORD *)(a1 + 128);
      if (v18 != -4096) {
        --*(_DWORD *)(a1 + 132);
      }
      uint64_t *v10 = a2;
      *((_WORD *)v10 + 4) = v7 + (v16 >> 3);
      uint64_t v19 = *(char ***)(a1 + 184);
      int v21 = v19[1];
      unint64_t v20 = (unint64_t)v19[2];
      if ((unint64_t)v21 < v20)
      {
        *(void *)int v21 = a2;
        uint64_t v22 = (uint64_t)(v21 + 8);
LABEL_40:
        v19[1] = (char *)v22;
        return v10 + 1;
      }
      unsigned int v23 = *v19;
      uint64_t v24 = v21 - *v19;
      uint64_t v25 = v24 >> 3;
      unint64_t v26 = (v24 >> 3) + 1;
      if (v26 >> 61) {
        abort();
      }
      uint64_t v27 = v20 - (void)v23;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v29 = operator new(8 * v28);
        uint64_t v30 = &v29[8 * v25];
        uint64_t v31 = &v29[8 * v28];
        *(void *)uint64_t v30 = a2;
        uint64_t v22 = (uint64_t)(v30 + 8);
        uint64_t v32 = (char *)(v21 - v23);
        if (v21 == v23) {
          goto LABEL_38;
        }
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v30 = (char *)(8 * v25);
        uint64_t v31 = 0;
        *(void *)(8 * v25) = a2;
        uint64_t v22 = 8 * v25 + 8;
        uint64_t v32 = (char *)(v21 - v23);
        if (v21 == v23)
        {
LABEL_38:
          *uint64_t v19 = v30;
          v19[1] = (char *)v22;
          v19[2] = v31;
          if (v21) {
            operator delete(v21);
          }
          goto LABEL_40;
        }
      }
      unint64_t v33 = (unint64_t)(v32 - 8);
      if (v33 < 0x58) {
        goto LABEL_64;
      }
      if ((unint64_t)(v21 - v29 - v24) < 0x20) {
        goto LABEL_64;
      }
      uint64_t v34 = (v33 >> 3) + 1;
      uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v36 = &v21[-v35];
      v30 -= v35;
      uint64_t v37 = &v29[8 * v25 - 16];
      unint64_t v38 = v21 - 16;
      uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v40 = *(_OWORD *)v38;
        *(v37 - 1) = *((_OWORD *)v38 - 1);
        *uint64_t v37 = v40;
        v37 -= 2;
        v38 -= 32;
        v39 -= 4;
      }
      while (v39);
      int v21 = v36;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          uint64_t v41 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v30 - 1) = v41;
          v30 -= 8;
        }
        while (v21 != v23);
      }
      int v21 = *v19;
      goto LABEL_38;
    }
    BOOL v47 = 0;
    int v48 = 1;
    while (v46 != -4096)
    {
      if (v47) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v46 == -8192;
      }
      if (v49) {
        BOOL v47 = v10;
      }
      unsigned int v50 = v45 + v48++;
      unsigned int v45 = v50 & v44;
      unint64_t v10 = (uint64_t *)(v43 + 16 * v45);
      uint64_t v46 = *v10;
      uint64_t v18 = a2;
      if (*v10 == a2) {
        goto LABEL_16;
      }
    }
    if (v47) {
      unint64_t v10 = v47;
    }
LABEL_15:
    uint64_t v18 = *v10;
    goto LABEL_16;
  }
  return v10 + 1;
}

void *llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  unint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      int v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if ((*(void *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          uint64_t v23 = *(void *)a1 + 16 * v25;
          uint64_t v26 = *(void *)v23;
          if (v24 != *(void *)v23)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              uint64_t v23 = *(void *)a1 + 16 * (v30 & v16);
              uint64_t v26 = *(void *)v23;
              if (v24 == *(void *)v23) {
                goto LABEL_23;
              }
            }
            if (v27) {
              uint64_t v23 = v27;
            }
          }
LABEL_23:
          *(void *)uint64_t v23 = v24;
          *(_WORD *)(v23 + 8) = *((_WORD *)v17 + 4);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        int v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unint64_t v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *unint64_t v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      uint64_t v22 = &result[2 * v18];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,unsigned int,unsigned short,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, int a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)a1[3];
  uint64_t v15 = v14[1];
  if ((unint64_t)(v15 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v14 + 3, v15 + 1, 2);
    uint64_t v15 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v15) = a2;
  ++v14[1];
  int v16 = (void *)a1[3];
  int v17 = (uint64_t *)a1[4];
  unint64_t v27 = a3;
  int v28 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v17, &v27, &v28))
  {
    __int16 v18 = *((_WORD *)v28 + 4);
  }
  else
  {
    uint64_t v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v17, (uint64_t)&v27, &v27, v28);
    __int16 v18 = 0;
    *uint64_t v19 = v27;
    *((_WORD *)v19 + 4) = 0;
  }
  uint64_t v20 = v16[1];
  if ((unint64_t)(v20 + 1) > v16[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v16, v16 + 3, v20 + 1, 2);
    uint64_t v20 = v16[1];
  }
  *(_WORD *)(*v16 + 2 * v20) = v18;
  ++v16[1];
  uint64_t v21 = (void *)a1[3];
  uint64_t v22 = v21[1];
  if (v21[2] < (unint64_t)(v22 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v21 + 3, v22 + 2, 2);
    uint64_t v22 = v21[1];
  }
  *(_DWORD *)(*v21 + 2 * v22) = a4;
  v21[1] += 2;
  uint64_t v23 = (void *)a1[3];
  uint64_t v24 = v23[1];
  if ((unint64_t)(v24 + 1) > v23[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v23 + 3, v24 + 1, 2);
    *(_WORD *)(*v23 + 2 * v23[1]++) = a5;
    if (!a7) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v23 + 2 * v24) = a5;
    ++v23[1];
    if (!a7) {
      return;
    }
  }
  unsigned int v25 = (mlir::Block **)(a6 + 24);
  do
  {
    uint64_t v26 = *v25;
    v25 += 4;
    --a7;
  }
  while (a7);
}

void anonymous namespace'::ByteCodeWriter::append<mlir::OperationName>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 120;
  uint64_t v7 = *(void *)(a2 + 120);
  __int16 v8 = **(_WORD **)(a2 + 216);
  uint64_t v10 = **(void **)(a2 + 184);
  uint64_t v9 = *(void *)(*(void *)(a2 + 184) + 8);
  unsigned int v11 = *(_DWORD *)(a2 + 136);
  if (v11)
  {
    unsigned int v12 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    int v13 = (uint64_t *)(v7 + 16 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a3) {
      goto LABEL_41;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & (v11 - 1);
      int v13 = (uint64_t *)(v7 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a3) {
        goto LABEL_41;
      }
    }
    if (v15) {
      int v13 = v15;
    }
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v19 = v9 - v10;
  int v20 = *(_DWORD *)(a2 + 128);
  if (4 * v20 + 4 >= 3 * v11)
  {
    v11 *= 2;
  }
  else if (v11 + ~v20 - *(_DWORD *)(a2 + 132) > v11 >> 3)
  {
LABEL_15:
    uint64_t v21 = *v13;
    goto LABEL_16;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v6, v11);
  uint64_t v47 = *(void *)(a2 + 120);
  int v48 = *(_DWORD *)(a2 + 136) - 1;
  unsigned int v49 = v48 & ((a3 >> 4) ^ (a3 >> 9));
  int v13 = (uint64_t *)(v47 + 16 * v49);
  uint64_t v50 = *v13;
  if (*v13 != a3)
  {
    uint64_t v51 = 0;
    int v52 = 1;
    while (v50 != -4096)
    {
      if (v51) {
        BOOL v53 = 0;
      }
      else {
        BOOL v53 = v50 == -8192;
      }
      if (v53) {
        uint64_t v51 = v13;
      }
      unsigned int v54 = v49 + v52++;
      unsigned int v49 = v54 & v48;
      int v13 = (uint64_t *)(v47 + 16 * v49);
      uint64_t v50 = *v13;
      uint64_t v21 = a3;
      if (*v13 == a3) {
        goto LABEL_16;
      }
    }
    if (v51) {
      int v13 = v51;
    }
    goto LABEL_15;
  }
  uint64_t v21 = a3;
LABEL_16:
  ++*(_DWORD *)(a2 + 128);
  if (v21 != -4096) {
    --*(_DWORD *)(a2 + 132);
  }
  uint64_t *v13 = a3;
  *((_WORD *)v13 + 4) = v8 + (v19 >> 3);
  uint64_t v22 = *(char ***)(a2 + 184);
  uint64_t v24 = v22[1];
  unint64_t v23 = (unint64_t)v22[2];
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *v22;
    uint64_t v27 = v24 - *v22;
    uint64_t v28 = v27 >> 3;
    unint64_t v29 = (v27 >> 3) + 1;
    if (v29 >> 61) {
      abort();
    }
    uint64_t v30 = v23 - (void)v26;
    if (v30 >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v32 = operator new(8 * v31);
      unint64_t v33 = &v32[8 * v28];
      uint64_t v34 = &v32[8 * v31];
      *(void *)unint64_t v33 = a3;
      uint64_t v25 = (uint64_t)(v33 + 8);
      uint64_t v35 = (char *)(v24 - v26);
      if (v24 == v26) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v32 = 0;
      unint64_t v33 = (char *)(8 * v28);
      uint64_t v34 = 0;
      *(void *)(8 * v28) = a3;
      uint64_t v25 = 8 * v28 + 8;
      uint64_t v35 = (char *)(v24 - v26);
      if (v24 == v26)
      {
LABEL_38:
        void *v22 = v33;
        v22[1] = (char *)v25;
        v22[2] = v34;
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_40;
      }
    }
    unint64_t v36 = (unint64_t)(v35 - 8);
    if (v36 < 0x58) {
      goto LABEL_66;
    }
    if ((unint64_t)(v24 - v32 - v27) < 0x20) {
      goto LABEL_66;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v24[-v38];
    v33 -= v38;
    long long v40 = &v32[8 * v28 - 16];
    uint64_t v41 = v24 - 16;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *long long v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    uint64_t v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        uint64_t v44 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v33 - 1) = v44;
        v33 -= 8;
      }
      while (v24 != v26);
    }
    uint64_t v24 = *v22;
    goto LABEL_38;
  }
  *(void *)uint64_t v24 = a3;
  uint64_t v25 = (uint64_t)(v24 + 8);
LABEL_40:
  v22[1] = (char *)v25;
LABEL_41:
  __int16 v45 = *((_WORD *)v13 + 4);
  uint64_t v46 = a1[1];
  if ((unint64_t)(v46 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v46 + 1, 2);
    uint64_t v46 = a1[1];
  }
  *(_WORD *)(*a1 + 2 * v46) = v45;
  ++a1[1];
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::RangeType>,mlir::ArrayAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (void *)a1[3];
  uint64_t v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    uint64_t v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  uint64_t v14 = (void *)a1[3];
  uint64_t v15 = (uint64_t *)a1[4];
  unint64_t v21 = a3;
  uint64_t v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v21, &v22))
  {
    __int16 v16 = *((_WORD *)v22 + 4);
  }
  else
  {
    BOOL v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v21, &v21, v22);
    __int16 v16 = 0;
    *BOOL v17 = v21;
    *((_WORD *)v17 + 4) = 0;
  }
  uint64_t v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    uint64_t v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  if (a6)
  {
    unsigned int v19 = (mlir::Block **)(a5 + 24);
    do
    {
      int v20 = *v19;
      v19 += 4;
      --a6;
    }
    while (a6);
  }
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, unint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = v6[1];
  if ((unint64_t)(v7 + 1) > v6[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v6 + 3, v7 + 1, 2);
    uint64_t v7 = v6[1];
  }
  *(_WORD *)(*v6 + 2 * v7) = a2;
  ++v6[1];
  __int16 v8 = *(void **)(a1 + 24);
  uint64_t v9 = *(uint64_t **)(a1 + 32);
  unint64_t v13 = a3;
  uint64_t v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14))
  {
    __int16 v10 = *((_WORD *)v14 + 4);
  }
  else
  {
    unsigned int v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
    __int16 v10 = 0;
    *unsigned int v11 = v13;
    *((_WORD *)v11 + 4) = 0;
  }
  uint64_t v12 = v8[1];
  if ((unint64_t)(v12 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v8, v8 + 3, v12 + 1, 2);
    uint64_t v12 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v12) = v10;
  ++v8[1];
}

void anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::detail::TypedValue<mlir::pdl::ValueType>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  unint64_t v15 = a2;
  __int16 v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v6, &v15, &v16))
  {
    __int16 v7 = *((_WORD *)v16 + 4);
  }
  else
  {
    __int16 v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, &v15, v16);
    __int16 v7 = 0;
    *__int16 v8 = v15;
    *((_WORD *)v8 + 4) = 0;
  }
  uint64_t v9 = v5[1];
  if ((unint64_t)(v9 + 1) > v5[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v5, v5 + 3, v9 + 1, 2);
    uint64_t v9 = v5[1];
  }
  *(_WORD *)(*v5 + 2 * v9) = v7;
  ++v5[1];
  unsigned int v11 = *(void **)(a1 + 24);
  __int16 v10 = *(uint64_t **)(a1 + 32);
  unint64_t v15 = a3;
  __int16 v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v10, &v15, &v16))
  {
    __int16 v12 = *((_WORD *)v16 + 4);
  }
  else
  {
    unint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v10, (uint64_t)&v15, &v15, v16);
    __int16 v12 = 0;
    void *v13 = v15;
    *((_WORD *)v13 + 4) = 0;
  }
  uint64_t v14 = v11[1];
  if ((unint64_t)(v14 + 1) > v11[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v11, v11 + 3, v14 + 1, 2);
    uint64_t v14 = v11[1];
  }
  *(_WORD *)(*v11 + 2 * v14) = v12;
  ++v11[1];
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,unsigned int,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, int a3, unint64_t a4)
{
  __int16 v8 = *(void **)(a1 + 24);
  uint64_t v9 = v8[1];
  if ((unint64_t)(v9 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v8 + 3, v9 + 1, 2);
    uint64_t v9 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v9) = a2;
  ++v8[1];
  __int16 v10 = *(void **)(a1 + 24);
  uint64_t v11 = v10[1];
  if (v10[2] < (unint64_t)(v11 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v10 + 3, v11 + 2, 2);
    uint64_t v11 = v10[1];
  }
  *(_DWORD *)(*v10 + 2 * v11) = a3;
  v10[1] += 2;
  __int16 v12 = *(void **)(a1 + 24);
  unint64_t v13 = *(uint64_t **)(a1 + 32);
  unint64_t v17 = a4;
  uint64_t v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v13, &v17, &v18))
  {
    __int16 v14 = *((_WORD *)v18 + 4);
  }
  else
  {
    unint64_t v15 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v13, (uint64_t)&v17, &v17, v18);
    __int16 v14 = 0;
    *unint64_t v15 = v17;
    *((_WORD *)v15 + 4) = 0;
  }
  uint64_t v16 = v12[1];
  if ((unint64_t)(v16 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v12, v12 + 3, v16 + 1, 2);
    uint64_t v16 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v16) = v14;
  ++v12[1];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(uint64_t a1, long long *a2)
{
  unint64_t v14 = 0;
  uint64_t v4 = a1 + 16;
  unint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 104, &v14);
  uint64_t v6 = &v5[104 * *(unsigned int *)(a1 + 8)];
  long long v7 = *a2;
  *((void *)v6 + 2) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v6 = v7;
  *((void *)v6 + 3) = v6 + 40;
  *((void *)v6 + 4) = 0x200000000;
  if (*((_DWORD *)a2 + 8)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v6 + 24), (uint64_t)a2 + 24);
  }
  long long v8 = *(long long *)((char *)a2 + 56);
  uint64_t v9 = v6 + 88;
  *((void *)v6 + 9) = v6 + 88;
  uint64_t v10 = (uint64_t)(v6 + 72);
  *(_OWORD *)(v10 - 16) = v8;
  *(void *)(v10 + 8) = 0;
  if (*((_DWORD *)a2 + 20)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=(v10, (uint64_t)a2 + 72);
  }
  *uint64_t v9 = *(long long *)((char *)a2 + 88);
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v5);
  int v11 = v14;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v11;
  return (uint64_t)&v5[104 * v12 - 104];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 104 * v2;
    do
    {
      uint64_t v8 = v6 + v5;
      uint64_t v9 = a2 + v5;
      long long v10 = *(_OWORD *)(v6 + v5);
      *(void *)(v9 + 16) = *(void *)(v6 + v5 + 16);
      *(_OWORD *)uint64_t v9 = v10;
      *(void *)(a2 + v5 + 24) = a2 + v5 + 40;
      *(void *)(v9 + 32) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 32)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 24, v8 + 24);
      }
      long long v11 = *(_OWORD *)(v8 + 56);
      unsigned int v12 = (_OWORD *)(v9 + 88);
      *(void *)(v9 + 72) = v9 + 88;
      uint64_t v13 = v9 + 72;
      *(_OWORD *)(v13 - 16) = v11;
      *(void *)(v13 + 8) = 0;
      if (*(_DWORD *)(v8 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v13, v6 + v5 + 72);
      }
      *unsigned int v12 = *(_OWORD *)(v8 + 88);
      v5 += 104;
    }
    while (v8 + 104 != v7);
    unsigned int v14 = *((_DWORD *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 104 * v14;
      do
      {
        uint64_t v17 = v15 + v16;
        uint64_t v18 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v18) {
          free(v18);
        }
        unsigned int v19 = *(void **)(v17 - 80);
        if ((void *)(v17 - 64) != v19) {
          free(v19);
        }
        v16 -= 104;
      }
      while (v16);
    }
  }
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::DenseIntElementsAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (void *)a1[3];
  uint64_t v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    uint64_t v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  unsigned int v14 = (void *)a1[3];
  uint64_t v15 = (uint64_t *)a1[4];
  unint64_t v71 = a3;
  uint64_t v72 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v71, &v72))
  {
    __int16 v16 = *((_WORD *)v72 + 4);
  }
  else
  {
    uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v71, &v71, v72);
    __int16 v16 = 0;
    *uint64_t v17 = v71;
    *((_WORD *)v17 + 4) = 0;
  }
  uint64_t v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    uint64_t v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  unsigned int v19 = (void *)a1[3];
  uint64_t v20 = a1[4];
  uint64_t v21 = *(void *)(v20 + 120);
  __int16 v22 = **(_WORD **)(v20 + 216);
  unsigned int v23 = *(_DWORD *)(v20 + 136);
  if (v23)
  {
    unsigned int v24 = (v23 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    uint64_t v25 = (uint64_t *)(v21 + 16 * v24);
    uint64_t v26 = *v25;
    if (*v25 == a4) {
      goto LABEL_48;
    }
    uint64_t v27 = 0;
    int v28 = 1;
    while (v26 != -4096)
    {
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v26 == -8192;
      }
      if (v29) {
        uint64_t v27 = v25;
      }
      unsigned int v30 = v24 + v28++;
      unsigned int v24 = v30 & (v23 - 1);
      uint64_t v25 = (uint64_t *)(v21 + 16 * v24);
      uint64_t v26 = *v25;
      if (*v25 == a4) {
        goto LABEL_48;
      }
    }
    uint64_t v70 = a5;
    if (v27) {
      uint64_t v25 = v27;
    }
  }
  else
  {
    uint64_t v70 = a5;
    uint64_t v25 = 0;
  }
  unsigned int v31 = *(void *)(*(void *)(v20 + 184) + 8) - **(void **)(v20 + 184);
  int v32 = *(_DWORD *)(v20 + 128);
  if (4 * v32 + 4 >= 3 * v23)
  {
    v23 *= 2;
  }
  else if (v23 + ~v32 - *(_DWORD *)(v20 + 132) > v23 >> 3)
  {
LABEL_22:
    uint64_t v33 = *v25;
    goto LABEL_23;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v20 + 120, v23);
  uint64_t v61 = *(void *)(v20 + 120);
  int v62 = *(_DWORD *)(v20 + 136) - 1;
  unsigned int v63 = v62 & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v25 = (uint64_t *)(v61 + 16 * v63);
  uint64_t v64 = *v25;
  if (*v25 != a4)
  {
    int v65 = 0;
    int v66 = 1;
    while (v64 != -4096)
    {
      if (v65) {
        BOOL v67 = 0;
      }
      else {
        BOOL v67 = v64 == -8192;
      }
      if (v67) {
        int v65 = v25;
      }
      unsigned int v68 = v63 + v66++;
      unsigned int v63 = v68 & v62;
      uint64_t v25 = (uint64_t *)(v61 + 16 * v63);
      uint64_t v64 = *v25;
      uint64_t v33 = a4;
      if (*v25 == a4) {
        goto LABEL_23;
      }
    }
    if (v65) {
      uint64_t v25 = v65;
    }
    goto LABEL_22;
  }
  uint64_t v33 = a4;
LABEL_23:
  ++*(_DWORD *)(v20 + 128);
  if (v33 != -4096) {
    --*(_DWORD *)(v20 + 132);
  }
  *uint64_t v25 = a4;
  *((_WORD *)v25 + 4) = v22 + (v31 >> 3);
  uint64_t v34 = *(char ***)(v20 + 184);
  unint64_t v36 = v34[1];
  unint64_t v35 = (unint64_t)v34[2];
  if ((unint64_t)v36 >= v35)
  {
    uint64_t v38 = *v34;
    uint64_t v39 = v36 - *v34;
    uint64_t v40 = v39 >> 3;
    unint64_t v41 = (v39 >> 3) + 1;
    if (v41 >> 61) {
      abort();
    }
    uint64_t v42 = v35 - (void)v38;
    if (v42 >> 2 > v41) {
      unint64_t v41 = v42 >> 2;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      uint64_t v69 = (char *)(v36 - *v34);
      if (v43 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v44 = operator new(8 * v43);
      uint64_t v39 = (uint64_t)v69;
      __int16 v45 = &v44[8 * v40];
      uint64_t v46 = &v44[8 * v43];
      *(void *)__int16 v45 = a4;
      uint64_t v37 = (uint64_t)(v45 + 8);
      uint64_t v47 = (char *)(v36 - v38);
      if (v36 == v38) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v44 = 0;
      __int16 v45 = (char *)(8 * v40);
      uint64_t v46 = 0;
      *(void *)(8 * v40) = a4;
      uint64_t v37 = 8 * v40 + 8;
      uint64_t v47 = (char *)(v36 - v38);
      if (v36 == v38)
      {
LABEL_45:
        *uint64_t v34 = v45;
        v34[1] = (char *)v37;
        v34[2] = v46;
        a5 = v70;
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_47;
      }
    }
    unint64_t v48 = (unint64_t)(v47 - 8);
    if (v48 < 0x58) {
      goto LABEL_77;
    }
    if ((unint64_t)(v36 - v44 - v39) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v49 = (v48 >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v51 = &v36[-v50];
    v45 -= v50;
    int v52 = &v44[8 * v40 - 16];
    BOOL v53 = v36 - 16;
    uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *int v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    unint64_t v36 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        uint64_t v56 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v45 - 1) = v56;
        v45 -= 8;
      }
      while (v36 != v38);
    }
    unint64_t v36 = *v34;
    goto LABEL_45;
  }
  *(void *)unint64_t v36 = a4;
  uint64_t v37 = (uint64_t)(v36 + 8);
  a5 = v70;
LABEL_47:
  v34[1] = (char *)v37;
LABEL_48:
  __int16 v57 = *((_WORD *)v25 + 4);
  uint64_t v58 = v19[1];
  if ((unint64_t)(v58 + 1) > v19[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v19, v19 + 3, v58 + 1, 2);
    *(_WORD *)(*v19 + 2 * v19[1]++) = v57;
    if (!a6) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v19 + 2 * v58) = v57;
    ++v19[1];
    if (!a6) {
      return;
    }
  }
  uint64_t v59 = (mlir::Block **)(a5 + 24);
  do
  {
    unsigned int v60 = *v59;
    v59 += 4;
    --a6;
  }
  while (a6);
}

void llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize(uint64_t a1, uint64_t a2)
{
  v15[40] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)a2 + 8);
  if (v3) {
    uint64_t v4 = (mlir::Block *)(v3 - 8);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator((uint64_t)&v12, v4);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9[0] = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v5 = (char *)v8 + 8;
  uint64_t v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((const void **)&v12, (uint64_t)&v5, a1);
  if (v9[1] != (char *)v10 + 8) {
    free(v9[1]);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v14 != v15) {
    free(v14);
  }
  if (v13 != v12) {
    free(v13);
  }
}

uint64_t std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(const void **a1, uint64_t a2, uint64_t a3)
{
  v28[41] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v20, &v22, (const llvm::SmallPtrSetImplBase *)a1);
  unsigned int v23 = v25;
  uint64_t v24 = 0x800000000;
  if (&v20 != (void **)a1)
  {
    unsigned int v6 = *((_DWORD *)a1 + 26);
    if (v6)
    {
      if (v6 < 9)
      {
        uint64_t v8 = v25;
        unsigned int v7 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, *((unsigned int *)a1 + 26), 40);
        unsigned int v7 = *((_DWORD *)a1 + 26);
        if (!v7)
        {
LABEL_8:
          LODWORD(v24) = v6;
          goto LABEL_9;
        }
        uint64_t v8 = v23;
      }
      memcpy(v8, a1[12], 40 * v7);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v14, &v16, (const llvm::SmallPtrSetImplBase *)a2);
  uint64_t v17 = v19;
  uint64_t v18 = 0x800000000;
  if (&v14 != (void **)a2)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 104);
    if (v9)
    {
      if (v9 < 9)
      {
        uint64_t v11 = v19;
        unsigned int v10 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, *(unsigned int *)(a2 + 104), 40);
        unsigned int v10 = *(_DWORD *)(a2 + 104);
        if (!v10)
        {
LABEL_16:
          LODWORD(v18) = v9;
          goto LABEL_17;
        }
        uint64_t v11 = v17;
      }
      memcpy(v11, *(const void **)(a2 + 96), 40 * v10);
      goto LABEL_16;
    }
  }
LABEL_17:
  std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v20, (uint64_t)&v14, a3);
  uint64_t v12 = v28[40];
  if (v27 != v28) {
    free(v27);
  }
  if (v26 != (void *)v25[40]) {
    free(v26);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v15 != v14) {
    free(v15);
  }
  if (v23 != v25) {
    free(v23);
  }
  if (v21 != v20) {
    free(v21);
  }
  return v12;
}

void std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v14, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v9, (uint64_t *)(a2 + 96));
  }
  std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v11, (uint64_t)&v6, a3);
  if (v9[0] != v10) {
    free(v9[0]);
  }
  if (v7 != v6) {
    free(v7);
  }
  if (v14[0] != v15) {
    free(v14[0]);
  }
  if (v12 != v11) {
    free(v12);
  }
}

void std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v13, &v15, 8, (uint64_t *)a1);
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v16, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v11, (uint64_t *)(a2 + 96));
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>((uint64_t)&v13, (uint64_t)&v8, a3, v6, v7);
  if (v11[0] != v12) {
    free(v11[0]);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (v16[0] != v17) {
    free(v16[0]);
  }
  if (v14 != v13) {
    free(v14);
  }
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (const llvm::SmallPtrSetImplBase *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v5;
  uint64_t v12 = v11;
  v69[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v54, &v56, v5);
  __int16 v57 = v59;
  uint64_t v58 = 0x800000000;
  if (&v54 != (void **)v10)
  {
    unsigned int v13 = *((_DWORD *)v10 + 26);
    if (v13)
    {
      if (v13 < 9)
      {
        uint64_t v15 = v59;
        unsigned int v14 = *((_DWORD *)v10 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, *((unsigned int *)v10 + 26), 40);
        unsigned int v14 = *((_DWORD *)v10 + 26);
        if (!v14)
        {
LABEL_8:
          LODWORD(v58) = v13;
          goto LABEL_9;
        }
        uint64_t v15 = v57;
      }
      memcpy(v15, *((const void **)v10 + 12), 40 * v14);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v49, &v51, 8, (uint64_t *)v9);
  v52[0] = v53;
  v52[1] = (void *)0x800000000;
  if (*(_DWORD *)(v9 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v52, (uint64_t *)(v9 + 96));
  }
  std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v54, (uint64_t)&v49, &v60);
  if (v52[0] != v53) {
    free(v52[0]);
  }
  if (v50 != v49) {
    free(v50);
  }
  if (v57 != v59) {
    free(v57);
  }
  if (v55 != v54) {
    free(v55);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v39, &v41, 8, (uint64_t *)&v60);
  v42[0] = v43;
  v42[1] = (void *)0x800000000;
  if (v63) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v42, (uint64_t *)&v62);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, &v36, 8, (uint64_t *)&v65);
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v68) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v37, (uint64_t *)&v67);
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((llvm::SmallPtrSetImplBase *)&v39, (uint64_t)&v34, v7, (uint64_t)&v44);
  if (v37[0] != v38) {
    free(v37[0]);
  }
  if (v35 != v34) {
    free(v35);
  }
  if (v42[0] != v43) {
    free(v42[0]);
  }
  if (v40 != v39) {
    free(v40);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v24, &v26, 8, (uint64_t *)v10);
  v27[0] = v28;
  v27[1] = (void *)0x800000000;
  if (*((_DWORD *)v10 + 26)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v27, (uint64_t *)v10 + 12);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v19, &v21, 8, (uint64_t *)&v44);
  v22[0] = v23;
  v22[1] = (void *)0x800000000;
  if (v47) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v22, (uint64_t *)&v46);
  }
  std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v29);
  uint64_t v16 = v48[40];
  uint64_t v17 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(v12, (void *)(v12 + 32), 8, (uint64_t *)&v29);
  *(void *)(v17 + 96) = v12 + 112;
  uint64_t v18 = v17 + 96;
  *(void *)(v18 + 8) = 0x800000000;
  if (v32) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v18, (uint64_t *)&v31);
  }
  *(void *)(v12 + 432) = v16;
  if (v31 != &v33) {
    free(v31);
  }
  if (v30 != v29) {
    free(v30);
  }
  if (v22[0] != v23) {
    free(v22[0]);
  }
  if (v20 != v19) {
    free(v20);
  }
  if (v27[0] != v28) {
    free(v27[0]);
  }
  if (v25 != v24) {
    free(v25);
  }
  if (v46 != v48) {
    free(v46);
  }
  if (v45 != v44) {
    free(v45);
  }
  if (v67 != v69) {
    free(v67);
  }
  if (v66 != v65) {
    free(v66);
  }
  if (v62 != &v64) {
    free(v62);
  }
  if (v61 != v60) {
    free(v61);
  }
}

void std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v27[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v18, &v20, 8, (uint64_t *)a1);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v21, (uint64_t *)(a1 + 96));
  }
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v18, (uint64_t)&v23);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v11, (uint64_t *)(a2 + 96));
  }
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v8, (uint64_t)&v13);
  uint64_t v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v23);
  *(void *)(v6 + 96) = a3 + 14;
  uint64_t v7 = v6 + 96;
  *(void *)(v7 + 8) = 0x800000000;
  if (v26) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v25);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v13);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if (v16) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v15);
  }
  if (v15 != &v17) {
    free(v15);
  }
  if (v14 != v13) {
    free(v14);
  }
  if (v11[0] != v12) {
    free(v11[0]);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v24 != v23) {
    free(v24);
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v19 != v18) {
    free(v19);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = (uint64_t *)((char *)this + 96);
  uint64_t v9 = (void *)(a3 + 16);
  while (1)
  {
    unsigned int v10 = *((_DWORD *)this + 26);
    uint64_t v11 = *((void *)this + 12);
    if (v10 != *(_DWORD *)(a2 + 104)) {
      goto LABEL_12;
    }
    if (!v10) {
      break;
    }
    uint64_t v12 = *(void **)(a2 + 96);
    unsigned int v13 = (void *)*((void *)this + 12);
    while (*v13 == *v12 && v13[1] == v12[1] && v13[2] == v12[2] && v13[3] == v12[3] && v13[4] == v12[4])
    {
      v13 += 5;
      v12 += 5;
      if (v13 == (void *)(v11 + 40 * v10)) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v14 = *(void *)(v11 + 40 * v10 - 40);
    unint64_t v15 = *(unsigned int *)(a3 + 8);
    if (v15 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v9, v15 + 1, 8);
      unint64_t v15 = *(unsigned int *)(a3 + 8);
    }
    *(void *)(*(void *)a3 + 8 * v15) = v14;
    ++*(_DWORD *)(a3 + 8);
    int v16 = *((_DWORD *)this + 26) - 1;
    *((_DWORD *)this + 26) = v16;
    if (v16) {
      llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild(this);
    }
  }
LABEL_16:
  uint64_t v17 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a4, (void *)(a4 + 32), 8, (uint64_t *)this);
  *(void *)(v17 + 96) = a4 + 112;
  uint64_t result = v17 + 96;
  *(void *)(result + 8) = 0x800000000;
  if (*((_DWORD *)this + 26)) {
    uint64_t result = llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(result, v8);
  }
  *(void *)(a4 + 432) = a3;
  return result;
}

void std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v14, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v9, (uint64_t *)(a2 + 96));
  }
  std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>((uint64_t)&v11, (uint64_t)&v6, a3);
  if (v9[0] != v10) {
    free(v9[0]);
  }
  if (v7 != v6) {
    free(v7);
  }
  if (v14[0] != v15) {
    free(v14[0]);
  }
  if (v12 != v11) {
    free(v12);
  }
}

void std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  v13[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, (const llvm::SmallPtrSetImplBase *)a1);
  uint64_t v11 = v13;
  uint64_t v12 = 0x800000000;
  if (&v8 != (void **)a1)
  {
    unsigned int v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        uint64_t v6 = v13;
        unsigned int v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, *((unsigned int *)a1 + 26), 40);
        unsigned int v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v12) = v4;
          goto LABEL_9;
        }
        uint64_t v6 = v11;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a2, (void *)(a2 + 32), 8, (uint64_t *)&v8);
  *(void *)(a2 + 96) = a2 + 112;
  uint64_t v7 = a2 + 96;
  *(void *)(v7 + 8) = 0x800000000;
  if (v12) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v11);
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v9 != v8) {
    free(v9);
  }
}

void std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[40] = *MEMORY[0x263EF8340];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v13, &v15, 8, (uint64_t *)a1);
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v16, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v7, &v9, 8, (uint64_t *)a2);
  unsigned int v10 = v12;
  uint64_t v11 = 0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v10, (uint64_t *)(a2 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v7);
  *(void *)(a3 + 96) = a3 + 112;
  uint64_t v6 = a3 + 96;
  *(void *)(v6 + 8) = 0x800000000;
  if (v11) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v6, (uint64_t *)&v10);
  }
  if (v10 != v12) {
    free(v10);
  }
  if (v8 != v7) {
    free(v8);
  }
  if (v16[0] != v17) {
    free(v16[0]);
  }
  if (v14 != v13) {
    free(v14);
  }
}

uint64_t llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator(uint64_t a1, mlir::Block *a2)
{
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  unsigned int v4 = (void *)(a1 + 112);
  *(void *)(a1 + 96) = a1 + 112;
  unsigned int v5 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 104) = 0x800000000;
  *(void *)(a1 + 16) = 0x100000008;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  uint64_t v6 = v20;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  uint64_t v8 = v20;
  uint64_t v7 = v21;
  uint64_t v9 = *(unsigned int *)(a1 + 104);
  if (v9 >= *(_DWORD *)(a1 + 108))
  {
    uint64_t v20 = a2;
    uint64_t v21 = v6;
    uint64_t v22 = 0;
    unsigned int v23 = v8;
    uint64_t v24 = v7;
    unint64_t v12 = v9 + 1;
    BOOL v13 = *v5 + 40 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v5 <= (unint64_t)&v20 && v13)
    {
      unsigned int v19 = (char *)&v20 - *v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      uint64_t v14 = *v5;
      uint64_t v15 = &v19[*v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      uint64_t v14 = *v5;
      uint64_t v15 = (char *)&v20;
    }
    uint64_t v16 = v14 + 40 * *(unsigned int *)(a1 + 104);
    long long v17 = *(_OWORD *)v15;
    long long v18 = *((_OWORD *)v15 + 1);
    *(void *)(v16 + 32) = *((void *)v15 + 4);
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
  }
  else
  {
    unsigned int v10 = (mlir::Block **)(*(void *)(a1 + 96) + 40 * v9);
    void *v10 = a2;
    v10[1] = v6;
    v10[2] = 0;
    v10[3] = v8;
    v10[4] = v7;
  }
  ++*(_DWORD *)(a1 + 104);
  llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)a1);
  return a1;
}

void anonymous namespace'::ByteCodeExecutor::readList<mlir::PDLValue,mlir::PDLValue>(unsigned __int16 **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(*a1)++;
  if (v2)
  {
    unsigned int v5 = 0;
    uint64_t v6 = a1 + 9;
    uint64_t v7 = a1 + 21;
    uint64_t v8 = (void *)(a2 + 16);
    do
    {
      uint64_t v9 = (uint64_t)*a1;
      switch(**a1)
      {
        case 1u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 1;
          break;
        case 2u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v15 = *(unsigned __int16 *)(v9 + 2);
          uint64_t v16 = a1[10];
          if ((unint64_t)v16 <= v15) {
            BOOL v13 = v7;
          }
          else {
            BOOL v13 = v6;
          }
          if ((unint64_t)v16 > v15) {
            uint64_t v16 = 0;
          }
          unint64_t v14 = v15 - (void)v16;
          uint64_t v10 = 2;
          break;
        case 3u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 3;
          break;
        case 4u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 4;
          break;
        case 5u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 5;
          break;
        default:
          uint64_t v10 = 0;
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v11 = *(unsigned __int16 *)(v9 + 2);
          unint64_t v12 = a1[10];
          if ((unint64_t)v12 <= v11) {
            BOOL v13 = v7;
          }
          else {
            BOOL v13 = v6;
          }
          if ((unint64_t)v12 > v11) {
            unint64_t v12 = 0;
          }
          unint64_t v14 = v11 - (void)v12;
          break;
      }
      uint64_t v17 = *(void *)&(*v13)[4 * v14];
      if (v5 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v5 + 1, 16);
        unsigned int v5 = *(_DWORD *)(a2 + 8);
      }
      long long v18 = (void *)(*(void *)a2 + 16 * v5);
      *long long v18 = v17;
      v18[1] = v10;
      unsigned int v5 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v5;
      --v2;
    }
    while (v2);
  }
}

_OWORD *std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[16 * v2];
  uint64_t v10 = &v8[16 * v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v11 = v9 + 16;
  unint64_t v12 = (char *)*a1;
  BOOL v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      *((_OWORD *)v9 - 1) = *((_OWORD *)v13 - 1);
      v9 -= 16;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v13 -= 16;
    }
    while (v13 != v12);
    BOOL v13 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v14 != v13)
    {
      uint64_t v16 = *((void *)v14 - 2);
      v14 -= 16;
      uint64_t v15 = v16;
      if (v16) {
        MEMORY[0x21667D390](v15, 0x20C8093837F09);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void mlir::PDLResultList::~PDLResultList(mlir::PDLResultList *this)
{
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v3 = *((unsigned int *)this + 66);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unsigned int v5 = v2 - 16;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      if (v6) {
        MEMORY[0x21667D390](v6, 0x20C8093837F09);
      }
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 32);
  }
  if (v2 != (char *)this + 272) {
    free(v2);
  }
  unint64_t v7 = (char *)*((void *)this + 24);
  uint64_t v8 = *((unsigned int *)this + 50);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    uint64_t v10 = v7 - 16;
    do
    {
      uint64_t v11 = *(void *)&v10[v9];
      if (v11) {
        MEMORY[0x21667D390](v11, 0x20C8093837F09);
      }
      v9 -= 16;
    }
    while (v9);
    unint64_t v7 = (char *)*((void *)this + 24);
  }
  if (v7 != (char *)this + 208) {
    free(v7);
  }
  unint64_t v12 = (char *)*((void *)this + 16);
  if (v12 != (char *)this + 144) {
    free(v12);
  }
  BOOL v13 = (char *)*((void *)this + 8);
  if (v13 != (char *)this + 80) {
    free(v13);
  }
  if (*(mlir::PDLResultList **)this != (mlir::PDLResultList *)((char *)this + 16)) {
    free(*(void **)this);
  }
}

void anonymous namespace'::ByteCodeExecutor::readList(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v2 = *(*a1)++;
  if (v2)
  {
    int v5 = 0;
    uint64_t v6 = (void *)(a2 + 16);
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t)*a1;
        int v8 = **a1;
        *a1 += 2;
        uint64_t v9 = *(uint64_t **)&a1[9][4 * *(unsigned __int16 *)(v7 + 2)];
        if (v8 != 4) {
          break;
        }
        unint64_t v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v10 + 1, 8);
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
        *(void *)(*(void *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
        if (++v5 == v2) {
          return;
        }
      }
      uint64_t v12 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v13 = *(unsigned int *)(a2 + 8);
      if (v11 + v13 > (unint64_t)*(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v11 + v13, 8);
        uint64_t v13 = *(unsigned int *)(a2 + 8);
      }
      uint64_t v14 = *(void *)a2;
      uint64_t v18 = v12;
      uint64_t v19 = 0;
      if (v11)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (uint64_t *)(v14 + 8 * v13);
        do
        {
          *v16++ = mlir::ValueRange::dereference_iterator(&v18, v15);
          uint64_t v15 = ++v19;
        }
        while (v18 != v12 || v15 != v11);
        LODWORD(v13) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v13 + v11;
      ++v5;
    }
    while (v5 != v2);
  }
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>(void *a1)
{
  uint64_t v1 = &unk_267772000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_267772000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v14 = 96;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_267772000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[47]);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>(void *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedResultSegments<Empty>]";
      unint64_t v14 = 95;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedResultSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedResultSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[122]);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::growAndEmplaceBack<mlir::Location &,mlir::detail::PDLByteCodePattern const&,mlir::PatternBenefit &>(uint64_t a1, void *a2, uint64_t a3, __int16 *a4)
{
  unint64_t v15 = 0;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 120, &v15);
  unint64_t v10 = &v9[120 * *(unsigned int *)(a1 + 8)];
  __int16 v11 = *a4;
  *(void *)unint64_t v10 = *a2;
  *((void *)v10 + 1) = v10 + 24;
  *((void *)v10 + 13) = a3;
  *((void *)v10 + 11) = v10 + 104;
  *((void *)v10 + 2) = 0x600000000;
  *((void *)v10 + 9) = v10 + 88;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 12) = 0;
  *((_WORD *)v10 + 56) = v11;
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v9);
  int v12 = v15;
  if (*(void *)a1 != v8) {
    free(*(void **)a1);
  }
  *(void *)a1 = v9;
  unsigned int v13 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v12;
  return (uint64_t)&v9[120 * v13 - 120];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 120 * v2;
    do
    {
      uint64_t v9 = v6 + v5;
      unint64_t v10 = (void *)(a2 + v5);
      void *v10 = *(void *)(v6 + v5);
      *(void *)(a2 + v5 + 8) = a2 + v5 + 24;
      v10[2] = 0x600000000;
      if (*(_DWORD *)(v6 + v5 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 8, v9 + 8);
      }
      __int16 v11 = v10 + 11;
      v10[9] = v10 + 11;
      v10[10] = 0;
      uint64_t v12 = (uint64_t)(v10 + 9);
      if (*(_DWORD *)(v9 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v12, v6 + v5 + 72);
      }
      unsigned int v13 = (void *)(a2 + v5 + 104);
      *__int16 v11 = v13;
      *(void *)(a2 + v5 + 96) = 0;
      if (*(_DWORD *)(v9 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v11, v6 + v5 + 88);
      }
      uint64_t v8 = *(void *)(v9 + 104);
      *(_WORD *)(a2 + v5 + 112) = *(_WORD *)(v9 + 112);
      void *v13 = v8;
      v5 += 120;
    }
    while (v9 + 120 != v7);
    uint64_t v14 = *((unsigned int *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 120 * v14;
      do
      {
        uint64_t v17 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v17) {
          free(v17);
        }
        uint64_t v18 = *(void **)(v15 + v16 - 48);
        if ((void *)(v15 + v16 - 32) != v18) {
          free(v18);
        }
        uint64_t v19 = *(void **)(v15 + v16 - 112);
        if ((void *)(v15 + v16 - 96) != v19) {
          free(v19);
        }
        v16 -= 120;
      }
      while (v16);
    }
  }
}

double llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote(char **a1, char **a2)
{
  int v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = &v4[8 * v5];
    do
    {
      uint64_t v8 = (char **)*((void *)v6 - 1);
      v6 -= 8;
      uint64_t v7 = v8;
      *(void *)uint64_t v6 = 0;
      if (v8)
      {
        uint64_t v9 = *v7;
        uint64_t v10 = *((unsigned int *)v7 + 2);
        if (v10)
        {
          uint64_t v11 = 8 * v10;
          uint64_t v12 = v9 - 8;
          do
          {
            uint64_t v13 = *(void *)&v12[v11];
            *(void *)&v12[v11] = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
            v11 -= 8;
          }
          while (v11);
          uint64_t v9 = *v7;
        }
        if (v9 != (char *)(v7 + 2)) {
          free(v9);
        }
        MEMORY[0x21667D3C0](v7, 0x1080C407559D7D1);
      }
    }
    while (v6 != v4);
    int v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t std::vector<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>>::__push_back_slow_path<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>>(uint64_t *a1, void *a2)
{
  unsigned int v2 = (char *)a1[1];
  uint64_t v3 = (uint64_t)&v2[-*a1] >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 32 * v3;
    uint64_t v11 = (void *)a2[3];
    if (v11) {
      goto LABEL_10;
    }
LABEL_14:
    *(void *)(v10 + 24) = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (v8 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = (char *)operator new(32 * v8);
  uint64_t v10 = (uint64_t)&v9[32 * v3];
  uint64_t v11 = (void *)a2[3];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_10:
  if (v11 == a2)
  {
    *(void *)(v10 + 24) = v10;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v10);
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    unsigned int v2 = (char *)a1[1];
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  else
  {
    *(void *)(v10 + 24) = v11;
    a2[3] = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  do
  {
LABEL_20:
    uint64_t v15 = v10;
    v10 -= 32;
    uint64_t v16 = v2 - 32;
    uint64_t v17 = (char *)*((void *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(void *)(v15 - 8) = v10;
        (*(void (**)(void, uint64_t))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
      }
      else
      {
        *(void *)(v15 - 8) = v17;
        *((void *)v2 - 1) = 0;
      }
    }
    else
    {
      *(void *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  unsigned int v2 = (char *)*a1;
LABEL_25:
  uint64_t v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    uint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      uint64_t v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

uint64_t std::vector<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>>::__push_back_slow_path<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>>(uint64_t *a1, void *a2)
{
  unsigned int v2 = (char *)a1[1];
  uint64_t v3 = (uint64_t)&v2[-*a1] >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 32 * v3;
    uint64_t v11 = (void *)a2[3];
    if (v11) {
      goto LABEL_10;
    }
LABEL_14:
    *(void *)(v10 + 24) = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (v8 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = (char *)operator new(32 * v8);
  uint64_t v10 = (uint64_t)&v9[32 * v3];
  uint64_t v11 = (void *)a2[3];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_10:
  if (v11 == a2)
  {
    *(void *)(v10 + 24) = v10;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v10);
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    unsigned int v2 = (char *)a1[1];
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  else
  {
    *(void *)(v10 + 24) = v11;
    a2[3] = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  do
  {
LABEL_20:
    uint64_t v15 = v10;
    v10 -= 32;
    uint64_t v16 = v2 - 32;
    uint64_t v17 = (char *)*((void *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(void *)(v15 - 8) = v10;
        (*(void (**)(void, uint64_t))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
      }
      else
      {
        *(void *)(v15 - 8) = v17;
        *((void *)v2 - 1) = 0;
      }
    }
    else
    {
      *(void *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  unsigned int v2 = (char *)*a1;
LABEL_25:
  uint64_t v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    uint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      uint64_t v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void std::vector<void const*>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v8 = (void *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (void *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      float64x2_t v18 = vld1q_dup_f64(a3);
      uint64_t v19 = (float64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
          *v8++ = *(void *)a3;
        while (v8 != (void *)(v7 + 8 * a2));
      }
      unint64_t v8 = (void *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + a2;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v13 = (v9 >> 3) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v10];
    uint64_t v22 = (char *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    float64x2_t v26 = vld1q_dup_f64(a3);
    uint64_t v27 = (float64x2_t *)&v15[8 * v10 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        *(double *)uint64_t v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    BOOL v29 = (void *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 8;
      if (v30 < 0x58) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = (void *)(v7 - v32);
      v21 -= v32;
      uint64_t v33 = &v15[8 * v10 - 16];
      uint64_t v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)uint64_t v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          uint64_t v37 = *--v8;
          *(void *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      unint64_t v8 = (void *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    uint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    unint64_t v16 = &v13[v14];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
    }
    else
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        *((void *)v5 - 2) = 0;
        *((void *)v5 - 1) = 0;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
      unint64_t v17 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      while (v17 != v5)
      {
        uint64_t v19 = *((void *)v17 - 2);
        v17 -= 16;
        uint64_t v18 = v19;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x20C8093837F09);
        }
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<mlir::TypeRange>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      size_t v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)uint64_t v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60) {
      abort();
    }
    uint64_t v9 = v6 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    unint64_t v17 = &v15[16 * a2];
    uint64_t v18 = v15;
    do
    {
      *(_OWORD *)uint64_t v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    uint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v8 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || end < __x + 1 && &end[__n] > __x) {
        goto LABEL_45;
      }
      std::vector<unsigned int>::size_type v17 = v16 + 1;
      uint64_t v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
      float32x4_t v18 = vld1q_dup_f32((const float *)__x);
      uint64_t v19 = (float32x4_t *)(end + 4);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *__x;
        while (v8 != &end[__n]);
      }
      uint64_t v8 = &end[__n];
    }
    this->__end_ = v8;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v10 = (char *)end - (char *)this->__begin_;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + __n;
    if (v12 >> 62) {
      abort();
    }
    uint64_t v13 = (char *)value - (char *)begin;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unsigned int *)&v15[4 * v11];
    uint64_t v22 = &v21[__n];
    std::vector<unsigned int>::size_type v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v24 = v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < __x + 1)
    {
      uint64_t v24 = (unsigned int *)&v15[4 * v11];
      if (&v15[4 * __n + v10] > (unsigned char *)__x) {
        goto LABEL_46;
      }
    }
    std::vector<unsigned int>::size_type v25 = v23 + 1;
    uint64_t v24 = &v21[v25 & 0x7FFFFFFFFFFFFFF8];
    float32x4_t v26 = vld1q_dup_f32((const float *)__x);
    uint64_t v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
        *v24++ = *__x;
      while (v24 != v22);
    }
    if (end != begin)
    {
      unint64_t v29 = (char *)end - (char *)begin - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if ((unint64_t)((char *)end - &v15[v10]) < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v8 = &end[v31 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v21 = (unsigned int *)((char *)v21 - v31);
      uint64_t v32 = &v15[4 * v11 - 16];
      uint64_t v33 = (long long *)(end - 4);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        *uint64_t v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          unsigned int v36 = *--v8;
          *--unint64_t v21 = v36;
        }
        while (v8 != begin);
      }
    }
    this->__begin_ = v21;
    this->__end_ = v22;
    this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, void *a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = a1;
  if (a3 == 2)
  {
    if (*(unsigned __int16 *)(a1 + 112) < *((unsigned __int16 *)a2 - 4))
    {
      uint64_t v7 = (uint64_t)(a2 - 15);
      std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1, v7);
    }
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    unint64_t v11 = a3 >> 1;
    unint64_t v12 = (void *)(a1 + 120 * (a3 >> 1));
    unint64_t v13 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v12, v13, a4);
      uint64_t v42 = &a4[15 * v11];
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), v42);
      unint64_t v43 = &a4[15 * a3];
      uint64_t v44 = (uint64_t)v42;
      uint64_t v45 = (uint64_t)a4;
      while ((void *)v44 != v43)
      {
        if (*(unsigned __int16 *)(v45 + 112) >= *(unsigned __int16 *)(v44 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v45);
          v45 += 120;
          v6 += 120;
          if ((void *)v45 == v42) {
            goto LABEL_63;
          }
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v44);
          v44 += 120;
          v6 += 120;
          if ((void *)v45 == v42)
          {
LABEL_63:
            if ((void *)v44 != v43)
            {
              uint64_t v46 = 0;
              do
              {
                mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v46, v44 + v46);
                v46 += 120;
              }
              while ((void *)(v44 + v46) != v43);
            }
            goto LABEL_70;
          }
        }
      }
      if ((void *)v45 != v42)
      {
        uint64_t v47 = 0;
        do
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v47, v45 + v47);
          v47 += 120;
        }
        while ((void *)(v45 + v47) != v42);
      }
LABEL_70:
      if (a4)
      {
        unint64_t v48 = a3;
        uint64_t v49 = a4 + 13;
        do
        {
          uint64_t v50 = (void *)*(v49 - 2);
          if (v49 != v50) {
            free(v50);
          }
          uint64_t v51 = (void *)*(v49 - 4);
          if (v49 - 2 != v51) {
            free(v51);
          }
          int v52 = (void *)*(v49 - 12);
          if (v49 - 10 != v52) {
            free(v52);
          }
          v49 += 15;
          --v48;
        }
        while (v48);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v12, v13, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6, v6 + 120 * (a3 >> 1), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
    }
    return;
  }
  if ((void *)a1 == a2) {
    return;
  }
  unint64_t v14 = (void *)(a1 + 120);
  if ((void *)(a1 + 120) == a2) {
    return;
  }
  uint64_t v15 = 0;
  uint64_t v16 = a1;
  while (2)
  {
    std::vector<unsigned int>::size_type v17 = v14;
    if (*(unsigned __int16 *)(v16 + 112) >= *(unsigned __int16 *)(v16 + 232)) {
      goto LABEL_15;
    }
    uint64_t v53 = *v14;
    v54[0] = v55;
    v54[1] = (void *)0x600000000;
    if (*(_DWORD *)(v16 + 136)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v54, v16 + 128);
    }
    v56[0] = v57;
    v56[1] = 0;
    if (*(_DWORD *)(v16 + 200)) {
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v56, v16 + 192);
    }
    v57[0] = &v58;
    v57[1] = 0;
    if (*(_DWORD *)(v16 + 216)) {
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v57, v16 + 208);
    }
    uint64_t v58 = *(void *)(v16 + 224);
    unsigned __int16 v59 = *(_WORD *)(v16 + 232);
    uint64_t v18 = v15;
    while (1)
    {
      uint64_t v19 = v6 + v18;
      uint64_t v20 = *(const void **)(v6 + v18 + 8);
      *(void *)(v6 + v18 + 120) = *(void *)(v6 + v18);
      unint64_t v21 = (void **)(v6 + v18 + 128);
      uint64_t v22 = v6 + v18 + 24;
      if ((const void *)v22 == v20)
      {
        unsigned int v36 = (_DWORD *)(v19 + 16);
        unint64_t v37 = *(unsigned int *)(v19 + 16);
        uint64_t v38 = *(unsigned int *)(v19 + 136);
        if (v38 >= v37)
        {
          if (v37) {
            memmove(*v21, v20, 8 * v37);
          }
        }
        else
        {
          if (*(_DWORD *)(v6 + v18 + 140) < v37)
          {
            *(_DWORD *)(v19 + 136) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v21, (void *)(v6 + v18 + 144), v37, 8);
            uint64_t v38 = 0;
            uint64_t v39 = *v36;
            if (!*v36) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          if (v38)
          {
            memmove(*v21, v20, 8 * v38);
            uint64_t v39 = *v36;
            if (v38 == v39) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          uint64_t v38 = 0;
          uint64_t v39 = *v36;
          if (*v36) {
LABEL_42:
          }
            memcpy((void *)(*(void *)(v19 + 128) + 8 * v38), (const void *)(*(void *)(v19 + 8) + 8 * v38), 8 * v39 - 8 * v38);
        }
LABEL_43:
        *(_DWORD *)(v19 + 136) = v37;
        *unsigned int v36 = 0;
        uint64_t v25 = v6 + v18;
        int v26 = *(_DWORD *)(v6 + v18 + 80);
        if (!v26) {
          goto LABEL_44;
        }
        goto LABEL_28;
      }
      std::vector<unsigned int>::size_type v23 = *v21;
      if ((void *)(v19 + 144) != v23)
      {
        free(v23);
        uint64_t v20 = *(const void **)(v19 + 8);
      }
      uint64_t v24 = v6 + v18;
      *(void *)(v19 + 128) = v20;
      *(void *)(v24 + 136) = *(void *)(v6 + v18 + 16);
      *(void *)(v19 + 8) = v22;
      *(_DWORD *)(v24 + 20) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      uint64_t v25 = v6 + v18;
      int v26 = *(_DWORD *)(v6 + v18 + 80);
      if (!v26)
      {
LABEL_44:
        *(_DWORD *)(v25 + 200) = 0;
        uint64_t v30 = v6 + v18;
        int v31 = *(_DWORD *)(v6 + v18 + 96);
        if (!v31) {
          goto LABEL_45;
        }
        goto LABEL_31;
      }
LABEL_28:
      uint64_t v27 = *(void **)(v25 + 192);
      if ((void *)(v25 + 208) != v27)
      {
        free(v27);
        int v26 = *(_DWORD *)(v25 + 80);
      }
      uint64_t v28 = (_DWORD *)(v6 + v18);
      *(void *)(v25 + 192) = *(void *)(v25 + 72);
      int v29 = *(_DWORD *)(v6 + v18 + 84);
      v28[50] = v26;
      v28[51] = v29;
      *(void *)(v25 + 72) = v6 + v18 + 88;
      v28[21] = 0;
      *(_DWORD *)(v16 + 80) = 0;
      uint64_t v30 = v6 + v18;
      int v31 = *(_DWORD *)(v6 + v18 + 96);
      if (!v31)
      {
LABEL_45:
        uint64_t v33 = (_DWORD *)(v30 + 216);
        goto LABEL_46;
      }
LABEL_31:
      uint64_t v32 = *(void **)(v30 + 208);
      if ((void *)(v30 + 224) != v32)
      {
        free(v32);
        int v31 = *(_DWORD *)(v30 + 96);
      }
      uint64_t v33 = (_DWORD *)(v16 + 96);
      uint64_t v34 = (_DWORD *)(v6 + v18);
      *(void *)(v30 + 208) = *(void *)(v30 + 88);
      int v35 = *(_DWORD *)(v6 + v18 + 100);
      v34[54] = v31;
      v34[55] = v35;
      *(void *)(v30 + 88) = v6 + v18 + 104;
      v34[25] = 0;
LABEL_46:
      *uint64_t v33 = 0;
      uint64_t v40 = v6 + v18;
      *(void *)(v40 + 224) = *(void *)(v6 + v18 + 104);
      *(_WORD *)(v40 + 232) = *(_WORD *)(v6 + v18 + 112);
      if (!v18) {
        break;
      }
      v16 -= 120;
      v18 -= 120;
      if (*(unsigned __int16 *)(v40 - 8) >= v59)
      {
        uint64_t v41 = v6 + v18 + 120;
        goto LABEL_52;
      }
    }
    uint64_t v41 = v6;
LABEL_52:
    mlir::detail::PDLByteCode::MatchResult::operator=(v41, (uint64_t)&v53);
    if (v57[0] != &v58) {
      free(v57[0]);
    }
    if (v56[0] != v57) {
      free(v56[0]);
    }
    if (v54[0] != v55) {
      free(v54[0]);
    }
LABEL_15:
    unint64_t v14 = v17 + 15;
    v15 += 120;
    uint64_t v16 = (uint64_t)v17;
    if (v17 + 15 != a2) {
      continue;
    }
    break;
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t result, void *a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = a2;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      unsigned int v11 = *(unsigned __int16 *)(result + 112);
      uint64_t v12 = (uint64_t)(a4 + 1);
      unint64_t v13 = a4 + 3;
      if (v11 < *((unsigned __int16 *)a2 - 4))
      {
        *a4 = *(a2 - 15);
        a4[1] = v13;
        a4[2] = 0x600000000;
        if (*((_DWORD *)a2 - 26)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, (uint64_t)(a2 - 14));
        }
        v4[9] = v4 + 11;
        v4[10] = 0;
        if (*((_DWORD *)v6 - 10)) {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), (uint64_t)(v6 - 6));
        }
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*((_DWORD *)v6 - 6)) {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), (uint64_t)(v6 - 4));
        }
        uint64_t v14 = *(v6 - 2);
        *((_WORD *)v4 + 56) = *((_WORD *)v6 - 4);
        v4[13] = v14;
        uint64_t v15 = *(void *)v7;
        v4[16] = v4 + 18;
        v4[15] = v15;
        v4[17] = 0x600000000;
        if (*(_DWORD *)(v7 + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), v7 + 8);
        }
        uint64_t v8 = (uint64_t)(v4 + 26);
        v4[24] = v4 + 26;
        v4[25] = 0;
        double result = (uint64_t)(v4 + 24);
        if (*(_DWORD *)(v7 + 80)) {
          double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        uint64_t v9 = v4 + 28;
        v4[26] = v4 + 28;
        v4[27] = 0;
        if (!*(_DWORD *)(v7 + 96)) {
          goto LABEL_10;
        }
LABEL_9:
        double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v8, v7 + 88);
LABEL_10:
        uint64_t v10 = *(void *)(v7 + 104);
        *((_WORD *)v9 + 4) = *(_WORD *)(v7 + 112);
        *uint64_t v9 = v10;
        return result;
      }
      *a4 = *(void *)v7;
      a4[1] = v13;
      a4[2] = 0x600000000;
      if (*(_DWORD *)(v7 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, v7 + 8);
      }
      v4[9] = v4 + 11;
      v4[10] = 0;
      if (*(_DWORD *)(v7 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), v7 + 72);
      }
      v4[11] = v4 + 13;
      v4[12] = 0;
      if (*(_DWORD *)(v7 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
      }
      uint64_t v47 = *(void *)(v7 + 104);
      *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
      v4[13] = v47;
      uint64_t v48 = *(v6 - 15);
      v4[16] = v4 + 18;
      v4[15] = v48;
      v4[17] = 0x600000000;
      if (*((_DWORD *)v6 - 26)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), (uint64_t)(v6 - 14));
      }
      v4[24] = v4 + 26;
      v4[25] = 0;
      double result = (uint64_t)(v4 + 24);
      if (*((_DWORD *)v6 - 10)) {
        double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, (uint64_t)(v6 - 6));
      }
      v4[26] = v4 + 28;
      v4[27] = 0;
      if (*((_DWORD *)v6 - 6)) {
        double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 26), (uint64_t)(v6 - 4));
      }
      uint64_t v49 = *(v6 - 2);
      *((_WORD *)v4 + 116) = *((_WORD *)v6 - 4);
      v4[28] = v49;
    }
    else
    {
      if (a3 == 1)
      {
        *a4 = *(void *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        }
        uint64_t v8 = (uint64_t)(v4 + 11);
        v4[9] = v4 + 11;
        v4[10] = 0;
        double result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80)) {
          double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        uint64_t v9 = v4 + 13;
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (!*(_DWORD *)(v7 + 96)) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      if ((uint64_t)a3 > 8)
      {
        unint64_t v50 = a3 >> 1;
        uint64_t v51 = 120 * (a3 >> 1);
        uint64_t v52 = result + v51;
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(result, result + v51, a3 >> 1, a4, a3 >> 1);
        double result = std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v7 + v51, v6, a3 - v50, &v4[(unint64_t)v51 / 8], a3 - v50);
        uint64_t v53 = v7 + v51;
        while ((void *)v53 != v6)
        {
          uint64_t v55 = (uint64_t)(v4 + 1);
          uint64_t v56 = v4 + 3;
          if (*(unsigned __int16 *)(v7 + 112) >= *(unsigned __int16 *)(v53 + 112))
          {
            *unint64_t v4 = *(void *)v7;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v7 + 16)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v7 + 8);
            }
            v4[9] = v4 + 11;
            v4[10] = 0;
            double result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v7 + 80)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
            }
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v7 + 96)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
            }
            uint64_t v54 = *(void *)(v7 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
            v4[13] = v54;
            v7 += 120;
            v4 += 15;
            if (v7 == v52)
            {
LABEL_122:
              if ((void *)v53 != v6)
              {
                uint64_t v65 = 0;
                do
                {
                  uint64_t v67 = v53 + v65 * 8;
                  int v68 = &v4[v65];
                  *int v68 = *(void *)(v53 + v65 * 8);
                  v4[v65 + 1] = &v4[v65 + 3];
                  v68[2] = 0x600000000;
                  if (*(_DWORD *)(v53 + v65 * 8 + 16)) {
                    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v4[v65 + 1], v67 + 8);
                  }
                  v68[9] = v68 + 11;
                  double result = (uint64_t)(v68 + 9);
                  v68[10] = 0;
                  if (*(_DWORD *)(v67 + 80)) {
                    double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + v65 * 8 + 72);
                  }
                  uint64_t v69 = &v4[v65 + 13];
                  v68[11] = v69;
                  v4[v65 + 12] = 0;
                  if (*(_DWORD *)(v67 + 96)) {
                    double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v68 + 11), v53 + v65 * 8 + 88);
                  }
                  uint64_t v66 = *(void *)(v67 + 104);
                  LOWORD(v4[v65 + 14]) = *(_WORD *)(v67 + 112);
                  *uint64_t v69 = v66;
                  v65 += 15;
                }
                while ((void *)(v67 + 120) != v6);
              }
              return result;
            }
          }
          else
          {
            *unint64_t v4 = *(void *)v53;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v53 + 16)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v53 + 8);
            }
            v4[9] = v4 + 11;
            v4[10] = 0;
            double result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v53 + 80)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + 72);
            }
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v53 + 96)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v53 + 88);
            }
            uint64_t v57 = *(void *)(v53 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v53 + 112);
            v4[13] = v57;
            v53 += 120;
            v4 += 15;
            if (v7 == v52) {
              goto LABEL_122;
            }
          }
        }
        if (v7 != v52)
        {
          uint64_t v58 = 0;
          do
          {
            uint64_t v60 = v7 + v58 * 8;
            uint64_t v61 = &v4[v58];
            *uint64_t v61 = *(void *)(v7 + v58 * 8);
            v4[v58 + 1] = &v4[v58 + 3];
            double result = (uint64_t)&v4[v58 + 1];
            v61[2] = 0x600000000;
            if (*(_DWORD *)(v7 + v58 * 8 + 16)) {
              double result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, v60 + 8);
            }
            int v62 = v61 + 11;
            v61[9] = v61 + 11;
            v61[10] = 0;
            uint64_t v63 = (uint64_t)(v61 + 9);
            if (*(_DWORD *)(v60 + 80)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v63, v7 + v58 * 8 + 72);
            }
            uint64_t v64 = &v4[v58 + 13];
            *int v62 = v64;
            v4[v58 + 12] = 0;
            if (*(_DWORD *)(v60 + 96)) {
              double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v62, v7 + v58 * 8 + 88);
            }
            uint64_t v59 = *(void *)(v60 + 104);
            LOWORD(v4[v58 + 14]) = *(_WORD *)(v60 + 112);
            *uint64_t v64 = v59;
            v58 += 15;
          }
          while (v60 + 120 != v52);
        }
      }
      else if ((void *)result != a2)
      {
        *a4 = *(void *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        }
        v4[9] = v4 + 11;
        v4[10] = 0;
        double result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80)) {
          double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*(_DWORD *)(v7 + 96)) {
          double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
        }
        uint64_t v16 = *(void *)(v7 + 104);
        *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
        v4[13] = v16;
        std::vector<unsigned int>::size_type v17 = (void *)(v7 + 120);
        if ((void *)(v7 + 120) != v6)
        {
          uint64_t v18 = 0;
          uint64_t v19 = v4;
          uint64_t v70 = v6;
          while (1)
          {
            while (1)
            {
              unint64_t v21 = v17;
              uint64_t v22 = (uint64_t)(v19 + 16);
              std::vector<unsigned int>::size_type v23 = v19 + 18;
              if (*((unsigned __int16 *)v19 + 56) < *(unsigned __int16 *)(v7 + 232)) {
                break;
              }
              uint64_t v46 = v21;
              v19[15] = *v21;
              v19[16] = v23;
              v19[17] = 0x600000000;
              if (*(_DWORD *)(v7 + 136)) {
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, v7 + 128);
              }
              v19[24] = v19 + 26;
              v19[25] = 0;
              double result = (uint64_t)(v19 + 24);
              if (*(_DWORD *)(v7 + 200)) {
                double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 192);
              }
              v19[26] = v19 + 28;
              v19[27] = 0;
              if (*(_DWORD *)(v7 + 216)) {
                double result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), v7 + 208);
              }
              uint64_t v20 = *(void *)(v7 + 224);
              *((_WORD *)v19 + 116) = *(_WORD *)(v7 + 232);
              v19[28] = v20;
              uint64_t v7 = (uint64_t)v46;
              v19 += 15;
              std::vector<unsigned int>::size_type v17 = v46 + 15;
              v18 += 120;
              if (v46 + 15 == v6) {
                return result;
              }
            }
            uint64_t v72 = (uint64_t)v21;
            v19[15] = *v19;
            v19[16] = v23;
            v19[17] = 0x600000000;
            if (*((_DWORD *)v19 + 4)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 + 1));
            }
            v19[24] = v19 + 26;
            v19[25] = 0;
            if (*((_DWORD *)v19 + 20)) {
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 24), (uint64_t)(v19 + 9));
            }
            v19[26] = v19 + 28;
            v19[27] = 0;
            if (*((_DWORD *)v19 + 24)) {
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), (uint64_t)(v19 + 11));
            }
            v19[28] = v19[13];
            *((_WORD *)v19 + 116) = *((_WORD *)v19 + 56);
            uint64_t v24 = v4;
            if (v19 != v4) {
              break;
            }
LABEL_79:
            uint64_t v7 = v72;
            double result = mlir::detail::PDLByteCode::MatchResult::operator=((uint64_t)v24, v72);
            v19 += 15;
            std::vector<unsigned int>::size_type v17 = (void *)(v72 + 120);
            v18 += 120;
            if ((void *)(v72 + 120) == v6) {
              return result;
            }
          }
          uint64_t v71 = v18;
          uint64_t v25 = v19;
          uint64_t v73 = v7;
          while (1)
          {
            uint64_t v24 = (void *)((char *)v4 + v18);
            if (*(unsigned __int16 *)((char *)v4 + v18 - 8) >= *(unsigned __int16 *)(v7 + 232))
            {
LABEL_78:
              uint64_t v6 = v70;
              uint64_t v18 = v71;
              goto LABEL_79;
            }
            uint64_t v28 = (void *)*(v24 - 14);
            *uint64_t v24 = *(v24 - 15);
            int v29 = (void **)(v24 + 1);
            if (v24 - 12 == v28) {
              break;
            }
            uint64_t v30 = (char *)v4 + v18;
            if ((char *)v4 + v18 + 24 != *v29)
            {
              free(*v29);
              uint64_t v28 = (void *)*(v24 - 14);
            }
            *int v29 = v28;
            *((void *)v30 + 2) = *((void *)v30 - 13);
            *(v24 - 14) = v24 - 12;
            *((_DWORD *)v30 - 25) = 0;
            *((_DWORD *)v25 - 26) = 0;
            int v31 = (char *)v4 + v18;
            int v32 = *(_DWORD *)((char *)v4 + v18 - 40);
            if (!v32)
            {
LABEL_65:
              *((_DWORD *)v31 + 20) = 0;
              unsigned int v36 = (char *)v4 + v18;
              int v37 = *(_DWORD *)((char *)v4 + v18 - 24);
              if (v37) {
                goto LABEL_66;
              }
              goto LABEL_44;
            }
LABEL_51:
            uint64_t v33 = (char *)*((void *)v31 + 9);
            if (v31 + 88 != v33)
            {
              free(v33);
              int v32 = *((_DWORD *)v31 - 10);
            }
            uint64_t v34 = (char *)v4 + v18;
            *((void *)v31 + 9) = *((void *)v31 - 6);
            int v35 = *(_DWORD *)((char *)v4 + v18 - 36);
            *((_DWORD *)v34 + 20) = v32;
            *((_DWORD *)v34 + 21) = v35;
            *((void *)v31 - 6) = (char *)v4 + v18 - 32;
            *((_DWORD *)v34 - 9) = 0;
            *((_DWORD *)v25 - 10) = 0;
            unsigned int v36 = (char *)v4 + v18;
            int v37 = *(_DWORD *)((char *)v4 + v18 - 24);
            if (v37)
            {
LABEL_66:
              unint64_t v43 = (char *)*((void *)v36 + 11);
              if (v36 + 104 != v43)
              {
                free(v43);
                int v37 = *((_DWORD *)v36 - 6);
              }
              int v26 = v25 - 3;
              uint64_t v44 = (char *)v4 + v18;
              *((void *)v36 + 11) = *((void *)v36 - 4);
              int v45 = *(_DWORD *)((char *)v4 + v18 - 20);
              *((_DWORD *)v44 + 24) = v37;
              *((_DWORD *)v44 + 25) = v45;
              *((void *)v36 - 4) = (char *)v4 + v18 - 16;
              *((_DWORD *)v44 - 5) = 0;
              goto LABEL_45;
            }
LABEL_44:
            int v26 = v36 + 96;
LABEL_45:
            v25 -= 15;
            *int v26 = 0;
            uint64_t v27 = (char *)v4 + v18;
            *((void *)v27 + 13) = *(void *)((char *)v4 + v18 - 16);
            *((_WORD *)v27 + 56) = *((_WORD *)v24 - 4);
            v18 -= 120;
            if (!v18)
            {
              uint64_t v24 = v4;
              goto LABEL_78;
            }
          }
          uint64_t v38 = (char *)v4 + v18;
          uint64_t v39 = (_DWORD *)((char *)v4 + v18 - 104);
          unint64_t v40 = *v39;
          uint64_t v41 = *(unsigned int *)((char *)v4 + v18 + 16);
          if (v41 >= v40)
          {
            if (v40) {
              memmove(*v29, v28, 8 * v40);
            }
          }
          else
          {
            if (*((_DWORD *)v38 + 5) < v40)
            {
              *((_DWORD *)v38 + 4) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v24 + 1), (char *)v4 + v18 + 24, v40, 8);
              uint64_t v41 = 0;
              uint64_t v42 = *v39;
              if (!*v39) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            if (v41)
            {
              memmove(*v29, v28, 8 * v41);
              uint64_t v42 = *v39;
              if (v41 == v42) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            uint64_t v41 = 0;
            uint64_t v42 = *v39;
            if (*v39) {
LABEL_63:
            }
              memcpy((char *)*v29 + 8 * v41, (const void *)(*(v24 - 14) + 8 * v41), 8 * v42 - 8 * v41);
          }
LABEL_64:
          *((_DWORD *)v38 + 4) = v40;
          uint64_t v7 = v73;
          *uint64_t v39 = 0;
          int v31 = (char *)v4 + v18;
          int v32 = *(_DWORD *)((char *)v4 + v18 - 40);
          if (!v32) {
            goto LABEL_65;
          }
          goto LABEL_51;
        }
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v7 = a5;
  while (v7 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v11 = 0;
    uint64_t v12 = -a4;
    while (1)
    {
      uint64_t v13 = a1 + v11;
      if (*(unsigned __int16 *)(a1 + v11 + 112) < *(unsigned __int16 *)(a2 + 112)) {
        break;
      }
      v11 += 120;
      if (__CFADD__(v12++, 1)) {
        return;
      }
    }
    uint64_t v15 = -v12;
    uint64_t v80 = a3;
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1 + v11, a2);
        return;
      }
      if (v12 > 0) {
        uint64_t v15 = 1 - v12;
      }
      uint64_t v26 = v15 >> 1;
      uint64_t v21 = a1 + 120 * (v15 >> 1) + v11;
      if (a3 == a2)
      {
        uint64_t v18 = a3;
      }
      else
      {
        unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 3);
        uint64_t v18 = a2;
        do
        {
          unint64_t v28 = v27 >> 1;
          unint64_t v29 = v18 + 120 * (v27 >> 1);
          unsigned int v30 = *(unsigned __int16 *)(v29 + 112);
          uint64_t v31 = v29 + 120;
          v27 += ~(v27 >> 1);
          if (v30 > *(unsigned __int16 *)(v21 + 112)) {
            uint64_t v18 = v31;
          }
          else {
            unint64_t v27 = v28;
          }
        }
        while (v27);
      }
      uint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * ((v18 - a2) >> 3);
      uint64_t v32 = v18;
      if (v21 != a2)
      {
LABEL_37:
        uint64_t v32 = v21;
        if (a2 != v18)
        {
          uint64_t v77 = v26;
          uint64_t v78 = v17;
          uint64_t v79 = a7;
          std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v21, a2);
          uint64_t v32 = v21 + 120;
          for (uint64_t i = a2 + 120; i != v18; i += 120)
          {
            if (v32 == a2) {
              a2 = i;
            }
            std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v32, i);
            v32 += 120;
          }
          if (v32 != a2)
          {
            uint64_t v34 = v32;
            uint64_t v35 = a2;
            while (1)
            {
              std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34, a2);
              a2 += 120;
              BOOL v36 = v34 + 120 == v35;
              if (a2 == v18)
              {
                if (v34 + 120 == v35) {
                  goto LABEL_56;
                }
                a2 = v35 + 120;
                v34 += 240;
                while (1)
                {
                  std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34 - 120, v35);
                  BOOL v36 = v34 == v35;
                  if (a2 != v18) {
                    break;
                  }
                  BOOL v37 = v34 == v35;
                  v34 += 120;
                  if (v37) {
                    goto LABEL_56;
                  }
                }
              }
              else
              {
                v34 += 120;
              }
              if (v36) {
                uint64_t v35 = a2;
              }
            }
          }
          uint64_t v32 = a2;
LABEL_56:
          uint64_t v17 = v78;
          a7 = v79;
          uint64_t v26 = v77;
        }
      }
    }
    else
    {
      if (v7 >= 0) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = v7 + 1;
      }
      uint64_t v17 = v16 >> 1;
      uint64_t v18 = a2 + 120 * (v16 >> 1);
      if (v13 == a2)
      {
        uint64_t v19 = a1 + v11;
        uint64_t v21 = a2;
      }
      else
      {
        uint64_t v19 = a1 + v11;
        unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1 - v11) >> 3);
        uint64_t v21 = v13;
        do
        {
          unint64_t v22 = v20 >> 1;
          unint64_t v23 = v21 + 120 * (v20 >> 1);
          unsigned int v24 = *(unsigned __int16 *)(v23 + 112);
          uint64_t v25 = v23 + 120;
          v20 += ~(v20 >> 1);
          if (v24 < *(unsigned __int16 *)(v18 + 112)) {
            unint64_t v20 = v22;
          }
          else {
            uint64_t v21 = v25;
          }
        }
        while (v20);
      }
      uint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((v21 - v19) >> 3);
      uint64_t v32 = v18;
      if (v21 != a2) {
        goto LABEL_37;
      }
    }
    a4 = -(v26 + v12);
    uint64_t v38 = v7 - v17;
    if (v26 + v17 >= v7 - (v26 + v17) - v12)
    {
      uint64_t v40 = v26;
      uint64_t v41 = -(v26 + v12);
      uint64_t v42 = v17;
      uint64_t v43 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v32, v18, v80, v41, v38, a6);
      a7 = v43;
      uint64_t v44 = v21;
      a4 = v40;
      a3 = v32;
      uint64_t v7 = v42;
      a1 = v13;
      a2 = v44;
      if (!v7) {
        return;
      }
    }
    else
    {
      uint64_t v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v13, v21, v32, v26, v17, a6);
      a7 = v39;
      a3 = v80;
      uint64_t v7 = v38;
      a1 = v32;
      a2 = v18;
      if (!v38) {
        return;
      }
    }
  }
  if (a4 <= v7)
  {
    if (a1 == a2) {
      return;
    }
    uint64_t v55 = a3;
    uint64_t v56 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = a6;
    do
    {
      uint64_t v58 = a1 + v56;
      uint64_t v59 = (void *)(a6 + v56);
      *uint64_t v59 = *(void *)(a1 + v56);
      *(void *)(a6 + v56 + 8) = a6 + v56 + 24;
      v59[2] = 0x600000000;
      if (*(_DWORD *)(a1 + v56 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v56 + 8, v58 + 8);
      }
      uint64_t v60 = v59 + 11;
      v59[9] = v59 + 11;
      v59[10] = 0;
      uint64_t v61 = (uint64_t)(v59 + 9);
      if (*(_DWORD *)(v58 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v61, a1 + v56 + 72);
      }
      int v62 = (void *)(a6 + v56 + 104);
      *uint64_t v60 = v62;
      *(void *)(a6 + v56 + 96) = 0;
      if (*(_DWORD *)(v58 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v60, a1 + v56 + 88);
      }
      uint64_t v57 = *(void *)(v58 + 104);
      *(_WORD *)(a6 + v56 + 112) = *(_WORD *)(v58 + 112);
      *int v62 = v57;
      ++v47;
      v56 += 120;
    }
    while (v58 + 120 != a2);
    if (v56)
    {
      uint64_t v68 = a6 + v56;
      uint64_t v69 = a6;
      while (a2 != v55)
      {
        if (*(unsigned __int16 *)(v69 + 112) >= *(unsigned __int16 *)(a2 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, v69);
          v69 += 120;
          a1 += 120;
          if (v68 == v69) {
            goto LABEL_107;
          }
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
          a2 += 120;
          a1 += 120;
          if (v68 == v69) {
            goto LABEL_107;
          }
        }
      }
      uint64_t v72 = 0;
      do
      {
        mlir::detail::PDLByteCode::MatchResult::operator=(a1 + v72, v69 + v72);
        v72 += 120;
      }
      while (v68 - 120 != v69 + v72 - 120);
    }
  }
  else
  {
    if (a2 == a3) {
      return;
    }
    uint64_t v45 = a3;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = a6;
    do
    {
      unint64_t v50 = (void *)(a6 + v46);
      uint64_t v51 = a2 + v46;
      *unint64_t v50 = *(void *)(a2 + v46);
      *(void *)(a6 + v46 + 8) = a6 + v46 + 24;
      v50[2] = 0x600000000;
      if (*(_DWORD *)(a2 + v46 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v46 + 8, v51 + 8);
      }
      uint64_t v52 = v50 + 11;
      v50[9] = v50 + 11;
      v50[10] = 0;
      uint64_t v53 = (uint64_t)(v50 + 9);
      if (*(_DWORD *)(v51 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v53, a2 + v46 + 72);
      }
      uint64_t v54 = (void *)(a6 + v46 + 104);
      *uint64_t v52 = v54;
      *(void *)(a6 + v46 + 96) = 0;
      if (*(_DWORD *)(v51 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v52, a2 + v46 + 88);
      }
      uint64_t v49 = *(void *)(v51 + 104);
      *(_WORD *)(a6 + v46 + 112) = *(_WORD *)(v51 + 112);
      *uint64_t v54 = v49;
      ++v47;
      v46 += 120;
    }
    while (v51 + 120 != v45);
    if (v46)
    {
      uint64_t v63 = a6 + v46;
      uint64_t v64 = v45 - 120;
      while (a2 != a1)
      {
        unsigned int v65 = *(unsigned __int16 *)(a2 - 8);
        unsigned int v66 = *(unsigned __int16 *)(v63 - 8);
        if (v65 >= v66) {
          uint64_t v67 = v63 - 120;
        }
        else {
          uint64_t v67 = a2 - 120;
        }
        if (v65 >= v66) {
          v63 -= 120;
        }
        else {
          a2 -= 120;
        }
        mlir::detail::PDLByteCode::MatchResult::operator=(v64, v67);
        v64 -= 120;
        if (v63 == a6) {
          goto LABEL_107;
        }
      }
      uint64_t v70 = 0;
      do
      {
        uint64_t v71 = v64 + v70;
        v70 -= 120;
        mlir::detail::PDLByteCode::MatchResult::operator=(v71, v63 + v70);
      }
      while (v63 + v70 != a6);
    }
  }
LABEL_107:
  if (v48 && v47)
  {
    uint64_t v73 = (void *)(a6 + 104);
    do
    {
      uint64_t v74 = (void *)*(v73 - 2);
      if (v73 != v74) {
        free(v74);
      }
      unsigned int v75 = (char *)*(v73 - 4);
      if (v73 - 2 != (void *)v75) {
        free(v75);
      }
      unsigned int v76 = (char *)*(v73 - 12);
      if (v73 - 10 != (void *)v76) {
        free(v76);
      }
      v73 += 15;
      --v47;
    }
    while (v47);
  }
}

void std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a1;
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  if (*(_DWORD *)(a1 + 16)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v5, a1 + 8);
  }
  v7[0] = v8;
  v7[1] = 0;
  if (*(_DWORD *)(a1 + 80)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v7, a1 + 72);
  }
  v8[0] = &v9;
  v8[1] = 0;
  if (*(_DWORD *)(a1 + 96)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v8, a1 + 88);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  __int16 v10 = *(_WORD *)(a1 + 112);
  mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
  mlir::detail::PDLByteCode::MatchResult::operator=(a2, (uint64_t)&v4);
  if (v8[0] != &v9) {
    free(v8[0]);
  }
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v5[0] != v6) {
    free(v5[0]);
  }
}

uint64_t mlir::detail::PDLByteCode::MatchResult::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a1 + 8, a2 + 8);
  if (a1 != a2)
  {
    uint64_t v5 = (int *)(a2 + 80);
    int v4 = *(_DWORD *)(a2 + 80);
    if (v4)
    {
      uint64_t v6 = *(void **)(a1 + 72);
      if (v6 != (void *)(a1 + 88))
      {
        free(v6);
        int v4 = *v5;
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      int v7 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v4;
      *(_DWORD *)(a1 + 84) = v7;
      *(void *)(a2 + 72) = a2 + 88;
      *(_DWORD *)(a2 + 84) = 0;
      int *v5 = 0;
      uint64_t v9 = (int *)(a2 + 96);
      int v8 = *(_DWORD *)(a2 + 96);
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 0;
      uint64_t v9 = (int *)(a2 + 96);
      int v8 = *(_DWORD *)(a2 + 96);
      if (v8)
      {
LABEL_6:
        __int16 v10 = *(void **)(a1 + 88);
        if (v10 != (void *)(a1 + 104))
        {
          free(v10);
          int v8 = *v9;
        }
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        int v11 = *(_DWORD *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(_DWORD *)(a1 + 100) = v11;
        *(void *)(a2 + 88) = a2 + 104;
        *(_DWORD *)(a2 + 100) = 0;
        goto LABEL_11;
      }
    }
    uint64_t v9 = (int *)(a1 + 96);
LABEL_11:
    *uint64_t v9 = 0;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

void mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6)
{
  v115[14] = *MEMORY[0x263EF8340];
  uint64_t v12 = (char *)operator new(0x68uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_26C389E70;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(void *)(a1 + 8) = v12;
  *(_OWORD *)(v12 + 24) = 0u;
  *(void *)a1 = v12 + 24;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  unsigned int v110 = 0;
  if (a4)
  {
    uint64_t v13 = 24 * a4;
    do
    {
      LODWORD(v14) = *((char *)a3 + 23);
      uint64_t v15 = *a3;
      BOOL v16 = (v14 & 0x80000000) != 0;
      if ((v14 & 0x80000000) == 0) {
        uint64_t v15 = a3;
      }
      v114[0] = v15;
      unint64_t v14 = v14;
      if (v16) {
        unint64_t v14 = (unint64_t)a3[1];
      }
      v114[1] = (void *)v14;
      __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v111, (uint64_t)v114, &__p) & 1) == 0)
      {
        uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v111, (uint64_t)v114, (uint64_t)v114, __p);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v114;
      }
      a3 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  if (a6)
  {
    uint64_t v18 = 24 * a6;
    do
    {
      LODWORD(v19) = *((char *)a5 + 23);
      unint64_t v20 = *a5;
      BOOL v21 = (v19 & 0x80000000) != 0;
      if ((v19 & 0x80000000) == 0) {
        unint64_t v20 = a5;
      }
      v114[0] = v20;
      unint64_t v19 = v19;
      if (v21) {
        unint64_t v19 = (unint64_t)a5[1];
      }
      v114[1] = (void *)v19;
      __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v108, (uint64_t)v114, &__p) & 1) == 0)
      {
        unint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v108, (uint64_t)v114, (uint64_t)v114, __p);
        *(_OWORD *)unint64_t v22 = *(_OWORD *)v114;
      }
      a5 += 3;
      v18 -= 24;
    }
    while (v18);
  }
  __p = 0;
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  v104[0] = &__p;
  v104[1] = (void **)a1;
  unint64_t v23 = *(uint64_t **)(a2 + 8);
  unsigned int v24 = *(uint64_t **)(a2 + 16);
  uint64_t v96 = a2;
  if (v23 == v24)
  {
LABEL_108:
    uint64_t v85 = *(void *)(v96 + 32);
    uint64_t v103 = v85;
    if (v85)
    {
      v101[0] = *(llvm **)(v96 + 104);
      BOOL v86 = *(llvm **)(v96 + 112);
      *(void *)(v96 + 104) = 0;
      *(void *)(v96 + 112) = 0;
      int v102 = *(_DWORD *)(v96 + 120);
      *(_DWORD *)(v96 + 120) = 0;
      uint64_t v88 = *(unsigned int *)(v85 + 40);
      unint64_t v87 = *(unsigned int *)(v85 + 44);
      v101[1] = v86;
      v89.n128_f64[0] = mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((v85 + 64 + 16 * ((v87 >> 23) & 1) + ((v87 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * v88), (uint64_t)v114);
      if (v115[0] != v115[8])
      {
        uint64_t v90 = *(void *)(((v85
                          + 64
                          + 16 * (((unint64_t)*(unsigned int *)(v85 + 44) >> 23) & 1)
                          + (((unint64_t)*(unsigned int *)(v85 + 44) >> 21) & 0x7F8)
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v85 + 40)
                        + 8);
        if (v90) {
          uint64_t v91 = v90 - 8;
        }
        else {
          uint64_t v91 = 0;
        }
        int v92 = (ZinIrHalH13g *)(v91 + 32);
        uint64_t v93 = *(ZinIrHalH13g **)(v91 + 40);
        if (v93 != (ZinIrHalH13g *)(v91 + 32))
        {
          do
          {
            uint64_t v94 = (ZinIrHalH13g *)*((void *)v93 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v93);
            mlir::detail::walk<mlir::ForwardIterator>(v95, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>, (uint64_t)&v100, 1);
            uint64_t v93 = v94;
          }
          while (v94 != v92);
        }
        mlir::PassManager::PassManager(v114, *(void *)(v85 + 48), 1, v89);
        mlir::PassManager::enableVerifier((uint64_t)v114, 0);
        mlir::createPDLToPDLInterpPass();
      }
      v114[0] = v115;
      v114[1] = (void *)0x600000000;
      if (*(_DWORD *)(v96 + 48)) {
        llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v114, v96 + 40);
      }
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v99, (uint64_t *)(v96 + 128));
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v98, (uint64_t *)(v96 + 152));
      std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>();
    }
    if (__p)
    {
      unint64_t v106 = __p;
      operator delete(__p);
    }
    llvm::deallocate_buffer(v108, (void *)(16 * v110));
  }
  unsigned int v97 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    if (v109)
    {
      *(_OWORD *)int v114 = *(_OWORD *)(*v23 + 64);
      v101[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v108, (uint64_t)v114, v101) & 1) == 0)
      {
        uint64_t v26 = *(unsigned int *)(*v23 + 88);
        if (!v26) {
          goto LABEL_22;
        }
        unint64_t v27 = *(long long **)(*v23 + 80);
        uint64_t v28 = 16 * v26 - 16;
        do
        {
          long long v29 = *v27++;
          *(_OWORD *)int v114 = v29;
          v101[0] = 0;
          int v30 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v108, (uint64_t)v114, v101);
          if (v30) {
            break;
          }
          uint64_t v31 = v28;
          v28 -= 16;
        }
        while (v31);
        if (!v30) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v32 = *v23;
    if (v112)
    {
      *(_OWORD *)int v114 = *(_OWORD *)(v32 + 64);
      v101[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v111, (uint64_t)v114, v101))goto LABEL_22; {
      uint64_t v32 = *v23;
      }
      uint64_t v33 = *(unsigned int *)(*v23 + 88);
      if (v33)
      {
        uint64_t v34 = *(_OWORD **)(v32 + 80);
        uint64_t v35 = 16 * v33;
        do
        {
          *(_OWORD *)int v114 = *v34;
          v101[0] = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v111, (uint64_t)v114, v101))goto LABEL_22; {
          ++v34;
          }
          v35 -= 16;
        }
        while (v35);
        uint64_t v32 = *v23;
      }
    }
    int v36 = *(_DWORD *)(v32 + 16);
    if (v36 == 1) {
      break;
    }
    if (v36 == 2)
    {
      v114[0] = *(void **)(v32 + 8);
      v114[1] = (void *)1;
      v101[0] = (llvm *)v114;
      uint64_t v47 = v23;
      uint64_t v48 = (unsigned int (*)(uint64_t, void))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>;
    }
    else
    {
      if (*(_DWORD *)(*v23 + 16) != 3)
      {
        uint64_t v63 = *(void **)a1;
        uint64_t v64 = *(uint64_t **)(*(void *)a1 + 56);
        if ((unint64_t)v64 >= *(void *)(*(void *)a1 + 64))
        {
          unsigned int v66 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v63 + 6, v23);
        }
        else
        {
          uint64_t v65 = *v23;
          *unint64_t v23 = 0;
          *uint64_t v64 = v65;
          unsigned int v66 = v64 + 1;
        }
        v63[7] = v66;
        goto LABEL_22;
      }
      v114[0] = *(void **)(*v23 + 8);
      v114[1] = (void *)1;
      v101[0] = (llvm *)v114;
      uint64_t v47 = v23;
      uint64_t v48 = (unsigned int (*)(uint64_t, void))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>;
    }
    mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(v104, v47, v48, (uint64_t)v101);
LABEL_22:
    if (++v23 == v24) {
      goto LABEL_108;
    }
  }
  uint64_t v37 = *(void *)(v32 + 8);
  uint64_t v38 = *(_DWORD **)a1;
  unsigned int v39 = *(_DWORD *)(*(void *)a1 + 16);
  if (!v39) {
    goto LABEL_91;
  }
  uint64_t v40 = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
  uint64_t v41 = (void *)(*(void *)v38 + 32 * v40);
  uint64_t v42 = *v41;
  if (v37 == *v41) {
    goto LABEL_59;
  }
  uint64_t v43 = 0;
  int v44 = 1;
  while (v42 != -4096)
  {
    if (v43) {
      BOOL v45 = 0;
    }
    else {
      BOOL v45 = v42 == -8192;
    }
    if (v45) {
      uint64_t v43 = v41;
    }
    int v46 = v40 + v44++;
    uint64_t v40 = v46 & (v39 - 1);
    uint64_t v41 = (void *)(*(void *)v38 + 32 * v40);
    uint64_t v42 = *v41;
    if (v37 == *v41) {
      goto LABEL_59;
    }
  }
  if (v43) {
    uint64_t v41 = v43;
  }
  int v76 = v38[2];
  if (4 * v76 + 4 < 3 * v39)
  {
    if (v39 + ~v76 - v38[3] > v39 >> 3)
    {
      uint64_t v49 = *v41;
      ++v38[2];
      if (v49 == -4096)
      {
LABEL_58:
        *uint64_t v41 = v37;
        v41[1] = 0;
        v41[2] = 0;
        v41[3] = 0;
        uint64_t v32 = *v23;
LABEL_59:
        uint64_t v51 = (uint64_t *)v41[2];
        unint64_t v50 = v41[3];
        if ((unint64_t)v51 < v50)
        {
          *uint64_t v51 = v32;
          v41[2] = v51 + 1;
          uint64_t v52 = *(void **)a1;
          uint64_t v53 = *(uint64_t **)(*(void *)a1 + 32);
          if ((unint64_t)v53 >= *(void *)(*(void *)a1 + 40)) {
            goto LABEL_85;
          }
LABEL_21:
          uint64_t v25 = *v23;
          *unint64_t v23 = 0;
          *uint64_t v53 = v25;
          v52[4] = v53 + 1;
          goto LABEL_22;
        }
        uint64_t v54 = a1;
        uint64_t v55 = (char *)v41[1];
        uint64_t v56 = ((char *)v51 - v55) >> 3;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61) {
          abort();
        }
        uint64_t v58 = v50 - (void)v55;
        if (v58 >> 2 > v57) {
          unint64_t v57 = v58 >> 2;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v61 = (uint64_t *)&v60[8 * v56];
          *uint64_t v61 = v32;
          uint64_t v62 = (uint64_t)(v61 + 1);
          if (v51 == (uint64_t *)v55)
          {
LABEL_82:
            v41[1] = v61;
            v41[2] = v62;
            v41[3] = &v60[8 * v59];
            a1 = v54;
            if (v51) {
              operator delete(v51);
            }
            unsigned int v24 = v97;
            v41[2] = v62;
            uint64_t v52 = *(void **)a1;
            uint64_t v53 = *(uint64_t **)(*(void *)a1 + 32);
            if ((unint64_t)v53 >= *(void *)(*(void *)a1 + 40))
            {
LABEL_85:
              v52[4] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v52 + 3, v23);
              goto LABEL_22;
            }
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v60 = 0;
          uint64_t v61 = (uint64_t *)(8 * v56);
          *(void *)(8 * v56) = v32;
          uint64_t v62 = 8 * v56 + 8;
          if (v51 == (uint64_t *)v55) {
            goto LABEL_82;
          }
        }
        unint64_t v67 = (char *)(v51 - 1) - v55;
        if (v67 < 0x58) {
          goto LABEL_126;
        }
        if ((unint64_t)(v55 - v60) < 0x20) {
          goto LABEL_126;
        }
        uint64_t v68 = (v67 >> 3) + 1;
        uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v70 = &v51[v69 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v61 = (uint64_t *)((char *)v61 - v69);
        uint64_t v71 = &v60[8 * v56 - 16];
        uint64_t v72 = v51 - 2;
        uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)uint64_t v71 = v74;
          v71 -= 32;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        uint64_t v51 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_126:
          do
          {
            uint64_t v75 = *--v51;
            *--uint64_t v61 = v75;
          }
          while (v51 != (uint64_t *)v55);
        }
        uint64_t v51 = (uint64_t *)v41[1];
        goto LABEL_82;
      }
LABEL_57:
      --v38[3];
      goto LABEL_58;
    }
  }
  else
  {
LABEL_91:
    v39 *= 2;
  }
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*(void *)a1, v39);
  int v77 = v38[4] - 1;
  uint64_t v78 = v77 & ((v37 >> 4) ^ (v37 >> 9));
  uint64_t v41 = (void *)(*(void *)v38 + 32 * v78);
  uint64_t v79 = *v41;
  if (v37 == *v41)
  {
LABEL_93:
    ++v38[2];
    if (v37 == -4096) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v80 = 0;
    int v81 = 1;
    while (v79 != -4096)
    {
      if (v80) {
        BOOL v82 = 0;
      }
      else {
        BOOL v82 = v79 == -8192;
      }
      if (v82) {
        uint64_t v80 = v41;
      }
      int v83 = v78 + v81++;
      uint64_t v78 = v83 & v77;
      uint64_t v41 = (void *)(*(void *)v38 + 32 * v78);
      uint64_t v79 = *v41;
      if (v37 == *v41) {
        goto LABEL_93;
      }
    }
    if (v80) {
      uint64_t v41 = v80;
    }
    uint64_t v84 = *v41;
    ++v38[2];
    if (v84 == -4096) {
      goto LABEL_58;
    }
  }
  goto LABEL_57;
}

void *mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(void ***a1, uint64_t *a2, unsigned int (*a3)(uint64_t, void), uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = (uint64_t *)a1[1];
  int v8 = **a1;
  int v7 = (*a1)[1];
  uint64_t v63 = v6;
  if (v8 != v7)
  {
    uint64_t v9 = a3;
LABEL_8:
    uint64_t v65 = v7;
    while (1)
    {
      uint64_t v20 = *v8;
      if (!v9(v4, *v8)) {
        goto LABEL_11;
      }
      uint64_t v21 = *v6;
      unsigned int v22 = *(_DWORD *)(*v6 + 16);
      if (!v22) {
        goto LABEL_55;
      }
      uint64_t v23 = (v22 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      unsigned int v24 = (void *)(*(void *)v21 + 32 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v20) {
        goto LABEL_30;
      }
      uint64_t v26 = 0;
      int v27 = 1;
      while (v25 != -4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -8192;
        }
        if (v28) {
          uint64_t v26 = v24;
        }
        int v29 = v23 + v27++;
        uint64_t v23 = v29 & (v22 - 1);
        unsigned int v24 = (void *)(*(void *)v21 + 32 * v23);
        uint64_t v25 = *v24;
        if (*v24 == v20) {
          goto LABEL_30;
        }
      }
      if (v26) {
        unsigned int v24 = v26;
      }
      int v50 = *(_DWORD *)(v21 + 8);
      if (4 * v50 + 4 < 3 * v22)
      {
        if (v22 + ~v50 - *(_DWORD *)(v21 + 12) > v22 >> 3) {
          goto LABEL_26;
        }
      }
      else
      {
LABEL_55:
        v22 *= 2;
      }
      llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*v6, v22);
      int v51 = *(_DWORD *)(v21 + 16) - 1;
      uint64_t v52 = v51 & ((v20 >> 4) ^ (v20 >> 9));
      unsigned int v24 = (void *)(*(void *)v21 + 32 * v52);
      uint64_t v53 = *v24;
      if (*v24 == v20)
      {
        uint64_t v30 = v20;
        goto LABEL_27;
      }
      uint64_t v54 = 0;
      int v55 = 1;
      while (v53 != -4096)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == -8192;
        }
        if (v56) {
          uint64_t v54 = v24;
        }
        int v57 = v52 + v55++;
        uint64_t v52 = v57 & v51;
        unsigned int v24 = (void *)(*(void *)v21 + 32 * v52);
        uint64_t v53 = *v24;
        uint64_t v30 = v20;
        uint64_t v4 = a4;
        uint64_t v6 = v63;
        uint64_t v9 = a3;
        if (*v24 == v20) {
          goto LABEL_27;
        }
      }
      if (v54) {
        unsigned int v24 = v54;
      }
      uint64_t v4 = a4;
      uint64_t v6 = v63;
      uint64_t v9 = a3;
LABEL_26:
      uint64_t v30 = *v24;
LABEL_27:
      ++*(_DWORD *)(v21 + 8);
      if (v30 != -4096) {
        --*(_DWORD *)(v21 + 12);
      }
      *unsigned int v24 = v20;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
LABEL_30:
      uint64_t v31 = *a2;
      uint64_t v33 = (uint64_t *)v24[2];
      unint64_t v32 = v24[3];
      if ((unint64_t)v33 < v32)
      {
        *uint64_t v33 = v31;
        uint64_t v19 = (uint64_t)(v33 + 1);
        goto LABEL_10;
      }
      uint64_t v34 = (char *)v24[1];
      uint64_t v35 = ((char *)v33 - v34) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        goto LABEL_76;
      }
      uint64_t v37 = v32 - (void)v34;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v39 = (char *)operator new(8 * v38);
        uint64_t v40 = (uint64_t *)&v39[8 * v35];
        *uint64_t v40 = v31;
        uint64_t v19 = (uint64_t)(v40 + 1);
        if (v33 == (uint64_t *)v34)
        {
LABEL_43:
          uint64_t v4 = a4;
          uint64_t v6 = v63;
          v24[1] = v40;
          v24[2] = v19;
          v24[3] = &v39[8 * v38];
          uint64_t v9 = a3;
          if (!v33) {
            goto LABEL_10;
          }
LABEL_51:
          operator delete(v33);
          goto LABEL_10;
        }
      }
      else
      {
        unsigned int v39 = 0;
        uint64_t v40 = (uint64_t *)(8 * v35);
        *(void *)(8 * v35) = v31;
        uint64_t v19 = 8 * v35 + 8;
        if (v33 == (uint64_t *)v34) {
          goto LABEL_43;
        }
      }
      unint64_t v41 = (char *)(v33 - 1) - v34;
      if (v41 < 0x58)
      {
        uint64_t v6 = v63;
        do
        {
LABEL_49:
          uint64_t v49 = *--v33;
          *--uint64_t v40 = v49;
        }
        while (v33 != (uint64_t *)v34);
        goto LABEL_50;
      }
      uint64_t v6 = v63;
      if ((unint64_t)(v34 - v39) < 0x20) {
        goto LABEL_49;
      }
      uint64_t v42 = (v41 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      int v44 = &v33[v43 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v40 = (uint64_t *)((char *)v40 - v43);
      BOOL v45 = &v39[8 * v35 - 16];
      int v46 = v33 - 2;
      uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)BOOL v45 = v48;
        v45 -= 32;
        v46 -= 4;
        v47 -= 4;
      }
      while (v47);
      uint64_t v33 = v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_49;
      }
LABEL_50:
      uint64_t v33 = (uint64_t *)v24[1];
      v24[1] = v40;
      v24[2] = v19;
      v24[3] = &v39[8 * v38];
      uint64_t v4 = a4;
      uint64_t v9 = a3;
      if (v33) {
        goto LABEL_51;
      }
LABEL_10:
      v24[2] = v19;
      int v7 = v65;
LABEL_11:
      if (++v8 == v7) {
        goto LABEL_70;
      }
    }
  }
  uint64_t RegisteredOperations = mlir::MLIRContext::getRegisteredOperations((mlir::MLIRContext *)(*(void *)(*a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (v12)
  {
    uint64_t v13 = v12;
    if (v12 < 0) {
LABEL_76:
    }
      abort();
    unint64_t v14 = (const void *)RegisteredOperations;
    uint64_t v15 = (char *)operator new(8 * v12);
    BOOL v16 = &v15[8 * v13];
    memcpy(v15, v14, 8 * v13);
    uint64_t v4 = a4;
    uint64_t v6 = v63;
    uint64_t v17 = *a1;
    uint64_t v18 = **a1;
    if (v18) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = *a1;
    uint64_t v18 = **a1;
    if (v18)
    {
LABEL_6:
      v17[1] = v18;
      operator delete(v18);
    }
  }
  *uint64_t v17 = v15;
  v17[1] = v16;
  v17[2] = v16;
  int v8 = **a1;
  int v7 = (*a1)[1];
  uint64_t v9 = a3;
  if (v8 != v7) {
    goto LABEL_8;
  }
LABEL_70:
  uint64_t v58 = *v6;
  unint64_t v59 = *(uint64_t **)(*v6 + 32);
  if ((unint64_t)v59 >= *(void *)(*v6 + 40))
  {
    double result = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>((void *)(v58 + 24), a2);
  }
  else
  {
    uint64_t v60 = *a2;
    *a2 = 0;
    *unint64_t v59 = v60;
    double result = v59 + 1;
  }
  *(void *)(v58 + 32) = result;
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet(mlir::FrozenRewritePatternSet *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    unint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_70;
  }
  uint64_t v6 = *a1;
  int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  unsigned int v8 = v4 - 1;
  uint64_t v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      int v11 = 0;
      int v19 = 1;
      int v20 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      uint64_t v21 = (const void *)*v14;
      if (*v14 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == (const void *)-2;
          }
          if (v22) {
            int v11 = v14;
          }
          int v23 = v19 + v20;
          ++v19;
          int v20 = v23 & v8;
          unint64_t v14 = (void *)(v6 + 16 * (v23 & v8));
          uint64_t v21 = (const void *)*v14;
          if (*v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      int v11 = 0;
      int v31 = 1;
      int v32 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      uint64_t v33 = *v14;
      if (*v14 == -2) {
        goto LABEL_47;
      }
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v33 == -2;
            }
            if (v34) {
              int v11 = v14;
            }
            int v35 = v31 + v32;
            ++v31;
            int v32 = v35 & v8;
            unint64_t v14 = (void *)(v6 + 16 * (v35 & v8));
            uint64_t v33 = *v14;
            if (*v14 != -2) {
              goto LABEL_43;
            }
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      int v11 = 0;
      int v36 = 1;
      int v37 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      unint64_t v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_63;
      }
      while (v38 != (const void *)-1)
      {
        if (v11) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38 == (const void *)-2;
        }
        if (v39) {
          int v11 = v14;
        }
        int v40 = v36 + v37;
        ++v36;
        int v37 = v40 & v8;
        unint64_t v14 = (void *)(v6 + 16 * (v40 & v8));
        unint64_t v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10)) {
            goto LABEL_69;
          }
        }
      }
      goto LABEL_66;
    }
    int v11 = 0;
    int v24 = 1;
    int v25 = HashValue & v8;
    unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
    uint64_t v26 = (const void *)*v14;
    if (*v14 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), int v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (const void *)-2;
          }
          if (v29) {
            int v11 = v14;
          }
          int v30 = v24 + v25;
          ++v24;
          int v25 = v30 & v8;
          unint64_t v14 = (void *)(v6 + 16 * (v30 & v8));
          uint64_t v26 = (const void *)*v14;
          if (*v14 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    uint64_t result = 1;
    goto LABEL_70;
  }
  int v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
  uint64_t v15 = (const void *)*v14;
  if (*v14 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10)) {
    goto LABEL_69;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      int v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    unint64_t v14 = (void *)(v6 + 16 * (v17 & v8));
    uint64_t v15 = (const void *)*v14;
    if (*v14 != -1) {
      goto LABEL_5;
    }
  }
LABEL_66:
  uint64_t result = 0;
  if (v11) {
    unint64_t v14 = v11;
  }
LABEL_70:
  *a3 = v14;
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>(uint64_t a1, mlir::Operation *a2)
{
  if (mlir::isOpTriviallyDead((void ***)a2, a2))
  {
    mlir::Operation::erase(a2);
  }
}

llvm::StringMapImpl *llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v19 = v4 + 8 * v5 + 8;
      uint64_t v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          uint64_t v9 = *(size_t **)(*a2 + 8 * v7);
          if (v9 && v9 + 1 != 0) {
            break;
          }
          *(void *)(*(void *)this + 8 * v7++) = v9;
          if (v5 == v7) {
            return this;
          }
        }
        int v12 = v9 + 1;
        size_t v11 = *v9;
        buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
        unint64_t v14 = buffer;
        uint64_t v15 = (char *)(buffer + 5);
        if (v11) {
          memcpy(buffer + 5, v9 + 5, v11);
        }
        v15[v11] = 0;
        *unint64_t v14 = v11;
        BOOL v16 = v14 + 1;
        size_t v17 = v9[4];
        if (v17)
        {
          if ((size_t *)v17 == v12)
          {
            v14[4] = (size_t)v16;
            (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
          }
          else
          {
            v14[4] = (*(uint64_t (**)(size_t, void *))(*(void *)v17 + 16))(v17, v16);
          }
        }
        else
        {
          v14[4] = 0;
        }
        *(void *)(*(void *)this + 8 * v7) = v14;
        *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

llvm::StringMapImpl *llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v19 = v4 + 8 * v5 + 8;
      uint64_t v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          uint64_t v9 = *(size_t **)(*a2 + 8 * v7);
          if (v9 && v9 + 1 != 0) {
            break;
          }
          *(void *)(*(void *)this + 8 * v7++) = v9;
          if (v5 == v7) {
            return this;
          }
        }
        int v12 = v9 + 1;
        size_t v11 = *v9;
        buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
        unint64_t v14 = buffer;
        uint64_t v15 = (char *)(buffer + 5);
        if (v11) {
          memcpy(buffer + 5, v9 + 5, v11);
        }
        v15[v11] = 0;
        *unint64_t v14 = v11;
        BOOL v16 = v14 + 1;
        size_t v17 = v9[4];
        if (v17)
        {
          if ((size_t *)v17 == v12)
          {
            v14[4] = (size_t)v16;
            (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
          }
          else
          {
            v14[4] = (*(uint64_t (**)(size_t, void *))(*(void *)v17 + 16))(v17, v16);
          }
        }
        else
        {
          v14[4] = 0;
        }
        *(void *)(*(void *)this + 8 * v7) = v14;
        *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::__on_zero_shared(uint64_t a1)
{
}

void mlir::FrozenRewritePatternSet::Impl::~Impl(mlir::FrozenRewritePatternSet::Impl *this)
{
  unsigned int v2 = (mlir::detail::PDLByteCode *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCode::~PDLByteCode(v2);
    MEMORY[0x21667D3C0]();
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = (void *)*((void *)this + 7);
    uint64_t v5 = (void *)*((void *)this + 6);
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v3;
    operator delete(v5);
  }
  uint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = (void *)*((void *)this + 4);
    size_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      while (v9 != v8);
      size_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  uint64_t v13 = *((unsigned int *)this + 4);
  unint64_t v14 = *(llvm **)this;
  if (v13)
  {
    uint64_t v15 = (void *)((char *)v14 + 16);
    uint64_t v16 = 32 * v13;
    do
    {
      if ((*(v15 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        size_t v17 = (void *)*(v15 - 1);
        if (v17)
        {
          *uint64_t v15 = v17;
          operator delete(v17);
        }
      }
      v15 += 4;
      v16 -= 32;
    }
    while (v16);
    unint64_t v14 = *(llvm **)this;
    uint64_t v18 = (void *)(32 * *((unsigned int *)this + 4));
  }
  else
  {
    uint64_t v18 = 0;
  }
  llvm::deallocate_buffer(v14, v18);
}

uint64_t sub_211827674()
{
  return v0;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  size_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      unint64_t v12 = (v11 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v12 < 3) {
        goto LABEL_10;
      }
      unint64_t v13 = v12 + 1;
      size_t v10 = &result[v13 & 0x1FFFFFFFFFFFFFFCLL];
      unint64_t v14 = result + 2;
      uint64_t v15 = v13 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v14 - 2) = xmmword_211EF0A40;
        *(v14 - 1) = xmmword_211EF0A40;
        *unint64_t v14 = xmmword_211EF0A40;
        v14[1] = xmmword_211EF0A40;
        v14 += 4;
        v15 -= 4;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        uint64_t v16 = &result[v11];
        do
          *v10++ = xmmword_211EF0A40;
        while (v10 != v16);
      }
    }
    size_t v17 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v18 = 16 * v3;
      uint64_t v19 = v4;
      do
      {
        if (*(void *)v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v19, &v26);
          *uint64_t v26 = *(_OWORD *)v19;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v19 = (llvm *)((char *)v19 + 16);
        v18 -= 16;
      }
      while (v18);
    }
    llvm::deallocate_buffer(v4, v17);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    unint64_t v21 = (v20 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v21 < 3) {
      goto LABEL_23;
    }
    unint64_t v22 = v21 + 1;
    size_t v10 = &result[v22 & 0x1FFFFFFFFFFFFFFCLL];
    int v23 = result + 2;
    uint64_t v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v23 - 2) = xmmword_211EF0A40;
      *(v23 - 1) = xmmword_211EF0A40;
      *int v23 = xmmword_211EF0A40;
      v23[1] = xmmword_211EF0A40;
      v23 += 4;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      int v25 = &result[v20];
      do
        *v10++ = xmmword_211EF0A40;
      while (v10 != v25);
    }
  }
  return result;
}

void *llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  size_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      size_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      unint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        void *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      uint64_t v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          uint64_t v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          unint64_t v22 = (void *)(*(void *)a1 + 32 * v25);
          uint64_t v26 = *v22;
          if (v23 != *v22)
          {
            int v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                int v27 = v22;
              }
              int v30 = v25 + v28++;
              uint64_t v25 = v30 & v24;
              unint64_t v22 = (void *)(*(void *)a1 + 32 * v25);
              uint64_t v26 = *v22;
              if (v23 == *v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              unint64_t v22 = v27;
            }
          }
LABEL_24:
          void *v22 = v23;
          v22[1] = 0;
          v22[2] = 0;
          v22[3] = 0;
          *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v16 + 8);
          v22[3] = *((void *)v16 + 3);
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = 0;
          *((void *)v16 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    size_t v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 4;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *uint64_t v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      unint64_t v21 = &result[4 * v17];
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>(unint64_t **a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = **a1;
  uint64_t v4 = *(void **)(a2 + 32);
  unint64_t v5 = &v4[2 * v2];
  do
  {
    unint64_t v6 = v2 >> 1;
    int v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unsigned int v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  return v4 != v5 && *v4 == v3 && v4[1] != 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>(void **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, **a1);
}

void mlir::detail::PDLByteCode::~PDLByteCode(mlir::detail::PDLByteCode *this)
{
  unint64_t v2 = (void *)*((void *)this + 470);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 471);
    uint64_t v4 = (void *)*((void *)this + 470);
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        unsigned int v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)*((void *)this + 470);
    }
    *((void *)this + 471) = v2;
    operator delete(v4);
  }
  unint64_t v9 = (void *)*((void *)this + 467);
  if (v9)
  {
    size_t v10 = (void *)*((void *)this + 468);
    uint64_t v11 = (void *)*((void *)this + 467);
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 4;
      unint64_t v13 = v10 - 4;
      do
      {
        uint64_t v14 = (void *)v13[3];
        if (v13 == v14)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v14)
        {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        v12 -= 4;
        BOOL v7 = v13 == v9;
        v13 -= 4;
      }
      while (!v7);
      uint64_t v11 = (void *)*((void *)this + 467);
    }
    *((void *)this + 468) = v9;
    operator delete(v11);
  }
  uint64_t v15 = (char *)*((void *)this + 49);
  unsigned int v16 = *((_DWORD *)this + 100);
  if (v16)
  {
    uint64_t v17 = 104 * v16;
    do
    {
      uint64_t v18 = &v15[v17];
      uint64_t v19 = *(char **)&v15[v17 - 32];
      if (&v15[v17 - 16] != v19) {
        free(v19);
      }
      uint64_t v20 = (char *)*((void *)v18 - 10);
      if (v18 - 64 != v20) {
        free(v20);
      }
      v17 -= 104;
    }
    while (v17);
    uint64_t v15 = (char *)*((void *)this + 49);
  }
  if (v15 != (char *)this + 408) {
    free(v15);
  }
  unint64_t v21 = (char *)*((void *)this + 30);
  if (v21 != (char *)this + 264) {
    free(v21);
  }
  unint64_t v22 = (char *)*((void *)this + 11);
  if (v22 != (char *)this + 112) {
    free(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 8);
  if (v23)
  {
    *((void *)this + 9) = v23;
    operator delete(v23);
  }
  int v24 = *(char **)this;
  uint64_t v25 = *((unsigned int *)this + 2);
  if (v25)
  {
    uint64_t v26 = &v24[8 * v25];
    do
    {
      int v28 = (char **)*((void *)v26 - 1);
      v26 -= 8;
      int v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28)
      {
        BOOL v29 = *v27;
        uint64_t v30 = *((unsigned int *)v27 + 2);
        if (v30)
        {
          uint64_t v31 = 8 * v30;
          int v32 = v29 - 8;
          do
          {
            uint64_t v33 = *(void *)&v32[v31];
            *(void *)&v32[v31] = 0;
            if (v33) {
              (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
            }
            v31 -= 8;
          }
          while (v31);
          BOOL v29 = *v27;
        }
        if (v29 != (char *)(v27 + 2)) {
          free(v29);
        }
        MEMORY[0x21667D3C0](v27, 0x1080C407559D7D1);
      }
    }
    while (v26 != v24);
    int v24 = *(char **)this;
  }
  if (v24 != (char *)this + 16) {
    free(v24);
  }
}

uint64_t mlir::PatternApplicator::PatternApplicator(uint64_t this, const mlir::FrozenRewritePatternSet *a2)
{
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = a2;
  *(void *)(this + 32) = this + 48;
  *(void *)(this + 40) = 0x100000000;
  *(void *)(this + 56) = 0;
  if (*(void *)(*(void *)a2 + 72)) {
    operator new();
  }
  return this;
}

void mlir::PatternApplicator::~PatternApplicator(mlir::PatternApplicator *this)
{
  unint64_t v2 = (mlir::detail::PDLByteCodeMutableState *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(v2);
    MEMORY[0x21667D3C0]();
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 6);
  unint64_t v5 = (llvm *)*((void *)this + 1);
  if (v4)
  {
    unint64_t v6 = (char *)v5 + 24;
    uint64_t v7 = 40 * v4;
    do
    {
      if ((*((void *)v6 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v8 = (char *)*((void *)v6 - 2);
        if (v6 != v8) {
          free(v8);
        }
      }
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
    unint64_t v5 = (llvm *)*((void *)this + 1);
    uint64_t v9 = 40 * *((unsigned int *)this + 6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  llvm::deallocate_buffer(v5, (void *)v9);
}

uint64_t sub_211828040()
{
  return v0;
}

void mlir::PatternApplicator::applyCostModel(uint64_t **a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  v72[0] = a2;
  v72[1] = a3;
  uint64_t v4 = *(void *)(**a1 + 72);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v4 + 400);
    if (v5)
    {
      unsigned int v8 = 0;
      uint64_t v9 = *(void *)(v4 + 392);
      uint64_t v10 = 104 * v5;
      do
      {
        uint64_t v11 = (uint64_t)a1[7];
        __int16 v12 = a2(a3, v9);
        mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(v11, v8++, v12);
        v9 += 104;
        v10 -= 104;
      }
      while (v10);
    }
  }
  int v13 = *((_DWORD *)a1 + 4);
  if (!v13 && !*((_DWORD *)a1 + 5))
  {
LABEL_10:
    uint64_t v15 = **a1;
    if (!*(_DWORD *)(v15 + 8)) {
      goto LABEL_85;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *((unsigned int *)a1 + 6);
  if (v14 > 4 * v13 && v14 >= 0x41)
  {
    llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear((uint64_t)(a1 + 1));
    goto LABEL_10;
  }
  if (v14)
  {
    uint64_t v16 = (uint64_t)(a1[1] + 3);
    for (uint64_t i = 40 * v14; i; i -= 40)
    {
      uint64_t v18 = *(void *)(v16 - 24);
      if (v18 != -8192)
      {
        if (v18 == -4096) {
          goto LABEL_15;
        }
        uint64_t v19 = *(void **)(v16 - 16);
        if ((void *)v16 != v19) {
          free(v19);
        }
      }
      *(void *)(v16 - 24) = -4096;
LABEL_15:
      v16 += 40;
    }
  }
  a1[2] = 0;
  uint64_t v15 = **a1;
  if (!*(_DWORD *)(v15 + 8)) {
    goto LABEL_85;
  }
LABEL_21:
  uint64_t v20 = *(unsigned int *)(v15 + 16);
  if (v20)
  {
    uint64_t v21 = 32 * v20;
    unint64_t v22 = *(uint64_t **)v15;
    while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v22 += 4;
      v21 -= 32;
      if (!v21) {
        goto LABEL_85;
      }
    }
  }
  else
  {
    unint64_t v22 = *(uint64_t **)v15;
  }
  uint64_t v23 = *(void *)v15 + 32 * v20;
  if (v22 == (uint64_t *)v23) {
    goto LABEL_85;
  }
LABEL_28:
  int v24 = (uint64_t *)v22[1];
  uint64_t v25 = v22[2];
  while (v24 != (uint64_t *)v25)
  {
    uint64_t v30 = *v24;
    if (*(__int16 *)(*v24 + 20) == -1) {
      goto LABEL_33;
    }
    uint64_t v31 = a1[1];
    uint64_t v32 = *((unsigned int *)a1 + 6);
    if (!v32) {
      goto LABEL_54;
    }
    unsigned int v26 = ((*v22 >> 4) ^ (*v22 >> 9)) & (v32 - 1);
    int v27 = &v31[5 * v26];
    uint64_t v28 = *v27;
    if (*v22 != *v27)
    {
      BOOL v34 = 0;
      int v35 = 1;
      while (v28 != -4096)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v28 == -8192;
        }
        if (v36) {
          BOOL v34 = v27;
        }
        unsigned int v37 = v26 + v35++;
        unsigned int v26 = v37 & (v32 - 1);
        int v27 = &v31[5 * v26];
        uint64_t v28 = *v27;
        if (*v22 == *v27) {
          goto LABEL_30;
        }
      }
      if (v34) {
        int v27 = v34;
      }
      int v38 = *((_DWORD *)a1 + 4);
      if (4 * v38 + 4 >= (3 * v32))
      {
LABEL_54:
        int v39 = 2 * v32;
        goto LABEL_56;
      }
      if ((int)v32 + ~v38 - *((_DWORD *)a1 + 5) <= v32 >> 3)
      {
        int v39 = *((_DWORD *)a1 + 6);
LABEL_56:
        unint64_t v40 = (v39 - 1) | ((unint64_t)(v39 - 1) >> 1);
        unint64_t v41 = v40 | (v40 >> 2) | ((v40 | (v40 >> 2)) >> 4);
        int v42 = ((v41 | (v41 >> 8)) >> 16) | v41 | (v41 >> 8);
        if ((v42 + 1) > 0x40) {
          unsigned int v43 = v42 + 1;
        }
        else {
          unsigned int v43 = 64;
        }
        *((_DWORD *)a1 + 6) = v43;
        buffer = (uint64_t *)llvm::allocate_buffer(40 * v43, (std::align_val_t)8uLL);
        a1[1] = buffer;
        if (v31)
        {
          uint64_t v45 = 5 * v32;
          llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets((uint64_t)(a1 + 1), v31, &v31[v45]);
          llvm::deallocate_buffer((llvm *)v31, (void *)(v45 * 8));
        }
        a1[2] = 0;
        uint64_t v46 = *((unsigned int *)a1 + 6);
        unint64_t v47 = 40 * v46 - 40;
        long long v48 = buffer;
        if (v47 < 0x28) {
          goto LABEL_109;
        }
        unint64_t v49 = v47 / 0x28 + 1;
        long long v48 = &buffer[5 * (v49 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v50 = v49 & 0xFFFFFFFFFFFFFFELL;
        int v51 = buffer;
        do
        {
          *int v51 = -4096;
          v51[5] = -4096;
          v51 += 10;
          v50 -= 2;
        }
        while (v50);
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_109:
          do
          {
            *long long v48 = -4096;
            v48 += 5;
          }
          while (v48 != &buffer[5 * v46]);
        }
        uint64_t v52 = *v22;
        int v53 = v46 - 1;
        unsigned int v54 = ((*v22 >> 4) ^ (*v22 >> 9)) & v53;
        int v27 = &buffer[5 * v54];
        uint64_t v55 = *v27;
        if (*v22 != *v27)
        {
          BOOL v56 = 0;
          int v57 = 1;
          while (v55 != -4096)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v55 == -8192;
            }
            if (v58) {
              BOOL v56 = v27;
            }
            unsigned int v59 = v54 + v57++;
            unsigned int v54 = v59 & v53;
            int v27 = &buffer[5 * v54];
            uint64_t v55 = *v27;
            if (v52 == *v27) {
              goto LABEL_67;
            }
          }
          if (v56) {
            int v27 = v56;
          }
          goto LABEL_39;
        }
LABEL_67:
        ++*((_DWORD *)a1 + 4);
        if (v52 != -4096) {
LABEL_40:
        }
          --*((_DWORD *)a1 + 5);
      }
      else
      {
LABEL_39:
        uint64_t v33 = *v27;
        ++*((_DWORD *)a1 + 4);
        if (v33 != -4096) {
          goto LABEL_40;
        }
      }
      *int v27 = *v22;
      v27[1] = (uint64_t)(v27 + 3);
      v27[2] = 0x200000000;
    }
LABEL_30:
    unint64_t v29 = *((unsigned int *)v27 + 4);
    if (v29 >= *((unsigned int *)v27 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 1), v27 + 3, v29 + 1, 8);
      unint64_t v29 = *((unsigned int *)v27 + 4);
    }
    *(void *)(v27[1] + 8 * v29) = v30;
    ++*((_DWORD *)v27 + 4);
LABEL_33:
    ++v24;
  }
  while (1)
  {
    v22 += 4;
    if (v22 == (uint64_t *)v23) {
      break;
    }
    if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v22 != (uint64_t *)v23) {
        goto LABEL_28;
      }
      break;
    }
  }
  uint64_t v15 = **a1;
LABEL_85:
  uint64_t v60 = (uint64_t)(a1 + 4);
  *((_DWORD *)a1 + 10) = 0;
  uint64_t v61 = *(uint64_t **)(v15 + 48);
  uint64_t v62 = *(uint64_t **)(v15 + 56);
  if (v61 != v62)
  {
    unsigned int v63 = 0;
    do
    {
      uint64_t v64 = *v61;
      if (*(__int16 *)(*v61 + 20) != -1)
      {
        if (v63 >= *((_DWORD *)a1 + 11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 4), a1 + 6, v63 + 1, 8);
          unsigned int v63 = *((_DWORD *)a1 + 10);
        }
        a1[4][v63] = v64;
        unsigned int v63 = *((_DWORD *)a1 + 10) + 1;
        *((_DWORD *)a1 + 10) = v63;
      }
      ++v61;
    }
    while (v61 != v62);
  }
  uint64_t v73 = 1;
  long long v74 = (llvm *)-4096;
  uint64_t v76 = -4096;
  uint64_t v77 = -4096;
  uint64_t v78 = -4096;
  uint64_t v71 = &v73;
  v70[0] = v72;
  v70[1] = &v73;
  v70[2] = &v71;
  if (*((_DWORD *)a1 + 4))
  {
    uint64_t v65 = a1[1];
    uint64_t v66 = *((unsigned int *)a1 + 6);
    if (v66)
    {
      uint64_t v67 = 40 * v66;
      uint64_t v68 = a1[1];
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 5;
        v67 -= 40;
        if (!v67) {
          goto LABEL_97;
        }
      }
    }
    else
    {
      uint64_t v68 = a1[1];
    }
    uint64_t v69 = &v65[5 * v66];
LABEL_102:
    if (v68 != v69)
    {
      mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, (uint64_t)(v68 + 1));
      while (1)
      {
        v68 += 5;
        if (v68 == v69) {
          break;
        }
        if ((*v68 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_102;
        }
      }
    }
  }
LABEL_97:
  mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, v60);
  if ((v73 & 1) == 0) {
    llvm::deallocate_buffer(v74, (void *)(16 * v75));
  }
}

void mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    if ((**(unsigned __int16 (***)(void, uint64_t))a1)(*(void *)(*(void *)a1 + 8), **(void **)a2 + 8) == 0xFFFF)*(_DWORD *)(a2 + 8) = 0; {
    return;
    }
  }
  uint64_t v4 = *(int **)(a1 + 8);
  int v5 = *v4;
  if (*v4 > 1 || v4[1])
  {
    if (v5)
    {
      uint64_t v30 = v4 + 2;
      uint64_t v31 = v4 + 18;
      unint64_t v32 = 48;
    }
    else
    {
      unsigned int v6 = (2 * v5) & 0xFFFFFFFC;
      uint64_t v7 = v4[4];
      if (v6 < v7 && v7 >= 0x41)
      {
        llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear((char *)v4);
        goto LABEL_10;
      }
      if (!v7)
      {
LABEL_49:
        *uint64_t v4 = v7;
        v4[1] = 0;
        unsigned int v8 = *(char **)a2;
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v9) {
          goto LABEL_11;
        }
LABEL_50:
        unint64_t v25 = 0;
        unsigned int v54 = **(int ***)(a1 + 16);
        int v24 = v8;
LABEL_51:
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, 0, 0);
        unsigned int v37 = *(_DWORD *)(a2 + 8);
        if (v37) {
          goto LABEL_52;
        }
        return;
      }
      uint64_t v30 = (int *)*((void *)v4 + 1);
      uint64_t v31 = &v30[4 * v7];
      unint64_t v32 = (char *)v31 - (char *)v30 - 16;
      if (v32 < 0x10)
      {
        uint64_t v33 = (int *)*((void *)v4 + 1);
        do
        {
LABEL_47:
          *(void *)uint64_t v33 = -4096;
          v33 += 4;
        }
        while (v33 != v31);
LABEL_48:
        LODWORD(v7) = *v4 & 1;
        goto LABEL_49;
      }
    }
    uint64_t v34 = (v32 >> 4) + 1;
    uint64_t v33 = &v30[4 * (v34 & 0x1FFFFFFFFFFFFFFELL)];
    int v35 = v30 + 4;
    uint64_t v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v35 - 2) = -4096;
      *int v35 = -4096;
      v35 += 4;
      v36 -= 2;
    }
    while (v36);
    if (v34 == (v34 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_10:
  unsigned int v8 = *(char **)a2;
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  if (!v9) {
    goto LABEL_50;
  }
LABEL_11:
  uint64_t v10 = &v8[8 * v9];
  do
  {
    if (*(void *)v8) {
      uint64_t v16 = (int *)(*(void *)v8 + 8);
    }
    else {
      uint64_t v16 = 0;
    }
    unsigned int v54 = v16;
    uint64_t v17 = *(void *)(a1 + 8);
    __int16 v53 = (**(uint64_t (***)(void))a1)(*(void *)(*(void *)a1 + 8));
    uint64_t v18 = v17 + 8;
    if (*(unsigned char *)v17)
    {
      int v11 = 4;
    }
    else
    {
      int v11 = *(_DWORD *)(v17 + 16);
      if (!v11)
      {
        uint64_t v19 = 0;
        goto LABEL_22;
      }
      uint64_t v18 = *(void *)(v17 + 8);
    }
    int v12 = v11 - 1;
    unsigned int v13 = ((v54 >> 4) ^ (v54 >> 9)) & v12;
    uint64_t v14 = (int **)(v18 + 16 * v13);
    uint64_t v15 = *v14;
    if (v54 == *v14) {
      goto LABEL_14;
    }
    uint64_t v20 = 0;
    int v21 = 1;
    while (v15 != (int *)-4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v15 == (int *)-8192;
      }
      if (v22) {
        uint64_t v20 = v14;
      }
      unsigned int v23 = v13 + v21++;
      unsigned int v13 = v23 & v12;
      uint64_t v14 = (int **)(v18 + 16 * v13);
      uint64_t v15 = *v14;
      if (v54 == *v14) {
        goto LABEL_14;
      }
    }
    if (v20) {
      uint64_t v19 = (uint64_t)v20;
    }
    else {
      uint64_t v19 = (uint64_t)v14;
    }
LABEL_22:
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(v17, v19, &v54, &v53);
LABEL_14:
    v8 += 8;
  }
  while (v8 != v10);
  int v24 = *(char **)a2;
  unint64_t v25 = *(unsigned int *)(a2 + 8);
  unsigned int v8 = (char *)(*(void *)a2 + 8 * v25);
  unsigned int v54 = **(int ***)(a1 + 16);
  if (v25 < 0x81) {
    goto LABEL_51;
  }
  unsigned int v26 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  unint64_t v27 = v25;
  while (1)
  {
    uint64_t v28 = (uint64_t *)operator new(8 * v27, v26);
    if (v28) {
      break;
    }
    BOOL v29 = v27 > 1;
    v27 >>= 1;
    if (!v29) {
      goto LABEL_51;
    }
  }
  uint64_t v52 = v28;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, v28, v27);
  operator delete(v52);
  unsigned int v37 = *(_DWORD *)(a2 + 8);
  if (v37)
  {
    while (1)
    {
LABEL_52:
      uint64_t v38 = *(void *)(a1 + 8);
      uint64_t v39 = *(void *)(*(void *)a2 + 8 * v37 - 8);
      unint64_t v40 = (int *)(v39 + 8);
      if (!v39) {
        unint64_t v40 = 0;
      }
      unsigned int v54 = v40;
      uint64_t v41 = v38 + 8;
      if (*(unsigned char *)v38)
      {
        int v42 = 4;
      }
      else
      {
        int v42 = *(_DWORD *)(v38 + 16);
        if (!v42)
        {
          uint64_t v47 = 0;
          goto LABEL_63;
        }
        uint64_t v41 = *(void *)(v38 + 8);
      }
      int v43 = v42 - 1;
      unsigned int v44 = (v42 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      uint64_t v45 = v41 + 16 * v44;
      uint64_t v46 = *(void *)v45;
      if (v40 == *(int **)v45) {
        goto LABEL_59;
      }
      uint64_t v48 = 0;
      int v49 = 1;
      while (v46 != -4096)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v46 == -8192;
        }
        if (v50) {
          uint64_t v48 = v45;
        }
        unsigned int v51 = v44 + v49++;
        unsigned int v44 = v51 & v43;
        uint64_t v45 = v41 + 16 * (v51 & v43);
        uint64_t v46 = *(void *)v45;
        if (v40 == *(int **)v45) {
          goto LABEL_59;
        }
      }
      if (v48) {
        uint64_t v47 = v48;
      }
      else {
        uint64_t v47 = v45;
      }
LABEL_63:
      uint64_t v45 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(v38, v47, &v54);
LABEL_59:
      if (*(__int16 *)(v45 + 8) == -1)
      {
        unsigned int v37 = *(_DWORD *)(a2 + 8) - 1;
        *(_DWORD *)(a2 + 8) = v37;
        if (v37) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t **mlir::PatternApplicator::walkAllPatterns(uint64_t **result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  int v5 = result;
  uint64_t v6 = **result;
  if (*(_DWORD *)(v6 + 8))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = 32 * v7;
      uint64_t v9 = *(void **)v6;
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 4;
        v8 -= 32;
        if (!v8) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void **)v6;
    }
    uint64_t v10 = *(void *)v6 + 32 * v7;
    if (v9 != (void *)v10)
    {
LABEL_9:
      int v11 = (uint64_t *)v9[1];
      for (i = (uint64_t *)v9[2]; v11 != i; uint64_t result = (uint64_t **)a2(a3, v13 + 8))
        uint64_t v13 = *v11++;
      while (1)
      {
        v9 += 4;
        if (v9 == (void *)v10) {
          break;
        }
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v9 != (void *)v10) {
            goto LABEL_9;
          }
          break;
        }
      }
      uint64_t v6 = **v5;
    }
  }
LABEL_15:
  uint64_t v14 = *(uint64_t **)(v6 + 48);
  uint64_t v15 = *(uint64_t **)(v6 + 56);
  if (v14 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      uint64_t result = (uint64_t **)a2(a3, v16 + 8);
    }
    while (v14 != v15);
    uint64_t v6 = **v5;
  }
  uint64_t v17 = *(void *)(v6 + 72);
  if (v17)
  {
    unsigned int v18 = *(_DWORD *)(v17 + 400);
    if (v18)
    {
      uint64_t v19 = *(void *)(v17 + 392);
      uint64_t v20 = 104 * v18;
      do
      {
        uint64_t result = (uint64_t **)a2(a3, v19);
        v19 += 104;
        v20 -= 104;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t mlir::PatternApplicator::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v58[60] = *MEMORY[0x263EF8340];
  v53[0] = a6;
  v53[1] = a7;
  v52[0] = a9;
  v52[1] = a10;
  uint64_t v51 = a2;
  BOOL v56 = v58;
  uint64_t v57 = 0x400000000;
  uint64_t v14 = *(void *)(**(void **)a1 + 72);
  uint64_t v50 = v14;
  if (v14)
  {
    mlir::detail::PDLByteCode::match(v14, a2, a3, (uint64_t)&v56, *(void *)(a1 + 56));
    a2 = v51;
  }
  uint64_t v15 = *(void *)(a1 + 8);
  unsigned int v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_9:
    uint64_t v19 = (uint64_t *)(v15 + 40 * v16);
    goto LABEL_10;
  }
  uint64_t v17 = *(void *)(a2 + 48);
  unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & (v16 - 1);
  uint64_t v19 = (uint64_t *)(v15 + 40 * v18);
  uint64_t v20 = *v19;
  if (v17 != *v19)
  {
    int v21 = 1;
    while (v20 != -4096)
    {
      unsigned int v22 = v18 + v21++;
      unsigned int v18 = v22 & (v16 - 1);
      uint64_t v19 = (uint64_t *)(v15 + 40 * v18);
      uint64_t v20 = *v19;
      if (v17 == *v19) {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v19 == (uint64_t *)(v15 + 40 * v16))
  {
    unsigned int v24 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v19[1];
    unsigned int v24 = *((_DWORD *)v19 + 4);
  }
  uint64_t v49 = 0;
  unint64_t v25 = *(unsigned int *)(a1 + 40);
  unsigned int v48 = 0;
  unint64_t v26 = v57;
  unsigned __int8 v54 = 0;
  do
  {
    while (1)
    {
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        if (HIDWORD(v49) >= v24)
        {
          uint64_t v29 = v49;
          if (v49 >= v25)
          {
            unsigned int v33 = v48;
            if (v48 >= v26) {
              goto LABEL_45;
            }
            uint64_t v34 = (char *)v56;
            goto LABEL_37;
          }
          uint64_t v30 = *(void *)(a1 + 32);
LABEL_25:
          uint64_t v31 = *(void *)(v30 + 8 * v29);
          goto LABEL_26;
        }
        uint64_t v27 = *(void *)(v23 + 8 * HIDWORD(v49));
        if (v27) {
          uint64_t v28 = v27 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v47 = v28;
        uint64_t v29 = v49;
        if (v49 >= v25)
        {
          unint64_t v32 = (unsigned int *)&v49 + 1;
          unsigned int v33 = v48;
          if (v48 >= v26) {
            goto LABEL_38;
          }
LABEL_32:
          uint64_t v34 = (char *)v56;
          if (v28 && *(unsigned __int16 *)(v28 + 12) >= *((unsigned __int16 *)v56 + 60 * v33 + 56)) {
            goto LABEL_39;
          }
LABEL_37:
          uint64_t v46 = &v34[120 * v33];
          uint64_t v28 = *((void *)v46 + 13);
          uint64_t v47 = v28;
          unint64_t v32 = &v48;
          goto LABEL_38;
        }
        uint64_t v30 = *(void *)(a1 + 32);
        if (!v27) {
          goto LABEL_25;
        }
        uint64_t v31 = *(void *)(v30 + 8 * v49);
        if (*(unsigned __int16 *)(v28 + 12) >= *(unsigned __int16 *)(v31 + 20))
        {
          unint64_t v32 = (unsigned int *)&v49 + 1;
          uint64_t v28 = v27 + 8;
          unsigned int v33 = v48;
          if (v48 < v26) {
            goto LABEL_32;
          }
          goto LABEL_38;
        }
LABEL_26:
        if (v31) {
          uint64_t v28 = v31 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v47 = v28;
        unint64_t v32 = (unsigned int *)&v49;
        unsigned int v33 = v48;
        if (v48 < v26) {
          goto LABEL_32;
        }
LABEL_38:
        if (!v28) {
          goto LABEL_45;
        }
LABEL_39:
        ++*v32;
      }
      while (a4 && !a4(a5));
      char v45 = 0;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v51 + 24));
      v44[0] = a3;
      v44[1] = (uint64_t)&v51;
      v44[2] = (uint64_t)&v46;
      v44[3] = (uint64_t)&v54;
      v44[4] = (uint64_t)&v50;
      v44[5] = a1;
      v44[6] = (uint64_t)&v47;
      v44[7] = (uint64_t)v52;
      v44[8] = (uint64_t)&v45;
      v44[9] = (uint64_t)v53;
      unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFF9;
      uint64_t v36 = v47;
      if (mlir::MLIRContext::hasActionHandler(Context)) {
        break;
      }
      llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(v44);
      if (v45) {
        goto LABEL_45;
      }
    }
    mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>((uint64_t *)Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>, (uint64_t)v44, (uint64_t)&v55, 1, v36);
  }
  while (!v45);
LABEL_45:
  unsigned int v37 = *(void **)(a1 + 56);
  if (v37) {
    mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(v37);
  }
  uint64_t v38 = (char *)v56;
  if (v57)
  {
    uint64_t v39 = 120 * v57;
    do
    {
      unint64_t v40 = *(char **)&v38[v39 - 32];
      if (&v38[v39 - 16] != v40) {
        free(v40);
      }
      uint64_t v41 = *(char **)&v38[v39 - 48];
      if (&v38[v39 - 32] != v41) {
        free(v41);
      }
      int v42 = *(char **)&v38[v39 - 112];
      if (&v38[v39 - 96] != v42) {
        free(v42);
      }
      v39 -= 120;
    }
    while (v39);
    uint64_t v38 = (char *)v56;
  }
  if (v38 != (char *)v58) {
    free(v38);
  }
  return v54;
}

char *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear(char *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    unsigned int v4 = 1 << (33 - v3);
  }
  else {
    unsigned int v4 = 64;
  }
  if (v2 >= 2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_DWORD *)result &= 1u;
    *((_DWORD *)result + 1) = 0;
    uint64_t v6 = result + 8;
    uint64_t v7 = result + 72;
    unint64_t v8 = 48;
    goto LABEL_15;
  }
  if (v2)
  {
    if (v5 <= 4)
    {
      *(void *)uint64_t result = 1;
    }
    else
    {
      *(_DWORD *)result &= ~1u;
      uint64_t result = (char *)llvm::allocate_buffer(16 * v5, (std::align_val_t)8uLL);
      *((void *)v1 + 1) = result;
      *((void *)v1 + 2) = v5;
      int v14 = *(_DWORD *)v1;
      *(void *)uint64_t v1 = *(_DWORD *)v1 & 1;
      if ((v14 & 1) == 0)
      {
        uint64_t v15 = &result[16 * v5];
        unint64_t v16 = 16 * v5 - 16;
        if (v16 < 0x10)
        {
          unsigned int v18 = result;
          goto LABEL_31;
        }
LABEL_24:
        uint64_t v17 = (v16 >> 4) + 1;
        unsigned int v18 = &result[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        uint64_t v19 = result + 16;
        uint64_t v20 = v17 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v19 - 2) = -4096;
          *uint64_t v19 = -4096;
          v19 += 4;
          v20 -= 2;
        }
        while (v20);
        if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL)) {
          return result;
        }
        do
        {
LABEL_31:
          *(void *)unsigned int v18 = -4096;
          v18 += 16;
        }
        while (v18 != v15);
        return result;
      }
    }
    uint64_t result = v1 + 8;
    uint64_t v15 = v1 + 72;
    unint64_t v16 = 48;
    goto LABEL_24;
  }
  uint64_t v10 = *((unsigned int *)result + 4);
  if (v5 != v10) {
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(16 * v10));
  }
  *(void *)uint64_t result = 0;
  if (!v5) {
    return result;
  }
  uint64_t v6 = (char *)*((void *)result + 1);
  uint64_t v7 = &v6[16 * v5];
  unint64_t v8 = 16 * v5 - 16;
  if (v8 < 0x10)
  {
    uint64_t v9 = (char *)*((void *)result + 1);
    do
    {
LABEL_18:
      *(void *)uint64_t v9 = -4096;
      v9 += 16;
    }
    while (v9 != v7);
    return result;
  }
LABEL_15:
  uint64_t v11 = (v8 >> 4) + 1;
  uint64_t v9 = &v6[16 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  int v12 = v6 + 16;
  uint64_t v13 = v11 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v12 - 2) = -4096;
    *int v12 = -4096;
    v12 += 4;
    v13 -= 2;
  }
  while (v13);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_18;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(uint64_t a1, uint64_t a2, void *a3, _WORD *a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v10);
  uint64_t v13 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v14 = 4;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = v13 + 16 * v16;
  uint64_t v17 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = v13 + 16 * (v21 & v15);
      uint64_t v17 = *(void *)a2;
      if (*a3 == *(void *)a2) {
        goto LABEL_7;
      }
    }
    if (v18) {
      a2 = v18;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*(void *)a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)a2 = *a3;
  *(_WORD *)(a2 + 8) = *a4;
  return a2;
}

int *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(uint64_t a1, unsigned int a2)
{
  v18[6] = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    int v15 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v15[(void)v6]);
    llvm::deallocate_buffer((llvm *)v6, v15);
  }
  int v8 = &v16;
  if ((*(void *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 8);
    __int16 v17 = *(_WORD *)(a1 + 16);
    int v8 = v18;
    uint64_t v9 = *(void *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  *int v8 = v9;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 32);
  v8 += 2;
  uint64_t v10 = *(void *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
LABEL_22:
    *int v8 = v11;
    *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 64);
    v8 += 2;
    if (a2 < 5) {
      return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
    }
    goto LABEL_13;
  }
LABEL_21:
  *int v8 = v10;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 48);
  v8 += 2;
  uint64_t v11 = *(void *)(a1 + 56);
  if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    goto LABEL_22;
  }
LABEL_12:
  if (a2 >= 5)
  {
LABEL_13:
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 18;
    int v5 = result + 2;
    unint64_t v7 = 48;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_11;
    }
    int v5 = (int *)*((void *)result + 1);
    uint64_t v6 = &v5[4 * v4];
    unint64_t v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      uint64_t v9 = (int *)*((void *)result + 1);
      do
      {
LABEL_10:
        *(void *)uint64_t v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  uint64_t v8 = (v7 >> 4) + 1;
  uint64_t v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v10 = v5 + 4;
  uint64_t v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    void *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v13 = 4;
        uint64_t v12 = result + 2;
      }
      else
      {
        uint64_t v12 = (int *)*((void *)result + 1);
        int v13 = result[4];
      }
      int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v16 = (uint64_t *)&v12[4 * v15];
      uint64_t v17 = *v16;
      if (v18 != *v16)
      {
        int v19 = 0;
        int v20 = 1;
        while (v17 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v17 == -8192;
          }
          if (v21) {
            int v19 = v16;
          }
          unsigned int v22 = v15 + v20++;
          unsigned int v15 = v22 & v14;
          uint64_t v16 = (uint64_t *)&v12[4 * (v22 & v14)];
          uint64_t v17 = *v16;
          if (v18 == *v16) {
            goto LABEL_15;
          }
        }
        if (v19) {
          uint64_t v16 = v19;
        }
      }
LABEL_15:
      *uint64_t v16 = v18;
      *((_WORD *)v16 + 4) = *((_WORD *)a2 + 4);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    if (v9) {
      uint64_t v10 = v9 + 8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(void *)a1) {
      uint64_t v11 = *(void *)a1 + 8;
    }
    else {
      uint64_t v11 = 0;
    }
    if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v10, v11))
    {
      uint64_t v12 = *(void *)v8;
      *(void *)uint64_t v8 = *((void *)a2 - 1);
      *((void *)a2 - 1) = v12;
    }
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return;
    }
    int v14 = a1 + 8;
    if (a1 + 8 == a2) {
      return;
    }
    unsigned int v15 = a1;
LABEL_19:
    uint64_t v17 = v14;
    uint64_t v19 = *(void *)v15;
    uint64_t v18 = *((void *)v15 + 1);
    if (v18) {
      uint64_t v20 = v18 + 8;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19) {
      uint64_t v21 = v19 + 8;
    }
    else {
      uint64_t v21 = 0;
    }
    if (!mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v20, v21))goto LABEL_18; {
    uint64_t v22 = *(void *)v17;
    }
    if (*(void *)v17) {
      uint64_t v23 = *(void *)v17 + 8;
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = (v23 >> 4) ^ (v23 >> 9);
    uint64_t v16 = v17;
    while (1)
    {
      *(void *)uint64_t v16 = *(void *)v15;
      if (v15 == v8)
      {
        uint64_t v16 = v8;
LABEL_17:
        *(void *)uint64_t v16 = v22;
LABEL_18:
        int v14 = v17 + 8;
        unsigned int v15 = v17;
        if (v17 + 8 != a2) {
          goto LABEL_19;
        }
        return;
      }
      uint64_t v16 = v15;
      uint64_t v31 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v32 = v31 + 8;
      if (v31) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v90 = v33;
      uint64_t v91 = v23;
      uint64_t v34 = *a3;
      uint64_t v36 = (uint64_t)(*a3 + 2);
      int v35 = **a3;
      if (v35)
      {
        int v37 = 4;
      }
      else
      {
        int v37 = v34[4];
        if (!v37)
        {
          uint64_t v42 = 0;
          goto LABEL_46;
        }
        uint64_t v36 = *((void *)v34 + 1);
      }
      int v38 = v37 - 1;
      unsigned int v39 = v38 & v24;
      uint64_t v40 = v36 + 16 * (v38 & v24);
      uint64_t v41 = *(void *)v40;
      if (*(void *)v40 == v23) {
        goto LABEL_42;
      }
      uint64_t v48 = 0;
      int v49 = 1;
      while (v41 != -4096)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v41 == -8192;
        }
        if (v50) {
          uint64_t v48 = v40;
        }
        unsigned int v51 = v39 + v49++;
        unsigned int v39 = v51 & v38;
        uint64_t v40 = v36 + 16 * v39;
        uint64_t v41 = *(void *)v40;
        if (*(void *)v40 == v23) {
          goto LABEL_42;
        }
      }
      if (v48) {
        uint64_t v42 = v48;
      }
      else {
        uint64_t v42 = v40;
      }
LABEL_46:
      uint64_t v40 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v42, &v91);
      uint64_t v34 = *a3;
      int v35 = **a3;
LABEL_42:
      if (v35)
      {
        unint64_t v25 = v34 + 2;
        int v26 = 4;
      }
      else
      {
        int v26 = v34[4];
        if (!v26)
        {
          uint64_t v43 = 0;
LABEL_48:
          uint64_t v29 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v43, &v90);
          goto LABEL_32;
        }
        unint64_t v25 = (int *)*((void *)v34 + 1);
      }
      int v27 = v26 - 1;
      unsigned int v28 = ((v90 >> 4) ^ (v90 >> 9)) & (v26 - 1);
      uint64_t v29 = (uint64_t)&v25[4 * v28];
      uint64_t v30 = *(void *)v29;
      if (v90 != *(void *)v29)
      {
        uint64_t v44 = 0;
        int v45 = 1;
        while (v30 != -4096)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v30 == -8192;
          }
          if (v46) {
            uint64_t v44 = v29;
          }
          unsigned int v47 = v28 + v45++;
          unsigned int v28 = v47 & v27;
          uint64_t v29 = (uint64_t)&v25[4 * (v47 & v27)];
          uint64_t v30 = *(void *)v29;
          if (v90 == *(void *)v29) {
            goto LABEL_32;
          }
        }
        if (v44) {
          uint64_t v43 = v44;
        }
        else {
          uint64_t v43 = v29;
        }
        goto LABEL_48;
      }
LABEL_32:
      if (*(unsigned __int16 *)(v29 + 8) >= *(unsigned __int16 *)(v40 + 8)) {
        goto LABEL_17;
      }
    }
  }
  unint64_t v54 = a4 >> 1;
  unint64_t v55 = &a1[8 * (a4 >> 1)];
  unint64_t v56 = a4 >> 1;
  if ((uint64_t)a4 <= a6)
  {
    std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, a5);
    uint64_t v57 = &a5[v54];
    std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v57);
    BOOL v58 = v8;
    unsigned int v59 = v57;
    uint64_t v60 = a5;
    uint64_t v61 = &a5[a4];
    do
    {
      if (v59 == v61)
      {
        if (v60 == v57) {
          return;
        }
        unint64_t v80 = (char *)&a5[v54] - (char *)v60 - 8;
        if (v80 >= 0x38 && (unint64_t)(v58 - (char *)v60) >= 0x20)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (v80 >> 3) + 1;
          uint64_t v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          int v81 = &v8[v86 * 8];
          BOOL v82 = &v60[v86];
          uint64_t v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v88 = &v8[v84 * 8];
            long long v89 = *(_OWORD *)&v60[v84 + 2];
            *(_OWORD *)uint64_t v88 = *(_OWORD *)&v60[v84];
            *((_OWORD *)v88 + 1) = v89;
            v84 += 4;
            v87 -= 4;
          }
          while (v87);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
            return;
          }
        }
        else
        {
          int v81 = v8;
          BOOL v82 = v60;
        }
        do
        {
          uint64_t v83 = *v82++;
          *(void *)int v81 = v83;
          v81 += 8;
        }
        while (v82 != v57);
        return;
      }
      uint64_t v62 = v59;
      uint64_t v63 = *v59;
      if (v63) {
        uint64_t v64 = v63 + 8;
      }
      else {
        uint64_t v64 = 0;
      }
      if (*v60) {
        uint64_t v65 = *v60 + 8;
      }
      else {
        uint64_t v65 = 0;
      }
      BOOL v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
      if (v66) {
        uint64_t v67 = v62;
      }
      else {
        uint64_t v67 = v60;
      }
      v60 += !v66;
      unsigned int v59 = &v62[v66];
      *(void *)uint64_t v8 = *v67;
      v8 += 8;
      v58 += 8;
    }
    while (v60 != v57);
    if (v59 != v61)
    {
      uint64_t v68 = -8;
      if (!v66) {
        uint64_t v68 = 0;
      }
      unint64_t v69 = (char *)&a5[a4] - (char *)v62 + v68 - 8;
      if (v69 < 0x68) {
        goto LABEL_112;
      }
      uint64_t v70 = 1;
      if (!v66) {
        uint64_t v70 = 0;
      }
      if ((unint64_t)(v58 - (char *)&v62[v70]) < 0x20) {
        goto LABEL_112;
      }
      uint64_t v71 = 0;
      uint64_t v72 = (v69 >> 3) + 1;
      uint64_t v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      long long v74 = &v8[v73 * 8];
      unsigned int v75 = &v59[v73];
      uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v77 = &v8[v71 * 8];
        long long v78 = *(_OWORD *)&v59[v71 + 2];
        *(_OWORD *)uint64_t v77 = *(_OWORD *)&v59[v71];
        *((_OWORD *)v77 + 1) = v78;
        v71 += 4;
        v76 -= 4;
      }
      while (v76);
      uint64_t v8 = v74;
      unsigned int v59 = v75;
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          uint64_t v79 = *v59++;
          *(void *)uint64_t v8 = v79;
          v8 += 8;
        }
        while (v59 != v61);
      }
    }
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>((uint64_t)v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
  }
}

BOOL mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = *a1;
  uint64_t v6 = v4 + 2;
  int v5 = *v4;
  if (*v4)
  {
    int v7 = 4;
  }
  else
  {
    int v7 = v4[4];
    if (!v7)
    {
      uint64_t v19 = 0;
      goto LABEL_13;
    }
    uint64_t v6 = (_DWORD *)*((void *)v4 + 1);
  }
  int v8 = v7 - 1;
  unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (uint64_t)&v6[4 * v9];
  uint64_t v11 = *(void *)v10;
  if (*(void *)v10 == a2) {
    goto LABEL_6;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v11 != -4096)
  {
    if (v21) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v11 == -8192;
    }
    if (v23) {
      uint64_t v21 = v10;
    }
    unsigned int v24 = v9 + v22++;
    unsigned int v9 = v24 & v8;
    uint64_t v10 = (uint64_t)&v6[4 * v9];
    uint64_t v11 = *(void *)v10;
    if (*(void *)v10 == a2) {
      goto LABEL_6;
    }
  }
  if (v21) {
    uint64_t v19 = v21;
  }
  else {
    uint64_t v19 = v10;
  }
LABEL_13:
  uint64_t v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v19, &v30);
  uint64_t v4 = *a1;
  int v5 = **a1;
LABEL_6:
  if (v5)
  {
    int v13 = v4 + 2;
    int v12 = 4;
  }
  else
  {
    int v12 = v4[4];
    if (!v12)
    {
      uint64_t v20 = 0;
LABEL_15:
      uint64_t v16 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v20, &v29);
      return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
    }
    int v13 = (_DWORD *)*((void *)v4 + 1);
  }
  int v14 = v12 - 1;
  unsigned int v15 = ((v29 >> 4) ^ (v29 >> 9)) & (v12 - 1);
  uint64_t v16 = (uint64_t)&v13[4 * v15];
  uint64_t v17 = *(void *)v16;
  if (v29 != *(void *)v16)
  {
    uint64_t v25 = 0;
    int v26 = 1;
    while (v17 != -4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v17 == -8192;
      }
      if (v27) {
        uint64_t v25 = v16;
      }
      unsigned int v28 = v15 + v26++;
      unsigned int v15 = v28 & v14;
      uint64_t v16 = (uint64_t)&v13[4 * (v28 & v14)];
      uint64_t v17 = *(void *)v16;
      if (v29 == *(void *)v16) {
        return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
      }
    }
    if (v25) {
      uint64_t v20 = v25;
    }
    else {
      uint64_t v20 = v16;
    }
    goto LABEL_15;
  }
  return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    int v5 = a5;
    int v7 = a1;
    if (a4 == 1)
    {
LABEL_15:
      uint64_t *v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v11 = a2 - 8;
      uint64_t v10 = *((void *)a2 - 1);
      if (v10) {
        uint64_t v12 = v10 + 8;
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(void *)a1) {
        uint64_t v13 = *(void *)a1 + 8;
      }
      else {
        uint64_t v13 = 0;
      }
      BOOL v14 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v12, v13);
      if (v14) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v7;
      }
      *v5++ = *(void *)v16;
      if (!v14) {
        int v7 = v11;
      }
      goto LABEL_15;
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v17 = a1 + 8;
      *a5 = *(void *)a1;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v18 = a5;
      while (1)
      {
        uint64_t v21 = v18;
        uint64_t v23 = *v18++;
        uint64_t v22 = v23;
        uint64_t v24 = *(void *)v17 ? *(void *)v17 + 8 : 0;
        uint64_t v25 = v22 ? v22 + 8 : 0;
        BOOL v26 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v24, v25);
        uint64_t v19 = v18;
        if (v26)
        {
          v21[1] = *v21;
          uint64_t v19 = v5;
          if (v21 != v5) {
            break;
          }
        }
LABEL_22:
        uint64_t v20 = *(void *)v17;
        v17 += 8;
        *uint64_t v19 = v20;
        if (v17 == a2) {
          return result;
        }
      }
      BOOL v27 = v21;
      while (1)
      {
        uint64_t v28 = *(void *)v17 + 8;
        if (!*(void *)v17) {
          uint64_t v28 = 0;
        }
        uint64_t v29 = *--v27;
        uint64_t v30 = v29 + 8;
        if (v29) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v90 = v31;
        uint64_t v91 = v28;
        uint64_t v32 = *a3;
        uint64_t v34 = (uint64_t)(*a3 + 2);
        int v33 = **a3;
        if (v33)
        {
          int v35 = 4;
        }
        else
        {
          int v35 = v32[4];
          if (!v35)
          {
            uint64_t v46 = 0;
            goto LABEL_51;
          }
          uint64_t v34 = *((void *)v32 + 1);
        }
        int v36 = v35 - 1;
        unsigned int v37 = v36 & ((v28 >> 4) ^ (v28 >> 9));
        uint64_t v38 = v34 + 16 * v37;
        uint64_t v39 = *(void *)v38;
        if (*(void *)v38 == v28) {
          goto LABEL_42;
        }
        uint64_t v48 = 0;
        int v49 = 1;
        while (v39 != -4096)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v39 == -8192;
          }
          if (v50) {
            uint64_t v48 = v38;
          }
          unsigned int v51 = v37 + v49++;
          unsigned int v37 = v51 & v36;
          uint64_t v38 = v34 + 16 * v37;
          uint64_t v39 = *(void *)v38;
          if (*(void *)v38 == v28) {
            goto LABEL_42;
          }
        }
        if (v48) {
          uint64_t v46 = v48;
        }
        else {
          uint64_t v46 = v38;
        }
LABEL_51:
        uint64_t v38 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v46, &v91);
        uint64_t v32 = *a3;
        int v33 = **a3;
LABEL_42:
        if (v33)
        {
          uint64_t v41 = v32 + 2;
          int v40 = 4;
        }
        else
        {
          int v40 = v32[4];
          if (!v40)
          {
            uint64_t v47 = 0;
LABEL_53:
            uint64_t v44 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v47, &v90);
            goto LABEL_47;
          }
          uint64_t v41 = (int *)*((void *)v32 + 1);
        }
        int v42 = v40 - 1;
        unsigned int v43 = ((v90 >> 4) ^ (v90 >> 9)) & (v40 - 1);
        uint64_t v44 = (uint64_t)&v41[4 * v43];
        uint64_t v45 = *(void *)v44;
        if (v90 != *(void *)v44)
        {
          uint64_t v52 = 0;
          int v53 = 1;
          while (v45 != -4096)
          {
            if (v52) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v45 == -8192;
            }
            if (v54) {
              uint64_t v52 = v44;
            }
            unsigned int v55 = v43 + v53++;
            unsigned int v43 = v55 & v42;
            uint64_t v44 = (uint64_t)&v41[4 * (v55 & v42)];
            uint64_t v45 = *(void *)v44;
            if (v90 == *(void *)v44) {
              goto LABEL_47;
            }
          }
          if (v52) {
            uint64_t v47 = v52;
          }
          else {
            uint64_t v47 = v44;
          }
          goto LABEL_53;
        }
LABEL_47:
        if (*(unsigned __int16 *)(v44 + 8) >= *(unsigned __int16 *)(v38 + 8))
        {
          uint64_t v19 = v21;
          goto LABEL_22;
        }
        uint64_t *v21 = *(v21 - 1);
        uint64_t v21 = v27;
        if (v27 == v5)
        {
          uint64_t v19 = v5;
          goto LABEL_22;
        }
      }
    }
    unint64_t v56 = a4 >> 1;
    uint64_t v57 = 8 * (a4 >> 1);
    BOOL v58 = &a1[v57];
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, &a1[v57], a3, a4 >> 1, a5, a4 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v7[v57], a2, a3, a4 - v56, &v5[(unint64_t)v57 / 8], a4 - v56);
    unsigned int v59 = (char *)v5;
    uint64_t v60 = v7;
    uint64_t v61 = v58;
    do
    {
      if (v61 == a2)
      {
        if (v60 == v58) {
          return result;
        }
        unint64_t v80 = &v7[8 * v56] - v60 - 8;
        if (v80 >= 0x38 && (unint64_t)(v59 - v60) >= 0x20)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (v80 >> 3) + 1;
          uint64_t v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          int v81 = &v5[v86];
          BOOL v82 = &v60[v86 * 8];
          uint64_t v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v88 = &v5[v84];
            __n128 result = *(__n128 *)&v60[v84 * 8];
            long long v89 = *(_OWORD *)&v60[v84 * 8 + 16];
            *(__n128 *)uint64_t v88 = result;
            *((_OWORD *)v88 + 1) = v89;
            v84 += 4;
            v87 -= 4;
          }
          while (v87);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          int v81 = v5;
          BOOL v82 = v60;
        }
        do
        {
          uint64_t v83 = *(void *)v82;
          v82 += 8;
          *v81++ = v83;
        }
        while (v82 != v58);
        return result;
      }
      uint64_t v62 = v61;
      uint64_t v63 = *(void *)v61;
      if (v63) {
        uint64_t v64 = v63 + 8;
      }
      else {
        uint64_t v64 = 0;
      }
      if (*(void *)v60) {
        uint64_t v65 = *(void *)v60 + 8;
      }
      else {
        uint64_t v65 = 0;
      }
      BOOL v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
      if (v66) {
        uint64_t v67 = v62;
      }
      else {
        uint64_t v67 = v60;
      }
      uint64_t v61 = &v62[8 * v66];
      v60 += 8 * !v66;
      *v5++ = *(void *)v67;
      v59 += 8;
    }
    while (v60 != v58);
    if (v61 != a2)
    {
      uint64_t v68 = -8;
      if (!v66) {
        uint64_t v68 = 0;
      }
      unint64_t v69 = a2 - v62 + v68 - 8;
      if (v69 < 0x68) {
        goto LABEL_113;
      }
      uint64_t v70 = 8;
      if (!v66) {
        uint64_t v70 = 0;
      }
      if ((unint64_t)(v59 - v62 - v70) < 0x20) {
        goto LABEL_113;
      }
      uint64_t v71 = 0;
      uint64_t v72 = (v69 >> 3) + 1;
      uint64_t v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      long long v74 = &v5[v73];
      unsigned int v75 = &v61[v73 * 8];
      uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v77 = &v5[v71];
        __n128 result = *(__n128 *)&v61[v71 * 8];
        long long v78 = *(_OWORD *)&v61[v71 * 8 + 16];
        *(__n128 *)uint64_t v77 = result;
        *((_OWORD *)v77 + 1) = v78;
        v71 += 4;
        v76 -= 4;
      }
      while (v76);
      int v5 = v74;
      uint64_t v61 = v75;
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
          uint64_t v79 = *(void *)v61;
          v61 += 8;
          *v5++ = v79;
        }
        while (v61 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(uint64_t result, char *a2, char *a3, int **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  unsigned int v15 = (char *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(void *)a2 ? *(void *)a2 + 8 : 0;
      uint64_t v19 = *(void *)&v15[8 * v17];
      uint64_t v20 = v19 ? v19 + 8 : 0;
      __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v18, v20);
      if (result) {
        break;
      }
      ++v17;
      v16 -= 8;
      if (a5 == v17) {
        return result;
      }
    }
    __n128 result = (uint64_t)&v15[-v16];
    BOOL v133 = a3;
    uint64_t v134 = v10;
    if (a5 - v17 >= v10)
    {
      if (a5 - 1 == v17)
      {
        uint64_t v111 = *(void *)&v15[8 * v17];
        *(void *)&v15[8 * v17] = *(void *)a2;
        *(void *)a2 = v111;
        return result;
      }
      uint64_t v124 = a8;
      uint64_t v33 = (a5 - v17) / 2;
      uint64_t v34 = &v15[8 * v33];
      unsigned int v135 = *a4;
      if (a3 == a2)
      {
        uint64_t v23 = a3;
      }
      else
      {
        long long v127 = &v15[-v16];
        uint64_t v130 = a7;
        unint64_t v35 = (a3 - a2) >> 3;
        uint64_t v23 = a2;
        do
        {
          int v36 = &v23[8 * (v35 >> 1)];
          uint64_t v38 = *(void *)v36;
          unsigned int v37 = v36 + 8;
          uint64_t v39 = *(void *)&v34[8 * v17];
          uint64_t v40 = v38 + 8;
          if (v38) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          if (v39) {
            uint64_t v42 = v39 + 8;
          }
          else {
            uint64_t v42 = 0;
          }
          BOOL v43 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(&v135, v41, v42);
          if (v43) {
            v35 += ~(v35 >> 1);
          }
          else {
            v35 >>= 1;
          }
          if (v43) {
            uint64_t v23 = v37;
          }
        }
        while (v35);
        __n128 result = (uint64_t)v127;
        a7 = v130;
        uint64_t v33 = (a5 - v17) / 2;
      }
      BOOL v26 = &v34[-v16];
      uint64_t v22 = (v23 - a2) >> 3;
      a8 = v124;
      a3 = v23;
      if (v26 != a2)
      {
LABEL_53:
        a3 = v26;
        if (a2 != v23)
        {
          if (v26 + 8 == a2)
          {
            uint64_t v131 = a7;
            uint64_t v125 = a8;
            uint64_t v51 = *(void *)v26;
            int64_t v52 = v23 - a2;
            uint64_t v53 = result;
            BOOL v54 = a2;
            size_t v55 = v23 - a2;
            uint64_t v56 = v33;
            uint64_t v57 = v22;
            memmove(v26, v54, v55);
            uint64_t v22 = v57;
            uint64_t v33 = v56;
            __n128 result = v53;
            a3 = &v26[v52];
            *(void *)&v26[v52] = v51;
            a8 = v125;
            a7 = v131;
          }
          else if (a2 + 8 == v23)
          {
            uint64_t v58 = *((void *)v23 - 1);
            a3 = v26 + 8;
            if (v23 - 8 != v26)
            {
              uint64_t v128 = result;
              uint64_t v132 = *((void *)v23 - 1);
              uint64_t v59 = v33;
              uint64_t v60 = v22;
              memmove(v26 + 8, v26, v23 - 8 - v26);
              __n128 result = v128;
              uint64_t v58 = v132;
              uint64_t v22 = v60;
              uint64_t v33 = v59;
            }
            *(void *)BOOL v26 = v58;
          }
          else
          {
            uint64_t v44 = (a2 - v26) >> 3;
            uint64_t v45 = (v23 - a2) >> 3;
            if (v44 == v45)
            {
              uint64_t v46 = 0;
              do
              {
                uint64_t v47 = *(void *)&v26[v46];
                *(void *)&v26[v46] = *(void *)&a2[v46];
                uint64_t v48 = (uint64_t)&v26[v46 + 8];
                *(void *)&a2[v46] = v47;
                uint64_t v49 = (uint64_t)&a2[v46 + 8];
                v46 += 8;
              }
              while ((char *)v48 != a2 && v49 != (void)v23);
              a3 = a2;
            }
            else
            {
              uint64_t v61 = (v23 - a2) >> 3;
              uint64_t v62 = (a2 - v26) >> 3;
              do
              {
                uint64_t v63 = v62;
                uint64_t v62 = v61;
                uint64_t v61 = v63 % v61;
              }
              while (v61);
              if (v62)
              {
                uint64_t v64 = &v26[8 * v62];
                do
                {
                  uint64_t v66 = *((void *)v64 - 1);
                  v64 -= 8;
                  uint64_t v65 = v66;
                  uint64_t v67 = &v64[8 * v44];
                  uint64_t v68 = v64;
                  do
                  {
                    unint64_t v69 = v68;
                    uint64_t v68 = v67;
                    *(void *)unint64_t v69 = *(void *)v67;
                    uint64_t v70 = (v23 - v67) >> 3;
                    BOOL v71 = __OFSUB__(v44, v70);
                    uint64_t v73 = v44 - v70;
                    char v72 = (v73 < 0) ^ v71;
                    uint64_t v67 = &v26[8 * v73];
                    if (v72) {
                      uint64_t v67 = &v68[8 * v44];
                    }
                  }
                  while (v67 != v64);
                  *(void *)uint64_t v68 = v65;
                }
                while (v64 != v26);
              }
              a3 = &v26[8 * v45];
            }
          }
        }
      }
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v21 = v10;
      }
      else {
        uint64_t v21 = v10 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[8 * (v21 >> 1)];
      if ((char *)result == a2)
      {
        BOOL v26 = a2;
        uint64_t v33 = (uint64_t)&a2[-result] >> 3;
        a3 = &a2[8 * (v21 >> 1)];
      }
      else
      {
        uint64_t v123 = v21 >> 1;
        long long v126 = &v15[-v16];
        uint64_t v129 = a7;
        uint64_t v24 = a8;
        unint64_t v25 = (uint64_t)(a2 - v15 + v16) >> 3;
        BOOL v26 = (char *)result;
        do
        {
          BOOL v27 = &v26[8 * (v25 >> 1)];
          uint64_t v30 = *(void *)v27;
          uint64_t v29 = v27 + 8;
          uint64_t v28 = v30;
          if (*(void *)v23) {
            uint64_t v31 = *(void *)v23 + 8;
          }
          else {
            uint64_t v31 = 0;
          }
          if (v28) {
            uint64_t v32 = v28 + 8;
          }
          else {
            uint64_t v32 = 0;
          }
          if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v31, v32))
          {
            v25 >>= 1;
          }
          else
          {
            BOOL v26 = v29;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        a8 = v24;
        __n128 result = (uint64_t)v126;
        a7 = v129;
        uint64_t v22 = v123;
        uint64_t v33 = (v26 - v126) >> 3;
        a3 = v23;
        if (v26 != a2) {
          goto LABEL_53;
        }
      }
    }
    uint64_t v74 = a5 - v33 - v17;
    uint64_t v75 = v134 - v22;
    if (v33 + v22 >= v134 + a5 - (v33 + v22) - v17)
    {
      uint64_t v77 = (char *)result;
      a5 = v33;
      uint64_t v78 = v74;
      uint64_t v79 = v22;
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a3, v23, v133, a4, v78, v134 - v22, a7, a8);
      unint64_t v80 = v26;
      uint64_t v81 = v79;
      unsigned int v15 = v77;
      a2 = v80;
      uint64_t v10 = v81;
      if (!v81) {
        return result;
      }
    }
    else
    {
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(result, v26, a3, a4, v33, v22, a7, a8);
      uint64_t v76 = a3;
      a3 = v133;
      a5 = v74;
      unsigned int v15 = v76;
      a2 = v23;
      uint64_t v10 = v75;
      if (!v75) {
        return result;
      }
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      unint64_t v98 = a2 - v15 - 8;
      unint64_t v99 = a7;
      BOOL v100 = v15;
      if (v98 < 0x18) {
        goto LABEL_143;
      }
      unint64_t v99 = a7;
      BOOL v100 = v15;
      if ((unint64_t)(a7 - v15) < 0x20) {
        goto LABEL_143;
      }
      uint64_t v101 = (v98 >> 3) + 1;
      uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v99 = &a7[v102];
      BOOL v100 = &v15[v102];
      uint64_t v103 = (long long *)(v15 + 16);
      unint64_t v104 = a7 + 16;
      uint64_t v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v106 = *v103;
        *(v104 - 1) = *(v103 - 1);
        *unint64_t v104 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_143:
        do
        {
          uint64_t v107 = *(void *)v100;
          v100 += 8;
          *(void *)unint64_t v99 = v107;
          v99 += 8;
        }
        while (v100 != a2);
      }
      if (v99 != a7)
      {
        while (a2 != a3)
        {
          if (*(void *)a2) {
            uint64_t v108 = *(void *)a2 + 8;
          }
          else {
            uint64_t v108 = 0;
          }
          if (*(void *)a7) {
            uint64_t v109 = *(void *)a7 + 8;
          }
          else {
            uint64_t v109 = 0;
          }
          __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v108, v109);
          if (result) {
            unsigned int v110 = a2;
          }
          else {
            unsigned int v110 = a7;
          }
          a7 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(void *)unsigned int v15 = *(void *)v110;
          v15 += 8;
          if (a7 == v99) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, a7, v99 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v82 = a3 - a2 - 8;
    uint64_t v83 = a7;
    uint64_t v84 = a2;
    if (v82 < 0x18) {
      goto LABEL_144;
    }
    uint64_t v83 = a7;
    uint64_t v84 = a2;
    if ((unint64_t)(a7 - a2) < 0x20) {
      goto LABEL_144;
    }
    uint64_t v85 = (v82 >> 3) + 1;
    uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v83 = &a7[v86];
    uint64_t v84 = &a2[v86];
    uint64_t v87 = (long long *)(a2 + 16);
    uint64_t v88 = a7 + 16;
    uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v90 = *v87;
      *(v88 - 1) = *(v87 - 1);
      _OWORD *v88 = v90;
      v87 += 2;
      v88 += 2;
      v89 -= 4;
    }
    while (v89);
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_144:
      do
      {
        uint64_t v91 = *(void *)v84;
        v84 += 8;
        *(void *)uint64_t v83 = v91;
        v83 += 8;
      }
      while (v84 != a3);
    }
    if (v83 != a7)
    {
      int v92 = a3;
      while (a2 != v15)
      {
        uint64_t v93 = *((void *)a2 - 1);
        uint64_t v94 = *((void *)v83 - 1);
        if (v94) {
          uint64_t v95 = v94 + 8;
        }
        else {
          uint64_t v95 = 0;
        }
        if (v93) {
          uint64_t v96 = v93 + 8;
        }
        else {
          uint64_t v96 = 0;
        }
        __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v95, v96);
        if (result) {
          unsigned int v97 = a2;
        }
        else {
          unsigned int v97 = v83;
        }
        if (result) {
          a2 -= 8;
        }
        else {
          v83 -= 8;
        }
        *((void *)a3 - 1) = *((void *)v97 - 1);
        a3 -= 8;
        v92 -= 8;
        if (v83 == a7) {
          return result;
        }
      }
      unint64_t v112 = v83 - a7 - 8;
      if (v112 < 0x58 || (unint64_t)(v83 - v92) < 0x20)
      {
        int v113 = v83;
        int v114 = a3;
        goto LABEL_132;
      }
      uint64_t v117 = 0;
      uint64_t v118 = (v112 >> 3) + 1;
      uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      int v113 = &v83[-v119];
      int v114 = &a3[-v119];
      uint64_t v120 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v121 = *(_OWORD *)&v83[v117 - 16];
        unsigned int v122 = &a3[v117];
        *((_OWORD *)v122 - 2) = *(_OWORD *)&v83[v117 - 32];
        *((_OWORD *)v122 - 1) = v121;
        v117 -= 32;
        v120 -= 4;
      }
      while (v120);
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_132:
        uint64_t v115 = v114 - 8;
        do
        {
          uint64_t v116 = *((void *)v113 - 1);
          v113 -= 8;
          *(void *)uint64_t v115 = v116;
          v115 -= 8;
        }
        while (v113 != a7);
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = v11 + 16 * v14;
  uint64_t v15 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        uint64_t v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = v11 + 16 * (v19 & v13);
      uint64_t v15 = *(void *)a2;
      if (*a3 == *(void *)a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(void *)a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)a2 = *a3;
  *(_WORD *)(a2 + 8) = -1;
  return a2;
}

void mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(mlir::detail::PDLByteCodeMutableState *this)
{
  unsigned int v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 16);
    int v6 = (void *)*((void *)this + 15);
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *(void *)(v5 - 16);
        v5 -= 16;
        uint64_t v7 = v8;
        if (v8) {
          MEMORY[0x21667D390](v7, 0x20C8093837F09);
        }
      }
      while (v5 != v4);
      int v6 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v4;
    operator delete(v6);
  }
  int v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *((void *)this + 9);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 10);
    int v12 = (void *)*((void *)this + 9);
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *(void *)(v11 - 16);
        v11 -= 16;
        uint64_t v13 = v14;
        if (v14) {
          MEMORY[0x21667D390](v13, 0x20C8093837F09);
        }
      }
      while (v11 != v10);
      int v12 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v10;
    operator delete(v12);
  }
  uint64_t v15 = (void *)*((void *)this + 6);
  if (v15)
  {
    *((void *)this + 7) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    BOOL v18 = (void *)*((void *)this + 3);
    if (v17 != v16)
    {
      do
      {
        uint64_t v20 = *(void *)(v17 - 16);
        v17 -= 16;
        uint64_t v19 = v20;
        if (v20) {
          MEMORY[0x21667D390](v19, 0x20C8093837F09);
        }
      }
      while (v17 != v16);
      BOOL v18 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v16;
    operator delete(v18);
  }
  uint64_t v21 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v21;
    operator delete(v21);
  }
}

void llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *(void *)a1 + 24;
    uint64_t v5 = 40 * v2;
    do
    {
      if ((*(void *)(v4 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v6 = *(void **)(v4 - 16);
        if ((void *)v4 != v6) {
          free(v6);
        }
      }
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64) {
    int v7 = 64;
  }
  if (v3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 != *(_DWORD *)(a1 + 16)) {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  }
  *(void *)(a1 + 8) = 0;
  if (v8)
  {
    int v9 = *(llvm **)a1;
    unint64_t v10 = 40 * v8 - 40;
    if (v10 < 0x28)
    {
      uint64_t v11 = *(llvm **)a1;
LABEL_20:
      uint64_t v15 = (llvm *)((char *)v9 + 40 * v8);
      do
      {
        *(void *)uint64_t v11 = -4096;
        uint64_t v11 = (llvm *)((char *)v11 + 40);
      }
      while (v11 != v15);
      return;
    }
    unint64_t v12 = v10 / 0x28 + 1;
    uint64_t v11 = (llvm *)((char *)v9 + 40 * (v12 & 0xFFFFFFFFFFFFFFELL));
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFELL;
    uint64_t v14 = *(llvm **)a1;
    do
    {
      *(void *)uint64_t v14 = -4096;
      *((void *)v14 + 5) = -4096;
      uint64_t v14 = (llvm *)((char *)v14 + 80);
      v13 -= 2;
    }
    while (v13);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_20;
    }
  }
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    unint64_t v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      int v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = &v7[5 * v6];
      do
      {
        *int v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x28 + 1;
    int v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v17 = (void *)(*(void *)a1 + 40 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -8192;
            }
            if (v22) {
              uint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 40 * (v23 & v15));
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        *uint64_t v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x200000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3) {
          free(v19);
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v21 = a3;
    BOOL v22 = a1;
    uint64_t v19 = a6;
    uint64_t v20 = a2;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    unsigned int v6 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v17;
    a5 = v18;
    a6 = v19;
    a2 = v20;
    int v9 = v8;
    a3 = v21;
    a1 = v22;
    if (v9)
    {
      unsigned int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ApplyPatternAction]";
      unint64_t v24 = 74;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v24;
      }
      unint64_t v12 = &v23[v11];
      unint64_t v13 = v24 - v11;
      if (v24 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v24 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::ApplyPatternAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      unsigned int v6 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v17;
      a5 = v18;
      a6 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  unint64_t v24 = v6[124];
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  unsigned int v23 = (const char *)&unk_26C3624B8;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v23);
}

void mlir::ApplyPatternAction::~ApplyPatternAction(mlir::ApplyPatternAction *this)
{
}

const char *mlir::tracing::ActionImpl<mlir::ApplyPatternAction>::getTag()
{
  return "apply-pattern";
}

llvm::raw_ostream *mlir::ApplyPatternAction::print(mlir::ApplyPatternAction *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v4)
  {
    unsigned int v6 = (void *)*((void *)v2 + 4);
    if (*((void *)v2 + 3) - (void)v6 <= 0xCuLL)
    {
LABEL_3:
      uint64_t v2 = llvm::raw_ostream::write(v2, "apply-pattern", 0xDuLL);
      uint64_t v7 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v7) > 9) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *uint64_t v4 = 96;
    uint64_t v5 = *((void *)a2 + 3);
    unsigned int v6 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v6;
    if ((unint64_t)(v5 - (void)v6) <= 0xC) {
      goto LABEL_3;
    }
  }
  qmemcpy(v6, "apply-pattern", 13);
  uint64_t v12 = *((void *)v2 + 3);
  uint64_t v7 = *((void *)v2 + 4) + 13;
  *((void *)v2 + 4) = v7;
  if ((unint64_t)(v12 - v7) > 9)
  {
LABEL_4:
    *(_WORD *)(v7 + 8) = 8250;
    *(void *)uint64_t v7 = *(void *)" pattern: ";
    __n128 result = (llvm::raw_ostream *)(*((void *)v2 + 4) + 10);
    *((void *)v2 + 4) = result;
    uint64_t v9 = *((void *)this + 4);
    unint64_t v10 = *(const void **)(v9 + 56);
    size_t v11 = *(void *)(v9 + 64);
    if (v11 <= *((void *)v2 + 3) - (void)result) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v2 = llvm::raw_ostream::write(v2, " pattern: ", 0xAuLL);
  __n128 result = (llvm::raw_ostream *)*((void *)v2 + 4);
  uint64_t v13 = *((void *)this + 4);
  unint64_t v10 = *(const void **)(v13 + 56);
  size_t v11 = *(void *)(v13 + 64);
  if (v11 <= *((void *)v2 + 3) - (void)result)
  {
LABEL_5:
    if (v11)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v11);
      *((void *)v2 + 4) += v11;
    }
    return result;
  }
LABEL_11:

  return llvm::raw_ostream::write(v2, (const char *)v10, v11);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v4 = *a1;
  int v3 = (ZinIrHalH13g **)a1[1];
  uint64_t v5 = *((void *)*v3 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(*v3);
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = *(void *)a1[2];
  if (v7)
  {
    uint64_t result = mlir::detail::PDLByteCode::rewrite(*(void *)a1[4], *a1, v7, *(void *)(v2 + 56));
    *(unsigned char *)a1[3] = result;
    if (!(_BYTE)result) {
      goto LABEL_13;
    }
LABEL_8:
    uint64_t v11 = a1[7];
    if (*(void *)v11)
    {
      uint64_t result = (*(uint64_t (**)(void, void))v11)(*(void *)(v11 + 8), *(void *)a1[6]);
      uint64_t v12 = (unsigned char *)a1[3];
      if (!(_BYTE)result)
      {
        *uint64_t v12 = 0;
        goto LABEL_13;
      }
      if (!*v12) {
        goto LABEL_13;
      }
    }
    *(unsigned char *)a1[8] = 1;
    return result;
  }
  uint64_t v9 = *(void *)a1[6];
  if (v9) {
    uint64_t v10 = v9 - 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 32))(v10, *(void *)a1[1], *a1);
  *(unsigned char *)a1[3] = result;
  if ((_BYTE)result) {
    goto LABEL_8;
  }
LABEL_13:
  uint64_t v13 = a1[9];
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))v13;
  if (*(void *)v13)
  {
    uint64_t v15 = *(void *)a1[6];
    uint64_t v16 = *(void *)(v13 + 8);
    return v14(v16, v15);
  }
  return result;
}

void mlir::scf::SCFDialect::initialize(mlir::scf::SCFDialect *this)
{
}

void mlir::scf::SCFDialect::SCFDialect(mlir::scf::SCFDialect *this, mlir::MLIRContext *a2)
{
  int v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"scf", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id);
  *int v3 = &unk_26C322858;
  uint64_t v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    uint64_t v5 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v5);
  }
  mlir::scf::SCFDialect::initialize(this);
}

void mlir::scf::SCFDialect::~SCFDialect(llvm **this)
{
}

void sub_21182B5C8()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::scf::ConditionOp,mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::ForallOp,mlir::scf::IfOp,mlir::scf::InParallelOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::ReduceOp,mlir::scf::ReduceReturnOp,mlir::scf::WhileOp,mlir::scf::YieldOp>()
{
}

uint64_t mlir::scf::ExecuteRegionOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64)) {
    mlir::OperationState::addRegion(a2);
  }
  return 0;
}

uint64_t mlir::scf::ExecuteRegionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = *((unsigned int *)*this + 9);
  uint64_t v5 = (uint64_t)*this - 16;
  if (!v4) {
    uint64_t v5 = 0;
  }
  v18[0] = v5;
  v18[1] = v4;
  mlir::OperandRange::getTypes(v18, v17);
  if (v17[0] != v17[2] || v17[1] != v17[3]) {
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, v17);
  }
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v8 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v8 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
    uint64_t v9 = *this;
    unint64_t v10 = *((unsigned int *)*this + 11);
    if ((v10 & 0x7FFFFF) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)v7 + 4) = v8 + 1;
    *int v8 = 32;
    uint64_t v9 = *this;
    unint64_t v10 = *((unsigned int *)*this + 11);
    if ((v10 & 0x7FFFFF) != 0)
    {
LABEL_10:
      unint64_t v11 = (((unint64_t)v9 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v9 + 10);
      goto LABEL_13;
    }
  }
  unint64_t v11 = 0;
LABEL_13:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v11, 0, 1, 0);
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v17[0] = mlir::Operation::getAttrDictionary(v12);
    uint64_t v13 = (mlir::ArrayAttr *)v17;
  }
  else
  {
    uint64_t v13 = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v13);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v15, 0, 0);
}

uint64_t mlir::scf::ExecuteRegionOp::verify(mlir::scf::ExecuteRegionOp *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)(((*(void *)this
                  + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                  + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(*(void *)this + 40));
  if ((void *)*v1 == v1)
  {
    v20[0] = (void **)"region needs to have at least one block";
    __int16 v21 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v13 = __p;
      if (__p)
      {
        uint64_t v14 = v28;
        uint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v28 = v13;
        operator delete(v15);
      }
      int v8 = v25;
      if (!v25) {
        goto LABEL_37;
      }
      uint64_t v16 = v26;
      unint64_t v10 = v25;
      if (v26 == v25) {
        goto LABEL_36;
      }
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18) {
          MEMORY[0x21667D390](v17, 0x1000C8077774924);
        }
      }
      while (v16 != v8);
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v2 = v1[1];
    if (v2) {
      uint64_t v3 = v2 - 8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (((*(void *)(v3 + 56) - *(void *)(v3 + 48)) & 0x7FFFFFFF8) == 0) {
      return 1;
    }
    v20[0] = (void **)"region cannot have any arguments";
    __int16 v21 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v28;
        uint64_t v7 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v28 = v5;
        operator delete(v7);
      }
      int v8 = v25;
      if (!v25) {
        goto LABEL_37;
      }
      uint64_t v9 = v26;
      unint64_t v10 = v25;
      if (v26 == v25)
      {
LABEL_36:
        uint64_t v26 = v8;
        operator delete(v10);
LABEL_37:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          MEMORY[0x21667D390](v11, 0x1000C8077774924);
        }
      }
      while (v9 != v8);
LABEL_35:
      unint64_t v10 = v25;
      goto LABEL_36;
    }
  }
  return v4;
}

void mlir::scf::ExecuteRegionOp::getCanonicalizationPatterns()
{
}

void mlir::scf::ConditionOp::getSuccessorRegions(mlir::Operation **a1, void **a2, uint64_t a3, uint64_t a4)
{
  v46[2] = *MEMORY[0x263EF8340];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v42, *a1);
  BOOL v43 = a2;
  uint64_t v44 = a3;
  int v8 = (mlir::Block *)*((void *)*a1 + 2);
  if (v8)
  {
    ParentOp = (unsigned int *)mlir::Block::getParentOp(v8);
    unint64_t v10 = *v43;
    if (*v43) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v41 = 0;
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
    {
LABEL_9:
      unint64_t v13 = (((unint64_t)&ParentOp[4 * ((v12 >> 23) & 1) + 17] + ((v12 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * ParentOp[10];
      uint64_t v14 = v13 + 24;
      if (*(void *)(v13 + 24) != v13 + 24) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    unint64_t v13 = 0;
    uint64_t v14 = 24;
    if (MEMORY[0x18] != 24)
    {
LABEL_10:
      uint64_t v15 = *(void *)(v13 + 32);
      if (v15) {
        uint64_t v16 = v15 - 8;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v16 + 48);
      unint64_t v18 = (*(void *)(v16 + 56) - v17) >> 3;
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_14;
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned int v19 = *(_DWORD *)(a4 + 8);
    if (v19 < *(_DWORD *)(a4 + 12))
    {
LABEL_14:
      uint64_t v20 = (uint64_t *)(*(void *)a4 + 24 * v19);
      *uint64_t v20 = v14;
      mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, v17, v18);
LABEL_15:
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_16;
    }
LABEL_29:
    uint64_t v45 = v14;
    uint64_t v25 = (char *)&v45;
    mlir::ValueRange::ValueRange(v46, v17, v18);
    uint64_t v26 = *(unsigned int *)(a4 + 8);
    unint64_t v27 = *(void *)a4;
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      unint64_t v35 = v26 + 1;
      BOOL v36 = v27 + 24 * v26 > (unint64_t)&v45;
      if (v27 <= (unint64_t)&v45 && v36)
      {
        uint64_t v39 = (char *)&v46[-1] - v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = &v39[*(void *)a4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = (char *)&v45;
      }
    }
    uint64_t v28 = v27 + 24 * *(unsigned int *)(a4 + 8);
    long long v29 = *(_OWORD *)v25;
    *(void *)(v28 + 16) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v28 = v29;
    goto LABEL_15;
  }
  ParentOp = 0;
  unint64_t v10 = *a2;
  if (!v10) {
    goto LABEL_26;
  }
LABEL_3:
  if (mlir::BoolAttr::classof(v10)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v41 = v11;
  if (!v11 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_16:
  if (!v41 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v21 = ParentOp[9];
    if (v21) {
      uint64_t v22 = (uint64_t)(ParentOp - 4);
    }
    else {
      uint64_t v22 = 0;
    }
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    if (v23 >= *(_DWORD *)(a4 + 12))
    {
      uint64_t v45 = 0;
      uint64_t v30 = (char *)&v45;
      mlir::ValueRange::ValueRange(v46, v22, v21);
      uint64_t v31 = *(unsigned int *)(a4 + 8);
      unint64_t v32 = *(void *)a4;
      if (v31 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v37 = v31 + 1;
        BOOL v38 = v32 + 24 * v31 > (unint64_t)&v45;
        if (v32 <= (unint64_t)&v45 && v38)
        {
          uint64_t v40 = (char *)&v46[-1] - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          uint64_t v30 = &v40[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          uint64_t v30 = (char *)&v45;
        }
      }
      uint64_t v33 = v32 + 24 * *(unsigned int *)(a4 + 8);
      long long v34 = *(_OWORD *)v30;
      *(void *)(v33 + 16) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v33 = v34;
    }
    else
    {
      uint64_t v24 = (void *)(*(void *)a4 + 24 * v23);
      *uint64_t v24 = 0;
      mlir::ValueRange::ValueRange(v24 + 1, v22, v21);
    }
    ++*(_DWORD *)(a4 + 8);
  }
}

unint64_t mlir::scf::WhileOp::getAfter(mlir::scf::WhileOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if ((v1 & 0x7FFFFF) != 0) {
    return ((*(void *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(*(void *)this + 40)
         + 24;
  else {
    return 24;
  }
}

void mlir::scf::ForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  mlir::ValueRange::ValueRange(v17, (uint64_t)&v14, 3uLL);
  mlir::OperationState::addOperands(a2, v17[0], v17[1]);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v14 = a6;
  uint64_t v15 = 0;
  if (a7)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(mlir::ValueRange::dereference_iterator(&v14, v10) + 8);
      unint64_t v13 = *(unsigned int *)(a2 + 72);
      if (v13 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13 + 1, 8);
        unint64_t v13 = *(unsigned int *)(a2 + 72);
      }
      *(void *)(*(void *)(a2 + 64) + 8 * v13) = v12 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      uint64_t v10 = ++v15;
    }
    while (v14 != a6 || v10 != a7);
  }
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

uint64_t mlir::scf::ForOp::verify(mlir::scf::ForOp *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  v21[0] = *(void ***)(*(void *)(*(void *)this + 72) + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v21);
  if (!DefiningOp) {
    goto LABEL_13;
  }
  uint64_t v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_13;
  }
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v24);
  BOOL v4 = (*(void *)v24[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v24[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v4) {
    unint64_t v23 = *(void *)v24[0] & 0xFFFFFFFFFFFFFFF8;
  }
  if (v24[0] != &v25) {
    free(v24[0]);
  }
  if (!v4 && mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v23) <= 0)
  {
    v21[0] = (void **)"constant step operand must be positive";
    __int16 v22 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v21, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v32)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        uint64_t v31 = v14;
        operator delete(v16);
      }
      uint64_t v9 = v28;
      if (!v28) {
        goto LABEL_45;
      }
      uint64_t v17 = v29;
      uint64_t v11 = v28;
      if (v29 == v28) {
        goto LABEL_44;
      }
      do
      {
        uint64_t v19 = *--v17;
        uint64_t v18 = v19;
        *uint64_t v17 = 0;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x1000C8077774924);
        }
      }
      while (v17 != v9);
      goto LABEL_43;
    }
  }
  else
  {
LABEL_13:
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0
      && *(unsigned int *)(*(void *)this + 68) - 3 == *(_DWORD *)(*(void *)this + 36))
    {
      return 1;
    }
    v21[0] = (void **)"mismatch in number of loop-carried values and defined values";
    __int16 v22 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v21, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v32)
    {
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = v31;
        int v8 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          int v8 = __p;
        }
        uint64_t v31 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v28;
      if (!v28) {
        goto LABEL_45;
      }
      uint64_t v10 = v29;
      uint64_t v11 = v28;
      if (v29 == v28)
      {
LABEL_44:
        long long v29 = v9;
        operator delete(v11);
LABEL_45:
        if (v26 != &v27) {
          free(v26);
        }
        return v5;
      }
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        void *v10 = 0;
        if (v13) {
          MEMORY[0x21667D390](v12, 0x1000C8077774924);
        }
      }
      while (v10 != v9);
LABEL_43:
      uint64_t v11 = v28;
      goto LABEL_44;
    }
  }
  return v5;
}

uint64_t mlir::scf::ForOp::verifyRegions(mlir::scf::ForOp *this)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v3) {
    uint64_t v4 = v3 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *(void *)(v2 + 72);
  if ((*(void *)(*(void *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v6 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v16 = *(void *)(v4 + 56) - v5;
    uint64_t v17 = ((unint64_t)v16 >> 3) - 1;
    if (v17 == *(_DWORD *)(v2 + 36))
    {
      uint64_t v18 = *(unsigned int *)(v2 + 68);
      uint64_t v19 = v2 - 16;
      if (((unint64_t)v16 >> 3) == 1) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v19;
      }
      uint64_t v7 = 1;
      if (v18 != 3 && v16 != 8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v5 + 8;
        uint64_t v23 = 8 * (v16 >> 3) - 16;
        uint64_t v24 = (uint64_t *)(v6 + 120);
        uint64_t v25 = v18 - 4;
        while (1)
        {
          if (v17 == v21) {
            return 1;
          }
          uint64_t v26 = *v24;
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
          unint64_t v28 = *(void *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v28 != (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
          if ((*(void *)(*(void *)(v22 + 8 * v21) + 8) & 0xFFFFFFFFFFFFFFF8) != v28)
          {
            __int16 v94 = 257;
            mlir::OpState::emitOpError((uint64_t *)this, v93, (uint64_t)v98);
            if (v98[0])
            {
              int v95 = 3;
              uint64_t v96 = "types mismatch between ";
              uint64_t v97 = 23;
              uint64_t v56 = &v95;
              uint64_t v57 = (char *)v99;
              if (v100 >= v101)
              {
                unint64_t v78 = v100 + 1;
                if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
                {
                  int64_t v88 = (char *)&v95 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  uint64_t v57 = (char *)v99;
                  uint64_t v56 = (int *)((char *)v99 + v88);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  uint64_t v56 = &v95;
                  uint64_t v57 = (char *)v99;
                }
              }
              uint64_t v58 = &v57[24 * v100];
              long long v59 = *(_OWORD *)v56;
              *((void *)v58 + 2) = *((void *)v56 + 2);
              *(_OWORD *)uint64_t v58 = v59;
              uint64_t v60 = ++v100;
              if (v98[0])
              {
                int v95 = 5;
                uint64_t v96 = (const char *)v21;
                uint64_t v61 = &v95;
                uint64_t v62 = (char *)v99;
                if (v60 >= v101)
                {
                  unint64_t v81 = v60 + 1;
                  BOOL v82 = (char *)v99 + 24 * v60 > (char *)&v95;
                  if (v99 <= &v95 && v82)
                  {
                    int64_t v90 = (char *)&v95 - (unsigned char *)v99;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    uint64_t v62 = (char *)v99;
                    uint64_t v61 = (int *)((char *)v99 + v90);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    uint64_t v61 = &v95;
                    uint64_t v62 = (char *)v99;
                  }
                }
                uint64_t v63 = &v62[24 * v100];
                long long v64 = *(_OWORD *)v61;
                *((void *)v63 + 2) = *((void *)v61 + 2);
                *(_OWORD *)uint64_t v63 = v64;
                uint64_t v65 = ++v100;
                if (v98[0])
                {
                  int v95 = 3;
                  uint64_t v96 = "th iter region arg and defined value";
                  uint64_t v97 = 36;
                  uint64_t v66 = &v95;
                  uint64_t v67 = (char *)v99;
                  if (v65 >= v101)
                  {
                    unint64_t v85 = v65 + 1;
                    BOOL v86 = (char *)v99 + 24 * v65 > (char *)&v95;
                    if (v99 <= &v95 && v86)
                    {
                      int64_t v92 = (char *)&v95 - (unsigned char *)v99;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      uint64_t v67 = (char *)v99;
                      uint64_t v66 = (int *)((char *)v99 + v92);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      uint64_t v66 = &v95;
                      uint64_t v67 = (char *)v99;
                    }
                  }
                  uint64_t v68 = &v67[24 * v100];
                  long long v69 = *(_OWORD *)v66;
                  *((void *)v68 + 2) = *((void *)v66 + 2);
                  *(_OWORD *)uint64_t v68 = v69;
                  ++v100;
                }
              }
            }
            uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
            if (v98[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
            }
            if (!v107) {
              return v7;
            }
            uint64_t v70 = __p;
            if (__p)
            {
              BOOL v71 = v106;
              char v72 = __p;
              if (v106 != __p)
              {
                do
                  BOOL v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                char v72 = __p;
              }
              long long v106 = v70;
              operator delete(v72);
            }
            uint64_t v11 = v103;
            if (!v103) {
              goto LABEL_91;
            }
            uint64_t v73 = v104;
            uint64_t v13 = v103;
            if (v104 == v103) {
              goto LABEL_90;
            }
            do
            {
              uint64_t v75 = *--v73;
              uint64_t v74 = v75;
              void *v73 = 0;
              if (v75) {
                MEMORY[0x21667D390](v74, 0x1000C8077774924);
              }
            }
            while (v73 != v11);
            goto LABEL_89;
          }
          uint64_t v7 = 1;
          if (v25 != v21)
          {
            ++v21;
            uint64_t v29 = v23;
            v23 -= 8;
            v24 += 4;
            if (v29) {
              continue;
            }
          }
          return v7;
        }
        __int16 v94 = 257;
        mlir::OpState::emitOpError((uint64_t *)this, v93, (uint64_t)v98);
        if (v98[0])
        {
          int v95 = 3;
          uint64_t v96 = "types mismatch between ";
          uint64_t v97 = 23;
          BOOL v36 = &v95;
          unint64_t v37 = (char *)v99;
          if (v100 >= v101)
          {
            unint64_t v77 = v100 + 1;
            if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
            {
              int64_t v87 = (char *)&v95 - (unsigned char *)v99;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              unint64_t v37 = (char *)v99;
              BOOL v36 = (int *)((char *)v99 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              BOOL v36 = &v95;
              unint64_t v37 = (char *)v99;
            }
          }
          BOOL v38 = &v37[24 * v100];
          long long v39 = *(_OWORD *)v36;
          *((void *)v38 + 2) = *((void *)v36 + 2);
          *(_OWORD *)BOOL v38 = v39;
          uint64_t v40 = ++v100;
          if (v98[0])
          {
            int v95 = 5;
            uint64_t v96 = (const char *)v21;
            uint64_t v41 = &v95;
            uint64_t v42 = (char *)v99;
            if (v40 >= v101)
            {
              unint64_t v79 = v40 + 1;
              BOOL v80 = (char *)v99 + 24 * v40 > (char *)&v95;
              if (v99 <= &v95 && v80)
              {
                int64_t v89 = (char *)&v95 - (unsigned char *)v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                uint64_t v42 = (char *)v99;
                uint64_t v41 = (int *)((char *)v99 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                uint64_t v41 = &v95;
                uint64_t v42 = (char *)v99;
              }
            }
            BOOL v43 = &v42[24 * v100];
            long long v44 = *(_OWORD *)v41;
            *((void *)v43 + 2) = *((void *)v41 + 2);
            *(_OWORD *)BOOL v43 = v44;
            uint64_t v45 = ++v100;
            if (v98[0])
            {
              int v95 = 3;
              uint64_t v96 = "th iter operand and defined value";
              uint64_t v97 = 33;
              uint64_t v46 = &v95;
              uint64_t v47 = (char *)v99;
              if (v45 >= v101)
              {
                unint64_t v83 = v45 + 1;
                BOOL v84 = (char *)v99 + 24 * v45 > (char *)&v95;
                if (v99 <= &v95 && v84)
                {
                  int64_t v91 = (char *)&v95 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  uint64_t v47 = (char *)v99;
                  uint64_t v46 = (int *)((char *)v99 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  uint64_t v46 = &v95;
                  uint64_t v47 = (char *)v99;
                }
              }
              uint64_t v48 = &v47[24 * v100];
              long long v49 = *(_OWORD *)v46;
              *((void *)v48 + 2) = *((void *)v46 + 2);
              *(_OWORD *)uint64_t v48 = v49;
              ++v100;
            }
          }
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
        if (v98[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
        }
        if (!v107) {
          return v7;
        }
        BOOL v50 = __p;
        if (__p)
        {
          uint64_t v51 = v106;
          int64_t v52 = __p;
          if (v106 != __p)
          {
            do
              uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
            while (v51 != v50);
            int64_t v52 = __p;
          }
          long long v106 = v50;
          operator delete(v52);
        }
        uint64_t v11 = v103;
        if (!v103) {
          goto LABEL_91;
        }
        uint64_t v53 = v104;
        uint64_t v13 = v103;
        if (v104 == v103) {
          goto LABEL_90;
        }
        do
        {
          uint64_t v55 = *--v53;
          uint64_t v54 = v55;
          *uint64_t v53 = 0;
          if (v55) {
            MEMORY[0x21667D390](v54, 0x1000C8077774924);
          }
        }
        while (v53 != v11);
        goto LABEL_89;
      }
    }
    else
    {
      v93[0] = (void **)"mismatch in number of basic block args and defined values";
      __int16 v94 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v93, (uint64_t)v98);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
      if (v98[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
      }
      if (v107)
      {
        uint64_t v30 = __p;
        if (__p)
        {
          uint64_t v31 = v106;
          char v32 = __p;
          if (v106 != __p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            char v32 = __p;
          }
          long long v106 = v30;
          operator delete(v32);
        }
        uint64_t v11 = v103;
        if (!v103) {
          goto LABEL_91;
        }
        uint64_t v33 = v104;
        uint64_t v13 = v103;
        if (v104 == v103) {
          goto LABEL_90;
        }
        do
        {
          uint64_t v35 = *--v33;
          uint64_t v34 = v35;
          *uint64_t v33 = 0;
          if (v35) {
            MEMORY[0x21667D390](v34, 0x1000C8077774924);
          }
        }
        while (v33 != v11);
        goto LABEL_89;
      }
    }
  }
  else
  {
    v93[0] = (void **)"expected induction variable to be same type as bounds and step";
    __int16 v94 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v93, (uint64_t)v98);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
    if (v98[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
    }
    if (v107)
    {
      int v8 = __p;
      if (__p)
      {
        uint64_t v9 = v106;
        uint64_t v10 = __p;
        if (v106 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          uint64_t v10 = __p;
        }
        long long v106 = v8;
        operator delete(v10);
      }
      uint64_t v11 = v103;
      if (!v103) {
        goto LABEL_91;
      }
      uint64_t v12 = v104;
      uint64_t v13 = v103;
      if (v104 == v103)
      {
LABEL_90:
        unint64_t v104 = v11;
        operator delete(v13);
LABEL_91:
        if (v99 != v102) {
          free(v99);
        }
        return v7;
      }
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        *uint64_t v12 = 0;
        if (v15) {
          MEMORY[0x21667D390](v14, 0x1000C8077774924);
        }
      }
      while (v12 != v11);
LABEL_89:
      uint64_t v13 = v103;
      goto LABEL_90;
    }
  }
  return v7;
}

uint64_t mlir::scf::ForOp::promoteIfSingleIteration(mlir::scf::ForOp *this, mlir::RewriterBase *a2)
{
  v27[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlir::constantTripCount(*(void *)(*(void *)(*(void *)this + 72) + 24) | 4, *(void *)(*(void *)(*(void *)this + 72) + 56) | 4, *(void *)(*(void *)(*(void *)this + 72) + 88) | 4);
  if (v5) {
    BOOL v6 = v4 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v8) {
    uint64_t v9 = (ZinIrHalH13g **)(v8 - 8);
  }
  else {
    uint64_t v9 = 0;
  }
  mlir::Block::getTerminator(v9);
  uint64_t v11 = v10;
  unint64_t v12 = *(unsigned int *)(*(void *)this + 36);
  if (v12) {
    uint64_t v13 = *(void *)this - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::ValueRange::ValueRange(v27, v13, v12);
  unint64_t YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)this);
  mlir::RewriterBase::replaceAllUsesWith((uint64_t)a2, v27[0], v27[1], YieldedValues, v15);
  uint64_t v23 = &v25;
  uint64_t v16 = *(void *)this;
  uint64_t v17 = *(void *)(*(void *)this + 72);
  uint64_t v25 = *(void *)(v17 + 24);
  uint64_t v24 = 0x600000001;
  llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v23, (uint64_t)&v26, v17 + 96, 0, v17 + 96, *(unsigned int *)(v16 + 68) - 3);
  uint64_t v18 = *(void *)this;
  uint64_t v19 = *(void *)(((*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v19) {
    uint64_t v20 = v19 - 8;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(v18 + 16);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v23, v24);
  (*(void (**)(mlir::RewriterBase *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v20, v21, v18, v22[0], v22[1]);
  (*(void (**)(mlir::RewriterBase *, uint64_t))(*(void *)a2 + 40))(a2, v11);
  (*(void (**)(mlir::RewriterBase *, void))(*(void *)a2 + 40))(a2, *(void *)this);
  if (v23 != &v25) {
    free(v23);
  }
  return 1;
}

uint64_t mlir::RewriterBase::replaceAllUsesWith(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  uint64_t v22 = 0;
  uint64_t v23 = a4;
  uint64_t v24 = 0;
  if (a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      if (v23 == a4 && v11 == a5) {
        break;
      }
      uint64_t v14 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v21, v10);
      uint64_t result = mlir::ValueRange::dereference_iterator(&v23, v24);
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v16 = (uint64_t *)result;
        do
        {
          uint64_t v17 = (uint64_t *)*v15;
          uint64_t v18 = v15[2];
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v18);
          uint64_t v19 = (uint64_t *)v15[1];
          if (v19)
          {
            *uint64_t v19 = *v15;
            if (*v15) {
              *(void *)(*v15 + 8) = v15[1];
            }
          }
          v15[3] = (uint64_t)v16;
          v15[1] = (uint64_t)v16;
          uint64_t v20 = *v16;
          *uint64_t v15 = *v16;
          if (v20) {
            *(void *)(v20 + 8) = v15;
          }
          *uint64_t v16 = (uint64_t)v15;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 80))(v9, v18);
          uint64_t v15 = v17;
        }
        while (v17);
      }
      uint64_t v10 = v22 + 1;
      uint64_t v11 = v24 + 1;
      ++v22;
      ++v24;
    }
    while (v21 != a2 || v10 != a3);
  }
  return result;
}

unint64_t mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues(uint64_t a1)
{
  v15[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(((*(void *)a1
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)a1 + 40)
                 + 8);
  if (v1) {
    uint64_t v2 = (ZinIrHalH13g **)(v1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  mlir::Block::getTerminator(v2);
  if ((*(unsigned char *)(v3 + 46) & 0x80) != 0) {
    int v4 = *(_DWORD *)(v3 + 68);
  }
  else {
    int v4 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v13, v3, 0, v4, 0, 0);
  unint64_t v5 = mlir::MutableOperandRange::operator mlir::OperandRange(v13);
  unint64_t v7 = v6;
  if (v14 != v15) {
    free(v14);
  }
  if (v7)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    unsigned int OperandNumber = mlir::OpOperand::getOperandNumber(v5);
    if ((*(unsigned char *)(v8 + 46) & 0x80) != 0) {
      uint64_t v10 = *(void *)(v8 + 72);
    }
    else {
      uint64_t v10 = 0;
    }
    mlir::ValueRange::ValueRange(&v12, v10 + 32 * OperandNumber, v7);
  }
  else
  {
    mlir::ValueRange::ValueRange(&v12, 0, 0);
  }
  return v12;
}

uint64_t mlir::scf::ForOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v52[2] = *MEMORY[0x263EF8340];
  int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  uint64_t v6 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, **(void **)(v7 + 48));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (_DWORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 3uLL)
  {
    *uint64_t v11 = 544175136;
    *((void *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, " to ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  unint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 8304;
    *(_DWORD *)uint64_t v13 = 1702130464;
    *((void *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, " step ", 6uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 88));
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = *(void *)((((unint64_t)*this + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 48);
  uint64_t v19 = ((*(void *)(v17 + 56) - v18) >> 3) - 1;
  uint64_t v20 = (void *)(v18 + 8);
  if ((v15 & 0x800000) != 0)
  {
    uint64_t v21 = *((unsigned int *)v14 + 17);
    uint64_t v22 = *((void *)v14 + 9);
    unint64_t v23 = v21 - 3;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = -3;
  }
  mlir::ValueRange::ValueRange(v52, v22 + 96, v23);
  printInitializationList(a2, v20, v19, v52[0], v52[1], " iter_args", 0xAuLL);
  if ((*((unsigned char *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 3)
  {
    uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v25 = *((void *)v24 + 4);
    if ((unint64_t)(*((void *)v24 + 3) - v25) > 4)
    {
      *(unsigned char *)(v25 + 4) = 40;
      *(_DWORD *)uint64_t v25 = 540945696;
      *((void *)v24 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v24, " -> (", 5uLL);
    }
    uint64_t v26 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v27 = *((unsigned int *)v26 + 17);
      uint64_t v28 = *((void *)v26 + 9);
      uint64_t v29 = v27 - 3;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = -3;
    }
    v49[0] = v28 + 96;
    v49[1] = v29;
    mlir::OperandRange::getTypes(v49, v50);
    v51[0] = ", ";
    v51[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v50[0], v50[1], v50[2], v50[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v51);
    uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
    if ((unint64_t)v31 >= *((void *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 41);
    }
    else
    {
      *((void *)v30 + 4) = v31 + 1;
      unsigned char *v31 = 41;
    }
  }
  char v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if ((unint64_t)v33 >= *((void *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((void *)v32 + 4) = v33 + 1;
    *uint64_t v33 = 32;
  }
  uint64_t v34 = *(void *)((((unint64_t)*this
                    + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v34) {
    uint64_t v35 = v34 - 8;
  }
  else {
    uint64_t v35 = 0;
  }
  v50[0] = *(void *)(**(void **)(v35 + 48) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isIndex((mlir::Type *)v50))
  {
LABEL_43:
    uint64_t v40 = *this;
    unint64_t v41 = *((unsigned int *)*this + 11);
    if ((v41 & 0x7FFFFF) != 0) {
      goto LABEL_44;
    }
LABEL_51:
    unint64_t v42 = 0;
    if ((v41 & 0x800000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  BOOL v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v37 = *((void *)v36 + 4);
  if ((unint64_t)(*((void *)v36 + 3) - v37) > 2)
  {
    *(unsigned char *)(v37 + 2) = 32;
    *(_WORD *)uint64_t v37 = 14880;
    *((void *)v36 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v36, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 32))(a2, v50[0]);
  BOOL v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v39 = (unsigned char *)*((void *)v38 + 4);
  if ((unint64_t)v39 < *((void *)v38 + 3))
  {
    *((void *)v38 + 4) = v39 + 1;
    *long long v39 = 32;
    goto LABEL_43;
  }
  llvm::raw_ostream::write(v38, 32);
  uint64_t v40 = *this;
  unint64_t v41 = *((unsigned int *)*this + 11);
  if ((v41 & 0x7FFFFF) == 0) {
    goto LABEL_51;
  }
LABEL_44:
  unint64_t v42 = (((unint64_t)v40 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v40 + 10);
  if ((v41 & 0x800000) != 0)
  {
LABEL_45:
    BOOL v43 = *((_DWORD *)v40 + 17) != 3;
    goto LABEL_46;
  }
LABEL_52:
  BOOL v43 = 1;
LABEL_46:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v42, 0, v43, 0);
  long long v44 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v50[0] = mlir::Operation::getAttrDictionary(v44);
    uint64_t v45 = (mlir::ArrayAttr *)v50;
  }
  else
  {
    uint64_t v45 = (mlir::Operation *)((char *)v44 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v45);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v47, 0, 0);
}

llvm::raw_ostream *printInitializationList(llvm::raw_ostream *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint64_t v13 = result;
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 16))(result);
    unint64_t v15 = (void *)*((void *)v14 + 4);
    if (a7 <= *((void *)v14 + 3) - (void)v15)
    {
      if (a7)
      {
        memcpy(v15, a6, a7);
        *((void *)v14 + 4) += a7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, (const char *)a6, a7);
    }
    uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
    uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v17 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 40);
      uint64_t v30 = a2;
      uint64_t v32 = a4;
      uint64_t v33 = 0;
      if (!a3) {
        goto LABEL_26;
      }
    }
    else
    {
      *((void *)v16 + 4) = v17 + 1;
      *uint64_t v17 = 40;
      uint64_t v30 = a2;
      uint64_t v32 = a4;
      uint64_t v33 = 0;
      if (!a3)
      {
LABEL_26:
        uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
        uint64_t v29 = (unsigned char *)*((void *)result + 4);
        if (*((unsigned char **)result + 3) == v29) {
          return llvm::raw_ostream::write(result, ")", 1uLL);
        }
        *uint64_t v29 = 41;
        ++*((void *)result + 4);
        return result;
      }
    }
    uint64_t v18 = &a2[a3];
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v32, 0);
    (*(void (**)(llvm::raw_ostream *, void))(*(void *)v13 + 160))(v13, *a2);
    uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
    uint64_t v21 = *((void *)v20 + 4);
    if ((unint64_t)(*((void *)v20 + 3) - v21) > 2)
    {
      *(unsigned char *)(v21 + 2) = 32;
      *(_WORD *)uint64_t v21 = 15648;
      *((void *)v20 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v20, " = ", 3uLL);
    }
    (*(void (**)(llvm::raw_ostream *, uint64_t))(*(void *)v13 + 160))(v13, v19);
    uint64_t v22 = v33 + 1;
    uint64_t v31 = v30 + 1;
    ++v33;
    for (; v31 != v18; ++v33)
    {
      if (v32 == a4 && v22 == a5) {
        break;
      }
      uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
      uint64_t v25 = (_WORD *)*((void *)v24 + 4);
      if (*((void *)v24 + 3) - (void)v25 > 1uLL)
      {
        *uint64_t v25 = 8236;
        *((void *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
      }
      uint64_t v26 = mlir::ValueRange::dereference_iterator(&v32, v33);
      (*(void (**)(llvm::raw_ostream *, void))(*(void *)v13 + 160))(v13, *v31);
      uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
      uint64_t v28 = *((void *)v27 + 4);
      if ((unint64_t)(*((void *)v27 + 3) - v28) > 2)
      {
        *(unsigned char *)(v28 + 2) = 32;
        *(_WORD *)uint64_t v28 = 15648;
        *((void *)v27 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v27, " = ", 3uLL);
      }
      (*(void (**)(llvm::raw_ostream *, uint64_t))(*(void *)v13 + 160))(v13, v26);
      uint64_t v22 = v33 + 1;
      ++v31;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t mlir::scf::ForOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v29 = 0;
  memset(v26, 0, 24);
  char v28 = 0;
  v26[4] = 0;
  v26[5] = 0;
  char v27 = 0;
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  memset(v23, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v26, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1)) {
    return 0;
  }
  __int16 v37 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v34))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1))
  }
    return 0;
  __int16 v37 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &v34)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v23, 1))
  {
    return 0;
  }
  uint64_t v34 = v36;
  uint64_t v35 = 0x400000000;
  uint64_t v31 = v33;
  uint64_t v32 = 0x400000000;
  __n128 v5 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&v34, (unint64_t)v26);
  char v6 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(void *)a1 + 376))(a1, "iter_args", 9, v5);
  if (v6
    && (!mlir::OpAsmParser::parseAssignmentList(a1)
     || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2 + 64)))
  {
    goto LABEL_33;
  }
  if (*(unsigned int *)(a2 + 72) + 1 == v35)
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v29))
      {
LABEL_33:
        uint64_t v9 = 0;
        goto LABEL_34;
      }
      uint64_t IndexType = v29;
    }
    else
    {
      uint64_t IndexType = mlir::Builder::getIndexType(v4, v7);
      uint64_t v29 = IndexType;
    }
    *((void *)v34 + 4) = IndexType;
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 696))(a1, v25)
      && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v24, v29, a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v23, v29, a2 + 16))
    {
      if (!v6 || v35 == 1 || !v32 || (uint64_t v12 = *(unsigned int *)(a2 + 72), !v12)) {
LABEL_32:
      }
        mlir::OperationState::addRegion((mlir::OperationState *)a2);
      uint64_t v13 = 0;
      uint64_t v14 = (char *)v31;
      unint64_t v15 = *(void **)(a2 + 64);
      unint64_t v19 = ((unint64_t)v35 << 6) - 128;
      uint64_t v20 = (char *)v34 + 96;
      uint64_t v18 = (v12 << 6) - 64;
      unint64_t v16 = ((unint64_t)v32 << 6) - 64;
      while (1)
      {
        *(void *)&v20[v13] = *v15;
        if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 696))(a1, v14)) {
          break;
        }
        if (v19 != v13 && v16 != v13)
        {
          v14 += 32;
          ++v15;
          BOOL v17 = v18 == v13;
          v13 += 64;
          if (!v17) {
            continue;
          }
        }
        goto LABEL_32;
      }
    }
    goto LABEL_33;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v21 = "mismatch in number of loop-carried values and defined values";
  __int16 v22 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v30, a1, v11, &v21);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v30);
LABEL_34:
  if (v31 != v33) {
    free(v31);
  }
  if (v34 != v36) {
    free(v34);
  }
  return v9;
}

__n128 llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v4 + 1;
    unint64_t v11 = v5 + (v4 << 6);
    if (v5 <= a2 && v11 > a2)
    {
      unint64_t v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      unint64_t v5 = *(void *)a1;
      unint64_t v2 = *(void *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      unint64_t v5 = *(void *)a1;
    }
  }
  unint64_t v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  __n128 result = *(__n128 *)v2;
  long long v8 = *(_OWORD *)(v2 + 16);
  long long v9 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  *(__n128 *)unint64_t v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mlir::OpAsmParser::parseAssignmentList(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 792))(a1);
  if ((unsigned __int16)v2 <= 0xFFu)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    unint64_t v13 = "expected '('";
    __int16 v14 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v15, a1, v3, &v13);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v15[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
    }
    if (v22)
    {
      uint64_t v4 = __p;
      if (__p)
      {
        unint64_t v5 = v21;
        unint64_t v6 = __p;
        if (v21 != __p)
        {
          do
            unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          unint64_t v6 = __p;
        }
        uint64_t v21 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v18;
      if (v18)
      {
        long long v8 = v19;
        long long v9 = v18;
        if (v19 != v18)
        {
          do
          {
            uint64_t v11 = *--v8;
            uint64_t v10 = v11;
            *long long v8 = 0;
            if (v11) {
              MEMORY[0x21667D390](v10, 0x1000C8077774924);
            }
          }
          while (v8 != v7);
          long long v9 = v18;
        }
        unint64_t v19 = v7;
        operator delete(v9);
      }
      if (v16 != &v17) {
        free(v16);
      }
    }
  }
  return v2;
}

void mlir::scf::ForOp::replaceWithAdditionalYields(ZinIrHalH13g **a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)(a2 + 24);
  long long v8 = *a1;
  uint64_t v9 = *((void *)v8 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  *uint64_t v7 = v9;
  v7[1] = v10;
  uint64_t v11 = *a1;
  if ((*((unsigned char *)*a1 + 46) & 0x80) != 0)
  {
    uint64_t v12 = *((unsigned int *)v11 + 17);
    unint64_t v13 = v12 - 3;
    uint64_t v14 = *((void *)v11 + 9) + 96;
    BOOL v43 = v45;
    uint64_t v44 = 0x600000000;
    if ((unint64_t)(v12 - 3) < 7)
    {
      uint64_t v15 = 0;
      if (v12 == 3)
      {
        uint64_t v29 = 0;
        LODWORD(v44) = 0;
        unint64_t v30 = a4;
        if (a4 > 6)
        {
LABEL_21:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v30, 8);
          uint64_t v29 = v44;
        }
LABEL_22:
        uint64_t v46 = a3;
        uint64_t v47 = 0;
        if (a4)
        {
          uint64_t v31 = 0;
          uint64_t v32 = (uint64_t *)((char *)v43 + 8 * v29);
          do
          {
            *v32++ = mlir::ValueRange::dereference_iterator(&v46, v31);
            uint64_t v31 = ++v47;
          }
          while (v46 != a3 || v31 != a4);
          LODWORD(v29) = v44;
        }
        LODWORD(v44) = v29 + a4;
        uint64_t v34 = *((void *)*a1 + 3);
        uint64_t v35 = (void *)*((void *)*a1 + 9);
        uint64_t v36 = v35[3];
        uint64_t v37 = v35[7];
        uint64_t v38 = v35[11];
        uint64_t v42 = v34;
        Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v42);
        uint64_t v40 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
        if (v41)
        {
          mlir::OperationState::OperationState(&v46, v34, v40);
          mlir::ValueRange::ValueRange((unint64_t *)v50, (uint64_t)v43, v44);
          mlir::scf::ForOp::build((uint64_t)(v7 - 2), (uint64_t)&v46, v36, v37, v38, v50[0], v50[1]);
        }
        __int16 v51 = 1283;
        v50[2] = (uint64_t)"scf.for";
        v50[3] = 7;
              "d by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up"
              "-with-dialects-management";
        __int16 v49 = 259;
        llvm::operator+(v50, (uint64_t *)&v48, (uint64_t)&v46);
        llvm::report_fatal_error((llvm::Twine *)&v46, 1);
      }
      unint64_t v16 = v45;
      uint64_t v17 = v45;
      if (v13 < 0xD) {
        goto LABEL_17;
      }
LABEL_7:
      if ((unint64_t)v17 >= v14 + 32 * v13 || v14 + 24 >= (unint64_t)&v16[8 * v13 + 8 * v15])
      {
        uint64_t v19 = v13 & 3;
        if ((v13 & 3) == 0) {
          uint64_t v19 = 4;
        }
        unint64_t v20 = v13 - v19;
        v17 += 8 * v20;
        uint64_t v21 = (const double *)(v14 + 88);
        char v22 = (unsigned long long *)&v16[8 * v15 + 16];
        unint64_t v23 = v20;
        do
        {
          uint64_t v24 = v21 - 8;
          unsigned long long v25 = (unsigned __int128)vld4q_f64(v24);
          unsigned long long v26 = (unsigned __int128)vld4q_f64(v21);
          *(v22 - 1) = v25;
          unsigned long long *v22 = v26;
          v21 += 16;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
LABEL_18:
        char v27 = (uint64_t *)(v14 + 32 * v20 + 24);
        do
        {
          uint64_t v28 = *v27;
          v27 += 4;
          *(void *)uint64_t v17 = v28;
          v17 += 8;
          ++v20;
        }
        while (v13 != v20);
        LODWORD(v44) = v44 + v13;
        uint64_t v29 = v44;
        unint64_t v30 = a4 + v44;
        if (v30 > HIDWORD(v44)) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
LABEL_17:
      unint64_t v20 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v43 = v45;
    uint64_t v44 = 0x600000000;
    unint64_t v13 = -3;
    uint64_t v14 = 96;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v13, 8);
  uint64_t v15 = v44;
  unint64_t v16 = v43;
  uint64_t v17 = (char *)v43 + 8 * v44;
  if (v13 < 0xD) {
    goto LABEL_17;
  }
  goto LABEL_7;
}

__n128 mlir::scf::ForOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v34[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  unint64_t v6 = *(unsigned int *)(*a1 + 44);
  if ((v6 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (v6 >> 23) & 1;
    uint64_t v8 = (v6 >> 21) & 0x7F8;
    uint64_t v9 = *(unsigned int *)(v5 + 40);
    unint64_t v10 = ((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = *(unsigned int *)(v5 + 40);
    uint64_t v7 = (v6 >> 23) & 1;
    uint64_t v8 = (v6 >> 21) & 0x7F8;
  }
  uint64_t v11 = *(void *)(((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9 + 8);
  if (v11) {
    uint64_t v12 = v11 - 8;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(v12 + 48);
  unint64_t v14 = ((*(void *)(v12 + 56) - v13) >> 3) - 1;
  unint64_t v33 = v10;
  uint64_t v15 = (__n128 *)&v33;
  mlir::ValueRange::ValueRange(v34, v13 + 8, v14);
  uint64_t v16 = *(unsigned int *)(a3 + 8);
  unint64_t v17 = *(void *)a3;
  if (v16 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_8;
  }
  unint64_t v27 = v16 + 1;
  BOOL v28 = v17 + 24 * v16 > (unint64_t)&v33;
  if (v17 > (unint64_t)&v33 || !v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
    unint64_t v17 = *(void *)a3;
LABEL_8:
    uint64_t v18 = (char *)&v33;
    goto LABEL_9;
  }
  uint64_t v31 = (char *)&v34[-1] - v17;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
  unint64_t v17 = *(void *)a3;
  uint64_t v18 = &v31[*(void *)a3];
LABEL_9:
  uint64_t v19 = v17 + 24 * *(unsigned int *)(a3 + 8);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = *((void *)v18 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a3 + 8);
  unint64_t v21 = *(unsigned int *)(*a1 + 36);
  if (v21) {
    uint64_t v22 = *a1 - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v33 = 0;
  mlir::ValueRange::ValueRange(v34, v22, v21);
  uint64_t v23 = *(unsigned int *)(a3 + 8);
  unint64_t v24 = *(void *)a3;
  if (v23 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v29 = v23 + 1;
    BOOL v30 = v24 + 24 * v23 > (unint64_t)&v33;
    if (v24 <= (unint64_t)&v33 && v30)
    {
      uint64_t v32 = (char *)&v34[-1] - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      unint64_t v24 = *(void *)a3;
      uint64_t v15 = (__n128 *)&v32[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      unint64_t v24 = *(void *)a3;
      uint64_t v15 = (__n128 *)&v33;
    }
  }
  unsigned long long v25 = (__n128 *)(v24 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v15;
  v25[1].n128_u64[0] = v15[1].n128_u64[0];
  *unsigned long long v25 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::ForallOp::promoteIfSingleIteration(mlir::scf::ForallOp *this, mlir::RewriterBase *a2)
{
  v41[6] = *MEMORY[0x263EF8340];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&__src);
  mlir::scf::ForallOp::getMixedUpperBound(this, (uint64_t)&v27);
  mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v24);
  __dst = v35;
  uint64_t v34 = 0x600000000;
  int v4 = v31;
  if (v31)
  {
    if (__src == v32)
    {
      unsigned int v5 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v35, v31, 8), (unsigned int v5 = v31) != 0))
      {
        memcpy(__dst, __src, 8 * v5);
      }
      LODWORD(v34) = v4;
    }
    else
    {
      __dst = __src;
      uint64_t v34 = v31;
      __src = v32;
      HIDWORD(v31) = 0;
    }
    LODWORD(v31) = 0;
  }
  uint64_t v36 = v38;
  uint64_t v37 = 0x600000000;
  int v6 = v28;
  if (v28)
  {
    if (v27 != v29)
    {
      uint64_t v36 = v27;
      uint64_t v37 = v28;
      unint64_t v27 = v29;
      HIDWORD(v28) = 0;
LABEL_18:
      LODWORD(v28) = 0;
      goto LABEL_19;
    }
    if (v28 < 7)
    {
      uint64_t v7 = v28;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v28, 8);
      uint64_t v7 = v28;
      if (!v28) {
        goto LABEL_17;
      }
    }
    memcpy(v36, v27, 8 * v7);
LABEL_17:
    LODWORD(v37) = v6;
    goto LABEL_18;
  }
LABEL_19:
  long long v39 = v41;
  uint64_t v40 = 0x600000000;
  int v8 = v25;
  uint64_t v9 = v24;
  if (!v25) {
    goto LABEL_29;
  }
  if (v24 == v26)
  {
    if (v25 < 7)
    {
      uint64_t v10 = v25;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v25, 8);
      uint64_t v10 = v25;
      uint64_t v9 = v24;
      if (!v25) {
        goto LABEL_27;
      }
    }
    memcpy(v39, v9, 8 * v10);
    uint64_t v9 = v24;
LABEL_27:
    LODWORD(v40) = v8;
    goto LABEL_28;
  }
  long long v39 = v24;
  uint64_t v40 = v25;
  unint64_t v24 = v26;
  HIDWORD(v25) = 0;
  uint64_t v9 = v26;
LABEL_28:
  LODWORD(v25) = 0;
LABEL_29:
  if (v9 != v26) {
    free(v9);
  }
  if (v27 != v29) {
    free(v27);
  }
  if (__src != v32) {
    free(__src);
  }
  char v11 = 0;
  uint64_t v12 = (uint64_t *)v39;
  if (v34 && v37 && v40)
  {
    uint64_t v13 = a2;
    unint64_t v14 = (uint64_t *)__dst;
    uint64_t v15 = (uint64_t *)v36;
    uint64_t v16 = 8 * v40 - 8;
    uint64_t v17 = 8 * v37 - 8;
    uint64_t v18 = 8 * v34 - 8;
    do
    {
      uint64_t v19 = mlir::constantTripCount(*v14, *v15, *v12);
      if (v20) {
        BOOL v21 = v19 == 1;
      }
      else {
        BOOL v21 = 0;
      }
      char v11 = !v21;
      if (!v21) {
        break;
      }
      if (!v18) {
        break;
      }
      if (!v17) {
        break;
      }
      ++v14;
      ++v15;
      ++v12;
      uint64_t v22 = v16;
      v16 -= 8;
      v17 -= 8;
      v18 -= 8;
    }
    while (v22);
    uint64_t v12 = (uint64_t *)v39;
    a2 = v13;
  }
  if (v12 != v41) {
    free(v12);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (__dst != v35) {
    free(__dst);
  }
  if (v11) {
    return 0;
  }
  mlir::scf::promote((uint64_t)a2, *(void *)this);
  return 1;
}

void mlir::scf::ForallOp::getMixedLowerBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  v15[2] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v13 = Context;
  uint64_t v14 = v6;
  uint64_t v7 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v14);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = 0;
  }
  if ((v10 & 0x800000) != 0) {
    uint64_t v12 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::ValueRange::ValueRange(v15, v12, *(unsigned int *)(v11 + 32));
  mlir::getMixedValues(v7, v9, v15[0], v15[1], (mlir::Builder *)&v13, a2);
}

void mlir::scf::ForallOp::getMixedUpperBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  v17[2] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v15 = Context;
  uint64_t v16 = v6;
  uint64_t v7 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v16);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1) + 64;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 32);
  int v13 = *(_DWORD *)(v11 + 36);
  if ((v10 & 0x800000) != 0) {
    uint64_t v14 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::ValueRange::ValueRange(v17, v14 + 32 * v12, (v13 + v12) - v12);
  mlir::getMixedValues(v7, v9, v17[0], v17[1], (mlir::Builder *)&v15, a2);
}

void mlir::scf::ForallOp::getMixedStep(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18[2] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v16 = Context;
  uint64_t v17 = v6;
  uint64_t v7 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v17);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = (_DWORD *)(*(void *)this + 16 * ((v10 >> 23) & 1) + 64);
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = v11[8];
  int v13 = v11[9];
  int v14 = v11[10];
  if ((v10 & 0x800000) != 0) {
    uint64_t v15 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::ValueRange::ValueRange(v18, v15 + 32 * (v13 + v12), (v14 + v13 + v12) - (unint64_t)(v13 + v12));
  mlir::getMixedValues(v7, v9, v18[0], v18[1], (mlir::Builder *)&v16, a2);
}

void mlir::scf::promote(uint64_t a1, uint64_t a2)
{
  v89[6] = *MEMORY[0x263EF8340];
  unint64_t v79 = (ZinIrHalH13g *)a2;
  uint64_t v4 = a1 + 24;
  long long v68 = *(_OWORD *)(a1 + 24);
  unint64_t v5 = (mlir::IndexType **)(a1 + 8);
  uint64_t v6 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6) {
    uint64_t v7 = (ZinIrHalH13g **)(v6 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::Block::getTerminator(v7);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a2 + 24);
  mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v79, (uint64_t)&v87);
  mlir::getValueOrCreateConstantIndexOp(v5, v10, v87, v88, (uint64_t)&v83);
  if (v87 != v89) {
    free(v87);
  }
  unint64_t v11 = *((unsigned int *)v79 + 11);
  if (HIBYTE(*((_DWORD *)v79 + 11))) {
    int v12 = (_DWORD *)((char *)v79 + 16 * ((v11 >> 23) & 1) + 64);
  }
  else {
    int v12 = 0;
  }
  int v13 = v12[8];
  int v14 = v12[9];
  int v16 = v12[10];
  int v15 = v12[11];
  if ((v11 & 0x800000) == 0)
  {
    uint64_t v66 = (v14 + v13 + v16);
    uint64_t v18 = 32 * v66;
    unint64_t v19 = (v15 + v66) - v66;
    uint64_t v20 = 32 * v66;
    unsigned int v21 = v84;
    unint64_t v22 = v19 + v84;
    if (v22 <= v85) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v17 = (v14 + v13 + v16);
  uint64_t v18 = *((void *)v79 + 9) + 32 * v17;
  unint64_t v19 = (v15 + v17) - v17;
  uint64_t v20 = v18;
  unsigned int v21 = v84;
  unint64_t v22 = v19 + v84;
  if (v22 > v85)
  {
LABEL_11:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v22, 8);
    unsigned int v21 = v84;
  }
LABEL_12:
  if (v19 || v18 != v20)
  {
    uint64_t v23 = &v83[8 * v21];
    if (v18 != v20)
    {
      for (uint64_t i = (uint64_t *)(v18 + 24); ; i += 4)
      {
        uint64_t v25 = *i;
        *(void *)uint64_t v23 = v25;
        v23 += 8;
      }
    }
    if (v19 > 0xC
      && ((uint64_t v26 = v21, v27 = &v83[8 * v19 + 8 * v21], (unint64_t)v23 < v18 + 32 * v19)
        ? (BOOL v28 = v18 + 24 >= (unint64_t)v27)
        : (BOOL v28 = 1),
          v28))
    {
      uint64_t v29 = v19 & 3;
      if ((v19 & 3) == 0) {
        uint64_t v29 = 4;
      }
      unint64_t v30 = v19 - v29;
      v23 += 8 * v30;
      uint64_t v31 = (const double *)(v18 + 88);
      uint64_t v32 = (unsigned long long *)&v83[8 * v26 + 16];
      unint64_t v33 = v30;
      do
      {
        uint64_t v34 = v31 - 8;
        unsigned long long v35 = (unsigned __int128)vld4q_f64(v34);
        unsigned long long v36 = (unsigned __int128)vld4q_f64(v31);
        *(v32 - 1) = v35;
        *uint64_t v32 = v36;
        v31 += 16;
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v37 = v19 - v30;
    uint64_t v38 = (uint64_t *)(v18 + 32 * v30 + 24);
    do
    {
      uint64_t v39 = *v38;
      v38 += 4;
      *(void *)uint64_t v23 = v39;
      v23 += 8;
      --v37;
    }
    while (v37);
    unsigned int v21 = v84;
  }
  unint64_t v40 = v21 + v19;
  unsigned int v84 = v21 + v19;
  char v41 = v79;
  uint64_t v42 = *(void *)((((unint64_t)v79
                    + 16 * (((unint64_t)*((unsigned int *)v79 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v79 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v79 + 10)
                  + 8);
  if (v42) {
    uint64_t v43 = v42 - 8;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = *((void *)v79 + 2);
  mlir::ValueRange::ValueRange(v82, (uint64_t)v83, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, ZinIrHalH13g *, unint64_t, unint64_t))(*(void *)a1 + 56))(a1, v43, v44, v41, v82[0], v82[1]);
  uint64_t v45 = *((void *)v79 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v79);
  uint64_t v47 = *(void *)(v46 + 8);
  *(void *)(a1 + 24) = v45;
  *(void *)(a1 + 32) = v47;
  int64_t v87 = v89;
  uint64_t v88 = 0x600000000;
  unint64_t v48 = *((unsigned int *)v79 + 9);
  if (v48 >= 7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v48, 8);
  }
  uint64_t v67 = v9;
  uint64_t v49 = *(void *)(((v9
                    + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v9 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v9 + 40)
                  + 8);
  if (v49) {
    uint64_t v50 = v49 - 8;
  }
  else {
    uint64_t v50 = 0;
  }
  __int16 v51 = (ZinIrHalH13g *)(v50 + 32);
  uint64_t v52 = *(ZinIrHalH13g **)(v50 + 40);
  if (v52 != (ZinIrHalH13g *)(v50 + 32))
  {
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v52);
      uint64_t v78 = v53;
      uint64_t Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v78);
      uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v78);
      uint64_t v55 = *((void *)v79 + 3);
      unint64_t v75 = *(void *)(Dest + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = Input;
      v74[0] = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v74[1] = v56;
      v73[0] = mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v73[1] = v57;
      v72[0] = mlir::tensor::InsertSliceOp::getStrides((mlir::tensor::InsertSliceOp *)&v78);
      v72[1] = v58;
      v71[0] = mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v78);
      v71[1] = v59;
      v70[0] = mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v70[1] = v60;
      v69[0] = mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v69[1] = v61;
      uint64_t v62 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(v5, v55, (uint64_t *)&v75, &v76, &Dest, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, v71, v70, v69);
      uint64_t v63 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 8);
        uint64_t v63 = v88;
      }
      v87[v63] = (char *)v62 - 16;
      LODWORD(v88) = v88 + 1;
      uint64_t v52 = (ZinIrHalH13g *)*((void *)v52 + 1);
    }
    while (v52 != v51);
  }
  unint64_t v64 = *((unsigned int *)v79 + 9);
  if (v64) {
    uint64_t v65 = (char *)v79 - 16;
  }
  else {
    uint64_t v65 = 0;
  }
  mlir::ValueRange::ValueRange(v81, (uint64_t)v65, v64);
  mlir::ValueRange::ValueRange(v80, (uint64_t)v87, v88);
  mlir::RewriterBase::replaceAllUsesWith(a1, v81[0], v81[1], v80[0], v80[1]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v67);
  (*(void (**)(uint64_t, ZinIrHalH13g *))(*(void *)a1 + 40))(a1, v79);
  if (v87 != v89) {
    free(v87);
  }
  if (v83 != v86) {
    free(v83);
  }
  if ((void)v68)
  {
    *(_OWORD *)uint64_t v4 = v68;
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v37[38] = *MEMORY[0x263EF8340];
  uint64_t v29 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  uint64_t v20 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.insert_slice", (const unsigned __int8 *)0x13, Context);
  if (!v21)
  {
    __int16 v33 = 1283;
    v32[2] = (uint64_t)"tensor.insert_slice";
    v32[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v31 = 259;
    llvm::operator+(v32, (uint64_t *)&v30, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v20);
  uint64_t v28 = *a3;
  uint64_t v22 = *a4;
  uint64_t v23 = *a5;
  mlir::ValueRange::ValueRange(v36, *(void *)a6, *(void *)(a6 + 8));
  mlir::ValueRange::ValueRange(v35, *(void *)a7, *(void *)(a7 + 8));
  mlir::ValueRange::ValueRange(v34, *(void *)a8, *(void *)(a8 + 8));
  mlir::tensor::InsertSliceOp::build(a1, (uint64_t)v37, v28, v22, v23, v36[0], v36[1], v24, v35[0], v35[1], v34[0], v34[1], *a9, a9[1], *a10, a10[1], *a11, a11[1]);
  uint64_t v25 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v26;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.yield", (const unsigned __int8 *)9, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"scf.yield";
    unint64_t v15[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void mlir::scf::ForOp::getCanonicalizationPatterns()
{
}

void mlir::scf::ForOp::getConstantStep(mlir::scf::ForOp *this@<X0>, uint64_t a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(*(void *)this + 72) + 88);
  unint64_t v7 = 0;
  uint64_t v8 = v3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v5 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v9);
  BOOL v6 = (*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v6) {
    unint64_t v7 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v9 != v11) {
    free(v9);
  }
  if (!v6)
  {
    mlir::IntegerAttr::getValue((uint64_t)&v7, (llvm::APInt *)&v9);
    *(_DWORD *)(a2 + 8) = v10;
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
LABEL_11:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

BOOL mlir::scf::ForallOp::verify(mlir::scf::ForallOp *this)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  unint64_t v174 = *(void *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(unsigned int *)(*(void *)this + 36);
  unint64_t v6 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v7 = (v6 >> 23) & 1;
  if (BYTE3(v6)) {
    uint64_t v8 = (_DWORD *)(*(void *)this + 16 * v7 + 64);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (v8[9] + v8[8] + v8[10]);
  if ((v8[11] + v9) - v9 == v5)
  {
    unsigned int v10 = v3;
    uint64_t v11 = *(void *)(((*(void *)this + 16 * v7 + 64 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v4 + 40)
                    + 8);
    if (v11) {
      uint64_t v12 = v11 - 8;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (const char *)v3;
    if (v3 + v5 == ((*(void *)(v12 + 56) - *(void *)(v12 + 48)) >> 3))
    {
      if (!v3)
      {
LABEL_16:
        int v15 = (void *)(v4 + 16 * v7 + 64);
        if (BYTE3(v6)) {
          __int16 v16 = v15;
        }
        else {
          __int16 v16 = 0;
        }
        int v17 = v16[11];
        if (v17)
        {
          unint64_t v18 = 0;
          uint64_t v19 = (v16[9] + v16[8] + v16[10]);
          unint64_t v20 = (v17 + v19) - v19;
          uint64_t v21 = *(void *)(v4 + 72) + 32 * v19;
          unsigned int v22 = 1;
          while ((*(void *)(*(void *)(*(void *)(v12 + 48) + 8 * (v10 + v22 - 1)) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v21 + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            unint64_t v18 = v22++;
            if (v20 <= v18) {
              goto LABEL_23;
            }
          }
          v166[0] = (void **)"type mismatch between ";
          __int16 v167 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
          if (v174)
          {
            int v168 = 5;
            long long v169 = (const char *)v18;
            unint64_t v112 = &v168;
            int v113 = (char *)v176;
            if (v177 >= v178)
            {
              unint64_t v149 = v177 + 1;
              if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
              {
                int64_t v162 = (char *)&v168 - (unsigned char *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                int v113 = (char *)v176;
                unint64_t v112 = (int *)((char *)v176 + v162);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                unint64_t v112 = &v168;
                int v113 = (char *)v176;
              }
            }
            int v114 = &v113[24 * v177];
            long long v115 = *(_OWORD *)v112;
            *((void *)v114 + 2) = *((void *)v112 + 2);
            *(_OWORD *)int v114 = v115;
            uint64_t v116 = ++v177;
            if (v174)
            {
              int v168 = 3;
              long long v169 = "-th output and corresponding block argument";
              uint64_t v170 = 43;
              uint64_t v117 = &v168;
              uint64_t v118 = (char *)v176;
              if (v116 >= v178)
              {
                unint64_t v152 = v116 + 1;
                BOOL v153 = (char *)v176 + 24 * v116 > (char *)&v168;
                if (v176 <= &v168 && v153)
                {
                  int64_t v164 = (char *)&v168 - (unsigned char *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  uint64_t v118 = (char *)v176;
                  uint64_t v117 = (int *)((char *)v176 + v164);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  uint64_t v117 = &v168;
                  uint64_t v118 = (char *)v176;
                }
              }
              uint64_t v119 = &v118[24 * v177];
              long long v120 = *(_OWORD *)v117;
              *((void *)v119 + 2) = *((void *)v117 + 2);
              *(_OWORD *)uint64_t v119 = v120;
              ++v177;
            }
          }
          uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          }
          if (!v184) {
            return v51;
          }
          long long v121 = __p;
          if (__p)
          {
            unsigned int v122 = v183;
            uint64_t v123 = __p;
            if (v183 != __p)
            {
              do
                unsigned int v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
              while (v122 != v121);
              uint64_t v123 = __p;
            }
            uint64_t v183 = v121;
            operator delete(v123);
          }
          unint64_t v77 = v180;
          if (!v180) {
            goto LABEL_151;
          }
          uint64_t v124 = v181;
          unint64_t v79 = v180;
          if (v181 == v180) {
            goto LABEL_150;
          }
          do
          {
            uint64_t v126 = *--v124;
            uint64_t v125 = v126;
            *uint64_t v124 = 0;
            if (v126) {
              MEMORY[0x21667D390](v125, 0x1000C8077774924);
            }
          }
          while (v124 != v77);
        }
        else
        {
LABEL_23:
          if (!*v15) {
            goto LABEL_30;
          }
          unint64_t v174 = *v15;
          v175[0] = 1;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v23) {
            goto LABEL_30;
          }
          unint64_t v174 = *(void *)(*(void *)this
                           + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                           + 64);
          v175[0] = v174 != 0;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (v24 != v13)
          {
            __int16 v167 = 257;
            mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
            uint64_t v127 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v174, "mapping attribute size must match op rank");
            uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v127);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v174);
            return v51;
          }
          unint64_t v174 = *(void *)(*(void *)this
                           + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                           + 64);
          v175[0] = v174 != 0;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v26)
          {
LABEL_30:
            uint64_t v29 = *(void *)this;
            if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
              unint64_t v30 = *(void *)this
            }
                  + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                  + 64;
            else {
              unint64_t v30 = 0;
            }
            unint64_t v174 = *(void *)(v30 + 8);
            __int16 v31 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            __int16 v33 = v32;
            unint64_t v34 = *(unsigned int *)(*(void *)this + 44);
            uint64_t v35 = *(void *)this + 16 * ((v34 >> 23) & 1) + 64;
            if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
              uint64_t v35 = 0;
            }
            if ((v34 & 0x800000) != 0) {
              uint64_t v36 = *(void *)(*(void *)this + 72);
            }
            else {
              uint64_t v36 = 0;
            }
            mlir::ValueRange::ValueRange(v173, v36, *(unsigned int *)(v35 + 32));
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (void **)"lower bound", (const char *)0xB, v10, v31, v33, v173[0], v173[1]))return 0; {
            unint64_t v37 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
            }
            if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
              unint64_t v37 = 0;
            }
            unint64_t v174 = *(void *)(v37 + 24);
            uint64_t v38 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            unint64_t v40 = v39;
            unint64_t v41 = *(unsigned int *)(*(void *)this + 44);
            uint64_t v42 = HIBYTE(*(_DWORD *)(*(void *)this + 44)) ? *(void *)this + 16 * ((v41 >> 23) & 1) + 64 : 0;
            uint64_t v43 = *(unsigned int *)(v42 + 32);
            int v44 = *(_DWORD *)(v42 + 36);
            uint64_t v45 = (v41 & 0x800000) != 0 ? *(void *)(*(void *)this + 72) : 0;
            mlir::ValueRange::ValueRange(v172, v45 + 32 * v43, (v44 + v43) - v43);
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (void **)"upper bound", (const char *)0xB, v10, v38, v40, v172[0], v172[1]))return 0; {
            StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides(this);
            }
            unint64_t v48 = v47;
            uint64_t DynamicStep = mlir::scf::ForallOp::getDynamicStep(this);
            mlir::ValueRange::ValueRange(v171, DynamicStep, v50);
            return mlir::verifyListOfOperandsOrIntegers(v29, (void **)"step", (const char *)4, v10, StaticStrides, v48, v171[0], v171[1]) != 0;
          }
          unint64_t v27 = (void **)Value;
          uint64_t v28 = 8 * v26;
          while (mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(**v27 + 8))
          {
            ++v27;
            v28 -= 8;
            if (!v28) {
              goto LABEL_30;
            }
          }
          __int16 v167 = 257;
          mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
          if (v174)
          {
            mlir::Diagnostic::operator<<((uint64_t)v175, **(void **)(*(void *)(*(void *)this + 48) + 96));
            if (v174)
            {
              int v168 = 3;
              long long v169 = " is not device mapping attribute";
              uint64_t v170 = 32;
              uint64_t v128 = &v168;
              uint64_t v129 = (char *)v176;
              if (v177 >= v178)
              {
                unint64_t v154 = v177 + 1;
                if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
                {
                  int64_t v165 = (char *)&v168 - (unsigned char *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  uint64_t v129 = (char *)v176;
                  uint64_t v128 = (int *)((char *)v176 + v165);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  uint64_t v128 = &v168;
                  uint64_t v129 = (char *)v176;
                }
              }
              uint64_t v130 = &v129[24 * v177];
              long long v131 = *(_OWORD *)v128;
              *((void *)v130 + 2) = *((void *)v128 + 2);
              *(_OWORD *)uint64_t v130 = v131;
              ++v177;
            }
          }
          uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          }
          if (!v184) {
            return v51;
          }
          uint64_t v132 = __p;
          if (__p)
          {
            BOOL v133 = v183;
            uint64_t v134 = __p;
            if (v183 != __p)
            {
              do
                BOOL v133 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v133 - 1);
              while (v133 != v132);
              uint64_t v134 = __p;
            }
            uint64_t v183 = v132;
            operator delete(v134);
          }
          unint64_t v77 = v180;
          if (!v180) {
            goto LABEL_151;
          }
          unsigned int v135 = v181;
          unint64_t v79 = v180;
          if (v181 == v180)
          {
LABEL_150:
            unsigned int v181 = v77;
            operator delete(v79);
LABEL_151:
            if (v176 != v179) {
              free(v176);
            }
            return v51;
          }
          do
          {
            uint64_t v137 = *--v135;
            uint64_t v136 = v137;
            *unsigned int v135 = 0;
            if (v137) {
              MEMORY[0x21667D390](v136, 0x1000C8077774924);
            }
          }
          while (v135 != v77);
        }
LABEL_149:
        unint64_t v79 = v180;
        goto LABEL_150;
      }
      __int16 v14 = 0;
      while (1)
      {
        unint64_t v174 = *(void *)(*(void *)(*(void *)(v12 + 48) + 8 * (void)v14) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!mlir::Type::isIndex((mlir::Type *)&v174)) {
          break;
        }
        if (v13 == ++v14)
        {
          uint64_t v4 = *(void *)this;
          unint64_t v6 = *(unsigned int *)(*(void *)this + 44);
          uint64_t v7 = (v6 >> 23) & 1;
          goto LABEL_16;
        }
      }
      v166[0] = (void **)"expects ";
      __int16 v167 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
      if (v174)
      {
        int v168 = 2;
        long long v169 = v14;
        uint64_t v97 = &v168;
        unint64_t v98 = (char *)v176;
        if (v177 >= v178)
        {
          unint64_t v148 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            int64_t v161 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            unint64_t v98 = (char *)v176;
            uint64_t v97 = (int *)((char *)v176 + v161);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            uint64_t v97 = &v168;
            unint64_t v98 = (char *)v176;
          }
        }
        unint64_t v99 = &v98[24 * v177];
        long long v100 = *(_OWORD *)v97;
        *((void *)v99 + 2) = *((void *)v97 + 2);
        *(_OWORD *)unint64_t v99 = v100;
        uint64_t v101 = ++v177;
        if (v174)
        {
          int v168 = 3;
          long long v169 = "-th block argument to be an index";
          uint64_t v170 = 33;
          uint64_t v102 = &v168;
          uint64_t v103 = (char *)v176;
          if (v101 >= v178)
          {
            unint64_t v150 = v101 + 1;
            BOOL v151 = (char *)v176 + 24 * v101 > (char *)&v168;
            if (v176 <= &v168 && v151)
            {
              int64_t v163 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              uint64_t v103 = (char *)v176;
              uint64_t v102 = (int *)((char *)v176 + v163);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              uint64_t v102 = &v168;
              uint64_t v103 = (char *)v176;
            }
          }
          unint64_t v104 = &v103[24 * v177];
          long long v105 = *(_OWORD *)v102;
          *((void *)v104 + 2) = *((void *)v102 + 2);
          *(_OWORD *)unint64_t v104 = v105;
          ++v177;
        }
      }
      uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      }
      if (v184)
      {
        long long v106 = __p;
        if (__p)
        {
          char v107 = v183;
          uint64_t v108 = __p;
          if (v183 != __p)
          {
            do
              char v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
            while (v107 != v106);
            uint64_t v108 = __p;
          }
          uint64_t v183 = v106;
          operator delete(v108);
        }
        unint64_t v77 = v180;
        if (!v180) {
          goto LABEL_151;
        }
        uint64_t v109 = v181;
        unint64_t v79 = v180;
        if (v181 == v180) {
          goto LABEL_150;
        }
        do
        {
          uint64_t v111 = *--v109;
          uint64_t v110 = v111;
          *uint64_t v109 = 0;
          if (v111) {
            MEMORY[0x21667D390](v110, 0x1000C8077774924);
          }
        }
        while (v109 != v77);
        goto LABEL_149;
      }
    }
    else
    {
      v166[0] = (void **)"region expects ";
      __int16 v167 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
      if (v174)
      {
        int v168 = 5;
        long long v169 = v13;
        BOOL v82 = &v168;
        unint64_t v83 = (char *)v176;
        if (v177 >= v178)
        {
          unint64_t v142 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            int64_t v157 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            unint64_t v83 = (char *)v176;
            BOOL v82 = (int *)((char *)v176 + v157);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            BOOL v82 = &v168;
            unint64_t v83 = (char *)v176;
          }
        }
        unsigned int v84 = &v83[24 * v177];
        long long v85 = *(_OWORD *)v82;
        *((void *)v84 + 2) = *((void *)v82 + 2);
        *(_OWORD *)unsigned int v84 = v85;
        uint64_t v86 = ++v177;
        if (v174)
        {
          int v168 = 3;
          long long v169 = " arguments";
          uint64_t v170 = 10;
          int64_t v87 = &v168;
          uint64_t v88 = (char *)v176;
          if (v86 >= v178)
          {
            unint64_t v144 = v86 + 1;
            BOOL v145 = (char *)v176 + 24 * v86 > (char *)&v168;
            if (v176 <= &v168 && v145)
            {
              int64_t v159 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              uint64_t v88 = (char *)v176;
              int64_t v87 = (int *)((char *)v176 + v159);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              int64_t v87 = &v168;
              uint64_t v88 = (char *)v176;
            }
          }
          int64_t v89 = &v88[24 * v177];
          long long v90 = *(_OWORD *)v87;
          *((void *)v89 + 2) = *((void *)v87 + 2);
          *(_OWORD *)int64_t v89 = v90;
          ++v177;
        }
      }
      uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      }
      if (v184)
      {
        int64_t v91 = __p;
        if (__p)
        {
          int64_t v92 = v183;
          uint64_t v93 = __p;
          if (v183 != __p)
          {
            do
              int64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
            while (v92 != v91);
            uint64_t v93 = __p;
          }
          uint64_t v183 = v91;
          operator delete(v93);
        }
        unint64_t v77 = v180;
        if (!v180) {
          goto LABEL_151;
        }
        __int16 v94 = v181;
        unint64_t v79 = v180;
        if (v181 == v180) {
          goto LABEL_150;
        }
        do
        {
          uint64_t v96 = *--v94;
          uint64_t v95 = v96;
          void *v94 = 0;
          if (v96) {
            MEMORY[0x21667D390](v95, 0x1000C8077774924);
          }
        }
        while (v94 != v77);
        goto LABEL_149;
      }
    }
  }
  else
  {
    v166[0] = (void **)"produces ";
    __int16 v167 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v166, (uint64_t)&v174);
    if (v174)
    {
      uint64_t v52 = (const char *)*(unsigned int *)(*(void *)this + 36);
      int v168 = 5;
      long long v169 = v52;
      uint64_t v53 = &v168;
      uint64_t v54 = (char *)v176;
      if (v177 >= v178)
      {
        unint64_t v139 = v177 + 1;
        if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
        {
          int64_t v155 = (char *)&v168 - (unsigned char *)v176;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          uint64_t v54 = (char *)v176;
          uint64_t v53 = (int *)((char *)v176 + v155);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          uint64_t v53 = &v168;
          uint64_t v54 = (char *)v176;
        }
      }
      uint64_t v55 = &v54[24 * v177];
      long long v56 = *(_OWORD *)v53;
      *((void *)v55 + 2) = *((void *)v53 + 2);
      *(_OWORD *)uint64_t v55 = v56;
      uint64_t v57 = ++v177;
      if (v174)
      {
        int v168 = 3;
        long long v169 = " results, but has only ";
        uint64_t v170 = 23;
        uint64_t v58 = &v168;
        uint64_t v59 = (char *)v176;
        if (v57 >= v178)
        {
          unint64_t v140 = v57 + 1;
          BOOL v141 = (char *)v176 + 24 * v57 > (char *)&v168;
          if (v176 <= &v168 && v141)
          {
            int64_t v156 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            uint64_t v59 = (char *)v176;
            uint64_t v58 = (int *)((char *)v176 + v156);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            uint64_t v58 = &v168;
            uint64_t v59 = (char *)v176;
          }
        }
        uint64_t v60 = &v59[24 * v177];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = *((void *)v58 + 2);
        *(_OWORD *)uint64_t v60 = v61;
        ++v177;
        if (v174)
        {
          uint64_t v62 = (_DWORD *)(*(void *)this
                         + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                         + 64);
          if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
            uint64_t v62 = 0;
          }
          int v63 = v62[11];
          uint64_t v64 = (v62[9] + v62[8] + v62[10]);
          int v168 = 5;
          long long v169 = (const char *)((v63 + v64) - v64);
          uint64_t v65 = &v168;
          uint64_t v66 = (char *)v176;
          if (v177 >= v178)
          {
            unint64_t v143 = v177 + 1;
            if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
            {
              int64_t v158 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              uint64_t v66 = (char *)v176;
              uint64_t v65 = (int *)((char *)v176 + v158);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              uint64_t v65 = &v168;
              uint64_t v66 = (char *)v176;
            }
          }
          uint64_t v67 = &v66[24 * v177];
          long long v68 = *(_OWORD *)v65;
          *((void *)v67 + 2) = *((void *)v65 + 2);
          *(_OWORD *)uint64_t v67 = v68;
          uint64_t v69 = ++v177;
          if (v174)
          {
            int v168 = 3;
            long long v169 = " outputs";
            uint64_t v170 = 8;
            uint64_t v70 = &v168;
            BOOL v71 = (char *)v176;
            if (v69 >= v178)
            {
              unint64_t v146 = v69 + 1;
              BOOL v147 = (char *)v176 + 24 * v69 > (char *)&v168;
              if (v176 <= &v168 && v147)
              {
                int64_t v160 = (char *)&v168 - (unsigned char *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                BOOL v71 = (char *)v176;
                uint64_t v70 = (int *)((char *)v176 + v160);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                uint64_t v70 = &v168;
                BOOL v71 = (char *)v176;
              }
            }
            char v72 = &v71[24 * v177];
            long long v73 = *(_OWORD *)v70;
            *((void *)v72 + 2) = *((void *)v70 + 2);
            *(_OWORD *)char v72 = v73;
            ++v177;
          }
        }
      }
    }
    uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
    if (v174) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
    }
    if (v184)
    {
      uint64_t v74 = __p;
      if (__p)
      {
        unint64_t v75 = v183;
        uint64_t v76 = __p;
        if (v183 != __p)
        {
          do
            unint64_t v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          uint64_t v76 = __p;
        }
        uint64_t v183 = v74;
        operator delete(v76);
      }
      unint64_t v77 = v180;
      if (!v180) {
        goto LABEL_151;
      }
      uint64_t v78 = v181;
      unint64_t v79 = v180;
      if (v181 == v180) {
        goto LABEL_150;
      }
      do
      {
        uint64_t v81 = *--v78;
        uint64_t v80 = v81;
        *uint64_t v78 = 0;
        if (v81) {
          MEMORY[0x21667D390](v80, 0x1000C8077774924);
        }
      }
      while (v78 != v77);
      goto LABEL_149;
    }
  }
  return v51;
}

uint64_t mlir::scf::ForallOp::getDynamicStep(mlir::scf::ForallOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 36) + *(_DWORD *)(v2 + 32));
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::scf::ForallOp::print(mlir::scf::ForallOp *this, mlir::OpAsmPrinter *a2)
{
  v116[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned char **)this;
  uint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v6 = (_WORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 1uLL)
  {
    *unint64_t v6 = 10272;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, " (", 2uLL);
  }
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v8 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  uint64_t v9 = *(void *)(((v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v9) {
    uint64_t v10 = v9 - 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 48);
  unint64_t v12 = (*(void *)(v10 + 56) - v11) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v8 = 0;
  }
  AttrDictionary = *(const char **)(v8 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v12 >= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&AttrDictionary, v11, v14);
  int v15 = AttrDictionary;
  uint64_t v16 = v105;
  int v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  AttrDictionary = ", ";
  uint64_t v105 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v15, 0, (uint64_t)v15, v16, (uint64_t)a2, v17, (uint64_t)&AttrDictionary);
  LODWORD(v15) = mlir::scf::ForallOp::isNormalized(this);
  unint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = *((void *)v18 + 4);
  unint64_t v20 = *((void *)v18 + 3) - v19;
  if (v15)
  {
    if (v20 > 4)
    {
      *(unsigned char *)(v19 + 4) = 32;
      *(_DWORD *)uint64_t v19 = 1852383273;
      *((void *)v18 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v18, ") in ", 5uLL);
    }
    unint64_t v21 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v22 = *(void *)this + 16 * ((v21 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int *)(v22 + 32);
    if ((v21 & 0x800000) != 0) {
      uint64_t v24 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v24 + 32 * v23;
    uint64_t v26 = (*(_DWORD *)(v22 + 36) + v23) - v23;
    AttrDictionary = *(const char **)(v22 + 24);
    unint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v29 = v28;
    mlir::ValueRange::ValueRange(v116, 0, 0);
    uint64_t v30 = v116[0];
    uint64_t v31 = v116[1];
  }
  else
  {
    if (v20 > 3)
    {
      *(_DWORD *)uint64_t v19 = 540876841;
      *((void *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, ") = ", 4uLL);
    }
    unint64_t v32 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v33 = *(void *)this + 16 * ((v32 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(unsigned int *)(v33 + 32);
    if ((v32 & 0x800000) != 0) {
      uint64_t v35 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v35 = 0;
    }
    AttrDictionary = *(const char **)(v33 + 8);
    uint64_t v36 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v38 = v37;
    mlir::ValueRange::ValueRange(v115, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v35, v34, v36, v38, v115[0], v115[1], 0, 0, 1);
    uint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v40 = (_DWORD *)*((void *)v39 + 4);
    if (*((void *)v39 + 3) - (void)v40 > 3uLL)
    {
      *unint64_t v40 = 544175136;
      *((void *)v39 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v39, " to ", 4uLL);
    }
    unint64_t v41 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v42 = *(void *)this + 16 * ((v41 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(unsigned int *)(v42 + 32);
    if ((v41 & 0x800000) != 0) {
      uint64_t v44 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = v44 + 32 * v43;
    uint64_t v46 = (*(_DWORD *)(v42 + 36) + v43) - v43;
    AttrDictionary = *(const char **)(v42 + 24);
    uint64_t v47 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v49 = v48;
    mlir::ValueRange::ValueRange(v114, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v45, v46, v47, v49, v114[0], v114[1], 0, 0, 1);
    unint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v51 = *((void *)v50 + 4);
    if ((unint64_t)(*((void *)v50 + 3) - v51) > 5)
    {
      *(_WORD *)(v51 + 4) = 8304;
      *(_DWORD *)uint64_t v51 = 1702130464;
      *((void *)v50 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v50, " step ", 6uLL);
    }
    unint64_t v52 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v53 = *(void *)this + 16 * ((v52 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v53 = 0;
    }
    if ((v52 & 0x800000) != 0) {
      uint64_t v54 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = (*(_DWORD *)(v53 + 36) + *(_DWORD *)(v53 + 32));
    uint64_t v25 = v54 + 32 * v55;
    uint64_t v26 = (*(_DWORD *)(v53 + 40) + v55) - v55;
    AttrDictionary = *(const char **)(v53 + 16);
    unint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v29 = v56;
    mlir::ValueRange::ValueRange(v113, 0, 0);
    uint64_t v30 = v113[0];
    uint64_t v31 = v113[1];
  }
  mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v25, v26, v27, v29, v30, v31, 0, 0, 1);
  unint64_t v57 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v58 = *(void *)this + 16 * ((v57 >> 23) & 1) + 64;
  uint64_t v59 = *(void *)(((v58 + ((v57 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v59) {
    uint64_t v60 = v59 - 8;
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v61 = *(void *)(v60 + 48);
  uint64_t v62 = (*(void *)(v60 + 56) - v61) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v58 = 0;
  }
  AttrDictionary = *(const char **)(v58 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  uint64_t v64 = v62 - v63;
  uint64_t v65 = (void *)(v61 + 8 * v63);
  unint64_t v66 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v67 = (_DWORD *)(*(void *)this + 16 * ((v66 >> 23) & 1) + 64);
  }
  else {
    uint64_t v67 = 0;
  }
  int v68 = v67[8];
  int v69 = v67[9];
  int v71 = v67[10];
  int v70 = v67[11];
  if ((v66 & 0x800000) != 0) {
    uint64_t v72 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v72 = 0;
  }
  mlir::ValueRange::ValueRange(v112, v72 + 32 * (v69 + v68 + v71), (v70 + v69 + v68 + v71) - (unint64_t)(v69 + v68 + v71));
  printInitializationList(a2, v65, v64, v112[0], v112[1], " shared_outs", 0xCuLL);
  long long v73 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v74 = (unsigned char *)*((void *)v73 + 4);
  if (*((unsigned char **)v73 + 3) == v74)
  {
    llvm::raw_ostream::write(v73, " ", 1uLL);
  }
  else
  {
    unsigned char *v74 = 32;
    ++*((void *)v73 + 4);
  }
  unint64_t v75 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v76 = *(void *)this + 16 * ((v75 >> 23) & 1) + 64;
  uint64_t v77 = *(void *)(((v76 + ((v75 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v77) {
    uint64_t v78 = v77 - 8;
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t v79 = *(void *)(v78 + 56) - *(void *)(v78 + 48);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v76 = 0;
  }
  AttrDictionary = *(const char **)(v76 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v80 != v79 >> 3)
  {
    uint64_t v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v82 = (_DWORD *)*((void *)v81 + 4);
    if (*((void *)v81 + 3) - (void)v82 > 3uLL)
    {
      _DWORD *v82 = 673201709;
      *((void *)v81 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v81, "-> (", 4uLL);
    }
    uint64_t v83 = *(unsigned int *)(*(void *)this + 36);
    unsigned int v84 = (const char *)(*(void *)this - 16);
    if (!v83) {
      unsigned int v84 = 0;
    }
    uint64_t v102 = v84;
    uint64_t v103 = v83;
    mlir::OperandRange::getTypes((uint64_t *)&v102, (uint64_t *)&AttrDictionary);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)AttrDictionary, v105, AttrData, v107, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v102);
    long long v85 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v86 = (_WORD *)*((void *)v85 + 4);
    if (*((void *)v85 + 3) - (void)v86 > 1uLL)
    {
      _WORD *v86 = 8233;
      *((void *)v85 + 4) += 2;
      uint64_t v87 = *(void *)this;
      unint64_t v88 = *(unsigned int *)(*(void *)this + 44);
      if ((v88 & 0x7FFFFF) != 0) {
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    llvm::raw_ostream::write(v85, ") ", 2uLL);
  }
  uint64_t v87 = *(void *)this;
  unint64_t v88 = *(unsigned int *)(*(void *)this + 44);
  if ((v88 & 0x7FFFFF) != 0)
  {
LABEL_70:
    unint64_t v89 = ((v87 + 16 * ((v88 >> 23) & 1) + ((v88 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v87 + 40);
    goto LABEL_73;
  }
LABEL_72:
  unint64_t v89 = 0;
LABEL_73:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v89, 0, *(_DWORD *)(v87 + 36) != 0, 0);
  if (v4[47])
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v93 = v92;
  uint64_t v102 = *(const char **)(*(void *)(*(void *)(*(void *)this + 48) + 96)
                        + 8 * *(void *)(*(void *)(*(void *)this + 48) + 104)
                        - 8);
  AttrDictionary = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v102);
  uint64_t v105 = v94;
  uint64_t v101 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v101);
  uint64_t v107 = v95;
  uint64_t v100 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 24);
  uint64_t v108 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v100);
  uint64_t v109 = v96;
  uint64_t v99 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16);
  uint64_t v110 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v99);
  uint64_t v111 = v97;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, Value, v93, &AttrDictionary, 4);
}

uint64_t mlir::scf::ForallOp::isNormalized(mlir::scf::ForallOp *this)
{
  v21[6] = *MEMORY[0x263EF8340];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&v19);
  if (!v20)
  {
LABEL_9:
    mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v16);
    unint64_t v7 = (uint64_t *)v16;
    if (v17)
    {
      uint64_t v8 = 8 * v17 - 8;
      do
      {
        uint64_t v9 = *v7++;
        ConstantIntuint64_t Value = mlir::getConstantIntValue(v9);
        if (v11) {
          BOOL v12 = ConstantIntValue == 1;
        }
        else {
          BOOL v12 = 0;
        }
        uint64_t v14 = v12;
        BOOL v13 = v14 != 1 || v8 == 0;
        v8 -= 8;
      }
      while (!v13);
      unint64_t v7 = (uint64_t *)v16;
      if (v16 == v18) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = 1;
      if (v16 == v18) {
        goto LABEL_26;
      }
    }
    free(v7);
    goto LABEL_26;
  }
  uint64_t v2 = (uint64_t *)v19;
  uint64_t v3 = 8 * v20;
  while (1)
  {
    unint64_t v4 = mlir::getConstantIntValue(*v2);
    if (!v5 || v4 != 0) {
      break;
    }
    ++v2;
    v3 -= 8;
    if (!v3) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
LABEL_26:
  if (v19 != v21) {
    free(v19);
  }
  return v14;
}

uint64_t mlir::scf::ForallOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  v46[32] = *MEMORY[0x263EF8340];
  v23[0] = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  memset(&v23[1], 0, 24);
  uint64_t IndexType = mlir::Builder::getIndexType(v23, v4);
  uint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t, void, void))(*(void *)a1 + 736))(a1, &v44, 1, 0, 0))
  {
    uint64_t v10 = 0;
    goto LABEL_37;
  }
  uint64_t v21 = 0;
  uint64_t DenseI64ArrayAttr = 0;
  uint64_t v20 = 0;
  unint64_t v41 = v43;
  uint64_t v42 = 0x100000000;
  uint64_t v38 = v40;
  uint64_t v39 = 0x100000000;
  uint64_t v35 = v37;
  uint64_t v36 = 0x100000000;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "in", 2))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v38, &v21, (uint64_t *)&__b, 0))
    {
      if (v39)
      {
        unint64_t v6 = (char *)v38;
        uint64_t v7 = 32 * v39;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v6, IndexType, a2 + 16))
        {
          v6 += 32;
          v7 -= 32;
          if (!v7) {
            goto LABEL_8;
          }
        }
        goto LABEL_30;
      }
LABEL_8:
      unint64_t v8 = v45;
      __b = v33;
      HIDWORD(v32) = 6;
      if (v45 < 7)
      {
        if (v45) {
          bzero(v33, 8 * v45);
        }
        uint64_t v9 = v33;
      }
      else
      {
        LODWORD(v32) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v33, v45, 8);
        uint64_t v9 = __b;
        bzero(__b, 8 * v8);
      }
      LODWORD(v32) = v8;
      uint64_t DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v23, (uint64_t)v9, v8);
      if (__b != v33) {
        free(__b);
      }
      __b = v33;
      HIDWORD(v32) = 6;
      if (v8 < 7)
      {
        if (v8) {
          memset_pattern16(v33, &unk_211ED5510, 8 * v8);
        }
        unint64_t v18 = v33;
      }
      else
      {
        LODWORD(v32) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v33, v8, 8);
        unint64_t v18 = __b;
        memset_pattern16(__b, &unk_211ED5510, 8 * v8);
      }
      LODWORD(v32) = v8;
      uint64_t v20 = mlir::Builder::getDenseI64ArrayAttr(v23, (uint64_t)v18, v8);
      if (__b != v33) {
        free(__b);
      }
LABEL_52:
      __b = v33;
      uint64_t v32 = 0x400000000;
      uint64_t v28 = v30;
      uint64_t v29 = 0x400000000;
      uint64_t v19 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "shared_outs", 11))goto LABEL_57; {
      if (v29 == *(_DWORD *)(a2 + 72))
      }
      {
        if (mlir::OpAsmParser::parseAssignmentList((uint64_t)a1)
          && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 536))(a1, a2 + 64)
          && mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>((uint64_t)a1, (uint64_t *)&v28, a2 + 64, v19, a2 + 16))
        {
LABEL_57:
          v24[0] = &v25;
          v24[1] = (void *)0x400000000;
          operator new();
        }
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v26 = "mismatch between out operands and types";
        __int16 v27 = 259;
        (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(v24, a1, v19, &v26);
        uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v24);
      }
      if (v28 != v30) {
        free(v28);
      }
      if (__b != v33) {
        free(__b);
      }
      goto LABEL_31;
    }
  }
  else if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 136))(a1))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v41, &DenseI64ArrayAttr, (uint64_t *)&__b, 0))
    {
      if (v42)
      {
        char v11 = (char *)v41;
        uint64_t v12 = 32 * v42;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IndexType, a2 + 16))
        {
          v11 += 32;
          v12 -= 32;
          if (!v12) {
            goto LABEL_17;
          }
        }
        goto LABEL_30;
      }
LABEL_17:
      __int16 v34 = 257;
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &__b))
      {
        __b = 0;
        if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v38, &v21, (uint64_t *)&__b, 0))
        {
          if (v39)
          {
            BOOL v13 = (char *)v38;
            uint64_t v14 = 32 * v39;
            while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, IndexType, a2 + 16))
            {
              v13 += 32;
              v14 -= 32;
              if (!v14) {
                goto LABEL_23;
              }
            }
            goto LABEL_30;
          }
LABEL_23:
          __int16 v34 = 257;
          if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &__b))
          {
            __b = 0;
            if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v35, &v20, (uint64_t *)&__b, 0))
            {
              if (v36)
              {
                int v15 = (char *)v35;
                uint64_t v16 = 32 * v36;
                while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IndexType, a2 + 16))
                {
                  v15 += 32;
                  v16 -= 32;
                  if (!v16) {
                    goto LABEL_52;
                  }
                }
                goto LABEL_30;
              }
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_30:
  uint64_t v10 = 0;
LABEL_31:
  if (v35 != v37) {
    free(v35);
  }
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != v43) {
    free(v41);
  }
LABEL_37:
  if (v44 != v46) {
    free(v44);
  }
  return v10;
}

void mlir::scf::ForallOp::ensureTerminator(void *a1, uint64_t a2, uint64_t a3)
{
  v9[2] = *MEMORY[0x263EF8340];
  mlir::impl::ensureRegionTerminator(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::buildTerminator);
  uint64_t v4 = a1[1];
  if (v4) {
    char v5 = (ZinIrHalH13g **)(v4 - 8);
  }
  else {
    char v5 = 0;
  }
  mlir::Block::getTerminator(v5);
  if (*(_UNKNOWN **)(*(void *)(v6 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = (void *)(((v7
                  + 16 * (((unint64_t)*(unsigned int *)(v7 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(v7 + 44) >> 21) & 0x7F8)
                  + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v7 + 40));
  if ((void *)*v8 == v8)
  {
    mlir::ValueRange::ValueRange(v9, 0, 0);
    mlir::OpBuilder::createBlock();
  }
}

void mlir::scf::ForallOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, char a12)
{
  v57[6] = *MEMORY[0x263EF8340];
  uint64_t v55 = v57;
  uint64_t v56 = 0x600000000;
  unint64_t v52 = &v54;
  uint64_t v53 = 0x600000000;
  uint64_t v49 = &v51;
  uint64_t v50 = 0x600000000;
  uint64_t v46 = &v48;
  uint64_t v47 = 0x600000000;
  uint64_t v43 = &v45;
  uint64_t v44 = 0x600000000;
  unint64_t v40 = &v42;
  uint64_t v41 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a3, a4, (uint64_t)&v46, (uint64_t)&v55);
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v43, (uint64_t)&v52);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v40, (uint64_t)&v49);
  mlir::ValueRange::ValueRange(v39, (uint64_t)v46, v47);
  mlir::OperationState::addOperands(a2, v39[0], v39[1]);
  mlir::ValueRange::ValueRange(v38, (uint64_t)v43, v44);
  mlir::OperationState::addOperands(a2, v38[0], v38[1]);
  mlir::ValueRange::ValueRange(v37, (uint64_t)v40, v41);
  mlir::OperationState::addOperands(a2, v37[0], v37[1]);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::TypeRange::TypeRange((unint64_t *)&v33, a9, a10);
  uint64_t v19 = v33;
  uint64_t v18 = v34;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  if (v34 + v20 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v34 + v20, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(a2 + 64) + 8 * v20;
    do
    {
      *(void *)(v22 + 8 * v21) = mlir::TypeRange::dereference_iterator((uint64_t)v19, v21);
      ++v21;
    }
    while (v18 != v21);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v18;
  uint64_t v23 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  uint64_t DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v55, v56);
  ZinMirCacheTensors::ZinMirCacheTensors(&v33, v23, DenseI64ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v33, v34);
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 24);
  uint64_t v26 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v52, v53);
  ZinMirCacheTensors::ZinMirCacheTensors(&v33, v25, v26);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v33, v34);
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16);
  uint64_t v28 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v49, v50);
  ZinMirCacheTensors::ZinMirCacheTensors(&v33, v27, v28);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v33, v34);
  v36[0] = v47;
  v36[1] = v44;
  unint64_t v36[2] = v41;
  v36[3] = a10;
  uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)v36, 4);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v35) = 261;
  uint64_t v33 = "operandSegmentSizes";
  uint64_t v34 = 19;
  uint64_t v31 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v33);
  ZinMirCacheTensors::ZinMirCacheTensors(v32, v31, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v32[0], (uint64_t)v32[1]);
  if (a12)
  {
    ZinMirCacheTensors::ZinMirCacheTensors(&v33, **(void **)(*(void *)(a2 + 8) + 96), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v33, v34);
  }
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

uint64_t mlir::scf::ForallOp::getSingleInductionVar(mlir::scf::ForallOp *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  v13[0] = *(void *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
  uint64_t result = 0;
  if (v4 == 1)
  {
    unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v6 = *(void *)this + 16 * ((v5 >> 23) & 1) + 64;
    uint64_t v7 = *(void *)(((v6 + ((v5 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(*(void *)this + 40)
                   + 8);
    if (v7) {
      uint64_t v8 = v7 - 8;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(v8 + 48);
    unint64_t v10 = (*(void *)(v8 + 56) - v9) >> 3;
    if (!BYTE3(v5)) {
      uint64_t v6 = 0;
    }
    v13[0] = *(void *)(v6 + 8);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
    if (v10 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    mlir::ValueRange::ValueRange(v13, v9, v12);
    return mlir::ValueRange::dereference_iterator(v13, 0);
  }
  return result;
}

void mlir::scf::ForallOp::getCanonicalizationPatterns()
{
}

__n128 mlir::scf::ForallOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned int *)(*(void *)a1 + 44);
  if ((v4 & 0x7FFFFF) != 0) {
    unint64_t v5 = ((*(void *)a1 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(*(void *)a1 + 40);
  else {
    unint64_t v5 = 0;
  }
  unint64_t v22 = v5;
  uint64_t v6 = (__n128 *)&v22;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  unint64_t v8 = *(void *)a3;
  if (v7 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_5;
  }
  unint64_t v16 = v7 + 1;
  BOOL v17 = v8 + 24 * v7 > (unint64_t)&v22;
  if (v8 > (unint64_t)&v22 || !v17)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
    unint64_t v8 = *(void *)a3;
LABEL_5:
    uint64_t v9 = (char *)&v22;
    goto LABEL_6;
  }
  uint64_t v20 = (char *)&v23[-1] - v8;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
  unint64_t v8 = *(void *)a3;
  uint64_t v9 = &v20[*(void *)a3];
LABEL_6:
  uint64_t v10 = v8 + 24 * *(unsigned int *)(a3 + 8);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a3 + 8);
  unint64_t v22 = 0;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  unint64_t v13 = *(void *)a3;
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v18 = v12 + 1;
    BOOL v19 = v13 + 24 * v12 > (unint64_t)&v22;
    if (v13 <= (unint64_t)&v22 && v19)
    {
      uint64_t v21 = (char *)&v23[-1] - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      unint64_t v13 = *(void *)a3;
      uint64_t v6 = (__n128 *)&v21[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      unint64_t v13 = *(void *)a3;
      uint64_t v6 = (__n128 *)&v22;
    }
  }
  uint64_t v14 = (__n128 *)(v13 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v6;
  v14[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v14 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::InParallelOp::verify(mlir::scf::InParallelOp *this)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(mlir::Block **)(*(void *)this + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp
      && *(void *)(*(void *)(ParentOp + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    {
      uint64_t v14 = *(void *)(((*(void *)this
                        + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                        + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(*(void *)this + 40)
                      + 8);
      if (v14) {
        uint64_t v15 = v14 - 8;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (ZinIrHalH13g *)(v15 + 32);
      BOOL v17 = *(ZinIrHalH13g **)(v15 + 40);
      if (v17 == (ZinIrHalH13g *)(v15 + 32)) {
        return 1;
      }
      uint64_t v18 = ParentOp;
      uint64_t v19 = ParentOp + 64;
      while (1)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v17);
        if (*(_UNKNOWN **)(*(void *)(v20 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::ParallelInsertSliceOp,void>::id) {
          break;
        }
        uint64_t v21 = v20;
        uint64_t v58 = v20;
        uint64_t Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v58);
        unint64_t v23 = *(unsigned int *)(v18 + 44);
        uint64_t v24 = *(void *)(((v19 + 16 * ((v23 >> 23) & 1) + ((v23 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v18 + 40)
                        + 8);
        if (v24) {
          uint64_t v25 = v24 - 8;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void *)(v25 + 48);
        uint64_t v27 = *(void *)(v25 + 56) - v26;
        uint64_t v28 = v27 >> 3;
        if (HIBYTE(*(_DWORD *)(v18 + 44))) {
          uint64_t v29 = v19 + 16 * ((v23 >> 23) & 1);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v58 = *(void *)(v29 + 8);
        mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v58);
        uint64_t v31 = (void *)(v26 + 8 * v30);
        if (v28 != v30)
        {
          uint64_t v32 = 8 * v28 - 8 * v30;
          uint64_t v31 = (void *)(v26 + 8 * v30);
          while (*v31 != Dest)
          {
            ++v31;
            v32 -= 8;
            if (!v32)
            {
              uint64_t v31 = (void *)(v26 + (v27 & 0xFFFFFFFFFFFFFFF8));
              break;
            }
          }
        }
        if (v28 - v30 == ((uint64_t)v31 - v26 + -8 * v30) >> 3)
        {
          uint64_t v54 = (void **)"may only insert into an output block argument";
          __int16 v57 = 259;
          mlir::Operation::emitOpError(v21, &v54, (uint64_t)&v58);
          uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          if (v58) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          }
          if (!v68) {
            return v5;
          }
          uint64_t v43 = __p;
          if (__p)
          {
            uint64_t v44 = v67;
            uint64_t v45 = __p;
            if (v67 != __p)
            {
              do
                uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              uint64_t v45 = __p;
            }
            uint64_t v67 = v43;
            operator delete(v45);
          }
          uint64_t v9 = v64;
          if (!v64) {
            goto LABEL_74;
          }
          uint64_t v46 = v65;
          long long v11 = v64;
          if (v65 == v64) {
            goto LABEL_73;
          }
          do
          {
            uint64_t v48 = *--v46;
            uint64_t v47 = v48;
            *uint64_t v46 = 0;
            if (v48) {
              MEMORY[0x21667D390](v47, 0x1000C8077774924);
            }
          }
          while (v46 != v9);
          goto LABEL_72;
        }
        BOOL v17 = (ZinIrHalH13g *)*((void *)v17 + 1);
        if (v17 == v16) {
          return 1;
        }
      }
      unint64_t v52 = (void **)"expected only ";
      __int16 v53 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, &v52, (uint64_t)&v58);
      if (v58)
      {
        __int16 v57 = 262;
        uint64_t v54 = (void **)"tensor.parallel_insert_slice";
        uint64_t v55 = 28;
        mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
        if (v58)
        {
          LODWORD(v54) = 3;
          uint64_t v55 = (uint64_t)" ops";
          uint64_t v56 = 4;
          uint64_t v33 = &v54;
          uint64_t v34 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v50 = v61 + 1;
            if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
            {
              int64_t v51 = (char *)&v54 - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              uint64_t v34 = (char *)v60;
              uint64_t v33 = (void ***)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              uint64_t v33 = &v54;
              uint64_t v34 = (char *)v60;
            }
          }
          uint64_t v35 = &v34[24 * v61];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v61;
        }
      }
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
      if (v58) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
      }
      if (!v68) {
        return v5;
      }
      uint64_t v37 = __p;
      if (__p)
      {
        uint64_t v38 = v67;
        uint64_t v39 = __p;
        if (v67 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          uint64_t v39 = __p;
        }
        uint64_t v67 = v37;
        operator delete(v39);
      }
      uint64_t v9 = v64;
      if (!v64) {
        goto LABEL_74;
      }
      unint64_t v40 = v65;
      long long v11 = v64;
      if (v65 == v64) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v42 = *--v40;
        uint64_t v41 = v42;
        *unint64_t v40 = 0;
        if (v42) {
          MEMORY[0x21667D390](v41, 0x1000C8077774924);
        }
      }
      while (v40 != v9);
      goto LABEL_72;
    }
  }
  uint64_t v54 = (void **)"expected forall op parent";
  __int16 v57 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v54, (uint64_t)&v58);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
  if (v58) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  }
  if (v68)
  {
    uint64_t v6 = __p;
    if (__p)
    {
      uint64_t v7 = v67;
      unint64_t v8 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        unint64_t v8 = __p;
      }
      uint64_t v67 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v64;
    if (!v64) {
      goto LABEL_74;
    }
    uint64_t v10 = v65;
    long long v11 = v64;
    if (v65 == v64)
    {
LABEL_73:
      uint64_t v65 = v9;
      operator delete(v11);
LABEL_74:
      if (v60 != v63) {
        free(v60);
      }
      return v5;
    }
    do
    {
      uint64_t v13 = *--v10;
      uint64_t v12 = v13;
      void *v10 = 0;
      if (v13) {
        MEMORY[0x21667D390](v12, 0x1000C8077774924);
      }
    }
    while (v10 != v9);
LABEL_72:
    long long v11 = v64;
    goto LABEL_73;
  }
  return v5;
}

uint64_t mlir::scf::InParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
    uint64_t v6 = *this;
    unint64_t v7 = *((unsigned int *)*this + 11);
    if ((v7 & 0x7FFFFF) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
    uint64_t v6 = *this;
    unint64_t v7 = *((unsigned int *)*this + 11);
    if ((v7 & 0x7FFFFF) != 0)
    {
LABEL_3:
      unint64_t v8 = (((unint64_t)v6 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)v6 + 10);
      goto LABEL_6;
    }
  }
  unint64_t v8 = 0;
LABEL_6:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, void, void))(*(void *)a2 + 224))(a2, v8, 0, 0, 0);
  uint64_t v9 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v9);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v9 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v12, 0, 0);
}

void mlir::scf::InParallelOp::parse(uint64_t a1)
{
  v3[64] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v1 = v3;
  uint64_t v2 = 0x800000000;
  operator new();
}

uint64_t mlir::scf::IfOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*(void *)(a4 + 32)) {
    return 0;
  }
  uint64_t v6 = (void *)mlir::RegionRange::dereference_iterator((void *)(a4 + 24), 0);
  if ((void *)*v6 == v6) {
    return 0;
  }
  uint64_t v7 = v6[1];
  uint64_t v8 = v7 ? v7 - 8 : 0;
  uint64_t v9 = *(ZinIrHalH13g **)(v8 + 32);
  if (v9 == (ZinIrHalH13g *)(v8 + 32)) {
    return 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(v9);
  if (!v10
    || *(void *)(*(void *)(v10 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
  {
    return 0;
  }
  if ((*(unsigned char *)(v10 + 46) & 0x80) != 0)
  {
    uint64_t v13 = *(void *)(v10 + 72);
    unint64_t v14 = *(unsigned int *)(v10 + 68);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
  }
  uint64_t v19 = v13;
  unint64_t v20 = v14;
  mlir::OperandRange::getTypes(&v19, &v15);
  mlir::ValueRange::ValueRange((unint64_t *)&v19, v15 + 32 * v16, v17 - v16);
  mlir::TypeRange::TypeRange(v18, v19, v20);
  llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(a5, *(void *)a5 + 8 * *(unsigned int *)(a5 + 8), v18[0], 0, v18[0], v18[1]);
  return 1;
}

unint64_t *llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = (a2 - *(void *)a1) >> 3;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  unint64_t v13 = *(unsigned int *)(a1 + 12);
  unsigned int v15 = *(_DWORD *)(a1 + 8);
  unint64_t v16 = a6 - a4;
  unint64_t v17 = a6 - a4 + v14;
  if (*(void *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      uint64_t v11 = *(void *)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v18 = (unint64_t *)(v11 + 8 * v12);
    uint64_t v19 = v12;
    unint64_t v20 = (unint64_t *)(v11 + 8 * v14);
    unint64_t v21 = v20 - v18;
    if (v21 < v16)
    {
      unsigned int v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        unint64_t v23 = v18;
        do
        {
          *v23++ = mlir::TypeRange::dereference_iterator(a3, v8++);
          --v21;
        }
        while (v21);
      }
      if (a3 != a5 || v8 != a6)
      {
        if (a3 != a5)
        {
          while (1)
            *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        }
        do
          *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        while (a6 != v8);
      }
      return v18;
    }
    uint64_t v26 = 8 * v16;
    unint64_t v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    uint64_t v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8) {
      goto LABEL_33;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v28);
    uint64_t v31 = 8 * a6;
    unint64_t v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      uint64_t v34 = 8 * v28 + *(void *)a1;
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        uint64_t v35 = (v32 >> 3) + 1;
        uint64_t v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v30 = (void *)((char *)v30 + v36 * 8);
        uint64_t v33 = &v29[v36];
        uint64_t v37 = (long long *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        uint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18) {
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    }
    if (a3 != a5 || a6 != v8)
    {
      if (a3 != a5)
      {
        while (1)
          *v18++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      }
      uint64_t v42 = v18;
      do
        *v42++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  BOOL v24 = a3 != a5;
  if (a6 != v8 || a3 != a5)
  {
    uint64_t v25 = (unint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    }
    do
      *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    while (a6 != v8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (unint64_t *)(v11 + 8 * v12);
}

void mlir::scf::IfOp::build(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void v12[6];

  v12[5] = *MEMORY[0x263EF8340];
  v12[0] = a5;
  uint64_t v8 = a2 + 16;
  uint64_t v9 = a2[18];
  if (a4 + v9 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, a2 + 20, a4 + v9, 8);
    LODWORD(v9) = a2[18];
  }
  if (a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *v8 + 8 * v9;
    do
    {
      *(void *)(v11 + 8 * v10) = mlir::TypeRange::dereference_iterator(a3, v10);
      ++v10;
    }
    while (a4 != v10);
    LODWORD(v9) = a2[18];
  }
  a2[18] = v9 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)v12, 1);
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void v12[6];

  v12[5] = *MEMORY[0x263EF8340];
  v12[0] = a5;
  uint64_t v8 = a2 + 16;
  uint64_t v9 = a2[18];
  if (a4 + v9 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, a2 + 20, a4 + v9, 8);
    LODWORD(v9) = a2[18];
  }
  if (a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *v8 + 8 * v9;
    do
    {
      *(void *)(v11 + 8 * v10) = mlir::TypeRange::dereference_iterator(a3, v10);
      ++v10;
    }
    while (a4 != v10);
    LODWORD(v9) = a2[18];
  }
  a2[18] = v9 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)v12, 1);
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

uint64_t mlir::scf::IfOp::verify(mlir::scf::IfOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  if (!*(_DWORD *)(*(void *)this + 36)) {
    return 1;
  }
  unint64_t v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
  {
    unint64_t v3 = ((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v1 + 40);
    if (*(void *)(v3 + 24) != v3 + 24) {
      return 1;
    }
  }
  else if (MEMORY[0x18] != 24)
  {
    return 1;
  }
  uint64_t v14 = (void **)"must have an else block if defining values";
  __int16 v15 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  }
  if (v23)
  {
    uint64_t v6 = __p;
    if (__p)
    {
      uint64_t v7 = v22;
      uint64_t v8 = __p;
      if (v22 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      unsigned int v22 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = v20;
      uint64_t v11 = v19;
      if (v20 != v19)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          void *v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v19;
      }
      unint64_t v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18) {
      free(v17);
    }
  }
  return v4;
}

void mlir::scf::IfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
}

uint64_t mlir::scf::IfOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  unsigned int v6 = (*this)[9];
  if (v6)
  {
    uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v8 = *((void *)v7 + 4);
    if ((unint64_t)(*((void *)v7 + 3) - v8) > 4)
    {
      *(unsigned char *)(v8 + 4) = 40;
      *(_DWORD *)uint64_t v8 = 540945696;
      *((void *)v7 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v7, " -> (", 5uLL);
    }
    uint64_t v9 = (*this)[9];
    uint64_t v10 = (const char *)(*this - 4);
    if (!v9) {
      uint64_t v10 = 0;
    }
    uint64_t v30 = v10;
    uint64_t v31 = v9;
    mlir::OperandRange::getTypes((uint64_t *)&v30, v29);
    uint64_t v30 = ", ";
    uint64_t v31 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v29[0], v29[1], v29[2], v29[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v30);
    uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, ")", 1uLL);
    }
    else
    {
      *uint64_t v12 = 41;
      ++*((void *)v11 + 4);
    }
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
    __int16 v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
    __int16 v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      goto LABEL_18;
    }
  }
  unint64_t v17 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v17, 0, v6 != 0, 0);
  uint64_t v18 = *this;
  unint64_t v19 = (*this)[11];
  if ((v19 & 0x7FFFFF) != 0)
  {
    unint64_t v20 = (((unint64_t)&v18[4 * ((v19 >> 23) & 1) + 17] + ((v19 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v18[10];
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    if (v22 == v21) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v25 = *((void *)v24 + 4);
    if ((unint64_t)(*((void *)v24 + 3) - v25) > 5)
    {
      *(_WORD *)(v25 + 4) = 8293;
      *(_DWORD *)uint64_t v25 = 1936483616;
      *((void *)v24 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v24, " else ", 6uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v21, 0, v6 != 0, 0);
    uint64_t v18 = *this;
    if (!HIBYTE((*this)[11])) {
      goto LABEL_21;
    }
LABEL_27:
    v29[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v18);
    char v23 = (mlir::ArrayAttr *)v29;
    goto LABEL_28;
  }
  uint64_t v21 = 24;
  if (MEMORY[0x18] != 24) {
    goto LABEL_23;
  }
LABEL_20:
  if (BYTE3(v19)) {
    goto LABEL_27;
  }
LABEL_21:
  char v23 = (mlir::ArrayAttr *)(v18 + 14);
LABEL_28:
  uint64_t Value = mlir::ArrayAttr::getValue(v23);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v27, 0, 0);
}

__n128 mlir::scf::IfOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v30[2] = *MEMORY[0x263EF8340];
  if (!a2)
  {
    unint64_t v10 = *(unsigned int *)(*(void *)a1 + 44);
    if ((v10 & 0x7FFFFF) != 0) {
      unint64_t v11 = ((*(void *)a1 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
    else {
      unint64_t v11 = 0;
    }
    unint64_t v29 = v11;
    uint64_t v12 = (char *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    uint64_t v13 = *(unsigned int *)(a3 + 8);
    unint64_t v14 = *(void *)a3;
    if (v13 >= *(_DWORD *)(a3 + 12))
    {
      unint64_t v25 = v13 + 1;
      BOOL v26 = v14 + 24 * v13 > (unint64_t)&v29;
      if (v14 <= (unint64_t)&v29 && v26)
      {
        uint64_t v28 = (char *)&v30[-1] - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        unint64_t v14 = *(void *)a3;
        uint64_t v12 = &v28[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        unint64_t v14 = *(void *)a3;
        uint64_t v12 = (char *)&v29;
      }
    }
    uint64_t v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
    long long v16 = *(_OWORD *)v12;
    *(void *)(v15 + 16) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v15 = v16;
    ++*(_DWORD *)(a3 + 8);
    unint64_t v17 = *(unsigned int *)(*(void *)a1 + 44);
    if ((v17 & 0x7FFFFF) != 0)
    {
      unint64_t v18 = ((*(void *)a1 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
      uint64_t v20 = *(void *)(v18 + 24);
      uint64_t v19 = v18 + 24;
      if (v20 != v19)
      {
LABEL_13:
        unint64_t v29 = v19;
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v19 = 24;
      if (MEMORY[0x18] != 24) {
        goto LABEL_13;
      }
    }
    unint64_t v29 = 0;
LABEL_16:
    uint64_t v7 = (__n128 *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    unint64_t v9 = *(void *)a3;
    if (v8 < *(_DWORD *)(a3 + 12)) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v5 = *(unsigned int *)(*(void *)a1 + 36);
  if (v5) {
    uint64_t v6 = *(void *)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v29 = 0;
  uint64_t v7 = (__n128 *)&v29;
  mlir::ValueRange::ValueRange(v30, v6, v5);
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  unint64_t v9 = *(void *)a3;
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
LABEL_18:
    unint64_t v23 = v8 + 1;
    BOOL v24 = v9 + 24 * v8 > (unint64_t)&v29;
    if (v9 <= (unint64_t)&v29 && v24)
    {
      uint64_t v27 = (char *)&v30[-1] - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      unint64_t v9 = *(void *)a3;
      uint64_t v7 = (__n128 *)&v27[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      unint64_t v9 = *(void *)a3;
      uint64_t v7 = (__n128 *)&v29;
    }
  }
LABEL_17:
  uint64_t v21 = (__n128 *)(v9 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v7;
  v21[1].n128_u64[0] = v7[1].n128_u64[0];
  __n128 *v21 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void mlir::scf::IfOp::getEntrySuccessorRegions(unsigned int **a1, void **a2, uint64_t a3, uint64_t a4)
{
  v47[2] = *MEMORY[0x263EF8340];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v43, *a1);
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v8 = *a2;
  if (!*a2)
  {
    uint64_t v42 = 0;
    unint64_t v10 = *a1;
    unint64_t v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0)
    {
LABEL_8:
      unint64_t v12 = (((unint64_t)&v10[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v10[10];
      unsigned int v13 = *(_DWORD *)(a4 + 8);
      if (v13 < *(_DWORD *)(a4 + 12))
      {
LABEL_9:
        unint64_t v14 = (unint64_t *)(*(void *)a4 + 24 * v13);
        *unint64_t v14 = v12;
        mlir::ValueRange::ValueRange(v14 + 1, 0, 0);
LABEL_10:
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_11;
      }
LABEL_19:
      unint64_t v46 = v12;
      uint64_t v21 = (char *)&v46;
      mlir::ValueRange::ValueRange(v47, 0, 0);
      uint64_t v22 = *(unsigned int *)(a4 + 8);
      unint64_t v23 = *(void *)a4;
      if (v22 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v36 = v22 + 1;
        BOOL v37 = v23 + 24 * v22 > (unint64_t)&v46;
        if (v23 <= (unint64_t)&v46 && v37)
        {
          long long v40 = (char *)&v47[-1] - v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          unint64_t v23 = *(void *)a4;
          uint64_t v21 = &v40[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          unint64_t v23 = *(void *)a4;
          uint64_t v21 = (char *)&v46;
        }
      }
      uint64_t v24 = v23 + 24 * *(unsigned int *)(a4 + 8);
      long long v25 = *(_OWORD *)v21;
      *(void *)(v24 + 16) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v24 = v25;
      goto LABEL_10;
    }
LABEL_18:
    unint64_t v12 = 0;
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    if (v13 < *(_DWORD *)(a4 + 12)) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  if (mlir::BoolAttr::classof(*a2)) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v42 = v9;
  if (!v9 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    unint64_t v10 = *a1;
    unint64_t v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (!v42 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    uint64_t v15 = *a1;
    unint64_t v16 = (*a1)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
      unint64_t v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      if (*(void *)(v17 + 24) != v17 + 24)
      {
        uint64_t v18 = v17 + 24;
        unsigned int v19 = *(_DWORD *)(a4 + 8);
        if (v19 < *(_DWORD *)(a4 + 12))
        {
LABEL_16:
          uint64_t v20 = (uint64_t *)(*(void *)a4 + 24 * v19);
          *uint64_t v20 = v18;
          mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, 0, 0);
LABEL_30:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
LABEL_23:
        unint64_t v46 = v18;
        BOOL v26 = (char *)&v46;
        mlir::ValueRange::ValueRange(v47, 0, 0);
        uint64_t v27 = *(unsigned int *)(a4 + 8);
        unint64_t v28 = *(void *)a4;
        if (v27 >= *(_DWORD *)(a4 + 12))
        {
LABEL_37:
          unint64_t v38 = v27 + 1;
          BOOL v39 = v28 + 24 * v27 > (unint64_t)&v46;
          if (v28 <= (unint64_t)&v46 && v39)
          {
            uint64_t v41 = (char *)&v47[-1] - v28;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            unint64_t v28 = *(void *)a4;
            BOOL v26 = &v41[*(void *)a4];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            unint64_t v28 = *(void *)a4;
            BOOL v26 = (char *)&v46;
          }
        }
LABEL_33:
        uint64_t v34 = v28 + 24 * *(unsigned int *)(a4 + 8);
        long long v35 = *(_OWORD *)v26;
        *(void *)(v34 + 16) = *((void *)v26 + 2);
        *(_OWORD *)uint64_t v34 = v35;
        goto LABEL_30;
      }
    }
    else if (MEMORY[0x18] != 24)
    {
      uint64_t v18 = 24;
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    unint64_t v29 = v15[9];
    uint64_t v30 = v15 - 4;
    if (v29) {
      uint64_t v31 = (uint64_t)v30;
    }
    else {
      uint64_t v31 = 0;
    }
    unsigned int v32 = *(_DWORD *)(a4 + 8);
    if (v32 < *(_DWORD *)(a4 + 12))
    {
      uint64_t v33 = (void *)(*(void *)a4 + 24 * v32);
      *uint64_t v33 = 0;
      mlir::ValueRange::ValueRange(v33 + 1, v31, v29);
      goto LABEL_30;
    }
    unint64_t v46 = 0;
    BOOL v26 = (char *)&v46;
    mlir::ValueRange::ValueRange(v47, v31, v29);
    uint64_t v27 = *(unsigned int *)(a4 + 8);
    unint64_t v28 = *(void *)a4;
    if (v27 >= *(_DWORD *)(a4 + 12)) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
}

uint64_t mlir::scf::IfOp::fold(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(unsigned int *)(*a1 + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    unint64_t v4 = ((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v2 + 40);
    if (*(void *)(v4 + 24) != v4 + 24) {
      goto LABEL_3;
    }
    return 0;
  }
  if (MEMORY[0x18] == 24) {
    return 0;
  }
LABEL_3:
  uint64_t Filter = *(void *)(*(void *)(v2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (result)
  {
    uint64_t v6 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v34 = v8;
    if (v7)
    {
      uint64_t v33 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v34);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (result)
      {
        uint64_t result = mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v33, (mlir::Operation *)result);
        if (result)
        {
          unint64_t v9 = *(uint64_t **)(*a1 + 72);
          uint64_t Input = (uint64_t *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v34);
          unint64_t v11 = (uint64_t *)v9[1];
          if (v11)
          {
            *unint64_t v11 = *v9;
            if (*v9) {
              *(void *)(*v9 + 8) = v9[1];
            }
          }
          unint64_t v9[3] = (uint64_t)Input;
          v9[1] = (uint64_t)Input;
          uint64_t v12 = *Input;
          *unint64_t v9 = *Input;
          if (v12) {
            *(void *)(v12 + 8) = v9;
          }
          *uint64_t Input = (uint64_t)v9;
          unint64_t v13 = *(unsigned int *)(*a1 + 44);
          if ((v13 & 0x7FFFFF) != 0)
          {
            unint64_t v14 = (void *)(((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * *(unsigned int *)(*a1 + 40));
            uint64_t v15 = (uint64_t *)v14[1];
          }
          else
          {
            unint64_t v14 = 0;
            uint64_t v15 = (uint64_t *)MEMORY[8];
          }
          if (v15) {
            unint64_t v16 = v15 - 1;
          }
          else {
            unint64_t v16 = 0;
          }
          unint64_t v17 = v14 + 3;
          if ((void *)v14[3] != v14 + 3 && v15 != v17)
          {
            uint64_t v18 = (uint64_t *)v14[4];
            llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)v14, (uint64_t)(v14 + 3), (uint64_t)v18, (uint64_t)(v14 + 3));
            if (v18 != v17)
            {
              uint64_t v19 = *v17;
              uint64_t v20 = *v18;
              *(void *)(v20 + 8) = v17;
              *unint64_t v17 = v20;
              uint64_t v21 = *v15;
              *(void *)(v19 + 8) = v15;
              *uint64_t v18 = v21;
              *(void *)(v21 + 8) = v18;
              *uint64_t v15 = v19;
            }
          }
          unint64_t v22 = *(unsigned int *)(*a1 + 44);
          if ((v22 & 0x7FFFFF) != 0)
          {
            uint64_t v23 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(*a1 + 40);
            uint64_t v24 = v23 + 24;
            uint64_t v25 = v23 + 32;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 24;
            uint64_t v25 = 32;
          }
          BOOL v26 = *(uint64_t **)v25;
          if (v15) {
            uint64_t v27 = v16 + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = (uint64_t *)v27[1];
          if (v27 != v26 && v28 != v26)
          {
            llvm::ilist_traits<mlir::Block>::transferNodesFromList(v24, v23, (uint64_t)v27, v27[1]);
            if (v28 != v27)
            {
              uint64_t v30 = *v28;
              uint64_t v31 = *v27;
              *(void *)(v31 + 8) = v28;
              uint64_t *v28 = v31;
              uint64_t v32 = *v26;
              *(void *)(v30 + 8) = v26;
              *uint64_t v27 = v32;
              *(void *)(v32 + 8) = v27;
              *BOOL v26 = v30;
            }
          }
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::scf::IfOp::getRegionInvocationBounds(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)*a2;
  if (!*a2 || (!(v6 = mlir::BoolAttr::classof(*a2)) ? (uint64_t v7 = 0) : (uint64_t v7 = v5), v22 = v7, !v6))
  {
    if (*(_DWORD *)(a4 + 12) > 1u)
    {
      unint64_t v15 = *(unsigned int *)(a4 + 8);
      uint64_t v16 = 2;
      if (v15 < 2) {
        uint64_t v16 = *(unsigned int *)(a4 + 8);
      }
      if (v16)
      {
        uint64_t v17 = *(void *)a4;
        *(void *)uint64_t v17 = 0x100000000;
        *(_DWORD *)(v17 + 8) = 1;
        if (v16 != 1)
        {
          *(void *)(v17 + 12) = 0x100000000;
          *(_DWORD *)(v17 + 20) = 1;
        }
        unint64_t v15 = *(unsigned int *)(a4 + 8);
      }
      if (v15 > 1) {
        goto LABEL_22;
      }
      uint64_t v14 = *(void *)a4 + 12 * v15;
      *(void *)uint64_t v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
      if (v15 == 1) {
        goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(a4 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), 2uLL, 12);
      uint64_t v14 = *(void *)a4;
      *(void *)uint64_t v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
    }
    *(void *)(v14 + 12) = 0x100000000;
    *(_DWORD *)(v14 + 20) = 1;
LABEL_22:
    *(_DWORD *)(a4 + 8) = 2;
    return;
  }
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  uint64_t v9 = *(unsigned int *)(a4 + 8);
  if (v9 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(void *)((char *)v23 + 4) = Value | 0x100000000;
    uint64_t v18 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 12);
    uint64_t v19 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v19 = v18;
    *(_DWORD *)(v19 + 8) = 1;
  }
  else
  {
    uint64_t v10 = *(void *)a4 + 12 * v9;
    *(_DWORD *)uint64_t v10 = 0;
    *(void *)(v10 + 4) = Value | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
  BOOL v11 = !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  uint64_t v12 = *(unsigned int *)(a4 + 8);
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(void *)((char *)v23 + 4) = v11 | 0x100000000;
    uint64_t v20 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v12 + 1, 12);
    uint64_t v21 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v21 = v20;
    *(_DWORD *)(v21 + 8) = 1;
  }
  else
  {
    uint64_t v13 = *(void *)a4 + 12 * v12;
    *(_DWORD *)uint64_t v13 = 0;
    *(void *)(v13 + 4) = v11 | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
}

void mlir::scf::IfOp::getCanonicalizationPatterns()
{
}

void mlir::scf::ParallelOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v13 = a4;
  uint64_t v58 = *MEMORY[0x263EF8340];
  __n128 v57 = a9;
  mlir::OperationState::addOperands(a2, a3, a4);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9.n128_i64[0], a9.n128_i64[1]);
  v56[0] = v13;
  v56[1] = a6;
  v56[2] = a8;
  v56[3] = a9.n128_u32[2];
  uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)v56, 4);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v50) = 261;
  v47.n128_u64[0] = (unint64_t)"operandSegmentSizes";
  v47.n128_u64[1] = 19;
  uint64_t v18 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v47);
  ZinMirCacheTensors::ZinMirCacheTensors(&v44, v18, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v44, v45);
  mlir::ValueRange::getTypes(&v57, &v47);
  uint64_t v20 = v47.n128_i64[1];
  uint64_t v21 = (void *)v47.n128_u64[0];
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  int v24 = v49 - v47.n128_u32[2];
  uint64_t v25 = *(unsigned int *)(a2 + 72);
  unint64_t v26 = v49 - v47.n128_u64[1] + v25;
  if (v26 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26, 8);
    uint64_t v25 = *(unsigned int *)(a2 + 72);
  }
  uint64_t v27 = *(void *)(a2 + 64);
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  if (v23 != v20 || v21 != v22)
  {
    unint64_t v28 = (unint64_t *)(v27 + 8 * v25);
    do
    {
      *v28++ = *(void *)(mlir::ValueRange::dereference_iterator(&v44, v20) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v20 = ++v45;
    }
    while (v44 != v22 || v20 != v23);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v25 + v24;
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v19);
  unint64_t v31 = IndexType;
  v47.n128_u64[0] = (unint64_t)&v48;
  v47.n128_u32[3] = 8;
  if (a8 < 9uLL)
  {
    if (!a8)
    {
      v47.n128_u32[2] = a8;
      uint64_t v44 = v46;
      HIDWORD(v45) = 8;
      LODWORD(a8) = 0;
      goto LABEL_44;
    }
    uint64_t v48 = (void *)IndexType;
    if (a8 != 1)
    {
      uint64_t v49 = IndexType;
      if (a8 != 2)
      {
        uint64_t v50 = IndexType;
        if (a8 != 3)
        {
          uint64_t v51 = IndexType;
          if (a8 != 4)
          {
            uint64_t v52 = IndexType;
            if (a8 != 5)
            {
              uint64_t v53 = IndexType;
              if (a8 != 6)
              {
                uint64_t v54 = IndexType;
                if (a8 != 7)
                {
                  BOOL v37 = (unint64_t *)&v55;
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v47.n128_u32[2] = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, &v48, a8, 8);
    uint64_t v32 = a8 & 3;
    uint64_t v33 = a8 - v32;
    uint64_t v34 = (unint64_t *)(v47.n128_u64[0] + 8 * v33);
    int64x2_t v35 = vdupq_n_s64(v31);
    unint64_t v36 = (int64x2_t *)(v47.n128_u64[0] + 16);
    do
    {
      v36[-1] = v35;
      *unint64_t v36 = v35;
      v36 += 2;
      v33 -= 4;
    }
    while (v33);
    if ((a8 & 3) != 0)
    {
      *uint64_t v34 = v31;
      if (v32 != 1)
      {
        v34[1] = v31;
        if (v32 != 2)
        {
          BOOL v37 = v34 + 2;
LABEL_19:
          *BOOL v37 = v31;
        }
      }
    }
  }
  v47.n128_u32[2] = a8;
  uint64_t v44 = v46;
  uint64_t v45 = 0x800000000;
  unint64_t v38 = *(void *)a2;
  if (a8 < 9uLL)
  {
    v46[0] = *(void *)a2;
    if (a8 != 1)
    {
      v46[1] = v38;
      if (a8 != 2)
      {
        v46[2] = v38;
        if (a8 != 3)
        {
          unint64_t v46[3] = v38;
          if (a8 != 4)
          {
            v46[4] = v38;
            if (a8 != 5)
            {
              v46[5] = v38;
              if (a8 != 6)
              {
                v46[6] = v38;
                if (a8 != 7) {
                  v46[7] = v38;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, a8, 8);
    uint64_t v39 = a8 & 3;
    uint64_t v40 = a8 - v39;
    uint64_t v41 = (unint64_t *)((char *)v44 + 8 * v40);
    int64x2_t v42 = vdupq_n_s64(v38);
    uint64_t v43 = (int64x2_t *)((char *)v44 + 16);
    do
    {
      v43[-1] = v42;
      *uint64_t v43 = v42;
      v43 += 2;
      v40 -= 4;
    }
    while (v40);
    if ((a8 & 3) != 0)
    {
      *uint64_t v41 = v38;
      if (v39 != 1)
      {
        v41[1] = v38;
        if (v39 != 2) {
          v41[2] = v38;
        }
      }
    }
  }
LABEL_44:
  LODWORD(v45) = a8;
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

uint64_t mlir::scf::ParallelOp::verify(mlir::scf::ParallelOp *this)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (_DWORD *)(*(void *)this + 16 * ((v2 >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  int v4 = v3[2];
  if ((v2 & 0x800000) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)this + 72);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (v4)
    {
LABEL_6:
      uint64_t v6 = (v3[1] + *v3);
      uint64_t v7 = (v4 + v6) - v6;
      uint64_t v8 = (void *)(v5 + 32 * v6 + 24);
      uint64_t v9 = v7;
      do
      {
        ConstantIntBOOL Value = mlir::getConstantIntValue(*v8 | 4);
        if (v11) {
          BOOL v12 = ConstantIntValue <= 0;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          unint64_t v112 = (void **)"constant step operand must be positive";
          __int16 v115 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, &v112, (uint64_t)&v116);
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((void)v116) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          }
          if (!v123) {
            return v22;
          }
          uint64_t v23 = __p;
          if (__p)
          {
            int v24 = v122;
            uint64_t v25 = __p;
            if (v122 != __p)
            {
              do
                int v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
              while (v24 != v23);
              uint64_t v25 = __p;
            }
            unsigned int v122 = v23;
            operator delete(v25);
          }
          unint64_t v26 = v119;
          if (!v119) {
            goto LABEL_117;
          }
          uint64_t v27 = v120;
          unint64_t v28 = v119;
          if (v120 == v119) {
            goto LABEL_116;
          }
          do
          {
            uint64_t v30 = *--v27;
            uint64_t v29 = v30;
            *uint64_t v27 = 0;
            if (v30) {
              MEMORY[0x21667D390](v29, 0x1000C8077774924);
            }
          }
          while (v27 != v26);
          goto LABEL_115;
        }
        v8 += 4;
        --v9;
      }
      while (v9);
      uint64_t v13 = *(void *)(((*(void *)this
                        + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                        + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(*(void *)this + 40)
                      + 8);
      if (v13) {
        uint64_t v14 = v13 - 8;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v7 == ((unint64_t)(v15 - v16) >> 3))
      {
        if (v15 != v16)
        {
          uint64_t v17 = 8 * ((v15 - v16) >> 3);
          while (1)
          {
            *(void *)&long long v116 = *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!mlir::Type::isIndex((mlir::Type *)&v116)) {
              break;
            }
            v16 += 8;
            v17 -= 8;
            if (!v17) {
              goto LABEL_20;
            }
          }
          unint64_t v112 = (void **)"expects arguments for the induction variable to be of index type";
          __int16 v115 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, &v112, (uint64_t)&v116);
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((void)v116) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          }
          if (v123)
          {
            uint64_t v56 = __p;
            if (__p)
            {
              __n128 v57 = v122;
              uint64_t v58 = __p;
              if (v122 != __p)
              {
                do
                  __n128 v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
                while (v57 != v56);
                uint64_t v58 = __p;
              }
              unsigned int v122 = v56;
              operator delete(v58);
            }
            uint64_t v59 = v119;
            if (v119)
            {
              uint64_t v60 = v120;
              unsigned int v61 = v119;
              if (v120 != v119)
              {
                do
                {
                  uint64_t v63 = *--v60;
                  uint64_t v62 = v63;
                  *uint64_t v60 = 0;
                  if (v63) {
                    MEMORY[0x21667D390](v62, 0x1000C8077774924);
                  }
                }
                while (v60 != v59);
                unsigned int v61 = v119;
              }
              long long v120 = v59;
              operator delete(v61);
            }
            uint64_t v78 = (void **)*((void *)&v117 + 1);
            if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8)) {
              goto LABEL_118;
            }
          }
          return v22;
        }
LABEL_20:
        uint64_t v18 = verifyAndGetTerminator<mlir::scf::YieldOp>(*(void *)this, (void *)(((*(void *)this+ 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(*(void *)this + 40)), (void **)"expects body to terminate with 'scf.yield'", (void **)0x2A);
        uint64_t v110 = v18;
        if (!v18) {
          return 0;
        }
        if ((*(unsigned char *)(v18 + 46) & 0x80) != 0 && *(_DWORD *)(v18 + 68))
        {
          __int16 v109 = 257;
          mlir::OpState::emitOpError(&v110, (void ***)&v107, (uint64_t)&v116);
          uint64_t v19 = (void *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "not allowed to have operands inside '");
          uint64_t v20 = (uint64_t)v19;
          if (*v19)
          {
            __int16 v115 = 262;
            unint64_t v112 = (void **)"scf.parallel";
            uint64_t v113 = 12;
            mlir::Diagnostic::operator<<((uint64_t)(v19 + 1), &v112);
          }
          uint64_t v21 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v20, "'");
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v21);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          return v22;
        }
        mlir::Block::getOps<mlir::scf::ReduceOp>(v14, (ZinIrHalH13g **)&v116);
        unint64_t v112 = (void **)v114;
        uint64_t v113 = 0x400000000;
        long long v107 = v116;
        long long v108 = v117;
        v111[0] = v118[0];
        v111[1] = v118[1];
        llvm::SmallVectorImpl<mlir::scf::ReduceOp>::append<mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>,void>((uint64_t)&v112, (uint64_t)&v107, (ZinIrHalH13g **)v111);
        uint64_t v64 = *(void *)this;
        uint64_t v65 = *(unsigned int *)(*(void *)this + 36);
        *(void *)&v111[0] = v65;
        uint64_t v66 = v113;
        uint64_t v106 = v113;
        mlir::scf::ParallelOp::getInitVals(this);
        uint64_t v105 = v67;
        if (v65 != v66)
        {
          __int16 v109 = 257;
          mlir::OpState::emitOpError((uint64_t *)this, (void ***)&v107, (uint64_t)&v116);
          uint64_t v74 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
          uint64_t v75 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v74, (uint64_t *)v111);
          uint64_t v76 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v75, " to be the same as number of reductions: ");
          uint64_t v77 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v76, &v106);
          goto LABEL_97;
        }
        if (v67 == v65)
        {
          if (v65) {
            uint64_t v68 = v64 - 16;
          }
          else {
            uint64_t v68 = 0;
          }
          if (v65)
          {
            uint64_t v69 = 0;
            int v70 = v112;
            uint64_t v71 = 8 * v66 - 8;
            uint64_t v72 = v65 - 1;
            uint64_t v22 = 1;
            while (1)
            {
              unint64_t v104 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v68, v69) + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v103 = v70[v69];
              unint64_t v102 = *(void *)(*(void *)(v103[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v104 != v102) {
                break;
              }
              if (v72 != v69)
              {
                ++v69;
                uint64_t v73 = v71;
                v71 -= 8;
                if (v73) {
                  continue;
                }
              }
              goto LABEL_98;
            }
            __int16 v109 = 257;
            mlir::OpState::emitOpError((uint64_t *)&v103, (void ***)&v107, (uint64_t)&v116);
            uint64_t v82 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects type of reduce: ");
            uint64_t v83 = mlir::InFlightDiagnostic::append<mlir::Type &>(v82, (uint64_t *)&v102);
            uint64_t v84 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v83, " to be the same as result type: ");
            uint64_t v77 = mlir::InFlightDiagnostic::append<mlir::Type &>(v84, (uint64_t *)&v104);
LABEL_97:
            uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v77);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          }
          else
          {
            uint64_t v22 = 1;
          }
LABEL_98:
          uint64_t v78 = v112;
          if (v112 != (void **)v114) {
            goto LABEL_118;
          }
          return v22;
        }
        __int16 v109 = 257;
        mlir::OpState::emitOpError((uint64_t *)this, (void ***)&v107, (uint64_t)&v116);
        uint64_t v79 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
        uint64_t v80 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v79, (uint64_t *)v111);
        uint64_t v81 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, " to be the same as number of initial values: ");
        uint64_t v77 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v81, &v105);
        goto LABEL_97;
      }
      __int16 v115 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, &v112, (uint64_t)&v116);
      if ((void)v116)
      {
        LODWORD(v107) = 3;
        *((void *)&v107 + 1) = "expects the same number of induction variables: ";
        *(void *)&long long v108 = 48;
        unint64_t v31 = (char *)&v107;
        uint64_t v32 = *((void *)&v117 + 1);
        if (LODWORD(v118[0]) >= DWORD1(v118[0]))
        {
          unint64_t v92 = LODWORD(v118[0]) + 1;
          if (*((void *)&v117 + 1) <= (unint64_t)&v107
            && *((void *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
          {
            unint64_t v98 = (char *)&v107 - *((void *)&v117 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            uint64_t v32 = *((void *)&v117 + 1);
            unint64_t v31 = &v98[*((void *)&v117 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            unint64_t v31 = (char *)&v107;
            uint64_t v32 = *((void *)&v117 + 1);
          }
        }
        uint64_t v33 = v32 + 24 * LODWORD(v118[0]);
        long long v34 = *(_OWORD *)v31;
        *(void *)(v33 + 16) = *((void *)v31 + 2);
        *(_OWORD *)uint64_t v33 = v34;
        ++LODWORD(v118[0]);
        if ((void)v116)
        {
          unint64_t v35 = *(void *)(v14 + 56) - *(void *)(v14 + 48);
          LODWORD(v107) = 5;
          *((void *)&v107 + 1) = (v35 >> 3);
          unint64_t v36 = (char *)&v107;
          uint64_t v37 = *((void *)&v117 + 1);
          if (LODWORD(v118[0]) >= DWORD1(v118[0]))
          {
            unint64_t v93 = LODWORD(v118[0]) + 1;
            if (*((void *)&v117 + 1) <= (unint64_t)&v107
              && *((void *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
            {
              uint64_t v99 = (char *)&v107 - *((void *)&v117 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              uint64_t v37 = *((void *)&v117 + 1);
              unint64_t v36 = &v99[*((void *)&v117 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              unint64_t v36 = (char *)&v107;
              uint64_t v37 = *((void *)&v117 + 1);
            }
          }
          uint64_t v38 = v37 + 24 * LODWORD(v118[0]);
          long long v39 = *(_OWORD *)v36;
          *(void *)(v38 + 16) = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v38 = v39;
          uint64_t v40 = ++LODWORD(v118[0]);
          if ((void)v116)
          {
            LODWORD(v107) = 3;
            *((void *)&v107 + 1) = " as bound and step values: ";
            *(void *)&long long v108 = 27;
            uint64_t v41 = (char *)&v107;
            uint64_t v42 = *((void *)&v117 + 1);
            if (v40 >= DWORD1(v118[0]))
            {
              unint64_t v94 = v40 + 1;
              BOOL v95 = *((void *)&v117 + 1) + 24 * (unint64_t)v40 > (unint64_t)&v107;
              if (*((void *)&v117 + 1) <= (unint64_t)&v107 && v95)
              {
                uint64_t v100 = (char *)&v107 - *((void *)&v117 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                uint64_t v42 = *((void *)&v117 + 1);
                uint64_t v41 = &v100[*((void *)&v117 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                uint64_t v41 = (char *)&v107;
                uint64_t v42 = *((void *)&v117 + 1);
              }
            }
            uint64_t v43 = v42 + 24 * LODWORD(v118[0]);
            long long v44 = *(_OWORD *)v41;
            *(void *)(v43 + 16) = *((void *)v41 + 2);
            *(_OWORD *)uint64_t v43 = v44;
            uint64_t v45 = ++LODWORD(v118[0]);
            if ((void)v116)
            {
              LODWORD(v107) = 5;
              *((void *)&v107 + 1) = v7;
              unint64_t v46 = (char *)&v107;
              uint64_t v47 = *((void *)&v117 + 1);
              if (v45 >= DWORD1(v118[0]))
              {
                unint64_t v96 = v45 + 1;
                BOOL v97 = *((void *)&v117 + 1) + 24 * (unint64_t)v45 > (unint64_t)&v107;
                if (*((void *)&v117 + 1) <= (unint64_t)&v107 && v97)
                {
                  uint64_t v101 = (char *)&v107 - *((void *)&v117 + 1);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  uint64_t v47 = *((void *)&v117 + 1);
                  unint64_t v46 = &v101[*((void *)&v117 + 1)];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  unint64_t v46 = (char *)&v107;
                  uint64_t v47 = *((void *)&v117 + 1);
                }
              }
              uint64_t v48 = v47 + 24 * LODWORD(v118[0]);
              long long v49 = *(_OWORD *)v46;
              *(void *)(v48 + 16) = *((void *)v46 + 2);
              *(_OWORD *)uint64_t v48 = v49;
              ++LODWORD(v118[0]);
            }
          }
        }
      }
      uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((void)v116) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      }
      if (!v123) {
        return v22;
      }
      uint64_t v50 = __p;
      if (__p)
      {
        uint64_t v51 = v122;
        uint64_t v52 = __p;
        if (v122 != __p)
        {
          do
            uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          uint64_t v52 = __p;
        }
        unsigned int v122 = v50;
        operator delete(v52);
      }
      unint64_t v26 = v119;
      if (!v119) {
        goto LABEL_117;
      }
      uint64_t v53 = v120;
      unint64_t v28 = v119;
      if (v120 == v119) {
        goto LABEL_116;
      }
      do
      {
        uint64_t v55 = *--v53;
        uint64_t v54 = v55;
        *uint64_t v53 = 0;
        if (v55) {
          MEMORY[0x21667D390](v54, 0x1000C8077774924);
        }
      }
      while (v53 != v26);
      goto LABEL_115;
    }
  }
  unint64_t v112 = (void **)"needs at least one tuple element for lowerBound, upperBound and step";
  __int16 v115 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v112, (uint64_t)&v116);
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
  if ((void)v116) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
  }
  if (!v123) {
    return v22;
  }
  long long v85 = __p;
  if (__p)
  {
    uint64_t v86 = v122;
    uint64_t v87 = __p;
    if (v122 != __p)
    {
      do
        uint64_t v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
      while (v86 != v85);
      uint64_t v87 = __p;
    }
    unsigned int v122 = v85;
    operator delete(v87);
  }
  unint64_t v26 = v119;
  if (!v119) {
    goto LABEL_117;
  }
  unint64_t v88 = v120;
  unint64_t v28 = v119;
  if (v120 != v119)
  {
    do
    {
      uint64_t v90 = *--v88;
      uint64_t v89 = v90;
      void *v88 = 0;
      if (v90) {
        MEMORY[0x21667D390](v89, 0x1000C8077774924);
      }
    }
    while (v88 != v26);
LABEL_115:
    unint64_t v28 = v119;
  }
LABEL_116:
  long long v120 = v26;
  operator delete(v28);
LABEL_117:
  uint64_t v78 = (void **)*((void *)&v117 + 1);
  if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8)) {
LABEL_118:
  }
    free(v78);
  return v22;
}

uint64_t verifyAndGetTerminator<mlir::scf::YieldOp>(uint64_t a1, void *a2, void **a3, void **a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if ((void *)*a2 == a2
    || ((uint64_t v7 = a2[1]) != 0 ? (v8 = v7 - 8) : (v8 = 0), v9 = *(ZinIrHalH13g **)(v8 + 32),
                                                        v9 == (ZinIrHalH13g *)(v8 + 32)))
  {
    uint64_t v11 = 0;
  }
  else
  {
    ZinIrHalH13g::~ZinIrHalH13g(v9);
    uint64_t v11 = v10;
    if (v10
      && *(_UNKNOWN **)(*(void *)(v10 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    {
      return v11;
    }
  }
  __int16 v22 = 261;
  v21[0] = a3;
  v21[1] = a4;
  mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
  if (v11) {
    mlir::Diagnostic::attachNote();
  }
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v30)
  {
    BOOL v12 = __p;
    if (__p)
    {
      uint64_t v13 = v29;
      uint64_t v14 = __p;
      if (v29 != __p)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      uint64_t v29 = v12;
      operator delete(v14);
    }
    uint64_t v15 = v26;
    if (v26)
    {
      uint64_t v16 = v27;
      uint64_t v17 = v26;
      if (v27 != v26)
      {
        do
        {
          uint64_t v19 = *--v16;
          uint64_t v18 = v19;
          *uint64_t v16 = 0;
          if (v19) {
            MEMORY[0x21667D390](v18, 0x1000C8077774924);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v26;
      }
      uint64_t v27 = v15;
      operator delete(v17);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return 0;
}

void mlir::Block::getOps<mlir::scf::ReduceOp>(uint64_t a1@<X0>, ZinIrHalH13g **a2@<X8>)
{
  unint64_t v3 = (ZinIrHalH13g *)(a1 + 32);
  int v4 = (ZinIrHalH13g *)(a1 + 32);
  if (*(void *)(a1 + 40) != a1 + 32)
  {
    int v4 = *(ZinIrHalH13g **)(a1 + 40);
    while (1)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v4);
      if (*(_UNKNOWN **)(*(void *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id) {
        break;
      }
      int v4 = (ZinIrHalH13g *)*((void *)v4 + 1);
      if (v4 == v3)
      {
        int v4 = v3;
        break;
      }
    }
  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = (ZinIrHalH13g *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[3] = (ZinIrHalH13g *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
  a2[4] = v3;
  a2[5] = v3;
  a2[6] = (ZinIrHalH13g *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[7] = (ZinIrHalH13g *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
}

uint64_t mlir::scf::ParallelOp::getInitVals(mlir::scf::ParallelOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (v2[2] + v2[1] + *v2);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned long &>(uint64_t a1, uint64_t *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 5;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        uint64_t v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::scf::ParallelOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  v35[32] = *MEMORY[0x263EF8340];
  unint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, void, void))(*(void *)a1 + 736))(a1, &v33, 1, 0, 0))
  {
    uint64_t v20 = v33;
    if (v33 == v35) {
      return 0;
    }
    goto LABEL_27;
  }
  char v30 = v32;
  uint64_t v31 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v30, 1, 1, v34))
  {
    uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
    if (v31)
    {
      uint64_t v7 = IndexType;
      uint64_t v8 = (char *)v30;
      uint64_t v9 = 32 * v31;
      while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, v7, (uint64_t)a2 + 16))
      {
        v8 += 32;
        v9 -= 32;
        if (!v9) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t v27 = v29;
      uint64_t v28 = 0x400000000;
      v26[8] = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v24)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v27, 1, 1, v34))
      {
        uint64_t v11 = mlir::Builder::getIndexType(v4, v10);
        if (v28)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (char *)v27;
          uint64_t v14 = 32 * v28;
          while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, v12, (uint64_t)a2 + 16))
          {
            v13 += 32;
            v14 -= 32;
            if (!v14) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          int v24 = v26;
          uint64_t v25 = 0x400000000;
          v23[8] = 257;
          if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, v22)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v24, 1, 1, v34))
          {
            uint64_t v16 = mlir::Builder::getIndexType(v4, v15);
            if (v25)
            {
              uint64_t v17 = v16;
              uint64_t v18 = (char *)v24;
              uint64_t v19 = 32 * v25;
              while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v17, (uint64_t)a2 + 16))
              {
                v18 += 32;
                v19 -= 32;
                if (!v19) {
                  goto LABEL_20;
                }
              }
            }
            else
            {
LABEL_20:
              v22[0] = v23;
              v22[1] = (void *)0x400000000;
              if ((!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "init", 4)|| (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v22, 1, 1, 0xFFFFFFFFLL))&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64))
              {
                mlir::OperationState::addRegion(a2);
              }
              if (v22[0] != v23) {
                free(v22[0]);
              }
            }
          }
          if (v24 != v26) {
            free(v24);
          }
        }
      }
      if (v27 != v29) {
        free(v27);
      }
    }
  }
  if (v30 != v32) {
    free(v30);
  }
  uint64_t v20 = v33;
  if (v33 != v35) {
LABEL_27:
  }
    free(v20);
  return 0;
}

uint64_t mlir::scf::ParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 1uLL)
  {
    _WORD *v5 = 10272;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, " (", 2uLL);
  }
  uint64_t v6 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = v9 - (void)v8;
  if (v11)
  {
    uint64_t v12 = (llvm::raw_ostream *)v10;
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *v8);
    if (v11 != 8)
    {
      uint64_t v46 = v11 >> 3;
      uint64_t v47 = v8 + 1;
      uint64_t v48 = 8 * v46 - 8;
      do
      {
        uint64_t v50 = (_WORD *)*((void *)v12 + 4);
        if (*((void *)v12 + 3) - (void)v50 > 1uLL)
        {
          *uint64_t v50 = 8236;
          *((void *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
        uint64_t v49 = *v47++;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v49);
        v48 -= 8;
      }
      while (v48);
    }
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 4)
  {
    *(unsigned char *)(v14 + 4) = 40;
    *(_DWORD *)uint64_t v14 = 540876841;
    *((void *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, ") = (", 5uLL);
  }
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = *((unsigned int *)*this + 4 * ((v15 >> 23) & 1) + 16);
  if ((v15 & 0x800000) != 0) {
    uint64_t v17 = *((void *)*this + 9);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&AttrDictionary);
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v20 = *((void *)v19 + 4);
  if ((unint64_t)(*((void *)v19 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 10272;
    *(_DWORD *)uint64_t v20 = 1869881385;
    *((void *)v19 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v19, ") to (", 6uLL);
  }
  unint64_t v21 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    __int16 v22 = (unsigned int *)((char *)*this + 16 * ((v21 >> 23) & 1) + 64);
  }
  else {
    __int16 v22 = 0;
  }
  uint64_t v23 = *v22;
  unsigned int v24 = v22[1];
  if ((v21 & 0x800000) != 0) {
    uint64_t v25 = *((void *)*this + 9);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 + 32 * v23;
  uint64_t v27 = v24 + v23 - v23;
  uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v26, 0, v26, v27, (uint64_t)a2, v28, (uint64_t)&AttrDictionary);
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v30 = (void *)*((void *)v29 + 4);
  if (*((void *)v29 + 3) - (void)v30 > 7uLL)
  {
    *char v30 = 0x2820706574732029;
    *((void *)v29 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v29, ") step (", 8uLL);
  }
  unint64_t v31 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v32 = (int *)((char *)*this + 16 * ((v31 >> 23) & 1) + 64);
  }
  else {
    uint64_t v32 = 0;
  }
  int v33 = *v32;
  int v34 = v32[1];
  int v35 = v32[2];
  if ((v31 & 0x800000) != 0) {
    uint64_t v36 = *((void *)*this + 9);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = (v34 + v33);
  uint64_t v38 = v36 + 32 * v37;
  uint64_t v39 = (v35 + v37) - v37;
  uint64_t v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v38, 0, v38, v39, (uint64_t)a2, v40, (uint64_t)&AttrDictionary);
  uint64_t v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v42 = (unsigned char *)*((void *)v41 + 4);
  if (*((unsigned char **)v41 + 3) == v42)
  {
    llvm::raw_ostream::write(v41, ")", 1uLL);
  }
  else
  {
    *uint64_t v42 = 41;
    ++*((void *)v41 + 4);
  }
  unint64_t v43 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v43 = 0;
  }
  if (*(_DWORD *)(v43 + 12))
  {
    long long v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v45 = (_DWORD *)*((void *)v44 + 4);
    if (*((void *)v44 + 3) - (void)v45 > 6uLL)
    {
      *(_DWORD *)((char *)v45 + 3) = 673215593;
      *uint64_t v45 = 1768843552;
      *((void *)v44 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v44, " init (", 7uLL);
    }
    unint64_t v51 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v52 = (int *)((char *)*this + 16 * ((v51 >> 23) & 1) + 64);
    }
    else {
      uint64_t v52 = 0;
    }
    int v53 = *v52;
    int v54 = v52[1];
    int v56 = v52[2];
    int v55 = v52[3];
    if ((v51 & 0x800000) != 0) {
      uint64_t v57 = *((void *)*this + 9);
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = (v54 + v53 + v56);
    uint64_t v59 = v57 + 32 * v58;
    uint64_t v60 = (v55 + v58) - v58;
    unsigned int v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t AttrDictionary = ", ";
    uint64_t v77 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v59, 0, v59, v60, (uint64_t)a2, v61, (uint64_t)&AttrDictionary);
    uint64_t v62 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v63 = (unsigned char *)*((void *)v62 + 4);
    if (*((unsigned char **)v62 + 3) == v63)
    {
      llvm::raw_ostream::write(v62, ")", 1uLL);
    }
    else
    {
      *uint64_t v63 = 41;
      ++*((void *)v62 + 4);
    }
  }
  uint64_t v64 = *((unsigned int *)*this + 9);
  uint64_t v65 = (uint64_t)*this - 16;
  if (!v64) {
    uint64_t v65 = 0;
  }
  v80[0] = v65;
  v80[1] = v64;
  mlir::OperandRange::getTypes(v80, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v78 || v77 != v79) {
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, (uint64_t *)&AttrDictionary);
  }
  uint64_t v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v67 = (unsigned char *)*((void *)v66 + 4);
  if ((unint64_t)v67 >= *((void *)v66 + 3))
  {
    llvm::raw_ostream::write(v66, 32);
    uint64_t v68 = *this;
    unint64_t v69 = *((unsigned int *)*this + 11);
    if ((v69 & 0x7FFFFF) != 0) {
      goto LABEL_59;
    }
  }
  else
  {
    *((void *)v66 + 4) = v67 + 1;
    *uint64_t v67 = 32;
    uint64_t v68 = *this;
    unint64_t v69 = *((unsigned int *)*this + 11);
    if ((v69 & 0x7FFFFF) != 0)
    {
LABEL_59:
      unint64_t v70 = (((unint64_t)v68 + 16 * ((v69 >> 23) & 1) + ((v69 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v68 + 10);
      goto LABEL_62;
    }
  }
  unint64_t v70 = 0;
LABEL_62:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v70, 0, 1, 0);
  uint64_t v71 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v71);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v71 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  unint64_t AttrDictionary = "operandSegmentSizes";
  uint64_t v77 = 19;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, Value, v74, &AttrDictionary, 1);
}

void mlir::scf::ParallelOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::scf::ReduceOp::verifyRegions(mlir::scf::ReduceOp *this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(((*(void *)this + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8) + 87) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v3) {
    uint64_t v4 = v3 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(void *)(v4 + 32) == v4 + 32)
  {
    v44[0] = (void **)"the block inside reduce should not be empty";
    __int16 v45 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v44, (uint64_t)v49);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      int v33 = __p;
      if (__p)
      {
        int v34 = v57;
        int v35 = __p;
        if (v57 != __p)
        {
          do
            int v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          int v35 = __p;
        }
        uint64_t v57 = v33;
        operator delete(v35);
      }
      uint64_t v14 = v54;
      if (!v54) {
        goto LABEL_60;
      }
      uint64_t v36 = v55;
      uint64_t v16 = v54;
      if (v55 == v54) {
        goto LABEL_59;
      }
      do
      {
        uint64_t v38 = *--v36;
        uint64_t v37 = v38;
        *uint64_t v36 = 0;
        if (v38) {
          MEMORY[0x21667D390](v37, 0x1000C8077774924);
        }
      }
      while (v36 != v14);
      goto LABEL_58;
    }
    return v10;
  }
  unint64_t v5 = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v7 = *(void *)(v4 + 56);
  if (((v7 - v6) & 0x7FFFFFFF8) != 0x10) {
    goto LABEL_25;
  }
  if (v7 != v6)
  {
    uint64_t v8 = 8 * ((v7 - v6) >> 3);
    while (v5 == (*(void *)(*(void *)v6 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 += 8;
      v8 -= 8;
      if (!v8) {
        goto LABEL_10;
      }
    }
LABEL_25:
    __int16 v45 = 257;
    mlir::OpState::emitOpError((uint64_t *)this, v44, (uint64_t)v49);
    if (v49[0])
    {
      int v46 = 3;
      uint64_t v47 = "expects two arguments to reduce block of type ";
      uint64_t v48 = 46;
      uint64_t v19 = &v46;
      uint64_t v20 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v40 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v42 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          uint64_t v20 = (char *)v50;
          uint64_t v19 = (int *)((char *)v50 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          uint64_t v19 = &v46;
          uint64_t v20 = (char *)v50;
        }
      }
      unint64_t v21 = &v20[24 * v51];
      long long v22 = *(_OWORD *)v19;
      *((void *)v21 + 2) = *((void *)v19 + 2);
      *(_OWORD *)unint64_t v21 = v22;
      ++v51;
      if (v49[0])
      {
        uint64_t v23 = &v46;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v46, v5);
        unsigned int v24 = (char *)v50;
        if (v51 >= v52)
        {
          unint64_t v41 = v51 + 1;
          if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
          {
            int64_t v43 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            unsigned int v24 = (char *)v50;
            uint64_t v23 = (int *)((char *)v50 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            uint64_t v23 = &v46;
            unsigned int v24 = (char *)v50;
          }
        }
        uint64_t v25 = &v24[24 * v51];
        long long v26 = *(_OWORD *)v23;
        *((void *)v25 + 2) = *((void *)v23 + 2);
        *(_OWORD *)uint64_t v25 = v26;
        ++v51;
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        uint64_t v28 = v57;
        uint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v14 = v54;
      if (!v54) {
        goto LABEL_60;
      }
      char v30 = v55;
      uint64_t v16 = v54;
      if (v55 == v54) {
        goto LABEL_59;
      }
      do
      {
        uint64_t v32 = *--v30;
        uint64_t v31 = v32;
        *char v30 = 0;
        if (v32) {
          MEMORY[0x21667D390](v31, 0x1000C8077774924);
        }
      }
      while (v30 != v14);
      goto LABEL_58;
    }
    return v10;
  }
LABEL_10:
  mlir::Block::getTerminator((ZinIrHalH13g **)v4);
  if (*(_UNKNOWN **)(*(void *)(v9 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceReturnOp,void>::id) {
    return 1;
  }
  v44[0] = (void **)"the block inside reduce should be terminated with a 'scf.reduce.return' op";
  __int16 v45 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v44, (uint64_t)v49);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
  if (v49[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
  }
  if (v58)
  {
    uint64_t v11 = __p;
    if (__p)
    {
      uint64_t v12 = v57;
      uint64_t v13 = __p;
      if (v57 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v57 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v54;
    if (!v54) {
      goto LABEL_60;
    }
    unint64_t v15 = v55;
    uint64_t v16 = v54;
    if (v55 == v54)
    {
LABEL_59:
      int v55 = v14;
      operator delete(v16);
LABEL_60:
      if (v50 != v53) {
        free(v50);
      }
      return v10;
    }
    do
    {
      uint64_t v18 = *--v15;
      uint64_t v17 = v18;
      *unint64_t v15 = 0;
      if (v18) {
        MEMORY[0x21667D390](v17, 0x1000C8077774924);
      }
    }
    while (v15 != v14);
LABEL_58:
    uint64_t v16 = v54;
    goto LABEL_59;
  }
  return v10;
}

uint64_t mlir::scf::ReduceOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  memset(v6, 0, 24);
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
  {
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v6, 1))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
      {
        uint64_t v5 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v5))
        {
          if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v6, v5, (uint64_t)a2 + 16))
          {
            mlir::OperationState::addRegion(a2);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::scf::ReduceOp::print(mlir::scf::ReduceOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    unsigned char *v5 = 40;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    *uint64_t v7 = 8233;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ") ", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 14880;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
    uint64_t v12 = *(void *)this;
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if ((v13 & 0x7FFFFF) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
    uint64_t v12 = *(void *)this;
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if ((v13 & 0x7FFFFF) != 0)
    {
LABEL_12:
      unint64_t v14 = ((v12 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v12 + 40);
      goto LABEL_15;
    }
  }
  unint64_t v14 = 0;
LABEL_15:
  unint64_t v15 = *(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224);

  return v15(a2, v14, 1, 1, 0);
}

uint64_t mlir::scf::ReduceReturnOp::verify(mlir::scf::ReduceReturnOp *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(*(void *)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(*(void *)this + 16)) + 72)
                             + 24)
                 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v2 == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  __int16 v34 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, &v33, (uint64_t)v38);
  if (v38[0])
  {
    int v35 = 3;
    uint64_t v36 = "needs to have type ";
    uint64_t v37 = 19;
    uint64_t v3 = &v35;
    uint64_t v4 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
      {
        int64_t v30 = (char *)&v35 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = (char *)v39;
        uint64_t v3 = (int *)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v3 = &v35;
        uint64_t v4 = (char *)v39;
      }
    }
    uint64_t v5 = &v4[24 * v40];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)uint64_t v5 = v6;
    ++v40;
    if (v38[0])
    {
      uint64_t v7 = &v35;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v35, v2);
      uint64_t v8 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v27 = v40 + 1;
        if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
        {
          int64_t v31 = (char *)&v35 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          uint64_t v8 = (char *)v39;
          uint64_t v7 = (int *)((char *)v39 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          uint64_t v7 = &v35;
          uint64_t v8 = (char *)v39;
        }
      }
      uint64_t v9 = &v8[24 * v40];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      uint64_t v11 = ++v40;
      if (v38[0])
      {
        int v35 = 3;
        uint64_t v36 = " (the type of the enclosing ReduceOp)";
        uint64_t v37 = 37;
        uint64_t v12 = &v35;
        unint64_t v13 = (char *)v39;
        if (v11 >= v41)
        {
          unint64_t v28 = v11 + 1;
          BOOL v29 = (char *)v39 + 24 * v11 > (char *)&v35;
          if (v39 <= &v35 && v29)
          {
            int64_t v32 = (char *)&v35 - (unsigned char *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            unint64_t v13 = (char *)v39;
            uint64_t v12 = (int *)((char *)v39 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            uint64_t v12 = &v35;
            unint64_t v13 = (char *)v39;
          }
        }
        unint64_t v14 = &v13[24 * v40];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = *((void *)v12 + 2);
        *(_OWORD *)unint64_t v14 = v15;
        ++v40;
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v38);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      uint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      unint64_t v21 = v44;
      long long v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        long long v22 = v43;
      }
      long long v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

void mlir::scf::WhileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6)
{
  v23[6] = *MEMORY[0x263EF8340];
  void v23[4] = a5;
  v23[5] = a6;
  mlir::OperationState::addOperands(a2, (uint64_t)a5, a6);
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (a4 + v11 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v11, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a2 + 64) + 8 * v11;
    do
    {
      *(void *)(v13 + 8 * v12) = mlir::TypeRange::dereference_iterator(a3, v12);
      ++v12;
    }
    while (a4 != v12);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + a4;
  unint64_t v21 = v23;
  uint64_t v22 = 0x400000000;
  if (a6 < 5)
  {
    uint64_t v19 = a5;
    uint64_t v20 = 0;
    if (!a6) {
      goto LABEL_18;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, a6, 8);
    uint64_t v19 = a5;
    uint64_t v20 = 0;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v18 = mlir::ValueRange::dereference_iterator(&v19, v14);
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v18);
    uint64_t v16 = v22;
    if (v22 >= (unint64_t)HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
      uint64_t v16 = v22;
    }
    *((void *)v21 + v16) = Loc;
    LODWORD(v22) = v22 + 1;
    uint64_t v14 = ++v20;
  }
  while (v19 != a5 || v14 != a6);
LABEL_18:
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

void mlir::scf::WhileOp::getSuccessorRegions(uint64_t *a1, void *a2, uint64_t a3)
{
  v43[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  unint64_t v5 = *(unsigned int *)(*a1 + 44);
  if (!a2)
  {
    uint64_t v7 = (void *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if ((void *)*v7 == v7) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (void *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if (v7 + 3 == a2)
    {
      if ((void *)*v7 == v7)
      {
LABEL_28:
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unsigned int v24 = *(_DWORD *)(a3 + 8);
        if (v24 >= *(_DWORD *)(a3 + 12))
        {
LABEL_29:
          int64_t v42 = v7;
          goto LABEL_30;
        }
LABEL_21:
        uint64_t v25 = (void *)(*(void *)a3 + 24 * v24);
        *uint64_t v25 = v7;
        unint64_t v21 = v25 + 1;
        goto LABEL_22;
      }
LABEL_17:
      uint64_t v22 = v7[1];
      if (v22) {
        uint64_t v23 = v22 - 8;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v18 = *(void *)(v23 + 48);
      unint64_t v19 = (*(void *)(v23 + 56) - v18) >> 3;
      unsigned int v24 = *(_DWORD *)(a3 + 8);
      if (v24 >= *(_DWORD *)(a3 + 12)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
  }
  unint64_t v8 = *(unsigned int *)(v4 + 36);
  if (v8) {
    uint64_t v9 = v4 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v10 >= *(_DWORD *)(a3 + 12))
  {
    int64_t v42 = 0;
    int64_t v31 = (char *)&v42;
    mlir::ValueRange::ValueRange(v43, v9, v8);
    uint64_t v32 = *(unsigned int *)(a3 + 8);
    unint64_t v33 = *(void *)a3;
    if (v32 >= *(_DWORD *)(a3 + 12))
    {
      unint64_t v38 = v32 + 1;
      BOOL v39 = v33 + 24 * v32 > (unint64_t)&v42;
      if (v33 <= (unint64_t)&v42 && v39)
      {
        unsigned int v41 = (char *)&v43[-1] - v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        unint64_t v33 = *(void *)a3;
        int64_t v31 = &v41[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        unint64_t v33 = *(void *)a3;
        int64_t v31 = (char *)&v42;
      }
    }
    uint64_t v34 = v33 + 24 * *(unsigned int *)(a3 + 8);
    long long v35 = *(_OWORD *)v31;
    *(void *)(v34 + 16) = *((void *)v31 + 2);
    *(_OWORD *)uint64_t v34 = v35;
  }
  else
  {
    uint64_t v11 = (void *)(*(void *)a3 + 24 * v10);
    *uint64_t v11 = 0;
    mlir::ValueRange::ValueRange(v11 + 1, v9, v8);
  }
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  unint64_t v13 = *(unsigned int *)(*a1 + 44);
  if ((v13 & 0x7FFFFF) != 0)
  {
    unint64_t v14 = ((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
    uint64_t v15 = v14 + 24;
    if (*(void *)(v14 + 24) != v14 + 24) {
      goto LABEL_11;
    }
LABEL_25:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    if (v12 < *(_DWORD *)(a3 + 12))
    {
LABEL_15:
      uint64_t v20 = (uint64_t *)(*(void *)a3 + 24 * v12);
      *uint64_t v20 = v15;
      unint64_t v21 = (unint64_t *)(v20 + 1);
LABEL_22:
      mlir::ValueRange::ValueRange(v21, v18, v19);
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  unint64_t v14 = 0;
  uint64_t v15 = 24;
  if (MEMORY[0x18] == 24) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v16 = *(void *)(v14 + 32);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 48);
  unint64_t v19 = (*(void *)(v17 + 56) - v18) >> 3;
  if (v12 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_15;
  }
LABEL_26:
  int64_t v42 = (void *)v15;
LABEL_30:
  unint64_t v26 = (char *)&v42;
  mlir::ValueRange::ValueRange(v43, v18, v19);
  uint64_t v27 = *(unsigned int *)(a3 + 8);
  unint64_t v28 = *(void *)a3;
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v36 = v27 + 1;
    BOOL v37 = v28 + 24 * v27 > (unint64_t)&v42;
    if (v28 <= (unint64_t)&v42 && v37)
    {
      unsigned int v40 = (char *)&v43[-1] - v28;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      unint64_t v28 = *(void *)a3;
      unint64_t v26 = &v40[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      unint64_t v28 = *(void *)a3;
      unint64_t v26 = (char *)&v42;
    }
  }
  uint64_t v29 = v28 + 24 * *(unsigned int *)(a3 + 8);
  long long v30 = *(_OWORD *)v26;
  *(void *)(v29 + 16) = *((void *)v26 + 2);
  *(_OWORD *)uint64_t v29 = v30;
LABEL_23:
  ++*(_DWORD *)(a3 + 8);
}

void mlir::scf::WhileOp::parse(int a1, mlir::OperationState *this)
{
  v7[32] = *MEMORY[0x263EF8340];
  unint64_t v5 = v7;
  uint64_t v6 = 0x400000000;
  unint64_t v2 = &v4;
  uint64_t v3 = 0x400000000;
  mlir::OperationState::addRegion(this);
}

uint64_t mlir::AsmParser::parseColonType<mlir::FunctionType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    unint64_t v8 = __p;
    if (__p)
    {
      uint64_t v9 = v25;
      unsigned int v10 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        unsigned int v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      unsigned int v12 = v23;
      unint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *unsigned int v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::scf::WhileOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v38[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *this;
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = *(void *)((((unint64_t)*this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = (uint64_t)(*(void *)(v7 + 56) - (void)v8) >> 3;
  if ((v5 & 0x800000) != 0)
  {
    unint64_t v10 = *((unsigned int *)v4 + 17);
    uint64_t v11 = *((void *)v4 + 9);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  mlir::ValueRange::ValueRange(v38, v11, v10);
  printInitializationList(a2, v8, v9, v38[0], v38[1], " ", 1uLL);
  unsigned int v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 2)
  {
    *(unsigned char *)(v13 + 2) = 32;
    *(_WORD *)uint64_t v13 = 14880;
    *((void *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, " : ", 3uLL);
  }
  uint64_t v14 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v15 = *((unsigned int *)v14 + 17);
    uint64_t v16 = *((void *)v14 + 9);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  v36[0] = v16;
  v36[1] = v15;
  mlir::OperandRange::getTypes(v36, v37);
  uint64_t v17 = *((unsigned int *)*this + 9);
  uint64_t v18 = (uint64_t)*this - 16;
  if (!v17) {
    uint64_t v18 = 0;
  }
  v34[0] = v18;
  v34[1] = v17;
  mlir::OperandRange::getTypes(v34, v35);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v37, v35);
  unint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
    uint64_t v21 = *this;
    unint64_t v22 = *((unsigned int *)*this + 11);
    if ((v22 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *uint64_t v20 = 32;
    uint64_t v21 = *this;
    unint64_t v22 = *((unsigned int *)*this + 11);
    if ((v22 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v23 = (((unint64_t)v21 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v21 + 10);
      goto LABEL_18;
    }
  }
  unint64_t v23 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v23, 0, 1, 0);
  unsigned int v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (_DWORD *)*((void *)v24 + 4);
  if (*((void *)v24 + 3) - (void)v25 > 3uLL)
  {
    *uint64_t v25 = 544171040;
    *((void *)v24 + 4) += 4;
    char v26 = *this;
    unint64_t v27 = *((unsigned int *)*this + 11);
    if ((v27 & 0x7FFFFF) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    llvm::raw_ostream::write(v24, " do ", 4uLL);
    char v26 = *this;
    unint64_t v27 = *((unsigned int *)*this + 11);
    if ((v27 & 0x7FFFFF) != 0)
    {
LABEL_20:
      unint64_t v28 = (((unint64_t)v26 + 16 * ((v27 >> 23) & 1) + ((v27 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v26 + 10);
      goto LABEL_23;
    }
  }
  unint64_t v28 = 0;
LABEL_23:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v28 + 24, 1, 1, 0);
  uint64_t v29 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v37[0] = mlir::Operation::getAttrDictionary(v29);
    long long v30 = (mlir::ArrayAttr *)v37;
  }
  else
  {
    long long v30 = (mlir::Operation *)((char *)v29 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v30);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 200))(a2, Value, v32, 0, 0);
}

BOOL mlir::scf::WhileOp::verify(mlir::scf::WhileOp *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((void *)*v4 == v4) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!MEMORY[0])
    {
LABEL_13:
      uint64_t v9 = 0;
      goto LABEL_14;
    }
  }
  uint64_t v5 = v4[1];
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(ZinIrHalH13g **)(v6 + 32);
  if (v7 == (ZinIrHalH13g *)(v6 + 32)) {
    goto LABEL_13;
  }
  ZinIrHalH13g::~ZinIrHalH13g(v7);
  uint64_t v9 = v8;
  if (v8
    && *(_UNKNOWN **)(*(void *)(v8 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
  {
    uint64_t v10 = *(void *)this;
    unint64_t v11 = *(unsigned int *)(*(void *)this + 44);
    if ((v11 & 0x7FFFFF) != 0) {
      unint64_t v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(v10 + 40);
    else {
      unint64_t v12 = 0;
    }
    return verifyAndGetTerminator<mlir::scf::YieldOp>(v10, (void *)(v12 + 24), (void **)"expects the 'after' region to terminate with 'scf.yield'", (void **)0x38) != 0;
  }
LABEL_14:
  __int16 v23 = 261;
  v22[0] = (void **)"expects the 'before' region to terminate with 'scf.condition'";
  v22[1] = (void **)61;
  mlir::Operation::emitOpError(v2, v22, (uint64_t)v24);
  if (v9) {
    mlir::Diagnostic::attachNote();
  }
  if (v24[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v31)
  {
    uint64_t v13 = __p;
    if (__p)
    {
      uint64_t v14 = v30;
      uint64_t v15 = __p;
      if (v30 != __p)
      {
        do
          uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      long long v30 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v27;
    if (v27)
    {
      uint64_t v17 = v28;
      uint64_t v18 = v27;
      if (v28 != v27)
      {
        do
        {
          uint64_t v20 = *--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            MEMORY[0x21667D390](v19, 0x1000C8077774924);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v27;
      }
      unint64_t v28 = v16;
      operator delete(v18);
    }
    if (v25 != &v26) {
      free(v25);
    }
  }
  return 0;
}

void mlir::scf::WhileOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::scf::IndexSwitchOp::verify(mlir::scf::IndexSwitchOp *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  v78[0] = *(void ***)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if (v4 == (v3 & 0x7FFFFF) - 1)
  {
    v71[0] = 0;
    v71[1] = 0;
    unsigned int v72 = 0;
    v78[0] = *(void ***)(v2 + 16 * ((v3 >> 23) & 1) + 64);
    uint64_t v5 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)v5;
      uint64_t v8 = 8 * v6;
      while (1)
      {
        unint64_t v70 = 0;
        unint64_t v70 = (const char *)*v7;
        llvm::DenseMapBase<llvm::DenseMap<long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v71, (uint64_t *)&v70, (uint64_t)v78);
        if (!(_BYTE)v79) {
          break;
        }
        ++v7;
        v8 -= 8;
        if (!v8) {
          goto LABEL_6;
        }
      }
      v73[0] = (void **)"has duplicate case value: ";
      __int16 v74 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v73, (uint64_t)v78);
      if (v78[0])
      {
        LODWORD(v75) = 2;
        uint64_t v76 = v70;
        int64_t v43 = (char *)&v75;
        long long v44 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v64 = v81 + 1;
          if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
          {
            int64_t v69 = (char *)&v75 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            long long v44 = (char *)v80;
            int64_t v43 = (char *)v80 + v69;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            int64_t v43 = (char *)&v75;
            long long v44 = (char *)v80;
          }
        }
        __int16 v45 = &v44[24 * v81];
        long long v46 = *(_OWORD *)v43;
        *((void *)v45 + 2) = *((void *)v43 + 2);
        *(_OWORD *)__int16 v45 = v46;
        ++v81;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
      if (v78[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      }
      if (v88)
      {
        char v47 = __p;
        if (__p)
        {
          uint64_t v48 = v87;
          uint64_t v49 = __p;
          if (v87 != __p)
          {
            do
              uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            uint64_t v49 = __p;
          }
          uint64_t v87 = v47;
          operator delete(v49);
        }
        uint64_t v50 = v84;
        if (v84)
        {
          unsigned int v51 = v85;
          unsigned int v52 = v84;
          if (v85 != v84)
          {
            do
            {
              uint64_t v54 = *--v51;
              uint64_t v53 = v54;
              *unsigned int v51 = 0;
              if (v54) {
                MEMORY[0x21667D390](v53, 0x1000C8077774924);
              }
            }
            while (v51 != v50);
            unsigned int v52 = v84;
          }
          long long v85 = v50;
          operator delete(v52);
        }
        if (v80 != v83) {
          free(v80);
        }
      }
    }
    else
    {
LABEL_6:
      uint64_t v9 = ((*(void *)this
           + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
           + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
           + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(*(void *)this + 40);
      v78[0] = (void **)"default region";
      LOWORD(v81) = 259;
      if (mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()((uint64_t *)this, v9, v78))
      {
        unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
        unsigned int v11 = v10 & 0x7FFFFF;
        if ((v10 & 0x7FFFFF) != 0)
        {
          if (v11 == 1) {
            goto LABEL_65;
          }
          unint64_t v12 = ((*(void *)this + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(*(void *)this + 40);
          unint64_t v13 = v12 + 24 * v11;
        }
        else
        {
          unint64_t v13 = 0;
          unint64_t v12 = 0;
        }
        int v55 = 0;
        uint64_t v56 = v12 + 24;
        do
        {
          v73[0] = v55;
          v78[0] = (void **)"case region #";
          uint64_t v79 = v73;
          LOWORD(v81) = 2819;
          if (!mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()((uint64_t *)this, v56, v78)) {
            break;
          }
          int v55 = (void **)((char *)v55 + 1);
          v56 += 24;
        }
        while (v56 != v13);
      }
    }
LABEL_65:
    llvm::deallocate_buffer(v71[0], (void *)(8 * v72));
  }
  v73[0] = (void **)"has ";
  __int16 v74 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v73, (uint64_t)v78);
  if (v78[0])
  {
    uint64_t v14 = (*(_DWORD *)(*(void *)this + 44) & 0x7FFFFF) - 1;
    LODWORD(v75) = 5;
    uint64_t v76 = (const char *)v14;
    uint64_t v15 = (char *)&v75;
    uint64_t v16 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v58 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        int64_t v65 = (char *)&v75 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        uint64_t v16 = (char *)v80;
        uint64_t v15 = (char *)v80 + v65;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        uint64_t v15 = (char *)&v75;
        uint64_t v16 = (char *)v80;
      }
    }
    uint64_t v17 = &v16[24 * v81];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      uint64_t v76 = " case regions but ";
      uint64_t v77 = 18;
      uint64_t v20 = (char *)&v75;
      uint64_t v21 = (char *)v80;
      if (v19 >= v82)
      {
        unint64_t v60 = v19 + 1;
        BOOL v61 = (char *)v80 + 24 * v19 > (char *)&v75;
        if (v80 <= &v75 && v61)
        {
          int64_t v67 = (char *)&v75 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          uint64_t v21 = (char *)v80;
          uint64_t v20 = (char *)v80 + v67;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          uint64_t v20 = (char *)&v75;
          uint64_t v21 = (char *)v80;
        }
      }
      unint64_t v22 = &v21[24 * v81];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      ++v81;
    }
  }
  uint64_t v75 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v75);
  if (v78[0])
  {
    LODWORD(v75) = 5;
    uint64_t v76 = v24;
    uint64_t v25 = (char *)&v75;
    uint64_t v26 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v59 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        int64_t v66 = (char *)&v75 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        uint64_t v26 = (char *)v80;
        uint64_t v25 = (char *)v80 + v66;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        uint64_t v25 = (char *)&v75;
        uint64_t v26 = (char *)v80;
      }
    }
    unint64_t v27 = &v26[24 * v81];
    long long v28 = *(_OWORD *)v25;
    *((void *)v27 + 2) = *((void *)v25 + 2);
    *(_OWORD *)unint64_t v27 = v28;
    uint64_t v29 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      uint64_t v76 = " case values";
      uint64_t v77 = 12;
      long long v30 = (char *)&v75;
      char v31 = (char *)v80;
      if (v29 >= v82)
      {
        unint64_t v62 = v29 + 1;
        BOOL v63 = (char *)v80 + 24 * v29 > (char *)&v75;
        if (v80 <= &v75 && v63)
        {
          int64_t v68 = (char *)&v75 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          char v31 = (char *)v80;
          long long v30 = (char *)v80 + v68;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          long long v30 = (char *)&v75;
          char v31 = (char *)v80;
        }
      }
      uint64_t v32 = &v31[24 * v81];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v32 = v33;
      ++v81;
    }
  }
  uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
  if (v78[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
  }
  if (v88)
  {
    long long v35 = __p;
    if (__p)
    {
      unint64_t v36 = v87;
      BOOL v37 = __p;
      if (v87 != __p)
      {
        do
          unint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        BOOL v37 = __p;
      }
      uint64_t v87 = v35;
      operator delete(v37);
    }
    unint64_t v38 = v84;
    if (v84)
    {
      BOOL v39 = v85;
      unsigned int v40 = v84;
      if (v85 != v84)
      {
        do
        {
          uint64_t v42 = *--v39;
          uint64_t v41 = v42;
          *BOOL v39 = 0;
          if (v42) {
            MEMORY[0x21667D390](v41, 0x1000C8077774924);
          }
        }
        while (v39 != v38);
        unsigned int v40 = v84;
      }
      long long v85 = v38;
      operator delete(v40);
    }
    if (v80 != v83) {
      free(v80);
    }
  }
  return v34;
}

uint64_t mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(uint64_t *a1, uint64_t a2, void ***a3)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v7 + 32));
  if (v8) {
    BOOL v9 = *(void *)(*(void *)(v8 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v22 = v8;
    if ((*(unsigned char *)(v8 + 46) & 0x80) != 0)
    {
      unsigned int v23 = *(_DWORD *)(v8 + 68);
      uint64_t v24 = *a1;
      if (v23 == *(_DWORD *)(*a1 + 36)) {
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v23 = 0;
      uint64_t v24 = *a1;
      if (!*(_DWORD *)(*a1 + 36))
      {
LABEL_29:
        uint64_t v25 = (void **)(v24 - 16);
        if (!v23) {
          uint64_t v25 = 0;
        }
        int64_t v91 = (const char *)v23;
        unint64_t v92 = v25;
        uint64_t v93 = v23;
        mlir::OperandRange::getTypes((uint64_t *)&v92, &v100);
        if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
        {
          uint64_t v26 = (const char *)*(unsigned int *)(v22 + 68);
          uint64_t v97 = *(void *)(v22 + 72);
          unint64_t v98 = v26;
          mlir::OperandRange::getTypes(&v97, (uint64_t *)&v92);
          if (v23) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v97 = 0;
          unint64_t v98 = 0;
          mlir::OperandRange::getTypes(&v97, (uint64_t *)&v92);
          if (v23)
          {
LABEL_33:
            uint64_t v90 = a1;
            unint64_t v27 = 0;
            uint64_t v29 = v100;
            uint64_t v28 = v101[0];
            uint64_t v30 = v101[1];
            char v31 = v92;
            uint64_t v32 = v94;
            long long v33 = (const char *)(v95 - v93);
            uint64_t v34 = &v92[4 * v93 + 3];
            uint64_t v35 = v101[0] - (void)v102;
            do
            {
              BOOL v37 = v31 != v32 || v33 != v27;
              if (&v27[v35]) {
                BOOL v38 = 0;
              }
              else {
                BOOL v38 = v29 == v30;
              }
              if (v38 || !v37) {
                break;
              }
              unint64_t v40 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, (uint64_t)&v27[v28]) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v40 != (*((void *)*v34 + 1) & 0xFFFFFFFFFFFFFFF8))
              {
                unint64_t v92 = (void **)"expected result #";
                __int16 v96 = 259;
                mlir::OpState::emitOpError(v90, &v92, (uint64_t)&v100);
                if (v100)
                {
                  LODWORD(v97) = 5;
                  unint64_t v98 = v27;
                  uint64_t v41 = &v97;
                  uint64_t v42 = (char *)v102;
                  if (v103 >= v104)
                  {
                    unint64_t v79 = v103 + 1;
                    if (v102 <= &v97 && (char *)v102 + 24 * v103 > (char *)&v97)
                    {
                      int64_t v87 = (char *)&v97 - (unsigned char *)v102;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v79, 24);
                      uint64_t v42 = (char *)v102;
                      uint64_t v41 = (uint64_t *)((char *)v102 + v87);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v79, 24);
                      uint64_t v41 = &v97;
                      uint64_t v42 = (char *)v102;
                    }
                  }
                  int64_t v43 = &v42[24 * v103];
                  long long v44 = *(_OWORD *)v41;
                  *((void *)v43 + 2) = v41[2];
                  *(_OWORD *)int64_t v43 = v44;
                  uint64_t v45 = ++v103;
                  if (v100)
                  {
                    LODWORD(v97) = 3;
                    unint64_t v98 = " of each region to be ";
                    uint64_t v99 = 22;
                    long long v46 = &v97;
                    char v47 = (char *)v102;
                    if (v45 >= v104)
                    {
                      unint64_t v80 = v45 + 1;
                      BOOL v81 = (char *)v102 + 24 * v45 > (char *)&v97;
                      if (v102 <= &v97 && v81)
                      {
                        int64_t v88 = (char *)&v97 - (unsigned char *)v102;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v80, 24);
                        char v47 = (char *)v102;
                        long long v46 = (uint64_t *)((char *)v102 + v88);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v80, 24);
                        long long v46 = &v97;
                        char v47 = (char *)v102;
                      }
                    }
                    uint64_t v48 = &v47[24 * v103];
                    long long v49 = *(_OWORD *)v46;
                    *((void *)v48 + 2) = v46[2];
                    *(_OWORD *)uint64_t v48 = v49;
                    ++v103;
                    if (v100)
                    {
                      uint64_t v50 = &v97;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v97, v40);
                      unsigned int v51 = (char *)v102;
                      if (v103 >= v104)
                      {
                        unint64_t v82 = v103 + 1;
                        if (v102 <= &v97 && (char *)v102 + 24 * v103 > (char *)&v97)
                        {
                          int64_t v89 = (char *)&v97 - (unsigned char *)v102;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v82, 24);
                          unsigned int v51 = (char *)v102;
                          uint64_t v50 = (uint64_t *)((char *)v102 + v89);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v82, 24);
                          uint64_t v50 = &v97;
                          unsigned int v51 = (char *)v102;
                        }
                      }
                      unsigned int v52 = &v51[24 * v103];
                      long long v53 = *(_OWORD *)v50;
                      *((void *)v52 + 2) = v50[2];
                      *(_OWORD *)unsigned int v52 = v53;
                      ++v103;
                    }
                  }
                }
                mlir::Diagnostic::attachNote();
              }
              ++v27;
              v34 += 4;
            }
            while (v91 != v27);
          }
        }
        return 1;
      }
    }
    unint64_t v92 = (void **)"expected each region to return ";
    __int16 v96 = 259;
    mlir::OpState::emitOpError(a1, &v92, (uint64_t)&v100);
    if (v100)
    {
      uint64_t v54 = (const char *)*(unsigned int *)(*a1 + 36);
      LODWORD(v97) = 5;
      unint64_t v98 = v54;
      int v55 = &v97;
      uint64_t v56 = (char *)v102;
      if (v103 >= v104)
      {
        unint64_t v74 = v103 + 1;
        if (v102 <= &v97 && (char *)v102 + 24 * v103 > (char *)&v97)
        {
          int64_t v83 = (char *)&v97 - (unsigned char *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v74, 24);
          uint64_t v56 = (char *)v102;
          int v55 = (uint64_t *)((char *)v102 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v74, 24);
          int v55 = &v97;
          uint64_t v56 = (char *)v102;
        }
      }
      uint64_t v57 = &v56[24 * v103];
      long long v58 = *(_OWORD *)v55;
      *((void *)v57 + 2) = v55[2];
      *(_OWORD *)uint64_t v57 = v58;
      uint64_t v59 = ++v103;
      if (v100)
      {
        LODWORD(v97) = 3;
        unint64_t v98 = " values, but ";
        uint64_t v99 = 13;
        unint64_t v60 = &v97;
        BOOL v61 = (char *)v102;
        if (v59 >= v104)
        {
          unint64_t v76 = v59 + 1;
          BOOL v77 = (char *)v102 + 24 * v59 > (char *)&v97;
          if (v102 <= &v97 && v77)
          {
            int64_t v85 = (char *)&v97 - (unsigned char *)v102;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v76, 24);
            BOOL v61 = (char *)v102;
            unint64_t v60 = (uint64_t *)((char *)v102 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v76, 24);
            unint64_t v60 = &v97;
            BOOL v61 = (char *)v102;
          }
        }
        unint64_t v62 = &v61[24 * v103];
        long long v63 = *(_OWORD *)v60;
        *((void *)v62 + 2) = v60[2];
        *(_OWORD *)unint64_t v62 = v63;
        ++v103;
        if (v100)
        {
          mlir::Diagnostic::operator<<((uint64_t)v101, a3);
          if (v100)
          {
            LODWORD(v97) = 3;
            unint64_t v98 = " returns ";
            uint64_t v99 = 9;
            unint64_t v64 = &v97;
            int64_t v65 = (char *)v102;
            if (v103 >= v104)
            {
              unint64_t v78 = v103 + 1;
              if (v102 <= &v97 && (char *)v102 + 24 * v103 > (char *)&v97)
              {
                int64_t v86 = (char *)&v97 - (unsigned char *)v102;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v78, 24);
                int64_t v65 = (char *)v102;
                unint64_t v64 = (uint64_t *)((char *)v102 + v86);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v78, 24);
                unint64_t v64 = &v97;
                int64_t v65 = (char *)v102;
              }
            }
            int64_t v66 = &v65[24 * v103];
            long long v67 = *(_OWORD *)v64;
            *((void *)v66 + 2) = v64[2];
            *(_OWORD *)int64_t v66 = v67;
            ++v103;
          }
        }
      }
    }
    if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
    {
      int64_t v68 = (const char *)*(unsigned int *)(v22 + 68);
      if (!v100) {
        goto LABEL_71;
      }
    }
    else
    {
      int64_t v68 = 0;
      if (!v100) {
        goto LABEL_71;
      }
    }
    LODWORD(v97) = 5;
    unint64_t v98 = v68;
    int64_t v69 = &v97;
    unint64_t v70 = (char *)v102;
    if (v103 >= v104)
    {
      unint64_t v75 = v103 + 1;
      if (v102 <= &v97 && (char *)v102 + 24 * v103 > (char *)&v97)
      {
        int64_t v84 = (char *)&v97 - (unsigned char *)v102;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v75, 24);
        unint64_t v70 = (char *)v102;
        int64_t v69 = (uint64_t *)((char *)v102 + v84);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v105, v75, 24);
        int64_t v69 = &v97;
        unint64_t v70 = (char *)v102;
      }
    }
    uint64_t v71 = &v70[24 * v103];
    long long v72 = *(_OWORD *)v69;
    *((void *)v71 + 2) = v69[2];
    *(_OWORD *)uint64_t v71 = v72;
    ++v103;
LABEL_71:
    mlir::Diagnostic::attachNote();
  }
  unint64_t v92 = (void **)"expected region to end with scf.yield, but got ";
  __int16 v96 = 259;
  mlir::OpState::emitOpError(a1, &v92, (uint64_t)&v100);
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10) {
    uint64_t v11 = v10 - 8;
  }
  else {
    uint64_t v11 = 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v11 + 32));
  if (v100) {
    mlir::Diagnostic::operator<<((uint64_t)v101, *(void *)(v12 + 48));
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v100);
  if (v100) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v100);
  }
  if (v110)
  {
    uint64_t v14 = __p;
    if (__p)
    {
      uint64_t v15 = v109;
      uint64_t v16 = __p;
      if (v109 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      __int16 v109 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v106;
    if (v106)
    {
      long long v18 = v107;
      uint64_t v19 = v106;
      if (v107 != v106)
      {
        do
        {
          uint64_t v21 = *--v18;
          uint64_t v20 = v21;
          *long long v18 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v18 != v17);
        uint64_t v19 = v106;
      }
      long long v107 = v17;
      operator delete(v19);
    }
    if (v102 != v105) {
      free(v102);
    }
  }
  return v13;
}

double mlir::scf::IndexSwitchOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x263EF8340];
  if (a2)
  {
    unint64_t v4 = *(unsigned int *)(*(void *)a1 + 36);
    if (v4) {
      uint64_t v5 = *(void *)a1 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v6 = *(_DWORD *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      uint64_t v20 = 0;
      uint64_t v12 = &v20;
      mlir::ValueRange::ValueRange(v21, v5, v4);
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      unint64_t v14 = *(void *)a3;
      if (v13 >= *(_DWORD *)(a3 + 12))
      {
        unint64_t v16 = v13 + 1;
        BOOL v17 = v14 + 24 * v13 > (unint64_t)&v20;
        if (v14 <= (unint64_t)&v20 && v17)
        {
          long long v18 = (char *)&v21[-1] - v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          unint64_t v14 = *(void *)a3;
          uint64_t v12 = (uint64_t *)&v18[*(void *)a3];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          unint64_t v14 = *(void *)a3;
          uint64_t v12 = &v20;
        }
      }
      uint64_t v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
      long long v8 = *(_OWORD *)v12;
      *(void *)(v15 + 16) = v12[2];
      *(_OWORD *)uint64_t v15 = v8;
    }
    else
    {
      uint64_t v7 = (void *)(*(void *)a3 + 24 * v6);
      *uint64_t v7 = 0;
      mlir::ValueRange::ValueRange(v7 + 1, v5, v4);
    }
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(*(void *)a1 + 44);
    unint64_t v10 = v9 & 0x7FFFFF;
    if ((v9 & 0x7FFFFF) != 0)
    {
      uint64_t v11 = ((*(void *)a1 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v10 = 0;
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v20, v11, v10);
    *(double *)&long long v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v20, 0, v20, v21[0], a3, (uint64_t)&v20);
  }
  return *(double *)&v8;
}

void mlir::scf::IndexSwitchOp::getEntrySuccessorRegions(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*a1 + 56);
  unint64_t v9 = *(unsigned int *)(*a1 + 44);
  unint64_t v10 = (uint64_t *)(*a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v12, v11);
  uint64_t v45 = v8;
  v46[0] = 0;
  char v47 = 0;
  uint64_t v48 = *v10;
  long long v49 = v52;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v45);
    if (v47) {
      char v47 = 0;
    }
    mlir::OperationName::OperationName(v46, "scf.index_switch", 16, Context);
    char v47 = 1;
  }
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v14 = *a2;
  if (*a2)
  {
    if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v14 = 0;
    }
    uint64_t v44 = v14;
    if (v14)
    {
      *(void *)&long long v52 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
      unint64_t v16 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v52);
      uint64_t v17 = *a1;
      unint64_t v18 = *(unsigned int *)(*a1 + 44);
      uint64_t v19 = v18 & 0x7FFFFF;
      if ((v18 & 0x7FFFFF) != 0)
      {
        unint64_t v20 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        uint64_t v21 = v19 - 1;
        if (!v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = -1;
        if (!v15) {
          goto LABEL_26;
        }
      }
      if (v21)
      {
        unint64_t v25 = v20 + 24;
        uint64_t v26 = 24 * ((int)v21 + 1) - 48;
        uint64_t v27 = 8 * v15 - 8;
        while (1)
        {
          uint64_t v28 = *v16;
          if (v28 == mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v44)) {
            break;
          }
          if (v27)
          {
            ++v16;
            v25 += 24;
            uint64_t v29 = v26;
            v26 -= 24;
            v27 -= 8;
            if (v29) {
              continue;
            }
          }
          uint64_t v17 = *a1;
          LODWORD(v18) = *(_DWORD *)(*a1 + 44);
          LODWORD(v19) = v18 & 0x7FFFFF;
          goto LABEL_26;
        }
        unsigned int v34 = *(_DWORD *)(a4 + 8);
        if (v34 < *(_DWORD *)(a4 + 12))
        {
          uint64_t v35 = (unint64_t *)(*(void *)a4 + 24 * v34);
          *uint64_t v35 = v25;
          long long v33 = v35 + 1;
          goto LABEL_33;
        }
        *(void *)&long long v52 = v25;
        goto LABEL_36;
      }
LABEL_26:
      if (v19)
      {
        unint64_t v30 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        unsigned int v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12))
        {
LABEL_28:
          uint64_t v32 = (unint64_t *)(*(void *)a4 + 24 * v31);
          *uint64_t v32 = v30;
          long long v33 = v32 + 1;
LABEL_33:
          mlir::ValueRange::ValueRange(v33, 0, 0);
LABEL_34:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
      }
      else
      {
        unint64_t v30 = 0;
        unsigned int v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12)) {
          goto LABEL_28;
        }
      }
      *(void *)&long long v52 = v30;
LABEL_36:
      unint64_t v36 = (char *)&v52;
      mlir::ValueRange::ValueRange((unint64_t *)&v52 + 1, 0, 0);
      uint64_t v37 = *(unsigned int *)(a4 + 8);
      unint64_t v38 = *(void *)a4;
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v41 = v37 + 1;
        BOOL v42 = v38 + 24 * v37 > (unint64_t)&v52;
        if (v38 <= (unint64_t)&v52 && v42)
        {
          int64_t v43 = (char *)&v52 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          unint64_t v38 = *(void *)a4;
          unint64_t v36 = &v43[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          unint64_t v38 = *(void *)a4;
          unint64_t v36 = (char *)&v52;
        }
      }
      uint64_t v39 = v38 + 24 * *(unsigned int *)(a4 + 8);
      long long v40 = *(_OWORD *)v36;
      *(void *)(v39 + 16) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v39 = v40;
      goto LABEL_34;
    }
  }
  unint64_t v22 = *(unsigned int *)(*a1 + 44);
  unint64_t v23 = v22 & 0x7FFFFF;
  if ((v22 & 0x7FFFFF) != 0)
  {
    uint64_t v24 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v23 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v24, v23);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v52, 0, v52, *((uint64_t *)&v52 + 1), a4, (uint64_t)&v52);
}

void mlir::scf::IndexSwitchOp::getRegionInvocationBounds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_13;
  }
  if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v6 = 0;
  }
  uint64_t v26 = v6;
  if (!v6)
  {
LABEL_13:
    uint64_t v18 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    uint64_t v19 = *(unsigned int *)(a4 + 8);
    if (v19 + v18 > (unint64_t)*(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v19 + v18, 12);
      LODWORD(v19) = *(_DWORD *)(a4 + 8);
      if (v18)
      {
LABEL_15:
        uint64_t v20 = *(void *)a4 + 12 * v19;
        uint64_t v21 = v18;
        do
        {
          *(void *)uint64_t v20 = 0x100000000;
          *(_DWORD *)(v20 + 8) = 1;
          v20 += 12;
          --v21;
        }
        while (v21);
        LODWORD(v19) = *(_DWORD *)(a4 + 8);
      }
    }
    else if (v18)
    {
      goto LABEL_15;
    }
    *(_DWORD *)(a4 + 8) = v19 + v18;
    return;
  }
  unint64_t v7 = *(unsigned int *)(*(void *)a1 + 44);
  *(void *)uint64_t v27 = *(void *)(*(void *)a1 + 16 * ((v7 >> 23) & 1) + 64);
  uint64_t v8 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  uint64_t v10 = v9;
  uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v26);
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    uint64_t v13 = &v8[v10];
    while (*v8 != Int)
    {
      ++v8;
      v12 -= 8;
      if (!v12)
      {
        uint64_t v8 = v13;
        break;
      }
    }
  }
  *(void *)uint64_t v27 = *(void *)(*(void *)a1
                             + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                             + 64);
  uint64_t v14 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  if (v8 == (void *)(v14 + 8 * v15))
  {
    LODWORD(v16) = (v7 & 0x7FFFFF) - 1;
    int v17 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    if (!v17) {
      return;
    }
  }
  else
  {
    *(void *)uint64_t v27 = *(void *)(*(void *)a1
                               + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                               + 64);
    unint64_t v16 = ((unint64_t)v8
         - mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27)) >> 3;
    int v17 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    if (!v17) {
      return;
    }
  }
  unsigned int v22 = *(_DWORD *)(a4 + 8);
  do
  {
    while (v22 < *(_DWORD *)(a4 + 12))
    {
      uint64_t v23 = *(void *)a4 + 12 * v22;
      *(_DWORD *)uint64_t v23 = 0;
      *(void *)(v23 + 4) = (v16 == 0) | 0x100000000;
      unsigned int v22 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v22;
      LODWORD(v16) = v16 - 1;
      if (!--v17) {
        return;
      }
    }
    *(_DWORD *)uint64_t v27 = 0;
    *(void *)&v27[4] = (v16 == 0) | 0x100000000;
    uint64_t v24 = *(void *)v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v22 + 1, 12);
    uint64_t v25 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v25 = v24;
    *(_DWORD *)(v25 + 8) = 1;
    unsigned int v22 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v22;
    LODWORD(v16) = v16 - 1;
    --v17;
  }
  while (v17);
}

uint64_t mlir::scf::IndexSwitchOp::fold(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  ConstantIntuint64_t Value = mlir::getConstantIntValue(*(void *)((*a1)[9] + 24) | 4);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = ConstantIntValue;
  uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  unint64_t v8 = 0;
  unint64_t v10 = v9;
  if (v9)
  {
    while (1)
    {
      uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
      if (v7 == *(void *)(mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55)
                           + 8 * v8))
        break;
      if (v10 == ++v8)
      {
        unint64_t v8 = v10;
        break;
      }
    }
  }
  uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  unint64_t v11 = *a1;
  unint64_t v12 = *((unsigned int *)*a1 + 11);
  if (v8 >= v13)
  {
    uint64_t v15 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v11 + 10);
  }
  else
  {
    if ((v12 & 0x7FFFFF) != 0) {
      unint64_t v14 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *((unsigned int *)v11 + 10);
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14 + 24 * v8 + 24;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::Block::getTerminator((ZinIrHalH13g **)v17);
  if ((*(unsigned char *)(v18 + 46) & 0x80) != 0)
  {
    uint64_t v19 = *(void *)(v18 + 72);
    mlir::Block::getTerminator((ZinIrHalH13g **)v17);
    if ((*(unsigned char *)(v20 + 46) & 0x80) != 0) {
      goto LABEL_17;
    }
LABEL_30:
    unint64_t v22 = 0;
    unsigned int v24 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    uint64_t v23 = (_DWORD *)(a3 + 8);
    BOOL v25 = v19 != 0;
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  mlir::Block::getTerminator((ZinIrHalH13g **)v17);
  if ((*(unsigned char *)(v20 + 46) & 0x80) == 0) {
    goto LABEL_30;
  }
LABEL_17:
  uint64_t v21 = *(void *)(v20 + 72);
  unint64_t v22 = *(unsigned int *)(v20 + 68);
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v23 = (_DWORD *)(a3 + 8);
  if (v22 <= *(_DWORD *)(a3 + 12))
  {
    unsigned int v24 = 0;
    BOOL v25 = v19 != v21;
    if (v22) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v22, 8);
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  BOOL v25 = v19 != v21;
  if (!v22)
  {
LABEL_21:
    if (v25) {
      goto LABEL_31;
    }
    *uint64_t v23 = v24 + v22;
    uint64_t v26 = *a1;
    uint64_t v27 = (*a1)[2];
    if (v27) {
      goto LABEL_23;
    }
    return 0;
  }
LABEL_31:
  uint64_t v36 = *(void *)a3;
  uint64_t v37 = (uint64_t *)(*(void *)a3 + 8 * v24);
  if (v25)
  {
    for (uint64_t i = (uint64_t *)(v19 + 24); ; i += 4)
    {
      uint64_t v39 = *i;
      *v37++ = v39 | 4;
    }
  }
  if (v22 > 0xA
    && ((uint64_t v40 = v24, v41 = v36 + 8 * (v22 + v24), (unint64_t)v37 < v19 + 32 * v22)
      ? (BOOL v42 = v19 + 24 >= v41)
      : (BOOL v42 = 1),
        v42))
  {
    uint64_t v43 = v22 & 3;
    if ((v22 & 3) == 0) {
      uint64_t v43 = 4;
    }
    unint64_t v44 = v22 - v43;
    v37 += v44;
    uint64_t v45 = (const double *)(v19 + 88);
    long long v46 = (int8x16_t *)(v36 + 8 * v40 + 16);
    unint64_t v47 = v44;
    do
    {
      uint64_t v48 = v45 - 8;
      unsigned long long v49 = (unsigned __int128)vld4q_f64(v48);
      unsigned long long v50 = (unsigned __int128)vld4q_f64(v45);
      int8x16_t v51 = (int8x16_t)vdupq_n_s64(4uLL);
      v46[-1] = vorrq_s8((int8x16_t)v49, v51);
      *long long v46 = vorrq_s8((int8x16_t)v50, v51);
      v45 += 16;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
  }
  else
  {
    unint64_t v44 = 0;
  }
  unint64_t v52 = v22 - v44;
  uint64_t v53 = (uint64_t *)(v19 + 32 * v44 + 24);
  do
  {
    uint64_t v54 = *v53;
    v53 += 4;
    *v37++ = v54 | 4;
    --v52;
  }
  while (v52);
  *v23 += v22;
  uint64_t v26 = *a1;
  uint64_t v27 = (*a1)[2];
  if (!v27) {
    return 0;
  }
LABEL_23:
  uint64_t v29 = *(uint64_t **)(v17 + 32);
  uint64_t v28 = *(uint64_t **)(v17 + 40);
  uint64_t v30 = v17 + 32;
  if (v28 != v29 && v26 != v29)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v27 + 32, v30, (uint64_t)v28, (uint64_t)v29);
    uint64_t v32 = *v29;
    uint64_t v33 = *v28;
    *(void *)(v33 + 8) = v29;
    *uint64_t v29 = v33;
    uint64_t v34 = *v26;
    *(void *)(v32 + 8) = v26;
    uint64_t *v28 = v34;
    *(void *)(v34 + 8) = v28;
    *uint64_t v26 = v32;
  }
  return 1;
}

uint64_t mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "scf.condition", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::scf::ConditionOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (a4 + v12 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v12, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a2 + 64) + 8 * v12;
    do
    {
      *(void *)(v14 + 8 * v13) = mlir::TypeRange::dereference_iterator(a3, v13);
      ++v13;
    }
    while (a4 != v13);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + a4;
}

BOOL mlir::scf::ConditionOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  v10[0] = &v11;
  v10[1] = (void *)0x100000000;
  BOOL v8 = (*(unsigned __int8 (**)(void))(*(void *)a1 + 264))()
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v12, 0, 1, 0xFFFFFFFFLL))&& (!v13|| (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v10))&& (v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1), IntegerType = mlir::Builder::getIntegerType(v5, 1u), uint64_t v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IntegerType, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v12,
                          (uint64_t)v10,
                          v4,
                          v7) != 0;
  if (v10[0] != &v11) {
    free(v10[0]);
  }
  if (v12 != v14) {
    free(v12);
  }
  return v8;
}

void mlir::scf::ConditionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v38[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    unsigned char *v5 = 40;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *uint64_t v7 = 41;
    ++*((void *)v6 + 4);
  }
  uint64_t v36 = v38;
  uint64_t v37 = 0x200000000;
  BOOL v8 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v8);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v8 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v11, v36, v37);
  if ((*((unsigned char *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 1)
  {
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      unsigned char *v13 = 32;
    }
    uint64_t v14 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v15 = *((unsigned int *)v14 + 17);
      uint64_t v16 = *((void *)v14 + 9);
      uint64_t v17 = v15 - 1;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = -1;
    }
    uint64_t v18 = v16 + 32;
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t AttrDictionary = ", ";
    uint64_t v32 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&AttrDictionary);
    uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
    if ((unint64_t)v21 >= *((void *)v20 + 3))
    {
      llvm::raw_ostream::write(v20, 32);
    }
    else
    {
      *((void *)v20 + 4) = v21 + 1;
      unsigned char *v21 = 32;
    }
    unint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
    if (*((unsigned char **)v22 + 3) == v23)
    {
      llvm::raw_ostream::write(v22, ":", 1uLL);
    }
    else
    {
      *uint64_t v23 = 58;
      ++*((void *)v22 + 4);
    }
    unsigned int v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v25 = (unsigned char *)*((void *)v24 + 4);
    if ((unint64_t)v25 >= *((void *)v24 + 3))
    {
      llvm::raw_ostream::write(v24, 32);
    }
    else
    {
      *((void *)v24 + 4) = v25 + 1;
      *BOOL v25 = 32;
    }
    uint64_t v26 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v27 = *((unsigned int *)v26 + 17);
      uint64_t v28 = *((void *)v26 + 9);
      uint64_t v29 = v27 - 1;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = -1;
    }
    v30[0] = v28 + 32;
    v30[1] = v29;
    mlir::OperandRange::getTypes(v30, (uint64_t *)&AttrDictionary);
    v35[0] = ", ";
    v35[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)AttrDictionary, v32, v33, v34, (uint64_t)a2, (uint64_t)a2, (uint64_t)v35);
  }
  if (v36 != v38) {
    free(v36);
  }
}

BOOL mlir::scf::ForOp::verifyInvariantsImpl(mlir::scf::ForOp *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 2u))
  {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(unsigned int *)(*(void *)this + 36);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *(void *)this;
  }
  unint64_t v6 = *(void **)(v2 + 72);
  unint64_t v7 = *(void *)(v6[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v7 == (*(void *)(v6[7] + 8) & 0xFFFFFFFFFFFFFFF8)
    && v7 == (*(void *)(v6[11] + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, ((v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ ((*(_DWORD *)(v2 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v2 + 40), (uint64_t)"region", 6, 0) != 0;
  }
  uint64_t v18 = (void **)"failed to verify that all of {lowerBound, upperBound, step} have same type";
  __int16 v19 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v18, (uint64_t)v20);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    unsigned int v9 = __p;
    if (__p)
    {
      unint64_t v10 = v26;
      uint64_t v11 = __p;
      if (v26 != __p)
      {
        do
          unint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      uint64_t v26 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v23;
    if (v23)
    {
      uint64_t v13 = v24;
      uint64_t v14 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v16 = *--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            MEMORY[0x21667D390](v15, 0x1000C8077774924);
          }
        }
        while (v13 != v12);
        uint64_t v14 = v23;
      }
      unsigned int v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v8;
}

uint64_t mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v49 = a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v49)) {
    return 1;
  }
  __int16 v48 = 261;
  v47[0] = a3;
  v47[1] = a4;
  mlir::Operation::emitOpError(a1, v47, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    int8x16_t v51 = " #";
    uint64_t v52 = 2;
    unint64_t v10 = &v50;
    uint64_t v11 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v43 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        uint64_t v11 = (char *)v54;
        unint64_t v10 = (int *)((char *)v54 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        unint64_t v10 = &v50;
        uint64_t v11 = (char *)v54;
      }
    }
    uint64_t v12 = &v11[24 * v55];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    uint64_t v14 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      int8x16_t v51 = (const char *)a5;
      uint64_t v15 = &v50;
      uint64_t v16 = (char *)v54;
      if (v14 >= v56)
      {
        unint64_t v38 = v14 + 1;
        BOOL v39 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          int64_t v44 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v16 = (char *)v54;
          uint64_t v15 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v15 = &v50;
          uint64_t v16 = (char *)v54;
        }
      }
      uint64_t v17 = &v16[24 * v55];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        int8x16_t v51 = " must be signless integer or index, but got ";
        uint64_t v52 = 44;
        uint64_t v20 = &v50;
        uint64_t v21 = (char *)v54;
        if (v19 >= v56)
        {
          unint64_t v40 = v19 + 1;
          BOOL v41 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v41)
          {
            int64_t v45 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v21 = (char *)v54;
            uint64_t v20 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v20 = &v50;
            uint64_t v21 = (char *)v54;
          }
        }
        uint64_t v22 = &v21[24 * v55];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v55;
        if (v53[0])
        {
          unsigned int v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v49);
          BOOL v25 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v42 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v46 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              BOOL v25 = (char *)v54;
              unsigned int v24 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              unsigned int v24 = &v50;
              BOOL v25 = (char *)v54;
            }
          }
          uint64_t v26 = &v25[24 * v55];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v55;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    uint64_t v28 = __p;
    if (__p)
    {
      uint64_t v29 = v61;
      uint64_t v30 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      BOOL v61 = v28;
      operator delete(v30);
    }
    unsigned int v31 = v58;
    if (v58)
    {
      uint64_t v32 = v59;
      uint64_t v33 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v35 = *--v32;
          uint64_t v34 = v35;
          *uint64_t v32 = 0;
          if (v35) {
            MEMORY[0x21667D390](v34, 0x1000C8077774924);
          }
        }
        while (v32 != v31);
        uint64_t v33 = v58;
      }
      uint64_t v59 = v31;
      operator delete(v33);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v9;
}

uint64_t mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 != a2 && *(void *)(v8 + 8) == a2) {
    return 1;
  }
  uint64_t v35 = (void **)"region #";
  __int16 v36 = 259;
  mlir::Operation::emitOpError(a1, &v35, (uint64_t)&v40);
  if (v40)
  {
    LODWORD(v33[0]) = 5;
    v33[1] = (void **)a5;
    uint64_t v9 = v33;
    unint64_t v10 = (char *)v42;
    if (v43 >= v44)
    {
      unint64_t v27 = v43 + 1;
      if (v42 <= v33 && (char *)v42 + 24 * v43 > (char *)v33)
      {
        int64_t v29 = (char *)v33 - (unsigned char *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        unint64_t v10 = (char *)v42;
        uint64_t v9 = (void ***)((char *)v42 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        uint64_t v9 = v33;
        unint64_t v10 = (char *)v42;
      }
    }
    uint64_t v11 = &v10[24 * v43];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v43;
  }
  if (a4)
  {
    __int16 v32 = 1283;
    v31[0] = " ('";
    v31[2] = a3;
    v31[3] = a4;
    v33[0] = (void **)v31;
    v33[2] = (void **)"') ";
    __int16 v34 = 770;
    if (!v40) {
      goto LABEL_13;
    }
LABEL_10:
    mlir::Diagnostic::operator<<((uint64_t)&v41, v33);
    if (v40)
    {
      int v37 = 3;
      unint64_t v38 = "failed to verify constraint: region with 1 blocks";
      uint64_t v39 = 49;
      long long v13 = &v37;
      uint64_t v14 = (char *)v42;
      if (v43 >= v44)
      {
        unint64_t v28 = v43 + 1;
        if (v42 <= &v37 && (char *)v42 + 24 * v43 > (char *)&v37)
        {
          int64_t v30 = (char *)&v37 - (unsigned char *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          uint64_t v14 = (char *)v42;
          long long v13 = (int *)((char *)v42 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          long long v13 = &v37;
          uint64_t v14 = (char *)v42;
        }
      }
      uint64_t v15 = &v14[24 * v43];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      ++v43;
    }
    goto LABEL_13;
  }
  v33[0] = (void **)" ";
  __int16 v34 = 259;
  if (v40) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  if (v50)
  {
    long long v18 = __p;
    if (__p)
    {
      uint64_t v19 = v49;
      uint64_t v20 = __p;
      if (v49 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v49 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v46;
    if (v46)
    {
      uint64_t v22 = v47;
      long long v23 = v46;
      if (v47 != v46)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        long long v23 = v46;
      }
      unint64_t v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45) {
      free(v42);
    }
  }
  return v17;
}

BOOL mlir::scf::ForallOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v111 = v6;
  if (!v6)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected DictionaryAttr to set properties";
      uint64_t v114 = 41;
      uint64_t v26 = (uint64_t *)&v112;
      unint64_t v27 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v93 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v102 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          unint64_t v27 = (char *)v116;
          uint64_t v26 = (uint64_t *)((char *)v116 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          uint64_t v26 = (uint64_t *)&v112;
          unint64_t v27 = (char *)v116;
        }
      }
      unint64_t v28 = &v27[24 * v117];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)unint64_t v28 = v29;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    int64_t v30 = __p;
    if (__p)
    {
      unsigned int v31 = v123;
      __int16 v32 = __p;
      if (v123 != __p)
      {
        do
          unsigned int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        __int16 v32 = __p;
      }
      char v123 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v33 = v121;
    long long v23 = v120;
    if (v121 == v120)
    {
LABEL_121:
      long long v121 = v21;
      operator delete(v23);
LABEL_122:
      if (v116 != v119) {
        free(v116);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_120:
    long long v23 = v120;
    goto LABEL_121;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v111, "mapping", 7uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v115, a4);
      if (v115[0])
      {
        LODWORD(v112) = 3;
        uint64_t v114 = 52;
        unint64_t v10 = (uint64_t *)&v112;
        uint64_t v11 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v94 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v103 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            uint64_t v11 = (char *)v116;
            unint64_t v10 = (uint64_t *)((char *)v116 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            unint64_t v10 = (uint64_t *)&v112;
            uint64_t v11 = (char *)v116;
          }
        }
        long long v12 = &v11[24 * v117];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)long long v12 = v13;
        ++v117;
        if (v115[0])
        {
          uint64_t v14 = (uint64_t *)&v112;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v9);
          uint64_t v15 = (char *)v116;
          if (v117 >= v118)
          {
            unint64_t v95 = v117 + 1;
            if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
            {
              int64_t v104 = (char *)&v112 - (unsigned char *)v116;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              uint64_t v15 = (char *)v116;
              uint64_t v14 = (uint64_t *)((char *)v116 + v104);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              uint64_t v14 = (uint64_t *)&v112;
              uint64_t v15 = (char *)v116;
            }
          }
          long long v16 = &v15[24 * v117];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)long long v16 = v17;
          ++v117;
          if (v115[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
          }
        }
      }
      if (!v124) {
        return 0;
      }
      long long v18 = __p;
      if (__p)
      {
        uint64_t v19 = v123;
        uint64_t v20 = __p;
        if (v123 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        char v123 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v120;
      if (!v120) {
        goto LABEL_122;
      }
      uint64_t v22 = v121;
      long long v23 = v120;
      if (v121 == v120) {
        goto LABEL_121;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        void *v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_120;
    }
    *a1 = v8;
  }
  __int16 v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticLowerBound", 0x10uLL);
  if (!v36)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected key entry for staticLowerBound in DictionaryAttr to set Properties.";
      uint64_t v114 = 76;
      unsigned int v44 = (uint64_t *)&v112;
      int64_t v45 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v96 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v105 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          int64_t v45 = (char *)v116;
          unsigned int v44 = (uint64_t *)((char *)v116 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          unsigned int v44 = (uint64_t *)&v112;
          int64_t v45 = (char *)v116;
        }
      }
      int64_t v46 = &v45[24 * v117];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = v44[2];
      *(_OWORD *)int64_t v46 = v47;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    __int16 v48 = __p;
    if (__p)
    {
      uint64_t v49 = v123;
      char v50 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        char v50 = __p;
      }
      char v123 = v48;
      operator delete(v50);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v51 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v53 = *--v51;
      uint64_t v52 = v53;
      *uint64_t v51 = 0;
      if (v53) {
        MEMORY[0x21667D390](v52, 0x1000C8077774924);
      }
    }
    while (v51 != v21);
    goto LABEL_120;
  }
  uint64_t v37 = (uint64_t)v36;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v36))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v114 = 61;
      uint64_t v54 = (uint64_t *)&v112;
      unsigned int v55 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v97 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v106 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          unsigned int v55 = (char *)v116;
          uint64_t v54 = (uint64_t *)((char *)v116 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          uint64_t v54 = (uint64_t *)&v112;
          unsigned int v55 = (char *)v116;
        }
      }
      unsigned int v56 = &v55[24 * v117];
      long long v57 = *(_OWORD *)v54;
      *((void *)v56 + 2) = v54[2];
      *(_OWORD *)unsigned int v56 = v57;
      ++v117;
      if (v115[0])
      {
        long long v58 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v37);
        uint64_t v59 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v98 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v107 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            uint64_t v59 = (char *)v116;
            long long v58 = (uint64_t *)((char *)v116 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            long long v58 = (uint64_t *)&v112;
            uint64_t v59 = (char *)v116;
          }
        }
        unint64_t v60 = &v59[24 * v117];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = v58[2];
        *(_OWORD *)unint64_t v60 = v61;
        ++v117;
        if (v115[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
        }
      }
    }
    if (!v124) {
      return 0;
    }
    char v62 = __p;
    if (__p)
    {
      uint64_t v63 = v123;
      unint64_t v64 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        unint64_t v64 = __p;
      }
      char v123 = v62;
      operator delete(v64);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    int64_t v65 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v67 = *--v65;
      uint64_t v66 = v67;
      *int64_t v65 = 0;
      if (v67) {
        MEMORY[0x21667D390](v66, 0x1000C8077774924);
      }
    }
    while (v65 != v21);
    goto LABEL_120;
  }
  a1[1] = v37;
  unint64_t v38 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticStep", 0xAuLL);
  if (!v38)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected key entry for staticStep in DictionaryAttr to set Properties.";
      uint64_t v114 = 70;
      int64_t v68 = (uint64_t *)&v112;
      int64_t v69 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v99 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v108 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          int64_t v69 = (char *)v116;
          int64_t v68 = (uint64_t *)((char *)v116 + v108);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          int64_t v68 = (uint64_t *)&v112;
          int64_t v69 = (char *)v116;
        }
      }
      unint64_t v70 = &v69[24 * v117];
      long long v71 = *(_OWORD *)v68;
      *((void *)v70 + 2) = v68[2];
      *(_OWORD *)unint64_t v70 = v71;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    long long v72 = __p;
    if (__p)
    {
      uint64_t v73 = v123;
      unint64_t v74 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        unint64_t v74 = __p;
      }
      char v123 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    unint64_t v75 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v77 = *--v75;
      uint64_t v76 = v77;
      void *v75 = 0;
      if (v77) {
        MEMORY[0x21667D390](v76, 0x1000C8077774924);
      }
    }
    while (v75 != v21);
    goto LABEL_120;
  }
  uint64_t v39 = (uint64_t)v38;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v38))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v114 = 55;
      unint64_t v78 = (uint64_t *)&v112;
      unint64_t v79 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v100 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v109 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          unint64_t v79 = (char *)v116;
          unint64_t v78 = (uint64_t *)((char *)v116 + v109);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          unint64_t v78 = (uint64_t *)&v112;
          unint64_t v79 = (char *)v116;
        }
      }
      unint64_t v80 = &v79[24 * v117];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = v78[2];
      *(_OWORD *)unint64_t v80 = v81;
      ++v117;
      if (v115[0])
      {
        unint64_t v82 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v39);
        int64_t v83 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v101 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v110 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            int64_t v83 = (char *)v116;
            unint64_t v82 = (uint64_t *)((char *)v116 + v110);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            unint64_t v82 = (uint64_t *)&v112;
            int64_t v83 = (char *)v116;
          }
        }
        int64_t v84 = &v83[24 * v117];
        long long v85 = *(_OWORD *)v82;
        *((void *)v84 + 2) = v82[2];
        *(_OWORD *)int64_t v84 = v85;
        ++v117;
        if (v115[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
        }
      }
    }
    if (!v124) {
      return 0;
    }
    int64_t v86 = __p;
    if (__p)
    {
      int64_t v87 = v123;
      int64_t v88 = __p;
      if (v123 != __p)
      {
        do
          int64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
        while (v87 != v86);
        int64_t v88 = __p;
      }
      char v123 = v86;
      operator delete(v88);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    int64_t v89 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v91 = *--v89;
      uint64_t v90 = v91;
      void *v89 = 0;
      if (v91) {
        MEMORY[0x21667D390](v90, 0x1000C8077774924);
      }
    }
    while (v89 != v21);
    goto LABEL_120;
  }
  a1[2] = v39;
  uint64_t v40 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticUpperBound", 0x10uLL);
  unint64_t v112 = v40;
  if (!v40)
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for staticUpperBound in DictionaryAttr to set Properties.");
LABEL_128:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v115);
    return 0;
  }
  uint64_t v41 = v40;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v40))
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v92, (uint64_t *)&v112);
    goto LABEL_128;
  }
  a1[3] = (uint64_t)v41;
  unint64_t v42 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "operandSegmentSizes", 0x13uLL);
  if (!v42)
  {
    unint64_t v42 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "operand_segment_sizes", 0x15uLL);
    if (!v42)
    {
      a3(v115, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_128;
    }
  }
  return mlir::convertFromAttribute(a1 + 4, (const char *)4, v42, a3, a4) != 0;
}

uint64_t mlir::scf::ForallOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v41[6] = *MEMORY[0x263EF8340];
  unint64_t v38 = a1;
  uint64_t v39 = v41;
  uint64_t v40 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v38, (uint64_t)"mapping", 7, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v7 = v40;
    }
    uint64_t v8 = (uint64_t *)((char *)v39 + 16 * v7);
    *uint64_t v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticLowerBound", 16, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v13 = v40;
    }
    uint64_t v14 = (uint64_t *)((char *)v39 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticStep", 10, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v19 = v40;
    }
    uint64_t v20 = (uint64_t *)((char *)v39 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticUpperBound", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v25 = v40;
    }
    uint64_t v26 = (uint64_t *)((char *)v39 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v27 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
  uint64_t v28 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"operandSegmentSizes", 19, v27);
  uint64_t v30 = v29;
  unsigned int v31 = v40;
  if (v40 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
    unsigned int v31 = v40;
  }
  __int16 v32 = (uint64_t *)((char *)v39 + 16 * v31);
  *__int16 v32 = v28;
  v32[1] = v30;
  BOOL v33 = __CFADD__(v40, 1);
  uint64_t v34 = (v40 + 1);
  LODWORD(v40) = v40 + 1;
  if (v33)
  {
    uint64_t DictionaryAttr = 0;
    __int16 v36 = v39;
    if (v39 == v41) {
      return DictionaryAttr;
    }
    goto LABEL_24;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v38, (uint64_t *)v39, v34);
  __int16 v36 = v39;
  if (v39 != v41) {
LABEL_24:
  }
    free(v36);
  return DictionaryAttr;
}

unint64_t mlir::scf::ForallOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v33 = v1;
    uint64_t v37 = a1;
    uint64_t v2 = &unk_267770000;
    int v19 = v18;
    unint64_t v1 = v33;
    a1 = v37;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v1 = v33;
      a1 = v37;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v46 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v34 = v5;
    unint64_t v38 = a1;
    uint64_t v2 = &unk_267770000;
    int v22 = v21;
    unint64_t v5 = v34;
    a1 = v38;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v5 = v34;
      a1 = v38;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v35 = v8;
    uint64_t v39 = a1;
    uint64_t v2 = &unk_267770000;
    int v25 = v24;
    unint64_t v8 = v35;
    a1 = v39;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      unint64_t v8 = v35;
      a1 = v39;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v36 = v11;
    uint64_t v40 = a1;
    uint64_t v2 = &unk_267770000;
    int v28 = v27;
    unint64_t v11 = v36;
    a1 = v40;
    if (v28)
    {
      unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v29 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v29;
      unint64_t v11 = v36;
      a1 = v40;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v11) ^ HIDWORD(v11));
  unint64_t v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  {
    uint64_t v41 = a1;
    uint64_t v2 = &unk_267770000;
    int v31 = v30;
    a1 = v41;
    if (v31)
    {
      unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v32 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v32;
      uint64_t v2 = (void *)&unk_267770000;
      a1 = v41;
    }
  }
  unint64_t v14 = a1[5];
  uint64_t v15 = __ROR8__(v14 + 16, 16);
  unint64_t v16 = 0x9DDFEA08EB382D69 * (a1[4] ^ v2[385] ^ v15);
  unint64_t v42 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) ^ ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) >> 47))) ^ v14;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42);
}

uint64_t mlir::scf::ForallOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, _DWORD *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 != 1886413165 || *(_DWORD *)((char *)__s1 + 3) != 1735289200) {
        goto LABEL_14;
      }
      return *a2;
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_14;
    case 0xAuLL:
      if (memcmp(__s1, "staticStep", __n)) {
        goto LABEL_14;
      }
      return a2[2];
    case 0x10uLL:
      if (!memcmp(__s1, "staticLowerBound", __n))
      {
        uint64_t result = a2[1];
      }
      else if (!memcmp(__s1, "staticUpperBound", __n))
      {
        uint64_t result = a2[3];
      }
      else
      {
LABEL_14:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_14;
      }
      goto LABEL_16;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_14;
      }
LABEL_16:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::scf::ForallOp::setInherentAttr(uint64_t result, _DWORD *__s1, size_t __n, void *a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 == 1886413165 && *(_DWORD *)((char *)__s1 + 3) == 1735289200)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            unint64_t v13 = a4;
          }
          else {
            unint64_t v13 = 0;
          }
          *(void *)uint64_t result = v13;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xAuLL:
      uint64_t result = memcmp(__s1, "staticStep", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          v7[2] = v9;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "staticLowerBound", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "staticUpperBound", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if (result) {
              unint64_t v10 = a4;
            }
            else {
              unint64_t v10 = 0;
            }
            v7[3] = v10;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
        if (result) {
          unint64_t v14 = a4;
        }
        else {
          unint64_t v14 = 0;
        }
        v7[1] = v14;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", __n);
      if (!result) {
        goto LABEL_23;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", __n);
      if (!result)
      {
LABEL_23:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v11 = result ? a4 : 0;
          uint64_t v15 = v11;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v15);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v15);
              if (v12) {
                uint64_t result = (uint64_t)memmove(v7 + 4, (const void *)result, 4 * v12);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::scf::ForallOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"mapping", 7, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticLowerBound", 16, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticStep", 10, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticUpperBound", 16, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::scf::ForallOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(v8, (void **)"mapping", (const char *)7, a3, a4))
  {
    uint64_t v9 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (void **)"staticLowerBound", (const char *)0x10, a3, a4))
    {
      unint64_t v10 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (void **)"staticStep", (const char *)0xA, a3, a4))
      {
        unint64_t v11 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v11, (void **)"staticUpperBound", (const char *)0x10, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    unint64_t v29 = (void *)(v27 + 8 * v28);
    if (v29 != Value)
    {
      while (*Value && mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(*(void *)*Value + 8))
      {
        if (++Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    unint64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    unint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v10 = (char *)v41;
        uint64_t v9 = (void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        unint64_t v10 = (char *)v41;
      }
    }
    unint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)unint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      unint64_t v35 = a2;
      unint64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        unint64_t v36 = "' failed to satisfy constraint: Device Mapping array attribute";
        uint64_t v37 = 62;
        unint64_t v13 = &v35;
        unint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unint64_t v14 = (char *)v41;
            unint64_t v13 = (void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unint64_t v13 = &v35;
            unint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    int v18 = __p;
    if (__p)
    {
      int v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      __int16 v48 = v18;
      operator delete(v20);
    }
    int v21 = v45;
    if (v45)
    {
      int v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      unint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

BOOL mlir::scf::ForallOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = __p;
        if (__p)
        {
          unint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          int v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    long long v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 4, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 3)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::scf::ForallOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 32, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 24));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 32), 4);
  }
  return result;
}

BOOL mlir::scf::ForallOp::verifyInvariantsImpl(mlir::scf::ForallOp *this)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = (uint64_t *)(*(void *)this
  }
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (void *)v3[1];
  if (!v4)
  {
    v52[0] = (void **)"requires attribute 'staticLowerBound'";
    __int16 v53 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v54);
    uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (!v61) {
      return v30;
    }
    unint64_t v31 = __p;
    if (__p)
    {
      unint64_t v32 = v60;
      int64_t v33 = __p;
      if (v60 != __p)
      {
        do
          unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        int64_t v33 = __p;
      }
      unint64_t v60 = v31;
      operator delete(v33);
    }
    int64_t v34 = v57;
    if (v57)
    {
      unint64_t v35 = v58;
      unint64_t v36 = v57;
      if (v58 == v57) {
        goto LABEL_82;
      }
      do
      {
        uint64_t v38 = *--v35;
        uint64_t v37 = v38;
        *unint64_t v35 = 0;
        if (v38) {
          MEMORY[0x21667D390](v37, 0x1000C8077774924);
        }
      }
      while (v35 != v34);
LABEL_81:
      unint64_t v36 = v57;
LABEL_82:
      long long v58 = v34;
      operator delete(v36);
    }
LABEL_83:
    if (v55 != &v56) {
      free(v55);
    }
    return v30;
  }
  unint64_t v5 = (void *)v3[2];
  if (!v5)
  {
    v52[0] = (void **)"requires attribute 'staticStep'";
    __int16 v53 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v54);
    uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (!v61) {
      return v30;
    }
    uint64_t v39 = __p;
    if (__p)
    {
      uint64_t v40 = v60;
      uint64_t v41 = __p;
      if (v60 != __p)
      {
        do
          uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        uint64_t v41 = __p;
      }
      unint64_t v60 = v39;
      operator delete(v41);
    }
    int64_t v34 = v57;
    if (v57)
    {
      unsigned int v42 = v58;
      unint64_t v36 = v57;
      if (v58 == v57) {
        goto LABEL_82;
      }
      do
      {
        uint64_t v44 = *--v42;
        uint64_t v43 = v44;
        *unsigned int v42 = 0;
        if (v44) {
          MEMORY[0x21667D390](v43, 0x1000C8077774924);
        }
      }
      while (v42 != v34);
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  uint64_t v6 = (void *)v3[3];
  if (!v6)
  {
    v52[0] = (void **)"requires attribute 'staticUpperBound'";
    __int16 v53 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v52, (uint64_t)v54);
    uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (!v61) {
      return v30;
    }
    unint64_t v45 = __p;
    if (__p)
    {
      unint64_t v46 = v60;
      long long v47 = __p;
      if (v60 != __p)
      {
        do
          unint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        long long v47 = __p;
      }
      unint64_t v60 = v45;
      operator delete(v47);
    }
    int64_t v34 = v57;
    if (v57)
    {
      __int16 v48 = v58;
      unint64_t v36 = v57;
      if (v58 == v57) {
        goto LABEL_82;
      }
      do
      {
        uint64_t v50 = *--v48;
        uint64_t v49 = v50;
        *__int16 v48 = 0;
        if (v50) {
          MEMORY[0x21667D390](v49, 0x1000C8077774924);
        }
      }
      while (v48 != v34);
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  uint64_t v7 = *v3;
  v54[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (void **)"staticLowerBound", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
  v54[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (void **)"staticUpperBound", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
  v54[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (void **)"staticStep", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
  v54[0] = *(void *)this;
  }
  if (!mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(v7, (void **)"mapping", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
  unint64_t v8 = *(unsigned int *)(*(void *)this + 44);
  }
  uint64_t v9 = *(void *)this + 16 * ((v8 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v9 + 32);
  if ((v8 & 0x800000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)this + 72);
    if (v10) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (v10)
    {
LABEL_15:
      uint64_t v12 = 0;
      uint64_t v13 = v11 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v12))
      {
        ++v12;
        v13 += 32;
        if (v10 == v12) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
LABEL_18:
  uint64_t ODSOperands = mlir::pdl_interp::RecordMatchOp::getODSOperands(this, 1u);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v17 += 32;
      if (!--v16) {
        goto LABEL_22;
      }
    }
    return 0;
  }
LABEL_22:
  uint64_t v18 = mlir::pdl_interp::RecordMatchOp::getODSOperands(this, 2u);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v18 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v21 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v21 += 32;
      if (!--v20) {
        goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_26:
  uint64_t v22 = mlir::pdl_interp::RecordMatchOp::getODSOperands(this, 3u);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v22 + 24;
    while (mlir::scf::__mlir_ods_local_type_constraint_SCFOps4(*(void *)this, *(void *)(*(void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v10))
    {
      LODWORD(v10) = v10 + 1;
      v25 += 32;
      if (!--v24) {
        goto LABEL_30;
      }
    }
    return 0;
  }
LABEL_30:
  uint64_t v26 = *(void *)this;
  uint64_t v27 = *(unsigned int *)(*(void *)this + 36);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v28 = *(void *)this - 16;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v27)
  {
    for (uint64_t i = 0; i != v27; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v28, i);
    uint64_t v26 = *(void *)this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v26, ((v26+ 16 * (((unint64_t)*(unsigned int *)(v26 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v26 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v26 + 40), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::scf::__mlir_ods_local_type_constraint_SCFOps4(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v51[0] = a2;
    v51[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    return 1;
  }
  else
  {
    __int16 v47 = 261;
    v46[0] = a3;
    v46[1] = a4;
    mlir::Operation::emitOpError(a1, v46, (uint64_t)v51);
    if (v51[0])
    {
      int v48 = 3;
      uint64_t v49 = " #";
      uint64_t v50 = 2;
      unint64_t v8 = &v48;
      uint64_t v9 = (char *)v52;
      if (v53 >= v54)
      {
        unint64_t v36 = v53 + 1;
        if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
        {
          int64_t v42 = (char *)&v48 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          uint64_t v9 = (char *)v52;
          unint64_t v8 = (int *)((char *)v52 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          unint64_t v8 = &v48;
          uint64_t v9 = (char *)v52;
        }
      }
      uint64_t v10 = &v9[24 * v53];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      uint64_t v12 = ++v53;
      if (v51[0])
      {
        int v48 = 5;
        uint64_t v49 = (const char *)a5;
        uint64_t v13 = &v48;
        unint64_t v14 = (char *)v52;
        if (v12 >= v54)
        {
          unint64_t v37 = v12 + 1;
          BOOL v38 = (char *)v52 + 24 * v12 > (char *)&v48;
          if (v52 <= &v48 && v38)
          {
            int64_t v43 = (char *)&v48 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            unint64_t v14 = (char *)v52;
            uint64_t v13 = (int *)((char *)v52 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            uint64_t v13 = &v48;
            unint64_t v14 = (char *)v52;
          }
        }
        uint64_t v15 = &v14[24 * v53];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v15 = v16;
        uint64_t v17 = ++v53;
        if (v51[0])
        {
          int v48 = 3;
          uint64_t v49 = " must be variadic of ranked tensor of any type values, but got ";
          uint64_t v50 = 63;
          uint64_t v18 = &v48;
          uint64_t v19 = (char *)v52;
          if (v17 >= v54)
          {
            unint64_t v39 = v17 + 1;
            BOOL v40 = (char *)v52 + 24 * v17 > (char *)&v48;
            if (v52 <= &v48 && v40)
            {
              int64_t v44 = (char *)&v48 - (unsigned char *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              uint64_t v19 = (char *)v52;
              uint64_t v18 = (int *)((char *)v52 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              uint64_t v18 = &v48;
              uint64_t v19 = (char *)v52;
            }
          }
          uint64_t v20 = &v19[24 * v53];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = *((void *)v18 + 2);
          *(_OWORD *)uint64_t v20 = v21;
          ++v53;
          if (v51[0])
          {
            uint64_t v22 = &v48;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, a2);
            uint64_t v23 = (char *)v52;
            if (v53 >= v54)
            {
              unint64_t v41 = v53 + 1;
              if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
              {
                int64_t v45 = (char *)&v48 - (unsigned char *)v52;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                uint64_t v23 = (char *)v52;
                uint64_t v22 = (int *)((char *)v52 + v45);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                uint64_t v22 = &v48;
                uint64_t v23 = (char *)v52;
              }
            }
            uint64_t v24 = &v23[24 * v53];
            long long v25 = *(_OWORD *)v22;
            *((void *)v24 + 2) = *((void *)v22 + 2);
            *(_OWORD *)uint64_t v24 = v25;
            ++v53;
          }
        }
      }
    }
    uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (v60)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        uint64_t v28 = v59;
        unint64_t v29 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          unint64_t v29 = __p;
        }
        uint64_t v59 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v56;
      if (v56)
      {
        unint64_t v31 = v57;
        unint64_t v32 = v56;
        if (v57 != v56)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            void *v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          unint64_t v32 = v56;
        }
        long long v57 = v30;
        operator delete(v32);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
  }
  return v26;
}

uint64_t mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "scf.if", 6, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::scf::IfOp::verifyInvariantsImpl(mlir::scf::IfOp *this)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(void *)this;
  }
  uint64_t v3 = *(unsigned int *)(*(void *)this + 36);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *(void *)this;
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, ((v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v2 + 40), (uint64_t)"thenRegion", 10, 0))return 0; {
  uint64_t v6 = *(void *)this;
  }
  unint64_t v7 = ((*(void *)this
       + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
       + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
       + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *(unsigned int *)(*(void *)this + 40);
  unint64_t v8 = v7 + 24;
  uint64_t v9 = *(void *)(v7 + 32);
  if (v9 == v8 || *(void *)(v9 + 8) == v8) {
    return 1;
  }
  unint64_t v37 = (void **)"region #";
  __int16 v38 = 259;
  mlir::Operation::emitOpError(v6, &v37, (uint64_t)&v42);
  if (v42)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = (void **)1;
    uint64_t v10 = v35;
    uint64_t v11 = (char *)v44;
    if (v45 >= v46)
    {
      unint64_t v29 = v45 + 1;
      if (v44 <= v35 && (char *)v44 + 24 * v45 > (char *)v35)
      {
        int64_t v31 = (char *)v35 - (unsigned char *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
        uint64_t v11 = (char *)v44;
        uint64_t v10 = (void ***)((char *)v44 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v29, 24);
        uint64_t v10 = v35;
        uint64_t v11 = (char *)v44;
      }
    }
    uint64_t v12 = &v11[24 * v45];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)uint64_t v12 = v13;
    ++v45;
    BOOL v14 = v42 == 0;
  }
  else
  {
    BOOL v14 = 1;
  }
  __int16 v34 = 1283;
  v33[0] = " ('";
  v33[2] = "elseRegion";
  v33[3] = 10;
  v35[0] = (void **)v33;
  void v35[2] = (void **)"') ";
  __int16 v36 = 770;
  if (!v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v43, v35);
    if (v42)
    {
      int v39 = 3;
      BOOL v40 = "failed to verify constraint: region with at most 1 blocks";
      uint64_t v41 = 57;
      uint64_t v15 = &v39;
      long long v16 = (char *)v44;
      if (v45 >= v46)
      {
        unint64_t v30 = v45 + 1;
        if (v44 <= &v39 && (char *)v44 + 24 * v45 > (char *)&v39)
        {
          int64_t v32 = (char *)&v39 - (unsigned char *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
          long long v16 = (char *)v44;
          uint64_t v15 = (int *)((char *)v44 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
          uint64_t v15 = &v39;
          long long v16 = (char *)v44;
        }
      }
      uint64_t v17 = &v16[24 * v45];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      ++v45;
    }
  }
  char v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v42);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  if (v52)
  {
    uint64_t v20 = __p;
    if (__p)
    {
      long long v21 = v51;
      uint64_t v22 = __p;
      if (v51 != __p)
      {
        do
          long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v51 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v48;
    if (v48)
    {
      uint64_t v24 = v49;
      long long v25 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v27 = *--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            MEMORY[0x21667D390](v26, 0x1000C8077774924);
          }
        }
        while (v24 != v23);
        long long v25 = v48;
      }
      uint64_t v49 = v23;
      operator delete(v25);
    }
    if (v44 != v47) {
      free(v44);
    }
  }
  return v19 != 0;
}

uint64_t mlir::scf::IndexSwitchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      long long v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      uint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          uint64_t v12 = (char *)v60;
        }
      }
      long long v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)long long v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v15 = __p;
    if (__p)
    {
      long long v16 = v67;
      uint64_t v17 = __p;
      if (v67 != __p)
      {
        do
          long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      uint64_t v67 = v15;
      operator delete(v17);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    char v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      *char v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  unint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v55, "cases", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      long long v57 = "expected key entry for cases in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          uint64_t v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      long long v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)long long v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v27 = __p;
    if (__p)
    {
      uint64_t v28 = v67;
      unint64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        unint64_t v29 = __p;
      }
      uint64_t v67 = v27;
      operator delete(v29);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    unint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = *--v30;
      uint64_t v31 = v32;
      *unint64_t v30 = 0;
      if (v32) {
        MEMORY[0x21667D390](v31, 0x1000C8077774924);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = (uint64_t)v8;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    uint64_t v33 = &v56;
    __int16 v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        __int16 v34 = (char *)v60;
        uint64_t v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v33 = &v56;
        __int16 v34 = (char *)v60;
      }
    }
    unint64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)unint64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      unint64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      __int16 v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          __int16 v38 = (char *)v60;
          unint64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v37 = &v56;
          __int16 v38 = (char *)v60;
        }
      }
      int v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)int v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v41 = __p;
    if (__p)
    {
      uint64_t v42 = v67;
      uint64_t v43 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        uint64_t v43 = __p;
      }
      uint64_t v67 = v41;
      operator delete(v43);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    int64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      int64_t v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = *--v44;
      uint64_t v45 = v46;
      *int64_t v44 = 0;
      if (v46) {
        MEMORY[0x21667D390](v45, 0x1000C8077774924);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::scf::IndexSwitchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"cases", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  unint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  unint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::scf::IndexSwitchOp::verifyInvariantsImpl(mlir::scf::IndexSwitchOp *this)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v68[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v3, (void **)"cases", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v68))return 0; {
    uint64_t v4 = *(void *)this;
    }
    unint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v5 + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      __int16 v64 = 261;
      v63[0] = (void **)"operand";
      v63[1] = (void **)7;
      mlir::Operation::emitOpError(v4, v63, (uint64_t)v68);
      if (v68[0])
      {
        int v65 = 3;
        uint64_t v66 = " #";
        uint64_t v67 = 2;
        uint64_t v6 = &v65;
        unint64_t v7 = (char *)v69;
        if (v70 >= v71)
        {
          unint64_t v53 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            int64_t v59 = (char *)&v65 - (unsigned char *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
            unint64_t v7 = (char *)v69;
            uint64_t v6 = (int *)((char *)v69 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
            uint64_t v6 = &v65;
            unint64_t v7 = (char *)v69;
          }
        }
        BOOL v8 = &v7[24 * v70];
        long long v9 = *(_OWORD *)v6;
        *((void *)v8 + 2) = *((void *)v6 + 2);
        *(_OWORD *)BOOL v8 = v9;
        uint64_t v10 = ++v70;
        if (v68[0])
        {
          int v65 = 5;
          uint64_t v66 = 0;
          uint64_t v11 = &v65;
          uint64_t v12 = (char *)v69;
          if (v10 >= v71)
          {
            unint64_t v54 = v10 + 1;
            BOOL v55 = (char *)v69 + 24 * v10 > (char *)&v65;
            if (v69 <= &v65 && v55)
            {
              int64_t v60 = (char *)&v65 - (unsigned char *)v69;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v54, 24);
              uint64_t v12 = (char *)v69;
              uint64_t v11 = (int *)((char *)v69 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v54, 24);
              uint64_t v11 = &v65;
              uint64_t v12 = (char *)v69;
            }
          }
          long long v13 = &v12[24 * v70];
          long long v14 = *(_OWORD *)v11;
          *((void *)v13 + 2) = *((void *)v11 + 2);
          *(_OWORD *)long long v13 = v14;
          uint64_t v15 = ++v70;
          if (v68[0])
          {
            int v65 = 3;
            uint64_t v66 = " must be index, but got ";
            uint64_t v67 = 24;
            long long v16 = &v65;
            uint64_t v17 = (char *)v69;
            if (v15 >= v71)
            {
              unint64_t v56 = v15 + 1;
              BOOL v57 = (char *)v69 + 24 * v15 > (char *)&v65;
              if (v69 <= &v65 && v57)
              {
                int64_t v61 = (char *)&v65 - (unsigned char *)v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v56, 24);
                uint64_t v17 = (char *)v69;
                long long v16 = (int *)((char *)v69 + v61);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v56, 24);
                long long v16 = &v65;
                uint64_t v17 = (char *)v69;
              }
            }
            long long v18 = &v17[24 * v70];
            long long v19 = *(_OWORD *)v16;
            *((void *)v18 + 2) = *((void *)v16 + 2);
            *(_OWORD *)long long v18 = v19;
            ++v70;
            if (v68[0])
            {
              uint64_t v20 = &v65;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v5);
              uint64_t v21 = (char *)v69;
              if (v70 >= v71)
              {
                unint64_t v58 = v70 + 1;
                if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
                {
                  int64_t v62 = (char *)&v65 - (unsigned char *)v69;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v58, 24);
                  uint64_t v21 = (char *)v69;
                  uint64_t v20 = (int *)((char *)v69 + v62);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v58, 24);
                  uint64_t v20 = &v65;
                  uint64_t v21 = (char *)v69;
                }
              }
              uint64_t v22 = &v21[24 * v70];
              long long v23 = *(_OWORD *)v20;
              *((void *)v22 + 2) = *((void *)v20 + 2);
              *(_OWORD *)uint64_t v22 = v23;
              ++v70;
            }
          }
        }
      }
      char v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      }
      if (v77)
      {
        long long v25 = __p;
        if (__p)
        {
          long long v26 = v76;
          uint64_t v27 = __p;
          if (v76 != __p)
          {
            do
              long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            uint64_t v27 = __p;
          }
          uint64_t v76 = v25;
          operator delete(v27);
        }
        uint64_t v28 = v73;
        if (v73)
        {
          unint64_t v29 = v74;
          unint64_t v30 = v73;
          if (v74 != v73)
          {
            do
            {
              uint64_t v32 = *--v29;
              uint64_t v31 = v32;
              *unint64_t v29 = 0;
              if (v32) {
                MEMORY[0x21667D390](v31, 0x1000C8077774924);
              }
            }
            while (v29 != v28);
            unint64_t v30 = v73;
          }
          unint64_t v74 = v28;
          operator delete(v30);
        }
        if (v69 != v72) {
          free(v69);
        }
      }
      if (!v24) {
        return 0;
      }
    }
    uint64_t v42 = *(void *)this;
    uint64_t v43 = *(unsigned int *)(*(void *)this + 36);
    uint64_t v44 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
    if (v43)
    {
      for (uint64_t i = 0; i != v43; ++i)
        mlir::detail::OpResultImpl::getNextResultAtOffset(v44, i);
      uint64_t v42 = *(void *)this;
    }
    if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v42, ((v42+ 16 * (((unint64_t)*(unsigned int *)(v42 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v42 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v42 + 40), (uint64_t)"defaultRegion", 13, 0))return 0; {
    unint64_t v46 = *(unsigned int *)(*(void *)this + 44);
    }
    unsigned int v47 = v46 & 0x7FFFFF;
    if ((v46 & 0x7FFFFF) == 0)
    {
      unint64_t v49 = 0;
      unint64_t v48 = 0;
LABEL_62:
      uint64_t v50 = v48 + 24;
      for (unsigned int j = 1;
            mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*(void *)this, v50, (uint64_t)"caseRegions", 11, j);
            ++j)
      {
        v50 += 24;
        if (v50 == v49) {
          return 1;
        }
      }
      return 0;
    }
    if (v47 != 1)
    {
      unint64_t v48 = ((*(void *)this + 16 * ((v46 >> 23) & 1) + ((v46 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(void *)this + 40);
      unint64_t v49 = v48 + 24 * v47;
      goto LABEL_62;
    }
    return 1;
  }
  else
  {
    v63[0] = (void **)"requires attribute 'cases'";
    __int16 v64 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v63, (uint64_t)v68);
    uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    }
    if (v77)
    {
      __int16 v34 = __p;
      if (__p)
      {
        unint64_t v35 = v76;
        long long v36 = __p;
        if (v76 != __p)
        {
          do
            unint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          long long v36 = __p;
        }
        uint64_t v76 = v34;
        operator delete(v36);
      }
      unint64_t v37 = v73;
      if (v73)
      {
        __int16 v38 = v74;
        int v39 = v73;
        if (v74 != v73)
        {
          do
          {
            uint64_t v41 = *--v38;
            uint64_t v40 = v41;
            *__int16 v38 = 0;
            if (v41) {
              MEMORY[0x21667D390](v40, 0x1000C8077774924);
            }
          }
          while (v38 != v37);
          int v39 = v73;
        }
        unint64_t v74 = v37;
        operator delete(v39);
      }
      if (v69 != v72) {
        free(v69);
      }
    }
  }
  return v33;
}

void mlir::scf::IndexSwitchOp::parse()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(&v5[8], 0, 24);
  __src = v5;
  uint64_t v4 = 0x100000000;
  uint64_t v0 = &v2;
  uint64_t v1 = 0x200000000;
  operator new();
}

void mlir::scf::IndexSwitchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v66[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  __int16 v64 = v66;
  v66[0] = "cases";
  v66[1] = 5;
  uint64_t v65 = 0x200000001;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v64, v65);
  if (*((_DWORD *)*this + 9))
  {
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *uint64_t v11 = 32;
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v13 = (_WORD *)*((void *)v12 + 4);
    if (*((void *)v12 + 3) - (void)v13 > 1uLL)
    {
      _WORD *v13 = 15917;
      *((void *)v12 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v12, "->", 2uLL);
    }
    long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if ((unint64_t)v15 >= *((void *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((void *)v14 + 4) = v15 + 1;
      *uint64_t v15 = 32;
    }
    uint64_t v16 = *((unsigned int *)*this + 9);
    uint64_t v17 = (uint64_t)*this - 16;
    if (!v16) {
      uint64_t v17 = 0;
    }
    v57[0] = v17;
    v57[1] = v16;
    mlir::OperandRange::getTypes(v57, (uint64_t *)&AttrDictionary);
    v58[0] = ", ";
    v58[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(AttrDictionary, v61, v62, v63, (uint64_t)a2, (uint64_t)a2, (uint64_t)v58);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *long long v19 = 32;
  }
  unint64_t v56 = (mlir::scf::IndexSwitchOp *)this;
  uint64_t v20 = *this;
  unint64_t v21 = *((unsigned int *)*this + 11);
  uint64_t v22 = (uint64_t)*this + 16 * ((v21 >> 23) & 1);
  uint64_t v25 = *(void *)(v22 + 64);
  uint64_t v23 = v22 + 64;
  uint64_t v24 = v25;
  if ((v21 & 0x7FFFFF) != 0)
  {
    unint64_t v26 = ((v23 + ((v21 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *((unsigned int *)v20 + 10);
    unint64_t v27 = (v21 & 0x7FFFFF) - 1;
  }
  else
  {
    unint64_t v26 = 0;
    unint64_t v27 = -1;
  }
  mlir::ValueRange::ValueRange(v59, v26 + 24, v27);
  unint64_t v28 = v59[0];
  unint64_t v29 = v59[1];
  v58[0] = v24;
  uint64_t v30 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v58);
  unint64_t AttrDictionary = v30;
  unint64_t v61 = v28;
  uint64_t v62 = 0;
  if (v31)
  {
    uint64_t v32 = (unint64_t *)v30;
    uint64_t v33 = v31;
    uint64_t v34 = 0;
    unint64_t v35 = (unint64_t *)(v30 + 8 * v33);
    do
    {
      if (v61 == v28 && v34 == v29) {
        break;
      }
      unint64_t v37 = mlir::RegionRange::dereference_iterator(&v61, v34);
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 128))(a2);
      __int16 v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v39 = *((void *)v38 + 4);
      if ((unint64_t)(*((void *)v38 + 3) - v39) > 4)
      {
        *(unsigned char *)(v39 + 4) = 32;
        *(_DWORD *)uint64_t v39 = 1702060387;
        *((void *)v38 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v38, "case ", 5uLL);
      }
      uint64_t v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      llvm::raw_ostream::operator<<(v40, *v32);
      uint64_t v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v42 = (unsigned char *)*((void *)v41 + 4);
      if ((unint64_t)v42 < *((void *)v41 + 3))
      {
        *((void *)v41 + 4) = v42 + 1;
        *uint64_t v42 = 32;
      }
      else
      {
        llvm::raw_ostream::write(v41, 32);
      }
      (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v37, 0, 1, 0);
      uint64_t v32 = (unint64_t *)(AttrDictionary + 8);
      uint64_t v34 = v62 + 1;
      unint64_t AttrDictionary = (unint64_t)v32;
      ++v62;
    }
    while (v32 != v35);
  }
  (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 128))(a2);
  uint64_t v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v44 = (_DWORD *)*((void *)v43 + 4);
  if (*((void *)v43 + 3) - (void)v44 > 6uLL)
  {
    *(_DWORD *)((char *)v44 + 3) = 1953264993;
    *uint64_t v44 = 1634100580;
    *((void *)v43 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v43, "default", 7uLL);
  }
  uint64_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v46 = (unsigned char *)*((void *)v45 + 4);
  if ((unint64_t)v46 >= *((void *)v45 + 3))
  {
    llvm::raw_ostream::write(v45, 32);
  }
  else
  {
    *((void *)v45 + 4) = v46 + 1;
    *unint64_t v46 = 32;
  }
  unsigned int v47 = (void *)(((*(void *)v56
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)v56 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)v56 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)v56 + 40));
  if ((void *)*v47 == v47
    || ((uint64_t v48 = v47[1]) != 0 ? (v49 = (ZinIrHalH13g **)(v48 - 8)) : (v49 = 0),
        (mlir::Block::getTerminator(v49), !v50)
     || (int64_t v51 = v50,
         unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v50),
         mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
     || (*((unsigned char *)v51 + 46) & 0x80) != 0 && *((_DWORD *)v51 + 17)))
  {
    BOOL v52 = 1;
    uint64_t v53 = *(void *)v56;
    unint64_t v54 = *(unsigned int *)(*(void *)v56 + 44);
    if ((v54 & 0x7FFFFF) != 0)
    {
LABEL_54:
      unint64_t v55 = ((v53 + 16 * ((v54 >> 23) & 1) + ((v54 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v53 + 40);
      goto LABEL_57;
    }
  }
  else
  {
    BOOL v52 = *((_DWORD *)v51 + 9) != 0;
    uint64_t v53 = *(void *)v56;
    unint64_t v54 = *(unsigned int *)(*(void *)v56 + 44);
    if ((v54 & 0x7FFFFF) != 0) {
      goto LABEL_54;
    }
  }
  unint64_t v55 = 0;
LABEL_57:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, BOOL, void))(*(void *)a2 + 224))(a2, v55, 1, v52, 0);
  if (v64 != v66) {
    free(v64);
  }
}

BOOL mlir::scf::ParallelOp::setPropertiesFromAttr(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v36 = v6;
  if (!v6)
  {
    a3(v40, a4);
    if (v40[0])
    {
      int v37 = 3;
      __int16 v38 = "expected DictionaryAttr to set properties";
      uint64_t v39 = 41;
      uint64_t v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v42 >= v43)
      {
        unint64_t v32 = v42 + 1;
        if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
        {
          int64_t v34 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v11 = (char *)v41;
          uint64_t v10 = (int *)((char *)v41 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
          uint64_t v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
      }
    }
    if (!v49) {
      return 0;
    }
    long long v14 = __p;
    if (__p)
    {
      uint64_t v15 = v48;
      uint64_t v16 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v48 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v45;
    if (!v45) {
      goto LABEL_43;
    }
    long long v18 = v46;
    long long v19 = v45;
    if (v46 == v45)
    {
LABEL_42:
      unint64_t v46 = v17;
      operator delete(v19);
LABEL_43:
      if (v41 != v44) {
        free(v41);
      }
      return 0;
    }
    do
    {
      uint64_t v21 = *--v18;
      uint64_t v20 = v21;
      *long long v18 = 0;
      if (v21) {
        MEMORY[0x21667D390](v20, 0x1000C8077774924);
      }
    }
    while (v18 != v17);
LABEL_41:
    long long v19 = v45;
    goto LABEL_42;
  }
  BOOL v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v36, "operandSegmentSizes", 0x13uLL);
  if (!v8)
  {
    BOOL v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v36, "operand_segment_sizes", 0x15uLL);
    if (!v8)
    {
      a3(v40, a4);
      if (v40[0])
      {
        int v37 = 3;
        __int16 v38 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v39 = 79;
        uint64_t v22 = &v37;
        uint64_t v23 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v33 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v35 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            uint64_t v23 = (char *)v41;
            uint64_t v22 = (int *)((char *)v41 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v33, 24);
            uint64_t v22 = &v37;
            uint64_t v23 = (char *)v41;
          }
        }
        uint64_t v24 = &v23[24 * v42];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v42;
        if (v40[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
        }
      }
      if (!v49) {
        return 0;
      }
      unint64_t v26 = __p;
      if (__p)
      {
        unint64_t v27 = v48;
        unint64_t v28 = __p;
        if (v48 != __p)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          unint64_t v28 = __p;
        }
        uint64_t v48 = v26;
        operator delete(v28);
      }
      uint64_t v17 = v45;
      if (!v45) {
        goto LABEL_43;
      }
      unint64_t v29 = v46;
      long long v19 = v45;
      if (v46 == v45) {
        goto LABEL_42;
      }
      do
      {
        uint64_t v31 = *--v29;
        uint64_t v30 = v31;
        *unint64_t v29 = 0;
        if (v31) {
          MEMORY[0x21667D390](v30, 0x1000C8077774924);
        }
      }
      while (v29 != v17);
      goto LABEL_41;
    }
  }
  return mlir::convertFromAttribute(a1, (const char *)4, v8, a3, a4) != 0;
}

uint64_t mlir::scf::ParallelOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t a2)
{
  v16[6] = *MEMORY[0x263EF8340];
  long long v13 = a1;
  long long v14 = v16;
  uint64_t v15 = 0x300000000;
  uint64_t v2 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2, 4);
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v13, (uint64_t)"operandSegmentSizes", 19, v2);
  uint64_t v5 = v4;
  unsigned int v6 = v15;
  if (v15 >= HIDWORD(v15))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v15 + 1, 16);
    unsigned int v6 = v15;
  }
  unint64_t v7 = (uint64_t *)((char *)v14 + 16 * v6);
  *unint64_t v7 = NamedAttr;
  v7[1] = v5;
  BOOL v8 = __CFADD__(v15, 1);
  uint64_t v9 = (v15 + 1);
  LODWORD(v15) = v15 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v11 = v14;
    if (v14 == v16) {
      return DictionaryAttr;
    }
    goto LABEL_8;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v13, (uint64_t *)v14, v9);
  uint64_t v11 = v14;
  if (v14 != v16) {
LABEL_8:
  }
    free(v11);
  return DictionaryAttr;
}

unint64_t mlir::scf::ParallelOp::computePropertiesHash(void *a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v17 = a1;
    uint64_t v1 = &unk_267770000;
    int v11 = v10;
    a1 = v17;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v17;
    }
  }
  uint64_t v2 = v1[385];
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  {
    uint64_t v15 = v3;
    uint64_t v18 = v2;
    uint64_t v16 = v4;
    uint64_t v3 = v15;
    uint64_t v4 = v16;
    uint64_t v2 = v18;
    uint64_t v1 = &unk_267770000;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      uint64_t v3 = v15;
      uint64_t v4 = v16;
      uint64_t v2 = v18;
      uint64_t v1 = (void *)&unk_267770000;
    }
  }
  uint64_t v5 = __ROR8__(v3 + 16, 16);
  unint64_t v6 = (0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v2 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v2 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v2 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v2 ^ v5)))) >> 47))) ^ v3;
  uint64_t v7 = 8 * v6 + 8;
  unint64_t v8 = v1[385] ^ HIDWORD(v6);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)))) >> 47));
}

uint64_t mlir::scf::ParallelOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = (void *)result;
  if (a3 == 19)
  {
    uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if (result) {
      return result;
    }
  }
  else
  {
    if (a3 != 21) {
      return result;
    }
    BOOL v6 = *(void *)__s1 == 0x5F646E617265706FLL && *((void *)__s1 + 1) == 0x5F746E656D676573;
    if (!v6 || *(void *)(__s1 + 13) != 0x73657A69735F746ELL) {
      return result;
    }
  }
  if (a4)
  {
    uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    if (result) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = 0;
    }
    int v10 = v8;
    if (result)
    {
      uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
      if (result == 4)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v10);
        if (v9) {
          return (uint64_t)memmove(v5, (const void *)result, 4 * v9);
        }
      }
    }
  }
  return result;
}

BOOL mlir::scf::ParallelOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          BOOL v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            BOOL v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          unint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              *unint64_t v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    unint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, v3, (const char *)4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::scf::ParallelOp::verifyInvariantsImpl(mlir::scf::ParallelOp *this)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(v2 + 44);
  uint64_t v4 = (v3 >> 23) & 1;
  uint64_t v5 = *(unsigned int *)(v2 + 16 * v4 + 64);
  if ((v3 & 0x800000) != 0)
  {
    uint64_t v6 = *(void *)(v2 + 72);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5)
    {
LABEL_3:
      uint64_t v7 = 0;
      uint64_t v8 = v6 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v7))
      {
        ++v7;
        v8 += 32;
        if (v5 == v7)
        {
          uint64_t v2 = *(void *)this;
          unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
          uint64_t v4 = (v3 >> 23) & 1;
          int v9 = v3 & 0x800000;
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
  int v9 = v3 & 0x800000;
LABEL_9:
  if (BYTE3(v3)) {
    uint64_t v10 = (unsigned int *)(v2 + 16 * v4 + 64);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = v10[1];
  if (v9)
  {
    uint64_t v12 = *(void *)(v2 + 72);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (v11)
    {
LABEL_14:
      uint64_t v13 = *v10;
      uint64_t v14 = v11 + v13 - v13;
      uint64_t v15 = v12 + 32 * v13 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v5))
      {
        LODWORD(v5) = v5 + 1;
        v15 += 32;
        if (!--v14)
        {
          uint64_t v2 = *(void *)this;
          unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
          uint64_t v4 = (v3 >> 23) & 1;
          int v9 = v3 & 0x800000;
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
LABEL_18:
  uint64_t v16 = v2 + 16 * v4 + 64;
  if (BYTE3(v3)) {
    uint64_t v17 = (_DWORD *)v16;
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = v17[2];
  if (v9)
  {
    uint64_t v19 = *(void *)(v2 + 72);
    if (v18) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (v18)
    {
LABEL_23:
      uint64_t v20 = (v17[1] + *v17);
      uint64_t v21 = (v18 + v20) - v20;
      uint64_t v22 = v19 + 32 * v20 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v22 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v5))
      {
        LODWORD(v5) = v5 + 1;
        v22 += 32;
        if (!--v21)
        {
          uint64_t v2 = *(void *)this;
          goto LABEL_27;
        }
      }
      return 0;
    }
  }
LABEL_27:
  uint64_t v23 = *(unsigned int *)(v2 + 36);
  if (*(_DWORD *)(v2 + 36)) {
    uint64_t v24 = v2 - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23)
  {
    for (uint64_t i = 0; i != v23; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v24, i);
    uint64_t v2 = *(void *)this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, ((v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v2 + 40), (uint64_t)"region", 6, 0) != 0;
}

BOOL mlir::scf::ReduceReturnOp::parse(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  uint64_t v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

void mlir::scf::WhileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  mlir::OperationState::addOperands(a2, a5, a6);
  *(void *)(a2 + 192) = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 120);
  if (a8 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v11), a7, 16 * a8);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a8;
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
}

BOOL mlir::scf::WhileOp::verifyInvariantsImpl(unsigned int **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = v2[9];
  if (v2[9]) {
    uint64_t v4 = (uint64_t)(v2 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *this;
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t)v2, (((unint64_t)&v2[4 * (((unint64_t)v2[11] >> 23) & 1) + 17]+ (((unint64_t)v2[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * v2[10], (uint64_t)"before", 6, 0))return 0; {
  uint64_t v6 = (uint64_t)*this;
  }
  unint64_t v7 = (*this)[11];
  if ((v7 & 0x7FFFFF) != 0) {
    unint64_t v8 = ((v6 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(v6 + 40);
  else {
    unint64_t v8 = 0;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v6, v8 + 24, (uint64_t)"after", 5, 1u) != 0;
}

BOOL mlir::scf::YieldOp::parse(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x263EF8340];
  uint64_t v10 = v12;
  uint64_t v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    BOOL v5 = 0;
    uint64_t v6 = v8[0];
    if (v8[0] == &v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  uint64_t v6 = v8[0];
  if (v8[0] != &v9) {
LABEL_9:
  }
    free(v6);
LABEL_10:
  if (v10 != v12) {
    free(v10);
  }
  return v5;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::LoopLikeOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v15 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v17 = 75;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v3[126], v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v20 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v22 = 75;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[126];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<std::unique_ptr<mlir::Region>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v28 = 0;
  __int16 v4 = (char *)(a1 + 16);
  uint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v28);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = 8 * v6;
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)&v5[8 * v6] = v8;
  unint64_t v9 = *(char **)a1;
  unint64_t v10 = *(char **)a1;
  if (!v6) {
    goto LABEL_19;
  }
  unint64_t v11 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v11 < 0xB)
  {
    int v12 = v5;
LABEL_12:
    uint64_t v21 = &v9[v7];
    do
    {
      uint64_t v22 = *(void *)v10;
      *(void *)unint64_t v10 = 0;
      v10 += 8;
      *(void *)int v12 = v22;
      v12 += 8;
    }
    while (v10 != v21);
    goto LABEL_14;
  }
  BOOL v13 = v9 >= &v5[v7] || v5 >= &v9[v7];
  int v12 = v5;
  if (!v13) {
    goto LABEL_12;
  }
  unint64_t v14 = v11 + 1;
  uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
  int v12 = &v5[v15];
  unint64_t v10 = &v9[v15];
  unint64_t v16 = (long long *)(v9 + 16);
  uint64_t v17 = v5 + 16;
  uint64_t v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v19 = *(v16 - 1);
    long long v20 = *v16;
    *(v16 - 1) = 0uLL;
    *unint64_t v16 = 0uLL;
    *(v17 - 1) = v19;
    *uint64_t v17 = v20;
    v16 += 2;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v23 = *(void *)a1 - 8;
  do
  {
    uint64_t v24 = *(mlir::Region **)(v23 + v7);
    *(void *)(v23 + v7) = 0;
    if (v24)
    {
      mlir::Region::~Region(v24);
      MEMORY[0x21667D3C0]();
    }
    v7 -= 8;
  }
  while (v7);
  unint64_t v10 = *(char **)a1;
LABEL_19:
  int v25 = v28;
  if (v10 != v4) {
    free(v10);
  }
  *(void *)a1 = v5;
  unsigned int v26 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 12) = v25;
  return (uint64_t)&v5[8 * v26 - 8];
}

void mlir::RegisteredOperationName::insert<mlir::scf::ExecuteRegionOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::scf::IfOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::scf::IndexSwitchOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::scf::ReduceOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::scf::ReduceReturnOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::scf::WhileOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.condition", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id, (uint64_t)&v9);
  __int16 v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    __int16 v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C321958;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ConditionOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getSuccessorRegions;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[405], v2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getMutableSuccessorOperands@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0) {
    int v2 = *(_DWORD *)(a1 + 68) - 1;
  }
  else {
    int v2 = -1;
  }
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1, 1, v2, 0, 0);
}

void mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getSuccessorRegions(uint64_t a1, mlir::Operation *a2, void **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  mlir::scf::ConditionOp::getSuccessorRegions(&v5, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  int v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    int v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      int v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ConditionOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>>(uint64_t a1)
{
  int v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ConditionOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    int v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      int v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267770000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v199 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v199 = 97;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      __int16 v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<Empty>]";
      unint64_t v199 = 107;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      uint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[128];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      unint64_t v199 = 103;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      uint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[79];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unsigned int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[31];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v199 = 84;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::scf::ConditionOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroResults<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ConditionOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::OpInvariants<mlir::scf::ConditionOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::scf::ConditionOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::ConditionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::IsTerminator<mlir::scf::ConditionOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroResults<mlir::scf::ConditionOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ConditionOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>,mlir::OpTrait::OpInvariants<mlir::scf::ConditionOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::scf::ConditionOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::ConditionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::ConditionOp>,mlir::OpTrait::IsTerminator<mlir::scf::ConditionOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
      && mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>::verifyTrait((uint64_t)a1)
      && mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl<mlir::scf::ConditionOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  uint64_t v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "scf.while";
  v37[1] = 9;
  if (*v8)
  {
    int v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          uint64_t v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::ConditionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::HasParent<mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ExecuteRegionOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ExecuteRegionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::areTypesCompatible;
  char v3 = &unk_267770000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ExecuteRegionOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v87 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v94 = 81;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      uint64_t v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267771000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267771000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v94 = 87;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      uint64_t v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[437];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      unsigned int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v94 = 84;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      unint64_t v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      unint64_t v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v94 = 93;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      unint64_t v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[227] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::ExecuteRegionOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v4))
  {
    return 0;
  }
  uint64_t v5 = a1[9];
  if (a1[9]) {
    uint64_t v6 = (uint64_t)(a1 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v6, i);
  }
  uint64_t v9 = a1;
  return mlir::scf::ExecuteRegionOp::verify((mlir::scf::ExecuteRegionOp *)&v9) != 0;
}

BOOL mlir::Op<mlir::scf::ExecuteRegionOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyTypesAlongControlFlowEdges(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.for", 7, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C321E08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ForOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::replaceWithAdditionalYields;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[126], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  *(void *)&double result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::promoteIfSingleIteration(int a1, uint64_t a2, mlir::RewriterBase *a3)
{
  uint64_t v4 = a2;
  return mlir::scf::ForOp::promoteIfSingleIteration((mlir::scf::ForOp *)&v4, a3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return **(void **)(v3 + 48);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 24) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 88) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 56) | 4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  v7[3] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    int v2 = *(_DWORD *)(a2 + 68) - 3;
  }
  else {
    int v2 = -3;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, a2, 3, v2, 0, 0);
  uint64_t v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7) {
    free(v6);
  }
  return v3;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return *(void *)(v3 + 48) + 8;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  unint64_t v10[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = (ZinIrHalH13g **)(v2 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  mlir::Block::getTerminator(v3);
  if ((*(unsigned char *)(v4 + 46) & 0x80) != 0) {
    int v5 = *(_DWORD *)(v4 + 68);
  }
  else {
    int v5 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  uint64_t v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10) {
    free(v9);
  }
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getLoopResults(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned int *)(a1 + 36);
  uint64_t v3 = a1 - 16;
  if (!v2) {
    uint64_t v3 = 0;
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 1;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::replaceWithAdditionalYields(uint64_t a1, ZinIrHalH13g *a2, uint64_t a3, void *a4, unint64_t a5)
{
  int v5 = a2;
  mlir::scf::ForOp::replaceWithAdditionalYields(&v5, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ForOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  mlir::scf::ForOp::getConstantStep((mlir::scf::ForOp *)&v5, (uint64_t)&v6);
  if (!v8) {
    return 0;
  }
  unsigned int v2 = v7;
  if (v7 < 0x41)
  {
    if (v6 != (void *)1) {
      goto LABEL_9;
    }
LABEL_7:
    int v3 = 0;
    if (v2 < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6) <= 0x40 && *v6 == 1) {
    goto LABEL_7;
  }
LABEL_9:
  int v3 = 1;
  if (v2 < 0x41) {
    goto LABEL_12;
  }
LABEL_10:
  if (v6) {
    MEMORY[0x21667D390](v6, 0x1000C8000313F17);
  }
LABEL_12:
  if (v3) {
    return 0;
  }
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>>(uint64_t a1)
{
  unsigned int v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::areTypesCompatible;
  int v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    int v3 = (void *)&unk_267770000;
    unsigned int v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      int v3 = (void *)&unk_267770000;
      unsigned int v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 96;
  }
  else {
    return 96;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::scf::ForOp::getSuccessorRegions(&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::scf::ForOp::getSuccessorRegions(&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v223 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unsigned int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[427];
  int v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    int v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v223 = 87;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      int v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[437];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<3>::Impl<Empty>]";
      unint64_t v223 = 97;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[447];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v223 = 83;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      uint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      unint64_t v223 = 127;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      uint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[130];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[435];
  long long v15 = &unk_267772000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    long long v15 = (void *)&unk_267772000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v223 = 96;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      long long v15 = (void *)&unk_267772000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[65];
  uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[132];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[322];
  int v21 = &unk_267772000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    int v21 = (void *)&unk_267772000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      int v21 = (void *)&unk_267772000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[227];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v223 = 97;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[229] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::ForOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)3)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v5 = a1;
  if (!mlir::scf::ForOp::verifyInvariantsImpl((mlir::scf::ForOp *)&v5)) {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::scf::ForOp::verify((mlir::scf::ForOp *)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::ForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<3u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
    || !mlir::detail::verifyLoopLikeOpInterface(a1, v2)
    || !mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3))
  {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::scf::ForOp::verifyRegions((mlir::scf::ForOp *)&v5) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait(uint64_t a1)
{
  v23[24] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = a1 + 64;
    uint64_t v5 = 24 * v1;
    do
    {
      unint64_t v6 = *(unsigned int *)(a1 + 44);
      if ((v6 & 0x7FFFFF) != 0)
      {
        uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                      + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
        if (v7 != (void *)*v7) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v7 = v3;
        if (v3 != (void *)*v3)
        {
LABEL_8:
          uint64_t v8 = v7[1];
          if (v8) {
            uint64_t v9 = v8 - 8;
          }
          else {
            uint64_t v9 = 0;
          }
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
          uint64_t v11 = *(void *)(v10 + 48);
          if (*(_UNKNOWN **)(v11 + 16) != &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
          {
            __int16 v16 = 1283;
            v15[0] = "expects regions to end with '";
            v15[2] = "scf.yield";
            unint64_t v15[3] = 9;
            v17[0] = v15;
            unint64_t v17[2] = "', found '";
            __int16 v18 = 770;
            v23[0] = *(void *)(v11 + 8);
            uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            v19[0] = v17;
            v19[2] = AttrData;
            void v19[3] = v13;
            __int16 v20 = 1282;
            v21[0] = (void **)v19;
            v21[2] = (void **)"'";
            __int16 v22 = 770;
            mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
            mlir::Diagnostic::attachNote();
          }
        }
      }
      v3 += 3;
    }
    while ((void *)v5 != v3);
  }
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.forall", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C322060;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ForallOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::scf::ForallOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::scf::ForallOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::scf::ForallOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::scf::ForallOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(void *)&long long v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::ForallOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::scf::ForallOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  if (a3[3] != a2[3]) {
    return 0;
  }
  return a3[4] == a2[4] && a3[5] == a2[5];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::scf::ForallOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::scf::ForallOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::replaceWithAdditionalYields;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[126], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  *(void *)&double result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::promoteIfSingleIteration(int a1, uint64_t a2, mlir::RewriterBase *a3)
{
  uint64_t v4 = a2;
  return mlir::scf::ForallOp::promoteIfSingleIteration((mlir::scf::ForallOp *)&v4, a3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::scf::ForallOp::getSingleInductionVar((mlir::scf::ForallOp *)&v3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  v9[6] = *MEMORY[0x263EF8340];
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  uint64_t v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    uint64_t v4 = *(void *)v8[0];
    if (v8[0] != v9) {
      free(v8[0]);
    }
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  v9[6] = *MEMORY[0x263EF8340];
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  uint64_t v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    uint64_t v4 = *(void *)v8[0];
    if (v8[0] != v9) {
      free(v8[0]);
    }
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  v9[6] = *MEMORY[0x263EF8340];
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v7 = a2;
  v8[0] = v3;
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v8);
  uint64_t v4 = 0;
  if (v5 == 1)
  {
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v7, (uint64_t)v8);
    uint64_t v4 = *(void *)v8[0];
    if (v8[0] != v9) {
      free(v8[0]);
    }
  }
  return v4;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getLoopResults(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::replaceWithAdditionalYields(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::areTypesCompatible;
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267770000;
    unint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267770000;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getDpsInitsMutable;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    unint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[134], v2);
}

uint64_t mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::scf::ForallOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 64;
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    unint64_t v5 = (_DWORD *)(a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  }
  else {
    unint64_t v5 = 0;
  }
  int v6 = v5[11];
  int v7 = v5[9] + v5[8] + v5[10];
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 96) + 8 * *(void *)(*(void *)(a1 + 48) + 104) - 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    unint64_t v10 = v4 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v10 + 32, 4);
  ZinMirCacheTensors::ZinMirCacheTensors(&v13, v8, v11);
  int v14 = 3;
  long long v15 = v13;
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1, v7, v6, &v14, 1);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v274 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      int v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[427];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v274 = 87;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      int v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[437];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      int v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[431];
  int v7 = &unk_267771000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    int v7 = (void *)&unk_267771000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v274 = 88;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      int v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      int v7 = (void *)&unk_267771000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v274 = 96;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      int v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[47];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v274 = 83;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      int v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[443];
  long long v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    long long v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::In"
             "ParallelOp>::Impl<Empty>]";
      unint64_t v274 = 132;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      int v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      long long v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[136];
  long long v15 = &unk_267770000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      int v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      int v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[320];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v274 = 96;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      int v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[65];
  int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      int v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[132];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v274 = 97;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[229];
  unint64_t v25 = &unk_267772000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    unint64_t v25 = (void *)&unk_267772000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      unint64_t v25 = (void *)&unk_267772000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[227];
  unsigned int v27 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      unint64_t v274 = 97;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[138] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::ForallOp::print((mlir::scf::ForallOp *)&v8, a3);
}

BOOL mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  unint64_t v5 = a1;
  if (!mlir::scf::ForallOp::verifyInvariantsImpl((mlir::scf::ForallOp *)&v5)) {
    return 0;
  }
  unint64_t v5 = a1;
  return mlir::scf::ForallOp::verify((mlir::scf::ForallOp *)&v5);
}

BOOL mlir::Op<mlir::scf::ForallOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3)
      && mlir::detail::verifyDestinationStyleOpInterface(a1, v4) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::verifyRegionTrait(uint64_t a1)
{
  v23[24] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 64;
    uint64_t v5 = 24 * v1;
    do
    {
      unint64_t v6 = *(unsigned int *)(a1 + 44);
      if ((v6 & 0x7FFFFF) != 0)
      {
        int v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                      + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
        if (v7 != (void *)*v7) {
          goto LABEL_8;
        }
      }
      else
      {
        int v7 = v3;
        if (v3 != (void *)*v3)
        {
LABEL_8:
          uint64_t v8 = v7[1];
          if (v8) {
            uint64_t v9 = v8 - 8;
          }
          else {
            uint64_t v9 = 0;
          }
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
          uint64_t v11 = *(void *)(v10 + 48);
          if (*(_UNKNOWN **)(v11 + 16) != &mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id)
          {
            __int16 v16 = 1283;
            v15[0] = "expects regions to end with '";
            v15[2] = "scf.forall.in_parallel";
            unint64_t v15[3] = 22;
            v17[0] = v15;
            unint64_t v17[2] = "', found '";
            __int16 v18 = 770;
            v23[0] = *(void *)(v11 + 8);
            uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            v19[0] = v17;
            v19[2] = AttrData;
            void v19[3] = v13;
            __int16 v20 = 1282;
            v21[0] = (void **)v19;
            v21[2] = (void **)"'";
            __int16 v22 = 770;
            mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
            mlir::Diagnostic::attachNote();
          }
        }
      }
      v3 += 3;
    }
    while ((void *)v5 != v3);
  }
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getParseAssemblyFn(void (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::IfOp::parse;
  a1[3] = (void (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                          + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    __int16 v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IfOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::areTypesCompatible;
  char v3 = &unk_267770000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getEntrySuccessorRegions(uint64_t a1, unsigned int *a2, void **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  mlir::scf::IfOp::getEntrySuccessorRegions(&v5, a3, a4, a5);
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::scf::IfOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5)
{
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)&long long v17 = a6;
  BYTE8(v17) = 0;
  LOBYTE(v18) = 0;
  *((void *)&v18 + 1) = a9;
  *(void *)&long long v19 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    if ((_BYTE)v18) {
      LOBYTE(v18) = 0;
    }
    a1 = mlir::OperationName::OperationName((char *)&v17 + 8, "scf.if", 6, Context);
    LOBYTE(v18) = 1;
  }
  *((void *)&v19 + 1) = a4;
  uint64_t v20 = a5;
  v15[0] = v17;
  v15[1] = v18;
  uint64_t v16 = a5;
  v15[2] = v19;
  return mlir::scf::IfOp::inferReturnTypes(a1, a2, a3, (uint64_t)v15, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::scf::IfOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::scf::IfOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::scf::IfOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v13 = a3;
  uint64_t v31 = *MEMORY[0x263EF8340];
  __int16 v22 = v24;
  uint64_t v23 = 0x400000000;
  *(void *)&long long v27 = a6;
  BYTE8(v27) = 0;
  LOBYTE(v28) = 0;
  *((void *)&v28 + 1) = a9;
  *(void *)&long long v29 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v27);
    if ((_BYTE)v28) {
      LOBYTE(v28) = 0;
    }
    a1 = mlir::OperationName::OperationName((char *)&v27 + 8, "scf.if", 6, Context);
    LOBYTE(v28) = 1;
  }
  *((void *)&v29 + 1) = a4;
  uint64_t v30 = a5;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v26 = a5;
  v25[2] = v29;
  if (!mlir::scf::IfOp::inferReturnTypes(a1, a2, a3, (uint64_t)v25, (uint64_t)&v22))
  {
    uint64_t v16 = 0;
    long long v17 = v22;
    if (v22 == v24) {
      return v16;
    }
    goto LABEL_11;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v20, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v19, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v21 == v19[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v20, 0, v20, v21, v19[0], 0, v19[0], v21))
  {
    uint64_t v16 = 1;
    long long v17 = v22;
    if (v22 == v24) {
      return v16;
    }
    goto LABEL_11;
  }
  *(void *)&long long v27 = "scf.if";
  *((void *)&v27 + 1) = 6;
  uint64_t v16 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v13, "'", (uint64_t)&v27, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  long long v17 = v22;
  if (v22 != v24) {
LABEL_11:
  }
    free(v17);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::scf::IfOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      unint64_t v223 = 89;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unsigned int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[449];
  char v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    char v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v223 = 87;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[437];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v223 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v223 = 83;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      unint64_t v223 = 127;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[130];
  char v13 = &unk_267772000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    char v13 = (void *)&unk_267772000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      char v13 = (void *)&unk_267772000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[159];
  long long v15 = &unk_267770000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[435];
  long long v17 = &unk_267772000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    long long v17 = (void *)&unk_267772000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      long long v17 = (void *)&unk_267772000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[227];
  long long v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    long long v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      long long v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[37];
  uint64_t v21 = &unk_267772000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267772000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::InferTypeOpAdaptor<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::InferTypeOpAdaptor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::InferTypeOpAdaptor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267772000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[245];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v223 = 97;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[229] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::IfOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::NRegions<2u>::Impl<mlir::scf::IfOp>,mlir::OpTrait::VariadicResults<mlir::scf::IfOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::IfOp>,mlir::OpTrait::OneOperand<mlir::scf::IfOp>,mlir::OpTrait::SingleBlock<mlir::scf::IfOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>,mlir::OpTrait::NoRegionArguments<mlir::scf::IfOp>,mlir::OpTrait::OpInvariants<mlir::scf::IfOp>,mlir::RegionBranchOpInterface::Trait<mlir::scf::IfOp>,mlir::InferTypeOpInterface::Trait<mlir::scf::IfOp>,mlir::OpTrait::InferTypeOpAdaptor<mlir::scf::IfOp>,mlir::OpTrait::HasRecursiveMemoryEffects<mlir::scf::IfOp>>(a1)) {
    return 0;
  }
  char v3 = a1;
  return mlir::scf::IfOp::verify((mlir::scf::IfOp *)&v3) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::NRegions<2u>::Impl<mlir::scf::IfOp>,mlir::OpTrait::VariadicResults<mlir::scf::IfOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::IfOp>,mlir::OpTrait::OneOperand<mlir::scf::IfOp>,mlir::OpTrait::SingleBlock<mlir::scf::IfOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>,mlir::OpTrait::NoRegionArguments<mlir::scf::IfOp>,mlir::OpTrait::OpInvariants<mlir::scf::IfOp>,mlir::RegionBranchOpInterface::Trait<mlir::scf::IfOp>,mlir::InferTypeOpInterface::Trait<mlir::scf::IfOp>,mlir::OpTrait::InferTypeOpAdaptor<mlir::scf::IfOp>,mlir::OpTrait::HasRecursiveMemoryEffects<mlir::scf::IfOp>>(mlir::OpTrait::impl *a1)
{
  if (!mlir::OpTrait::impl::verifyNRegions(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v3)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments(a1, v4))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::scf::IfOp::verifyInvariantsImpl((mlir::scf::IfOp *)&v6);
}

BOOL mlir::Op<mlir::scf::IfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.forall.in_parallel", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C321A20;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getParseAssemblyFn(void (**a1)(uint64_t a1)@<X8>)
{
  *a1 = mlir::scf::InParallelOp::parse;
  a1[3] = (void (*)(uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getParentResult;
  v2[1] = mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getYieldingOps;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[150], v2);
}

uint64_t mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getParentResult(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t ParentOp = *(mlir::Block **)(a2 + 16);
  if (ParentOp) {
    uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  if (a3 <= 5) {
    return (uint64_t)ParentOp - 16 * a3 - 16;
  }
  else {
    return (uint64_t)ParentOp - 24 * a3 + 24;
  }
}

uint64_t mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getYieldingOps(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return *(void *)(v3 + 40);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getRegionKind;
  v2[1] = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::hasSSADominance;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[157], v2);
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getRegionKind()
{
  return 1;
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::hasSSADominance()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v285 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v46 = v45;
    a1 = v285;
    if (v46)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v301 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v301;
      }
      unint64_t v49 = &v300[v48];
      unint64_t v50 = v301 - v48;
      if (v301 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v301 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v285;
    }
  }
  uint64_t v2 = v1[427];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v271 = v2;
    uint64_t v286 = a1;
    uint64_t v3 = (void *)&unk_267770000;
    int v55 = v54;
    uint64_t v2 = v271;
    a1 = v286;
    if (v55)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v301 = 83;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v301;
      }
      unint64_t v58 = &v300[v57];
      unint64_t v59 = v301 - v57;
      if (v301 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v301 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v271;
      a1 = v286;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v272 = v2;
    uint64_t v287 = a1;
    uint64_t v258 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v258;
    uint64_t v2 = v272;
    int v64 = v63;
    a1 = v287;
    if (v64)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v301 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v301;
      }
      unint64_t v67 = &v300[v66];
      unint64_t v68 = v301 - v66;
      if (v301 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v301 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v258;
      uint64_t v2 = v272;
      a1 = v287;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v273 = v2;
    uint64_t v288 = a1;
    uint64_t v246 = v6;
    uint64_t v259 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v246;
    uint64_t v4 = v259;
    int v73 = v72;
    uint64_t v2 = v273;
    a1 = v288;
    if (v73)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v301 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v301;
      }
      unint64_t v76 = &v300[v75];
      unint64_t v77 = v301 - v75;
      if (v301 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v301 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v246;
      uint64_t v4 = v259;
      uint64_t v2 = v273;
      a1 = v288;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v274 = v2;
    uint64_t v289 = a1;
    uint64_t v247 = v6;
    uint64_t v260 = v4;
    uint64_t v235 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v8 = v235;
    uint64_t v6 = v247;
    uint64_t v4 = v260;
    uint64_t v2 = v274;
    int v82 = v81;
    a1 = v289;
    if (v82)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<Empty>]";
      unint64_t v301 = 108;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v301;
      }
      unint64_t v85 = &v300[v84];
      unint64_t v86 = v301 - v84;
      if (v301 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v301 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v8 = v235;
      uint64_t v6 = v247;
      uint64_t v4 = v260;
      uint64_t v2 = v274;
      a1 = v289;
    }
  }
  uint64_t v10 = v9[152];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v275 = v2;
    uint64_t v290 = a1;
    uint64_t v248 = v6;
    uint64_t v261 = v4;
    uint64_t v236 = v8;
    uint64_t v225 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v225;
    uint64_t v8 = v236;
    uint64_t v6 = v248;
    uint64_t v4 = v261;
    uint64_t v2 = v275;
    int v91 = v90;
    a1 = v290;
    if (v91)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      unint64_t v301 = 84;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v301;
      }
      unint64_t v94 = &v300[v93];
      unint64_t v95 = v301 - v93;
      if (v301 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v301 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v225;
      uint64_t v8 = v236;
      uint64_t v6 = v248;
      uint64_t v4 = v261;
      uint64_t v2 = v275;
      a1 = v290;
    }
  }
  uint64_t v12 = v11[161];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v276 = v2;
    uint64_t v291 = a1;
    uint64_t v249 = v6;
    uint64_t v262 = v4;
    uint64_t v237 = v8;
    uint64_t v216 = v12;
    uint64_t v226 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v216;
    uint64_t v10 = v226;
    uint64_t v8 = v237;
    uint64_t v6 = v249;
    uint64_t v4 = v262;
    uint64_t v2 = v276;
    int v100 = v99;
    a1 = v291;
    if (v100)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v301 = 83;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v301;
      }
      unint64_t v103 = &v300[v102];
      unint64_t v104 = v301 - v102;
      if (v301 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v301 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v216;
      uint64_t v10 = v226;
      uint64_t v8 = v237;
      uint64_t v6 = v249;
      uint64_t v4 = v262;
      uint64_t v2 = v276;
      a1 = v291;
    }
  }
  uint64_t v14 = v13[443];
  long long v15 = &unk_267770000;
  {
    uint64_t v277 = v2;
    uint64_t v292 = a1;
    uint64_t v250 = v6;
    uint64_t v263 = v4;
    uint64_t v238 = v8;
    uint64_t v217 = v12;
    uint64_t v227 = v10;
    uint64_t v208 = v14;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v208;
    uint64_t v12 = v217;
    uint64_t v10 = v227;
    uint64_t v8 = v238;
    uint64_t v6 = v250;
    uint64_t v4 = v263;
    uint64_t v2 = v277;
    int v109 = v108;
    a1 = v292;
    if (v109)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v301 = 84;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v301;
      }
      unint64_t v112 = &v300[v111];
      unint64_t v113 = v301 - v111;
      if (v301 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v301 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v208;
      uint64_t v12 = v217;
      uint64_t v10 = v227;
      uint64_t v8 = v238;
      uint64_t v6 = v250;
      uint64_t v4 = v263;
      uint64_t v2 = v277;
      a1 = v292;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v278 = v2;
    uint64_t v293 = a1;
    uint64_t v251 = v6;
    uint64_t v264 = v4;
    uint64_t v239 = v8;
    uint64_t v218 = v12;
    uint64_t v228 = v10;
    uint64_t v201 = v16;
    uint64_t v209 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v201;
    uint64_t v14 = v209;
    uint64_t v12 = v218;
    uint64_t v10 = v228;
    uint64_t v8 = v239;
    uint64_t v6 = v251;
    uint64_t v4 = v264;
    uint64_t v2 = v278;
    int v118 = v117;
    a1 = v293;
    if (v118)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v301 = 95;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v301;
      }
      unint64_t v121 = &v300[v120];
      unint64_t v122 = v301 - v120;
      if (v301 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v301 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v201;
      uint64_t v14 = v209;
      uint64_t v12 = v218;
      uint64_t v10 = v228;
      uint64_t v8 = v239;
      uint64_t v6 = v251;
      uint64_t v4 = v264;
      uint64_t v2 = v278;
      a1 = v293;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v279 = v2;
    uint64_t v294 = a1;
    uint64_t v252 = v6;
    uint64_t v265 = v4;
    uint64_t v240 = v8;
    uint64_t v219 = v12;
    uint64_t v229 = v10;
    uint64_t v202 = v16;
    uint64_t v210 = v14;
    uint64_t v195 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v195;
    uint64_t v16 = v202;
    uint64_t v14 = v210;
    uint64_t v12 = v219;
    uint64_t v10 = v229;
    uint64_t v8 = v240;
    uint64_t v6 = v252;
    uint64_t v4 = v265;
    uint64_t v2 = v279;
    int v127 = v126;
    a1 = v294;
    if (v127)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v301 = 99;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v301;
      }
      unint64_t v130 = &v300[v129];
      unint64_t v131 = v301 - v129;
      if (v301 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v301 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v195;
      uint64_t v16 = v202;
      uint64_t v14 = v210;
      uint64_t v12 = v219;
      uint64_t v10 = v229;
      uint64_t v8 = v240;
      uint64_t v6 = v252;
      uint64_t v4 = v265;
      uint64_t v2 = v279;
      a1 = v294;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v280 = v2;
    uint64_t v295 = a1;
    uint64_t v253 = v6;
    uint64_t v266 = v4;
    uint64_t v241 = v8;
    uint64_t v220 = v12;
    uint64_t v230 = v10;
    uint64_t v203 = v16;
    uint64_t v211 = v14;
    uint64_t v190 = v20;
    uint64_t v196 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v190;
    uint64_t v18 = v196;
    uint64_t v16 = v203;
    uint64_t v14 = v211;
    uint64_t v12 = v220;
    uint64_t v10 = v230;
    uint64_t v8 = v241;
    uint64_t v6 = v253;
    uint64_t v4 = v266;
    uint64_t v2 = v280;
    int v136 = v135;
    a1 = v295;
    if (v136)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v301 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v301;
      }
      unint64_t v139 = &v300[v138];
      unint64_t v140 = v301 - v138;
      if (v301 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v301 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v190;
      uint64_t v18 = v196;
      uint64_t v16 = v203;
      uint64_t v14 = v211;
      uint64_t v12 = v220;
      uint64_t v10 = v230;
      uint64_t v8 = v241;
      uint64_t v6 = v253;
      uint64_t v4 = v266;
      uint64_t v2 = v280;
      a1 = v295;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v281 = v2;
    uint64_t v296 = a1;
    uint64_t v254 = v6;
    uint64_t v267 = v4;
    uint64_t v242 = v8;
    uint64_t v221 = v12;
    uint64_t v231 = v10;
    uint64_t v204 = v16;
    uint64_t v212 = v14;
    uint64_t v191 = v20;
    uint64_t v197 = v18;
    uint64_t v186 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v186;
    uint64_t v20 = v191;
    uint64_t v18 = v197;
    uint64_t v16 = v204;
    uint64_t v14 = v212;
    uint64_t v12 = v221;
    uint64_t v10 = v231;
    uint64_t v8 = v242;
    uint64_t v6 = v254;
    uint64_t v4 = v267;
    uint64_t v2 = v281;
    int v145 = v144;
    a1 = v296;
    if (v145)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v301 = 84;
      unint64_t v146 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v146) {
        unint64_t v147 = v146;
      }
      else {
        unint64_t v147 = v301;
      }
      uint64_t v148 = &v300[v147];
      unint64_t v149 = v301 - v147;
      if (v301 - v147 >= 0x12) {
        uint64_t v150 = 18;
      }
      else {
        uint64_t v150 = v301 - v147;
      }
      unint64_t v151 = v149 - v150;
      if (v151 >= v151 - 1) {
        uint64_t v152 = v151 - 1;
      }
      else {
        uint64_t v152 = v151;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v148[v150], v152);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v186;
      uint64_t v20 = v191;
      uint64_t v18 = v197;
      uint64_t v16 = v204;
      uint64_t v14 = v212;
      uint64_t v12 = v221;
      uint64_t v10 = v231;
      uint64_t v8 = v242;
      uint64_t v6 = v254;
      uint64_t v4 = v267;
      uint64_t v2 = v281;
      a1 = v296;
    }
  }
  uint64_t v24 = v23[233];
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v282 = v2;
    uint64_t v297 = a1;
    uint64_t v255 = v6;
    uint64_t v268 = v4;
    uint64_t v243 = v8;
    uint64_t v222 = v12;
    uint64_t v232 = v10;
    uint64_t v205 = v16;
    uint64_t v213 = v14;
    uint64_t v192 = v20;
    uint64_t v198 = v18;
    uint64_t v183 = v24;
    uint64_t v187 = v22;
    unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v24 = v183;
    uint64_t v22 = v187;
    uint64_t v20 = v192;
    uint64_t v18 = v198;
    uint64_t v16 = v205;
    uint64_t v14 = v213;
    uint64_t v12 = v222;
    uint64_t v10 = v232;
    uint64_t v8 = v243;
    uint64_t v6 = v255;
    uint64_t v4 = v268;
    uint64_t v2 = v282;
    int v154 = v153;
    a1 = v297;
    if (v154)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface::Trait<Empty>]";
      unint64_t v301 = 98;
      unint64_t v155 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v155) {
        unint64_t v156 = v155;
      }
      else {
        unint64_t v156 = v301;
      }
      uint64_t v157 = &v300[v156];
      unint64_t v158 = v301 - v156;
      if (v301 - v156 >= 0x12) {
        uint64_t v159 = 18;
      }
      else {
        uint64_t v159 = v301 - v156;
      }
      unint64_t v160 = v158 - v159;
      if (v160 >= v160 - 1) {
        uint64_t v161 = v160 - 1;
      }
      else {
        uint64_t v161 = v160;
      }
      mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ParallelCombiningOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v157[v159], v161);
      unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v24 = v183;
      uint64_t v22 = v187;
      uint64_t v20 = v192;
      uint64_t v18 = v198;
      uint64_t v16 = v205;
      uint64_t v14 = v213;
      uint64_t v12 = v222;
      uint64_t v10 = v232;
      uint64_t v8 = v243;
      uint64_t v6 = v255;
      uint64_t v4 = v268;
      uint64_t v2 = v282;
      a1 = v297;
    }
  }
  uint64_t v26 = v25[154];
  unsigned int v27 = &unk_267772000;
  {
    uint64_t v283 = v2;
    uint64_t v298 = a1;
    uint64_t v256 = v6;
    uint64_t v269 = v4;
    uint64_t v244 = v8;
    uint64_t v223 = v12;
    uint64_t v233 = v10;
    uint64_t v206 = v16;
    uint64_t v214 = v14;
    uint64_t v193 = v20;
    uint64_t v199 = v18;
    uint64_t v184 = v24;
    uint64_t v188 = v22;
    uint64_t v181 = v26;
    unsigned int v27 = (void *)&unk_267772000;
    uint64_t v26 = v181;
    uint64_t v24 = v184;
    uint64_t v22 = v188;
    uint64_t v20 = v193;
    uint64_t v18 = v199;
    uint64_t v16 = v206;
    uint64_t v14 = v214;
    uint64_t v12 = v223;
    uint64_t v10 = v233;
    uint64_t v8 = v244;
    uint64_t v6 = v256;
    uint64_t v4 = v269;
    uint64_t v2 = v283;
    int v163 = v162;
    a1 = v298;
    if (v163)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface::Trait<Empty>]";
      unint64_t v301 = 89;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v301;
      }
      uint64_t v166 = &v300[v165];
      unint64_t v167 = v301 - v165;
      if (v301 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v301 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionKindInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      unsigned int v27 = (void *)&unk_267772000;
      uint64_t v26 = v181;
      uint64_t v24 = v184;
      uint64_t v22 = v188;
      uint64_t v20 = v193;
      uint64_t v18 = v199;
      uint64_t v16 = v206;
      uint64_t v14 = v214;
      uint64_t v12 = v223;
      uint64_t v10 = v233;
      uint64_t v8 = v244;
      uint64_t v6 = v256;
      uint64_t v4 = v269;
      uint64_t v2 = v283;
      a1 = v298;
    }
  }
  uint64_t v28 = v27[163];
  long long v29 = &unk_267772000;
  {
    uint64_t v284 = v2;
    uint64_t v299 = a1;
    uint64_t v257 = v6;
    uint64_t v270 = v4;
    uint64_t v245 = v8;
    uint64_t v224 = v12;
    uint64_t v234 = v10;
    uint64_t v207 = v16;
    uint64_t v215 = v14;
    uint64_t v194 = v20;
    uint64_t v200 = v18;
    uint64_t v185 = v24;
    uint64_t v189 = v22;
    uint64_t v180 = v28;
    uint64_t v182 = v26;
    long long v29 = (void *)&unk_267772000;
    uint64_t v28 = v180;
    uint64_t v26 = v182;
    uint64_t v24 = v185;
    uint64_t v22 = v189;
    uint64_t v20 = v194;
    uint64_t v18 = v200;
    uint64_t v16 = v207;
    uint64_t v14 = v215;
    uint64_t v12 = v224;
    uint64_t v10 = v234;
    uint64_t v8 = v245;
    uint64_t v6 = v257;
    uint64_t v4 = v270;
    uint64_t v2 = v284;
    int v172 = v171;
    a1 = v299;
    if (v172)
    {
      long long v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasOnlyGraphRegion<Empty>]";
      unint64_t v301 = 90;
      unint64_t v173 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v173) {
        unint64_t v174 = v173;
      }
      else {
        unint64_t v174 = v301;
      }
      uint64_t v175 = &v300[v174];
      unint64_t v176 = v301 - v174;
      if (v301 - v174 >= 0x12) {
        uint64_t v177 = 18;
      }
      else {
        uint64_t v177 = v301 - v174;
      }
      unint64_t v178 = v176 - v177;
      if (v178 >= v178 - 1) {
        uint64_t v179 = v178 - 1;
      }
      else {
        uint64_t v179 = v178;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasOnlyGraphRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasOnlyGraphRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v175[v177], v179);
      long long v29 = (void *)&unk_267772000;
      uint64_t v28 = v180;
      uint64_t v26 = v182;
      uint64_t v24 = v185;
      uint64_t v22 = v189;
      uint64_t v20 = v194;
      uint64_t v18 = v200;
      uint64_t v16 = v207;
      uint64_t v14 = v215;
      uint64_t v12 = v224;
      uint64_t v10 = v234;
      uint64_t v8 = v245;
      uint64_t v6 = v257;
      uint64_t v4 = v270;
      uint64_t v2 = v284;
      a1 = v299;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v29[165] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::InParallelOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroResults<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroOperands<mlir::scf::InParallelOp>,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>,mlir::OpTrait::NoTerminator<mlir::scf::InParallelOp>,mlir::OpTrait::SingleBlock<mlir::scf::InParallelOp>,mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::InParallelOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::IsTerminator<mlir::scf::InParallelOp>,mlir::ParallelCombiningOpInterface::Trait<mlir::scf::InParallelOp>,mlir::RegionKindInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::scf::InParallelOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::scf::InParallelOp::verify((mlir::scf::InParallelOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroResults<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroOperands<mlir::scf::InParallelOp>,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>,mlir::OpTrait::NoTerminator<mlir::scf::InParallelOp>,mlir::OpTrait::SingleBlock<mlir::scf::InParallelOp>,mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::InParallelOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::IsTerminator<mlir::scf::InParallelOp>,mlir::ParallelCombiningOpInterface::Trait<mlir::scf::InParallelOp>,mlir::RegionKindInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::scf::InParallelOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyOneRegion(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>::verifyTrait((uint64_t)a1)
      && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
      && mlir::op_definition_impl::verifyTrait<mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>>((uint64_t)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6)
      && mlir::detail::verifyParallelCombiningOpInterface(a1, v7) != 0;
}

BOOL mlir::op_definition_impl::verifyTrait<mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>>(uint64_t a1)
{
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(a1, ((a1+ 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a1 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a1 + 40), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    uint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  uint64_t v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "scf.forall";
  v37[1] = 10;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      uint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          uint64_t v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      uint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getParseAssemblyFn(void (**a1)()@<X8>)
{
  *a1 = mlir::scf::IndexSwitchOp::parse;
  a1[3] = (void (*)())((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1702060387 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 115) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1702060387 && *(unsigned char *)(result + 4) == 115)
  {
    if (a4)
    {
      uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
      if (result) {
        char v9 = a4;
      }
      else {
        char v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"cases", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v7, (void **)"cases", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::IndexSwitchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::scf::IndexSwitchOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::areTypesCompatible;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  mlir::scf::IndexSwitchOp::getEntrySuccessorRegions(&v5, a3, a4, a5);
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::scf::IndexSwitchOp::getSuccessorRegions((uint64_t)&v5, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  mlir::scf::IndexSwitchOp::getRegionInvocationBounds((uint64_t)&v5, a3, a4, a5);
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::scf::IndexSwitchOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::scf::IndexSwitchOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v15 = (uint64_t *)a1;
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(unsigned int *)(a1 + 44);
  uint64_t v9 = (uint64_t *)(a1 + 16 * ((v8 >> 23) & 1) + 64);
  unint64_t v10 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    uint64_t v11 = (((unint64_t)v9 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  mlir::ValueRange::ValueRange(v23, v11, v10);
  uint64_t v16 = v7;
  v17[0] = 0;
  char v18 = 0;
  uint64_t v19 = *v9;
  long long v20 = *(_OWORD *)v23;
  if (v7)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v16);
    if (v18) {
      char v18 = 0;
    }
    mlir::OperationName::OperationName(v17, "scf.index_switch", 16, Context);
    char v18 = 1;
  }
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  return mlir::scf::IndexSwitchOp::fold(&v15, v12, a4);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNRegions<1>::Impl<Empty>]";
      unint64_t v176 = 96;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNRegions<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNRegions<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[156];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v176 = 87;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[437];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v176 = 83;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      unint64_t v176 = 127;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[130];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[435];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v176 = 97;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[229];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      unint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[227] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::scf::IndexSwitchOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  if (!mlir::OpTrait::impl::verifyAtLeastNRegions(a1, (mlir::Operation *)1)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v5 = a1;
  if (!mlir::scf::IndexSwitchOp::verifyInvariantsImpl((mlir::scf::IndexSwitchOp *)&v5)) {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::scf::IndexSwitchOp::verify((mlir::scf::IndexSwitchOp *)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.parallel", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C321890;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ParallelOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  unint64_t v8 = *(unsigned int *)(a2 + 44);
  if (a4 == 19)
  {
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(void *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 21) {
      return 0;
    }
    BOOL v9 = *a3 == 0x5F646E617265706FLL && a3[1] == 0x5F746E656D676573;
    if (!v9 || *(void *)((char *)a3 + 13) != 0x73657A69735F746ELL) {
      return 0;
    }
  }
  if (BYTE3(v8)) {
    uint64_t v14 = a2 + 16 * ((v8 >> 23) & 1) + 64;
  }
  else {
    uint64_t v14 = 0;
  }
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14, 4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::scf::ParallelOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v6 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v6, 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::ParallelOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v4 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v4 = 0;
  }

  return mlir::scf::ParallelOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::hashProperties(uint64_t a1, void *a2)
{
  return mlir::scf::ParallelOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = (int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v5 = 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v5, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v7);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a3, v5, 4);
  }
  return result;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::replaceWithAdditionalYields;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[126], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  *(void *)&double result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  unint64_t v3 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v4 = a2 + 16 * ((v3 >> 23) & 1) + 64;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_DWORD *)(v4 + 8) == 1)
  {
    uint64_t v5 = *(void *)(((a2 + 16 * ((v3 >> 23) & 1) + 64 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(a2 + 40)
                   + 8);
    if (v5) {
      uint64_t v6 = v5 - 8;
    }
    else {
      uint64_t v6 = 0;
    }
    return **(void **)(v6 + 48);
  }
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v3 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*(_DWORD *)(v3 + 8) == 1) {
    return *(void *)(*(void *)(a2 + 72) + 24) | 4;
  }
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v3 = (_DWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  if (v3[2] == 1) {
    return *(void *)(*(void *)(a2 + 72) + 32 * (v3[1] + *v3) + 24) | 4;
  }
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v3 = (unsigned int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  if (v3[2] == 1) {
    return *(void *)(*(void *)(a2 + 72) + 32 * *v3 + 24) | 4;
  }
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopResults(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::replaceWithAdditionalYields(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::areTypesCompatible;
  unint64_t v3 = &unk_267770000;
  {
    uint64_t v12 = v2;
    unint64_t v3 = (void *)&unk_267770000;
    unint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_267770000;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v234 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v40 = v39;
    a1 = v234;
    if (v40)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v248 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v248;
      }
      unint64_t v43 = &v247[v42];
      unint64_t v44 = v248 - v42;
      if (v248 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v248 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v234;
    }
  }
  uint64_t v2 = v1[427];
  unint64_t v3 = &unk_267771000;
  {
    uint64_t v222 = v2;
    uint64_t v235 = a1;
    unint64_t v3 = (void *)&unk_267771000;
    int v49 = v48;
    uint64_t v2 = v222;
    a1 = v235;
    if (v49)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v248 = 87;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v248;
      }
      unint64_t v52 = &v247[v51];
      unint64_t v53 = v248 - v51;
      if (v248 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v248 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v222;
      a1 = v235;
    }
  }
  uint64_t v4 = v3[437];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v223 = v2;
    uint64_t v236 = a1;
    uint64_t v211 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v211;
    uint64_t v2 = v223;
    int v58 = v57;
    a1 = v236;
    if (v58)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v248 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v248;
      }
      unint64_t v61 = &v247[v60];
      unint64_t v62 = v248 - v60;
      if (v248 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v248 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v211;
      uint64_t v2 = v223;
      a1 = v236;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v224 = v2;
    uint64_t v237 = a1;
    uint64_t v201 = v6;
    uint64_t v212 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v201;
    uint64_t v4 = v212;
    int v67 = v66;
    uint64_t v2 = v224;
    a1 = v237;
    if (v67)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v248 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v248;
      }
      unint64_t v70 = &v247[v69];
      unint64_t v71 = v248 - v69;
      if (v248 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v248 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v201;
      uint64_t v4 = v212;
      uint64_t v2 = v224;
      a1 = v237;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v225 = v2;
    uint64_t v238 = a1;
    uint64_t v202 = v6;
    uint64_t v213 = v4;
    uint64_t v192 = v8;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v192;
    uint64_t v6 = v202;
    uint64_t v4 = v213;
    int v76 = v75;
    uint64_t v2 = v225;
    a1 = v238;
    if (v76)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v248 = 96;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v248;
      }
      unint64_t v79 = &v247[v78];
      unint64_t v80 = v248 - v78;
      if (v248 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v248 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v192;
      uint64_t v6 = v202;
      uint64_t v4 = v213;
      uint64_t v2 = v225;
      a1 = v238;
    }
  }
  uint64_t v10 = v9[47];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v226 = v2;
    uint64_t v239 = a1;
    uint64_t v203 = v6;
    uint64_t v214 = v4;
    uint64_t v184 = v10;
    uint64_t v193 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v184;
    uint64_t v8 = v193;
    uint64_t v6 = v203;
    uint64_t v4 = v214;
    int v85 = v84;
    uint64_t v2 = v226;
    a1 = v239;
    if (v85)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v248 = 83;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v248;
      }
      unint64_t v88 = &v247[v87];
      unint64_t v89 = v248 - v87;
      if (v248 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v248 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v184;
      uint64_t v8 = v193;
      uint64_t v6 = v203;
      uint64_t v4 = v214;
      uint64_t v2 = v226;
      a1 = v239;
    }
  }
  uint64_t v12 = v11[443];
  unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v227 = v2;
    uint64_t v240 = a1;
    uint64_t v204 = v6;
    uint64_t v215 = v4;
    uint64_t v185 = v10;
    uint64_t v194 = v8;
    uint64_t v177 = v12;
    unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v12 = v177;
    uint64_t v10 = v185;
    uint64_t v8 = v194;
    uint64_t v6 = v204;
    uint64_t v4 = v215;
    int v94 = v93;
    uint64_t v2 = v227;
    a1 = v240;
    if (v94)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      unint64_t v248 = 127;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v248;
      }
      unint64_t v97 = &v247[v96];
      unint64_t v98 = v248 - v96;
      if (v248 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v248 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v12 = v177;
      uint64_t v10 = v185;
      uint64_t v8 = v194;
      uint64_t v6 = v204;
      uint64_t v4 = v215;
      uint64_t v2 = v227;
      a1 = v240;
    }
  }
  uint64_t v14 = v13[130];
  long long v15 = &unk_267770000;
  {
    uint64_t v228 = v2;
    uint64_t v241 = a1;
    uint64_t v205 = v6;
    uint64_t v216 = v4;
    uint64_t v186 = v10;
    uint64_t v195 = v8;
    uint64_t v171 = v14;
    uint64_t v178 = v12;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v171;
    uint64_t v12 = v178;
    uint64_t v10 = v186;
    uint64_t v8 = v195;
    uint64_t v6 = v205;
    uint64_t v4 = v216;
    int v103 = v102;
    uint64_t v2 = v228;
    a1 = v241;
    if (v103)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v248 = 84;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v248;
      }
      unint64_t v106 = &v247[v105];
      unint64_t v107 = v248 - v105;
      if (v248 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v248 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v171;
      uint64_t v12 = v178;
      uint64_t v10 = v186;
      uint64_t v8 = v195;
      uint64_t v6 = v205;
      uint64_t v4 = v216;
      uint64_t v2 = v228;
      a1 = v241;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v229 = v2;
    uint64_t v242 = a1;
    uint64_t v206 = v6;
    uint64_t v217 = v4;
    uint64_t v187 = v10;
    uint64_t v196 = v8;
    uint64_t v172 = v14;
    uint64_t v179 = v12;
    uint64_t v166 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v166;
    uint64_t v14 = v172;
    uint64_t v12 = v179;
    uint64_t v10 = v187;
    uint64_t v8 = v196;
    uint64_t v6 = v206;
    uint64_t v4 = v217;
    int v112 = v111;
    uint64_t v2 = v229;
    a1 = v242;
    if (v112)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v248 = 89;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v248;
      }
      unint64_t v115 = &v247[v114];
      unint64_t v116 = v248 - v114;
      if (v248 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v248 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v166;
      uint64_t v14 = v172;
      uint64_t v12 = v179;
      uint64_t v10 = v187;
      uint64_t v8 = v196;
      uint64_t v6 = v206;
      uint64_t v4 = v217;
      uint64_t v2 = v229;
      a1 = v242;
    }
  }
  uint64_t v18 = v17[320];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v230 = v2;
    uint64_t v243 = a1;
    uint64_t v207 = v6;
    uint64_t v218 = v4;
    uint64_t v188 = v10;
    uint64_t v197 = v8;
    uint64_t v173 = v14;
    uint64_t v180 = v12;
    uint64_t v162 = v18;
    uint64_t v167 = v16;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v162;
    uint64_t v16 = v167;
    uint64_t v14 = v173;
    uint64_t v12 = v180;
    uint64_t v10 = v188;
    uint64_t v8 = v197;
    uint64_t v6 = v207;
    uint64_t v4 = v218;
    int v121 = v120;
    uint64_t v2 = v230;
    a1 = v243;
    if (v121)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v248 = 96;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v248;
      }
      uint64_t v124 = &v247[v123];
      unint64_t v125 = v248 - v123;
      if (v248 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v248 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v162;
      uint64_t v16 = v167;
      uint64_t v14 = v173;
      uint64_t v12 = v180;
      uint64_t v10 = v188;
      uint64_t v8 = v197;
      uint64_t v6 = v207;
      uint64_t v4 = v218;
      uint64_t v2 = v230;
      a1 = v243;
    }
  }
  uint64_t v20 = v19[65];
  uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v231 = v2;
    uint64_t v244 = a1;
    uint64_t v208 = v6;
    uint64_t v219 = v4;
    uint64_t v189 = v10;
    uint64_t v198 = v8;
    uint64_t v174 = v14;
    uint64_t v181 = v12;
    uint64_t v163 = v18;
    uint64_t v168 = v16;
    uint64_t v159 = v20;
    uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v20 = v159;
    uint64_t v18 = v163;
    uint64_t v16 = v168;
    uint64_t v14 = v174;
    uint64_t v12 = v181;
    uint64_t v10 = v189;
    uint64_t v8 = v198;
    uint64_t v6 = v208;
    uint64_t v4 = v219;
    int v130 = v129;
    uint64_t v2 = v231;
    a1 = v244;
    if (v130)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v248 = 89;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v248;
      }
      uint64_t v133 = &v247[v132];
      unint64_t v134 = v248 - v132;
      if (v248 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v248 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v20 = v159;
      uint64_t v18 = v163;
      uint64_t v16 = v168;
      uint64_t v14 = v174;
      uint64_t v12 = v181;
      uint64_t v10 = v189;
      uint64_t v8 = v198;
      uint64_t v6 = v208;
      uint64_t v4 = v219;
      uint64_t v2 = v231;
      a1 = v244;
    }
  }
  uint64_t v22 = v21[132];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v232 = v2;
    uint64_t v245 = a1;
    uint64_t v209 = v6;
    uint64_t v220 = v4;
    uint64_t v190 = v10;
    uint64_t v199 = v8;
    uint64_t v175 = v14;
    uint64_t v182 = v12;
    uint64_t v164 = v18;
    uint64_t v169 = v16;
    uint64_t v157 = v22;
    uint64_t v160 = v20;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v157;
    uint64_t v20 = v160;
    uint64_t v18 = v164;
    uint64_t v16 = v169;
    uint64_t v14 = v175;
    uint64_t v12 = v182;
    uint64_t v10 = v190;
    uint64_t v8 = v199;
    uint64_t v6 = v209;
    uint64_t v4 = v220;
    int v139 = v138;
    uint64_t v2 = v232;
    a1 = v245;
    if (v139)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v248 = 97;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v248;
      }
      uint64_t v142 = &v247[v141];
      unint64_t v143 = v248 - v141;
      if (v248 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v248 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v157;
      uint64_t v20 = v160;
      uint64_t v18 = v164;
      uint64_t v16 = v169;
      uint64_t v14 = v175;
      uint64_t v12 = v182;
      uint64_t v10 = v190;
      uint64_t v8 = v199;
      uint64_t v6 = v209;
      uint64_t v4 = v220;
      uint64_t v2 = v232;
      a1 = v245;
    }
  }
  uint64_t v24 = v23[229];
  unint64_t v25 = &unk_267772000;
  {
    uint64_t v233 = v2;
    uint64_t v246 = a1;
    uint64_t v210 = v6;
    uint64_t v221 = v4;
    uint64_t v191 = v10;
    uint64_t v200 = v8;
    uint64_t v176 = v14;
    uint64_t v183 = v12;
    uint64_t v165 = v18;
    uint64_t v170 = v16;
    uint64_t v158 = v22;
    uint64_t v161 = v20;
    uint64_t v156 = v24;
    unint64_t v25 = (void *)&unk_267772000;
    uint64_t v24 = v156;
    uint64_t v22 = v158;
    uint64_t v20 = v161;
    uint64_t v18 = v165;
    uint64_t v16 = v170;
    uint64_t v14 = v176;
    uint64_t v12 = v183;
    uint64_t v10 = v191;
    uint64_t v8 = v200;
    uint64_t v6 = v210;
    uint64_t v4 = v221;
    int v148 = v147;
    uint64_t v2 = v233;
    a1 = v246;
    if (v148)
    {
      uint64_t v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v248 = 93;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v248;
      }
      uint64_t v151 = &v247[v150];
      unint64_t v152 = v248 - v150;
      if (v248 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v248 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      unint64_t v25 = (void *)&unk_267772000;
      uint64_t v24 = v156;
      uint64_t v22 = v158;
      uint64_t v20 = v161;
      uint64_t v18 = v165;
      uint64_t v16 = v170;
      uint64_t v14 = v176;
      uint64_t v12 = v183;
      uint64_t v10 = v191;
      uint64_t v8 = v200;
      uint64_t v6 = v210;
      uint64_t v4 = v221;
      uint64_t v2 = v233;
      a1 = v246;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v25[227] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::ParallelOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v5 = a1;
  if (!mlir::scf::ParallelOp::verifyInvariantsImpl((mlir::scf::ParallelOp *)&v5)) {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::scf::ParallelOp::verify((mlir::scf::ParallelOp *)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ReduceOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v87 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v94 = 81;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      uint64_t v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267770000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267770000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v94 = 82;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      int v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[29];
  long long v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    long long v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<Empty>]";
      unint64_t v94 = 110;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      long long v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[162];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      int v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      int v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[435] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::ReduceOp::print((mlir::scf::ReduceOp *)&v8, a3);
}

BOOL mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroResults<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ReduceOp>,mlir::OpTrait::OneOperand<mlir::scf::ReduceOp>,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>,mlir::OpTrait::OpInvariants<mlir::scf::ReduceOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroResults<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ReduceOp>,mlir::OpTrait::OneOperand<mlir::scf::ReduceOp>,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>,mlir::OpTrait::OpInvariants<mlir::scf::ReduceOp>>(unsigned int *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
      && mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>::verifyTrait((uint64_t)a1)
      && mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t)a1, (((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]+ (((unint64_t)a1[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * a1[10], (uint64_t)"reductionOperator", 17, 0) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    uint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    uint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        uint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "scf.parallel";
  v37[1] = 12;
  if (*v8)
  {
    unint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      uint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      unint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          unint64_t v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      int v18 = v46;
      int v19 = __p;
      if (v46 != __p)
      {
        do
          int v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        int v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    unint64_t v20 = v43;
    if (v43)
    {
      unint64_t v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      uint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

BOOL mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants(uint64_t a1)
{
  uint64_t v2 = a1;
  return mlir::scf::ReduceOp::verifyRegions((mlir::scf::ReduceOp *)&v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ReduceReturnOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<Empty>]";
      unint64_t v176 = 108;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[164];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      uint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      unint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    || !mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::scf::ReduceReturnOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v6))
  {
    return 0;
  }
  uint64_t v8 = a1;
  return mlir::scf::ReduceReturnOp::verify((mlir::scf::ReduceReturnOp *)&v8) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::scf::ReduceReturnOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "scf.reduce";
  v37[1] = 10;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    int64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getParseAssemblyFn(void (**a1)(int a1, mlir::OperationState *this)@<X8>)
{
  *a1 = mlir::scf::WhileOp::parse;
  a1[3] = (void (*)(int, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                      + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::areTypesCompatible;
  char v3 = &unk_267770000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72);
  }
  else {
    return 0;
  }
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  mlir::scf::WhileOp::getSuccessorRegions(&v5, 0, a5);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  mlir::scf::WhileOp::getSuccessorRegions(&v4, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::replaceWithAdditionalYields;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[126], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  a2[3] = v3 + 24;
  *(void *)&double result = 0x600000002;
  a2[1] = 0x600000002;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleInductionVar()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleLowerBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleStep()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleUpperBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  v7[3] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    int v2 = *(_DWORD *)(a2 + 68);
  }
  else {
    int v2 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, a2, 0, v2, 0, 0);
  uint64_t v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7) {
    free(v6);
  }
  return v3;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return *(void *)(v3 + 48);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  unint64_t v10[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 32);
  if (v2) {
    uint64_t v3 = (ZinIrHalH13g **)(v2 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  mlir::Block::getTerminator(v3);
  if ((*(unsigned char *)(v4 + 46) & 0x80) != 0) {
    int v5 = *(_DWORD *)(v4 + 68);
  }
  else {
    int v5 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  uint64_t v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10) {
    free(v9);
  }
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopResults(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::replaceWithAdditionalYields(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      unint64_t v154 = 89;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[449];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v154 = 87;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      unsigned int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[437];
  int v5 = &unk_267770000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    int v5 = (void *)&unk_267770000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      int v5 = (void *)&unk_267770000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v154 = 88;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v154 = 83;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  unint64_t v13 = &unk_267772000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    unint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[227];
  long long v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    long long v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v154 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      long long v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[132];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v154 = 97;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[229] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::scf::WhileOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  if (!mlir::OpTrait::impl::verifyNRegions(a1, (mlir::Operation *)2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v4 = a1;
  if (!mlir::scf::WhileOp::verifyInvariantsImpl((unsigned int **)&v4)) {
    return 0;
  }
  uint64_t v4 = a1;
  return mlir::scf::WhileOp::verify((mlir::scf::WhileOp *)&v4);
}

BOOL mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyTypesAlongControlFlowEdges(a1, a2)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v3) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.yield", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C321F98;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::YieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getSuccessorRegions;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[405], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::detail::RegionBranchTerminatorOpInterfaceTrait<mlir::func::ReturnOp>::getSuccessorRegions(&v6, a3, a4, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unsigned int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    char v3 = (void *)&unk_267770000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v223 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp, mlir:"
             ":scf::ForOp, mlir::scf::IfOp, mlir::scf::IndexSwitchOp, mlir::scf::ParallelOp, mlir::scf::WhileOp>::Impl<Empty>]";
      unint64_t v223 = 219;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[166];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      int v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      int v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[322];
  long long v15 = &unk_267771000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      uint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[79];
  int v21 = &unk_267770000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    int v21 = (void *)&unk_267770000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      unint64_t v223 = 82;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      uint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      int v21 = (void *)&unk_267770000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[413];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v223 = 84;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::scf::YieldOp>::verifyTrait((uint64_t)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::scf::YieldOp>::verifyTrait(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      uint64_t v4 = *(void **)(*(void *)(ParentOp + 48) + 16);
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::ExecuteRegionOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
      {
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::IndexSwitchOp,void>::id)
      {
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
      {
        return 1;
      }
    }
  }
  __int16 v37 = 257;
  mlir::Operation::emitOpError(a1, &v36, (uint64_t)v46);
  if (v46[0])
  {
    LODWORD(v39) = 3;
    *((void *)&v39 + 1) = "expects parent op ";
    *(void *)&long long v40 = 18;
    uint64_t v9 = &v39;
    uint64_t v10 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v30 = v48 + 1;
      if (v47 <= &v39 && (char *)v47 + 24 * v48 > (char *)&v39)
      {
        int64_t v33 = (char *)&v39 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v30, 24);
        uint64_t v10 = (char *)v47;
        uint64_t v9 = (long long *)((char *)v47 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v30, 24);
        uint64_t v9 = &v39;
        uint64_t v10 = (char *)v47;
      }
    }
    uint64_t v11 = &v10[24 * v48];
    long long v12 = *v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t v11 = v12;
    ++v48;
  }
  uint64_t v35 = "to be one of '";
  uint64_t v13 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v46, &v35);
  uint64_t v14 = (uint64_t)v13;
  long long v41 = xmmword_26418D110;
  long long v42 = *(_OWORD *)&off_26418D120;
  long long v43 = xmmword_26418D130;
  long long v44 = *(_OWORD *)&off_26418D140;
  long long v39 = xmmword_26418D0F0;
  long long v40 = *(_OWORD *)&off_26418D100;
  if (*v13)
  {
    v38[0] = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)&v39, (uint64_t)&v45, (uint64_t)(v13 + 1), (uint64_t)(v13 + 1), v38);
    if (*(void *)v14)
    {
      uint64_t v15 = v14 + 24;
      unint64_t v16 = *(void *)(v14 + 24);
      LODWORD(v38[0]) = 3;
      v38[1] = "'";
      unint64_t v38[2] = (const char *)1;
      uint64_t v17 = *(unsigned int *)(v14 + 32);
      uint64_t v18 = v38;
      if (v17 >= *(_DWORD *)(v14 + 36))
      {
        unint64_t v31 = v17 + 1;
        BOOL v32 = v16 + 24 * v17 > (unint64_t)v38;
        if (v16 <= (unint64_t)v38 && v32)
        {
          uint64_t v34 = (char *)v38 - v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 40), v31, 24);
          unint64_t v16 = *(void *)(v14 + 24);
          uint64_t v18 = (const char **)&v34[v16];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 40), v31, 24);
          unint64_t v16 = *(void *)(v14 + 24);
          uint64_t v18 = v38;
        }
      }
      uint64_t v19 = v16 + 24 * *(unsigned int *)(v14 + 32);
      long long v20 = *(_OWORD *)v18;
      *(void *)(v19 + 16) = v18[2];
      *(_OWORD *)uint64_t v19 = v20;
      ++*(_DWORD *)(v14 + 32);
    }
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v46[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
  }
  if (v55)
  {
    int v21 = __p;
    if (__p)
    {
      uint64_t v22 = v54;
      uint64_t v23 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p;
      }
      int v54 = v21;
      operator delete(v23);
    }
    uint64_t v24 = v51;
    if (v51)
    {
      unint64_t v25 = v52;
      unsigned int v26 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unsigned int v26 = v51;
      }
      unint64_t v52 = v24;
      operator delete(v26);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v8;
}

uint64_t mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void anonymous namespace'::SCFInlinerInterface::~SCFInlinerInterface(_anonymous_namespace_::SCFInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SCFInlinerInterface::isLegalToInline()
{
  return 1;
}

{
  return 1;
}

void anonymous namespace'::SCFInlinerInterface::handleTerminator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 72);
      uint64_t v7 = *(unsigned int *)(a2 + 68);
      uint64_t v18 = a3;
      uint64_t v19 = 0;
      uint64_t v20 = v6;
      uint64_t v21 = 0;
      if (!a4) {
        return;
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v18 = a3;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if (!a4) {
        return;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      if (v20 == v6 && v9 == v7) {
        break;
      }
      long long v12 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v18, v8);
      uint64_t v13 = v21;
      uint64_t v14 = *v12;
      if (*v12)
      {
        uint64_t v15 = *(uint64_t **)(v20 + 32 * v21 + 24);
        do
        {
          unint64_t v16 = (uint64_t *)v14[1];
          if (v16)
          {
            *unint64_t v16 = *v14;
            if (*v14) {
              *(void *)(*v14 + 8) = v14[1];
            }
          }
          v14[3] = (uint64_t)v15;
          v14[1] = (uint64_t)v15;
          uint64_t v17 = *v15;
          *uint64_t v14 = *v15;
          if (v17) {
            *(void *)(v17 + 8) = v14;
          }
          *uint64_t v15 = (uint64_t)v14;
          uint64_t v14 = *v12;
        }
        while (*v12);
      }
      uint64_t v8 = v19 + 1;
      uint64_t v9 = v13 + 1;
      ++v19;
      uint64_t v21 = v9;
    }
    while (v18 != a3 || v8 != a4);
  }
}

void SingleBlockExecuteInliner::~SingleBlockExecuteInliner(SingleBlockExecuteInliner *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t SingleBlockExecuteInliner::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v19[2] = *MEMORY[0x263EF8340];
  unint64_t v5 = *(unsigned int *)(a2 + 44);
  if ((v5 & 0x7FFFFF) != 0)
  {
    unint64_t v6 = ((a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7 == v6) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = MEMORY[8];
    if (!MEMORY[8]) {
      return 0;
    }
  }
  if (*(void *)(v7 + 8) != v6) {
    return 0;
  }
  if ((v5 & 0x7FFFFF) != 0) {
    unint64_t v9 = ((a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a2 + 40);
  else {
    unint64_t v9 = 0;
  }
  mlir::ValueRange::ValueRange(v18, 0, 0);
  uint64_t v10 = v18[0];
  uint64_t v11 = v18[1];
  uint64_t v12 = *(void *)(v9 + 8);
  if (v12) {
    uint64_t v13 = (ZinIrHalH13g **)(v12 - 8);
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::Block::getTerminator(v13);
  uint64_t v15 = v14;
  if ((*(unsigned char *)(v14 + 46) & 0x80) != 0)
  {
    uint64_t v16 = *(void *)(v14 + 72);
    unint64_t v17 = *(unsigned int *)(v14 + 68);
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
  }
  mlir::ValueRange::ValueRange(v19, v16, v17);
  mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v13, a2, v10, v11);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v19[0], v19[1]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v15);
  return 1;
}

void MultiBlockExecuteInliner::~MultiBlockExecuteInliner(MultiBlockExecuteInliner *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t MultiBlockExecuteInliner::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, unint64_t, char *))
{
  v39[6] = *MEMORY[0x263EF8340];
  unint64_t v5 = *(mlir::Block **)(a2 + 16);
  if (v5) {
    uint64_t ParentOp = mlir::Block::getParentOp(v5);
  }
  else {
    uint64_t ParentOp = 0;
  }
  uint64_t v7 = *(void *)(ParentOp + 48);
  uint64_t v8 = *(void **)(v7 + 16);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(ParentOp + 48);
  }
  if (v9)
  {
    __int16 v37 = *(void **)(v7 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v37);
    if (Values && mlir::Dialect::getRegisteredInterfaceForOp<mlir::FunctionOpInterface>(Values, v7)) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v11 = v10 | v7 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::FunctionOpInterface>(v11 + 32)
      || mlir::Dialect::getRegisteredInterfaceForOp<mlir::FunctionOpInterface>(*(void *)(v11 + 24), *(void *)(ParentOp + 48)))
    {
      goto LABEL_15;
    }
  }
  if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::scf::ExecuteRegionOp,void>::id) {
    return 0;
  }
LABEL_15:
  uint64_t v14 = *(uint64_t (***)(void, uint64_t, unint64_t, char *))(a2 + 16);
  uint64_t v15 = (mlir::Block *)((uint64_t (*)(uint64_t (***)(void, uint64_t, unint64_t, char *), uint64_t (**)(void, uint64_t, unint64_t, char *), uint64_t))(*a3)[8])(a3, v14, a2);
  uint64_t v35 = v15;
  a3[3] = v14;
  a3[4] = v14 + 4;
  uint64_t v16 = a2 + 64;
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(((a2
                    + 64
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  if (v18) {
    uint64_t v19 = (void *)(v18 - 8);
  }
  else {
    uint64_t v19 = 0;
  }
  __int16 v37 = v19;
  mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *>((mlir::OpBuilder *)(a3 + 1), v17, (uint64_t *)&v37);
  unint64_t v20 = *(unsigned int *)(a2 + 44);
  if ((v20 & 0x7FFFFF) != 0)
  {
    unint64_t v21 = ((v16 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    uint64_t v22 = *(void *)(v21 + 8);
    if (v22 == v21) {
      goto LABEL_37;
    }
    do
    {
LABEL_26:
      if (v22) {
        unsigned int v26 = (ZinIrHalH13g **)(v22 - 8);
      }
      else {
        unsigned int v26 = 0;
      }
      mlir::Block::getTerminator(v26);
      if (v27) {
        BOOL v28 = *(void *)(*((void *)v27 + 6) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28)
      {
        unint64_t v29 = v27;
        unint64_t v30 = (uint64_t (**)(void, uint64_t, unint64_t, char *))*((void *)v27 + 2);
        ZinIrHalH13g::~ZinIrHalH13g(v27);
        a3[3] = v30;
        a3[4] = v31;
        if ((*((unsigned char *)v29 + 46) & 0x80) != 0)
        {
          uint64_t v23 = *((unsigned int *)v29 + 17);
          uint64_t v24 = (void *)*((void *)v29 + 9);
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v23 = 0;
        }
        uint64_t v25 = *((void *)v29 + 3);
        __int16 v37 = v24;
        uint64_t v38 = v23;
        mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *&,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 1), v25, (uint64_t *)&v35, (uint64_t)&v37);
        ((void (*)(uint64_t (***)(void, uint64_t, unint64_t, char *), ZinIrHalH13g *))(*a3)[5])(a3, v29);
      }
      uint64_t v22 = *(void *)(v22 + 8);
    }
    while (v22 != v21);
    LODWORD(v20) = *(_DWORD *)(a2 + 44);
    uint64_t v15 = v35;
    goto LABEL_37;
  }
  unint64_t v21 = 0;
  uint64_t v22 = MEMORY[8];
  if (MEMORY[8]) {
    goto LABEL_26;
  }
LABEL_37:
  mlir::RewriterBase::inlineRegionBefore(a3, ((v16 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), v15);
  __int16 v37 = v39;
  uint64_t v38 = 0x600000000;
  int v32 = *(_DWORD *)(a2 + 36);
  if (v32) {
    uint64_t v33 = a2 - 16;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32)
  {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v33, 0);
    mlir::Value::getLoc((mlir::Value *)&NextResultAtOffset);
    mlir::Block::addArgument();
  }
  mlir::ValueRange::ValueRange(v36, (uint64_t)v39, 0);
  (*a3)[3](a3, a2, v36[0], (char *)v36[1]);
  if (v37 != v39) {
    free(v37);
  }
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"cf.br", (const unsigned __int8 *)5, Context);
  if (!v8)
  {
    __int16 v17 = 1283;
    v16[2] = (uint64_t)"cf.br";
    void v16[3] = 5;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v15 = 259;
    llvm::operator+(v16, (uint64_t *)&v14, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  uint64_t v9 = *a3;
  mlir::ValueRange::ValueRange(v18, 0, 0);
  mlir::cf::BranchOp::build((uint64_t)a1, (uint64_t)v19, v9, v18[0], v18[1]);
  uint64_t v10 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v10 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::cf::BranchOp,void>::id) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *&,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"cf.br", (const unsigned __int8 *)5, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    unint64_t v18[2] = (uint64_t)"cf.br";
    void v18[3] = 5;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(void *)(a4 + 8));
  mlir::cf::BranchOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::cf::BranchOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

char *llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = a2 - *(void *)a1;
  uint64_t v13 = v12 >> 3;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  unint64_t v14 = *(unsigned int *)(a1 + 12);
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unint64_t v17 = a6 - a4;
  unint64_t v18 = a6 - a4 + v15;
  if (*(void *)a1 + 8 * v15 != a2)
  {
    uint64_t v103 = a3;
    if (v18 > v14)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
      uint64_t v11 = *(void *)a1;
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      unsigned int v16 = *(_DWORD *)(a1 + 8);
    }
    __int16 v19 = (char *)(v11 + 8 * v13);
    unint64_t v20 = (char *)(v11 + 8 * v15);
    unint64_t v21 = v20 - v19;
    unint64_t v22 = (v20 - v19) >> 3;
    if (v22 < v17)
    {
      unsigned int v23 = v16 + v17;
      *(_DWORD *)(a1 + 8) = v23;
      if (v12 >> 3 == v15)
      {
        uint64_t v24 = a6;
        uint64_t v25 = v103;
      }
      else
      {
        memcpy((void *)(v11 + 8 * v23 - 8 * v22), v19, v20 - v19);
        if (v21 > 0x87)
        {
          uint64_t v25 = v103;
          if ((unint64_t)v19 >= v103 + 32 * v8 + 4 * v21
            || v103 + 32 * v8 + 24 >= v11 + (v12 & 0xFFFFFFFFFFFFFFF8) + v21)
          {
            uint64_t v39 = (v21 >> 3) & 3;
            if (!v39) {
              uint64_t v39 = 4;
            }
            uint64_t v38 = &v19[8 * (v22 - v39)];
            uint64_t v40 = v8 + v22 - v39;
            unint64_t v65 = (unsigned long long *)(v11 + 8 * (v12 >> 3) + 16);
            unint64_t v66 = (const double *)(v103 + 32 * v8 + 88);
            do
            {
              int v67 = v66 - 8;
              unsigned long long v68 = (unsigned __int128)vld4q_f64(v67);
              unsigned long long v69 = (unsigned __int128)vld4q_f64(v66);
              *(v65 - 1) = v68;
              *unint64_t v65 = v69;
              v65 += 2;
              v22 -= 4;
              v66 += 16;
            }
            while (v39 != v22);
          }
          else
          {
            uint64_t v38 = v19;
            uint64_t v39 = (v20 - v19) >> 3;
            uint64_t v40 = v8;
          }
        }
        else
        {
          uint64_t v38 = v19;
          uint64_t v39 = (v20 - v19) >> 3;
          uint64_t v40 = v8;
          uint64_t v25 = v103;
        }
        uint64_t v24 = a6;
        uint64_t v71 = (uint64_t *)(v25 + 32 * v40 + 24);
        uint64_t v8 = v40 + v39;
        do
        {
          uint64_t v72 = *v71;
          v71 += 4;
          *(void *)uint64_t v38 = v72;
          v38 += 8;
          --v39;
        }
        while (v39);
      }
      if (v25 != a5 || v24 != v8)
      {
        if (v25 != a5)
        {
          for (uint64_t i = (uint64_t *)(v25 + 32 * v8 + 24); ; i += 4)
          {
            uint64_t v74 = *i;
            *(void *)unint64_t v20 = v74;
            v20 += 8;
          }
        }
        uint64_t v75 = v24 - v8;
        if ((unint64_t)(v24 - v8) > 0x12)
        {
          uint64_t v76 = v25 + 32 * v8;
          if ((unint64_t)v20 >= v25 + 32 * v24 || v76 + 24 >= (unint64_t)(v11 + 8 * (v24 + v15 - v8)))
          {
            uint64_t v77 = 4;
            if ((v75 & 3) != 0) {
              uint64_t v77 = v75 & 3;
            }
            uint64_t v78 = v75 - v77;
            v20 += 8 * v78;
            uint64_t v79 = v8 + v78;
            uint64_t v80 = (unsigned long long *)(v11 + 8 * v15 + 16);
            uint64_t v81 = v77 + v8 - v24;
            int v82 = (const double *)(v76 + 88);
            do
            {
              unint64_t v83 = v82 - 8;
              unsigned long long v84 = (unsigned __int128)vld4q_f64(v83);
              unsigned long long v85 = (unsigned __int128)vld4q_f64(v82);
              *(v80 - 1) = v84;
              *uint64_t v80 = v85;
              v80 += 2;
              v82 += 16;
              v81 += 4;
            }
            while (v81);
            uint64_t v8 = v79;
          }
        }
        uint64_t v86 = v24 - v8;
        uint64_t v87 = (uint64_t *)(v25 + 32 * v8 + 24);
        do
        {
          uint64_t v88 = *v87;
          v87 += 4;
          *(void *)unint64_t v20 = v88;
          v20 += 8;
          --v86;
        }
        while (v86);
      }
      return v19;
    }
    uint64_t v29 = v12 >> 3;
    uint64_t v30 = 8 * v17;
    unint64_t v31 = v15 + ((uint64_t)(8 * v17) >> 3);
    uint64_t v32 = v15;
    if (v31 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v31, 8);
      uint64_t v32 = *(unsigned int *)(a1 + 8);
      unsigned int v16 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v33 = &v20[-v30];
    if (a6 == v8) {
      goto LABEL_38;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v32);
    uint64_t v35 = 8 * a6;
    unint64_t v36 = 8 * a6 - 8 * v8 - 8;
    if (v36 >= 0x98)
    {
      uint64_t v54 = 8 * v32 + *(void *)a1;
      __int16 v37 = &v20[-v30];
      if ((unint64_t)(v35 - (v11 + 8 * (v8 + v15)) + v54) >= 0x20)
      {
        uint64_t v55 = (v36 >> 3) + 1;
        uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v34 = (void *)((char *)v34 + v56);
        __int16 v37 = &v33[v56];
        unint64_t v57 = (long long *)(8 * v8 + 8 * v15 - v35 + v11 + 16);
        int v58 = (_OWORD *)(v54 + 16);
        uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *int v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 4;
        }
        while (v59);
        if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      __int16 v37 = &v20[-v30];
    }
    do
    {
      uint64_t v61 = *(void *)v37;
      v37 += 8;
      *v34++ = v61;
    }
    while (v37 != v20);
LABEL_38:
    *(_DWORD *)(a1 + 8) = v16 + v17;
    if (v33 != v19) {
      memmove(&v19[v30], v19, &v20[-v30] - v19);
    }
    if (v103 != a5 || a6 != v8)
    {
      if (v103 != a5)
      {
        for (unsigned int j = (uint64_t *)(v103 + 32 * v8 + 24); ; j += 4)
        {
          uint64_t v63 = *j;
          *(void *)__int16 v19 = v63;
          v19 += 8;
        }
      }
      if (v17 > 0x12)
      {
        uint64_t v89 = v103 + 32 * v8;
        if ((unint64_t)v19 >= v103 + 32 * a6
          || (unint64_t v70 = v19, v89 + 24 >= (unint64_t)(v11 + 8 * (a6 + v29 - v8))))
        {
          if ((v17 & 3) != 0) {
            uint64_t v90 = v17 & 3;
          }
          else {
            uint64_t v90 = 4;
          }
          unint64_t v70 = &v19[8 * (v17 - v90)];
          uint64_t v91 = v8 + v17 - v90;
          unint64_t v92 = (unsigned long long *)(v11 + 8 * v29 + 16);
          uint64_t v93 = v8 + v90 - a6;
          int v94 = (const double *)(v89 + 88);
          do
          {
            unint64_t v95 = v94 - 8;
            unsigned long long v96 = (unsigned __int128)vld4q_f64(v95);
            unsigned long long v97 = (unsigned __int128)vld4q_f64(v94);
            *(v92 - 1) = v96;
            unsigned long long *v92 = v97;
            v92 += 2;
            v94 += 16;
            v93 += 4;
          }
          while (v93);
          uint64_t v8 = v91;
        }
      }
      else
      {
        unint64_t v70 = v19;
      }
      uint64_t v98 = a6 - v8;
      int v99 = (uint64_t *)(v103 + 32 * v8 + 24);
      do
      {
        uint64_t v100 = *v99;
        v99 += 4;
        *(void *)unint64_t v70 = v100;
        v70 += 8;
        --v98;
      }
      while (v98);
    }
    return v19;
  }
  if (v18 > v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
    unsigned int v16 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  if (a6 != v8 || a3 != a5)
  {
    unsigned int v26 = (void *)(v11 + 8 * v16);
    if (a3 != a5)
    {
      for (k = (uint64_t *)(a3 + 32 * v8 + 24); ; k += 4)
      {
        uint64_t v28 = *k;
        *v26++ = v28;
      }
    }
    if (v17 > 0x12)
    {
      uint64_t v41 = v16;
      uint64_t v42 = a3 + 32 * v8;
      if ((unint64_t)v26 >= a3 + 32 * a6 || v42 + 24 >= v11 + 8 * (a6 + (unint64_t)v16 - v8))
      {
        uint64_t v43 = 4;
        if ((v17 & 3) != 0) {
          uint64_t v43 = v17 & 3;
        }
        v26 += v17 - v43;
        uint64_t v44 = v8 + v17 - v43;
        uint64_t v45 = (unsigned long long *)(v11 + 8 * v41 + 16);
        uint64_t v46 = v8 + v43 - a6;
        unint64_t v47 = (const double *)(v42 + 88);
        do
        {
          unsigned int v48 = v47 - 8;
          unsigned long long v49 = (unsigned __int128)vld4q_f64(v48);
          unsigned long long v50 = (unsigned __int128)vld4q_f64(v47);
          *(v45 - 1) = v49;
          *uint64_t v45 = v50;
          v45 += 2;
          v47 += 16;
          v46 += 4;
        }
        while (v46);
        uint64_t v8 = v44;
      }
    }
    uint64_t v51 = a6 - v8;
    unint64_t v52 = (uint64_t *)(a3 + 32 * v8 + 24);
    do
    {
      uint64_t v53 = *v52;
      v52 += 4;
      *v26++ = v53;
      --v51;
    }
    while (v51);
    unsigned int v16 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v16 + v17;
  return (char *)(v11 + 8 * v13);
}

mlir::Block *llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_2>(mlir::Operation ***a1, uint64_t a2)
{
  return mlir::Operation::isProperAncestor(**a1, *(Operation **)(a2 + 16));
}

void anonymous namespace'::ForOpIterArgsFolder::~ForOpIterArgsFolder(_anonymous_namespace_::ForOpIterArgsFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::ForOpIterArgsFolder::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  v75[4] = *MEMORY[0x263EF8340];
  uint64_t v56 = (mlir::Operation *)a2;
  unint64_t v4 = a2[9];
  uint64_t v53 = &v55;
  long long v54 = xmmword_211ED5570;
  if (v4 >= 5) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v53, &v55, v4, 1);
  }
  int v73 = v75;
  uint64_t v74 = 0x400000000;
  unint64_t v70 = v72;
  uint64_t v71 = 0x400000000;
  int v67 = v69;
  uint64_t v68 = 0x400000000;
  int v64 = v66;
  uint64_t v65 = 0x400000000;
  if (v4 < 4)
  {
    int v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v75, v4 + 1, 8);
    int v5 = v74;
    if (v74 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v75, v74 + 1, 8);
      int v5 = v74;
    }
  }
  v73[v5] = 0;
  LODWORD(v74) = v74 + 1;
  if ((*((unsigned char *)v56 + 46) & 0x80) == 0)
  {
    unint64_t v6 = -3;
LABEL_9:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v6, 8);
    if (HIDWORD(v68) >= v4) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  unint64_t v6 = *((unsigned int *)v56 + 17) - 3;
  if (v6 > HIDWORD(v71)) {
    goto LABEL_9;
  }
  if (HIDWORD(v68) >= v4)
  {
LABEL_10:
    if (HIDWORD(v65) < v4) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v7 = v56;
    unint64_t v8 = *((unsigned int *)v56 + 11);
    uint64_t v48 = a3;
    if ((v8 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_14:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v4, 8);
  if (HIDWORD(v65) >= v4) {
    goto LABEL_15;
  }
LABEL_11:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v4, 8);
  uint64_t v7 = v56;
  unint64_t v8 = *((unsigned int *)v56 + 11);
  uint64_t v48 = a3;
  if ((v8 & 0x800000) == 0)
  {
LABEL_12:
    uint64_t v9 = 0;
    uint64_t v10 = -3;
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = *((void *)v7 + 9);
  uint64_t v10 = *((unsigned int *)v7 + 17) - 3;
LABEL_17:
  uint64_t v11 = (void *)(v9 + 96);
  uint64_t v12 = *((unsigned int *)v7 + 9);
  uint64_t v13 = *(void *)((((unint64_t)v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v7 + 10)
                  + 8);
  if (v13) {
    uint64_t v14 = v13 - 8;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(v14 + 48);
  unsigned int v16 = *(void **)(v14 + 56);
  unint64_t v17 = (void *)(v15 + 8);
  unint64_t v18 = (mlir::Operation *)((char *)v7 - 16);
  if (v12) {
    __int16 v19 = v18;
  }
  else {
    __int16 v19 = 0;
  }
  unint64_t YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v56);
  uint64_t v49 = v21;
  unsigned long long v50 = v11;
  unint64_t v57 = v11;
  uint64_t v58 = 0;
  uint64_t v59 = v15 + 8;
  long long v60 = v19;
  uint64_t v61 = 0;
  unint64_t v62 = YieldedValues;
  uint64_t v63 = 0;
  if (!v10 || (void *)((char *)v16 - v15) == (void *)8)
  {
    uint64_t v43 = v64;
    if (v64 == v66) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  unint64_t v22 = YieldedValues;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v27 = v11;
  do
  {
    if (v60 == v19 && v25 == v12) {
      break;
    }
    if (v62 == v22 && v24 == v49) {
      break;
    }
    uint64_t v30 = v27[4 * v23 + 3];
    uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v60, v25);
    uint64_t v32 = mlir::ValueRange::dereference_iterator(&v62, v63);
    uint64_t v33 = v32;
    if (*v17 == v32) {
      goto LABEL_41;
    }
    if (!*(void *)*v17)
    {
      if (v30 == v32)
      {
LABEL_41:
        BOOL v34 = 1;
        uint64_t v35 = v54;
        unint64_t v36 = v54 + 1;
        if ((unint64_t)(v54 + 1) <= *((void *)&v54 + 1)) {
          goto LABEL_42;
        }
      }
      else
      {
        BOOL v34 = *NextResultAtOffset == 0;
        uint64_t v35 = v54;
        unint64_t v36 = v54 + 1;
        if ((unint64_t)(v54 + 1) <= *((void *)&v54 + 1)) {
          goto LABEL_42;
        }
      }
LABEL_37:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v53, &v55, v36, 1);
      uint64_t v35 = v54;
      goto LABEL_42;
    }
    BOOL v34 = 0;
    uint64_t v35 = v54;
    unint64_t v36 = v54 + 1;
    if ((unint64_t)(v54 + 1) > *((void *)&v54 + 1)) {
      goto LABEL_37;
    }
LABEL_42:
    *((unsigned char *)v53 + v35) = !v34;
    *(void *)&long long v54 = v54 + 1;
    if (v34)
    {
      uint64_t v37 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v75, v74 + 1, 8);
        uint64_t v37 = v74;
      }
      v73[v37] = v30;
    }
    else
    {
      uint64_t v38 = v71;
      if (v71 >= (unint64_t)HIDWORD(v71))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v71 + 1, 8);
        uint64_t v38 = v71;
      }
      v70[v38] = v30;
      LODWORD(v71) = v71 + 1;
      uint64_t v39 = v68;
      if (v68 >= (unint64_t)HIDWORD(v68))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v68 + 1, 8);
        uint64_t v39 = v68;
      }
      v67[v39] = v33;
      LODWORD(v68) = v68 + 1;
      uint64_t v40 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v75, v74 + 1, 8);
        uint64_t v40 = v74;
      }
      uint64_t v30 = 0;
      v73[v40] = 0;
    }
    LODWORD(v74) = v74 + 1;
    uint64_t v41 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
      uint64_t v41 = v65;
    }
    v26 |= v34;
    *((void *)v64 + v41) = v30;
    LODWORD(v65) = v65 + 1;
    uint64_t v27 = v57;
    uint64_t v23 = v58 + 1;
    unint64_t v17 = (void *)(v59 + 8);
    uint64_t v58 = v23;
    v59 += 8;
    uint64_t v25 = v61 + 1;
    uint64_t v24 = v63 + 1;
    ++v61;
    ++v63;
    BOOL v42 = v23 == v10 && v57 == v50;
  }
  while (!v42 && v17 != v16);
  if (v26)
  {
    uint64_t v45 = *((void *)v56 + 3);
    uint64_t v46 = *((void *)v56 + 9);
    unint64_t v57 = *(void **)(v46 + 24);
    uint64_t v47 = *(void *)(v46 + 56);
    uint64_t v51 = *(void *)(v46 + 88);
    uint64_t v52 = v47;
    mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(v48 + 8, v45, (uint64_t *)&v57, &v52, &v51, (uint64_t)&v70);
  }
  uint64_t v43 = v64;
  if (v64 != v66) {
LABEL_62:
  }
    free(v43);
LABEL_63:
  if (v67 != (void *)v69) {
    free(v67);
  }
  if (v70 != (void *)v72) {
    free(v70);
  }
  if (v73 != v75) {
    free(v73);
  }
  if (v53 != &v55) {
    free(v53);
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (v14)
  {
    mlir::OperationState::OperationState(v24, a2, v13);
    uint64_t v15 = *a3;
    uint64_t v16 = *a4;
    uint64_t v17 = *a5;
    mlir::ValueRange::ValueRange(v23, *(void *)a6, *(unsigned int *)(a6 + 8));
    mlir::scf::ForOp::build(a1, (uint64_t)v24, v15, v16, v17, v23[0], v23[1]);
  }
  __int16 v22 = 1283;
  v21[2] = (uint64_t)"scf.for";
  unint64_t v21[3] = 7;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v20 = 259;
  llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v24);
  llvm::report_fatal_error((llvm::Twine *)v24, 1);
}

void anonymous namespace'::SimplifyTrivialLoops::~SimplifyTrivialLoops(_anonymous_namespace_::SimplifyTrivialLoops *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SimplifyTrivialLoops::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v58 = (mlir::Operation *)a2;
  uint64_t v5 = *(void *)(a2 + 72);
  unint64_t v6 = *(void ***)(v5 + 24);
  uint64_t v7 = *(void ***)(v5 + 56);
  if (v6 == v7)
  {
    mlir::ValueRange::ValueRange(v69, v5 + 96, *(unsigned int *)(a2 + 68) - 3);
    unint64_t v23 = v69[0];
    unint64_t v24 = v69[1];
LABEL_52:
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v23, v24);
    return 1;
  }
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v55 = v6;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
  if (DefiningOp)
  {
    uint64_t v9 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
    {
      uint64_t v65 = v67;
      uint64_t v66 = 0x100000000;
      mlir::Operation::fold(v9, 0, 0, (uint64_t)&v65);
      BOOL v10 = *(_UNKNOWN **)(*(void *)(*(void *)v65 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
         || (*(void *)v65 & 0xFFFFFFFFFFFFFFF8) == 0;
      if (!v10) {
        unint64_t v62 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v65 != v67) {
        free(v65);
      }
      if (!v10)
      {
        uint64_t v55 = v7;
        uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
        if (v11)
        {
          uint64_t v12 = v11;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v11 + 48)))
          {
            uint64_t v65 = v67;
            uint64_t v66 = 0x100000000;
            mlir::Operation::fold(v12, 0, 0, (uint64_t)&v65);
            BOOL v13 = *(_UNKNOWN **)(*(void *)(*(void *)v65 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
               || (*(void *)v65 & 0xFFFFFFFFFFFFFFF8) == 0;
            if (!v13) {
              unint64_t v61 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
            }
            if (v65 != v67) {
              free(v65);
            }
            if (!v13)
            {
              mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v65);
              mlir::IntegerAttr::getValue((uint64_t)&v61, (llvm::APInt *)&v55);
              LODWORD(v71) = v56;
              if (v56 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v70, (const llvm::APInt *)&v55);
              }
              unint64_t v70 = (uint64_t *)v55;
              llvm::APInt::operator-=((uint64_t)&v70, (void **)&v65);
              unsigned int v51 = v71;
              LODWORD(v71) = 0;
              if (v51 > 0x40)
              {
                uint64_t v25 = *v70;
                if (v70)
                {
                  MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                  if (v71 >= 0x41)
                  {
                    if (v70) {
                      MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                    }
                  }
                }
              }
              else
              {
                uint64_t v25 = (uint64_t)((void)v70 << -(char)v51) >> -(char)v51;
              }
              if (v56 >= 0x41 && v55) {
                MEMORY[0x21667D390](v55, 0x1000C8000313F17);
              }
              if (v66 >= 0x41 && v65) {
                MEMORY[0x21667D390](v65, 0x1000C8000313F17);
              }
              goto LABEL_44;
            }
          }
        }
      }
    }
  }
  LODWORD(v66) = 1;
  uint64_t v65 = 0;
  uint64_t v55 = v6;
  uint64_t v56 = &v65;
  uint64_t v59 = v7;
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (v14)
  {
    if (*(_UNKNOWN **)(*(void *)(v14 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id
      && (*(unsigned char *)(v14 + 46) & 0x80) != 0
      && *(_DWORD *)(v14 + 68) == 2)
    {
      uint64_t v15 = *(void ***)(*(void *)(v14 + 72) + 24);
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v14, 1u, (uint64_t *)&v56))
      {
        if (v15 == v6) {
          goto LABEL_34;
        }
      }
    }
  }
  uint64_t v59 = &v65;
  long long v60 = v6;
  uint64_t v63 = v7;
  uint64_t v16 = mlir::Value::getDefiningOp((mlir::Value *)&v63);
  if (v16
    && (uint64_t v17 = v16,
        *(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    && (*(unsigned char *)(v16 + 46) & 0x80) != 0
    && *(_DWORD *)(v16 + 68) == 2)
  {
    LOBYTE(v18) = 0;
    char v19 = 1;
    if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v16, 0, (uint64_t *)&v59))
    {
      __int16 v20 = *(void ***)(*(void *)(v17 + 72) + 56);
      unint64_t v21 = 0;
      if (v60 == v20)
      {
LABEL_34:
        if (v66 > 0x40) {
          uint64_t v18 = *(void *)v65;
        }
        else {
          uint64_t v18 = (uint64_t)((void)v65 << -(uint64_t)v66) >> -(uint64_t)v66;
        }
        char v19 = 0;
        unint64_t v21 = v18 & 0xFFFFFFFFFFFFFF00;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
  }
  else
  {
    LOBYTE(v18) = 0;
    unint64_t v21 = 0;
    char v19 = 1;
  }
  if (v66 >= 0x41 && v65) {
    MEMORY[0x21667D390](v65, 0x1000C8000313F17);
  }
  if (v19) {
    return 0;
  }
  uint64_t v25 = v21 | v18;
LABEL_44:
  if (v25 <= 0)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v26 = *(void *)(a2 + 72);
      unint64_t v27 = *(unsigned int *)(a2 + 68) - 3;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = -3;
    }
    mlir::ValueRange::ValueRange(v68, v26 + 96, v27);
    unint64_t v23 = v68[0];
    unint64_t v24 = v68[1];
    goto LABEL_52;
  }
  mlir::scf::ForOp::getConstantStep((mlir::scf::ForOp *)&v58, (uint64_t)&v55);
  if (!v57) {
    return 0;
  }
  LODWORD(v60) = v56;
  if (v56 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const llvm::APInt *)&v55);
  }
  uint64_t v59 = v55;
  if ((uint64_t)((void)v55 << -(char)v56) >> -(char)v56 >= v25)
  {
    uint64_t v65 = v67;
    uint64_t v66 = 0x400000000;
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      unint64_t v35 = *(unsigned int *)(a2 + 68) - 2;
      if (v35 <= 4)
      {
        unsigned int v36 = 0;
        uint64_t v37 = *(void *)(*(void *)(a2 + 72) + 24);
        goto LABEL_72;
      }
    }
    else
    {
      unint64_t v35 = -2;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v35, 8);
    unsigned int v36 = v66;
    uint64_t v37 = *(void *)(*(void *)(a2 + 72) + 24);
    if (v66 >= HIDWORD(v66))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v66 + 1, 8);
      unsigned int v36 = v66;
    }
LABEL_72:
    *((void *)v65 + v36) = v37;
    unsigned int v38 = v66 + 1;
    LODWORD(v66) = v66 + 1;
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v39 = *(void *)(a2 + 72);
      uint64_t v40 = *(unsigned int *)(a2 + 68) - 3;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = -3;
    }
    llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v65, (uint64_t)v65 + 8 * v38, v39 + 96, 0, v39 + 96, v40);
    unint64_t v41 = *(unsigned int *)(a2 + 44);
    if ((v41 & 0x7FFFFF) != 0) {
      unint64_t v42 = ((a2 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(a2 + 40);
    else {
      unint64_t v42 = 0;
    }
    mlir::ValueRange::ValueRange(v64, (uint64_t)v65, v66);
    uint64_t v43 = v64[0];
    uint64_t v44 = v64[1];
    uint64_t v45 = *(void *)(v42 + 8);
    if (v45) {
      uint64_t v46 = (ZinIrHalH13g **)(v45 - 8);
    }
    else {
      uint64_t v46 = 0;
    }
    mlir::Block::getTerminator(v46);
    uint64_t v48 = v47;
    if ((*(unsigned char *)(v47 + 46) & 0x80) != 0)
    {
      uint64_t v49 = *(void *)(v47 + 72);
      unint64_t v50 = *(unsigned int *)(v47 + 68);
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0;
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v70, v49, v50);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v46, a2, v43, v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 24))(a3, a2, v70, v71);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v48);
    if (v65 != v67) {
      free(v65);
    }
    uint64_t v22 = 1;
    if (v60 < 0x41) {
      goto LABEL_87;
    }
    goto LABEL_85;
  }
  uint64_t v29 = *(void *)(((a2
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  uint64_t v30 = v29 - 8;
  if (!v29) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = v30 + 32;
  uint64_t v32 = *(void *)(v30 + 40);
  if (v32 != v31 && *(void *)(v32 + 8) == v31)
  {
    unint64_t YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v58);
    {
      uint64_t v52 = v58;
      unint64_t v53 = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v58);
      (*(void (**)(uint64_t, mlir::Operation *, unint64_t, uint64_t))(*(void *)a3 + 24))(a3, v52, v53, v54);
      uint64_t v22 = 1;
      if (v60 < 0x41) {
        goto LABEL_87;
      }
LABEL_85:
      if (v59) {
        MEMORY[0x21667D390](v59, 0x1000C8000313F17);
      }
      goto LABEL_87;
    }
  }
  uint64_t v22 = 0;
  if (v60 >= 0x41) {
    goto LABEL_85;
  }
LABEL_87:
  if (v57 && v56 >= 0x41 && v55) {
    MEMORY[0x21667D390](v55, 0x1000C8000313F17);
  }
  return v22;
}

mlir::Block *llvm::any_of<mlir::ValueRange,anonymous namespace'::SimplifyTrivialLoops::matchAndRewrite(mlir::scf::ForOp,mlir::PatternRewriter &)::{lambda(mlir::Value)#1}>(uint64_t a1, uint64_t a2, mlir::Operation **a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = mlir::ValueRange::dereference_iterator(&v12, v6);
    unint64_t v8 = *a3;
    uint64_t v11 = v7;
    uint64_t v9 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v11) + 2);
    if (v9 == v8) {
      break;
    }
    double result = mlir::Operation::isProperAncestor(v8, v9);
    if ((result & 1) == 0)
    {
      uint64_t v6 = ++v13;
      if (v12 != a1 || v6 != a2) {
        continue;
      }
    }
    return result;
  }
  return (mlir::Block *)1;
}

void anonymous namespace'::LastTensorLoadCanonicalization::~LastTensorLoadCanonicalization(_anonymous_namespace_::LastTensorLoadCanonicalization *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

void anonymous namespace'::LastTensorLoadCanonicalization::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2 + 64;
  uint64_t v4 = *(unsigned int *)(a2 + 40);
  unint64_t v5 = a2
     + 64
     + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
     + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8);
  uint64_t v64 = *(void *)(a2 + 24);
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unsigned int v70 = 0;
  uint64_t v6 = *(void *)(((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v4 + 8);
  uint64_t v7 = v6 - 8;
  if (!v6) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 56) - v8;
  if (v9 == 8) {
LABEL_88:
  }
    llvm::deallocate_buffer(v68, (void *)(16 * v70));
  uint64_t v12 = (uint64_t *)(v8 + 8);
  uint64_t v13 = a3 + 1;
  uint64_t v63 = a2 - 96;
  uint64_t v14 = 8 * (v9 >> 3) - 8;
  while (1)
  {
    uint64_t v15 = *v12;
    uint64_t v16 = (*(_DWORD *)(*v12 + 24) - 1);
    uint64_t v17 = *(void *)(((v3
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v17) {
      uint64_t v18 = (ZinIrHalH13g **)(v17 - 8);
    }
    else {
      uint64_t v18 = 0;
    }
    mlir::Block::getTerminator(v18);
    uint64_t v20 = v19;
    uint64_t NextResultAtOffset = *(void *)(*(void *)(v19 + 72) + 32 * v16 + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToTensorOp,void>::id) {
        uint64_t v22 = DefiningOp;
      }
      else {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v66 = v22;
    unint64_t v23 = *(void **)(*(void *)(*(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    BOOL v25 = v23 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v23 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    uint64_t v65 = 0;
    uint64_t v26 = *(void **)v15;
    if (*(void *)v15)
    {
      if (!*v26)
      {
        uint64_t v26 = (void *)v26[2];
        if (*(_UNKNOWN **)(v26[6] + 16) != &mlir::detail::TypeIDResolver<mlir::bufferization::ToMemrefOp,void>::id) {
          uint64_t v26 = 0;
        }
        uint64_t v65 = v26;
        if (!v22) {
          BOOL v25 = 0;
        }
        if (!v25) {
          goto LABEL_6;
        }
        goto LABEL_27;
      }
      uint64_t v26 = 0;
    }
    if (!v22) {
      BOOL v25 = 0;
    }
    if (!v25) {
      goto LABEL_6;
    }
LABEL_27:
    if (*(void *)v15)
    {
      if (!v26) {
        goto LABEL_6;
      }
    }
    else if (!v26)
    {
      goto LABEL_39;
    }
    uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v66);
    if (v65 - 2 != (void *)Input) {
      goto LABEL_6;
    }
    uint64_t v22 = v66;
LABEL_39:
    uint64_t v28 = *(ZinIrHalH13g **)(v22 + 8);
    if (v28 == (ZinIrHalH13g *)(*(void *)(v22 + 16) + 32))
    {
      if (!v20)
      {
LABEL_43:
        if (v65)
        {
          uint64_t v30 = *(mlir::UnitAttr **)(a2 + 16);
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a2);
          a3[3] = v30;
          a3[4] = v31;
          uint64_t v32 = v65;
          uint64_t v72 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v65) + 8) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v75 = (void **)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v65);
          uint64_t v33 = mlir::OpBuilder::create<mlir::bufferization::ToMemrefOp,mlir::BaseMemRefType,mlir::detail::TypedValue<mlir::TensorType>>(v13, v32[3], (uint64_t *)&v72, (uint64_t *)&v75);
          (*((void (**)(mlir::UnitAttr **, void *, ZinIrHalH13g *))*a3 + 4))(a3, v32, v33);
        }
        uint64_t v34 = *(mlir::UnitAttr **)(a2 + 16);
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a2);
        unsigned int v36 = *(mlir::UnitAttr **)(v35 + 8);
        a3[3] = v34;
        a3[4] = v36;
        uint64_t v72 = (void *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v66);
        uint64_t v37 = mlir::OpBuilder::create<mlir::bufferization::ToTensorOp,mlir::detail::TypedValue<mlir::BaseMemRefType>>(v13, v64, (uint64_t *)&v72);
        uint64_t v38 = *(void *)(v15 + 24);
        unsigned int v39 = v38 - 1;
        uint64_t v40 = (void *)(a2 - 16 * v38);
        unint64_t v41 = (void *)(v63 - 24 * (v38 - 6));
        if (v39 < 6) {
          unint64_t v41 = v40;
        }
        uint64_t v72 = v41;
        uint64_t v73 = (uint64_t)v37 - 16;
        uint64_t v75 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v68, (unint64_t *)&v72, &v75) & 1) == 0)
        {
          unint64_t v42 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)&v68, (uint64_t)&v72, (unint64_t *)&v72, v75);
          *unint64_t v42 = v72;
          v42[1] = v73;
        }
        (*((void (**)(mlir::UnitAttr **, uint64_t))*a3 + 9))(a3, v20);
        uint64_t v43 = (void *)(*(void *)(v20 + 72) + 32 * v16);
        uint64_t v44 = (void *)v43[1];
        if (v44)
        {
          *uint64_t v44 = *v43;
          if (*v43) {
            *(void *)(*v43 + 8) = v43[1];
          }
        }
        unint64_t v43[3] = v15;
        v43[1] = v15;
        uint64_t v45 = *(void **)v15;
        *uint64_t v43 = *(void *)v15;
        if (v45) {
          v45[1] = v43;
        }
        *(void *)uint64_t v15 = v43;
        (*((void (**)(mlir::UnitAttr **, uint64_t))*a3 + 10))(a3, v20);
      }
    }
    else
    {
      ZinIrHalH13g::~ZinIrHalH13g(v28);
      if (v29 == v20) {
        goto LABEL_43;
      }
    }
LABEL_6:
    ++v12;
    v14 -= 8;
    if (!v14)
    {
      if (v69)
      {
        uint64_t v72 = v74;
        uint64_t v73 = 0x600000000;
        unint64_t v46 = *(unsigned int *)(a2 + 36);
        if (v46 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v46, 8);
          LODWORD(v46) = *(_DWORD *)(a2 + 36);
        }
        if (v46) {
          uint64_t v47 = a2 - 16;
        }
        else {
          uint64_t v47 = 0;
        }
        if (v46)
        {
          uint64_t v48 = 0;
          uint64_t v49 = v46;
          do
          {
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v48);
            uint64_t v75 = 0;
            int v50 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v68, (unint64_t *)&NextResultAtOffset, &v75);
            unsigned int v51 = (llvm *)v75;
            if (!v50) {
              unsigned int v51 = (llvm *)((char *)v68 + 16 * v70);
            }
            if (v51 == (llvm *)((char *)v68 + 16 * v70)) {
              p_uint64_t NextResultAtOffset = &NextResultAtOffset;
            }
            else {
              p_uint64_t NextResultAtOffset = (uint64_t *)((char *)v51 + 8);
            }
            uint64_t v53 = *p_NextResultAtOffset;
            uint64_t v54 = v73;
            if (v73 >= (unint64_t)HIDWORD(v73))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v73 + 1, 8);
              uint64_t v54 = v73;
            }
            *((void *)v72 + v54) = v53;
            unsigned int v55 = v73 + 1;
            LODWORD(v73) = v73 + 1;
            ++v48;
          }
          while (v49 != v48);
        }
        else
        {
          unsigned int v55 = v73;
        }
        LODWORD(NextResultAtOffset) = 0;
        mlir::ValueRange::ValueRange(v71, (uint64_t)v72, v55);
            + 2;
            + 2 > 7;
           + 2 >= 8)
        {
          BOOL v56 = 0;
          uint64_t v75 = &v72;
          uint64_t v76 = &NextResultAtOffset;
        }
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t, void, void ***))*a3
         + 2))(a3, a2, v71[0], v71[1], 0, &v75);
        char v61 = v77;
        if (v77 >= 8)
        {
          if ((v77 & 4) != 0)
          {
            if ((v77 & 2) != 0) {
              unint64_t v62 = &v75;
            }
            else {
              unint64_t v62 = (void ***)v75;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v62, v57, v58, v59, v60);
          }
          if ((v61 & 2) == 0) {
            llvm::deallocate_buffer((llvm *)v75, v76);
          }
        }
        if (v56
           + 2 >= 8)
        {
          llvm::deallocate_buffer((llvm *)&v72, &NextResultAtOffset);
        }
        if (v72 != v74) {
          free(v72);
        }
      }
      goto LABEL_88;
    }
  }
}

uint64_t sub_21186036C()
{
  return v0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::bufferization::ToTensorOp,mlir::detail::TypedValue<mlir::BaseMemRefType>>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"bufferization.to_tensor", (const unsigned __int8 *)0x17, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"bufferization.to_tensor";
    _OWORD v15[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::bufferization::ToTensorOp::build(a1, (uint64_t)v17, *a3, 0, 0);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToTensorOp,void>::id) {
    BOOL v10 = v9;
  }
  else {
    BOOL v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::bufferization::ToMemrefOp,mlir::BaseMemRefType,mlir::detail::TypedValue<mlir::TensorType>>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"bufferization.to_memref", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"bufferization.to_memref";
    unint64_t v17[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::bufferization::ToMemrefOp::build(a1, (uint64_t)v19, *a3, *a4, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToMemrefOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::OpOperand &>::CallImpl<anonymous namespace'::LastTensorLoadCanonicalization::matchAndRewrite(mlir::scf::ForOp,mlir::PatternRewriter &)::{lambda(mlir::OpOperand &)#1} const>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = **a1;
  uint64_t v5 = *(unsigned int *)v2;
  *(_DWORD *)uint64_t v2 = v5 + 1;
  return *(void *)(v4 + 8 * v5) != v3;
}

void anonymous namespace'::ForOpTensorCastFolder::~ForOpTensorCastFolder(_anonymous_namespace_::ForOpTensorCastFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ForOpTensorCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v60[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    int v5 = *(_DWORD *)(a2 + 68) - 3;
  }
  else {
    int v5 = -3;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v57, a2, 3, v5, 0, 0);
  uint64_t v6 = *(unsigned int *)(a2 + 36);
  if (v6) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v48 = v57;
  v49[0] = v50;
  v49[1] = (void *)0x100000000;
  if (v59) {
    llvm::SmallVectorImpl<std::pair<unsigned int,mlir::NamedAttribute>>::operator=((uint64_t)v49, (uint64_t *)&v58);
  }
  uint64_t v51 = v7;
  uint64_t v52 = v6;
  if (v58 != v60) {
    free(v58);
  }
  unint64_t v8 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)&v48);
  uint64_t v9 = v51;
  uint64_t v10 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)&v48);
  if (v8 != v10)
  {
    uint64_t v11 = v10;
    if (v9 == v51)
    {
      uint64_t v45 = a3;
      uint64_t v21 = 0;
      uint64_t v22 = v52;
      while (1)
      {
        if (v22 == v21) {
          goto LABEL_50;
        }
        uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v21);
        *(void *)&long long v57 = *(void *)(v8 + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57);
        if (DefiningOp)
        {
          BOOL v25 = *(void **)(*(void *)(DefiningOp + 48) + 16);
          BOOL v26 = v25 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
          uint64_t v27 = v25 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? DefiningOp : 0;
          v46[0] = v27;
          if (v26)
          {
            uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v46);
            if ((*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v46[0] - 8) & 0xFFFFFFFFFFFFFFF8))
            {
              unint64_t v29 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v46) + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v30 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v46);
              if (mlir::tensor::preservesStaticInformation(v29, *(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8))
              {
                if (*NextResultAtOffset && !*(void *)*NextResultAtOffset) {
                  break;
                }
              }
            }
          }
        }
        v8 += 32;
        ++v21;
        if (v8 == v11) {
          goto LABEL_50;
        }
      }
      a3 = v45;
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12);
        *(void *)&long long v57 = *(void *)(v8 + 24);
        uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&v57);
        if (v14)
        {
          uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16);
          BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
          uint64_t v17 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? v14 : 0;
          v46[0] = v17;
          if (v16)
          {
            uint64_t v18 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v46);
            if ((*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v46[0] - 8) & 0xFFFFFFFFFFFFFFF8))
            {
              unint64_t v19 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v46) + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v20 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v46);
              if (mlir::tensor::preservesStaticInformation(v19, *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8))
              {
                if (*v13 && !*(void *)*v13) {
                  break;
                }
              }
            }
          }
        }
        v8 += 32;
        ++v12;
        if (v8 == v11) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v31 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v46);
    uint64_t v32 = *(void *)(v8 + 16);
    unint64_t v33 = *(void *)(*(void *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    void v46[3] = *(void *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8;
    v46[4] = v33;
    *(void *)&long long v57 = &v58;
    *((void *)&v57 + 1) = 0x600000000;
    if ((*(unsigned char *)(v32 + 46) & 0x80) != 0) {
      int v34 = *(_DWORD *)(v32 + 68) - 3;
    }
    else {
      int v34 = -3;
    }
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v53, v32, 3, v34, 0, 0);
    unint64_t v35 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)&v53);
    uint64_t v36 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)&v53);
    if (v35 != v36)
    {
      uint64_t v37 = v36;
      do
      {
        int OperandNumber = mlir::OpOperand::getOperandNumber(v35);
        if (OperandNumber == mlir::OpOperand::getOperandNumber(v8))
        {
          unint64_t v39 = DWORD2(v57);
          unint64_t v40 = HIDWORD(v57);
          uint64_t v41 = v31;
        }
        else
        {
          uint64_t v41 = *(void *)(v35 + 24);
          unint64_t v39 = DWORD2(v57);
          unint64_t v40 = HIDWORD(v57);
        }
        if (v39 >= v40)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, &v58, v39 + 1, 8);
          unint64_t v39 = DWORD2(v57);
        }
        *(void *)(v57 + 8 * v39) = v41;
        ++DWORD2(v57);
        v35 += 32;
      }
      while (v35 != v37);
    }
    if (v54 != &v55) {
      free(v54);
    }
    uint64_t v43 = *(void *)(v32 + 24);
    uint64_t v44 = *(void *)(v32 + 72);
    uint64_t v53 = *(void **)(v44 + 24);
    uint64_t v47 = *(void **)(v44 + 56);
    uint64_t v56 = *(void *)(v44 + 88);
    mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(a3 + 8, v43, (uint64_t *)&v53, (uint64_t *)&v47, &v56, (uint64_t)&v57);
  }
LABEL_50:
  if (v49[0] != v50) {
    free(v49[0]);
  }
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getTiedLoopRegionIterArg(uint64_t *a1, uint64_t a2)
{
  unint64_t v19[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0) {
    int v5 = *(_DWORD *)(v4 + 68) - 3;
  }
  else {
    int v5 = -3;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v17, v4, 3, v5, 0, 0);
  uint64_t v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v17);
  uint64_t v8 = v7;
  if (v18 != v19) {
    free(v18);
  }
  uint64_t v9 = -32;
  uint64_t v10 = 32 * v8;
  do
  {
    v9 += 32;
    if (!v10) {
      break;
    }
    v10 -= 32;
    BOOL v11 = v6 == a2;
    v6 += 32;
  }
  while (!v11);
  uint64_t v12 = v9 >> 5;
  if (v12 == v8) {
    return 0;
  }
  uint64_t v14 = 32 * v12;
  uint64_t v15 = *(void *)(((*a1
                    + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*a1 + 40)
                  + 8);
  if (v15) {
    uint64_t v16 = v15 - 8;
  }
  else {
    uint64_t v16 = 0;
  }
  return *(void *)(*(void *)(v16 + 48) + (v14 >> 2) + 8);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"tensor.cast";
    unint64_t v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  BOOL v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v20 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DeviceMappingAttrInterface]";
      unint64_t v22 = 82;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::DeviceMappingAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[168];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::raw_ostream *a6, uint64_t a7)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v18 = result;
  uint64_t v19 = a2;
  if (result != a3 || a2 != a4)
  {
    while (1)
    {
      uint64_t v12 = mlir::ValueRange::dereference_iterator(&v18, a2);
      double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 160))(a5, v12);
      uint64_t v13 = ++v19;
      if (v18 == a3 && v13 == a4) {
        break;
      }
      uint64_t v15 = *(const char **)a7;
      unint64_t v16 = *(void *)(a7 + 8);
      uint64_t v17 = (void *)*((void *)a6 + 4);
      if (v16 > *((void *)a6 + 3) - (void)v17)
      {
        llvm::raw_ostream::write(a6, v15, *(void *)(a7 + 8));
        a2 = v19;
      }
      else
      {
        if (v16)
        {
          memcpy(v17, v15, *(void *)(a7 + 8));
          *((void *)a6 + 4) += v16;
        }
        a2 = v19;
      }
    }
  }
  return result;
}

void mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v2[40] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v2, a2, (uint64_t)"scf.forall.in_parallel", 22);
  mlir::OperationState::addRegion((mlir::OperationState *)v2);
}

void anonymous namespace'::DimOfForallOp::~DimOfForallOp(_anonymous_namespace_::DimOfForallOp *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::DimOfForallOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (result)
  {
    uint64_t v5 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    {
      uint64_t v6 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v18);
      if (HIBYTE(*(_DWORD *)(v5 + 44))) {
        uint64_t v7 = (_DWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1) + 64);
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = v7[8];
      int v9 = v7[9];
      int v10 = v7[10];
      if (v6 && (*(void *)(v6 + 8) & 7) == 6) {
        int v11 = *(_DWORD *)(v6 + 16) + 6;
      }
      else {
        int v11 = *(void *)(v6 + 8) & 7;
      }
      uint64_t v12 = *(uint64_t **)(*(void *)(v5 + 72) + 32 * (v9 + v8 + v10 + v11) + 24);
      uint64_t v13 = v18;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v18);
      SourceMutable = (uint64_t *)mlir::tensor::DimOp::getSourceMutable((mlir::tensor::DimOp *)&v18);
      uint64_t v15 = (uint64_t *)SourceMutable[1];
      if (v15)
      {
        *uint64_t v15 = *SourceMutable;
        if (*SourceMutable) {
          *(void *)(*SourceMutable + 8) = SourceMutable[1];
        }
      }
      SourceMutable[3] = (uint64_t)v12;
      SourceMutable[1] = (uint64_t)v12;
      uint64_t v16 = *v12;
      uint64_t *SourceMutable = *v12;
      if (v16) {
        *(void *)(v16 + 8) = SourceMutable;
      }
      *uint64_t v12 = (uint64_t)SourceMutable;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v13);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::~FoldTensorCastOfOutputIntoForallOp(_anonymous_namespace_::FoldTensorCastOfOutputIntoForallOp *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v75 = a2;
  uint64_t v88 = 1;
  LODWORD(v89) = -1;
  unsigned int v90 = -1;
  uint64_t v91 = v93;
  uint64_t v92 = 0x200000000;
  unint64_t v3 = *(unsigned int *)(a2 + 44);
  uint64_t v4 = (_DWORD *)(a2 + 16 * ((v3 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v4 = 0;
  }
  int v5 = v4[8];
  int v6 = v4[9];
  int v8 = v4[10];
  int v7 = v4[11];
  if ((v3 & 0x800000) != 0) {
    uint64_t v9 = *(void *)(a2 + 72);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (v6 + v5 + v8);
  uint64_t v11 = (v7 + v10);
  unint64_t v12 = v11 - v10;
  unsigned long long v85 = (mlir::Value *)v87;
  uint64_t v86 = 0x600000000;
  if ((unint64_t)(v11 - v10) >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v11 - v10, 8);
    uint64_t v13 = v86;
    unint64_t v14 = v85;
    uint64_t v15 = (char *)v85 + 8 * v86;
    if (v12 < 0x13) {
      goto LABEL_20;
    }
LABEL_10:
    uint64_t v16 = v9 + 32 * v10;
    BOOL v17 = (unint64_t)v15 >= v9 + 32 * v11 || v16 + 24 >= (unint64_t)v14 + 8 * (v13 + v11 - v10);
    if (v17)
    {
      uint64_t v18 = 4;
      if ((v12 & 3) != 0) {
        uint64_t v18 = v12 & 3;
      }
      unint64_t v19 = v12 - v18;
      v15 += 8 * (v12 - v18);
      uint64_t v20 = (const double *)(v16 + 88);
      uint64_t v21 = (unsigned long long *)((char *)v14 + 8 * v13 + 16);
      uint64_t v22 = v18 + v10 - v11;
      do
      {
        unint64_t v23 = v20 - 8;
        unsigned long long v24 = (unsigned __int128)vld4q_f64(v23);
        unsigned long long v25 = (unsigned __int128)vld4q_f64(v20);
        *(v21 - 1) = v24;
        unsigned long long *v21 = v25;
        v20 += 16;
        v21 += 2;
        v22 += 4;
      }
      while (v22);
LABEL_21:
      uint64_t v26 = v19 + v10 - v11;
      uint64_t v27 = (uint64_t *)(32 * v19 + 32 * v10 + v9 + 24);
      do
      {
        uint64_t v28 = *v27;
        v27 += 4;
        *(void *)uint64_t v15 = v28;
        v15 += 8;
        BOOL v17 = __CFADD__(v26++, 1);
      }
      while (!v17);
      unint64_t v29 = v85;
      unsigned int v30 = v86 + v12;
      LODWORD(v86) = v86 + v12;
      if (v86) {
        goto LABEL_25;
      }
      goto LABEL_62;
    }
LABEL_20:
    unint64_t v19 = 0;
    goto LABEL_21;
  }
  if (v7)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (mlir::Value *)v87;
    uint64_t v15 = v87;
    if (v12 < 0x13) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  unint64_t v29 = (mlir::Value *)v87;
  unsigned int v30 = v12;
  LODWORD(v86) = v12;
  if (v12)
  {
LABEL_25:
    uint64_t v31 = 0;
    uint64_t v32 = (mlir::Value *)((char *)v29 + 8 * v30);
    do
    {
      uint64_t DefiningOp = mlir::Value::getDefiningOp(v29);
      if (!DefiningOp) {
        goto LABEL_30;
      }
      uint64_t v43 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v44 = v43 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
      uint64_t v45 = v43 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? (void *)DefiningOp : 0;
      uint64_t v81 = v45;
      if (!v44) {
        goto LABEL_30;
      }
      unint64_t v46 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v81) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v81);
      if (!mlir::tensor::preservesStaticInformation(v46, *(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_30;
      }
      uint64_t v48 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v81) + 8);
      uint64_t v49 = *((void *)v81 - 1);
      unint64_t v83 = (void *)v31;
      if (v88)
      {
        int v33 = 2;
        int v34 = &v89;
      }
      else
      {
        int v33 = v90;
        if (!v90)
        {
          int v50 = 0;
LABEL_42:
          uint64_t inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucket<unsigned int const&,unsigned int const&>((uint64_t)&v88, v50, &v83, (_DWORD *)&v83 + 1);
          v94[1] = 0;
          v94[2] = 0;
          LODWORD(v94[0]) = v31;
          uint64_t v52 = (char *)v91;
          if (v92 >= HIDWORD(v92))
          {
            unint64_t v60 = v92 + 1;
            if (v91 <= v94 && (char *)v91 + 24 * v92 > (char *)v94)
            {
              int64_t v73 = (char *)v94 - (unsigned char *)v91;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v60, 24);
              uint64_t v52 = (char *)v91;
              uint64_t v53 = (void **)((char *)v91 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v60, 24);
              uint64_t v53 = v94;
              uint64_t v52 = (char *)v91;
            }
          }
          else
          {
            uint64_t v53 = v94;
          }
          uint64_t v54 = &v52[24 * v92];
          long long v55 = *(_OWORD *)v53;
          *((void *)v54 + 2) = v53[2];
          *(_OWORD *)uint64_t v54 = v55;
          unsigned int v39 = v92;
          LODWORD(v92) = v92 + 1;
          inserted[1] = v39;
          goto LABEL_29;
        }
        int v34 = v89;
      }
      int v35 = v33 - 1;
      uint64_t v36 = (v33 - 1) & (37 * v31);
      uint64_t v37 = &v34[2 * v36];
      int v38 = *v37;
      if (*v37 != v31)
      {
        uint64_t v56 = 0;
        int v57 = 1;
        while (v38 != -1)
        {
          if (v56) {
            BOOL v58 = 0;
          }
          else {
            BOOL v58 = v38 == -2;
          }
          if (v58) {
            uint64_t v56 = v37;
          }
          int v59 = v36 + v57++;
          uint64_t v36 = v59 & v35;
          uint64_t v37 = &v34[2 * v36];
          int v38 = *v37;
          if (*v37 == v31) {
            goto LABEL_28;
          }
        }
        if (v56) {
          int v50 = v56;
        }
        else {
          int v50 = v37;
        }
        goto LABEL_42;
      }
LABEL_28:
      unsigned int v39 = v34[2 * v36 + 1];
LABEL_29:
      unint64_t v40 = (char *)v91 + 24 * v39;
      *((void *)v40 + 1) = v48 & 0xFFFFFFFFFFFFFFF8;
      *((void *)v40 + 2) = v49 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v81);
      *((void *)v85 + v31) = v41;
LABEL_30:
      ++v31;
      unint64_t v29 = (mlir::Value *)((char *)v29 + 8);
    }
    while (v29 != v32);
  }
LABEL_62:
  if (v92)
  {
    uint64_t v61 = *(void *)(v75 + 24);
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v75, (uint64_t)&v83);
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v75, (uint64_t)&v81);
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v75, (uint64_t)&v79);
    uint64_t v62 = *(void *)(v75 + 16 * (((unint64_t)*(unsigned int *)(v75 + 44) >> 23) & 1) + 64);
    uint64_t v76 = v61;
    uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v76);
    uint64_t v64 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.forall", (const unsigned __int8 *)0xA, Context);
    if (v65)
    {
      mlir::OperationState::OperationState(v94, v61, v64);
      uint64_t v66 = (uint64_t *)v83;
      uint64_t v67 = v84;
      uint64_t v68 = (uint64_t *)v81;
      uint64_t v69 = v82;
      unsigned int v70 = (uint64_t *)v79;
      uint64_t v71 = v80;
      mlir::ValueRange::ValueRange((unint64_t *)v95, (uint64_t)v85, v86);
      mlir::scf::ForallOp::build((mlir::MLIRContext **)(a3 + 8), (uint64_t)v94, v66, v67, v68, v69, v70, v71, v95[0], v95[1], v62, v62 != 0);
    }
    __int16 v96 = 1283;
    v95[2] = (uint64_t)"scf.forall";
    v95[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v78 = 259;
    llvm::operator+(v95, (uint64_t *)&v77, (uint64_t)v94);
    llvm::report_fatal_error((llvm::Twine *)v94, 1);
  }
  if (v85 != (mlir::Value *)v87) {
    free(v85);
  }
  if (v91 != v93) {
    free(v91);
  }
  if ((v88 & 1) == 0) {
    llvm::deallocate_buffer(v89, (void *)(8 * v90));
  }
  return 0;
}

_DWORD *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucket<unsigned int const&,unsigned int const&>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1, v10);
  uint64_t v13 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v14 = 2;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = (37 * *a3) & (v14 - 1);
  a2 = (_DWORD *)(v13 + 8 * v16);
  int v17 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -1)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = (_DWORD *)(v13 + 8 * (v21 & v15));
      int v17 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v18) {
      a2 = v18;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t result, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  v56[1] = *MEMORY[0x263EF8340];
  if (a2 >= 3)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  int v7 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 1) == 0)
  {
    int v8 = *(llvm **)(result + 8);
    uint64_t v9 = *(unsigned int *)(result + 16);
    if (v2 > 2)
    {
      buffer = llvm::allocate_buffer(8 * v2, (std::align_val_t)4uLL);
      *(void *)(v3 + 8) = buffer;
      *(void *)(v3 + 16) = v2;
      int v22 = *(_DWORD *)v3;
      unsigned int v10 = (llvm *)((char *)v8 + 8 * v9);
      *(void *)uint64_t v3 = *(_DWORD *)v3 & 1;
      if ((v22 & 1) == 0)
      {
        unint64_t v23 = &buffer[2 * v2];
        unint64_t v24 = 8 * v2 - 8;
        if (v24 < 8)
        {
          uint64_t v26 = buffer;
          goto LABEL_26;
        }
LABEL_20:
        uint64_t v25 = (v24 >> 3) + 1;
        uint64_t v26 = &buffer[2 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
        uint64_t v27 = buffer + 2;
        uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          *(v27 - 2) = -1;
          *uint64_t v27 = -1;
          v27 += 4;
          v28 -= 2;
        }
        while (v28);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_27:
          if (v9)
          {
            unint64_t v29 = v8;
            do
            {
              int v36 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 <= 0xFFFFFFFD)
              {
                if (*(unsigned char *)v3)
                {
                  int v31 = 2;
                  uint64_t v30 = v3 + 8;
                }
                else
                {
                  uint64_t v30 = *(void *)(v3 + 8);
                  int v31 = *(_DWORD *)(v3 + 16);
                }
                int v32 = v31 - 1;
                unsigned int v33 = (v31 - 1) & (37 * v36);
                int v34 = (_DWORD *)(v30 + 8 * v33);
                int v35 = *v34;
                if (v36 != *v34)
                {
                  uint64_t v37 = 0;
                  int v38 = 1;
                  while (v35 != -1)
                  {
                    if (v37) {
                      BOOL v39 = 0;
                    }
                    else {
                      BOOL v39 = v35 == -2;
                    }
                    if (v39) {
                      uint64_t v37 = v34;
                    }
                    unsigned int v40 = v33 + v38++;
                    unsigned int v33 = v40 & v32;
                    int v34 = (_DWORD *)(v30 + 8 * (v40 & v32));
                    int v35 = *v34;
                    if (v36 == *v34) {
                      goto LABEL_31;
                    }
                  }
                  if (v37) {
                    int v34 = v37;
                  }
                }
LABEL_31:
                *int v34 = v36;
                v34[1] = *((_DWORD *)v29 + 1);
                *(_DWORD *)v3 += 2;
              }
              unint64_t v29 = (llvm *)((char *)v29 + 8);
            }
            while (v29 != v10);
          }
          llvm::deallocate_buffer(v8, (void *)(8 * v9));
        }
        do
        {
LABEL_26:
          *uint64_t v26 = -1;
          v26 += 2;
        }
        while (v26 != v23);
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v10 = (llvm *)((char *)v8 + 8 * v9);
      *(void *)uint64_t result = 1;
    }
    unint64_t v23 = (_DWORD *)(v3 + 24);
    buffer = (_DWORD *)(v3 + 8);
    unint64_t v24 = 8;
    goto LABEL_20;
  }
  int v11 = (void *)(result + 8);
  unint64_t v12 = v55;
  if (*(_DWORD *)(result + 8) <= 0xFFFFFFFD)
  {
    int v41 = *(_DWORD *)(result + 12);
    v55[0] = *(_DWORD *)(result + 8);
    v55[1] = v41;
    unint64_t v12 = (unsigned int *)v56;
    unsigned int v13 = *(_DWORD *)(result + 16);
    if (v13 > 0xFFFFFFFD)
    {
LABEL_10:
      if (v2 < 3) {
        goto LABEL_11;
      }
      goto LABEL_53;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(result + 16);
    if (v13 > 0xFFFFFFFD) {
      goto LABEL_10;
    }
  }
  unsigned int v42 = *(_DWORD *)(result + 20);
  *unint64_t v12 = v13;
  v12[1] = v42;
  v12 += 2;
  if (v2 < 3)
  {
LABEL_11:
    *(void *)uint64_t result = v7 & 1;
    if ((v7 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_54:
    uint64_t v15 = v3 + 24;
    int v14 = (_DWORD *)(v3 + 8);
    unint64_t v16 = 8;
    goto LABEL_14;
  }
LABEL_53:
  *(_DWORD *)uint64_t result = v7 & 0xFFFFFFFE;
  uint64_t result = (uint64_t)llvm::allocate_buffer(8 * v2, (std::align_val_t)4uLL);
  *(void *)(v3 + 8) = result;
  *(void *)(v3 + 16) = v2;
  int v43 = *(_DWORD *)v3;
  unsigned int v13 = v2;
  *(void *)uint64_t v3 = *(_DWORD *)v3 & 1;
  if (v43) {
    goto LABEL_54;
  }
LABEL_12:
  if (!v13) {
    goto LABEL_57;
  }
  int v14 = (_DWORD *)*v11;
  uint64_t v15 = *v11 + 8 * v13;
  unint64_t v16 = 8 * v13 - 8;
  if (v16 < 8)
  {
    uint64_t v18 = (_DWORD *)*v11;
    do
    {
LABEL_56:
      *uint64_t v18 = -1;
      v18 += 2;
    }
    while (v18 != (_DWORD *)v15);
    goto LABEL_57;
  }
LABEL_14:
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = &v14[2 * (v17 & 0x3FFFFFFFFFFFFFFELL)];
  int v19 = v14 + 2;
  uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    *(v19 - 2) = -1;
    *int v19 = -1;
    v19 += 4;
    v20 -= 2;
  }
  while (v20);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_56;
  }
LABEL_57:
  if (v55 != v12)
  {
    BOOL v44 = v55;
    do
    {
      unsigned int v51 = *v44;
      if (*v44 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)v3)
        {
          int v46 = 2;
          uint64_t v45 = v3 + 8;
        }
        else
        {
          uint64_t v45 = *(void *)(v3 + 8);
          int v46 = *(_DWORD *)(v3 + 16);
        }
        int v47 = v46 - 1;
        unsigned int v48 = (v46 - 1) & (37 * v51);
        uint64_t v49 = (unsigned int *)(v45 + 8 * v48);
        unsigned int v50 = *v49;
        if (v51 != *v49)
        {
          uint64_t v52 = 0;
          uint64_t result = 1;
          while (v50 != -1)
          {
            if (v52) {
              BOOL v53 = 0;
            }
            else {
              BOOL v53 = v50 == -2;
            }
            if (v53) {
              uint64_t v52 = v49;
            }
            int v54 = v48 + result;
            uint64_t result = (result + 1);
            unsigned int v48 = v54 & v47;
            uint64_t v49 = (unsigned int *)(v45 + 8 * (v54 & v47));
            unsigned int v50 = *v49;
            if (v51 == *v49) {
              goto LABEL_61;
            }
          }
          if (v52) {
            uint64_t v49 = v52;
          }
        }
LABEL_61:
        *uint64_t v49 = v51;
        v49[1] = v44[1];
        *(_DWORD *)v3 += 2;
      }
      v44 += 2;
    }
    while (v44 != v12);
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::ValueRange)>::callback_fn<anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::matchAndRewrite(mlir::scf::ForallOp,mlir::PatternRewriter &)::{lambda(mlir::OpBuilder,mlir::Location,mlir::ValueRange)#1}>(uint64_t **a1, _OWORD *a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v7 = a2[1];
  v44[0] = *a2;
  v44[1] = v7;
  uint64_t v51 = (uint64_t)a4;
  unint64_t v52 = a5;
  unint64_t v8 = *(unsigned int *)(**a1 + 36);
  if (a5 <= v8)
  {
    uint64_t v9 = a4;
    unint64_t v8 = a5;
  }
  else
  {
    uint64_t v9 = (void *)mlir::ValueRange::offset_base(&v51, a5 - v8);
  }
  __src = v50;
  uint64_t v49 = 0x600000000;
  if (v8 < 7)
  {
    uint64_t v10 = 0;
    v46[0] = v9;
    v46[1] = 0;
    int v11 = v50;
    if (!v8)
    {
      LODWORD(v49) = 0;
      uint64_t v15 = a1[1];
      uint64_t v16 = *((unsigned int *)v15 + 8);
      if (!v16) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v8, 8);
    uint64_t v10 = v49;
    int v11 = __src;
    v46[0] = v9;
    v46[1] = 0;
  }
  unint64_t v12 = 0;
  unsigned int v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(v46, (uint64_t)v12);
    unint64_t v12 = ++v46[1];
  }
  while (v46[0] != v9 || v12 != (void *)v8);
  LODWORD(v49) = v49 + v8;
  uint64_t v15 = a1[1];
  uint64_t v16 = *((unsigned int *)v15 + 8);
  if (v16)
  {
LABEL_14:
    uint64_t v17 = (long long *)v15[3];
    uint64_t v18 = 24 * v16;
    do
    {
      uint64_t v19 = *((void *)v17 + 2);
      long long v20 = *v17;
      uint64_t v17 = (long long *)((char *)v17 + 24);
      *(_OWORD *)int v46 = v20;
      v47[0] = v19;
      unsigned int v21 = (uint64_t *)((char *)__src + 8 * v20);
      uint64_t *v21 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>((mlir::OpBuilder *)v44, a3, v47, v21)- 16;
      v18 -= 24;
    }
    while (v18);
  }
LABEL_16:
  uint64_t v22 = **a1;
  unint64_t v23 = *(unsigned int *)(v22 + 44);
  uint64_t v24 = v22 + 16 * ((v23 >> 23) & 1) + 64;
  if (!BYTE3(v23)) {
    uint64_t v24 = 0;
  }
  v46[0] = *(void **)(v24 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v46);
  uint64_t v26 = v51;
  if (v52 >= v25) {
    unint64_t v27 = v25;
  }
  else {
    unint64_t v27 = v52;
  }
  v46[0] = v47;
  v46[1] = (void *)0x600000000;
  if (v27 < 7)
  {
    uint64_t v28 = 0;
    uint64_t v53 = v51;
    uint64_t v54 = 0;
    unint64_t v29 = v47;
    if (!v27)
    {
      int v33 = 0;
      unint64_t v34 = 6;
      goto LABEL_31;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v47, v27, 8);
    uint64_t v28 = LODWORD(v46[1]);
    unint64_t v29 = (uint64_t *)v46[0];
    uint64_t v53 = v26;
    uint64_t v54 = 0;
  }
  uint64_t v30 = 0;
  int v31 = &v29[v28];
  do
  {
    *v31++ = mlir::ValueRange::dereference_iterator(&v53, v30);
    uint64_t v30 = ++v54;
  }
  while (v53 != v26 || v30 != v27);
  int v33 = (int)v46[1];
  unint64_t v34 = HIDWORD(v46[1]);
LABEL_31:
  uint64_t v35 = (v33 + v27);
  LODWORD(v46[1]) = v35;
  int v36 = __src;
  uint64_t v37 = v49;
  unint64_t v38 = v49 + v35;
  if (v38 > v34)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v47, v38, 8);
    LODWORD(v35) = v46[1];
  }
  if (v37)
  {
    memcpy((char *)v46[0] + 8 * v35, v36, 8 * v37);
    LODWORD(v35) = v46[1];
  }
  LODWORD(v46[1]) = v35 + v37;
  uint64_t v39 = **a1;
  uint64_t v40 = (uint64_t)a1[2];
  uint64_t v41 = *(void *)(((v39
                    + 16 * (((unint64_t)*(unsigned int *)(v39 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v39 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v39 + 40)
                  + 8);
  if (v41) {
    uint64_t v42 = v41 - 8;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v45 = mlir::ValueRange::dereference_iterator(&v51, 0);
  uint64_t ParentBlock = mlir::Value::getParentBlock((mlir::Value *)&v45);
  mlir::ValueRange::ValueRange((unint64_t *)&v53, (uint64_t)v46[0], LODWORD(v46[1]));
  mlir::RewriterBase::mergeBlocks(v40, v42, ParentBlock, v53, v54);
  if (v46[0] != v47) {
    free(v46[0]);
  }
  if (__src != v50) {
    free(__src);
  }
}

void anonymous namespace'::ForallOpControlOperandsFolder::~ForallOpControlOperandsFolder(_anonymous_namespace_::ForallOpControlOperandsFolder *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ForallOpControlOperandsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v50 = a2;
  mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v50, (uint64_t)&v57);
  mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v50, (uint64_t)&v54);
  mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v50, (uint64_t)&v51);
  if (mlir::foldDynamicIndexList((uint64_t)&v57, 0)
    || mlir::foldDynamicIndexList((uint64_t)&v54, 0)
    || mlir::foldDynamicIndexList((uint64_t)&v51, 0))
  {
    uint64_t v49 = v50;
    (*((void (**)(mlir::MLIRContext **))*a3 + 9))(a3);
    unsigned int v80 = v82;
    uint64_t v81 = 0x600000000;
    unint64_t v77 = v79;
    uint64_t v78 = 0x600000000;
    uint64_t v74 = v76;
    uint64_t v75 = 0x600000000;
    uint64_t v71 = v73;
    uint64_t v72 = 0x600000000;
    uint64_t v68 = v70;
    uint64_t v69 = 0x600000000;
    char v65 = v67;
    uint64_t v66 = 0x600000000;
    mlir::dispatchIndexOpFoldResults((uint64_t *)v57, v58, (uint64_t)&v80, (uint64_t)&v71);
    uint64_t v4 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44))) {
      unint64_t v5 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    }
    else {
      unint64_t v5 = 0;
    }
    int v6 = *(_DWORD *)(v5 + 32);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 8 * *(void *)(*(void *)(v50 + 48) + 104) - 8);
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    unint64_t v9 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44))) {
      unint64_t v9 = 0;
    }
    uint64_t v10 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v9 + 32, 4);
    ZinMirCacheTensors::ZinMirCacheTensors(&v83, v7, v10);
    LODWORD(v84) = 0;
    long long v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v4, 0, v6, &v84, 1);
    mlir::ValueRange::ValueRange(v61, (uint64_t)v80, v81);
    mlir::MutableOperandRange::assign((uint64_t)v62, v61[0], v61[1]);
    if (v63 != v64) {
      free(v63);
    }
    int v11 = v71;
    uint64_t v12 = v72;
    uint64_t v13 = v50;
    uint64_t v14 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 8);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    uint64_t DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v11, v12);
    mlir::Operation::setAttr(v13, v14, DenseI64ArrayAttr);
    mlir::dispatchIndexOpFoldResults((uint64_t *)v54, v55, (uint64_t)&v77, (uint64_t)&v68);
    uint64_t v16 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44))) {
      unint64_t v17 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    }
    else {
      unint64_t v17 = 0;
    }
    int v18 = *(_DWORD *)(v17 + 32);
    int v19 = *(_DWORD *)(v17 + 36);
    uint64_t v20 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 8 * *(void *)(*(void *)(v50 + 48) + 104) - 8);
    unsigned int v21 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    unint64_t v22 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44))) {
      unint64_t v22 = 0;
    }
    uint64_t v23 = mlir::detail::DenseArrayAttrImpl<int>::get(v21, v22 + 32, 4);
    ZinMirCacheTensors::ZinMirCacheTensors(&v83, v20, v23);
    LODWORD(v84) = 1;
    long long v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v16, v18, v19, &v84, 1);
    mlir::ValueRange::ValueRange(v60, (uint64_t)v77, v78);
    mlir::MutableOperandRange::assign((uint64_t)v62, v60[0], v60[1]);
    if (v63 != v64) {
      free(v63);
    }
    uint64_t v24 = v68;
    uint64_t v25 = v69;
    uint64_t v26 = v50;
    uint64_t v27 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 24);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    uint64_t v28 = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v24, v25);
    mlir::Operation::setAttr(v26, v27, v28);
    mlir::dispatchIndexOpFoldResults((uint64_t *)v51, v52, (uint64_t)&v74, (uint64_t)&v65);
    uint64_t v29 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44))) {
      uint64_t v30 = (_DWORD *)(v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64);
    }
    else {
      uint64_t v30 = 0;
    }
    int v31 = v30[9] + v30[8];
    int v32 = v30[10];
    uint64_t v33 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 8 * *(void *)(*(void *)(v50 + 48) + 104) - 8);
    unint64_t v34 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    unint64_t v35 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44))) {
      unint64_t v35 = 0;
    }
    uint64_t v36 = mlir::detail::DenseArrayAttrImpl<int>::get(v34, v35 + 32, 4);
    ZinMirCacheTensors::ZinMirCacheTensors(&v83, v33, v36);
    LODWORD(v84) = 2;
    long long v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v29, v31, v32, &v84, 1);
    mlir::ValueRange::ValueRange((unint64_t *)&v84, (uint64_t)v74, v75);
    mlir::MutableOperandRange::assign((uint64_t)v62, v84, v85);
    if (v63 != v64) {
      free(v63);
    }
    uint64_t v37 = v65;
    uint64_t v38 = v66;
    uint64_t v39 = v50;
    uint64_t v40 = *(void *)(*(void *)(*(void *)(v50 + 48) + 96) + 16);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    uint64_t v41 = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v37, v38);
    mlir::Operation::setAttr(v39, v40, v41);
    uint64_t v42 = v50;
    *(void *)&long long v83 = __PAIR64__(v78, v81);
    *((void *)&v83 + 1) = __PAIR64__(*(_DWORD *)(v50 + 36), v75);
    uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a3 + 1, (uint64_t)&v83, 4);
    BOOL v44 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v42 + 24));
    v64[0] = 261;
    v62[0] = (mlir::MLIRContext *)"operandSegmentSizes";
    v62[1] = (mlir::MLIRContext *)19;
    uint64_t v45 = mlir::StringAttr::get(v44, (mlir::MLIRContext *)v62);
    mlir::Operation::setAttr(v42, v45, DenseI32ArrayAttr);
    if (v65 != v67) {
      free(v65);
    }
    if (v68 != v70) {
      free(v68);
    }
    if (v71 != v73) {
      free(v71);
    }
    if (v74 != v76) {
      free(v74);
    }
    if (v77 != v79) {
      free(v77);
    }
    if (v80 != v82) {
      free(v80);
    }
    (*((void (**)(mlir::MLIRContext **, uint64_t))*a3 + 10))(a3, v49);
    uint64_t v46 = 1;
    int v47 = v51;
    if (v51 != v53) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v46 = 0;
    int v47 = v51;
    if (v51 != v53) {
LABEL_38:
    }
      free(v47);
  }
  if (v54 != &v56) {
    free(v54);
  }
  if (v57 != &v59) {
    free(v57);
  }
  return v46;
}

void anonymous namespace'::ForallOpSingleOrZeroIterationDimsFolder::~ForallOpSingleOrZeroIterationDimsFolder(_anonymous_namespace_::ForallOpSingleOrZeroIterationDimsFolder *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ForallOpSingleOrZeroIterationDimsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v109[6] = *MEMORY[0x263EF8340];
  uint64_t v78 = (mlir::Operation *)a2;
  if (!*(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64))
  {
    uint64_t v69 = *(void *)(a2 + 24);
    v70[0] = 0;
    uint64_t v107 = v109;
    uint64_t v108 = 0x600000000;
    unint64_t v104 = v106;
    uint64_t v105 = 0x600000000;
    unint64_t v101 = v103;
    uint64_t v102 = 0x600000000;
    v70[1] = 0;
    int v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unsigned int v77 = 0;
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v78, (uint64_t)&__src);
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v78, (uint64_t)&v83);
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v78, (uint64_t)&v80);
    unint64_t v3 = *((unsigned int *)v78 + 11);
    uint64_t v4 = (void **)((char *)v78 + 16 * ((v3 >> 23) & 1) + 64);
    uint64_t v5 = *(void *)((((unint64_t)v4 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v78 + 10)
                   + 8);
    if (v5) {
      uint64_t v6 = v5 - 8;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v6 + 48);
    unint64_t v8 = (*(void *)(v6 + 56) - v7) >> 3;
    if (!HIBYTE(*((_DWORD *)v78 + 11))) {
      uint64_t v4 = 0;
    }
    __dst[0] = v4[1];
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)__dst);
    if (v8 >= v9) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = v8;
    }
    mlir::ValueRange::ValueRange((unint64_t *)__dst, v7, v10);
    long long v11 = *(_OWORD *)__dst;
    __dst[0] = &v92;
    __dst[1] = (void *)0x600000000;
    int v12 = (int)v87;
    if (v87)
    {
      if (__src == &v88)
      {
        long long v66 = v11;
        unsigned int v13 = v87;
        if (v87 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, &v92, v87, 8),
              (unsigned int v13 = v87) != 0))
        {
          memcpy(__dst[0], __src, 8 * v13);
        }
        LODWORD(__dst[1]) = v12;
        long long v11 = v66;
      }
      else
      {
        __dst[0] = __src;
        __dst[1] = v87;
        __src = &v88;
        HIDWORD(v87) = 0;
      }
      LODWORD(v87) = 0;
    }
    int v94 = v96;
    uint64_t v95 = 0x600000000;
    int v14 = v84;
    if (!v84)
    {
LABEL_29:
      uint64_t v97 = v99;
      uint64_t v98 = 0x600000000;
      int v16 = v81;
      unint64_t v17 = v80;
      if (!v81)
      {
LABEL_39:
        long long v100 = v11;
        if (v17 != v82) {
          free(v17);
        }
        if (v83 != v85) {
          free(v83);
        }
        if (__src != &v88) {
          free(__src);
        }
        char v19 = 0;
        uint64_t v20 = (uint64_t *)__dst[0];
        unsigned int v21 = (uint64_t *)v94;
        unint64_t v22 = (uint64_t *)v97;
        uint64_t v23 = v100;
        __src = __dst[0];
        uint64_t v87 = (uint64_t *)v94;
        uint64_t v88 = (char *)v97;
        uint64_t v89 = v100;
        uint64_t v90 = 0;
        if (!LODWORD(__dst[1]) || !v95 || !v98)
        {
LABEL_71:
          uint64_t v42 = v97;
          if (v97 == v99) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
        uint64_t v24 = 0;
        uint64_t v25 = (uint64_t *)((char *)__dst[0] + 8 * LODWORD(__dst[1]));
        uint64_t v26 = (uint64_t *)((char *)v94 + 8 * v95);
        uint64_t v27 = *((void *)&v100 + 1);
        uint64_t v28 = (uint64_t *)((char *)v97 + 8 * v98);
        while (1)
        {
          if (v89 == v23 && v24 == v27)
          {
            char v19 = 0;
            goto LABEL_71;
          }
          uint64_t v30 = (void *)mlir::ValueRange::dereference_iterator(&v89, v24);
          uint64_t v31 = mlir::constantTripCount(*v20, *v21, *v22);
          if (v32)
          {
            if (v31 == 1)
            {
              ConstantIndexOp = mlir::getValueOrCreateConstantIndexOp((mlir::IndexType **)(a3 + 8), v69, *v20);
              unsigned int v80 = v30;
              long long v83 = 0;
              char v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v70, (unint64_t *)&v80, &v83);
              uint64_t v41 = v83;
              if ((v40 & 1) == 0)
              {
                uint64_t v41 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v70, (uint64_t)&v80, (unint64_t *)&v80, v83);
                *uint64_t v41 = v80;
                v41[1] = 0;
              }
              v41[1] = ConstantIndexOp;
              goto LABEL_66;
            }
            if (!v31)
            {
              int v57 = v78;
              unint64_t v58 = *((unsigned int *)v78 + 11);
              if (HIBYTE(*((_DWORD *)v78 + 11))) {
                uint64_t v59 = (_DWORD *)((char *)v78 + 16 * ((v58 >> 23) & 1) + 64);
              }
              else {
                uint64_t v59 = 0;
              }
              int v60 = v59[8];
              int v61 = v59[9];
              int v63 = v59[10];
              int v62 = v59[11];
              if ((v58 & 0x800000) != 0) {
                uint64_t v64 = *((void *)v78 + 9);
              }
              else {
                uint64_t v64 = 0;
              }
              mlir::ValueRange::ValueRange(v79, v64 + 32 * (v61 + v60 + v63), (v62 + v61 + v60 + v63) - (unint64_t)(v61 + v60 + v63));
              (*(void (**)(uint64_t, mlir::Operation *, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, v57, v79[0], v79[1]);
              char v19 = 1;
              uint64_t v42 = v97;
              if (v97 == v99)
              {
LABEL_73:
                if (v94 != v96) {
                  free(v94);
                }
                if (__dst[0] != &v92) {
                  free(__dst[0]);
                }
                if ((v19 & 1) == 0)
                {
                  int v44 = v108;
                  uint64_t v45 = (void **)((char *)v78 + 16 * (((unint64_t)*((unsigned int *)v78 + 11) >> 23) & 1) + 64);
                  if (!HIBYTE(*((_DWORD *)v78 + 11))) {
                    uint64_t v45 = 0;
                  }
                  __dst[0] = v45[1];
                  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)__dst);
                  if (v44 == v46)
                  {
                    __dst[0] = "no dimensions have 0 or 1 iterations";
                    LOWORD(v93) = 259;
                    int v47 = v78;
                    __src = __dst;
                    uint64_t v48 = *(void *)(a3 + 16);
                    if (v48 && mlir::RewriterBase::Listener::classof(*(void *)(a3 + 16))) {
                      (*(void (**)(uint64_t, void, uint64_t (*)(void ****, uint64_t), void **))(*(void *)v48 + 64))(v48, *((void *)v47 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::ForallOp &>(mlir::scf::ForallOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
                    }
                  }
                  else
                  {
                    if (v108)
                    {
                      unint64_t v49 = *((unsigned int *)v78 + 11);
                      if (HIBYTE(*((_DWORD *)v78 + 11))) {
                        uint64_t v50 = (_DWORD *)((char *)v78 + 16 * ((v49 >> 23) & 1) + 64);
                      }
                      else {
                        uint64_t v50 = 0;
                      }
                      int v51 = v50[8];
                      int v52 = v50[9];
                      int v54 = v50[10];
                      int v53 = v50[11];
                      if ((v49 & 0x800000) != 0) {
                        uint64_t v55 = *((void *)v78 + 9);
                      }
                      else {
                        uint64_t v55 = 0;
                      }
                      uint64_t v56 = (v52 + v51 + v54);
                      __dst[0] = (void *)(v55 + 32 * v56);
                      __dst[1] = (void *)((v53 + v56) - v56);
                      __src = 0;
                      mlir::OpBuilder::create<mlir::scf::ForallOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::OperandRange,std::nullopt_t const&,decltype(nullptr)>((mlir::MLIRContext **)(a3 + 8), v69, (uint64_t)&v107, (uint64_t)&v104, (uint64_t)&v101, (uint64_t)__dst);
                    }
                    mlir::scf::promote(a3, (uint64_t)v78);
                  }
                }
                llvm::deallocate_buffer(v75, (void *)(16 * v77));
              }
LABEL_72:
              free(v42);
              goto LABEL_73;
            }
          }
          uint64_t v33 = *v20;
          uint64_t v34 = v108;
          if (v108 >= (unint64_t)HIDWORD(v108))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v108 + 1, 8);
            uint64_t v34 = v108;
          }
          v107[v34] = v33;
          LODWORD(v108) = v108 + 1;
          uint64_t v35 = *v21;
          uint64_t v36 = v105;
          if (v105 >= (unint64_t)HIDWORD(v105))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v105 + 1, 8);
            uint64_t v36 = v105;
          }
          *(void *)&v104[8 * v36] = v35;
          LODWORD(v105) = v105 + 1;
          uint64_t v37 = *v22;
          uint64_t v38 = v102;
          if (v102 >= (unint64_t)HIDWORD(v102))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v102 + 1, 8);
            uint64_t v38 = v102;
          }
          *((void *)v101 + v38) = v37;
          LODWORD(v102) = v102 + 1;
LABEL_66:
          char v19 = 0;
          uint64_t v20 = (uint64_t *)((char *)__src + 8);
          unsigned int v21 = v87 + 1;
          __src = v20;
          ++v87;
          unint64_t v22 = (uint64_t *)(v88 + 8);
          uint64_t v24 = v90 + 1;
          v88 += 8;
          ++v90;
          if (v20 == v25 || v21 == v26 || v22 == v28) {
            goto LABEL_71;
          }
        }
      }
      if (v80 != v82)
      {
        uint64_t v97 = v80;
        uint64_t v98 = v81;
        unsigned int v80 = v82;
        HIDWORD(v81) = 0;
        unint64_t v17 = v82;
LABEL_38:
        LODWORD(v81) = 0;
        goto LABEL_39;
      }
      long long v68 = v11;
      if (v81 < 7)
      {
        uint64_t v18 = v81;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v99, v81, 8);
        uint64_t v18 = v81;
        unint64_t v17 = v80;
        if (!v81) {
          goto LABEL_37;
        }
      }
      memcpy(v97, v17, 8 * v18);
      unint64_t v17 = v80;
LABEL_37:
      LODWORD(v98) = v16;
      long long v11 = v68;
      goto LABEL_38;
    }
    if (v83 != v85)
    {
      int v94 = v83;
      uint64_t v95 = v84;
      long long v83 = v85;
      HIDWORD(v84) = 0;
LABEL_28:
      LODWORD(v84) = 0;
      goto LABEL_29;
    }
    long long v67 = v11;
    if (v84 < 7)
    {
      uint64_t v15 = v84;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v84, 8);
      uint64_t v15 = v84;
      if (!v84) {
        goto LABEL_27;
      }
    }
    memcpy(v94, v83, 8 * v15);
LABEL_27:
    LODWORD(v95) = v14;
    long long v11 = v67;
    goto LABEL_28;
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::ForallOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::OperandRange,std::nullopt_t const&,decltype(nullptr)>(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v27[38] = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.forall", (const unsigned __int8 *)0xA, Context);
  if (v14)
  {
    mlir::OperationState::OperationState(v27, a2, v13);
    uint64_t v15 = *(uint64_t **)a3;
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    unint64_t v17 = *(uint64_t **)a4;
    uint64_t v18 = *(unsigned int *)(a4 + 8);
    char v19 = *(uint64_t **)a5;
    uint64_t v20 = *(unsigned int *)(a5 + 8);
    mlir::ValueRange::ValueRange(v26, *(void *)a6, *(void *)(a6 + 8));
    mlir::scf::ForallOp::build(a1, (uint64_t)v27, v15, v16, v17, v18, v19, v20, v26[0], v26[1], 0, 0);
  }
  __int16 v25 = 1283;
  v24[2] = (uint64_t)"scf.forall";
  void v24[3] = 10;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v23 = 259;
  llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
  llvm::report_fatal_error((llvm::Twine *)v27, 1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::ForallOp &>(mlir::scf::ForallOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void anonymous namespace'::CombineIfs::~CombineIfs(_anonymous_namespace_::CombineIfs *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::CombineIfs::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v117[6] = *MEMORY[0x263EF8340];
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(*(void *)(a2 + 16) + 40));
  if (v5 == a2 || *(void *)(*(void *)(a2 + 16) + 40) == a2) {
    return 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)a2);
  BOOL v7 = v6 && *(void *)(*(void *)(v6 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6;
  if (*(void *)(*(void *)(a2 + 72) + 24) != *(void *)(*(void *)(v6 + 72) + 24))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t Filter = *(char **)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (!DefiningOp) {
      goto LABEL_26;
    }
    goto LABEL_20;
  }
  int v12 = (void *)(((a2 + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8) + 87) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  uint64_t v13 = *v12 - 8;
  BOOL v7 = *v12 == 0;
  uint64_t v16 = (void *)v12[3];
  uint64_t v15 = v12 + 3;
  char v14 = v16;
  if (v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v13;
  }
  unint64_t v17 = (mlir::Block *)(v14 - 1);
  if (!v14) {
    unint64_t v17 = 0;
  }
  if (v14 == v15) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v17;
  }
  uint64_t Filter = *(char **)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (DefiningOp)
  {
LABEL_20:
    uint64_t v18 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v19 = v18 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    if (v18 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
      uint64_t v20 = (char *)DefiningOp;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v112 = v20;
    if (v19
      && *(void *)(*(void *)(v8 + 72) + 24) == mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v112))
    {
      uint64_t v108 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      uint64_t Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v112);
      uint64_t v41 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v41)
      {
        if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v108, v41))
        {
          uint64_t v42 = (void *)(((a2
                           + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                           + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(a2 + 40));
          uint64_t v43 = *v42 - 8;
          BOOL v7 = *v42 == 0;
          int v46 = (void *)v42[3];
          uint64_t v45 = v42 + 3;
          int v44 = v46;
          if (v7) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v43;
          }
          int v47 = (mlir::Block *)(v44 - 1);
          if (!v44) {
            int v47 = 0;
          }
          if (v44 != v45) {
            uint64_t v10 = (uint64_t)v47;
          }
        }
      }
    }
  }
LABEL_26:
  uint64_t Filter = *(char **)(*(void *)(v8 + 72) + 24);
  uint64_t v21 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (v21)
  {
    unint64_t v22 = *(void **)(*(void *)(v21 + 48) + 16);
    BOOL v23 = v22 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    uint64_t v24 = v22 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id ? (char *)v21 : 0;
    uint64_t v112 = v24;
    if (v23
      && *(void *)(*(void *)(a2 + 72) + 24) == mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v112))
    {
      uint64_t v48 = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v112);
      uint64_t v108 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      uint64_t Filter = v48;
      unint64_t v49 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v49)
      {
        if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v108, v49))
        {
          uint64_t v50 = (void *)(((a2
                           + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                           + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(a2 + 40));
          uint64_t v9 = *v50 ? *v50 - 8 : 0;
          int v51 = (void *)v50[3];
          if (v51 != v50 + 3)
          {
            if (v51) {
              uint64_t v10 = (uint64_t)(v51 - 1);
            }
            else {
              uint64_t v10 = 0;
            }
          }
        }
      }
    }
  }
  if (v10 | v9)
  {
    uint64_t Filter = (char *)v117;
    unint64_t v116 = 0x600000000;
    unint64_t v25 = *(unsigned int *)(v8 + 44);
    if ((v25 & 0x7FFFFF) != 0)
    {
      unint64_t v26 = (v8 + 16 * ((v25 >> 23) & 1) + ((v25 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v27 = v26 + 32 * *(unsigned int *)(v8 + 40);
      if (*(void *)(v27 + 24) == v27 + 24) {
        goto LABEL_100;
      }
      unint64_t v28 = v26 + 32 * *(unsigned int *)(v8 + 40);
    }
    else
    {
      if (MEMORY[0x18] == 24) {
        goto LABEL_100;
      }
      unint64_t v28 = 0;
    }
    uint64_t v32 = *(void *)(v28 + 24);
    unint64_t v30 = v28 + 24;
    uint64_t v31 = v32;
    uint64_t v33 = v32 - 8;
    if (v32) {
      BOOL v34 = v31 == v30;
    }
    else {
      BOOL v34 = 1;
    }
    if (v34) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = v33;
    }
    ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v35 + 32));
    if ((*(unsigned char *)(v36 + 46) & 0x80) != 0)
    {
      uint64_t v37 = *(void *)(v36 + 72);
      unint64_t v38 = *(unsigned int *)(v36 + 68);
      uint64_t v112 = v114;
      uint64_t v113 = 0x600000000;
      if (v38 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v38, 8);
        uint64_t v39 = &v112[8 * v113];
        if (v38 >= 0xD
          && ((unint64_t)v39 >= v37 + 32 * v38
           || v37 + 24 >= (unint64_t)&v112[8 * v113 + 8 * v38]))
        {
          uint64_t v52 = v38 & 3;
          if ((v38 & 3) == 0) {
            uint64_t v52 = 4;
          }
          unint64_t v40 = v38 - v52;
          v39 += 8 * v40;
          int v53 = (const double *)(v37 + 88);
          int v54 = (unsigned long long *)&v112[8 * v113 + 16];
          unint64_t v55 = v40;
          do
          {
            uint64_t v56 = v53 - 8;
            unsigned long long v57 = (unsigned __int128)vld4q_f64(v56);
            unsigned long long v58 = (unsigned __int128)vld4q_f64(v53);
            *(v54 - 1) = v57;
            *int v54 = v58;
            v53 += 16;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
LABEL_78:
          unint64_t v59 = v38 - v40;
          int v60 = (uint64_t *)(v37 + 32 * v40 + 24);
          do
          {
            uint64_t v61 = *v60;
            v60 += 4;
            *(void *)uint64_t v39 = v61;
            v39 += 8;
            --v59;
          }
          while (v59);
          int v62 = v112;
          unint64_t v63 = (v113 + v38);
          LODWORD(v113) = v63;
          if (v112 != v114)
          {
            if (Filter != (char *)v117)
            {
              free(Filter);
              int v62 = v112;
              LODWORD(v63) = v113;
            }
            uint64_t Filter = v62;
            unint64_t v116 = __PAIR64__(HIDWORD(v113), v63);
            uint64_t v112 = v114;
            HIDWORD(v113) = 0;
            goto LABEL_97;
          }
          uint64_t v64 = v116;
          if (v116 >= v63)
          {
            if (v63) {
              memmove(Filter, v112, 8 * v63);
            }
            goto LABEL_96;
          }
          if (HIDWORD(v116) >= v63)
          {
            if (v116)
            {
              memmove(Filter, v112, 8 * v116);
              goto LABEL_92;
            }
          }
          else
          {
            LODWORD(v116) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Filter, v117, v63, 8);
          }
          uint64_t v64 = 0;
LABEL_92:
          if (v64 != v113) {
            memcpy(&Filter[8 * v64], &v112[8 * v64], 8 * v113 - 8 * v64);
          }
          goto LABEL_96;
        }
LABEL_54:
        unint64_t v40 = 0;
        goto LABEL_78;
      }
      if (v38)
      {
        uint64_t v39 = v114;
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v112 = v114;
      HIDWORD(v113) = 6;
    }
    LODWORD(v63) = 0;
    LODWORD(v113) = 0;
LABEL_96:
    LODWORD(v116) = v63;
LABEL_97:
    LODWORD(v113) = 0;
    if (v112 != v114) {
      free(v112);
    }
    LODWORD(v25) = *(_DWORD *)(v8 + 44);
LABEL_100:
    uint64_t v106 = *(unsigned int *)(v8 + 36);
    uint64_t v65 = *(void *)(((v8 + 64 + 16 * ((v25 >> 23) & 1) + ((v25 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v8 + 40));
    if (v65) {
      uint64_t v66 = v65 - 8;
    }
    else {
      uint64_t v66 = 0;
    }
    ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v66 + 32));
    uint64_t v100 = a2;
    uint64_t v101 = v8;
    if ((*(unsigned char *)(v67 + 46) & 0x80) != 0)
    {
      uint64_t v102 = *(void *)(v67 + 72);
      uint64_t v105 = *(unsigned int *)(v67 + 68);
      int v99 = (char *)(v8 - 16);
      if (v106) {
        long long v68 = (mlir::detail::OpResultImpl *)(v8 - 16);
      }
      else {
        long long v68 = 0;
      }
      unint64_t v104 = v68;
      if (!v106) {
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v102 = 0;
      int v99 = (char *)(v8 - 16);
      if (v106) {
        uint64_t v98 = (mlir::detail::OpResultImpl *)(v8 - 16);
      }
      else {
        uint64_t v98 = 0;
      }
      unint64_t v104 = v98;
      uint64_t v105 = 0;
      if (!v106) {
        goto LABEL_141;
      }
    }
    if (v105 && v116)
    {
      uint64_t v69 = 0;
      unsigned int v70 = (uint64_t **)Filter;
      uint64_t v103 = &Filter[8 * v116];
      while (1)
      {
        int v71 = *(uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v104, v69);
        if (v71) {
          break;
        }
LABEL_138:
        if (++v69 != v106 && v69 != v105 && ++v70 != (uint64_t **)v103) {
          continue;
        }
        goto LABEL_141;
      }
      uint64_t v72 = *(uint64_t **)(v102 + 32 * v69 + 24);
      while (1)
      {
        uint64_t v73 = v71;
        int v71 = (uint64_t *)*v71;
        if (v10)
        {
          Parent = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v10);
          uint64_t v75 = *(mlir::Block **)(v73[2] + 16);
          if (v75)
          {
            uint64_t v76 = (mlir::Region *)mlir::Block::getParent(v75);
            if (Parent == v76) {
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v76 = 0;
            if (!Parent) {
              goto LABEL_122;
            }
          }
          if (mlir::Region::isProperAncestor(Parent, v76))
          {
LABEL_122:
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v73[2]);
            unsigned int v77 = (uint64_t *)v73[1];
            if (v77)
            {
              uint64_t *v77 = *v73;
              if (*v73) {
                *(void *)(*v73 + 8) = v73[1];
              }
            }
            v73[3] = (uint64_t)v72;
            v73[1] = (uint64_t)v72;
            uint64_t v78 = *v72;
            uint64_t *v73 = *v72;
            uint64_t v79 = v72;
            if (!v78) {
              goto LABEL_114;
            }
            goto LABEL_113;
          }
        }
        if (!v9) {
          goto LABEL_115;
        }
        unsigned int v80 = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v9);
        uint64_t v81 = *(mlir::Block **)(v73[2] + 16);
        if (v81)
        {
          unsigned int v82 = (mlir::Region *)mlir::Block::getParent(v81);
          if (v80 == v82) {
            goto LABEL_133;
          }
        }
        else
        {
          unsigned int v82 = 0;
          if (!v80) {
            goto LABEL_133;
          }
        }
        if (!mlir::Region::isProperAncestor(v80, v82)) {
          goto LABEL_115;
        }
LABEL_133:
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v73[2]);
        uint64_t v79 = *v70;
        long long v83 = (uint64_t *)v73[1];
        if (v83)
        {
          uint64_t *v83 = *v73;
          if (*v73) {
            *(void *)(*v73 + 8) = v73[1];
          }
        }
        v73[3] = (uint64_t)v79;
        v73[1] = (uint64_t)v79;
        uint64_t v78 = *v79;
        uint64_t *v73 = *v79;
        if (!v78) {
          goto LABEL_114;
        }
LABEL_113:
        *(void *)(v78 + 8) = v73;
LABEL_114:
        *uint64_t v79 = (uint64_t)v73;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v73[2]);
LABEL_115:
        if (!v71) {
          goto LABEL_138;
        }
      }
    }
LABEL_141:
    uint64_t v84 = *(unsigned int *)(v101 + 36);
    long long v85 = v99;
    if (!v84) {
      long long v85 = 0;
    }
    uint64_t v112 = v85;
    uint64_t v113 = v84;
    mlir::OperandRange::getTypes((uint64_t *)&v112, (uint64_t *)&v108);
    uint64_t v112 = v114;
    uint64_t v113 = 0x600000000;
    uint64_t v86 = (mlir::detail::OpResultImpl *)v108;
    uint64_t v87 = v109;
    uint64_t v89 = v110;
    uint64_t v88 = v111;
    int v90 = v111 - v109;
    if ((unint64_t)(v111 - v109) < 7)
    {
      int v91 = 0;
      uint64_t v92 = v100;
      BOOL v93 = v108 != v110;
      if (v111 != v109)
      {
LABEL_148:
        int v94 = (unint64_t *)&v112[8 * v91];
        if (v93)
        {
          while (1)
            *v94++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v86, v87++) + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        do
          *v94++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v86, v87++) + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v88 != v87);
        int v91 = v113;
LABEL_152:
        LODWORD(v113) = v91 + v90;
        uint64_t v95 = (void *)*(unsigned int *)(v92 + 36);
        __int16 v96 = (void *)(v92 - 16);
        if (!v95) {
          __int16 v96 = 0;
        }
        v107[0] = v96;
        v107[1] = v95;
        mlir::OperandRange::getTypes((uint64_t *)v107, (uint64_t *)&v108);
        llvm::SmallVectorImpl<mlir::Type>::insert<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void>((uint64_t)&v112, (uint64_t)&v112[8 * v113], (mlir::detail::OpResultImpl *)v108, v109, v110, v111);
        uint64_t v97 = *(void *)(v92 + 24);
        uint64_t v108 = *(void **)(*(void *)(v101 + 72) + 24);
        LOBYTE(v107[0]) = 0;
        mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>(a3 + 8, v97, (uint64_t)&v112, (uint64_t *)&v108);
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v111 - v109, 8);
      int v91 = v113;
      uint64_t v92 = v100;
      BOOL v93 = v86 != v89;
      if (v88 != v87) {
        goto LABEL_148;
      }
    }
    if (!v93) {
      goto LABEL_152;
    }
    goto LABEL_148;
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v17, a2, v9);
    mlir::ValueRange::ValueRange(v16, *(void *)a3, *(unsigned int *)(a3 + 8));
    mlir::scf::IfOp::build(a1, (unsigned int *)v17, v16[0], v16[1], *a4);
  }
  __int16 v15 = 1283;
  v14[2] = (uint64_t)"scf.if";
  v14[3] = 6;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v13 = 259;
  llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v17);
  llvm::report_fatal_error((llvm::Twine *)v17, 1);
}

unint64_t *llvm::SmallVectorImpl<mlir::Type>::insert<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void>(uint64_t a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, mlir::detail::OpResultImpl *a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = (a2 - *(void *)a1) >> 3;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  unint64_t v13 = *(unsigned int *)(a1 + 12);
  unsigned int v15 = *(_DWORD *)(a1 + 8);
  unint64_t v16 = a6 - a4;
  unint64_t v17 = a6 - a4 + v14;
  if (*(void *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      uint64_t v11 = *(void *)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v18 = (unint64_t *)(v11 + 8 * v12);
    uint64_t v19 = v12;
    uint64_t v20 = (unint64_t *)(v11 + 8 * v14);
    unint64_t v21 = v20 - v18;
    if (v21 < v16)
    {
      unsigned int v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        BOOL v23 = v18;
        do
        {
          *v23++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
          --v21;
        }
        while (v21);
      }
      if (this != a5 || v8 != a6)
      {
        if (this != a5)
        {
          while (1)
            *v20++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        do
          *v20++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
        while (a6 != v8);
      }
      return v18;
    }
    uint64_t v26 = 8 * v16;
    unint64_t v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    uint64_t v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8) {
      goto LABEL_33;
    }
    unint64_t v30 = (void *)(*(void *)a1 + 8 * v28);
    uint64_t v31 = 8 * a6;
    unint64_t v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      uint64_t v34 = 8 * v28 + *(void *)a1;
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        uint64_t v35 = (v32 >> 3) + 1;
        uint64_t v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v30 = (void *)((char *)v30 + v36 * 8);
        uint64_t v33 = &v29[v36];
        uint64_t v37 = (long long *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        unint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *unint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18) {
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    }
    if (this != a5 || a6 != v8)
    {
      if (this != a5)
      {
        while (1)
          *v18++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v42 = v18;
      do
        *v42++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  BOOL v24 = this != a5;
  if (a6 != v8 || this != a5)
  {
    unint64_t v25 = (unint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    do
      *v25++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
    while (a6 != v8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (unint64_t *)(v11 + 8 * v12);
}

void anonymous namespace'::CombineNestedIfs::~CombineNestedIfs(_anonymous_namespace_::CombineNestedIfs *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::CombineNestedIfs::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v95[6] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2 + 64;
  uint64_t v4 = (void *)(((a2
                  + 64
                  + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                  + 7) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(a2 + 40));
  uint64_t v5 = *v4 - 8;
  if (!*v4) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(ZinIrHalH13g **)(v5 + 40);
  if (v6 == (ZinIrHalH13g *)(v5 + 32)) {
    return 0;
  }
  BOOL v7 = *(ZinIrHalH13g **)(v5 + 32);
  if (v6 == v7 || *((ZinIrHalH13g **)v6 + 1) != v7) {
    return 0;
  }
  uint64_t v11 = (void *)v4[3];
  if (v11 != v4 + 3 && v11 != 0)
  {
    uint64_t v20 = v11[4];
    unint64_t v21 = v11 + 3;
    if ((void *)v20 == v21 || *(void **)(v20 + 8) != v21) {
      return 0;
    }
  }
  ZinIrHalH13g::~ZinIrHalH13g(v6);
  if (!v13
    || *(void *)(*(void *)(v13 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
  {
    return 0;
  }
  uint64_t v15 = v13;
  unint64_t v16 = *(unsigned int *)(v13 + 44);
  if ((v16 & 0x7FFFFF) != 0)
  {
    unint64_t v17 = ((v13 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v13 + 40);
    uint64_t v18 = *(void *)(v17 + 24);
    if (v18) {
      BOOL v19 = v18 == v17 + 24;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v18 = MEMORY[0x18];
    if (!MEMORY[0x18] || MEMORY[0x18] == 24) {
      goto LABEL_38;
    }
    unint64_t v17 = 0;
  }
  unint64_t v22 = v17 + 24;
  if (v18) {
    BOOL v23 = v18 == v22;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v18 - 8;
  }
  uint64_t v25 = v24 + 32;
  uint64_t v26 = *(void *)(v24 + 40);
  if (v26 == v25 || *(void *)(v26 + 8) != v25) {
    return 0;
  }
LABEL_38:
  uint64_t v27 = *(void *)(((v3
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40));
  if (v27) {
    uint64_t v28 = v27 - 8;
  }
  else {
    uint64_t v28 = 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v28 + 32));
  if ((*(unsigned char *)(v29 + 46) & 0x80) != 0)
  {
    uint64_t v30 = *(void *)(v29 + 72);
    unint64_t v31 = *(unsigned int *)(v29 + 68);
    BOOL v93 = v95;
    uint64_t v94 = 0x600000000;
    if (v31 < 7)
    {
      if (!v31)
      {
        int v47 = 0;
        goto LABEL_61;
      }
      uint64_t v32 = 0;
      uint64_t v33 = v95;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v31, 8);
      uint64_t v32 = v94;
      uint64_t v33 = v93;
    }
    uint64_t v34 = &v33[v32];
    if (v31 >= 0xD
      && ((unint64_t)v34 < v30 + 32 * v31 ? (BOOL v35 = v30 + 24 >= (unint64_t)&v33[v32 + v31]) : (BOOL v35 = 1), v35))
    {
      uint64_t v36 = v31 & 3;
      if ((v31 & 3) == 0) {
        uint64_t v36 = 4;
      }
      unint64_t v37 = v31 - v36;
      v34 += v37;
      unint64_t v38 = (const double *)(v30 + 88);
      uint64_t v39 = (unsigned long long *)&v33[v32 + 2];
      unint64_t v40 = v37;
      do
      {
        uint64_t v41 = v38 - 8;
        unsigned long long v42 = (unsigned __int128)vld4q_f64(v41);
        unsigned long long v43 = (unsigned __int128)vld4q_f64(v38);
        *(v39 - 1) = v42;
        *uint64_t v39 = v43;
        v38 += 16;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
    }
    else
    {
      unint64_t v37 = 0;
    }
    unint64_t v44 = v31 - v37;
    uint64_t v45 = (uint64_t *)(v30 + 32 * v37 + 24);
    do
    {
      uint64_t v46 = *v45;
      v45 += 4;
      *v34++ = v46;
      --v44;
    }
    while (v44);
    int v47 = v94;
  }
  else
  {
    LODWORD(v31) = 0;
    int v47 = 0;
    BOOL v93 = v95;
    HIDWORD(v94) = 6;
  }
LABEL_61:
  unsigned int v48 = v47 + v31;
  LODWORD(v94) = v48;
  int v90 = v92;
  uint64_t v91 = 0x600000000;
  unint64_t v49 = *(unsigned int *)(a2 + 44);
  if ((v49 & 0x7FFFFF) != 0)
  {
    unint64_t v50 = ((v3 + 16 * ((v49 >> 23) & 1) + ((v49 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    uint64_t v51 = *(void *)(v50 + 24);
    if (v51) {
      BOOL v52 = v51 == v50 + 24;
    }
    else {
      BOOL v52 = 1;
    }
    if (v52) {
      goto LABEL_82;
    }
  }
  else
  {
    uint64_t v51 = MEMORY[0x18];
    if (MEMORY[0x18]) {
      BOOL v53 = MEMORY[0x18] == 24;
    }
    else {
      BOOL v53 = 1;
    }
    if (v53) {
      goto LABEL_82;
    }
    unint64_t v50 = 0;
  }
  if (v51) {
    BOOL v54 = v51 == v50 + 24;
  }
  else {
    BOOL v54 = 1;
  }
  if (v54) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v51 - 8;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v55 + 32));
  if ((*(unsigned char *)(v56 + 46) & 0x80) != 0)
  {
    uint64_t v57 = *(void *)(v56 + 72);
    uint64_t v58 = *(unsigned int *)(v56 + 68);
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
  }
  llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v90, (uint64_t)&v90[v91], v57, 0, v57, v58);
  unsigned int v48 = v94;
LABEL_82:
  uint64_t v87 = v89;
  uint64_t v88 = 0xC00000000;
  if (!v48)
  {
LABEL_113:
    uint64_t v80 = *(void *)(a2 + 24);
    uint64_t v86 = *(void **)(*(void *)(a2 + 72) + 24);
    v85[0] = *(void *)(*(void *)(v15 + 72) + 24);
    uint64_t v81 = mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::detail::TypedValue<mlir::IntegerType>>((mlir::OpBuilder *)(a3 + 8), v80, (uint64_t *)&v86, v85);
    uint64_t v82 = *(unsigned int *)(a2 + 36);
    uint64_t v83 = a2 - 16;
    if (!v82) {
      uint64_t v83 = 0;
    }
    uint64_t v84 = (uint64_t)v81 - 16;
    v85[0] = v83;
    v85[1] = v82;
    mlir::OperandRange::getTypes(v85, (uint64_t *)&v86);
    mlir::OpBuilder::create<mlir::scf::IfOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::Value &>(a3 + 8, v80, (uint64_t *)&v86, &v84);
  }
  uint64_t v59 = 0;
  int v60 = (mlir::Value *)v93;
  uint64_t v61 = v15 + 64;
  uint64_t v62 = 8 * v48;
  while (1)
  {
    while (mlir::Value::getDefiningOp(v60) != v15)
    {
      ParentRegion = mlir::Value::getParentRegion(v60);
      unint64_t v64 = *(unsigned int *)(a2 + 44);
      if ((v64 & 0x7FFFFF) != 0)
      {
        if (ParentRegion == (mlir::Block *)(((v3 + 16 * ((v64 >> 23) & 1) + ((v64 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                                           + 32 * *(unsigned int *)(a2 + 40)))
          goto LABEL_116;
      }
      else if (!ParentRegion)
      {
        goto LABEL_116;
      }
      uint64_t v69 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 4);
        uint64_t v69 = v88;
      }
      *((_DWORD *)v87 + v69) = v59;
      LODWORD(v88) = v88 + 1;
      ++v59;
      int v60 = (mlir::Value *)((char *)v60 + 8);
      v62 -= 8;
      if (!v62) {
        goto LABEL_113;
      }
    }
    uint64_t v65 = *(void *)(*(void *)v60 + 8) & 7;
    if (*(void *)v60) {
      BOOL v66 = v65 == 6;
    }
    else {
      BOOL v66 = 0;
    }
    if (v66) {
      uint64_t v65 = *(void *)(*(void *)v60 + 16) + 6;
    }
    unint64_t v67 = *(unsigned int *)(v15 + 44);
    unint64_t v68 = (v67 & 0x7FFFFF) != 0
        ? ((v61 + 16 * ((v67 >> 23) & 1) + ((v67 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v15 + 40)
        : 0;
    uint64_t v72 = *(void *)(v68 + 24);
    unint64_t v70 = v68 + 24;
    uint64_t v71 = v72;
    uint64_t v73 = v72 - 8;
    BOOL v74 = !v72 || v71 == v70;
    uint64_t v75 = v74 ? 0 : v73;
    ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v75 + 32));
    if (*(void *)(*(void *)(v76 + 72) + 32 * v65 + 24) != v90[v59]) {
      break;
    }
    uint64_t v77 = *(void *)(((v61
                      + 16 * (((unint64_t)*(unsigned int *)(v15 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(v15 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v15 + 40));
    if (v77) {
      uint64_t v78 = v77 - 8;
    }
    else {
      uint64_t v78 = 0;
    }
    ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v78 + 32));
    v93[v59++] = *(void *)(*(void *)(v79 + 72) + 32 * v65 + 24);
    int v60 = (mlir::Value *)((char *)v60 + 8);
    v62 -= 8;
    if (!v62) {
      goto LABEL_113;
    }
  }
LABEL_116:
  if (v87 != v89) {
    free(v87);
  }
  if (v90 != (void *)v92) {
    free(v90);
  }
  if (v93 != v95) {
    free(v93);
  }
  return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::detail::TypedValue<mlir::IntegerType>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"arith.andi";
    unint64_t v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::AndIOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::OpBuilder::create<mlir::scf::IfOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::Value &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v18, a2, v9);
    uint64_t NextResultAtOffset = *a3;
    uint64_t v12 = a3[1];
    uint64_t v13 = a3[3];
    if (v12) {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v12);
    }
    mlir::ValueRange::ValueRange((unint64_t *)v19, NextResultAtOffset, v13 - v12);
    mlir::TypeRange::TypeRange(v17, v19[0], v19[1]);
    mlir::scf::IfOp::build(a1, v18, v17[0], v17[1], *a4);
  }
  __int16 v20 = 1283;
  unint64_t v19[2] = (uint64_t)"scf.if";
  unint64_t v19[3] = 6;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v16 = 259;
  llvm::operator+(v19, (uint64_t *)&v15, (uint64_t)v18);
  llvm::report_fatal_error((llvm::Twine *)v18, 1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::SelectOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.select", (const unsigned __int8 *)0xC, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"arith.select";
    unint64_t v19[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::SelectOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SelectOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t *llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,void>(uint64_t a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, mlir::detail::OpResultImpl *a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = (a2 - *(void *)a1) >> 3;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  unint64_t v13 = *(unsigned int *)(a1 + 12);
  unsigned int v15 = *(_DWORD *)(a1 + 8);
  unint64_t v16 = a6 - a4;
  unint64_t v17 = a6 - a4 + v14;
  if (*(void *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      uint64_t v11 = *(void *)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    __int16 v18 = (uint64_t *)(v11 + 8 * v12);
    uint64_t v19 = v12;
    __int16 v20 = (uint64_t *)(v11 + 8 * v14);
    unint64_t v21 = v20 - v18;
    if (v21 < v16)
    {
      unsigned int v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        BOOL v23 = v18;
        do
        {
          *v23++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
          --v21;
        }
        while (v21);
      }
      if (this != a5 || v8 != a6)
      {
        if (this != a5)
        {
          while (1)
            *v20++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
        }
        do
          *v20++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
        while (a6 != v8);
      }
      return v18;
    }
    uint64_t v26 = 8 * v16;
    unint64_t v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    uint64_t v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8) {
      goto LABEL_33;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v28);
    uint64_t v31 = 8 * a6;
    unint64_t v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      uint64_t v34 = 8 * v28 + *(void *)a1;
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        uint64_t v35 = (v32 >> 3) + 1;
        uint64_t v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v30 = (void *)((char *)v30 + v36 * 8);
        uint64_t v33 = &v29[v36];
        unint64_t v37 = (long long *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        unint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *unint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      uint64_t v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18) {
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    }
    if (this != a5 || a6 != v8)
    {
      if (this != a5)
      {
        while (1)
          *v18++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
      }
      unsigned long long v42 = v18;
      do
        *v42++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  BOOL v24 = this != a5;
  if (a6 != v8 || this != a5)
  {
    uint64_t v25 = (uint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
    }
    do
      *v25++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
    while (a6 != v8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (uint64_t *)(v11 + 8 * v12);
}

void anonymous namespace'::ConditionPropagation::~ConditionPropagation(_anonymous_namespace_::ConditionPropagation *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ConditionPropagation::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t I1Type = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&I1Type);
  if (DefiningOp && (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)) & 1) != 0) {
    return 0;
  }
  uint64_t v28 = (mlir::OpBuilder *)(a3 + 8);
  uint64_t I1Type = mlir::Builder::getI1Type((mlir::Builder *)(a3 + 8));
  BOOL v7 = **(void ***)(*(void *)(a2 + 72) + 24);
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = a2 + 64;
    while (1)
    {
      unint64_t v12 = *(unsigned int *)(a2 + 44);
      if ((v12 & 0x7FFFFF) != 0)
      {
        unint64_t v13 = (mlir::Region *)(((v11 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                             + 32 * *(unsigned int *)(a2 + 40));
        uint64_t v14 = (void *)*v7;
        unsigned int v15 = *(mlir::Block **)(v7[2] + 16);
        if (v15) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = (void *)*v7;
        unsigned int v15 = *(mlir::Block **)(v7[2] + 16);
        if (v15)
        {
LABEL_11:
          Parent = (mlir::Region *)mlir::Block::getParent(v15);
          if (v13 == Parent) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      Parent = 0;
      if (!v13) {
        goto LABEL_16;
      }
LABEL_15:
      if (mlir::Region::isProperAncestor(v13, Parent))
      {
LABEL_16:
        if (!v9)
        {
          uint64_t v17 = *(void *)(a2 + 24);
          IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)v28, I1Type, 1uLL);
          uint64_t v9 = (void *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::IntegerAttr>(v28, v17, &I1Type, &IntegerAttr)- 16);
        }
        __int16 v18 = v9;
        uint64_t v19 = v7[2];
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v19);
        __int16 v20 = (void *)v7[1];
        if (v20)
        {
          *__int16 v20 = *v7;
          if (*v7) {
            *(void *)(*v7 + 8) = v7[1];
          }
        }
        v7[3] = v9;
        v7[1] = v9;
        uint64_t v21 = *v9;
        *BOOL v7 = *v9;
        if (!v21) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      unint64_t v22 = *(unsigned int *)(a2 + 44);
      if ((v22 & 0x7FFFFF) != 0)
      {
        unint64_t v23 = ((v11 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40)
            + 24;
        BOOL v24 = *(mlir::Block **)(v7[2] + 16);
        if (v24) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v23 = 24;
        BOOL v24 = *(mlir::Block **)(v7[2] + 16);
        if (v24)
        {
LABEL_25:
          uint64_t v25 = (mlir::Region *)mlir::Block::getParent(v24);
          if ((mlir::Region *)v23 != v25 && !mlir::Region::isProperAncestor((mlir::Region *)v23, v25)) {
            goto LABEL_8;
          }
          goto LABEL_30;
        }
      }
      if (!mlir::Region::isProperAncestor((mlir::Region *)v23, 0)) {
        goto LABEL_8;
      }
LABEL_30:
      if (!v10)
      {
        uint64_t v26 = *(void *)(a2 + 24);
        IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)v28, I1Type, 0);
        char v10 = (void *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::IntegerAttr>(v28, v26, &I1Type, &IntegerAttr)- 16);
      }
      __int16 v18 = v10;
      uint64_t v19 = v7[2];
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v19);
      unint64_t v27 = (void *)v7[1];
      if (v27)
      {
        *unint64_t v27 = *v7;
        if (*v7) {
          *(void *)(*v7 + 8) = v7[1];
        }
      }
      v7[3] = v10;
      v7[1] = v10;
      uint64_t v21 = *v10;
      *BOOL v7 = *v10;
      if (!v21) {
        goto LABEL_7;
      }
LABEL_6:
      *(void *)(v21 + 8) = v7;
LABEL_7:
      *__int16 v18 = v7;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v19);
      char v8 = 1;
LABEL_8:
      BOOL v7 = v14;
      if (!v14) {
        return v8 & 1;
      }
    }
  }
  char v8 = 0;
  return v8 & 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::IntegerAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void **a4)
{
  v22[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.constant";
    void v20[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  uint64_t v11 = *a3;
  unint64_t v12 = *a4;
  if (v12) {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v22, v11, (uint64_t)v12, v13);
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void anonymous namespace'::ConvertTrivialIfToSelect::~ConvertTrivialIfToSelect(_anonymous_namespace_::ConvertTrivialIfToSelect *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ConvertTrivialIfToSelect::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v40[6] = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a2 + 36)) {
    return 0;
  }
  uint64_t v5 = a2 + 64;
  uint64_t v35 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t v6 = *(void *)(((a2 + 64 + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8) + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v7 + 32));
  if ((*(unsigned char *)(v8 + 46) & 0x80) != 0)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    uint64_t v10 = *(unsigned int *)(v8 + 68);
    unint64_t v11 = *(unsigned int *)(a2 + 44);
    if ((v11 & 0x7FFFFF) != 0)
    {
LABEL_7:
      unint64_t v12 = ((v5 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(a2 + 40);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = *(unsigned int *)(a2 + 44);
    if ((v11 & 0x7FFFFF) != 0) {
      goto LABEL_7;
    }
  }
  unint64_t v12 = 0;
LABEL_11:
  uint64_t v15 = *(void *)(v12 + 24);
  unint64_t v13 = v12 + 24;
  uint64_t v14 = v15;
  uint64_t v16 = v15 - 8;
  if (v15) {
    BOOL v17 = v14 == v13;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v16;
  }
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v18 + 32));
  if ((*(unsigned char *)(v19 + 46) & 0x80) == 0)
  {
    unint64_t v38 = v40;
    uint64_t v39 = 0x600000000;
    if (!*(_DWORD *)(a2 + 36)) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned int *)(v19 + 68);
  unint64_t v38 = v40;
  uint64_t v39 = 0x600000000;
  if (!v10 || !v21)
  {
    if (!*(_DWORD *)(a2 + 36)) {
      goto LABEL_36;
    }
LABEL_39:
    uint64_t v33 = *(void *)(a2 + 24);
    LOBYTE(v36) = 0;
    mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>(a3 + 8, v33, (uint64_t)&v38, &v35);
  }
  uint64_t v22 = 0;
  uint64_t v23 = v9 + 24;
  uint64_t v24 = 32 * v10 - 32;
  uint64_t v25 = 32 * v21 - 32;
  do
  {
    uint64_t v26 = *(void *)(v20 + v22 + 24);
    uint64_t v36 = *(void **)(v23 + v22);
    v37[0] = v26;
    unint64_t v27 = *(unsigned int *)(a2 + 44);
    if ((v27 & 0x7FFFFF) != 0)
    {
      uint64_t v28 = (mlir::Block *)(((v5 + 16 * ((v27 >> 23) & 1) + ((v27 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(a2 + 40));
      if (v28 == mlir::Value::getParentRegion((mlir::Value *)&v36)) {
        goto LABEL_29;
      }
    }
    else if (!mlir::Value::getParentRegion((mlir::Value *)&v36))
    {
      goto LABEL_29;
    }
    unint64_t v29 = *(unsigned int *)(a2 + 44);
    if ((v29 & 0x7FFFFF) != 0)
    {
      uint64_t v30 = (mlir::Block *)(((v5 + 16 * ((v29 >> 23) & 1) + ((v29 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(a2 + 40)
                          + 24);
      if (v30 != mlir::Value::getParentRegion((mlir::Value *)v37)) {
        goto LABEL_32;
      }
    }
    else if (mlir::Value::getParentRegion((mlir::Value *)v37) != (mlir::Block *)24)
    {
      goto LABEL_32;
    }
LABEL_29:
    uint64_t v31 = *((void *)v36 + 1);
    uint64_t v32 = v39;
    if (v39 >= (unint64_t)HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v40, v39 + 1, 8);
      uint64_t v32 = v39;
    }
    v38[v32] = v31 & 0xFFFFFFFFFFFFFFF8;
    LODWORD(v39) = v39 + 1;
LABEL_32:
    if (v24 == v22) {
      break;
    }
    BOOL v17 = v25 == v22;
    v22 += 32;
  }
  while (!v17);
  if (v39 != *(_DWORD *)(a2 + 36)) {
    goto LABEL_39;
  }
LABEL_36:
  if (v38 != v40) {
    free(v38);
  }
  return 0;
}

void anonymous namespace'::RemoveEmptyElseBranch::~RemoveEmptyElseBranch(_anonymous_namespace_::RemoveEmptyElseBranch *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RemoveEmptyElseBranch::matchAndRewrite(uint64_t a1, mlir::Operation *a2)
{
  if (*((_DWORD *)a2 + 9)) {
    return 0;
  }
  unint64_t v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    unint64_t v4 = (((unint64_t)a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)a2 + 10);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5 != v4 + 24 && v5 != 0)
    {
LABEL_14:
      uint64_t v8 = *(void *)(v5 + 32);
      uint64_t v9 = v5 + 24;
      if (v8 != v9 && *(void *)(v8 + 8) == v9) {
        mlir::Operation::cloneWithoutRegions(a2);
      }
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x18];
    if (MEMORY[0x18] != 24 && MEMORY[0x18] != 0) {
      goto LABEL_14;
    }
  }
  return 0;
}

uint64_t sub_211867DF0(mlir::Operation *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v17 = mlir::OpBuilder::insert(v16, a1);
  unint64_t v18 = *(unsigned int *)(v14 + 44);
  if ((v18 & 0x7FFFFF) != 0) {
    unint64_t v19 = ((v14 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
        + 32 * *(unsigned int *)(v14 + 40);
  else {
    unint64_t v19 = 0;
  }
  unint64_t v20 = (((unint64_t)v17
        + 16 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1)
        + (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v17 + 10);
  (**(void (***)(uint64_t, unint64_t, unint64_t, void))v15)(v15, v19, v20, *(void *)(v20 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v14);
  return 1;
}

void anonymous namespace'::RemoveStaticCondition::~RemoveStaticCondition(_anonymous_namespace_::RemoveStaticCondition *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RemoveStaticCondition::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 24);
  unint64_t v26 = 0;
  uint64_t v27 = v5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v27);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
    {
      uint64_t v30 = v32;
      uint64_t v31 = 0x100000000;
      mlir::Operation::fold(v7, 0, 0, (uint64_t)&v30);
      uint64_t v8 = *(void *)v30;
      BOOL v9 = mlir::BoolAttr::classof((void *)(*(void *)v30 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
      BOOL v11 = (v8 & 0xFFFFFFFFFFFFFFF8) != 0 && v9;
      if (v11) {
        unint64_t v26 = v10;
      }
      if (v30 != v32) {
        free(v30);
      }
      if (v11)
      {
        BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v26);
        unint64_t v13 = *(unsigned int *)(a2 + 44);
        int v14 = v13 & 0x7FFFFF;
        if (Value)
        {
          if (v14) {
            unint64_t v15 = ((a2 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          }
                + 32 * *(unsigned int *)(a2 + 40);
          else {
            unint64_t v15 = 0;
          }
          mlir::ValueRange::ValueRange(v29, 0, 0);
          uint64_t v18 = v29[0];
          uint64_t v19 = v29[1];
          uint64_t v20 = *(void *)(v15 + 8);
          goto LABEL_24;
        }
        if (v14)
        {
          unint64_t v17 = ((a2 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(a2 + 40);
          if (*(void *)(v17 + 24) == v17 + 24) {
            goto LABEL_31;
          }
        }
        else
        {
          if (MEMORY[0x18] == 24)
          {
LABEL_31:
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
            return 1;
          }
          unint64_t v17 = 0;
        }
        mlir::ValueRange::ValueRange(v28, 0, 0);
        uint64_t v18 = v28[0];
        uint64_t v19 = v28[1];
        uint64_t v20 = *(void *)(v17 + 32);
LABEL_24:
        if (v20) {
          uint64_t v21 = (ZinIrHalH13g **)(v20 - 8);
        }
        else {
          uint64_t v21 = 0;
        }
        mlir::Block::getTerminator(v21);
        uint64_t v23 = v22;
        if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
        {
          uint64_t v24 = *(void *)(v22 + 72);
          unint64_t v25 = *(unsigned int *)(v22 + 68);
        }
        else
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v30, v24, v25);
        mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v21, a2, v18, v19);
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a3 + 24))(a3, a2, v30, v31);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v23);
        return 1;
      }
    }
  }
  return 0;
}

void anonymous namespace'::RemoveUnusedResults::~RemoveUnusedResults(_anonymous_namespace_::RemoveUnusedResults *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RemoveUnusedResults::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = (char *)v22;
  uint64_t v21 = 0x400000000;
  uint64_t v3 = *(unsigned int *)(a2 + 36);
  if (v3) {
    uint64_t v4 = a2 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i))
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
        uint64_t v9 = v21;
        if (v21 >= (unint64_t)HIDWORD(v21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v21 + 1, 8);
          uint64_t v9 = v21;
        }
        *(void *)&v20[8 * v9] = NextResultAtOffset;
        LODWORD(v21) = v21 + 1;
      }
    }
    unint64_t v10 = v20;
    if (v21 != *(_DWORD *)(a2 + 36))
    {
      unint64_t v17 = v19;
      uint64_t v18 = 0x400000000;
      if (v21)
      {
        unsigned int v11 = 0;
        uint64_t v12 = 8 * v21;
        do
        {
          uint64_t v13 = *(void *)(*(void *)v10 + 8);
          if (v11 >= HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v11 + 1, 8);
            unsigned int v11 = v18;
          }
          *((void *)v17 + v11) = v13 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v11 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          v10 += 8;
          v12 -= 8;
        }
        while (v12);
      }
      uint64_t v14 = *(void *)(a2 + 24);
      uint64_t v16 = *(void **)(*(void *)(a2 + 72) + 24);
      mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,4u> &,mlir::detail::TypedValue<mlir::IntegerType>>(a3 + 8, v14, (uint64_t)&v17, (uint64_t *)&v16);
    }
    if (v20 != (char *)v22) {
      free(v20);
    }
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,4u> &,mlir::detail::TypedValue<mlir::IntegerType>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v17, a2, v9);
    mlir::ValueRange::ValueRange(v16, *(void *)a3, *(unsigned int *)(a3 + 8));
    mlir::scf::IfOp::build(a1, (unsigned int *)v17, v16[0], v16[1], *a4);
  }
  __int16 v15 = 1283;
  v14[2] = (uint64_t)"scf.if";
  v14[3] = 6;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v13 = 259;
  llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v17);
  llvm::report_fatal_error((llvm::Twine *)v17, 1);
}

void anonymous namespace'::RemoveUnusedResults::transferBody(uint64_t a1, ZinIrHalH13g **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v20, 0, 0);
  mlir::RewriterBase::mergeBlocks(a5, a1, (uint64_t)a2, v20[0], v20[1]);
  mlir::Block::getTerminator(a2);
  uint64_t v11 = v10;
  unint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (a4)
  {
    unsigned int v12 = 0;
    uint64_t v13 = 8 * a4;
    do
    {
      uint64_t v14 = *(void *)(*(void *)a3 + 8) & 7;
      if (*(void *)a3) {
        BOOL v15 = v14 == 6;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15) {
        uint64_t v14 = (*(_DWORD *)(*(void *)a3 + 16) + 6);
      }
      uint64_t v16 = *(void *)(v11[9] + 32 * v14 + 24);
      if (v12 >= HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v12 + 1, 8);
        unsigned int v12 = v18;
      }
      *((void *)v17 + v12) = v16;
      unsigned int v12 = v18 + 1;
      LODWORD(v18) = v18 + 1;
      a3 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a5 + 72))(a5, v11);
  mlir::ValueRange::ValueRange((unint64_t *)&v21, (uint64_t)v17, v18);
  mlir::Operation::setOperands(v11, v21, v22);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a5 + 80))(a5, v11);
  if (v17 != v19) {
    free(v17);
  }
}

void anonymous namespace'::ReplaceIfYieldWithConditionOrValue::~ReplaceIfYieldWithConditionOrValue(_anonymous_namespace_::ReplaceIfYieldWithConditionOrValue *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ReplaceIfYieldWithConditionOrValue::matchAndRewrite(uint64_t a1, uint64_t a2, void *a3)
{
  v69[1] = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a2 + 36)) {
    return 0;
  }
  uint64_t v5 = a2 + 64;
  uint64_t v6 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  if (v6) {
    uint64_t v7 = (ZinIrHalH13g **)(v6 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::Block::getTerminator(v7);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(((v5
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 24);
  if (v10) {
    uint64_t v11 = (ZinIrHalH13g **)(v10 - 8);
  }
  else {
    uint64_t v11 = 0;
  }
  mlir::Block::getTerminator(v11);
  uint64_t v13 = v12;
  a3[3] = *(void *)(a2 + 16);
  a3[4] = a2;
  int v60 = (mlir::OpBuilder *)(a3 + 1);
  uint64_t I1Type = mlir::Builder::getI1Type((mlir::Builder *)(a3 + 1));
  if ((*(unsigned char *)(v9 + 46) & 0x80) != 0)
  {
    uint64_t v15 = *(unsigned int *)(v9 + 68);
    uint64_t v16 = *(void *)(v9 + 72);
    if ((*(unsigned char *)(v13 + 46) & 0x80) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    if ((*(unsigned char *)(v13 + 46) & 0x80) != 0)
    {
LABEL_10:
      uint64_t v17 = *(unsigned int *)(v13 + 68);
      uint64_t v18 = *(void *)(v13 + 72);
      char v19 = 0;
      uint64_t v20 = *(unsigned int *)(a2 + 36);
      if (v20) {
        uint64_t v21 = a2 - 16;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v15) {
        goto LABEL_14;
      }
      return v19 & 1;
    }
  }
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v19 = 0;
  uint64_t v20 = *(unsigned int *)(a2 + 36);
  if (v20) {
    uint64_t v21 = a2 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v15)
  {
LABEL_14:
    if (v17)
    {
      uint64_t v58 = I1Type;
      uint64_t v59 = a2;
      if (v20)
      {
        char v19 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *(void **)(v16 + 32 * v22 + 24);
          uint64_t v24 = *(void **)(v18 + 32 * v22 + 24);
          uint64_t NextResultAtOffset = (void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22);
          unint64_t v63 = v23;
          uint64_t v64 = (uint64_t)v24;
          uint64_t v65 = NextResultAtOffset;
          if (v23 == v24)
          {
            uint64_t v39 = *NextResultAtOffset;
            if (*NextResultAtOffset)
            {
              do
              {
                long long v40 = (void *)v39[1];
                if (v40)
                {
                  *long long v40 = *v39;
                  if (*v39) {
                    *(void *)(*v39 + 8) = v39[1];
                  }
                }
                v39[3] = v23;
                v39[1] = v23;
                uint64_t v41 = *v23;
                *uint64_t v39 = *v23;
                if (v41) {
                  *(void *)(v41 + 8) = v39;
                }
                *uint64_t v23 = v39;
                uint64_t v39 = *NextResultAtOffset;
              }
              while (*NextResultAtOffset);
              char v19 = 1;
            }
            goto LABEL_52;
          }
          unint64_t v61 = 0;
          unint64_t v62 = 0;
          BOOL v66 = v23;
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v66);
          if (!DefiningOp) {
            goto LABEL_52;
          }
          uint64_t v27 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
            goto LABEL_52;
          }
          unint64_t v67 = v69;
          uint64_t v68 = 0x100000000;
          mlir::Operation::fold(v27, 0, 0, (uint64_t)&v67);
          uint64_t v28 = *(void *)v67;
          BOOL v29 = mlir::BoolAttr::classof((void *)(*(void *)v67 & 0xFFFFFFFFFFFFFFF8));
          BOOL v30 = (v28 & 0xFFFFFFFFFFFFFFF8) != 0 && v29;
          if (v30) {
            unint64_t v62 = v28 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v67 != v69) {
            free(v67);
          }
          if (!v30) {
            goto LABEL_52;
          }
          BOOL v66 = (void *)v64;
          uint64_t v31 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
          if (!v31) {
            goto LABEL_52;
          }
          uint64_t v32 = v31;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v31 + 48))) {
            goto LABEL_52;
          }
          unint64_t v67 = v69;
          uint64_t v68 = 0x100000000;
          mlir::Operation::fold(v32, 0, 0, (uint64_t)&v67);
          uint64_t v33 = *(void *)v67;
          BOOL v34 = mlir::BoolAttr::classof((void *)(*(void *)v67 & 0xFFFFFFFFFFFFFFF8));
          BOOL v35 = (v33 & 0xFFFFFFFFFFFFFFF8) != 0 && v34;
          if (v35) {
            unint64_t v61 = v33 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v67 != v69) {
            free(v67);
          }
          if (!v35) {
            goto LABEL_52;
          }
          BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v62);
          BOOL v37 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v61);
          if (Value || !v37 || !*v65) {
            goto LABEL_66;
          }
          BOOL v57 = v37;
          uint64_t v38 = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v63) + 48);
          if (*(_UNKNOWN **)(v38 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            unint64_t v67 = *(void **)(v38 + 8);
            uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v67);
          }
          else
          {
            uint64_t Values = *(void *)(v38 + 24);
          }
          uint64_t v56 = *(void *)(v59 + 24);
          unint64_t v67 = *(void **)(*(void *)(v59 + 72) + 24);
          char v19 = 1;
          uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v60, v58, 1uLL);
          BOOL v66 = (void *)((*(uint64_t (**)(uint64_t, mlir::OpBuilder *, uint64_t, uint64_t, void))(*(void *)Values + 24))(Values, v60, IntegerAttr, v58, *(void *)(v59 + 24))- 16);
          unsigned long long v43 = mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::OpResult>(v60, v56, (uint64_t *)&v67, (uint64_t *)&v66);
          unint64_t v44 = (void **)v65;
          uint64_t v45 = (void *)*v65;
          if (*v65) {
            break;
          }
          if (Value && !v57)
          {
LABEL_67:
            unint64_t v49 = (void **)v65;
            unint64_t v50 = (void *)*v65;
            if (*v65)
            {
              uint64_t v51 = *(uint64_t **)(*(void *)(v59 + 72) + 24);
              do
              {
                BOOL v52 = (void *)v50[1];
                if (v52)
                {
                  *BOOL v52 = *v50;
                  if (*v50) {
                    *(void *)(*v50 + 8) = v50[1];
                  }
                }
                v50[3] = v51;
                v50[1] = v51;
                uint64_t v53 = *v51;
                *unint64_t v50 = *v51;
                if (v53) {
                  *(void *)(v53 + 8) = v50;
                }
                *uint64_t v51 = (uint64_t)v50;
                unint64_t v50 = *v49;
                char v19 = 1;
              }
              while (*v49);
            }
          }
LABEL_52:
          if (++v22 == v15 || v22 == v17 || v22 == v20) {
            return v19 & 1;
          }
        }
        uint64_t v46 = (uint64_t *)((char *)v43 - 16);
        BOOL v37 = v57;
        do
        {
          int v47 = (void *)v45[1];
          if (v47)
          {
            *int v47 = *v45;
            if (*v45) {
              *(void *)(*v45 + 8) = v45[1];
            }
          }
          v45[3] = v46;
          v45[1] = v46;
          uint64_t v48 = *v46;
          *uint64_t v45 = *v46;
          if (v48) {
            *(void *)(v48 + 8) = v45;
          }
          *uint64_t v46 = (uint64_t)v45;
          uint64_t v45 = *v44;
        }
        while (*v44);
        char v19 = 1;
LABEL_66:
        if (Value && !v37) {
          goto LABEL_67;
        }
        goto LABEL_52;
      }
    }
  }
  return v19 & 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::OpResult>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"arith.xori";
    unint64_t v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::AndIOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ParallelOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

BOOL mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id;
}

void llvm::SmallVectorImpl<mlir::scf::ReduceOp>::append<mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>,void>(uint64_t a1, uint64_t a2, ZinIrHalH13g **a3)
{
  uint64_t v6 = *(ZinIrHalH13g **)a2;
  uint64_t v7 = *a3;
  if (*(ZinIrHalH13g **)a2 == *a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(ZinIrHalH13g **)(a2 + 8);
    char v10 = *(uint64_t (**)(void))(a2 + 16);
    do
    {
      uint64_t v11 = (ZinIrHalH13g *)*((void *)v6 + 1);
      uint64_t v6 = v9;
      if (v11 != v9)
      {
        uint64_t v6 = v11;
        while (1)
        {
          ZinIrHalH13g::~ZinIrHalH13g(v6);
          if (v10()) {
            break;
          }
          uint64_t v6 = (ZinIrHalH13g *)*((void *)v6 + 1);
          if (v6 == v9)
          {
            uint64_t v6 = v9;
            break;
          }
        }
      }
      ++v8;
    }
    while (v6 != v7);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  if (v8 + v12 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8 + v12, 8);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
  }
  uint64_t v13 = *(ZinIrHalH13g **)a2;
  uint64_t v14 = *a3;
  if (*(ZinIrHalH13g **)a2 != v14)
  {
    uint64_t v15 = *(ZinIrHalH13g **)(a2 + 8);
    __int16 v16 = *(uint64_t (**)(void))(a2 + 16);
    uint64_t v17 = *(uint64_t (**)(void))(a2 + 24);
    __int16 v18 = (void *)(*(void *)a1 + 8 * v12);
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
      *__int16 v18 = v17();
      char v19 = (ZinIrHalH13g *)*((void *)v13 + 1);
      uint64_t v13 = v15;
      if (v19 != v15)
      {
        uint64_t v13 = v19;
        while (1)
        {
          ZinIrHalH13g::~ZinIrHalH13g(v13);
          if (v16()) {
            break;
          }
          uint64_t v13 = (ZinIrHalH13g *)*((void *)v13 + 1);
          if (v13 == v15)
          {
            uint64_t v13 = v15;
            break;
          }
        }
      }
      ++v18;
    }
    while (v13 != v14);
    LODWORD(v12) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v12 + v8;
}

void anonymous namespace'::ParallelOpSingleOrZeroIterationDimsFolder::~ParallelOpSingleOrZeroIterationDimsFolder(_anonymous_namespace_::ParallelOpSingleOrZeroIterationDimsFolder *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

void anonymous namespace'::ParallelOpSingleOrZeroIterationDimsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v117[6] = *MEMORY[0x263EF8340];
  uint64_t v83 = *(void *)(a2 + 24);
  unint64_t v115 = v117;
  uint64_t v116 = 0x600000000;
  uint64_t v112 = v114;
  uint64_t v113 = 0x600000000;
  uint64_t v109 = v111;
  uint64_t v110 = 0x600000000;
  v89[0] = 0;
  v89[1] = 0;
  unsigned int v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  unsigned int v96 = 0;
  unint64_t v3 = *(unsigned int *)(a2 + 44);
  uint64_t v4 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
  uint64_t v86 = *v4;
  uint64_t v82 = a2 + 64;
  if ((v3 & 0x800000) != 0)
  {
    uint64_t v5 = *(char **)(a2 + 72);
    if (HIBYTE(*(_DWORD *)(a2 + 44))) {
      uint64_t v6 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1] + v7;
    uint64_t v9 = (uint64_t)&v5[32 * v7];
  }
  else
  {
    uint64_t v5 = 0;
    if (HIBYTE(*(_DWORD *)(a2 + 44))) {
      uint64_t v81 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v7 = *v81;
    uint64_t v8 = v81[1] + v7;
    uint64_t v9 = 32 * v7;
  }
  uint64_t v88 = v8 - v7;
  unsigned int v10 = v4[2];
  uint64_t v11 = &v5[32 * v8];
  uint64_t v12 = *(void *)((((unint64_t)v4 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  if (v12) {
    uint64_t v13 = v12 - 8;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v101, *(void *)(v13 + 48), (uint64_t)(*(void *)(v13 + 56) - *(void *)(v13 + 48)) >> 3);
  uint64_t v14 = v101;
  uint64_t v87 = v102;
  uint64_t v101 = v5;
  uint64_t v102 = 0;
  uint64_t v103 = v9;
  uint64_t v104 = 0;
  uint64_t v105 = &v5[32 * v8];
  uint64_t v106 = 0;
  uint64_t v107 = v14;
  uint64_t v108 = 0;
  if (!v86)
  {
LABEL_38:
    unint64_t v36 = *(unsigned int *)(a2 + 44);
    uint64_t v37 = (v36 >> 23) & 1;
    uint64_t v38 = (int *)(v82 + 16 * v37);
    if (v116 != *v38)
    {
      unsigned int v39 = BYTE3(v36);
      if (v116)
      {
        uint64_t v40 = *(void *)(a2 + 24);
        if (!v39) {
          uint64_t v38 = 0;
        }
        int v41 = *v38;
        int v42 = v38[1];
        int v44 = v38[2];
        int v43 = v38[3];
        if ((v36 & 0x800000) != 0) {
          uint64_t v45 = *(void *)(a2 + 72);
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v46 = (v42 + v41 + v44);
        uint64_t v101 = (void *)(v45 + 32 * v46);
        uint64_t v102 = (v43 + v46) - v46;
        uint64_t v98 = 0;
        mlir::OpBuilder::create<mlir::scf::ParallelOp,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,mlir::OperandRange,decltype(nullptr)>(a3 + 1, v40, (uint64_t)&v115, (uint64_t)&v112, (uint64_t)&v109, (uint64_t)&v101);
      }
      uint64_t v101 = &v103;
      uint64_t v102 = 0x600000000;
      if (!v39) {
        uint64_t v38 = 0;
      }
      uint64_t v47 = (v38[1] + *v38 + v38[2]);
      unint64_t v48 = (v38[3] + v47) - v47;
      if (v48 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, &v103, v48, 8);
        unint64_t v36 = *(unsigned int *)(a2 + 44);
        uint64_t v37 = (v36 >> 23) & 1;
      }
      uint64_t v49 = *(void *)(((v82 + 16 * v37 + ((v36 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(a2 + 40)
                      + 8);
      uint64_t v50 = v49 - 8;
      if (!v49) {
        uint64_t v50 = 0;
      }
      uint64_t v51 = (ZinIrHalH13g **)(v50 + 32);
      BOOL v52 = *(ZinIrHalH13g **)(v50 + 40);
      if (v52 != (ZinIrHalH13g *)(v50 + 32))
      {
        uint64_t v53 = *v51;
        if (v52 != *v51)
        {
          BOOL v54 = (uint64_t **)(a3 + 1);
          do
          {
            while (1)
            {
              ZinIrHalH13g::~ZinIrHalH13g(v52);
              uint64_t v56 = v55;
              if (v55)
              {
                if (*(_UNKNOWN **)(*(void *)(v55 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id) {
                  break;
                }
              }
              mlir::OpBuilder::clone(v54, (mlir::Operation *)v55, (mlir::IRMapping *)v89);
              BOOL v52 = (ZinIrHalH13g *)*((void *)v52 + 1);
              if (v52 == v53) {
                goto LABEL_79;
              }
            }
            uint64_t v57 = *(void *)(((v55
                              + 16 * (((unint64_t)*(unsigned int *)(v55 + 44) >> 23) & 1)
                              + (((unint64_t)*(unsigned int *)(v55 + 44) >> 21) & 0x7F8)
                              + 71) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(v55 + 40)
                            + 8);
            if (v57) {
              uint64_t v58 = v57 - 8;
            }
            else {
              uint64_t v58 = 0;
            }
            if (*(unsigned char *)(a2 + 47)) {
              uint64_t v59 = (_DWORD *)(a2 + 80);
            }
            else {
              uint64_t v59 = 0;
            }
            uint64_t v60 = *(void *)(*(void *)(a2 + 72)
                            + 32 * (v59[1] + *v59 + v59[2])
                            + 32 * v102
                            + 24);
            unint64_t v97 = **(void **)(v58 + 48);
            uint64_t v98 = 0;
            char v61 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v89, &v97, &v98);
            unint64_t v62 = v98;
            if ((v61 & 1) == 0)
            {
              unint64_t v62 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v89, (uint64_t)&v97, &v97, v98);
              *unint64_t v62 = v97;
              v62[1] = 0;
            }
            v62[1] = v60;
            unint64_t v63 = *(void *)(*(void *)(v58 + 48) + 8);
            unint64_t v64 = *(void *)(*(void *)(v56 + 72) + 24);
            unint64_t v97 = v64;
            uint64_t v98 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v89, &v97, &v98)&& v98 != (void *)v89[0] + 2 * v90)
            {
              unint64_t v64 = v98[1];
            }
            unint64_t v97 = v63;
            uint64_t v98 = 0;
            char v65 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v89, &v97, &v98);
            BOOL v66 = v98;
            if ((v65 & 1) == 0)
            {
              BOOL v66 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v89, (uint64_t)&v97, &v97, v98);
              *BOOL v66 = v97;
              v66[1] = 0;
            }
            v66[1] = v64;
            unint64_t v67 = (ZinIrHalH13g **)(v58 + 32);
            uint64_t v68 = *(ZinIrHalH13g **)(v58 + 40);
            if (v68 != (ZinIrHalH13g *)(v58 + 32))
            {
              for (i = *v67; v68 != i; uint64_t v68 = (ZinIrHalH13g *)*((void *)v68 + 1))
              {
                ZinIrHalH13g::~ZinIrHalH13g(v68);
                mlir::OpBuilder::clone(v54, v70, (mlir::IRMapping *)v89);
              }
            }
            mlir::Block::getTerminator((ZinIrHalH13g **)v58);
            unint64_t v72 = *(void *)(*(void *)(v71 + 72) + 24);
            unint64_t v97 = v72;
            uint64_t v98 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v89, &v97, &v98)&& v98 != (void *)v89[0] + 2 * v90)
            {
              unint64_t v72 = v98[1];
            }
            uint64_t v73 = v102;
            if (v102 >= (unint64_t)HIDWORD(v102))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, &v103, v102 + 1, 8);
              uint64_t v73 = v102;
            }
            *((void *)v101 + v73) = v72;
            LODWORD(v102) = v102 + 1;
            BOOL v52 = (ZinIrHalH13g *)*((void *)v52 + 1);
          }
          while (v52 != v53);
        }
      }
LABEL_79:
      mlir::ValueRange::ValueRange(v99, (uint64_t)v101, v102);
      (*((void (**)(mlir::MLIRContext **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v99[0], v99[1]);
      if (v101 != &v103) {
        free(v101);
      }
    }
LABEL_81:
    llvm::deallocate_buffer(v94, (void *)(16 * v96));
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = v10 + v8 - v8;
  uint64_t v20 = v5;
  while (1)
  {
    if (v103 == v9 && v18 == v88) {
      goto LABEL_38;
    }
    if (v105 == v11 && v17 == v19) {
      goto LABEL_38;
    }
    if (v107 == v14 && v16 == v87) {
      goto LABEL_38;
    }
    uint64_t v24 = v20[4 * v15 + 3];
    uint64_t v25 = *(void *)(v103 + 32 * v18 + 24);
    uint64_t v26 = *(void *)&v105[32 * v17 + 24];
    uint64_t v27 = mlir::ValueRange::dereference_iterator(&v107, v16);
    uint64_t v28 = mlir::constantTripCount(v24 | 4, v25 | 4, v26 | 4);
    if (v29)
    {
      if (v28 == 1)
      {
        ConstantIndexOp = mlir::getValueOrCreateConstantIndexOp(a3 + 1, v83, v24 | 4);
        unint64_t v97 = v27;
        uint64_t v98 = 0;
        char v34 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v89, &v97, &v98);
        BOOL v35 = v98;
        if ((v34 & 1) == 0)
        {
          BOOL v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v89, (uint64_t)&v97, &v97, v98);
          *BOOL v35 = v97;
          v35[1] = 0;
        }
        v35[1] = ConstantIndexOp;
        goto LABEL_36;
      }
      if (!v28)
      {
        unint64_t v74 = *(unsigned int *)(a2 + 44);
        if (HIBYTE(*(_DWORD *)(a2 + 44))) {
          uint64_t v75 = (int *)(v82 + 16 * ((v74 >> 23) & 1));
        }
        else {
          uint64_t v75 = 0;
        }
        int v76 = *v75;
        int v77 = v75[1];
        int v79 = v75[2];
        int v78 = v75[3];
        if ((v74 & 0x800000) != 0) {
          uint64_t v80 = *(void *)(a2 + 72);
        }
        else {
          uint64_t v80 = 0;
        }
        mlir::ValueRange::ValueRange(v100, v80 + 32 * (v77 + v76 + v79), (v78 + v77 + v76 + v79) - (unint64_t)(v77 + v76 + v79));
        (*((void (**)(mlir::MLIRContext **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v100[0], v100[1]);
        goto LABEL_81;
      }
    }
    uint64_t v30 = v116;
    if (v116 >= (unint64_t)HIDWORD(v116))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v116 + 1, 8);
      uint64_t v30 = v116;
    }
    v115[v30] = v24;
    LODWORD(v116) = v116 + 1;
    uint64_t v31 = v113;
    if (v113 >= (unint64_t)HIDWORD(v113))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v113 + 1, 8);
      uint64_t v31 = v113;
    }
    *(void *)&v112[8 * v31] = v25;
    LODWORD(v113) = v113 + 1;
    uint64_t v32 = v110;
    if (v110 >= (unint64_t)HIDWORD(v110))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v110 + 1, 8);
      uint64_t v32 = v110;
    }
    *((void *)v109 + v32) = v26;
    LODWORD(v110) = v110 + 1;
LABEL_36:
    uint64_t v20 = v101;
    uint64_t v15 = v102 + 1;
    uint64_t v18 = v104 + 1;
    ++v102;
    ++v104;
    uint64_t v17 = v106 + 1;
    uint64_t v16 = v108 + 1;
    ++v106;
    ++v108;
    if (v101 == v5 && v15 == v86) {
      goto LABEL_38;
    }
  }
}

void mlir::OpBuilder::create<mlir::scf::ParallelOp,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,mlir::OperandRange,decltype(nullptr)>(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.parallel", (const unsigned __int8 *)0xC, Context);
  if (v14)
  {
    mlir::OperationState::OperationState(v25, a2, v13);
    mlir::ValueRange::ValueRange(v24, *(void *)a3, *(unsigned int *)(a3 + 8));
    mlir::ValueRange::ValueRange(v23, *(void *)a4, *(unsigned int *)(a4 + 8));
    mlir::ValueRange::ValueRange(v22, *(void *)a5, *(unsigned int *)(a5 + 8));
    mlir::ValueRange::ValueRange(&v21, *(void *)a6, *(void *)(a6 + 8));
    mlir::scf::ParallelOp::build(a1, (uint64_t)v25, v24[0], v24[1], v23[0], v23[1], v22[0], v22[1], v15);
  }
  __int16 v20 = 1283;
  unint64_t v19[2] = (uint64_t)"scf.parallel";
  unint64_t v19[3] = 12;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v18 = 259;
  llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v25);
  llvm::report_fatal_error((llvm::Twine *)v25, 1);
}

void anonymous namespace'::MergeNestedParallelLoops::~MergeNestedParallelLoops(_anonymous_namespace_::MergeNestedParallelLoops *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MergeNestedParallelLoops::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2 + 64;
  uint64_t v4 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v4) {
    uint64_t v5 = (void *)(v4 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (ZinIrHalH13g *)v5[5];
  if (v6 != (ZinIrHalH13g *)(v5 + 4))
  {
    uint64_t v7 = (ZinIrHalH13g *)v5[4];
    if (v6 != v7 && *((ZinIrHalH13g **)v6 + 1) == v7)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v6);
      uint64_t v12 = *(_UNKNOWN **)(*(void *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id
          ? v11
          : 0;
      uint64_t v75 = v12;
      if (v12)
      {
        uint64_t v13 = (uint64_t *)v5[6];
        char v14 = (uint64_t *)v5[7];
        if (v14 != v13)
        {
          unint64_t v15 = *(unsigned int *)(v12 + 44);
          unint64_t v16 = v12 + 16 * ((v15 >> 23) & 1);
          unsigned int v19 = *(_DWORD *)(v16 + 64);
          __int16 v18 = (unsigned int *)(v16 + 64);
          uint64_t v17 = v19;
          if (!HIBYTE(*(_DWORD *)(v12 + 44))) {
            __int16 v18 = 0;
          }
          do
          {
            if ((v15 & 0x800000) != 0)
            {
              uint64_t v21 = *(void *)(v12 + 72);
              uint64_t v22 = *v13;
              uint64_t v23 = 0;
              if (!v17) {
                goto LABEL_26;
              }
            }
            else
            {
              uint64_t v21 = 0;
              uint64_t v22 = *v13;
              uint64_t v23 = 0;
              if (!v17) {
                goto LABEL_26;
              }
            }
            uint64_t v24 = (void *)(v21 + 24);
            while (*v24 != v22)
            {
              ++v23;
              v24 += 4;
              if (v17 == v23) {
                goto LABEL_27;
              }
            }
LABEL_26:
            if (v23 != v17) {
              return 0;
            }
LABEL_27:
            if ((v15 & 0x800000) != 0)
            {
              uint64_t v25 = *(void *)(v12 + 72);
              uint64_t v26 = *v18;
              unsigned int v27 = v18[1];
              uint64_t v28 = v27 + v26;
              uint64_t v29 = v28 - v26;
              if (!v27) {
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v25 = 0;
              uint64_t v26 = *v18;
              unsigned int v32 = v18[1];
              uint64_t v28 = v32 + v26;
              uint64_t v29 = v28 - v26;
              if (!v32)
              {
LABEL_34:
                uint64_t v30 = 0;
                goto LABEL_35;
              }
            }
            uint64_t v30 = 0;
            uint64_t v31 = (void *)(v25 + 32 * v26 + 24);
            while (*v31 != v22)
            {
              ++v30;
              v31 += 4;
              if (v29 == v30) {
                goto LABEL_36;
              }
            }
LABEL_35:
            if (v30 != v29) {
              return 0;
            }
LABEL_36:
            if ((v15 & 0x800000) != 0)
            {
              uint64_t v33 = *(void *)(v12 + 72);
              unsigned int v34 = v18[2];
              uint64_t v35 = v34 + v28 - v28;
              if (v34) {
                goto LABEL_38;
              }
            }
            else
            {
              uint64_t v33 = 0;
              unsigned int v37 = v18[2];
              uint64_t v35 = v37 + v28 - v28;
              if (v37)
              {
LABEL_38:
                uint64_t v20 = 0;
                unint64_t v36 = (void *)(v33 + 32 * v28 + 24);
                while (*v36 != v22)
                {
                  ++v20;
                  v36 += 4;
                  if (v35 == v20) {
                    goto LABEL_18;
                  }
                }
                goto LABEL_17;
              }
            }
            uint64_t v20 = 0;
LABEL_17:
            if (v20 != v35) {
              return 0;
            }
LABEL_18:
            ++v13;
          }
          while (v13 != v14);
        }
        unint64_t v38 = *(unsigned int *)(a2 + 44);
        uint64_t v39 = HIBYTE(*(_DWORD *)(a2 + 44)) ? v3 + 16 * ((v38 >> 23) & 1) : 0;
        if (!*(_DWORD *)(v39 + 12))
        {
          unint64_t v40 = *(unsigned int *)(v12 + 44);
          int v41 = (unsigned int *)(v12 + 16 * ((v40 >> 23) & 1) + 64);
          uint64_t v42 = HIBYTE(*(_DWORD *)(v12 + 44)) ? v12 + 16 * ((v40 >> 23) & 1) + 64 : 0;
          if (!*(_DWORD *)(v42 + 12))
          {
            uint64_t v43 = *(unsigned int *)(v3 + 16 * ((v38 >> 23) & 1));
            if ((v38 & 0x800000) != 0)
            {
              uint64_t v85 = *(void *)(a2 + 72);
              uint64_t v86 = v43;
              uint64_t v44 = *v41;
              if ((v40 & 0x800000) != 0)
              {
LABEL_54:
                uint64_t v45 = *(void **)(v12 + 72);
                goto LABEL_55;
              }
            }
            else
            {
              uint64_t v85 = 0;
              uint64_t v86 = v43;
              uint64_t v44 = *v41;
              if ((v40 & 0x800000) != 0) {
                goto LABEL_54;
              }
            }
            uint64_t v45 = 0;
LABEL_55:
            int v79 = v45;
            uint64_t v80 = v44;
            _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v81, &v85, (uint64_t *)&v79);
            unint64_t v46 = *(unsigned int *)(a2 + 44);
            if (HIBYTE(*(_DWORD *)(a2 + 44))) {
              uint64_t v47 = (unsigned int *)(v3 + 16 * ((v46 >> 23) & 1));
            }
            else {
              uint64_t v47 = 0;
            }
            uint64_t v48 = *v47;
            unsigned int v49 = v47[1];
            if ((v46 & 0x800000) != 0) {
              uint64_t v50 = *(void *)(a2 + 72);
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t v85 = v50 + 32 * v48;
            uint64_t v86 = v49 + v48 - v48;
            unint64_t v51 = *(unsigned int *)(v75 + 44);
            if (HIBYTE(*(_DWORD *)(v75 + 44))) {
              BOOL v52 = (unsigned int *)(v75 + 16 * ((v51 >> 23) & 1) + 64);
            }
            else {
              BOOL v52 = 0;
            }
            uint64_t v53 = *v52;
            unsigned int v54 = v52[1];
            if ((v51 & 0x800000) != 0) {
              uint64_t v55 = *(void *)(v75 + 72);
            }
            else {
              uint64_t v55 = 0;
            }
            int v77 = (void *)(v55 + 32 * v53);
            uint64_t v78 = v54 + v53 - v53;
            _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v79, &v85, (uint64_t *)&v77);
            unint64_t v56 = *(unsigned int *)(a2 + 44);
            if (HIBYTE(*(_DWORD *)(a2 + 44))) {
              uint64_t v57 = (int *)(v3 + 16 * ((v56 >> 23) & 1));
            }
            else {
              uint64_t v57 = 0;
            }
            int v58 = *v57;
            int v59 = v57[1];
            int v60 = v57[2];
            if ((v56 & 0x800000) != 0) {
              uint64_t v61 = *(void *)(a2 + 72);
            }
            else {
              uint64_t v61 = 0;
            }
            uint64_t v62 = (v59 + v58);
            uint64_t v85 = v61 + 32 * v62;
            uint64_t v86 = (v60 + v62) - v62;
            unint64_t v63 = *(unsigned int *)(v75 + 44);
            if (HIBYTE(*(_DWORD *)(v75 + 44))) {
              unint64_t v64 = (int *)(v75 + 16 * ((v63 >> 23) & 1) + 64);
            }
            else {
              unint64_t v64 = 0;
            }
            int v65 = *v64;
            int v66 = v64[1];
            int v67 = v64[2];
            if ((v63 & 0x800000) != 0) {
              uint64_t v68 = *(void *)(v75 + 72);
            }
            else {
              uint64_t v68 = 0;
            }
            uint64_t v69 = (v66 + v65);
            uint64_t v89 = (const char *)(v68 + 32 * v69);
            uint64_t v90 = (v67 + v69) - v69;
            _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v77, &v85, (uint64_t *)&v89);
            uint64_t v70 = *(void *)(a2 + 24);
            uint64_t v76 = v70;
            uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v76);
            uint64_t v72 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.parallel", (const unsigned __int8 *)0xC, Context);
            if (v73)
            {
              mlir::OperationState::OperationState(&v85, v70, v72);
              mlir::ValueRange::ValueRange((unint64_t *)&v89, (uint64_t)v81, v82);
              mlir::ValueRange::ValueRange((unint64_t *)v87, (uint64_t)v79, v80);
              mlir::ValueRange::ValueRange(v84, (uint64_t)v77, v78);
              mlir::ValueRange::ValueRange(&v83, 0, 0);
              mlir::scf::ParallelOp::build((mlir::MLIRContext **)(a3 + 8), (uint64_t)&v85, (uint64_t)v89, v90, v87[0], v87[1], v84[0], v84[1], v74);
            }
            __int16 v93 = 1283;
            uint64_t v91 = "scf.parallel";
            uint64_t v92 = 12;
                              "hasn't been added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#regi"
                              "stered-loaded-dependent-whats-up-with-dialects-management";
            __int16 v88 = 259;
            llvm::operator+((uint64_t *)&v89, v87, (uint64_t)&v85);
            llvm::report_fatal_error((llvm::Twine *)&v85, 1);
          }
        }
      }
    }
  }
  return 0;
}

void _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_(uint64_t a1, void *a2, uint64_t *a3)
{
  v48[6] = *MEMORY[0x263EF8340];
  uint64_t v6 = v48;
  unint64_t v46 = v48;
  uint64_t v47 = 0x600000000;
  unint64_t v7 = a2[1];
  unint64_t v8 = a3[1] + v7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v8, 8);
    unsigned int v10 = a2;
    uint64_t v9 = *a2;
    unint64_t v7 = v10[1];
    LODWORD(v47) = 0;
    if (v7 <= HIDWORD(v47)) {
      goto LABEL_3;
    }
LABEL_7:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v7, 8);
    uint64_t v11 = v47;
    uint64_t v12 = v46;
    uint64_t v13 = &v46[v47];
    if (v7 < 0xD) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v9 = *a2;
  LODWORD(v47) = 0;
  if (v7 > 6) {
    goto LABEL_7;
  }
LABEL_3:
  if (!v7)
  {
    int v25 = 0;
    goto LABEL_18;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v46;
  uint64_t v13 = v46;
  if (v7 < 0xD) {
    goto LABEL_10;
  }
LABEL_8:
  if ((unint64_t)v13 >= v9 + 32 * v7 || v9 + 24 >= (unint64_t)&v12[v7 + v11])
  {
    uint64_t v15 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v15 = 4;
    }
    unint64_t v14 = v7 - v15;
    v13 += v14;
    unint64_t v16 = (const double *)(v9 + 88);
    uint64_t v17 = (unsigned long long *)&v12[v11 + 2];
    unint64_t v18 = v14;
    do
    {
      unsigned int v19 = v16 - 8;
      unsigned long long v20 = (unsigned __int128)vld4q_f64(v19);
      unsigned long long v21 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v20;
      *uint64_t v17 = v21;
      v16 += 16;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    goto LABEL_15;
  }
LABEL_10:
  unint64_t v14 = 0;
LABEL_15:
  unint64_t v22 = v7 - v14;
  uint64_t v23 = (uint64_t *)(v9 + 32 * v14 + 24);
  do
  {
    uint64_t v24 = *v23;
    v23 += 4;
    *v13++ = v24;
    --v22;
  }
  while (v22);
  int v25 = v47;
LABEL_18:
  uint64_t v26 = (v25 + v7);
  LODWORD(v47) = v25 + v7;
  uint64_t v28 = *a3;
  unint64_t v27 = a3[1];
  if (v27 + v26 > HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v27 + v26, 8);
    LODWORD(v26) = v47;
  }
  uint64_t v29 = v46;
  if (v27)
  {
    uint64_t v30 = &v46[v26];
    if (v27 >= 0xD
      && ((uint64_t v31 = v26, (unint64_t)v30 >= v28 + 32 * v27)
       || v28 + 24 >= (unint64_t)&v46[v27 + v26]))
    {
      uint64_t v33 = v27 & 3;
      if ((v27 & 3) == 0) {
        uint64_t v33 = 4;
      }
      unint64_t v32 = v27 - v33;
      v30 += v32;
      unsigned int v34 = (const double *)(v28 + 88);
      uint64_t v35 = (unsigned long long *)&v46[v31 + 2];
      unint64_t v36 = v32;
      do
      {
        unsigned int v37 = v34 - 8;
        unsigned long long v38 = (unsigned __int128)vld4q_f64(v37);
        unsigned long long v39 = (unsigned __int128)vld4q_f64(v34);
        *(v35 - 1) = v38;
        *uint64_t v35 = v39;
        v34 += 16;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
    }
    else
    {
      unint64_t v32 = 0;
    }
    unint64_t v40 = v27 - v32;
    int v41 = (uint64_t *)(v28 + 32 * v32 + 24);
    do
    {
      uint64_t v42 = *v41;
      v41 += 4;
      *v30++ = v42;
      --v40;
    }
    while (v40);
    LODWORD(v26) = v47;
    uint64_t v29 = v46;
  }
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  unint64_t v43 = (v26 + v27);
  LODWORD(v47) = v43;
  if (v43 && &v46 != (void **)a1)
  {
    if (v29 == v48)
    {
      unsigned int v45 = v43;
      if (v43 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v43, 8),
            unsigned int v45 = v47,
            uint64_t v6 = v46,
            v47))
      {
        memcpy(*(void **)a1, v6, 8 * v45);
        uint64_t v6 = v46;
      }
      *(_DWORD *)(a1 + 8) = v43;
    }
    else
    {
      *(void *)a1 = v29;
      int v44 = HIDWORD(v47);
      *(_DWORD *)(a1 + 8) = v43;
      *(_DWORD *)(a1 + 12) = v44;
      unint64_t v46 = v48;
      HIDWORD(v47) = 0;
    }
    LODWORD(v47) = 0;
    uint64_t v29 = v6;
  }
  if (v29 != v48) {
    free(v29);
  }
}

void llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::ValueRange,mlir::ValueRange)>::callback_fn<anonymous namespace'::MergeNestedParallelLoops::matchAndRewrite(mlir::scf::ParallelOp,mlir::PatternRewriter &)::{lambda(mlir::OpBuilder &,mlir::Location,mlir::ValueRange,mlir::ValueRange)#1}>(uint64_t **a1, uint64_t **a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v6 = a4;
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v8 = a1[1];
  uint64_t v9 = **a1;
  uint64_t v11 = *(unsigned int *)(v9 + 40);
  unint64_t v10 = *(unsigned int *)(v9 + 44);
  uint64_t v13 = (unint64_t *)v8[6];
  uint64_t v12 = (unint64_t *)v8[7];
  v45[0] = a4;
  v45[1] = a5;
  uint64_t v14 = *(void *)(((v9 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v11 + 8);
  if (v14) {
    uint64_t v15 = (void *)(v14 - 8);
  }
  else {
    uint64_t v15 = 0;
  }
  if (a5 >= ((unint64_t)((char *)v12 - (char *)v13) >> 3)) {
    unint64_t v16 = ((unint64_t)((char *)v12 - (char *)v13) >> 3);
  }
  else {
    unint64_t v16 = a5;
  }
  v35[0] = 0;
  v35[1] = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v39 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  unsigned int v42 = 0;
  unint64_t v46 = v13;
  unint64_t v47 = a4;
  uint64_t v48 = 0;
  if (v12 != v13)
  {
    uint64_t v17 = 0;
    do
    {
      if (v47 == v6 && v17 == v16) {
        break;
      }
      uint64_t v19 = mlir::ValueRange::dereference_iterator(&v47, v17);
      unint64_t v43 = *v13;
      int v44 = 0;
      char v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v35, &v43, &v44);
      unsigned long long v21 = v44;
      if ((v20 & 1) == 0)
      {
        unsigned long long v21 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v35, (uint64_t)&v43, &v43, v44);
        void *v21 = v43;
        v21[1] = 0;
      }
      v21[1] = v19;
      uint64_t v13 = v46 + 1;
      uint64_t v17 = v48 + 1;
      unint64_t v46 = v13;
      ++v48;
    }
    while (v13 != v12);
  }
  uint64_t v23 = (unint64_t *)v15[6];
  unint64_t v22 = (unint64_t *)v15[7];
  unint64_t v24 = ((unint64_t)((char *)v22 - (char *)v23) >> 3);
  if (v5 > v24)
  {
    unint64_t v6 = mlir::ValueRange::offset_base(v45, v5 - v24);
    unint64_t v5 = ((unint64_t)((char *)v22 - (char *)v23) >> 3);
  }
  unint64_t v46 = v23;
  unint64_t v47 = v6;
  uint64_t v48 = 0;
  if (v22 != v23)
  {
    uint64_t v25 = 0;
    uint64_t v26 = &v23[v22 - v23];
    do
    {
      if (v47 == v6 && v25 == v5) {
        break;
      }
      uint64_t v28 = mlir::ValueRange::dereference_iterator(&v47, v25);
      unint64_t v43 = *v23;
      int v44 = 0;
      char v29 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v35, &v43, &v44);
      uint64_t v30 = v44;
      if ((v29 & 1) == 0)
      {
        uint64_t v30 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v35, (uint64_t)&v43, &v43, v44);
        *uint64_t v30 = v43;
        v30[1] = 0;
      }
      v30[1] = v28;
      uint64_t v23 = v46 + 1;
      uint64_t v25 = v48 + 1;
      unint64_t v46 = v23;
      ++v48;
    }
    while (v23 != v26);
  }
  uint64_t v31 = (ZinIrHalH13g **)(v15 + 4);
  unint64_t v32 = (ZinIrHalH13g *)v15[5];
  if (v32 != (ZinIrHalH13g *)(v15 + 4))
  {
    for (i = *v31; v32 != i; unint64_t v32 = (ZinIrHalH13g *)*((void *)v32 + 1))
    {
      ZinIrHalH13g::~ZinIrHalH13g(v32);
      mlir::OpBuilder::clone(a2, v34, (mlir::IRMapping *)v35);
    }
  }
  llvm::deallocate_buffer(v40, (void *)(16 * v42));
}

void sub_21186AD74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
}

void sub_21186AD88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
}

void anonymous namespace'::RemoveLoopInvariantArgsFromBeforeBlock::~RemoveLoopInvariantArgsFromBeforeBlock(_anonymous_namespace_::RemoveLoopInvariantArgsFromBeforeBlock *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::RemoveLoopInvariantArgsFromBeforeBlock::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v111[2] = *MEMORY[0x263EF8340];
  unint64_t v5 = ((a2
       + 64
       + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
       + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *(unsigned int *)(a2 + 40);
  uint64_t v6 = *(void *)(v5 + 32);
  if (v6) {
    unint64_t v7 = (ZinIrHalH13g **)(v6 - 8);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v5 + 8);
  if (v8) {
    uint64_t v9 = v8 - 8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v88 = *(void *)(v9 + 48);
  mlir::Block::getTerminator((ZinIrHalH13g **)v9);
  if ((*(unsigned char *)(v10 + 46) & 0x80) != 0)
  {
    uint64_t v11 = *(void *)(v10 + 72);
    mlir::Block::getTerminator(v7);
    uint64_t v13 = v12;
    if ((*(unsigned char *)(v12 + 46) & 0x80) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
    mlir::Block::getTerminator(v7);
    uint64_t v13 = v78;
    if ((*(unsigned char *)(v78 + 46) & 0x80) != 0)
    {
LABEL_9:
      mlir::ValueRange::ValueRange(&v109, *(void *)(v13 + 72), *(unsigned int *)(v13 + 68));
      uint64_t v86 = a3;
      if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
        goto LABEL_10;
      }
LABEL_126:
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v107 = v109;
      uint64_t v108 = 0;
      return 0;
    }
  }
  mlir::ValueRange::ValueRange(&v109, 0, 0);
  uint64_t v86 = a3;
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
    goto LABEL_126;
  }
LABEL_10:
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(unsigned int *)(a2 + 68);
  unint64_t v16 = v109;
  uint64_t v104 = 0;
  uint64_t v105 = v14;
  uint64_t v106 = 0;
  unint64_t v107 = v109;
  uint64_t v108 = 0;
  if (v15)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v87 = v11 + 32;
    uint64_t v20 = v110;
    uint64_t v21 = v14;
    while (1)
    {
      if (v107 == v16 && v19 == v20) {
        return 0;
      }
      uint64_t v23 = *(void *)(v21 + 32 * v17 + 24);
      uint64_t v24 = mlir::ValueRange::dereference_iterator(&v107, v19);
      if (v23 == v24) {
        break;
      }
      uint64_t v25 = (~*(_DWORD *)(v24 + 8) & 7) != 0 ? 0 : v24;
      if (v25 && *(ZinIrHalH13g ***)(v25 + 16) == v7)
      {
        uint64_t v26 = *(void *)(v87 + 32 * *(unsigned int *)(v25 + 24) + 24);
        if (v26 == *(void *)(v88 + 8 * v18) || v26 == v23) {
          break;
        }
      }
      uint64_t v21 = v105;
      unsigned int v18 = v104 + 1;
      uint64_t v17 = v106 + 1;
      uint64_t v104 = (uint64_t *)((char *)v104 + 1);
      ++v106;
      uint64_t v19 = ++v108;
      if (v105 == v14 && v17 == v15) {
        return 0;
      }
    }
    uint64_t v104 = &v106;
    uint64_t v105 = 0x600000000;
    uint64_t v101 = v103;
    uint64_t v102 = 0x600000000;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    unsigned int v92 = 0;
    uint64_t v98 = v100;
    uint64_t v99 = 0x600000000;
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v29 = *(void *)(a2 + 72);
      uint64_t v30 = *(unsigned int *)(a2 + 68);
      unint64_t v31 = v109;
      __int16 v93 = 0;
      uint64_t v94 = v29;
      uint64_t v95 = 0;
      unint64_t v96 = v109;
      uint64_t v97 = 0;
      if (v30)
      {
        uint64_t v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = v110;
        uint64_t v36 = v29;
        do
        {
          if (v96 == v31 && v34 == v35) {
            break;
          }
          uint64_t v38 = *(void *)(v36 + 32 * v32 + 24);
          uint64_t v39 = mlir::ValueRange::dereference_iterator(&v96, v34);
          if (v38 == v39)
          {
            int v56 = v92;
            if (!v92) {
              goto LABEL_92;
            }
            unsigned int v57 = (v92 - 1) & (37 * v33);
            int v58 = (char *)v90 + 16 * v57;
            int v59 = *(_DWORD *)v58;
            if (*(_DWORD *)v58 != v33)
            {
              int v60 = 0;
              int v61 = 1;
              while (v59 != -1)
              {
                if (v60) {
                  BOOL v62 = 0;
                }
                else {
                  BOOL v62 = v59 == -2;
                }
                if (v62) {
                  int v60 = v58;
                }
                unsigned int v63 = v57 + v61++;
                unsigned int v57 = v63 & (v92 - 1);
                int v58 = (char *)v90 + 16 * v57;
                int v59 = *(_DWORD *)v58;
                if (*(_DWORD *)v58 == v33) {
                  goto LABEL_80;
                }
              }
              if (v60) {
                unint64_t v64 = v60;
              }
              else {
                unint64_t v64 = v58;
              }
              if (4 * (int)v91 + 4 < 3 * v92)
              {
                if (v92 + ~v91 - HIDWORD(v91) <= v92 >> 3) {
                  goto LABEL_93;
                }
                goto LABEL_77;
              }
LABEL_92:
              int v56 = 2 * v92;
LABEL_93:
              llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v90, v56);
              if (v92)
              {
                unsigned int v65 = v92 - 1;
                unsigned int v66 = (v92 - 1) & (37 * v33);
                unint64_t v64 = (char *)v90 + 16 * v66;
                int v67 = *(_DWORD *)v64;
                if (*(_DWORD *)v64 != v33)
                {
                  uint64_t v68 = 0;
                  int v69 = 1;
                  while (v67 != -1)
                  {
                    if (v68) {
                      BOOL v70 = 0;
                    }
                    else {
                      BOOL v70 = v67 == -2;
                    }
                    if (v70) {
                      uint64_t v68 = v64;
                    }
                    unsigned int v71 = v66 + v69++;
                    unsigned int v66 = v71 & v65;
                    unint64_t v64 = (char *)v90 + 16 * (v71 & v65);
                    int v67 = *(_DWORD *)v64;
                    if (*(_DWORD *)v64 == v33) {
                      goto LABEL_77;
                    }
                  }
LABEL_121:
                  if (v68) {
                    unint64_t v64 = v68;
                  }
                }
LABEL_77:
                LODWORD(v91) = v91 + 1;
                if (*(_DWORD *)v64 != -1) {
                  --HIDWORD(v91);
                }
                *(_DWORD *)unint64_t v64 = v33;
                *((void *)v64 + 1) = v38;
                goto LABEL_80;
              }
LABEL_120:
              unint64_t v64 = 0;
              goto LABEL_77;
            }
          }
          else
          {
            uint64_t v40 = v39;
            if ((~*(_DWORD *)(v39 + 8) & 7) != 0) {
              uint64_t v41 = 0;
            }
            else {
              uint64_t v41 = v39;
            }
            if (!v41
              || *(ZinIrHalH13g ***)(v41 + 16) != v7
              || ((uint64_t v42 = *(void *)(v87 + 32 * *(unsigned int *)(v41 + 24) + 24), v42 != *(void *)(v88 + 8 * v33))
                ? (BOOL v43 = v42 == v38)
                : (BOOL v43 = 1),
                  !v43))
            {
              int v52 = v105;
              if (v105 >= HIDWORD(v105))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, &v106, v105 + 1, 8);
                v104[v105] = v38;
                LODWORD(v105) = v105 + 1;
                uint64_t v53 = v102;
                if (v102 >= HIDWORD(v102)) {
                  goto LABEL_87;
                }
LABEL_60:
                *((void *)v101 + v53) = v40;
              }
              else
              {
                v104[v105] = v38;
                LODWORD(v105) = v52 + 1;
                uint64_t v53 = v102;
                if (v102 < HIDWORD(v102)) {
                  goto LABEL_60;
                }
LABEL_87:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v53 + 1, 8);
                *((void *)v101 + v102) = v40;
                LODWORD(v53) = v102;
              }
              LODWORD(v102) = v53 + 1;
              uint64_t v54 = *(void *)(*(void *)(v88 + 8 * v33) + 32);
              uint64_t v55 = v99;
              if (v99 >= HIDWORD(v99))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v100, v99 + 1, 8);
                uint64_t v55 = v99;
              }
              *((void *)v98 + v55) = v54;
              LODWORD(v99) = v99 + 1;
              goto LABEL_80;
            }
            int v44 = v92;
            if (!v92) {
              goto LABEL_108;
            }
            unsigned int v45 = (v92 - 1) & (37 * v33);
            unint64_t v46 = (char *)v90 + 16 * v45;
            int v47 = *(_DWORD *)v46;
            if (*(_DWORD *)v46 != v33)
            {
              uint64_t v48 = 0;
              int v49 = 1;
              while (v47 != -1)
              {
                if (v48) {
                  BOOL v50 = 0;
                }
                else {
                  BOOL v50 = v47 == -2;
                }
                if (v50) {
                  uint64_t v48 = v46;
                }
                unsigned int v51 = v45 + v49++;
                unsigned int v45 = v51 & (v92 - 1);
                unint64_t v46 = (char *)v90 + 16 * v45;
                int v47 = *(_DWORD *)v46;
                if (*(_DWORD *)v46 == v33) {
                  goto LABEL_80;
                }
              }
              if (v48) {
                unint64_t v64 = v48;
              }
              else {
                unint64_t v64 = v46;
              }
              if (4 * (int)v91 + 4 < 3 * v92)
              {
                if (v92 + ~v91 - HIDWORD(v91) > v92 >> 3) {
                  goto LABEL_77;
                }
              }
              else
              {
LABEL_108:
                int v44 = 2 * v92;
              }
              llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v90, v44);
              if (v92)
              {
                unsigned int v72 = v92 - 1;
                unsigned int v73 = (v92 - 1) & (37 * v33);
                unint64_t v64 = (char *)v90 + 16 * v73;
                int v74 = *(_DWORD *)v64;
                if (*(_DWORD *)v64 != v33)
                {
                  uint64_t v68 = 0;
                  int v75 = 1;
                  while (v74 != -1)
                  {
                    if (v68) {
                      BOOL v76 = 0;
                    }
                    else {
                      BOOL v76 = v74 == -2;
                    }
                    if (v76) {
                      uint64_t v68 = v64;
                    }
                    unsigned int v77 = v73 + v75++;
                    unsigned int v73 = v77 & v72;
                    unint64_t v64 = (char *)v90 + 16 * (v77 & v72);
                    int v74 = *(_DWORD *)v64;
                    if (*(_DWORD *)v64 == v33) {
                      goto LABEL_77;
                    }
                  }
                  goto LABEL_121;
                }
                goto LABEL_77;
              }
              goto LABEL_120;
            }
          }
LABEL_80:
          uint64_t v36 = v94;
          unsigned int v33 = v93 + 1;
          uint64_t v32 = v95 + 1;
          __int16 v93 = (char *)v93 + 1;
          ++v95;
          uint64_t v34 = ++v97;
        }
        while (v94 != v29 || v32 != v30);
      }
    }
    else
    {
      __int16 v93 = 0;
      uint64_t v94 = 0;
      uint64_t v95 = 0;
      unint64_t v96 = v109;
      uint64_t v97 = 0;
    }
    int v79 = (_OWORD *)(v86 + 24);
    long long v89 = *(_OWORD *)(v86 + 24);
    uint64_t v80 = *(void *)(v13 + 16);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v13);
    *(void *)(v86 + 24) = v80;
    *(void *)(v86 + 32) = v81;
    unsigned int v82 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v86 + 8), *(void *)(v13 + 24), (uint64_t)&v101);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)v86 + 32))(v86, v13, v82);
    if ((void)v89)
    {
      *int v79 = v89;
    }
    else
    {
      *(void *)int v79 = 0;
      *(void *)(v86 + 32) = 0;
    }
    uint64_t v83 = *(void *)(a2 + 24);
    uint64_t v84 = *(unsigned int *)(a2 + 36);
    uint64_t v85 = a2 - 16;
    if (!v84) {
      uint64_t v85 = 0;
    }
    v111[0] = v85;
    v111[1] = v84;
    mlir::OperandRange::getTypes(v111, (uint64_t *)&v93);
    mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &>(v86 + 8, v83, (uint64_t *)&v93, (uint64_t)&v104);
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v8 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (v9)
  {
    mlir::OperationState::OperationState(v19, a2, v8);
    uint64_t NextResultAtOffset = *a3;
    uint64_t v11 = a3[1];
    uint64_t v12 = a3[3];
    if (v11) {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v11);
    }
    mlir::ValueRange::ValueRange((unint64_t *)v20, NextResultAtOffset, v12 - v11);
    mlir::TypeRange::TypeRange(v18, v20[0], v20[1]);
    uint64_t v13 = mlir::ValueRange::ValueRange(v17, *(void *)a4, *(unsigned int *)(a4 + 8));
    mlir::scf::WhileOp::build((uint64_t)v13, (uint64_t)v19, v18[0], v18[1], v17[0], v17[1], 0, 0);
  }
  __int16 v21 = 1283;
  unint64_t v20[2] = (uint64_t)"scf.while";
  void v20[3] = 9;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v16 = 259;
  llvm::operator+(v20, (uint64_t *)&v15, (uint64_t)v19);
  llvm::report_fatal_error((llvm::Twine *)v19, 1);
}

_DWORD *llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -1;
        _DWORD *v13 = -1;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[4 * v11];
        do
        {
          _DWORD *v10 = -1;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      __int16 v16 = v4;
      do
      {
        int v23 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 <= 0xFFFFFFFD)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v25 = v24 & (37 * v23);
          uint64_t v22 = *(void *)a1 + 16 * v25;
          int v26 = *(_DWORD *)v22;
          if (v23 != *(_DWORD *)v22)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -1)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                uint64_t v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              uint64_t v22 = *(void *)a1 + 16 * (v30 & v24);
              int v26 = *(_DWORD *)v22;
              if (v23 == *(_DWORD *)v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          *(_DWORD *)uint64_t v22 = v23;
          *(void *)(v22 + 8) = *((void *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        __int16 v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 4;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -1;
      *uint64_t v19 = -1;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      __int16 v21 = &result[4 * v17];
      do
      {
        _DWORD *v10 = -1;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void anonymous namespace'::RemoveLoopInvariantValueYielded::~RemoveLoopInvariantValueYielded(_anonymous_namespace_::RemoveLoopInvariantValueYielded *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::RemoveLoopInvariantValueYielded::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[6] = *MEMORY[0x263EF8340];
  uint64_t v50 = a2 + 64;
  uint64_t v5 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v5) {
    unint64_t v6 = (ZinIrHalH13g **)(v5 - 8);
  }
  else {
    unint64_t v6 = 0;
  }
  mlir::Block::getTerminator(v6);
  unsigned int v8 = (ZinIrHalH13g *)v7;
  if ((*(unsigned char *)(v7 + 46) & 0x80) == 0)
  {
    uint64_t v10 = -1;
    uint64_t v11 = 32;
LABEL_7:
    uint64_t v12 = (void *)(v11 + 24);
    uint64_t v13 = v10;
    while (1)
    {
      int v61 = (void *)*v12;
      if ((ZinIrHalH13g **)mlir::Value::getParentBlock((mlir::Value *)&v61) != v6) {
        break;
      }
      v12 += 4;
      if (!--v13) {
        return 0;
      }
    }
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(((v50
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
    if (v16) {
      uint64_t v17 = v16 - 8;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(void *)(v17 + 48);
    int v61 = v63;
    uint64_t v62 = 0x600000000;
    int v58 = v60;
    uint64_t v59 = 0x600000000;
    unsigned int v51 = 0;
    uint64_t v52 = 0;
    unsigned int v53 = 0;
    uint64_t v55 = v57;
    uint64_t v56 = 0x600000000;
    while (1)
    {
      v54[0] = *(void **)(v11 + 32 * v15 + 24);
      if ((ZinIrHalH13g **)mlir::Value::getParentBlock((mlir::Value *)v54) == v6)
      {
        int v24 = v62;
        if (v62 >= HIDWORD(v62))
        {
          uint64_t v41 = v54[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 8);
          v61[v62] = v41;
          int v24 = v62;
        }
        else
        {
          v61[v62] = v54[0];
        }
        LODWORD(v62) = v24 + 1;
        unint64_t v25 = *((void *)v54[0] + 1) & 0xFFFFFFFFFFFFFFF8;
        int v26 = v59;
        if (v59 >= HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v59 + 1, 8);
          *(void *)&v58[8 * v59] = v25;
          int v26 = v59;
        }
        else
        {
          *(void *)&v58[8 * v59] = v25;
        }
        LODWORD(v59) = v26 + 1;
        uint64_t v27 = *(void *)(*(void *)(v18 + 8 * v15) + 32);
        uint64_t v28 = v56;
        if (v56 >= HIDWORD(v56))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
          uint64_t v28 = v56;
        }
        *((void *)v55 + v28) = v27;
        LODWORD(v56) = v56 + 1;
        goto LABEL_16;
      }
      uint64_t v22 = v54[0];
      int v23 = v53;
      if (!v53) {
        goto LABEL_44;
      }
      unsigned int v19 = (v53 - 1) & (37 * v15);
      uint64_t v20 = (char *)v51 + 16 * v19;
      int v21 = *(_DWORD *)v20;
      if (*(_DWORD *)v20 != v15) {
        break;
      }
LABEL_16:
      if (++v15 == v10)
      {
        uint64_t v42 = (_OWORD *)(a3 + 24);
        long long v49 = *(_OWORD *)(a3 + 24);
        uint64_t v43 = *((void *)v8 + 2);
        ZinIrHalH13g::~ZinIrHalH13g(v8);
        *(void *)(a3 + 24) = v43;
        *(void *)(a3 + 32) = v44;
        v54[0] = *(void **)(*((void *)v8 + 9) + 24);
        unsigned int v45 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 8), *((void *)v8 + 3), (uint64_t *)v54, (uint64_t)&v61);
        (*(void (**)(uint64_t, ZinIrHalH13g *, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v8, v45);
        if ((void)v49)
        {
          *uint64_t v42 = v49;
          uint64_t v46 = *(void *)(a2 + 24);
          if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
            goto LABEL_64;
          }
LABEL_67:
          int v47 = 0;
          uint64_t v48 = 0;
        }
        else
        {
          *(void *)uint64_t v42 = 0;
          *(void *)(a3 + 32) = 0;
          uint64_t v46 = *(void *)(a2 + 24);
          if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
            goto LABEL_67;
          }
LABEL_64:
          int v47 = *(void **)(a2 + 72);
          uint64_t v48 = (void *)*(unsigned int *)(a2 + 68);
        }
        v54[0] = v47;
        v54[1] = v48;
        mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(a3 + 8, v46, (uint64_t)&v58, (uint64_t)v54);
      }
    }
    BOOL v29 = 0;
    int v30 = 1;
    while (v21 != -1)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v21 == -2;
      }
      if (v31) {
        BOOL v29 = v20;
      }
      unsigned int v32 = v19 + v30++;
      unsigned int v19 = v32 & (v53 - 1);
      uint64_t v20 = (char *)v51 + 16 * v19;
      int v21 = *(_DWORD *)v20;
      if (*(_DWORD *)v20 == v15) {
        goto LABEL_16;
      }
    }
    if (v29) {
      unsigned int v33 = v29;
    }
    else {
      unsigned int v33 = v20;
    }
    if (4 * (int)v52 + 4 < 3 * v53)
    {
      if (v53 + ~v52 - HIDWORD(v52) > v53 >> 3)
      {
LABEL_21:
        LODWORD(v52) = v52 + 1;
        if (*(_DWORD *)v33 != -1) {
          --HIDWORD(v52);
        }
        *(_DWORD *)unsigned int v33 = v15;
        *((void *)v33 + 1) = v22;
        goto LABEL_16;
      }
    }
    else
    {
LABEL_44:
      int v23 = 2 * v53;
    }
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v51, v23);
    if (v53)
    {
      unsigned int v34 = v53 - 1;
      unsigned int v35 = (v53 - 1) & (37 * v15);
      unsigned int v33 = (char *)v51 + 16 * v35;
      int v36 = *(_DWORD *)v33;
      if (*(_DWORD *)v33 != v15)
      {
        uint64_t v37 = 0;
        int v38 = 1;
        while (v36 != -1)
        {
          if (v37) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v36 == -2;
          }
          if (v39) {
            uint64_t v37 = v33;
          }
          unsigned int v40 = v35 + v38++;
          unsigned int v35 = v40 & v34;
          unsigned int v33 = (char *)v51 + 16 * (v40 & v34);
          int v36 = *(_DWORD *)v33;
          if (*(_DWORD *)v33 == v15) {
            goto LABEL_21;
          }
        }
        if (v37) {
          unsigned int v33 = v37;
        }
      }
    }
    else
    {
      unsigned int v33 = 0;
    }
    goto LABEL_21;
  }
  uint64_t v9 = *(unsigned int *)(v7 + 68);
  uint64_t v10 = v9 - 1;
  if (v9 != 1)
  {
    uint64_t v11 = *(void *)(v7 + 72) + 32;
    goto LABEL_7;
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[38] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v8 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (v9)
  {
    mlir::OperationState::OperationState(v18, a2, v8);
    mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
    uint64_t v10 = mlir::ValueRange::ValueRange(v16, *(void *)a4, *(void *)(a4 + 8));
    mlir::scf::WhileOp::build((uint64_t)v10, (uint64_t)v18, v17[0], v17[1], v16[0], v16[1], 0, 0);
  }
  __int16 v15 = 1283;
  v14[2] = (uint64_t)"scf.while";
  v14[3] = 9;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v13 = 259;
  llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v18);
  llvm::report_fatal_error((llvm::Twine *)v18, 1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"scf.condition";
    void v20[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = v22[0];
  uint64_t v13 = v22[1];
  v20[0] = v11;
  mlir::OperationState::addOperands((uint64_t)v23, (uint64_t)v20, 1);
  mlir::OperationState::addOperands((uint64_t)v23, v12, v13);
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id) {
    __int16 v15 = v14;
  }
  else {
    __int16 v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v15;
}

void anonymous namespace'::WhileConditionTruth::~WhileConditionTruth(_anonymous_namespace_::WhileConditionTruth *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::WhileConditionTruth::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v5) {
    unint64_t v6 = (ZinIrHalH13g **)(v5 - 8);
  }
  else {
    unint64_t v6 = 0;
  }
  mlir::Block::getTerminator(v6);
  uint64_t v8 = v7;
  if ((*(unsigned char *)(v7 + 46) & 0x80) != 0)
  {
    uint64_t v9 = *(void *)(v7 + 72);
    uint64_t v10 = *(unsigned int *)(v7 + 68) - 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = -1;
  }
  char v11 = 0;
  uint64_t v12 = *(void *)(((v4
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 32);
  if (v12) {
    uint64_t v13 = v12 - 8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v10)
  {
    uint64_t v14 = *(uint64_t ****)(v13 + 48);
    __int16 v15 = *(uint64_t ****)(v13 + 56);
    if (v15 != v14)
    {
      char v11 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = v9 + 32;
      uint64_t v27 = a3 + 1;
      uint64_t v29 = v10;
      do
      {
        uint64_t v19 = *(void *)(v18 + 32 * v17 + 24);
        if (v19 == *(void *)(*(void *)(v8 + 72) + 24))
        {
          uint64_t v20 = **v14;
          if (v20)
          {
            if (v16
              || (uint64_t v21 = *(void *)(a2 + 24),
                  unint64_t v31 = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8,
                  BoolAttr = (void *)mlir::Builder::getBoolAttr(v27, (mlir::MLIRContext *)1),
                  uint64_t v16 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::IntegerAttr>((mlir::OpBuilder *)v27, v21, (uint64_t *)&v31, &BoolAttr)- 16), (v20 = **v14) != 0))
            {
              do
              {
                uint64_t v22 = (uint64_t *)*v20;
                uint64_t v23 = v20[2];
                (*((void (**)(mlir::BoolAttr **, uint64_t))*a3 + 9))(a3, v23);
                int v24 = (uint64_t *)v20[1];
                if (v24)
                {
                  *int v24 = *v20;
                  if (*v20) {
                    *(void *)(*v20 + 8) = v20[1];
                  }
                }
                void v20[3] = (uint64_t)v16;
                v20[1] = (uint64_t)v16;
                uint64_t v25 = *v16;
                *uint64_t v20 = *v16;
                if (v25) {
                  *(void *)(v25 + 8) = v20;
                }
                *uint64_t v16 = (uint64_t)v20;
                (*((void (**)(mlir::BoolAttr **, uint64_t))*a3 + 10))(a3, v23);
                uint64_t v20 = v22;
              }
              while (v22);
              char v11 = 1;
              uint64_t v10 = v29;
            }
            else
            {
              char v11 = 1;
            }
          }
        }
        if (++v17 == v10) {
          break;
        }
        ++v14;
      }
      while (v14 != v15);
    }
  }
  return v11 & 1;
}

void anonymous namespace'::WhileCmpCond::~WhileCmpCond(_anonymous_namespace_::WhileCmpCond *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::WhileCmpCond::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v66[38] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 64;
  uint64_t v6 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6) {
    uint64_t v7 = (ZinIrHalH13g **)(v6 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::Block::getTerminator(v7);
  uint64_t v9 = v8;
  v66[0] = *(void *)(*(void *)(v8 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v66);
  if (result)
  {
    char v11 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
      uint64_t v13 = result;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v59 = v13;
    if (!v12) {
      return 0;
    }
    if ((*(unsigned char *)(v9 + 46) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(v9 + 72);
      uint64_t v15 = *(unsigned int *)(v9 + 68) - 1;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = -1;
    }
    LOBYTE(v16) = 0;
    uint64_t v17 = *(void *)(((v5
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
    if (v17) {
      uint64_t v18 = v17 - 8;
    }
    else {
      uint64_t v18 = 0;
    }
    if (!v15) {
      return v16 & 1;
    }
    uint64_t v19 = *(void ***)(v18 + 48);
    uint64_t v55 = *(void ***)(v18 + 56);
    if (v55 == v19) {
      return v16 & 1;
    }
    uint64_t v16 = 0;
    uint64_t v20 = 0;
    uint64_t v56 = v14 + 32;
    unsigned int v57 = (mlir::Builder *)(a3 + 8);
    uint64_t v54 = v15;
LABEL_19:
    uint64_t v21 = *(void *)(v56 + 32 * v20 + 24);
    uint64_t v22 = *(void *)(v59 + 72);
    if (v21 != *(void *)(v22 + 24))
    {
      if (v21 != *(void *)(v22 + 56)) {
        goto LABEL_41;
      }
LABEL_40:
      BOOL v39 = (void *)**v19;
      if (!v39) {
        goto LABEL_41;
      }
      while (2)
      {
        uint64_t v40 = v39[2];
        BOOL v39 = (void *)*v39;
        if (*(_UNKNOWN **)(*(void *)(v40 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
          uint64_t v40 = 0;
        }
        uint64_t v58 = v40;
        if (v40 && *(void *)(*(void *)(v40 + 72) + 24) == *(void *)(*(void *)(v59 + 72) + 24))
        {
          uint64_t Predicate = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
          if (Predicate == mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v59))
          {
            unint64_t v42 = 1;
            goto LABEL_53;
          }
          uint64_t v43 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
          uint64_t v44 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v59);
          if (v43 == mlir::arith::invertPredicate(v44))
          {
            unint64_t v42 = 0;
LABEL_53:
            uint64_t v45 = v58;
            uint64_t v46 = *(void *)(v58 + 24);
            uint64_t v60 = v46;
            uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v60);
            uint64_t v48 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
            if (!v49) {
              goto LABEL_59;
            }
            mlir::OperationState::OperationState(v66, v46, v48);
            uint64_t v16 = 1;
            mlir::arith::ConstantIntOp::build(v57, (uint64_t)v66, v42, 1u);
            uint64_t v50 = mlir::OpBuilder::create(v57, (const mlir::OperationState *)v66);
            BOOL v52 = mlir::arith::ConstantIntOp::classof((BOOL)v50, v51);
            mlir::OperationState::~OperationState((mlir::OperationState *)v66);
            if (v52) {
              unsigned int v53 = v50;
            }
            else {
              unsigned int v53 = 0;
            }
            (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v45, v53);
          }
        }
        if (!v39) {
          goto LABEL_41;
        }
        continue;
      }
    }
    uint64_t v23 = v16;
    int v24 = (void *)**v19;
    if (!v24)
    {
      uint64_t v16 = v23;
      if (v21 != *(void *)(v22 + 56)) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t v25 = v24[2];
      int v24 = (void *)*v24;
      if (*(_UNKNOWN **)(*(void *)(v25 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
        uint64_t v25 = 0;
      }
      uint64_t v58 = v25;
      if (v25 && *(void *)(*(void *)(v25 + 72) + 56) == *(void *)(*(void *)(v59 + 72) + 56))
      {
        uint64_t v26 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
        if (v26 == mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v59))
        {
          unint64_t v27 = 1;
LABEL_34:
          uint64_t v30 = v58;
          uint64_t v31 = *(void *)(v58 + 24);
          uint64_t v60 = v31;
          unsigned int v32 = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v60);
          uint64_t v33 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, v32);
          if (!v34)
          {
LABEL_59:
            __int16 v64 = 1283;
            v63[2] = (uint64_t)"arith.constant";
            v63[3] = 14;
                  "added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-"
                  "whats-up-with-dialects-management";
            __int16 v62 = 259;
            llvm::operator+(v63, (uint64_t *)&v61, (uint64_t)v65);
            llvm::report_fatal_error((llvm::Twine *)v65, 1);
          }
          mlir::OperationState::OperationState(v66, v31, v33);
          uint64_t v23 = 1;
          mlir::arith::ConstantIntOp::build(v57, (uint64_t)v66, v27, 1u);
          unsigned int v35 = mlir::OpBuilder::create(v57, (const mlir::OperationState *)v66);
          BOOL v37 = mlir::arith::ConstantIntOp::classof((BOOL)v35, v36);
          mlir::OperationState::~OperationState((mlir::OperationState *)v66);
          if (v37) {
            int v38 = v35;
          }
          else {
            int v38 = 0;
          }
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v30, v38);
          goto LABEL_25;
        }
        uint64_t v28 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
        uint64_t v29 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v59);
        if (v28 == mlir::arith::invertPredicate(v29))
        {
          unint64_t v27 = 0;
          goto LABEL_34;
        }
      }
LABEL_25:
      if (!v24)
      {
        uint64_t v16 = v23;
        if (v21 == *(void *)(*(void *)(v59 + 72) + 56)) {
          goto LABEL_40;
        }
LABEL_41:
        if (++v20 == v54) {
          return v16 & 1;
        }
        if (++v19 == v55) {
          return v16 & 1;
        }
        goto LABEL_19;
      }
    }
  }
  return result;
}

void anonymous namespace'::WhileUnusedResult::~WhileUnusedResult(_anonymous_namespace_::WhileUnusedResult *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::WhileUnusedResult::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  v57[6] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 16;
  uint64_t v6 = *(void *)((((unint64_t)&a2[4 * (((unint64_t)a2[11] >> 23) & 1) + 17]
                   + (((unint64_t)a2[11] >> 21) & 0x7F8)
                   + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a2[10]
                 + 8);
  if (v6) {
    uint64_t v7 = (ZinIrHalH13g **)(v6 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::Block::getTerminator(v7);
  uint64_t v9 = (ZinIrHalH13g *)v8;
  uint64_t v10 = *(void *)((((unint64_t)&v5[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 32);
  if (v10) {
    uint64_t v11 = v10 - 8;
  }
  else {
    uint64_t v11 = 0;
  }
  if ((*(unsigned char *)(v8 + 46) & 0x80) != 0)
  {
    uint64_t v12 = *(void *)(v8 + 72);
    uint64_t v13 = *(unsigned int *)(v8 + 68) - 1;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = -1;
  }
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v14 = *(void *)(v11 + 56);
  uint64_t v55 = v57;
  uint64_t v56 = 0xC00000000;
  BOOL v52 = v54;
  uint64_t v53 = 0x600000000;
  char v49 = v51;
  uint64_t v50 = 0x600000000;
  uint64_t v46 = v48;
  uint64_t v16 = a2[9];
  if (v16) {
    uint64_t v17 = (uint64_t)(a2 - 4);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v47 = 0x600000000;
  if (!v16) {
    goto LABEL_42;
  }
  BOOL v18 = v14 == v15 || v13 == 0;
  if (v18) {
    goto LABEL_42;
  }
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = (uint64_t *)(v12 + 56);
  uint64_t v22 = v16 - 1;
  uint64_t v23 = v13 - 1;
  uint64_t v24 = 8 * ((v14 - v15) >> 3) - 8;
  while (1)
  {
    uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v17, v20);
    uint64_t v26 = *v21;
    v45[0] = NextResultAtOffset;
    if (!*NextResultAtOffset && !**(void **)(v15 + 8 * v20))
    {
      char v19 = 1;
      if (v22 == v20) {
        break;
      }
      goto LABEL_29;
    }
    uint64_t v27 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 4);
      uint64_t v27 = v56;
    }
    v55[v27] = v20;
    LODWORD(v56) = v56 + 1;
    int v28 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 8);
      *((void *)v49 + v50) = v26;
      int v28 = v50;
    }
    else
    {
      *((void *)v49 + v50) = v26;
    }
    LODWORD(v50) = v28 + 1;
    unint64_t v29 = *((void *)v45[0] + 1) & 0xFFFFFFFFFFFFFFF8;
    int v30 = v53;
    if (v53 >= HIDWORD(v53))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, v53 + 1, 8);
      v52[v53] = v29;
      int v30 = v53;
    }
    else
    {
      v52[v53] = v29;
    }
    LODWORD(v53) = v30 + 1;
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)v45);
    uint64_t v32 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v47 + 1, 8);
      uint64_t v32 = v47;
    }
    *((void *)v46 + v32) = Loc;
    LODWORD(v47) = v47 + 1;
    if (v22 == v20) {
      break;
    }
LABEL_29:
    if (v24)
    {
      v21 += 4;
      v24 -= 8;
      BOOL v18 = v23 == v20++;
      if (!v18) {
        continue;
      }
    }
    break;
  }
  if (v19)
  {
    uint64_t v33 = (_OWORD *)(v44 + 24);
    long long v42 = *(_OWORD *)(v44 + 24);
    uint64_t v34 = *((void *)v9 + 2);
    ZinIrHalH13g::~ZinIrHalH13g(v9);
    *(void *)(v44 + 24) = v34;
    *(void *)(v44 + 32) = v35;
    v45[0] = *(void **)(*((void *)v9 + 9) + 24);
    int v36 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v44 + 8), *((void *)v9 + 3), (uint64_t *)v45, (uint64_t)&v49);
    (*(void (**)(uint64_t, ZinIrHalH13g *, ZinIrHalH13g *))(*(void *)v44 + 32))(v44, v9, v36);
    if ((void)v42)
    {
      *uint64_t v33 = v42;
      BOOL v37 = v43;
      uint64_t v38 = *((void *)v43 + 3);
      if ((*((unsigned char *)v43 + 46) & 0x80) != 0) {
        goto LABEL_40;
      }
LABEL_52:
      uint64_t v40 = 0;
      BOOL v39 = 0;
    }
    else
    {
      *(void *)uint64_t v33 = 0;
      *(void *)(v44 + 32) = 0;
      BOOL v37 = v43;
      uint64_t v38 = *((void *)v43 + 3);
      if ((*((unsigned char *)v43 + 46) & 0x80) == 0) {
        goto LABEL_52;
      }
LABEL_40:
      BOOL v39 = (void *)v37[17];
      uint64_t v40 = (void *)*((void *)v37 + 9);
    }
    v45[0] = v40;
    v45[1] = v39;
    mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(v44 + 8, v38, (uint64_t)&v52, (uint64_t)v45);
  }
LABEL_42:
  if (v46 != v48) {
    free(v46);
  }
  if (v49 != v51) {
    free(v49);
  }
  if (v52 != (void *)v54) {
    free(v52);
  }
  if (v55 != (_DWORD *)v57) {
    free(v55);
  }
  return 0;
}

void anonymous namespace'::WhileRemoveDuplicatedResults::~WhileRemoveDuplicatedResults(_anonymous_namespace_::WhileRemoveDuplicatedResults *this)
{
  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unsigned int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::WhileRemoveDuplicatedResults::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v5) {
    uint64_t v6 = (ZinIrHalH13g **)(v5 - 8);
  }
  else {
    uint64_t v6 = 0;
  }
  mlir::Block::getTerminator(v6);
  if ((*(unsigned char *)(v7 + 46) & 0x80) != 0)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    unint64_t v9 = *(unsigned int *)(v7 + 68) - 1;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = -1;
  }
  mlir::ValueRange::ValueRange(&v55, v8 + 32, v9);
  int v36 = v40;
  BOOL v37 = v40;
  uint64_t v38 = 8;
  int v39 = 0;
  unint64_t v10 = v55;
  unint64_t v11 = v56;
  unint64_t v49 = v55;
  uint64_t v50 = 0;
  if (v56)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v14 = (const void *)mlir::ValueRange::dereference_iterator(&v49, v12);
      if (v37 != v36) {
        goto LABEL_8;
      }
      uint64_t v15 = HIDWORD(v38);
      if (HIDWORD(v38))
      {
        uint64_t v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v38);
        BOOL v18 = v37;
        while ((const void *)*v18 != v14)
        {
          if (*v18 == -2) {
            uint64_t v16 = v18;
          }
          ++v18;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_22;
            }
            *uint64_t v16 = v14;
            --v39;
            goto LABEL_9;
          }
        }
        goto LABEL_9;
      }
LABEL_22:
      if (HIDWORD(v38) < v38)
      {
        ++HIDWORD(v38);
        *(void *)&v37[8 * v15] = v14;
      }
      else
      {
LABEL_8:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v36, v14);
      }
LABEL_9:
      uint64_t v12 = ++v50;
      if (v49 == v10 && v12 == v11)
      {
        unint64_t v19 = v56;
        if (v56 == HIDWORD(v38) - v39) {
          break;
        }
        unint64_t v49 = 1;
        uint64_t v50 = -4096;
        uint64_t v51 = -4096;
        uint64_t v53 = -4096;
        uint64_t v54 = -4096;
        uint64_t v46 = v48;
        uint64_t v47 = 0x600000000;
        if (v56
          && (unint64_t v23 = (4 * (int)v56 / 3u + 1) | ((unint64_t)(4 * (int)v56 / 3u + 1) >> 1),
              unint64_t v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4),
              unsigned int v25 = ((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8),
              v25 >= 4))
        {
          llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v49, v25 + 1);
          unint64_t v19 = v56;
          if (v56 <= HIDWORD(v47))
          {
LABEL_38:
            unint64_t v26 = v55;
            v44[0] = (__n128)v55;
            if (v19)
            {
              uint64_t v27 = 0;
              do
              {
                v45.n128_u64[0] = mlir::ValueRange::dereference_iterator(v44, v27);
                long long v42 = 0;
                if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)&v49, v45.n128_u64, &v42) & 1) == 0)
                {
                  long long v42 = (void *)v45.n128_u64[0];
                  LODWORD(v43) = v49 >> 1;
                  uint64_t v41 = 0;
                  if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)&v49, (unint64_t *)&v42, &v41) & 1) == 0)
                  {
                    int v30 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(&v49, (uint64_t)&v42, (unint64_t *)&v42, v41);
                    *int v30 = v42;
                    *((_DWORD *)v30 + 2) = v43;
                  }
                  int v28 = v47;
                  if (v47 >= HIDWORD(v47))
                  {
                    unint64_t v31 = v45.n128_u64[0];
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v47 + 1, 8);
                    *((void *)v46 + v47) = v31;
                    int v28 = v47;
                  }
                  else
                  {
                    *((void *)v46 + v47) = v45.n128_u64[0];
                  }
                  LODWORD(v47) = v28 + 1;
                }
                uint64_t v27 = ++v44[0].n128_u64[1];
              }
              while (v44[0].n128_u64[0] != v26 || v27 != v19);
            }
            mlir::ValueRange::ValueRange(v45.n128_u64, (uint64_t)v46, v47);
            uint64_t v32 = *(void *)(a2 + 24);
            mlir::ValueRange::getTypes(&v45, v44);
            if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
            {
              uint64_t v33 = *(unsigned int *)(a2 + 68);
              uint64_t v34 = *(void **)(a2 + 72);
            }
            else
            {
              uint64_t v34 = 0;
              uint64_t v33 = 0;
            }
            long long v42 = v34;
            uint64_t v43 = v33;
            uint64_t v41 = 0;
            mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ValueRange>,mlir::OperandRange,decltype(nullptr),decltype(nullptr)>(a3 + 8, v32, v44[0].n128_u64, (uint64_t)&v42);
          }
        }
        else if (v56 <= 6)
        {
          goto LABEL_38;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v19, 8);
        unint64_t v19 = v56;
        goto LABEL_38;
      }
    }
  }
  unint64_t v49 = (unint64_t)"No results to remove";
  __int16 v52 = 259;
  uint64_t v46 = &v49;
  uint64_t v20 = *(void *)(a3 + 16);
  if (v20 && mlir::RewriterBase::Listener::classof(*(void *)(a3 + 16)))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(void ****, uint64_t), void **))(*(void *)v20 + 64))(v20, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v46);
    uint64_t v22 = v37;
    if (v37 == v36) {
      return v21;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = v37;
    if (v37 == v36) {
      return v21;
    }
  }
  free(v22);
  return v21;
}

void mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ValueRange>,mlir::OperandRange,decltype(nullptr),decltype(nullptr)>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v19, a2, v9);
    unint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    unint64_t v13 = a3[3];
    uint64_t v20 = (const char *)v11;
    uint64_t v21 = v12;
    if (v12)
    {
      unint64_t v11 = mlir::ValueRange::offset_base(&v20, v12);
      uint64_t v12 = v21;
    }
    mlir::TypeRange::TypeRange(v18, v11, v13 - v12);
    mlir::ValueRange::ValueRange((unint64_t *)v17, *(void *)a4, *(void *)(a4 + 8));
    mlir::scf::WhileOp::build(a1, (uint64_t)v19, v18[0], v18[1], v17[0], (unint64_t)v17[1]);
  }
  __int16 v24 = 1283;
  uint64_t v22 = "scf.while";
  uint64_t v23 = 9;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v16 = 259;
  llvm::operator+((uint64_t *)&v20, (uint64_t *)&v15, (uint64_t)v19);
  llvm::report_fatal_error((llvm::Twine *)v19, 1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  v41[6] = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    uint64_t v7 = (void *)(result + 8);
    uint64_t v6 = *(llvm **)(result + 8);
    uint64_t v8 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      uint64_t v25 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(v2 + 8) = buffer;
      *(void *)(v2 + 16) = v25;
      int v27 = *(_DWORD *)v2;
      uint64_t v9 = (llvm *)((char *)v6 + 16 * v8);
      *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
      if (v27)
      {
        char v10 = (void *)(v2 + 72);
        unint64_t v11 = 48;
      }
      else
      {
        char v10 = &buffer[2 * v25];
        uint64_t v7 = buffer;
        unint64_t v11 = 16 * v25 - 16;
        if (v11 < 0x10)
        {
          unint64_t v29 = buffer;
          goto LABEL_41;
        }
      }
    }
    else
    {
      uint64_t v9 = (llvm *)((char *)v6 + 16 * v8);
      *(void *)uint64_t result = 1;
      char v10 = (void *)(result + 72);
      unint64_t v11 = 48;
    }
    uint64_t v28 = (v11 >> 4) + 1;
    unint64_t v29 = &v7[2 * (v28 & 0x1FFFFFFFFFFFFFFELL)];
    int v30 = v7 + 2;
    uint64_t v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 2) = -4096;
      *int v30 = -4096;
      v30 += 4;
      v31 -= 2;
    }
    while (v31);
    if (v28 == (v28 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_42:
      if (v8)
      {
        int v36 = v6;
        do
        {
          if ((*(void *)v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            int v39 = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)v36, &v39);
            BOOL v37 = v39;
            *int v39 = *(void *)v36;
            *((_DWORD *)v37 + 2) = *((_DWORD *)v36 + 2);
            *(_DWORD *)v2 += 2;
          }
          int v36 = (llvm *)((char *)v36 + 16);
        }
        while (v36 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
    {
LABEL_41:
      *unint64_t v29 = -4096;
      v29 += 2;
    }
    while (v29 != v10);
    goto LABEL_42;
  }
  uint64_t v12 = result + 8;
  unint64_t v13 = (unint64_t *)&v39;
  if ((*(void *)(result + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    unint64_t v14 = *(void *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    int v39 = *(void **)(result + 8);
    int v40 = *(_DWORD *)(result + 16);
    unint64_t v13 = v41;
    unint64_t v14 = *(void *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      unint64_t v15 = *(void *)(result + 40);
      if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_28;
    }
  }
  unint64_t *v13 = v14;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 32);
  v13 += 2;
  unint64_t v15 = *(void *)(result + 40);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    unint64_t v16 = *(void *)(result + 56);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  unint64_t *v13 = v15;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 48);
  v13 += 2;
  unint64_t v16 = *(void *)(result + 56);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    int v17 = *(_DWORD *)result;
    if (a2 < 5) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  unint64_t *v13 = v16;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 64);
  v13 += 2;
  int v17 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(void *)uint64_t result = v17 & 1;
    if ((v17 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    unint64_t v19 = (void *)(v2 + 72);
    unint64_t v20 = 48;
    goto LABEL_16;
  }
LABEL_30:
  *(_DWORD *)uint64_t result = v17 & 0xFFFFFFFE;
  uint64_t v32 = a2;
  uint64_t result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(void *)(v2 + 8) = result;
  *(void *)(v2 + 16) = v32;
  int v33 = *(_DWORD *)v2;
  *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
  if (v33) {
    goto LABEL_31;
  }
LABEL_14:
  uint64_t v18 = *(unsigned int *)(v2 + 16);
  if (!v18) {
    goto LABEL_34;
  }
  uint64_t v12 = *(void *)(v2 + 8);
  unint64_t v19 = (void *)(v12 + 16 * v18);
  unint64_t v20 = (unint64_t)v19 - v12 - 16;
  if (v20 < 0x10)
  {
    uint64_t v22 = *(void **)(v2 + 8);
    do
    {
LABEL_33:
      void *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v19);
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v21 = (v20 >> 4) + 1;
  uint64_t v22 = (void *)(v12 + 16 * (v21 & 0x1FFFFFFFFFFFFFFELL));
  uint64_t v23 = (void *)(v12 + 16);
  uint64_t v24 = v21 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 2) = -4096;
    *uint64_t v23 = -4096;
    v23 += 4;
    v24 -= 2;
  }
  while (v24);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_33;
  }
LABEL_34:
  if (&v39 != (void **)v13)
  {
    uint64_t v34 = (unint64_t *)&v39;
    do
    {
      if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v38 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, v34, &v38);
        uint64_t v35 = v38;
        *uint64_t v38 = *v34;
        *((_DWORD *)v35 + 2) = *((_DWORD *)v34 + 2);
        *(_DWORD *)v2 += 2;
      }
      v34 += 2;
    }
    while (v34 != v13);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v5 = *a2;
  uint64_t v6 = &unk_267770000;
  {
    uint64_t v23 = a3;
    uint64_t v21 = a2;
    uint64_t v24 = v3;
    int v22 = v4;
    unint64_t v25 = v5;
    uint64_t v6 = &unk_267770000;
    uint64_t v3 = v24;
    unint64_t v5 = v25;
    int v4 = v22;
    a2 = v21;
    a3 = v23;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      uint64_t v6 = (void *)&unk_267770000;
      uint64_t v3 = v24;
      unint64_t v5 = v25;
      int v4 = v22;
      a2 = v21;
      a3 = v23;
    }
  }
  uint64_t v7 = (v6[385] + 8 * v5) ^ HIDWORD(v5);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
  int v9 = -348639895 * ((v8 >> 47) ^ v8);
  int v10 = v4 - 1;
  unsigned int v11 = v9 & (v4 - 1);
  uint64_t v12 = (void *)(v3 + 16 * v11);
  uint64_t v13 = *v12;
  if (*a2 == *v12)
  {
    uint64_t result = 1;
LABEL_8:
    *a3 = v12;
  }
  else
  {
    unint64_t v15 = 0;
    int v16 = 1;
    uint64_t result = 1;
    while (v13 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v13 == -8192;
      }
      if (v17) {
        unint64_t v15 = v12;
      }
      unsigned int v18 = v11 + v16++;
      unsigned int v11 = v18 & v10;
      uint64_t v12 = (void *)(v3 + 16 * (v18 & v10));
      uint64_t v13 = *v12;
      if (*a2 == *v12) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v15) {
      uint64_t v12 = v15;
    }
    *a3 = v12;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3) {
    goto LABEL_10;
  }
  *a1 += 2;
  if (*a4 != -4096) {
LABEL_7:
  }
    --a1[1];
  return a4;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::ValueRange &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v22[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"scf.condition";
    void v20[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  uint64_t v11 = *a3;
  uint64_t v13 = *a4;
  uint64_t v12 = a4[1];
  v20[0] = v11;
  mlir::OperationState::addOperands((uint64_t)v22, (uint64_t)v20, 1);
  mlir::OperationState::addOperands((uint64_t)v22, v13, v12);
  unint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void anonymous namespace'::WhileRemoveUnusedArgs::~WhileRemoveUnusedArgs(_anonymous_namespace_::WhileRemoveUnusedArgs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::WhileRemoveUnusedArgs::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  v85[6] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 64;
  uint64_t v6 = *(unsigned int *)(a2 + 40);
  unint64_t v7 = (a2
      + 64
      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v7 + 32 * v6 + 8);
  uint64_t v9 = v8 - 8;
  if (!v8) {
    uint64_t v9 = 0;
  }
  char v10 = *(void ***)(v9 + 48);
  uint64_t v11 = *(void *)(v9 + 56) - (void)v10;
  if (v11)
  {
    uint64_t v12 = 8 * (v11 >> 3);
    while (**v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_7;
      }
    }
    uint64_t v15 = *(void *)(v7 + 32 * v6 + 32);
    if (v15) {
      int v16 = (ZinIrHalH13g **)(v15 - 8);
    }
    else {
      int v16 = 0;
    }
    mlir::Block::getTerminator(v16);
    uint64_t v18 = v17;
    uint64_t v83 = (void **)v85;
    uint64_t v84 = 0x600000000;
    uint64_t v80 = v82;
    uint64_t v81 = 0x600000000;
    int v79 = 0;
    uint64_t v19 = *(unsigned int *)(v4 + 40);
    unint64_t v20 = v5
        + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(v4 + 44) >> 21) & 0x7F8);
    BOOL v76 = v78;
    uint64_t v77 = 0x600000000;
    uint64_t v21 = *(void *)(((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v19 + 8);
    if (v21) {
      uint64_t v22 = v21 - 8;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v24 = *(void *)(v22 + 48);
    uint64_t v23 = *(void *)(v22 + 56);
    unint64_t v25 = v23 - v24;
    unint64_t v26 = (v23 - v24) >> 3;
    if ((unint64_t)(v23 - v24) < 0x31)
    {
      if (v26 <= 6) {
        goto LABEL_22;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, (v23 - v24) >> 3, 8);
      if (v26 <= HIDWORD(v81))
      {
LABEL_22:
        unint64_t v27 = ((v25 >> 3) + 63) >> 6;
        if (HIDWORD(v77) < v27) {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v27, 8);
        }
        uint64_t v28 = *(unsigned int *)(v4 + 40);
        unint64_t v29 = *(unsigned int *)(v4 + 44);
        uint64_t v30 = (v29 >> 23) & 1;
        uint64_t v31 = (v29 >> 21) & 0x7F8;
        uint64_t v32 = *(void *)(((v5 + 16 * v30 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v28 + 8);
        if (v32) {
          uint64_t v33 = v32 - 8;
        }
        else {
          uint64_t v33 = 0;
        }
        if ((*(unsigned char *)(v18 + 46) & 0x80) != 0)
        {
          uint64_t v34 = *(void *)(v18 + 72);
          uint64_t v35 = *(unsigned int *)(v18 + 68);
          if ((v29 & 0x800000) == 0) {
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          if ((v29 & 0x800000) == 0) {
            goto LABEL_66;
          }
        }
        BOOL v37 = *(void ***)(v33 + 48);
        int v36 = *(void ***)(v33 + 56);
        uint64_t v38 = *(unsigned int *)(v4 + 68);
        BOOL v39 = v36 == v37 || v35 == 0;
        if (!v39 && v38 != 0)
        {
          uint64_t v69 = v5;
          uint64_t v70 = v3;
          uint64_t v41 = 0;
          uint64_t v71 = v4;
          uint64_t v42 = v34 + 24;
          uint64_t v43 = *(void *)(v4 + 72) + 24;
          uint64_t v44 = 32 * v35 - 32;
          uint64_t v45 = 32 * v38 - 32;
          uint64_t v46 = 8 * (v36 - v37) - 8;
          uint64_t v73 = v45;
          while (1)
          {
            if (!**v37)
            {
              llvm::BitVector::push_back((llvm::BitVector *)&v76, 1);
              goto LABEL_56;
            }
            uint64_t v47 = *(void **)(v42 + v41);
            uint64_t v48 = *(void *)(v43 + v41);
            int v49 = v79;
            uint64_t v50 = v77;
            int v51 = v79 + 1;
            if ((v79 + 1) <= v77 << 6)
            {
              ++v79;
              goto LABEL_52;
            }
            uint64_t v52 = v44;
            uint64_t v53 = v43;
            uint64_t v54 = v42;
            if ((v79 & 0x3F) != 0) {
              *((void *)v76 + v77 - 1) &= ~(-1 << (v79 & 0x3F));
            }
            int v79 = v51;
            unint64_t v55 = (v49 + 64) >> 6;
            if (v50 != v55) {
              break;
            }
LABEL_48:
            int v59 = v51 & 0x3F;
            uint64_t v42 = v54;
            uint64_t v43 = v53;
            uint64_t v44 = v52;
            uint64_t v45 = v73;
            if (v59) {
              *((void *)v76 + v50 - 1) &= ~(-1 << v59);
            }
LABEL_52:
            int v60 = v84;
            if (v84 >= HIDWORD(v84))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
              v83[v84] = v47;
              LODWORD(v84) = v84 + 1;
              uint64_t v61 = v81;
              if (v81 >= HIDWORD(v81))
              {
LABEL_62:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v61 + 1, 8);
                *(void *)&v80[8 * v81] = v48;
                int v62 = v81 + 1;
                goto LABEL_55;
              }
            }
            else
            {
              v83[v84] = v47;
              LODWORD(v84) = v60 + 1;
              uint64_t v61 = v81;
              if (v81 >= HIDWORD(v81)) {
                goto LABEL_62;
              }
            }
            *(void *)&v80[8 * v61] = v48;
            int v62 = v61 + 1;
LABEL_55:
            LODWORD(v81) = v62;
LABEL_56:
            if (v46)
            {
              if (v44 != v41)
              {
                ++v37;
                v46 -= 8;
                BOOL v39 = v45 == v41;
                v41 += 32;
                if (!v39) {
                  continue;
                }
              }
            }
            uint64_t v3 = v70;
            uint64_t v4 = v71;
            uint64_t v28 = *(unsigned int *)(v71 + 40);
            unint64_t v63 = *(unsigned int *)(v71 + 44);
            uint64_t v30 = (v63 >> 23) & 1;
            uint64_t v31 = (v63 >> 21) & 0x7F8;
            uint64_t v5 = v69;
            goto LABEL_66;
          }
          if (v50 > v55)
          {
LABEL_47:
            LODWORD(v77) = v55;
            LODWORD(v50) = v55;
            goto LABEL_48;
          }
          uint64_t v56 = v50;
          int v57 = v50;
          if (HIDWORD(v77) < v55)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v55, 8);
            uint64_t v56 = v77;
            int v57 = v77;
            uint64_t v58 = v55 - v50;
            if (v55 == v50) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v58 = v55 - v50;
            if (v55 == v50)
            {
LABEL_46:
              LODWORD(v55) = v55 - v50 + v57;
              LOBYTE(v51) = v79;
              goto LABEL_47;
            }
          }
          int v72 = v57;
          bzero((char *)v76 + 8 * v56, 8 * v58);
          int v57 = v72;
          goto LABEL_46;
        }
LABEL_66:
        uint64_t v64 = *(void *)(((v5 + 16 * v30 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v28 + 8);
        if (v64) {
          uint64_t v65 = v64 - 8;
        }
        else {
          uint64_t v65 = 0;
        }
        mlir::Block::eraseArguments(v65, (uint64_t)&v76);
        uint64_t v66 = *(void *)(v4 + 24);
        uint64_t v67 = *(unsigned int *)(v4 + 36);
        uint64_t v68 = v4 - 16;
        if (!v67) {
          uint64_t v68 = 0;
        }
        v75[0] = v68;
        v75[1] = v67;
        mlir::OperandRange::getTypes(v75, v74);
        v75[0] = 0;
        mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &,decltype(nullptr),decltype(nullptr)>(v3 + 8, v66, v74, (uint64_t)&v80);
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v26, 8);
    goto LABEL_22;
  }
LABEL_7:
  BOOL v76 = "No args to remove";
  v78[8] = 259;
  uint64_t v83 = &v76;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a3 + 16));
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(void ****, uint64_t), void ***))(*(void *)v13 + 64))(v13, *(void *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v83);
  }
  return result;
}

void llvm::BitVector::push_back(llvm::BitVector *this, int a2)
{
  unsigned int v4 = *((_DWORD *)this + 16);
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v4 + 1 > v6 << 6)
  {
    if ((v4 & 0x3F) != 0) {
      *(void *)(*(void *)this + 8 * v6 - 8) &= ~(-1 << (v4 & 0x3F));
    }
    *((_DWORD *)this + 16) = v5;
    uint64_t v7 = (v4 + 64) >> 6;
    if (v6 == v7)
    {
LABEL_11:
      int v11 = v5 & 0x3F;
      if (v11) {
        *(void *)(*(void *)this + 8 * v6 - 8) &= ~(-1 << v11);
      }
      if (a2) {
        goto LABEL_14;
      }
      return;
    }
    if (v6 > v7)
    {
LABEL_10:
      *((_DWORD *)this + 2) = v7;
      LODWORD(v6) = v7;
      goto LABEL_11;
    }
    uint64_t v8 = v6;
    int v9 = v6;
    if (*((_DWORD *)this + 3) < v7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, (v4 + 64) >> 6, 8);
      uint64_t v8 = *((unsigned int *)this + 2);
      int v9 = *((_DWORD *)this + 2);
      uint64_t v10 = v7 - v6;
      if (v7 == v6) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v10 = v7 - v6;
      if (v7 == v6)
      {
LABEL_9:
        LODWORD(v7) = v9 + v7 - v6;
        unsigned int v5 = *((_DWORD *)this + 16);
        goto LABEL_10;
      }
    }
    bzero((void *)(*(void *)this + 8 * v8), 8 * v10);
    goto LABEL_9;
  }
  *((_DWORD *)this + 16) = v5;
  if (a2) {
LABEL_14:
  }
    *(void *)(*(void *)this + 8 * (v4 >> 6)) |= 1 << v4;
}

void mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &,decltype(nullptr),decltype(nullptr)>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v19, a2, v9);
    uint64_t NextResultAtOffset = *a3;
    uint64_t v12 = a3[1];
    uint64_t v13 = a3[3];
    if (v12) {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v12);
    }
    mlir::ValueRange::ValueRange((unint64_t *)v20, NextResultAtOffset, v13 - v12);
    mlir::TypeRange::TypeRange(v18, v20[0], v20[1]);
    mlir::ValueRange::ValueRange((unint64_t *)v17, *(void *)a4, *(unsigned int *)(a4 + 8));
    mlir::scf::WhileOp::build(a1, (uint64_t)v19, v18[0], v18[1], v17[0], (unint64_t)v17[1]);
  }
  __int16 v21 = 1283;
  unint64_t v20[2] = (uint64_t)"scf.while";
  void v20[3] = 9;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v16 = 259;
  llvm::operator+(v20, (uint64_t *)&v15, (uint64_t)v19);
  llvm::report_fatal_error((llvm::Twine *)v19, 1);
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  if (a1 != a3 || a2 != a4)
  {
    while (1)
    {
      unint64_t v19 = mlir::RegionRange::dereference_iterator(&v21, a2);
      mlir::ValueRange::ValueRange(&v20, 0, 0);
      uint64_t v11 = *(unsigned int *)(a5 + 8);
      unint64_t v12 = *(void *)a5;
      if (v11 < *(_DWORD *)(a5 + 12)) {
        goto LABEL_5;
      }
      unint64_t v16 = v11 + 1;
      BOOL v17 = v12 + 24 * v11 > (unint64_t)&v19;
      if (v12 > (unint64_t)&v19 || !v17) {
        break;
      }
      uint64_t v18 = (char *)&v19 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16, 24);
      unint64_t v12 = *(void *)a5;
      uint64_t v13 = (unint64_t *)&v18[*(void *)a5];
LABEL_6:
      uint64_t v14 = v12 + 24 * *(unsigned int *)(a5 + 8);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(a5 + 8);
      a2 = ++*((void *)&v21 + 1);
      if ((void)v21 == a3 && a2 == a4) {
        goto LABEL_3;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16, 24);
    unint64_t v12 = *(void *)a5;
LABEL_5:
    uint64_t v13 = &v19;
    goto LABEL_6;
  }
LABEL_3:
  double result = *(double *)&v21;
  *(_OWORD *)a6 = v21;
  *(void *)(a6 + 16) = a5;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::IndexSwitchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    unsigned int v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unsigned int v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        unsigned int v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    unint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    BOOL v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      BOOL v17 = v40;
      unint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    long long v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          *unint64_t v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IndexSwitchOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x263EF8340];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::isOpTriviallyDead(void ***this, mlir::Operation *a2)
{
  uint64_t v3 = *((unsigned int *)this + 9);
  long long v4 = this - 2;
  if (v3) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v3)
  {
    if (*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v4, 0)) {
      return 0;
    }
    uint64_t v6 = 1;
    while (v3 != v6)
    {
      uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++);
      if (*NextResultAtOffset) {
        return 0;
      }
    }
  }

  return mlir::wouldOpBeTriviallyDead(this, a2);
}

uint64_t mlir::wouldOpBeTriviallyDead(void ***this, mlir::Operation *a2)
{
  v74[1] = *MEMORY[0x263EF8340];
  if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(this + 6) & 1) != 0
    || (mlir::SymbolOpInterface::classof((mlir::SymbolOpInterface *)this, v3) & 1) != 0)
  {
    return 0;
  }
  uint64_t v71 = v74;
  unsigned int v6 = 1;
  unsigned int v73 = 1;
  long long v7 = &v70;
  v74[0] = this;
  uint64_t v8 = (void *)&unk_267771000;
  while (1)
  {
    uint64_t v9 = v71[v6 - 1];
    unsigned int v72 = v6 - 1;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((void *)(v9 + 48))) {
      break;
    }
    uint64_t v10 = v7;
    unint64_t v11 = *(unsigned int *)(v9 + 44);
    if ((v11 & 0x7FFFFF) != 0)
    {
      unint64_t v12 = ((v9 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v9 + 40);
      unint64_t v13 = v12 + 24 * (v11 & 0x7FFFFF);
      do
      {
        for (uint64_t i = *(void *)(v12 + 8); i != v12; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v15 = i - 8;
          if (!i) {
            uint64_t v15 = 0;
          }
          unint64_t v16 = (ZinIrHalH13g *)(v15 + 32);
          BOOL v17 = *(ZinIrHalH13g **)(v15 + 40);
          if (v17 != (ZinIrHalH13g *)(v15 + 32))
          {
            do
            {
              ZinIrHalH13g::~ZinIrHalH13g(v17);
              uint64_t v19 = v18;
              uint64_t v20 = v72;
              if (v72 >= (unint64_t)v73)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v72 + 1, 8);
                uint64_t v20 = v72;
              }
              v71[v20] = v19;
              ++v72;
              BOOL v17 = (ZinIrHalH13g *)*((void *)v17 + 1);
            }
            while (v17 != v16);
          }
        }
        v12 += 24;
      }
      while (v12 != v13);
    }
    uint64_t v21 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(v9);
    long long v7 = v10;
    uint64_t v8 = &unk_267771000;
    if (v21) {
      goto LABEL_25;
    }
LABEL_7:
    unsigned int v6 = v72;
    if (!v72)
    {
      uint64_t v4 = 1;
      int v60 = v71;
      if (v71 == v74) {
        return v4;
      }
LABEL_105:
      free(v60);
      return v4;
    }
  }
  uint64_t v21 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(v9);
  if (!v21) {
    goto LABEL_102;
  }
LABEL_25:
  uint64_t v68 = v7;
  uint64_t v69 = 0x100000000;
  (*v22)(v22, v21, &v68);
  uint64_t v61 = v65;
  int v62 = v65;
  uint64_t v63 = 4;
  int v64 = 0;
  if (!v69) {
    goto LABEL_96;
  }
  uint64_t v23 = (char *)v68;
  uint64_t v24 = (char *)v68 + 40 * v69;
  do
  {
    uint64_t v25 = **(void **)v23;
    {
      uint64_t v66 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
      unint64_t v67 = 79;
      unint64_t v34 = llvm::StringRef::find((uint64_t *)&v66, "DesiredTypeName = ", 0x12uLL, 0);
      if (v67 >= v34) {
        unint64_t v35 = v34;
      }
      else {
        unint64_t v35 = v67;
      }
      __int16 v36 = &v66[v35];
      unint64_t v37 = v67 - v35;
      uint64_t v38 = 18;
      if (v37 < 0x12) {
        uint64_t v38 = v37;
      }
      unint64_t v39 = v37 - v38;
      if (v39 >= v39 - 1) {
        uint64_t v40 = v39 - 1;
      }
      else {
        uint64_t v40 = v39;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
    }
    if (v25 == mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id)
    {
      unint64_t v26 = *((void *)v23 + 2);
      if (v26 >= 8 && (v26 & ((uint64_t)(v26 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v66 = (const char *)(v26 & ((uint64_t)(v26 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
        if (mlir::Value::getDefiningOp((mlir::Value *)&v66) == v9)
        {
          unint64_t v28 = *((void *)v23 + 2);
          if (v28 <= 7) {
            unint64_t v29 = 0;
          }
          else {
            unint64_t v29 = (const void *)(v28 & ((uint64_t)(v28 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
          }
          if (v62 != v61)
          {
LABEL_27:
            llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v61, v29);
            goto LABEL_28;
          }
          uint64_t v30 = HIDWORD(v63);
          if (HIDWORD(v63))
          {
            int64_t v31 = 0;
            uint64_t v32 = 8 * HIDWORD(v63);
            uint64_t v33 = v62;
            while ((const void *)*v33 != v29)
            {
              if (*v33 == -2) {
                int64_t v31 = v33;
              }
              ++v33;
              v32 -= 8;
              if (!v32)
              {
                if (!v31) {
                  goto LABEL_48;
                }
                void *v31 = v29;
                --v64;
                break;
              }
            }
          }
          else
          {
LABEL_48:
            if (HIDWORD(v63) >= v63) {
              goto LABEL_27;
            }
            ++HIDWORD(v63);
            *(void *)&v62[8 * v30] = v29;
          }
        }
      }
    }
LABEL_28:
    v23 += 40;
  }
  while (v23 != v24);
  if (!v69)
  {
LABEL_96:
    char v58 = 1;
    int v59 = v62;
    if (v62 == v61) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  unsigned int v41 = (char *)v68;
  unsigned int v42 = (char *)v68 + 40 * v69;
  while (1)
  {
    unint64_t v43 = *((void *)v41 + 2);
    uint64_t v44 = v43 <= 7 ? 0 : (const void *)(v43 & ((uint64_t)(v43 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
    if (v62 == v61)
    {
      unsigned __int8 v48 = &v62[8 * HIDWORD(v63)];
      if (HIDWORD(v63))
      {
        uint64_t v49 = 0;
        while (*(const void **)&v62[v49] != v44)
        {
          v49 += 8;
          if (8 * HIDWORD(v63) == v49) {
            goto LABEL_82;
          }
        }
        unsigned __int8 v48 = &v62[v49];
      }
LABEL_82:
      if (v48 != &v62[8 * HIDWORD(v63)]) {
        goto LABEL_62;
      }
    }
    else
    {
      BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v61, v44);
      if (*BucketFor != v44)
      {
        int v46 = v63;
        if (v62 == v61) {
          int v46 = HIDWORD(v63);
        }
        BucketFor = (const void **)&v62[8 * v46];
      }
      if (v62 == v61) {
        int v47 = HIDWORD(v63);
      }
      else {
        int v47 = v63;
      }
      if (BucketFor != (const void **)&v62[8 * v47]) {
        goto LABEL_62;
      }
    }
    uint64_t v50 = **(void **)v41;
    {
      uint64_t v66 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
      unint64_t v67 = 75;
      unint64_t v51 = llvm::StringRef::find((uint64_t *)&v66, "DesiredTypeName = ", 0x12uLL, 0);
      if (v67 >= v51) {
        unint64_t v52 = v51;
      }
      else {
        unint64_t v52 = v67;
      }
      uint64_t v53 = &v66[v52];
      unint64_t v54 = v67 - v52;
      uint64_t v55 = 18;
      if (v54 < 0x12) {
        uint64_t v55 = v54;
      }
      unint64_t v56 = v54 - v55;
      if (v56 >= v56 - 1) {
        uint64_t v57 = v56 - 1;
      }
      else {
        uint64_t v57 = v56;
      }
      v8[408] = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
    }
    if (v50 != v8[408]) {
      break;
    }
LABEL_62:
    v41 += 40;
    if (v41 == v42) {
      goto LABEL_96;
    }
  }
  char v58 = 0;
  int v59 = v62;
  if (v62 != v61) {
LABEL_97:
  }
    free(v59);
LABEL_98:
  if (v68 != v7) {
    free(v68);
  }
  if (v58) {
    goto LABEL_7;
  }
LABEL_102:
  uint64_t v4 = 0;
  int v60 = v71;
  if (v71 != v74) {
    goto LABEL_105;
  }
  return v4;
}

uint64_t mlir::isMemoryEffectFree(mlir *this, mlir::Operation *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  if (v3)
  {
    v16[0] = &v17;
    v16[1] = (void *)0x400000000;
    (*v4)(v4, v3, v16);
    int v5 = (int)v16[1];
    if (v16[0] != &v17) {
      free(v16[0]);
    }
    if (v5) {
      return 0;
    }
    if ((mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((void *)this + 6) & 1) == 0) {
      return 1;
    }
    goto LABEL_9;
  }
  uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((void *)this + 6);
  if (result)
  {
LABEL_9:
    unint64_t v7 = *((unsigned int *)this + 11);
    if ((v7 & 0x7FFFFF) != 0)
    {
      uint64_t v8 = (mlir::Region *)((((unint64_t)this + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *((unsigned int *)this + 10));
      uint64_t v9 = (mlir::Region *)((char *)v8 + 24 * (v7 & 0x7FFFFF));
      while (1)
      {
        mlir::Region::OpIterator::OpIterator(&v14, v8, 0);
        mlir::Region::OpIterator::OpIterator(&v18, v8, 1);
        uint64_t v10 = v15;
        BOOL v17 = v15;
        *(_OWORD *)unint64_t v16 = v14;
        unint64_t v11 = v19;
        if (v15 != v19) {
          break;
        }
LABEL_14:
        uint64_t v8 = (mlir::Region *)((char *)v8 + 24);
        uint64_t result = 1;
        if (v8 == v9) {
          return result;
        }
      }
      while (1)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v10);
        if ((mlir::isMemoryEffectFree(v12, v13) & 1) == 0) {
          return 0;
        }
        mlir::Region::OpIterator::operator++((uint64_t *)&v14);
        uint64_t v10 = v15;
        if (v15 == v11) {
          goto LABEL_14;
        }
      }
    }
    return 1;
  }
  return result;
}

void mlir::getEffectsRecursively(mlir *this@<X0>, uint64_t a2@<X8>)
{
  v29[5] = *MEMORY[0x263EF8340];
  __src = v29;
  uint64_t v28 = 0x100000000;
  uint64_t v23 = v26;
  unsigned int v25 = 6;
  v26[0] = this;
  unsigned int v4 = 1;
  do
  {
    uint64_t v7 = *((void *)v23 + v4 - 1);
    unsigned int v24 = v4 - 1;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((void *)(v7 + 48)))
    {
      uint64_t v6 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(v7);
      if (!v6)
      {
        *(unsigned char *)a2 = 0;
        goto LABEL_25;
      }
      goto LABEL_3;
    }
    unint64_t v8 = *(unsigned int *)(v7 + 44);
    if ((v8 & 0x7FFFFF) != 0)
    {
      unint64_t v9 = ((v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(v7 + 40);
      unint64_t v10 = v9 + 24 * (v8 & 0x7FFFFF);
      for (uint64_t i = *(void *)(v9 + 8); i != v9; uint64_t i = *(void *)(i + 8))
      {
LABEL_10:
        uint64_t v12 = i - 8;
        if (!i) {
          uint64_t v12 = 0;
        }
        unint64_t v13 = (ZinIrHalH13g *)(v12 + 32);
        long long v14 = *(ZinIrHalH13g **)(v12 + 40);
        if (v14 != (ZinIrHalH13g *)(v12 + 32))
        {
          do
          {
            ZinIrHalH13g::~ZinIrHalH13g(v14);
            uint64_t v16 = v15;
            uint64_t v17 = v24;
            if (v24 >= (unint64_t)v25)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v24 + 1, 8);
              uint64_t v17 = v24;
            }
            *((void *)v23 + v17) = v16;
            ++v24;
            long long v14 = (ZinIrHalH13g *)*((void *)v14 + 1);
          }
          while (v14 != v13);
        }
      }
      while (1)
      {
        v9 += 24;
        if (v9 == v10) {
          break;
        }
        uint64_t i = *(void *)(v9 + 8);
        if (i != v9) {
          goto LABEL_10;
        }
      }
    }
    uint64_t v18 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(v7);
    if (v18)
    {
      uint64_t v6 = v18;
LABEL_3:
      (*v5)(v5, v6, &__src);
    }
    unsigned int v4 = v24;
  }
  while (v24);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x100000000;
  int v19 = v28;
  LOBYTE(v6) = 1;
  if (!v28 || &__src == (void **)a2)
  {
LABEL_25:
    *(unsigned char *)(a2 + 56) = v6;
    uint64_t v21 = v23;
    if (v23 == v26) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (__src != v29)
  {
    *(void *)a2 = __src;
    int v20 = HIDWORD(v28);
    *(_DWORD *)(a2 + 8) = v19;
    *(_DWORD *)(a2 + 12) = v20;
    __src = v29;
    HIDWORD(v28) = 0;
    goto LABEL_36;
  }
  if (v28 < 2)
  {
    unsigned int v22 = 1;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28, 40);
    unsigned int v22 = v28;
    if (!v28) {
      goto LABEL_35;
    }
  }
  memcpy(*(void **)a2, __src, 40 * v22);
LABEL_35:
  *(_DWORD *)(a2 + 8) = v19;
LABEL_36:
  LODWORD(v28) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t v21 = v23;
  if (v23 != v26) {
LABEL_26:
  }
    free(v21);
LABEL_27:
  if (__src != v29) {
    free(__src);
  }
}

void mlir::openOutputFile()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  v0.__val_ = 0;
  v0.__cat_ = std::system_category();
  operator new();
}

void mlir::detail::InterfaceMap::insert(uint64_t a1, unint64_t a2, void *a3)
{
  unsigned int v4 = *(void **)a1;
  unint64_t v5 = *(unsigned int *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + 16 * v5;
  if (v5)
  {
    do
    {
      unint64_t v7 = v5 >> 1;
      unint64_t v8 = &v4[2 * (v5 >> 1)];
      unint64_t v10 = *v8;
      unint64_t v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 < a2) {
        unsigned int v4 = v9;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    while (v5);
    if (v4 != (void *)v6 && *v4 == a2)
    {
      free(a3);
    }
    else
    {
      unint64_t v11 = a2;
      uint64_t v12 = a3;
      llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(a1, (uint64_t)v4, &v11);
    }
  }
  else
  {
    unint64_t v11 = a2;
    uint64_t v12 = a3;
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(a1, v6, &v11);
  }
}

void *llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 16 * v6 != a2)
  {
    uint64_t v7 = a2 - v5;
    uint64_t v8 = (a2 - v5) >> 4;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    uint64_t result = (void *)(v5 + 16 * v8);
    *(_OWORD *)(v5 + 16 * v6) = *(_OWORD *)(v5 + 16 * v6 - 16);
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    uint64_t v11 = *(void *)a1 + 16 * v10;
    uint64_t v12 = (void *)(v11 - 16);
    if ((void *)(v11 - 16) == result) {
      goto LABEL_15;
    }
    unint64_t v13 = v11 - ((v7 & 0xFFFFFFFFFFFFFFF0) + v5) - 32;
    if (v13 >= 0x30)
    {
      uint64_t v17 = (v13 >> 4) + 1;
      uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v14 = v11 - v18;
      uint64_t v12 = (void *)((char *)v12 - v18);
      int v19 = (double *)(v11 - 32);
      uint64_t v20 = v17 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v21 = v19 - 2;
        float64x2x2_t v27 = vld2q_f64(v21);
        unsigned int v22 = v19 - 6;
        float64x2x2_t v28 = vld2q_f64(v22);
        uint64_t v23 = v19 - 4;
        vst2q_f64(v19, v27);
        vst2q_f64(v23, v28);
        v19 -= 8;
        v20 -= 4;
      }
      while (v20);
      if (v17 == (v17 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v14 = *(void *)a1 + 16 * v10;
    }
    unsigned int v24 = (void *)(v14 - 8);
    do
    {
      uint64_t v25 = *(v12 - 2);
      v12 -= 2;
      *(v24 - 1) = v25;
      *unsigned int v24 = v12[1];
      v24 -= 2;
    }
    while (v12 != result);
LABEL_15:
    *(_DWORD *)(a1 + 8) = v10 + 1;
    *uint64_t result = *a3;
    result[1] = a3[1];
    return result;
  }
  long long v15 = *(_OWORD *)a3;
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    long long v26 = *(_OWORD *)a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    long long v15 = v26;
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    uint64_t v5 = *(void *)a1;
  }
  *(_OWORD *)(v5 + 16 * v6) = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v16;
  return (void *)(*(void *)a1 + 16 * v16 - 16);
}

void mlir::StorageUniquer::StorageUniquer(mlir::StorageUniquer *this)
{
}

void mlir::StorageUniquer::~StorageUniquer(llvm ***this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    mlir::detail::StorageUniquerImpl::~StorageUniquerImpl(v2);
  }
}

uint64_t mlir::StorageUniquer::getParametricStorageTypeImpl(unsigned __int8 **a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  return mlir::detail::StorageUniquerImpl::getOrCreate(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t mlir::detail::StorageUniquerImpl::getOrCreate(unsigned __int8 *a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  v92[9] = *MEMORY[0x263EF8340];
  uint64_t v84 = a2;
  uint64_t v14 = *v13;
  uint64_t v83 = (mlir::detail::StorageUniquerImpl *)a1;
  int v15 = a1[256];
  uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)((*v13)[2] + 8 * ((*((_DWORD *)*v13 + 6) - 1) & a3)), memory_order_acquire);
  if (!explicit) {
    operator new();
  }
  unsigned int v86 = a3;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  if (!v15)
  {
    LODWORD(v85) = a3;
    *((void *)&v85 + 1) = 0;
    uint64_t v26 = v90;
    if (!BYTE8(v91)) {
      return *(void *)(v90 + 8);
    }
    uint64_t ThreadSafeAllocator = mlir::detail::StorageUniquerImpl::getThreadSafeAllocator(v83);
    uint64_t v28 = a6(a7, ThreadSafeAllocator);
    *(void *)(v26 + 8) = v28;
    return v28;
  }
  {
    *unint64_t v54 = 1;
    v54[1] = -4096;
    v54[4] = -4096;
    v54[7] = -4096;
    v54[10] = -4096;
  }
  uint64_t v19 = v18;
  uint64_t v20 = *v14;
  unsigned int v22 = (uint64_t *)(v18 + 8);
  unsigned int v21 = *(_DWORD *)v18;
  int v23 = *(_DWORD *)v18 & 1;
  if (v23)
  {
    int v24 = 4;
    uint64_t v25 = v18 + 8;
  }
  else
  {
    int v24 = *(_DWORD *)(v18 + 16);
    if (!v24)
    {
      int64_t v31 = 0;
      unsigned int v37 = 0;
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(v18 + 8);
  }
  int v29 = v24 - 1;
  unsigned int v30 = v29 & ((v20 >> 4) ^ (v20 >> 9));
  int64_t v31 = (uint64_t *)(v25 + 24 * v30);
  uint64_t v32 = *v31;
  if (*v31 == v20) {
    goto LABEL_13;
  }
  uint64_t v55 = 0;
  int v56 = 1;
  while (v32 != -4096)
  {
    if (v55) {
      BOOL v57 = 0;
    }
    else {
      BOOL v57 = v32 == -8192;
    }
    if (v57) {
      uint64_t v55 = v31;
    }
    unsigned int v58 = v30 + v56++;
    unsigned int v30 = v58 & v29;
    int64_t v31 = (uint64_t *)(v25 + 24 * v30);
    uint64_t v32 = *v31;
    if (*v31 == v20) {
      goto LABEL_13;
    }
  }
  if (v55) {
    int64_t v31 = v55;
  }
  if (v23) {
    unsigned int v37 = 4;
  }
  else {
    unsigned int v37 = *(_DWORD *)(v18 + 16);
  }
LABEL_20:
  if (4 * (v21 >> 1) + 4 >= 3 * v37)
  {
    v37 *= 2;
LABEL_59:
    unsigned int v82 = a3;
    int v59 = a6;
    if (v37 >= 5)
    {
      unint64_t v60 = (v37 - 1) | ((unint64_t)(v37 - 1) >> 1);
      unint64_t v61 = v60 | (v60 >> 2) | ((v60 | (v60 >> 2)) >> 4);
      int v62 = ((v61 | (v61 >> 8)) >> 16) | v61 | (v61 >> 8);
      if ((v62 + 1) > 0x40) {
        unsigned int v37 = v62 + 1;
      }
      else {
        unsigned int v37 = 64;
      }
    }
    if (!v23)
    {
      uint64_t v63 = *(uint64_t **)(v18 + 8);
      uint64_t v64 = *(unsigned int *)(v18 + 16);
      if (v37 > 4)
      {
        uint64_t v70 = v37;
        *(void *)(v18 + 8) = llvm::allocate_buffer(24 * v37, (std::align_val_t)8uLL);
        *(void *)(v19 + 16) = v70;
      }
      else
      {
        *(_DWORD *)uint64_t v18 = v21 | 1;
      }
      llvm::deallocate_buffer((llvm *)v63, (void *)(24 * v64));
    }
    uint64_t v65 = &v90;
    if ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      uint64_t v66 = *(void *)(v18 + 32);
      if ((v66 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v90 = *v22;
      long long v91 = *(_OWORD *)(v18 + 16);
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      uint64_t v65 = v92;
      uint64_t v66 = *(void *)(v18 + 32);
      if ((v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
LABEL_68:
        uint64_t v67 = *(void *)(v18 + 56);
        if ((v67 | 0x1000) == 0xFFFFFFFFFFFFF000) {
          goto LABEL_69;
        }
        goto LABEL_84;
      }
    }
    *uint64_t v65 = v66;
    *(_OWORD *)(v65 + 1) = *(_OWORD *)(v18 + 40);
    *(void *)(v18 + 40) = 0;
    *(void *)(v18 + 48) = 0;
    v65 += 3;
    uint64_t v67 = *(void *)(v18 + 56);
    if ((v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_69:
      uint64_t v68 = *(void *)(v18 + 80);
      if ((v68 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_70;
      }
      goto LABEL_85;
    }
LABEL_84:
    *uint64_t v65 = v67;
    *(_OWORD *)(v65 + 1) = *(_OWORD *)(v18 + 64);
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 72) = 0;
    v65 += 3;
    uint64_t v68 = *(void *)(v18 + 80);
    if ((v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_70:
      if (v37 < 5)
      {
LABEL_72:
        unsigned int v21 = *(_DWORD *)v19;
        if (*(_DWORD *)v19)
        {
          int v71 = 4;
          unsigned int v72 = v22;
        }
        else
        {
          int v71 = *(_DWORD *)(v19 + 16);
          if (!v71)
          {
            int v23 = 0;
            int64_t v31 = 0;
LABEL_80:
            a6 = v59;
            a3 = v82;
            goto LABEL_22;
          }
          unsigned int v72 = *(uint64_t **)(v19 + 8);
        }
        int v23 = *(_DWORD *)v19 & 1;
        int v73 = v71 - 1;
        unsigned int v74 = v73 & ((v20 >> 4) ^ (v20 >> 9));
        int64_t v31 = &v72[3 * v74];
        uint64_t v75 = *v31;
        if (*v31 != v20)
        {
          BOOL v76 = 0;
          int v77 = 1;
          while (v75 != -4096)
          {
            if (v76) {
              BOOL v78 = 0;
            }
            else {
              BOOL v78 = v75 == -8192;
            }
            if (v78) {
              BOOL v76 = v31;
            }
            unsigned int v79 = v74 + v77++;
            unsigned int v74 = v79 & v73;
            int64_t v31 = &v72[3 * v74];
            uint64_t v75 = *v31;
            if (*v31 == v20) {
              goto LABEL_80;
            }
          }
          if (v76) {
            int64_t v31 = v76;
          }
        }
        goto LABEL_80;
      }
LABEL_71:
      *(_DWORD *)v18 &= ~1u;
      uint64_t v69 = v37;
      *(void *)(v18 + 8) = llvm::allocate_buffer(24 * v37, (std::align_val_t)8uLL);
      *(void *)(v19 + 16) = v69;
      goto LABEL_72;
    }
LABEL_85:
    *uint64_t v65 = v68;
    *(_OWORD *)(v65 + 1) = *(_OWORD *)(v18 + 88);
    *(void *)(v18 + 88) = 0;
    *(void *)(v18 + 96) = 0;
    v65 += 3;
    if (v37 < 5) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v37 + ~(v21 >> 1) - *(_DWORD *)(v18 + 4) <= v37 >> 3) {
    goto LABEL_59;
  }
LABEL_22:
  *(_DWORD *)uint64_t v19 = (v21 & 0xFFFFFFFE | v23) + 2;
  if (*v31 != -4096) {
    --*(_DWORD *)(v19 + 4);
  }
  v31[1] = 0;
  v31[2] = 0;
  uint64_t *v31 = v20;
LABEL_13:
  uint64_t v81 = a6;
  uint64_t v33 = (std::__shared_weak_count *)v31[2];
  if (!v33 || (unint64_t v34 = std::__shared_weak_count::lock(v33)) == 0)
  {
LABEL_26:
    std::recursive_mutex::lock((std::recursive_mutex *)(*v14 + 24));
    operator new();
  }
  unint64_t v35 = v34;
  uint64_t v36 = v31[1];
  if (atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v36) {
      goto LABEL_26;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v35);
    if (!v36) {
      goto LABEL_26;
    }
  }
  LODWORD(v90) = a3;
  *(void *)&long long v91 = 0;
  uint64_t v38 = v85;
  uint64_t v28 = *(void *)(v85 + 8);
  if (!v28)
  {
    llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(explicit + 24));
    uint64_t v39 = *(void *)explicit;
    int v40 = *(_DWORD *)(explicit + 16);
    if (v40)
    {
      uint64_t v80 = a7;
      int v41 = v40 - 1;
      int v42 = 1;
      uint64_t v44 = v87;
      uint64_t v43 = v88;
      unsigned int v45 = v86 & (v40 - 1);
      uint64_t v46 = v39 + 16 * v45;
      uint64_t v47 = *(void *)(v46 + 8);
      if ((v47 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_32;
      }
      while (v47 != -4096)
      {
        while (1)
        {
          unsigned int v48 = v45 + v42++;
          unsigned int v45 = v48 & v41;
          uint64_t v46 = v39 + 16 * (v48 & v41);
          uint64_t v47 = *(void *)(v46 + 8);
          if ((v47 | 0x1000) == 0xFFFFFFFFFFFFF000) {
            break;
          }
LABEL_32:
          if (v44(v43))
          {
            a7 = v80;
            uint64_t v50 = v81;
            if (v46 != *(void *)explicit + 16 * *(unsigned int *)(explicit + 16)) {
              goto LABEL_37;
            }
            goto LABEL_40;
          }
          if (*(void *)(v46 + 8) == -4096) {
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      uint64_t v49 = *(unsigned int *)(explicit + 16);
      a7 = v80;
      uint64_t v50 = v81;
      uint64_t v46 = *(void *)explicit + 16 * v49;
      if (v46 != *(void *)explicit + 16 * v49)
      {
LABEL_37:
        uint64_t v28 = *(void *)(v46 + 8);
        *(void *)(v38 + 8) = v28;
        llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(explicit + 24));
        return v28;
      }
    }
    else
    {
      uint64_t v50 = v81;
    }
LABEL_40:
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(explicit + 24));
    llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(explicit + 24));
    LODWORD(v89) = v86;
    *((void *)&v89 + 1) = 0;
    uint64_t v52 = v90;
    if (BYTE8(v91))
    {
      uint64_t v53 = mlir::detail::StorageUniquerImpl::getThreadSafeAllocator(v83);
      uint64_t v28 = v50(a7, v53);
      *(void *)(v52 + 8) = v28;
    }
    else
    {
      uint64_t v28 = *(void *)(v90 + 8);
    }
    *(void *)(v38 + 8) = v28;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(explicit + 24));
  }
  return v28;
}

void mlir::StorageUniquer::registerParametricStorageTypeImpl()
{
}

uint64_t *std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(void *)(v2 + 24))
    {
      uint64_t v3 = 0;
      do
      {
        unint64_t v4 = atomic_load((unint64_t *)(*(void *)(v2 + 16) + 8 * v3));
        if (v4)
        {
          if (*(void *)(v2 + 32) && *(_DWORD *)(v4 + 8))
          {
            uint64_t v5 = *(unsigned int *)(v4 + 16);
            if (v5)
            {
              uint64_t v6 = 16 * v5;
              uint64_t v7 = *(llvm **)v4;
              while ((*((void *)v7 + 1) | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                uint64_t v7 = (llvm *)((char *)v7 + 16);
                v6 -= 16;
                if (!v6) {
                  goto LABEL_4;
                }
              }
            }
            else
            {
              uint64_t v7 = *(llvm **)v4;
            }
            uint64_t v8 = *(void *)v4 + 16 * v5;
LABEL_16:
            if (v7 != (llvm *)v8)
            {
              (*(void (**)(void, void))(v2 + 32))(*(void *)(v2 + 40), *((void *)v7 + 1));
              while (1)
              {
                uint64_t v7 = (llvm *)((char *)v7 + 16);
                if (v7 == (llvm *)v8) {
                  break;
                }
                if ((*((void *)v7 + 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_16;
                }
              }
            }
          }
LABEL_4:
          llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)(v4 + 24));
          llvm::deallocate_buffer(*(llvm **)v4, (void *)(16 * *(unsigned int *)(v4 + 16)));
        }
        ++v3;
      }
      while (v3 != *(void *)(v2 + 24));
    }
    uint64_t v9 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v9) {
      MEMORY[0x21667D390](v9, 0x20C8093837F09);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    MEMORY[0x21667D3C0](v2, 0x10A0C40E20AF11ELL);
  }
  return a1;
}

uint64_t mlir::StorageUniquer::getSingletonImpl(uint64_t *a1, uint64_t a2)
{
  return mlir::detail::StorageUniquerImpl::getSingleton(*a1, a2);
}

uint64_t mlir::detail::StorageUniquerImpl::getSingleton(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 232);
  uint64_t v4 = a1 + 232;
  uint64_t v5 = v6;
  unsigned int v7 = *(_DWORD *)(v4 + 16);
  if (!v7) {
    goto LABEL_22;
  }
  unsigned int v8 = v7 - 1;
  unsigned int v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a2) {
    return v10[1];
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v11 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v11 == -8192;
    }
    if (v16) {
      uint64_t v14 = v10;
    }
    unsigned int v17 = v9 + v15++;
    unsigned int v9 = v17 & v8;
    uint64_t v10 = (void *)(v5 + 16 * (v17 & v8));
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      return v10[1];
    }
  }
  if (v14) {
    uint64_t v10 = v14;
  }
  int v18 = *(_DWORD *)(a1 + 240);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 244) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  uint64_t v19 = *(void *)(a1 + 232);
  int v20 = *(_DWORD *)(a1 + 248) - 1;
  unsigned int v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v19 + 16 * v21);
  uint64_t v22 = *v10;
  if (*v10 == a2)
  {
    uint64_t v13 = a2;
    goto LABEL_7;
  }
  int v23 = 0;
  int v24 = 1;
  while (v22 != -4096)
  {
    if (v23) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v22 == -8192;
    }
    if (v25) {
      int v23 = v10;
    }
    unsigned int v26 = v21 + v24++;
    unsigned int v21 = v26 & v20;
    uint64_t v10 = (void *)(v19 + 16 * (v26 & v20));
    uint64_t v22 = *v10;
    uint64_t v13 = a2;
    if (*v10 == a2) {
      goto LABEL_7;
    }
  }
  if (v23) {
    uint64_t v10 = v23;
  }
LABEL_6:
  uint64_t v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 240);
  if (v13 != -4096) {
    --*(_DWORD *)(a1 + 244);
  }
  void *v10 = a2;
  v10[1] = 0;
  return v10[1];
}

void *mlir::StorageUniquer::registerSingletonImpl(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a3(a4, *a1 + 112);
  uint64_t result = (void *)(v5 + 232);
  uint64_t v8 = *(void *)(v5 + 232);
  unsigned int v9 = *(_DWORD *)(v5 + 248);
  if (!v9) {
    goto LABEL_23;
  }
  unsigned int v10 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v11 = (void *)(v8 + 16 * v10);
  uint64_t v12 = *v11;
  if (*v11 == a2) {
    return result;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v12 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v12 == -8192;
    }
    if (v16) {
      uint64_t v14 = v11;
    }
    unsigned int v17 = v10 + v15++;
    unsigned int v10 = v17 & (v9 - 1);
    uint64_t v11 = (void *)(v8 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 == a2) {
      return result;
    }
  }
  int v18 = v14 ? v14 : v11;
  int v19 = *(_DWORD *)(v5 + 240);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *(_DWORD *)(v5 + 244) > v9 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_23:
    v9 *= 2;
  }
  uint64_t result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  uint64_t v20 = *(void *)(v5 + 232);
  int v21 = *(_DWORD *)(v5 + 248) - 1;
  unsigned int v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  int v18 = (void *)(v20 + 16 * v22);
  uint64_t v23 = *v18;
  if (*v18 == a2)
  {
    uint64_t v13 = a2;
    goto LABEL_7;
  }
  int v24 = 0;
  int v25 = 1;
  while (v23 != -4096)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == -8192;
    }
    if (v26) {
      int v24 = v18;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    int v18 = (void *)(v20 + 16 * (v27 & v21));
    uint64_t v23 = *v18;
    uint64_t v13 = a2;
    if (*v18 == a2) {
      goto LABEL_7;
    }
  }
  if (v24) {
    int v18 = v24;
  }
LABEL_6:
  uint64_t v13 = *v18;
LABEL_7:
  ++*(_DWORD *)(v5 + 240);
  if (v13 != -4096) {
    --*(_DWORD *)(v5 + 244);
  }
  *int v18 = a2;
  v18[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  uint64_t v2 = *(char **)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        MEMORY[0x21667D3C0](v6, 0x20C4093837F09);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
  {
    free(v2);
  }
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>>>,mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>>>::operator[](uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *a2;
  if (!v4) {
    goto LABEL_21;
  }
  unsigned int v6 = v4 - 1;
  unsigned int v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  uint64_t v8 = (void *)(*(void *)a1 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 == v5) {
    return v8 + 1;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v9 != -4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v9 == -8192;
    }
    if (v14) {
      uint64_t v12 = v8;
    }
    unsigned int v15 = v7 + v13++;
    unsigned int v7 = v15 & v6;
    uint64_t v8 = (void *)(*(void *)a1 + 16 * (v15 & v6));
    uint64_t v9 = *v8;
    if (*v8 == v5) {
      return v8 + 1;
    }
  }
  if (v12) {
    uint64_t v8 = v12;
  }
  int v16 = *(_DWORD *)(a1 + 8);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *(_DWORD *)(a1 + 12) > v4 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  uint64_t v5 = *a2;
  int v17 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
  uint64_t v8 = (void *)(*(void *)a1 + 16 * v18);
  uint64_t v19 = *v8;
  if (*v8 == *a2)
  {
LABEL_23:
    ++*(_DWORD *)(a1 + 8);
    if (v5 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v20 = 0;
  int v21 = 1;
  while (v19 != -4096)
  {
    if (v20) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v19 == -8192;
    }
    if (v22) {
      uint64_t v20 = v8;
    }
    unsigned int v23 = v18 + v21++;
    unsigned int v18 = v23 & v17;
    uint64_t v8 = (void *)(*(void *)a1 + 16 * (v23 & v17));
    uint64_t v19 = *v8;
    if (*v8 == v5) {
      goto LABEL_23;
    }
  }
  if (v20) {
    uint64_t v8 = v20;
  }
LABEL_6:
  uint64_t v11 = *v8;
  ++*(_DWORD *)(a1 + 8);
  if (v11 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *uint64_t v8 = v5;
  v8[1] = 0;
  return v8 + 1;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>>>,mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<anonymous namespace'::ParametricStorageUniquer>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  unsigned int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unsigned int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unsigned int v15 = &result[2 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        uint64_t v24 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          BOOL v22 = (void *)(*(void *)a1 + 16 * v26);
          uint64_t v27 = *v22;
          if (*v22 != v24)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                uint64_t v28 = v22;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v25;
              BOOL v22 = (void *)(*(void *)a1 + 16 * (v31 & v25));
              uint64_t v27 = *v22;
              if (*v22 == v24) {
                goto LABEL_24;
              }
            }
            if (v28) {
              BOOL v22 = v28;
            }
          }
LABEL_24:
          void *v22 = v24;
          uint64_t v23 = *((void *)v16 + 1);
          *((void *)v16 + 1) = 0;
          v22[1] = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        int v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unsigned int v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *uint64_t v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      int v21 = &result[2 * v17];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t llvm::detail::DenseSetImpl<anonymous namespace'::ParametricStorageUniquer::HashedStorage,llvm::DenseMap<anonymous namespace'::ParametricStorageUniquer::HashedStorage,llvm::detail::DenseSetEmpty,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo,llvm::detail::DenseSetPair<anonymous namespace'::ParametricStorageUniquer::HashedStorage>>,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>::insert_as<anonymous namespace'::ParametricStorageUniquer::LookupKey>(uint64_t result, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v6 = result;
  long long v60 = *a3;
  int v7 = *(_DWORD *)(a2 + 16);
  if (!v7)
  {
    unsigned int v15 = 0;
LABEL_5:
    int v16 = 2 * v15;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(llvm **)a2;
  int v10 = v7 - 1;
  int v11 = 1;
  unsigned int v12 = *(_DWORD *)a4 & (v7 - 1);
  uint64_t v13 = *(void *)a2 + 16 * v12;
  uint64_t v14 = *(void *)(v13 + 8);
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(a4 + 8))(*(void *)(a4 + 16));
    if (result)
    {
      char v21 = 0;
      goto LABEL_25;
    }
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14 == -4096) {
      break;
    }
    while (1)
    {
      if (v8) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v8 = v13;
      }
      unsigned int v18 = v12 + v11++;
      unsigned int v12 = v18 & v10;
      uint64_t v13 = (uint64_t)v9 + 16 * (v18 & v10);
      uint64_t v14 = *(void *)(v13 + 8);
      if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
LABEL_15:
      if (v14 == -4096) {
        goto LABEL_16;
      }
    }
  }
LABEL_16:
  if (v8) {
    uint64_t v13 = v8;
  }
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  int v19 = *(_DWORD *)(a2 + 8);
  if (4 * v19 + 4 >= 3 * v15) {
    goto LABEL_5;
  }
  BOOL v20 = v15 + ~v19 - *(_DWORD *)(a2 + 12) > v15 >> 3;
  int v16 = *(_DWORD *)(a2 + 16);
  if (v20) {
    goto LABEL_21;
  }
LABEL_26:
  uint64_t v23 = *(llvm **)a2;
  unint64_t v24 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
  unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
  int v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
  if ((v26 + 1) > 0x40) {
    unsigned int v27 = v26 + 1;
  }
  else {
    unsigned int v27 = 64;
  }
  *(_DWORD *)(a2 + 16) = v27;
  uint64_t result = (uint64_t)llvm::allocate_buffer(16 * v27, (std::align_val_t)8uLL);
  *(void *)a2 = result;
  if (v23)
  {
    *(void *)(a2 + 8) = 0;
    uint64_t v28 = *(unsigned int *)(a2 + 16);
    if (v28)
    {
      unint64_t v29 = (v28 - 1) & 0xFFFFFFFFFFFFFFFLL;
      BOOL v30 = (_OWORD *)result;
      if (v29 < 3) {
        goto LABEL_35;
      }
      unint64_t v31 = v29 + 1;
      BOOL v30 = (_OWORD *)(result + 16 * (v31 & 0x1FFFFFFFFFFFFFFCLL));
      uint64_t v32 = (_OWORD *)(result + 32);
      uint64_t v33 = v31 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v32 - 2) = xmmword_211F0B190;
        *(v32 - 1) = xmmword_211F0B190;
        *uint64_t v32 = xmmword_211F0B190;
        v32[1] = xmmword_211F0B190;
        v32 += 4;
        v33 -= 4;
      }
      while (v33);
      if (v31 != (v31 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        unint64_t v34 = (_OWORD *)(result + 16 * v28);
        do
          *v30++ = xmmword_211F0B190;
        while (v30 != v34);
      }
    }
    if (v15)
    {
      unint64_t v35 = v23;
      do
      {
        uint64_t v44 = *((void *)v35 + 1);
        if ((v44 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v45 = *(_DWORD *)(a2 + 16) - 1;
          unsigned int v46 = v45 & *(_DWORD *)v35;
          uint64_t v43 = *(void *)a2 + 16 * v46;
          uint64_t v47 = *(void *)(v43 + 8);
          if (v47 != v44)
          {
            uint64_t v48 = 0;
            int v49 = 1;
            while (v47 != -4096)
            {
              if (v48) {
                BOOL v50 = 0;
              }
              else {
                BOOL v50 = v47 == -8192;
              }
              if (v50) {
                uint64_t v48 = v43;
              }
              unsigned int v51 = v46 + v49++;
              unsigned int v46 = v51 & v45;
              uint64_t v43 = *(void *)a2 + 16 * (v51 & v45);
              uint64_t v47 = *(void *)(v43 + 8);
              if (v47 == v44) {
                goto LABEL_49;
              }
            }
            if (v48) {
              uint64_t v43 = v48;
            }
          }
LABEL_49:
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v35;
          ++*(_DWORD *)(a2 + 8);
        }
        unint64_t v35 = (llvm *)((char *)v35 + 16);
      }
      while (v35 != (llvm *)((char *)v23 + 16 * v15));
    }
    llvm::deallocate_buffer(v23, (void *)(16 * v15));
  }
  *(void *)(a2 + 8) = 0;
  uint64_t v36 = *(unsigned int *)(a2 + 16);
  if (v36)
  {
    unint64_t v37 = (v36 - 1) & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v38 = (_OWORD *)result;
    if (v37 < 3) {
      goto LABEL_44;
    }
    unint64_t v39 = v37 + 1;
    uint64_t v38 = (_OWORD *)(result + 16 * (v39 & 0x1FFFFFFFFFFFFFFCLL));
    int v40 = (_OWORD *)(result + 32);
    __n128 v41 = (__n128)xmmword_211F0B190;
    uint64_t v42 = v39 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v40 - 2) = xmmword_211F0B190;
      *(v40 - 1) = xmmword_211F0B190;
      *int v40 = xmmword_211F0B190;
      v40[1] = xmmword_211F0B190;
      v40 += 4;
      v42 -= 4;
    }
    while (v42);
    if (v39 != (v39 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      __n128 v41 = (__n128)xmmword_211F0B190;
      do
        *v38++ = xmmword_211F0B190;
      while (v38 != (_OWORD *)(result + 16 * v36));
    }
    uint64_t v52 = 0;
    int v53 = v36 - 1;
    int v54 = 1;
    unsigned int v55 = *(_DWORD *)a4 & (v36 - 1);
    uint64_t v13 = result + 16 * v55;
    uint64_t v56 = *(void *)(v13 + 8);
    if ((v56 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_75;
    }
    while (1)
    {
      uint64_t v59 = result;
      uint64_t result = (*(uint64_t (**)(void, __n128))(a4 + 8))(*(void *)(a4 + 16), v41);
      if (result) {
        break;
      }
      uint64_t v56 = *(void *)(v13 + 8);
      uint64_t result = v59;
      if (v56 == -4096)
      {
LABEL_76:
        if (v52) {
          uint64_t v13 = v52;
        }
        break;
      }
      while (1)
      {
        if (v52) {
          BOOL v57 = 0;
        }
        else {
          BOOL v57 = v56 == -8192;
        }
        if (v57) {
          uint64_t v52 = v13;
        }
        unsigned int v58 = v55 + v54++;
        unsigned int v55 = v58 & v53;
        uint64_t v13 = result + 16 * (v58 & v53);
        uint64_t v56 = *(void *)(v13 + 8);
        if ((v56 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          break;
        }
LABEL_75:
        if (v56 == -4096) {
          goto LABEL_76;
        }
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_21:
  ++*(_DWORD *)(a2 + 8);
  if (*(void *)(v13 + 8) != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *(_OWORD *)uint64_t v13 = v60;
  char v21 = 1;
LABEL_25:
  uint64_t v22 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)uint64_t v6 = v13;
  *(void *)(v6 + 8) = v22;
  *(unsigned char *)(v6 + 16) = v21;
  return result;
}

int *mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::CacheType::~CacheType(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    unsigned int v4 = a1 + 2;
    if ((v2 & 1) == 0)
    {
      unsigned int v6 = a1[4];
      uint64_t v7 = *((void *)a1 + 1) + 24 * v6;
      if (v6)
      {
        unsigned int v4 = (int *)*((void *)a1 + 1);
        goto LABEL_8;
      }
      unint64_t v34 = a1 + 2;
LABEL_13:
      if (v2) {
        goto LABEL_48;
      }
      goto LABEL_14;
    }
    uint64_t v7 = (uint64_t)(a1 + 26);
LABEL_8:
    while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == (int *)v7)
      {
        unsigned int v4 = (int *)v7;
        break;
      }
    }
    unint64_t v34 = a1 + 2;
    if ((v2 & 1) == 0)
    {
LABEL_18:
      uint64_t v8 = *((void *)a1 + 1) + 24 * a1[4];
      if (v4 != (int *)v8) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (v2)
    {
      uint64_t v3 = a1 + 2;
      unsigned int v4 = a1 + 26;
      unsigned int v5 = 4;
    }
    else
    {
      uint64_t v3 = (int *)*((void *)a1 + 1);
      unsigned int v5 = a1[4];
      unsigned int v4 = &v3[6 * v5];
    }
    uint64_t v7 = (uint64_t)&v3[6 * v5];
    unint64_t v34 = a1 + 2;
    if (!v2) {
      goto LABEL_18;
    }
  }
  uint64_t v8 = (uint64_t)(a1 + 26);
  if (v4 == a1 + 26) {
    goto LABEL_13;
  }
  do
  {
LABEL_22:
    int v11 = (std::__shared_weak_count *)*((void *)v4 + 2);
    if (!v11) {
      goto LABEL_35;
    }
    unsigned int v12 = std::__shared_weak_count::lock(v11);
    if (!v12) {
      goto LABEL_35;
    }
    uint64_t v13 = v12;
    uint64_t v14 = *((void *)v4 + 1);
    if (v14)
    {
      uint64_t v15 = *(void *)v4;
      int v16 = (std::recursive_mutex *)(*(void *)v4 + 24);
      std::recursive_mutex::lock(v16);
      BOOL v17 = *(void **)v15;
      uint64_t v18 = *(unsigned int *)(v15 + 8);
      uint64_t v19 = *(void *)v15 + 8 * v18;
      BOOL v20 = *(void **)v15;
      if (v18)
      {
        uint64_t v21 = 8 * v18;
        BOOL v20 = *(void **)v15;
        while (*v20 != v14)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            BOOL v20 = (void *)(*(void *)v15 + 8 * v18);
            break;
          }
        }
      }
      uint64_t v22 = v20 + 1;
      if (v20 + 1 == (void *)v19)
      {
        unsigned int v23 = v18 - 1;
        *(_DWORD *)(v15 + 8) = v23;
        uint64_t v24 = v23;
        uint64_t v25 = v17[v24];
        v17[v24] = 0;
        if (v25) {
          goto LABEL_32;
        }
      }
      else
      {
        do
        {
          uint64_t v27 = *(v22 - 1);
          *(v22 - 1) = *v22;
          void *v22 = 0;
          if (v27) {
            llvm::deallocate_buffer(*(llvm **)v27, (void *)(16 * *(unsigned int *)(v27 + 16)));
          }
          ++v22;
        }
        while (v22 != (void *)v19);
        uint64_t v28 = *(void **)v15;
        unsigned int v29 = *(_DWORD *)(v15 + 8) - 1;
        *(_DWORD *)(v15 + 8) = v29;
        uint64_t v30 = v29;
        uint64_t v25 = v28[v30];
        v28[v30] = 0;
        if (v25) {
LABEL_32:
        }
          llvm::deallocate_buffer(*(llvm **)v25, (void *)(16 * *(unsigned int *)(v25 + 16)));
      }
      std::recursive_mutex::unlock(v16);
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      int v26 = v4 + 6;
      unsigned int v4 = (int *)v7;
      if (v26 == (int *)v7) {
        continue;
      }
    }
    else
    {
LABEL_35:
      int v26 = v4 + 6;
      unsigned int v4 = (int *)v7;
      if (v26 == (int *)v7) {
        continue;
      }
    }
    unsigned int v4 = v26;
    while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == (int *)v7)
      {
        unsigned int v4 = (int *)v7;
        break;
      }
    }
  }
  while (v4 != (int *)v8);
  int v2 = *a1;
  if (*a1)
  {
LABEL_48:
    uint64_t v9 = 4;
    int v10 = v34;
    goto LABEL_49;
  }
LABEL_14:
  uint64_t v9 = a1[4];
  if (v9)
  {
    int v10 = (void *)*v34;
LABEL_49:
    unint64_t v31 = (std::__shared_weak_count **)(v10 + 2);
    uint64_t v32 = 24 * v9;
    do
    {
      if (((unint64_t)*(v31 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v31) {
        std::__shared_weak_count::__release_weak(*v31);
      }
      v31 += 3;
      v32 -= 24;
    }
    while (v32);
    int v2 = *a1;
  }
  if ((v2 & 1) == 0) {
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  }
  return a1;
}

void llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>>>,mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    int v10 = (char *)(a1 + 26);
    uint64_t v9 = (char *)(a1 + 2);
    unint64_t v11 = 72;
  }
  else
  {
    int v8 = a1[4];
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = (char *)*((void *)a1 + 1);
    int v10 = &v9[24 * v8];
    unint64_t v11 = v10 - v9 - 24;
    if (v11 < 0x18)
    {
      uint64_t v13 = (char *)*((void *)a1 + 1);
      do
      {
LABEL_10:
        *(void *)uint64_t v13 = -4096;
        v13 += 24;
      }
      while (v13 != v10);
      goto LABEL_11;
    }
  }
  unint64_t v12 = v11 / 0x18 + 1;
  uint64_t v13 = &v9[24 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(void *)uint64_t v9 = -4096;
    *((void *)v9 + 3) = -4096;
    v9 += 48;
    v14 -= 2;
  }
  while (v14);
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)a1)
        {
          int v17 = 4;
          int v16 = v7;
        }
        else
        {
          int v16 = (int *)*((void *)a1 + 1);
          int v17 = a1[4];
        }
        int v18 = v17 - 1;
        unsigned int v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        BOOL v20 = (uint64_t *)&v16[6 * v19];
        uint64_t v21 = *v20;
        if (*v20 != v15)
        {
          unsigned int v23 = 0;
          int v24 = 1;
          while (v21 != -4096)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v21 == -8192;
            }
            if (v25) {
              unsigned int v23 = v20;
            }
            unsigned int v26 = v19 + v24++;
            unsigned int v19 = v26 & v18;
            BOOL v20 = (uint64_t *)&v16[6 * (v26 & v18)];
            uint64_t v21 = *v20;
            if (*v20 == v15) {
              goto LABEL_19;
            }
          }
          if (v23) {
            BOOL v20 = v23;
          }
        }
LABEL_19:
        *BOOL v20 = v15;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v4 + 1);
        v4[1] = 0;
        v4[2] = 0;
        *a1 += 2;
        uint64_t v22 = (std::__shared_weak_count *)v4[2];
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v24 = 0;
  uint64_t v3 = (char *)(a1 + 16);
  unsigned int v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  unsigned int v5 = *(char **)a1;
  int v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7) {
    goto LABEL_19;
  }
  unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 8 * v7;
  if (v8 < 0xB)
  {
    int v10 = v4;
LABEL_12:
    unsigned int v19 = &v5[8 * v7];
    do
    {
      uint64_t v20 = *(void *)v6;
      *(void *)int v6 = 0;
      v6 += 8;
      *(void *)int v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  BOOL v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  int v10 = v4;
  if (!v11) {
    goto LABEL_12;
  }
  unint64_t v12 = v8 + 1;
  uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  int v10 = &v4[v13];
  int v6 = &v5[v13];
  uint64_t v14 = (long long *)(v5 + 16);
  uint64_t v15 = v4 + 16;
  uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v17 = *(v14 - 1);
    long long v18 = *v14;
    *(v14 - 1) = 0uLL;
    *uint64_t v14 = 0uLL;
    *(v15 - 1) = v17;
    *uint64_t v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v21 = *(void *)a1 - 8;
  do
  {
    uint64_t v22 = *(void *)(v21 + v9);
    *(void *)(v21 + v9) = 0;
    if (v22) {
      llvm::deallocate_buffer(*(llvm **)v22, (void *)(16 * *(unsigned int *)(v22 + 16)));
    }
    v9 -= 8;
  }
  while (v9);
  int v6 = *(char **)a1;
LABEL_19:
  int v23 = v24;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t mlir::detail::StorageUniquerImpl::getThreadSafeAllocator(mlir::detail::StorageUniquerImpl *this)
{
  if (!*((unsigned char *)this + 256)) {
    return (uint64_t)this + 112;
  }
  uint64_t result = *(void *)mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::get((uint64_t *)this);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::get(uint64_t *a1)
{
  {
    long long v17 = (void *)mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache);
    *long long v17 = 1;
    v17[1] = -4096;
    uint64_t v17[4] = -4096;
    v17[7] = -4096;
    v17[10] = -4096;
    _tlv_atexit((void (__cdecl *)(void *))mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::CacheType::~CacheType, v17);
  }
  uint64_t v3 = mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache);
  uint64_t v4 = *a1;
  uint64_t v22 = *a1;
  uint64_t v5 = v3 + 8;
  if (*(unsigned char *)v3)
  {
    int v6 = 4;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 16);
    if (!v6)
    {
      uint64_t v15 = 0;
LABEL_14:
      uint64_t v9 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(v3, v15, &v22);
      goto LABEL_8;
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  int v7 = v6 - 1;
  unsigned int v8 = v7 & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v9 = (void *)(v5 + 24 * v8);
  uint64_t v10 = *v9;
  if (v4 != *v9)
  {
    long long v18 = 0;
    int v19 = 1;
    while (v10 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v10 == -8192;
      }
      if (v20) {
        long long v18 = v9;
      }
      unsigned int v21 = v8 + v19++;
      unsigned int v8 = v21 & v7;
      uint64_t v9 = (void *)(v5 + 24 * v8);
      uint64_t v10 = *v9;
      if (v4 == *v9) {
        goto LABEL_8;
      }
    }
    if (v18) {
      uint64_t v15 = v18;
    }
    else {
      uint64_t v15 = v9;
    }
    goto LABEL_14;
  }
LABEL_8:
  BOOL v11 = (std::__shared_weak_count *)v9[2];
  if (!v11 || (unint64_t v12 = std::__shared_weak_count::lock(v11)) == 0)
  {
LABEL_16:
    std::recursive_mutex::lock((std::recursive_mutex *)(*a1 + 24));
    operator new();
  }
  uint64_t v13 = v12;
  uint64_t v14 = v9[1];
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v14) {
      goto LABEL_16;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
    if (!v14) {
      goto LABEL_16;
    }
  }
  return v14;
}

int *mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::CacheType::~CacheType(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    int v6 = a1 + 2;
    if (v2)
    {
      unsigned int v8 = a1 + 26;
      uint64_t v4 = a1 + 2;
LABEL_8:
      while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 6;
        if (v4 == v8)
        {
          uint64_t v4 = v8;
          break;
        }
      }
      int v6 = a1 + 2;
      if (v2) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v4 = (int *)*((void *)a1 + 1);
      unsigned int v7 = a1[4];
      unsigned int v8 = &v4[6 * v7];
      if (v7) {
        goto LABEL_8;
      }
    }
LABEL_18:
    uint64_t v9 = *((void *)a1 + 1) + 24 * a1[4];
    if (v4 != (int *)v9) {
      goto LABEL_19;
    }
LABEL_13:
    if (v2) {
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  if (v2)
  {
    uint64_t v3 = a1 + 2;
    uint64_t v4 = a1 + 26;
    unsigned int v5 = 4;
  }
  else
  {
    uint64_t v3 = (int *)*((void *)a1 + 1);
    unsigned int v5 = a1[4];
    uint64_t v4 = &v3[6 * v5];
  }
  unsigned int v8 = &v3[6 * v5];
  int v6 = a1 + 2;
  if (!v2) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v9 = (uint64_t)(a1 + 26);
  if (v4 == a1 + 26) {
    goto LABEL_13;
  }
LABEL_19:
  unint64_t v34 = v6;
  do
  {
    BOOL v11 = (std::__shared_weak_count *)*((void *)v4 + 2);
    if (!v11) {
      goto LABEL_34;
    }
    unint64_t v12 = std::__shared_weak_count::lock(v11);
    if (!v12) {
      goto LABEL_34;
    }
    uint64_t v13 = v12;
    uint64_t v14 = *((void *)v4 + 1);
    if (v14)
    {
      uint64_t v15 = *(void *)v4;
      uint64_t v16 = (std::recursive_mutex *)(*(void *)v4 + 24);
      std::recursive_mutex::lock(v16);
      long long v17 = *(void **)v15;
      uint64_t v18 = *(unsigned int *)(v15 + 8);
      uint64_t v19 = *(void *)v15 + 8 * v18;
      BOOL v20 = *(void **)v15;
      if (v18)
      {
        uint64_t v21 = 8 * v18;
        BOOL v20 = *(void **)v15;
        while (*v20 != v14)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            BOOL v20 = (void *)(*(void *)v15 + 8 * v18);
            break;
          }
        }
      }
      uint64_t v22 = v20 + 1;
      if (v20 + 1 == (void *)v19)
      {
        unsigned int v23 = v18 - 1;
        *(_DWORD *)(v15 + 8) = v23;
        uint64_t v24 = v23;
        uint64_t v25 = v17[v24];
        v17[v24] = 0;
        if (!v25)
        {
LABEL_32:
          std::recursive_mutex::unlock(v16);
          goto LABEL_33;
        }
      }
      else
      {
        do
        {
          uint64_t v27 = *(v22 - 1);
          *(v22 - 1) = *v22;
          void *v22 = 0;
          if (v27) {
            MEMORY[0x21667D3C0](v27, 0x20C4093837F09);
          }
          ++v22;
        }
        while (v22 != (void *)v19);
        uint64_t v28 = *(void **)v15;
        unsigned int v29 = *(_DWORD *)(v15 + 8) - 1;
        *(_DWORD *)(v15 + 8) = v29;
        uint64_t v30 = v29;
        uint64_t v25 = v28[v30];
        v28[v30] = 0;
        if (!v25) {
          goto LABEL_32;
        }
      }
      MEMORY[0x21667D3C0](v25, 0x20C4093837F09);
      goto LABEL_32;
    }
LABEL_33:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      unsigned int v26 = v4 + 6;
      uint64_t v4 = v8;
      if (v26 == v8) {
        continue;
      }
      goto LABEL_35;
    }
LABEL_34:
    unsigned int v26 = v4 + 6;
    uint64_t v4 = v8;
    if (v26 == v8) {
      continue;
    }
LABEL_35:
    uint64_t v4 = v26;
    while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == v8)
      {
        uint64_t v4 = v8;
        break;
      }
    }
  }
  while (v4 != (int *)v9);
  int v2 = *a1;
  int v6 = v34;
  if (*a1)
  {
LABEL_47:
    uint64_t v10 = 4;
    goto LABEL_48;
  }
LABEL_14:
  uint64_t v10 = a1[4];
  if (v10)
  {
    int v6 = (void *)*v6;
LABEL_48:
    unint64_t v31 = (std::__shared_weak_count **)(v6 + 2);
    uint64_t v32 = 24 * v10;
    do
    {
      if (((unint64_t)*(v31 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v31) {
        std::__shared_weak_count::__release_weak(*v31);
      }
      v31 += 3;
      v32 -= 24;
    }
    while (v32);
    int v2 = *a1;
  }
  if ((v2 & 1) == 0) {
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  }
  return a1;
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::StorageUniquer::StorageAllocator *>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12)) {
    return (char *)v3;
  }
  unint64_t v8 = *(void *)a1 + 8 * v4;
  if (*(void *)a1 > a2 || v8 <= a2)
  {
    unint64_t v52 = 0;
    uint64_t v10 = (char *)(a1 + 16);
    BOOL v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
    unint64_t v12 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (!v13)
    {
LABEL_22:
      int v29 = v52;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v29;
      return (char *)v3;
    }
    unint64_t v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (uint64_t v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        unint64_t v18 = v14 + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v16 = &v11[v19];
        long long v17 = &v12[v19];
        BOOL v20 = (long long *)(v12 + 16);
        uint64_t v21 = v11 + 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(v20 - 1);
          long long v24 = *v20;
          *(v20 - 1) = 0uLL;
          *BOOL v20 = 0uLL;
          *(v21 - 1) = v23;
          _OWORD *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          uint64_t v27 = *(void *)a1 - 8;
          do
          {
            uint64_t v28 = *(void *)(v27 + v15);
            *(void *)(v27 + v15) = 0;
            if (v28) {
              MEMORY[0x21667D3C0](v28, 0x20C4093837F09);
            }
            v15 -= 8;
          }
          while (v15);
          unint64_t v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v16 = v11;
      long long v17 = *(char **)a1;
    }
    uint64_t v25 = &v12[8 * v13];
    do
    {
      uint64_t v26 = *(void *)v17;
      *(void *)long long v17 = 0;
      v17 += 8;
      *(void *)uint64_t v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  uint64_t v30 = a2 - *(void *)a1;
  unint64_t v52 = 0;
  unint64_t v31 = (char *)(a1 + 16);
  uint64_t v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
  uint64_t v33 = *(char **)a1;
  uint64_t v34 = *(unsigned int *)(a1 + 8);
  if (v34)
  {
    unint64_t v35 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v36 = 8 * v34;
    if (v35 >= 0xB)
    {
      if (v33 >= &v32[v36] || (unint64_t v37 = v32, v38 = *(char **)a1, v32 >= &v33[v36]))
      {
        unint64_t v39 = v35 + 1;
        uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v37 = &v32[v40];
        uint64_t v38 = &v33[v40];
        __n128 v41 = (long long *)(v33 + 16);
        uint64_t v42 = v32 + 16;
        uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v44 = *(v41 - 1);
          long long v45 = *v41;
          *(v41 - 1) = 0uLL;
          *__n128 v41 = 0uLL;
          *(v42 - 1) = v44;
          *uint64_t v42 = v45;
          v41 += 2;
          v42 += 2;
          v43 -= 4;
        }
        while (v43);
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          uint64_t v48 = *(void *)a1 - 8;
          do
          {
            uint64_t v49 = *(void *)(v48 + v36);
            *(void *)(v48 + v36) = 0;
            if (v49) {
              MEMORY[0x21667D3C0](v49, 0x20C4093837F09);
            }
            v36 -= 8;
          }
          while (v36);
          uint64_t v33 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      unint64_t v37 = v32;
      uint64_t v38 = *(char **)a1;
    }
    unsigned int v46 = &v33[8 * v34];
    do
    {
      uint64_t v47 = *(void *)v38;
      *(void *)uint64_t v38 = 0;
      v38 += 8;
      *(void *)unint64_t v37 = v47;
      v37 += 8;
    }
    while (v38 != v46);
    goto LABEL_35;
  }
LABEL_40:
  uint64_t v50 = v30 >> 3;
  int v51 = v52;
  if (v33 != v31) {
    free(v33);
  }
  *(void *)a1 = v32;
  *(_DWORD *)(a1 + 12) = v51;
  return &v32[8 * v50];
}

void *std::vector<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>::__push_back_slow_path<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  BOOL v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v15[-v18];
    v10 -= v18;
    BOOL v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)BOOL v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28)
      {
        uint64_t v29 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v27);
        MEMORY[0x21667D3C0](v29, 0x1090C40A49D047FLL);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void mlir::detail::StorageUniquerImpl::~StorageUniquerImpl(llvm **this)
{
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389E00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<anonymous namespace'::ParametricStorageUniquer::HashedStorage,anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  uint64_t v2 = *(char **)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        llvm::deallocate_buffer(*(llvm **)v6, (void *)(16 * *(unsigned int *)(v6 + 16)));
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
  {
    free(v2);
  }
}

unint64_t mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a1;
    int v13 = __cxa_guard_acquire(&_MergedGlobals_0);
    a1 = v12;
    if (v13)
    {
      llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)&qword_26ACCF620);
      qword_26ACCF628 = 0;
      qword_26ACCF630 = 0;
      qword_26ACCF638 = 0;
      qword_26ACCF640 = (uint64_t)&unk_26ACCF650;
      qword_26ACCF648 = *(void *)"";
      qword_26ACCF670 = (uint64_t)&qword_26ACCF680;
      unk_26ACCF678 = 0u;
      unk_26ACCF688 = 0u;
      *(_OWORD *)((char *)&qword_26ACCF690 + 4) = 0u;
      __cxa_guard_release(&_MergedGlobals_0);
      a1 = v12;
    }
  }
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  llvm::sys::RWMutexImpl::lock_shared(&qword_26ACCF620);
  uint64_t v15 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(&qword_26ACCF690, (uint64_t)&v14, &v15)|| v15 == (void *)(qword_26ACCF690 + 24 * dword_26ACCF6A0))
  {
    llvm::sys::RWMutexImpl::unlock_shared(&qword_26ACCF620);
    llvm::sys::RWMutexImpl::lock(&qword_26ACCF620);
    uint64_t v15 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(&qword_26ACCF690, (uint64_t)&v14, &v15))
    {
      unint64_t v5 = v15[2];
    }
    else
    {
      uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&qword_26ACCF690, (uint64_t)&v14, (uint64_t)&v14, v15);
      *(_OWORD *)uint64_t v6 = v14;
      v6[2] = &mlir::detail::TypeIDResolver<void,void>::id;
      qword_26ACCF680 += 8;
      if (qword_26ACCF630
        && ((qword_26ACCF630 + 7) & 0xFFFFFFFFFFFFFFF8) - qword_26ACCF630 + 8 <= qword_26ACCF638 - qword_26ACCF630)
      {
        unint64_t v5 = (qword_26ACCF630 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unsigned int v7 = qword_26ACCF648 >> 7;
        if (qword_26ACCF648 >> 7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        uint64_t v8 = 4096 << v7;
        buffer = llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
        unsigned int v10 = qword_26ACCF648;
        if (qword_26ACCF648 >= HIDWORD(qword_26ACCF648))
        {
          BOOL v11 = buffer;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_26ACCF640, &unk_26ACCF650, qword_26ACCF648 + 1, 8);
          buffer = v11;
          unsigned int v10 = qword_26ACCF648;
        }
        *(void *)(qword_26ACCF640 + 8 * v10) = buffer;
        LODWORD(qword_26ACCF648) = qword_26ACCF648 + 1;
        qword_26ACCF638 = (uint64_t)buffer + v8;
        unint64_t v5 = ((unint64_t)buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      qword_26ACCF630 = v5 + 8;
      v6[2] = v5;
    }
    llvm::sys::RWMutexImpl::unlock_shared(&qword_26ACCF620);
    return v5;
  }
  else
  {
    uint64_t v3 = v15[2];
    llvm::sys::RWMutexImpl::unlock_shared(&qword_26ACCF620);
    return v3;
  }
}

void anonymous namespace'::ImplicitTypeIDRegistry::~ImplicitTypeIDRegistry(llvm **this)
{
}

void sub_2118748F8()
{
  if (*(_DWORD *)(v0 + 88)) {
    llvm::deallocate_buffer(**(llvm ***)(v0 + 80), *(void **)(*(void *)(v0 + 80) + 8));
  }
  *(_DWORD *)(v0 + 88) = 0;
  int v1 = *(_DWORD *)(v0 + 40);
  if (v1)
  {
    *(void *)(v0 + 96) = 0;
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)v2 + 4096;
    *(void *)(v0 + 16) = *(void *)v2;
    *(void *)(v0 + 24) = v3;
    if (v1 != 1)
    {
      unint64_t v4 = ((unint64_t)(v2 + 8 - *(void *)(v0 + 32)) >> 10) & 0x1FFFFFF;
      if (v4 >= 0x1E) {
        LOBYTE(v4) = 30;
      }
      llvm::deallocate_buffer(*(llvm **)(v2 + 8), (void *)(4096 << v4));
    }
    *(_DWORD *)(v0 + 40) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 16);
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)v0);
}

void mlir::tensor::TensorDialect::TensorDialect(mlir::tensor::TensorDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"tensor", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id);
  *uint64_t v3 = &unk_26C380030;
  unint64_t v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"affine", 6))
  {
    unsigned int v7 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"affine", 6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::affine::AffineDialect * mlir::MLIRContext::getOrLoadDialect<mlir::affine::AffineDialect>(void)::{lambda(void)#1}>, (uint64_t)&v7);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 4);
  if (!mlir::MLIRContext::isDialectLoading(v5, (uint64_t)"arith", 5))
  {
    unsigned int v7 = v5;
    mlir::MLIRContext::getOrLoadDialect(v5, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v7);
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 4);
  if (!mlir::MLIRContext::isDialectLoading(v6, (uint64_t)"complex", 7))
  {
    unsigned int v7 = v6;
    mlir::MLIRContext::getOrLoadDialect(v6, (uint64_t)"complex", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ComplexDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::complex::ComplexDialect * mlir::MLIRContext::getOrLoadDialect<mlir::complex::ComplexDialect>(void)::{lambda(void)#1}>, (uint64_t)&v7);
  }
  mlir::tensor::TensorDialect::initialize(this);
}

void mlir::tensor::TensorDialect::initialize(mlir::tensor::TensorDialect *this)
{
}

void mlir::tensor::TensorDialect::~TensorDialect(llvm **this)
{
}

void sub_211874CA0()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::tensor::BitcastOp,mlir::tensor::CastOp,mlir::tensor::CollapseShapeOp,mlir::tensor::DimOp,mlir::tensor::EmptyOp,mlir::tensor::ExpandShapeOp,mlir::tensor::ExtractOp,mlir::tensor::ExtractSliceOp,mlir::tensor::FromElementsOp,mlir::tensor::GatherOp,mlir::tensor::GenerateOp,mlir::tensor::InsertOp,mlir::tensor::InsertSliceOp,mlir::tensor::PackOp,mlir::tensor::PadOp,mlir::tensor::ParallelInsertSliceOp,mlir::tensor::RankOp,mlir::tensor::ReshapeOp,mlir::tensor::ScatterOp,mlir::tensor::SplatOp,mlir::tensor::UnPackOp,mlir::tensor::YieldOp>()
{
}

void llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::affine::AffineDialect * mlir::MLIRContext::getOrLoadDialect<mlir::affine::AffineDialect>(void)::{lambda(void)#1}>()
{
}

void llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::complex::ComplexDialect * mlir::MLIRContext::getOrLoadDialect<mlir::complex::ComplexDialect>(void)::{lambda(void)#1}>()
{
}

void mlir::RegisteredOperationName::insert<mlir::tensor::GenerateOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::tensor::ParallelInsertSliceOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.bitcast", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::BitcastOp,void>::id, (uint64_t)&v9);
  unint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unsigned int v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    unint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B528;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        BOOL v11 = v13;
      }
      else {
        BOOL v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::BitcastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      BOOL v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          BOOL v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return !*(_DWORD *)(a5 + 8) && mlir::impl::foldCastInterfaceOp(a2, a3, a4, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    int v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      int v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      uint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      unint64_t v176 = 110;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      uint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unsigned int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v176 = 85;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[356];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      unint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v8 = a1, mlir::tensor::BitcastOp::verifyInvariantsImpl((mlir::tensor::BitcastOp *)&v8)))
  {
    return mlir::impl::verifyCastInterfaceOp(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.cast", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37AE20;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::CastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return !*(_DWORD *)(a5 + 8) && mlir::impl::foldCastInterfaceOp(a2, a3, a4, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    int v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      int v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      unint64_t v199 = 110;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v199 = 82;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v199 = 85;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[356];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v8 = a1, mlir::tensor::BitcastOp::verifyInvariantsImpl((mlir::tensor::BitcastOp *)&v8)))
  {
    return mlir::impl::verifyCastInterfaceOp(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37AB00;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::tensor *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::CollapseShapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    int v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      int v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v199 = 116;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v199 = 82;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::tensor::CollapseShapeOp::verifyInvariantsImpl((mlir::tensor::CollapseShapeOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::tensor::CollapseShapeOp::verify((mlir::tensor::CollapseShapeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.dim", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37AC90;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::foldHook(uint64_t a1, mlir::tensor *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, mlir::tensor *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::DimOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::DimOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::tensor::DimOp::getSpeculatability((mlir::tensor::DimOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getShapedValue;
  v2[1] = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDimension;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[239], v2);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getShapedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3) | 4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::DimOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "tensor.dim";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::tensor *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase((uint64_t)v14, (unsigned int *)a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::DimOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8
    || (mlir::tensor *)((char *)a2 - 16) == (mlir::tensor *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    int v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      int v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v199 = 109;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[445];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v199 = 90;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedDimOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[241];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::DimOp::print((mlir::memref::DimOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::DimOp>,mlir::OpTrait::OneResult<mlir::tensor::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::OpInvariants<mlir::tensor::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::tensor::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::DimOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::DimOp>,mlir::OpTrait::OneResult<mlir::tensor::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::OpInvariants<mlir::tensor::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::tensor::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::DimOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v7 = a1, mlir::tensor::DimOp::verifyInvariantsImpl((mlir::tensor::DimOp *)&v7)))
  {
    return mlir::detail::verifyShapedDimOpInterface(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.empty", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B078;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::EmptyOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::reifyResultShapes;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[181], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::EmptyOp::reifyResultShapes((uint64_t)&v5, a3, a4);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    int v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      int v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v176 = 116;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      int v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      int v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 102;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      int v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[178] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::EmptyOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::tensor::EmptyOp::verifyInvariantsImpl((mlir::tensor::EmptyOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::EmptyOp::verify((mlir::tensor::EmptyOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.expand_shape", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A7E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::ExpandShapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::ExpandShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::ExpandShapeOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::tensor::CollapseShapeOp::verifyInvariantsImpl((mlir::tensor::CollapseShapeOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::tensor::ExpandShapeOp::verify((mlir::tensor::ExpandShapeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.extract", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B5F0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::ExtractOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::ExtractOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::ExtractOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::ExtractOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::ExtractOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::tensor::ExtractOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "tensor.extract";
  v16[1] = 14;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::ExtractOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    int v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      int v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v199 = 104;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v199 = 97;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::ExtractOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::tensor::ExtractOp::verifyInvariantsImpl((mlir::tensor::ExtractOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::ExtractOp::verify((mlir::tensor::ExtractOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.extract_slice", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A970;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::ExtractSliceOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::tensor::ExtractSliceOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::ExtractSliceOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::ExtractSliceOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::reifyResultShapes;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[181], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::reifyResultShapes(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::ExtractSliceOp::reifyResultShapes((mlir::memref::ReinterpretCastOp *)&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0xD0uLL, 0x80040B342C78EuLL);
  void *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasZeroOffset;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[269], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(void *)(*(void *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(void *)(*(void *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(void *)(*(void *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isSameAs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::isSameAs(&v7, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    ConstantIntBOOL Value = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 1;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    ConstantIntBOOL Value = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 0;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::ExtractSliceOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::ExtractSliceOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    int v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      int v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v274 = 116;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[435];
  BOOL v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    BOOL v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      BOOL v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v274 = 97;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v274 = 96;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      unint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[435];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      unint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v274 = 86;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      unint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[350];
  uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      unint64_t v274 = 102;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      uint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[178];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      uint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[322];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[324];
  uint64_t v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    uint64_t v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[31];
  unsigned int v27 = &unk_267772000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_267772000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      unint64_t v274 = 100;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_267772000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[271] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::SubViewOp::print((mlir::memref::SubViewOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ExtractSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::ExtractSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ExtractSliceOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::tensor::ExtractSliceOp::verify((mlir::tensor::ExtractSliceOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ExtractSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::ExtractSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ExtractSliceOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (uint64_t v6 = a1, mlir::tensor::ExtractSliceOp::verifyInvariantsImpl((mlir::tensor::ExtractSliceOp *)&v6)))
  {
    return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::verifyTrait((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.from_elements", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37AA38;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::FromElementsOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::FromElementsOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::FromElementsOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    int v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      int v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v176 = 116;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v176 = 86;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      int v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      int v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      int v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::FromElementsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::FromElementsOp::verifyInvariantsImpl((mlir::tensor::FromElementsOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.gather", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::GatherOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B2D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::GatherOp::parse;
  a1[3] = (BOOL (*)(uint64_t *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::tensor::GatherOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::GatherOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::tensor::GatherOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::GatherOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::GatherOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::tensor::GatherOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::tensor::GatherOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::GatherOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::GatherOpGenericAdaptorBase::GatherOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::GatherOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  int v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    int v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      int v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v199 = 116;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v199 = 90;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::GatherOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::tensor::GatherOp::verifyInvariantsImpl((mlir::tensor::GatherOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::GatherOp::verify((mlir::tensor::GatherOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getParseAssemblyFn(void (**a1)()@<X8>)
{
  *a1 = mlir::tensor::GenerateOp::parse;
  a1[3] = (void (*)())((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::GenerateOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::reifyResultShapes;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[181], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::GenerateOp::reifyResultShapes((uint64_t)&v5, a3, a4);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v199 = 81;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  uint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    uint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v199 = 116;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v199 = 88;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v199 = 83;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[443];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor:"
             ":YieldOp>::Impl<Empty>]";
      unint64_t v199 = 130;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[194];
  uint64_t v15 = &unk_267770000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267770000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267770000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[350];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v199 = 97;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[229];
  int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 102;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[178] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::GenerateOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::tensor::GenerateOp::verifyInvariantsImpl((mlir::tensor::GenerateOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::GenerateOp::verify((mlir::tensor::GenerateOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants(uint64_t a1)
{
  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::verifyRegionTrait(a1)) {
    return 0;
  }
  uint64_t v3 = a1;
  return mlir::tensor::GenerateOp::verifyRegions((mlir::tensor::GenerateOp *)&v3) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::verifyRegionTrait(uint64_t a1)
{
  v23[24] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 64;
    uint64_t v5 = 24 * v1;
    do
    {
      unint64_t v6 = *(unsigned int *)(a1 + 44);
      if ((v6 & 0x7FFFFF) != 0)
      {
        uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                      + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
        if (v7 != (void *)*v7) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v7 = v3;
        if (v3 != (void *)*v3)
        {
LABEL_8:
          uint64_t v8 = v7[1];
          if (v8) {
            uint64_t v9 = v8 - 8;
          }
          else {
            uint64_t v9 = 0;
          }
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
          uint64_t v11 = *(void *)(v10 + 48);
          if (*(_UNKNOWN **)(v11 + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::YieldOp,void>::id)
          {
            __int16 v16 = 1283;
            v15[0] = "expects regions to end with '";
            v15[2] = "tensor.yield";
            _OWORD v15[3] = 12;
            v17[0] = v15;
            unint64_t v17[2] = "', found '";
            __int16 v18 = 770;
            v23[0] = *(void *)(v11 + 8);
            uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            v19[0] = v17;
            unint64_t v19[2] = AttrData;
            unint64_t v19[3] = v13;
            __int16 v20 = 1282;
            v21[0] = (void **)v19;
            v21[2] = (void **)"'";
            __int16 v22 = 770;
            mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
            mlir::Diagnostic::attachNote();
          }
        }
      }
      v3 += 3;
    }
    while ((void *)v5 != v3);
  }
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.insert", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::InsertOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37B398;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::InsertOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    __int16 v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::tensor::InsertOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDpsInitsMutable;
  char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[134], v2);
}

mlir::MutableOperandRange *mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  uint64_t v5 = a1;
  DestMutable = (mlir::OpOperand *)mlir::tensor::InsertOp::getDestMutable((mlir::tensor::InsertOp *)&v5);
  return mlir::MutableOperandRange::MutableOperandRange(a2, DestMutable);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "tensor.insert";
  v16[1] = 13;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::tensor::detail::InsertOpGenericAdaptorBase::InsertOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::tensor::InsertOp::fold((uint64_t)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    char v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      unint64_t v223 = 116;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[435];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v223 = 97;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[441];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      unint64_t v223 = 97;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[138];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[322];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[324];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::tensor::InsertOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::tensor::InsertOp::verifyInvariantsImpl((mlir::tensor::InsertOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::tensor::InsertOp::verify((mlir::tensor::InsertOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyDestinationStyleOpInterface(a1, a2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.insert_slice", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A8A8;
  return a1;
}