char *operations_research::sat::LinearExpressionProto::ByteSizeLong(operations_research::sat::LinearExpressionProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t vars8;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    v3 = v2 + 11;
    v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
LABEL_6:
    if ((v4 & 0x80000000) != 0) {
      v5 = 11;
    }
    else {
      v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    *((_DWORD *)this + 14) = v4;
    v6 = (const google::protobuf::UnknownFieldSet *)(v5 + v3 + v4);
    v7 = *((void *)this + 8);
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v4) {
    goto LABEL_6;
  }
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  v7 = *((void *)this + 8);
  if (v7) {
LABEL_13:
  }
    v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + ((9 * (__clz(v7 | 1) ^ 0x3F) + 73) >> 6) + 1);
LABEL_14:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearExpressionProto *)((char *)this + 8), v6, (_DWORD *)this + 18);
  }
  else
  {
    *((_DWORD *)this + 18) = v6;
    return (char *)v6;
  }
}

void operations_research::sat::LinearExpressionProto::MergeFrom(operations_research::sat::LinearExpressionProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearExpressionProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::LinearExpressionProto::MergeFrom(uint64_t this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    v5 = (unint64_t *)(this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  uint64_t v15 = *((void *)a2 + 8);
  if (v15) {
    *(void *)(v3 + 64) = v15;
  }
  return this;
}

void operations_research::sat::LinearExpressionProto::CopyFrom(operations_research::sat::LinearExpressionProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    *((void *)this + 8) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::LinearExpressionProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::LinearExpressionProto::CopyFrom(uint64_t this, const operations_research::sat::LinearExpressionProto *a2)
{
  if (a2 != (const operations_research::sat::LinearExpressionProto *)this)
  {
    uint64_t v4 = this;
    *(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 40) = 0;
    *(void *)(this + 64) = 0;
    uint64_t v5 = *(void *)(this + 8);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    return operations_research::sat::LinearExpressionProto::MergeFrom(v4, a2);
  }
  return this;
}

uint64_t operations_research::sat::LinearExpressionProto::IsInitialized(operations_research::sat::LinearExpressionProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearExpressionProto::GetMetadata(operations_research::sat::LinearExpressionProto *this)
{
  return off_26AED01D8[6];
}

void *google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(void *a1)
{
  uint64_t v2 = (operations_research::sat::LinearExpressionProto **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v4);
          MEMORY[0x23ECF2BC0]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      uint64_t v2 = (operations_research::sat::LinearExpressionProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

operations_research::sat::LinearArgumentProto *operations_research::sat::LinearArgumentProto::LinearArgumentProto(operations_research::sat::LinearArgumentProto *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0BE340;
  *((void *)this + 1) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_23CBDA424(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(operations_research::sat::LinearExpressionProto ***)(v1 + 32);
  if (v3) {
    operations_research::sat::LinearArgumentProto::LinearArgumentProto((void *)(v1 + 16), v3, (operations_research::sat::LinearExpressionProto ***)(v1 + 32));
  }
  *(void *)(v1 + 32) = 0;
  _Unwind_Resume(exception_object);
}

operations_research::sat::LinearArgumentProto *operations_research::sat::LinearArgumentProto::LinearArgumentProto(operations_research::sat::LinearArgumentProto *this, const operations_research::sat::LinearArgumentProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BE340;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v29 = *((void *)a2 + 4);
    v30 = (google::protobuf::Arena **)((char *)this + 16);
    v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::LinearArgumentProto *)((char *)this + 16), v5);
    int v6 = **((_DWORD **)this + 4);
    int v7 = *((_DWORD *)this + 6);
    int v8 = v6 - v7;
    if (v6 - v7 >= v5) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v8;
    }
    if ((int)v9 >= 1)
    {
      uint64_t v10 = (operations_research::sat::LinearExpressionProto **)v28;
      uint64_t v11 = (operations_research::sat::LinearExpressionProto **)(v29 + 8);
      do
      {
        uint64_t v13 = *v11++;
        int v12 = v13;
        uint64_t v14 = *v10++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v12, v14);
        --v9;
      }
      while (v9);
    }
    if (v8 < v5)
    {
      uint64_t v15 = *v30;
      int v16 = v7 + v5 - v6;
      uint64_t v17 = 2 * v8;
      v18 = &v28[v17];
      v19 = (operations_research::sat::LinearExpressionProto **)(v17 * 4 + v29 + 8);
      do
      {
        v20 = *v19++;
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v15);
        v22 = v21;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v20, v21);
        *(void *)v18 = v22;
        v18 += 2;
        --v16;
      }
      while (v16);
    }
    int v23 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v23;
    v24 = (int *)*((void *)this + 4);
    if (*v24 < v23) {
      int *v24 = v23;
    }
  }
  *((_DWORD *)this + 12) = 0;
  uint64_t v25 = *((void *)a2 + 1);
  if (v25)
  {
    if (*v4) {
      v26 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      v26 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v26, (const google::protobuf::UnknownFieldSet *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  if (a2 != (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_
    && *((void *)a2 + 5))
  {
    operator new();
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_23CBDA618(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1081C407E89B05FLL);
  google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(v2);
  _Unwind_Resume(a1);
}

void sub_23CBDA644(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<operations_research::sat::LinearExpressionProto>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearArgumentProto::~LinearArgumentProto(operations_research::sat::LinearArgumentProto *this)
{
  if (this != (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    uint64_t v2 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
    if (v2)
    {
      operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v2);
      MEMORY[0x23ECF2BC0]();
    }
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(void *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if (v4 && v5 == 0)
    {
      int v7 = *(void **)(v4 + 8);
      if (v7 != *(void **)(v4 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v4 + 8));
        int v7 = *(void **)(v4 + 8);
      }
      if (v7)
      {
        *(void *)(v4 + 16) = v7;
        operator delete(v7);
      }
      MEMORY[0x23ECF2BC0](v4, 0x20C40DC1BFBCFLL);
    }
  }
  int v8 = (operations_research::sat::LinearExpressionProto **)*((void *)this + 4);
  if (v8 && !*((void *)this + 2))
  {
    uint64_t v9 = v8 + 1;
    uint64_t v10 = *(unsigned int *)v8;
    if ((int)v10 >= 1)
    {
      do
      {
        if (*v9)
        {
          operations_research::sat::LinearExpressionProto::~LinearExpressionProto(*v9);
          MEMORY[0x23ECF2BC0]();
        }
        ++v9;
        --v10;
      }
      while (v10);
      int v8 = (operations_research::sat::LinearExpressionProto **)*((void *)this + 4);
    }
    operator delete(v8);
    *((void *)this + 4) = 0;
  }
  else
  {
    *((void *)this + 4) = 0;
  }
}

{
  uint64_t vars8;

  operations_research::sat::LinearArgumentProto::~LinearArgumentProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LinearArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void operations_research::sat::LinearArgumentProto::Clear(operations_research::sat::LinearArgumentProto *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
      *(void *)(v4 + 64) = 0;
      uint64_t v5 = *(void *)(v4 + 8);
      if ((v5 & 1) != 0
        && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = v6 & 1;
  int v8 = (void *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    if (*v8) {
      goto LABEL_12;
    }
  }
  else if (v8)
  {
    goto LABEL_12;
  }
  uint64_t v9 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
  if (v9)
  {
    operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v9);
    MEMORY[0x23ECF2BC0]();
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = v6 & 1;
  }
LABEL_12:
  *((void *)this + 5) = 0;
  if (v7 && *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearArgumentProto::_InternalParse(operations_research::sat::LinearArgumentProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(void *)a3)
      {
        if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
          return a2;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
        if (v45) {
          return a2;
        }
      }
      uint64_t v10 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      unsigned int v11 = *(unsigned __int8 *)a2;
      if ((*(char *)a2 & 0x80000000) == 0)
      {
        unsigned int v12 = v11 >> 3;
        if (v11 >> 3 == 2) {
          goto LABEL_16;
        }
        goto LABEL_5;
      }
      unsigned int v14 = v11 + (*(unsigned __int8 *)v10 << 7);
      unsigned int v11 = v14 - 128;
      if (*(char *)v10 < 0)
      {
        uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v14 - 128));
        if (!TagFallback) {
          return 0;
        }
        uint64_t v10 = (google::protobuf::UnknownFieldSet *)TagFallback;
        unsigned int v11 = v37;
        unsigned int v12 = v37 >> 3;
        if (v37 >> 3 != 2) {
          goto LABEL_5;
        }
LABEL_16:
        if (v11 != 18) {
          goto LABEL_9;
        }
        a2 = (google::protobuf::UnknownFieldSet *)((char *)v10 - 1);
        while (1)
        {
          uint64_t v15 = (int *)*((void *)this + 4);
          if (!v15) {
            break;
          }
          uint64_t v16 = *((int *)this + 6);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 6) = v16 + 1;
            v18 = *(operations_research::sat::LinearExpressionProto **)&v15[2 * v16 + 2];
            v19 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
            v20 = (const char *)*((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0) {
              goto LABEL_21;
            }
            goto LABEL_27;
          }
          if (v17 == *((_DWORD *)this + 7)) {
            goto LABEL_25;
          }
LABEL_26:
          *uint64_t v15 = v17 + 1;
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*((google::protobuf::Arena **)this + 2));
          v18 = v23;
          uint64_t v24 = *((void *)this + 4);
          uint64_t v25 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v25 + 1;
          *(void *)(v24 + 8 * v25 + 8) = v23;
          v19 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
          v20 = (const char *)*((unsigned __int8 *)a2 + 1);
          if (*((char *)a2 + 1) < 0)
          {
LABEL_21:
            uint64_t SizeFallback = google::protobuf::internal::ReadSizeFallback(v19, v20);
            if (!SizeFallback) {
              return 0;
            }
            v22 = (google::protobuf::internal *)SizeFallback;
            goto LABEL_28;
          }
LABEL_27:
          v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
LABEL_28:
          uint64_t v26 = *((void *)a3 + 1);
          int v27 = v20 + v22 - v26;
          *(void *)a3 = v26 + (v27 & (v27 >> 31));
          int v28 = *((_DWORD *)a3 + 7);
          *((_DWORD *)a3 + 7) = v27;
          LODWORD(v26) = *((_DWORD *)a3 + 22);
          BOOL v29 = __OFSUB__(v26, 1);
          LODWORD(v26) = v26 - 1;
          *((_DWORD *)a3 + 22) = v26;
          if ((int)v26 < 0 != v29) {
            return 0;
          }
          v30 = operations_research::sat::LinearExpressionProto::_InternalParse(v18, v22, a3, a4, a5);
          a2 = v30;
          if (!v30) {
            return a2;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v31 = *((_DWORD *)a3 + 7) + v28 - v27;
          *((_DWORD *)a3 + 7) = v31;
          unint64_t v32 = *((void *)a3 + 1) + (v31 & (v31 >> 31));
          *(void *)a3 = v32;
          if (v32 <= (unint64_t)v30 || *(unsigned char *)v30 != 18) {
            goto LABEL_2;
          }
        }
        int v17 = *((_DWORD *)this + 7);
LABEL_25:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v17 + 1);
        uint64_t v15 = (int *)*((void *)this + 4);
        int v17 = *v15;
        goto LABEL_26;
      }
      uint64_t v10 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      unsigned int v12 = v11 >> 3;
      if (v11 >> 3 == 2) {
        goto LABEL_16;
      }
LABEL_5:
      if (v12 == 1 && v11 == 10) {
        break;
      }
LABEL_9:
      if (!v11 || (v11 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v11 - 1;
        return v10;
      }
      if (*v8)
      {
        a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v10, (const char *)a3, a5);
        if (!a2) {
          return a2;
        }
      }
      else
      {
        v46 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)v46, v10, (const char *)a3, v47);
        if (!a2) {
          return a2;
        }
      }
    }
    v33 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
    if (v33)
    {
      v34 = (const char *)*(unsigned __int8 *)v10;
      if ((*(char *)v10 & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
    else
    {
      v38 = (google::protobuf::Arena **)(*v8 & 0xFFFFFFFFFFFFFFFELL);
      if (*v8)
      {
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*v38);
        v33 = v48;
        *((void *)this + 5) = v48;
        v34 = (const char *)*(unsigned __int8 *)v10;
        if ((*(char *)v10 & 0x80000000) == 0)
        {
LABEL_36:
          v35 = (google::protobuf::UnknownFieldSet *)((char *)v10 + 1);
          goto LABEL_44;
        }
      }
      else
      {
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>((google::protobuf::Arena *)v38);
        v33 = v39;
        *((void *)this + 5) = v39;
        v34 = (const char *)*(unsigned __int8 *)v10;
        if ((*(char *)v10 & 0x80000000) == 0) {
          goto LABEL_36;
        }
      }
    }
    uint64_t v40 = google::protobuf::internal::ReadSizeFallback(v10, v34);
    if (!v40) {
      return 0;
    }
    v35 = (google::protobuf::internal *)v40;
LABEL_44:
    uint64_t v41 = *((void *)a3 + 1);
    int v42 = v34 + v35 - v41;
    *(void *)a3 = v41 + (v42 & (v42 >> 31));
    int v43 = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = v42;
    LODWORD(v41) = *((_DWORD *)a3 + 22);
    BOOL v29 = __OFSUB__(v41, 1);
    LODWORD(v41) = v41 - 1;
    *((_DWORD *)a3 + 22) = v41;
    if ((int)v41 < 0 != v29) {
      return 0;
    }
    a2 = operations_research::sat::LinearExpressionProto::_InternalParse(v33, v35, a3, a4, a5);
    if (!a2) {
      return a2;
    }
    ++*((_DWORD *)a3 + 22);
    if (*((_DWORD *)a3 + 20)) {
      return 0;
    }
    int v44 = *((_DWORD *)a3 + 7) + v43 - v42;
    *((_DWORD *)a3 + 7) = v44;
    *(void *)a3 = *((void *)a3 + 1) + (v44 & (v44 >> 31));
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearArgumentProto::_InternalSerialize(operations_research::sat::LinearArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (this != (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    uint64_t v6 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
    if (v6)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        uint64_t v6 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
        *a2 = 10;
        unsigned int v7 = *((_DWORD *)v6 + 18);
        if (v7 <= 0x7F) {
          goto LABEL_5;
        }
      }
      else
      {
        *a2 = 10;
        unsigned int v7 = *((_DWORD *)v6 + 18);
        if (v7 <= 0x7F)
        {
LABEL_5:
          a2[1] = v7;
          int v8 = (unsigned __int8 *)(a2 + 2);
LABEL_12:
          a2 = (char *)operations_research::sat::LinearExpressionProto::_InternalSerialize(v6, (char *)v8, a3, a4);
          goto LABEL_13;
        }
      }
      a2[1] = v7 | 0x80;
      unsigned int v9 = v7 >> 7;
      if (v7 >> 14)
      {
        int v8 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v8 - 1) = v9 | 0x80;
          unsigned int v10 = v9 >> 7;
          ++v8;
          unsigned int v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v8 - 1) = v10;
      }
      else
      {
        a2[2] = v9;
        int v8 = (unsigned __int8 *)(a2 + 3);
      }
      goto LABEL_12;
    }
  }
LABEL_13:
  int v12 = *((_DWORD *)this + 6);
  if (v12)
  {
    for (int i = 0; i != v12; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      uint64_t v15 = *(operations_research::sat::LinearExpressionProto **)(*((void *)this + 4) + 8 * i + 8);
      *a2 = 18;
      unsigned int v16 = *((_DWORD *)v15 + 18);
      if (v16 <= 0x7F)
      {
        a2[1] = v16;
        unsigned int v14 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        if (v16 >> 14)
        {
          unsigned int v14 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v14 - 1) = v17 | 0x80;
            unsigned int v18 = v17 >> 7;
            ++v14;
            unsigned int v19 = v17 >> 14;
            v17 >>= 7;
          }
          while (v19);
          *(v14 - 1) = v18;
        }
        else
        {
          a2[2] = v17;
          unsigned int v14 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)operations_research::sat::LinearExpressionProto::_InternalSerialize(v15, (char *)v14, a3, a4);
    }
  }
  uint64_t v20 = *((void *)this + 1);
  if ((v20 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::LinearArgumentProto::ByteSizeLong(operations_research::sat::LinearArgumentProto *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (operations_research::sat::LinearExpressionProto **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      unsigned int v7 = operations_research::sat::LinearExpressionProto::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
    if (this == (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (this == (operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_) {
      goto LABEL_12;
    }
  }
  int v8 = (operations_research::sat::LinearExpressionProto *)*((void *)this + 5);
  if (v8)
  {
    unsigned int v9 = operations_research::sat::LinearExpressionProto::ByteSizeLong(v8);
    uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v2
                                                      + 1
                                                      + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
  }
LABEL_12:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearArgumentProto *)((char *)this + 8), v2, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v2;
    return (char *)v2;
  }
}

void operations_research::sat::LinearArgumentProto::MergeFrom(operations_research::sat::LinearArgumentProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearArgumentProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::LinearArgumentProto::MergeFrom(uint64_t this, const operations_research::sat::LinearArgumentProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (void *)(this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v4) {
      unsigned int v7 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(this + 8));
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v7, v6);
  }
  int v8 = *((_DWORD *)a2 + 6);
  if (v8)
  {
    unint64_t v32 = v4;
    uint64_t v34 = *((void *)a2 + 4);
    this = (uint64_t)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v8);
    uint64_t v33 = this;
    int v9 = **(_DWORD **)(v3 + 32);
    int v10 = *(_DWORD *)(v3 + 24);
    int v11 = v9 - v10;
    if (v9 - v10 >= v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (operations_research::sat::LinearExpressionProto **)this;
      unsigned int v14 = (operations_research::sat::LinearExpressionProto **)(v34 + 8);
      do
      {
        unsigned int v16 = *v14++;
        uint64_t v15 = v16;
        unsigned int v17 = *v13++;
        this = google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v8)
    {
      unsigned int v18 = *(google::protobuf::Arena **)(v3 + 16);
      int v19 = v10 + v8 - v9;
      uint64_t v20 = 8 * v11;
      v21 = (operations_research::sat::LinearExpressionProto **)(v33 + v20);
      v22 = (operations_research::sat::LinearExpressionProto **)(v20 + v34 + 8);
      do
      {
        int v23 = *v22++;
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v18);
        uint64_t v25 = v24;
        this = google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(v23, v24);
        *v21++ = v25;
        --v19;
      }
      while (v19);
    }
    int v26 = *(_DWORD *)(v3 + 24) + v8;
    *(_DWORD *)(v3 + 24) = v26;
    int v27 = *(int **)(v3 + 32);
    uint64_t v4 = v32;
    if (*v27 < v26) {
      *int v27 = v26;
    }
  }
  if (a2 != (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_)
  {
    int v28 = (const operations_research::sat::LinearExpressionProto *)*((void *)a2 + 5);
    if (v28)
    {
      uint64_t v29 = *(void *)(v3 + 40);
      if (!v29)
      {
        v30 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if (*v4) {
          v30 = *(google::protobuf::Arena **)v30;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v30);
        *(void *)(v3 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v29;
        int v28 = (const operations_research::sat::LinearExpressionProto *)*((void *)a2 + 5);
      }
      if (v28) {
        int v31 = v28;
      }
      else {
        int v31 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
      }
      return operations_research::sat::LinearExpressionProto::MergeFrom(v29, v31);
    }
  }
  return this;
}

void operations_research::sat::LinearArgumentProto::CopyFrom(operations_research::sat::LinearArgumentProto *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::sat::LinearArgumentProto::Clear(this);
    if (v4)
    {
      operations_research::sat::LinearArgumentProto::MergeFrom((uint64_t)this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

uint64_t operations_research::sat::LinearArgumentProto::IsInitialized(operations_research::sat::LinearArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearArgumentProto::GetMetadata(operations_research::sat::LinearArgumentProto *this)
{
  return off_26AED01D8[8];
}

void operations_research::sat::AllDifferentConstraintProto::~AllDifferentConstraintProto(operations_research::sat::AllDifferentConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::AllDifferentConstraintProto::Clear(operations_research::sat::AllDifferentConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::AllDifferentConstraintProto::_InternalParse(operations_research::sat::AllDifferentConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unsigned int v18 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      unsigned int v18 = v6;
      if (a2) {
        return v6;
      }
    }
    int v11 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    unsigned int v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      unsigned int v18 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      int v11 = TagFallback;
      unsigned int v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8) {
        goto LABEL_9;
      }
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
        return v11;
      }
      if (*v8)
      {
        int v10 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        int v11 = v18;
      }
      uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v10, v11, (const char *)a3, a5);
      unsigned int v18 = v6;
      if (!v6) {
        return v6;
      }
    }
    else
    {
      int v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      unsigned int v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8) {
        goto LABEL_14;
      }
LABEL_9:
      if (v12 == 10)
      {
        uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, a3, a4);
        unsigned int v18 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v12 != 8) {
          goto LABEL_14;
        }
        int v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        uint64_t v16 = *((unsigned int *)this + 4);
        if (v16 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        uint64_t v6 = v18;
        if (!v18) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::AllDifferentConstraintProto::_InternalSerialize(operations_research::sat::AllDifferentConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      unsigned int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      unsigned int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *unsigned int v7 = v6;
        int v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::AllDifferentConstraintProto::ByteSizeLong(operations_research::sat::AllDifferentConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      uint64_t v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
      if (*((unsigned char *)this + 8)) {
        goto LABEL_8;
      }
LABEL_6:
      *((_DWORD *)this + 9) = v3;
      return (char *)v3;
    }
    *((_DWORD *)this + 8) = v2;
    unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    uint64_t v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    unint64_t v3 = 0;
    uint64_t v4 = (operations_research::sat::AllDifferentConstraintProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:

  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::AllDifferentConstraintProto::MergeFrom(operations_research::sat::AllDifferentConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    unsigned int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      int v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v13 = *((int *)this + 4);
      unint64_t v12 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v12, v13 + v11);
      uint64_t v14 = *((void *)v12 + 1);
      *v12 += *((_DWORD *)v6 + 4);
      unint64_t v15 = (void *)(v14 + 4 * v13);
      uint64_t v16 = (const void *)v6[3];
      size_t v17 = 4 * *((int *)v6 + 4);
      memcpy(v15, v16, v17);
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::AllDifferentConstraintProto::CopyFrom(operations_research::sat::AllDifferentConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::AllDifferentConstraintProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::AllDifferentConstraintProto::IsInitialized(operations_research::sat::AllDifferentConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::AllDifferentConstraintProto::GetMetadata(operations_research::sat::AllDifferentConstraintProto *this)
{
  return off_26AED01D8[10];
}

operations_research::sat::LinearConstraintProto *operations_research::sat::LinearConstraintProto::LinearConstraintProto(operations_research::sat::LinearConstraintProto *this, const operations_research::sat::LinearConstraintProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BE4A0;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    unsigned int v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    int v8 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    unint64_t v10 = (void *)*((void *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((_DWORD *)this + 21) = 0;
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    if (*v4) {
      unint64_t v12 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v12 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v12, (const google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  return this;
}

void sub_23CBDBB8C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_23CBDBBB8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraintProto::~LinearConstraintProto(operations_research::sat::LinearConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::LinearConstraintProto::~LinearConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LinearConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 84) = a2;
  return this;
}

void operations_research::sat::LinearConstraintProto::Clear(operations_research::sat::LinearConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::LinearConstraintProto::_InternalParse(operations_research::sat::LinearConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unsigned int v6 = a2;
  int v27 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 64);
  unint64_t v10 = (unsigned int *)((char *)this + 40);
  uint64_t v11 = (operations_research::sat::LinearConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      int v27 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v14 = (unsigned __int8 *)v6 + 1;
    unsigned int v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    unsigned int v16 = v15 + (*v14 << 7);
    unsigned int v15 = v16 - 128;
    if ((char)*v14 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      int v27 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v14 = (unsigned __int8 *)TagFallback;
      unsigned int v15 = a2;
      unsigned int v17 = a2 >> 3;
      if (a2 >> 3 == 3) {
        goto LABEL_17;
      }
LABEL_11:
      if (v17 == 2)
      {
        if (v15 == 18)
        {
          unint64_t v12 = (google::protobuf::internal *)v10;
LABEL_4:
          uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v12, v14, a3, a4);
          goto LABEL_5;
        }
        if (v15 == 16)
        {
          uint64_t v19 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
          uint64_t v20 = *((unsigned int *)this + 10);
          if (v20 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<long long>::Reserve(v10, v20 + 1);
          }
          *(void *)(*((void *)this + 6) + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v19;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v20 + 1;
          goto LABEL_34;
        }
        goto LABEL_36;
      }
      if (v17 != 1) {
        goto LABEL_36;
      }
      if (v15 == 10)
      {
        uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, v14, a3, a4);
        goto LABEL_5;
      }
      if (v15 != 8) {
        goto LABEL_36;
      }
      int v21 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
      uint64_t v22 = *((unsigned int *)this + 4);
      if (v22 == *((_DWORD *)this + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v11, v22 + 1);
      }
      *(_DWORD *)(*((void *)this + 3) + 4 * v22) = v21;
      *((_DWORD *)this + 4) = v22 + 1;
LABEL_34:
      unsigned int v6 = v27;
      if (!v27) {
        return v6;
      }
    }
    else
    {
      uint64_t v14 = (unsigned __int8 *)v6 + 2;
LABEL_10:
      int v27 = (google::protobuf::internal *)v14;
      unsigned int v17 = v15 >> 3;
      if (v15 >> 3 != 3) {
        goto LABEL_11;
      }
LABEL_17:
      if (v15 == 26)
      {
        unint64_t v12 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v15 == 24)
      {
        uint64_t v23 = google::protobuf::internal::ReadVarint64(&v27, (const char **)a2);
        uint64_t v24 = *((unsigned int *)this + 16);
        if (v24 == *((_DWORD *)this + 17)) {
          google::protobuf::RepeatedField<long long>::Reserve(v9, v24 + 1);
        }
        *(void *)(*((void *)this + 9) + 8 * v24) = v23;
        *((_DWORD *)this + 16) = v24 + 1;
        goto LABEL_34;
      }
LABEL_36:
      if (!v15 || (v15 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 - 1;
        return (google::protobuf::internal *)v14;
      }
      if (*v8)
      {
        uint64_t v25 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        uint64_t v25 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        uint64_t v14 = (unsigned __int8 *)v27;
      }
      uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v25, (google::protobuf::UnknownFieldSet *)v14, (const char *)a3, a5);
LABEL_5:
      unsigned int v6 = v13;
      int v27 = v13;
      if (!v13) {
        return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearConstraintProto::_InternalSerialize(operations_research::sat::LinearConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *int v7 = v6;
        int v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v38 = v6 >> 14;
      v6 >>= 7;
    }
    while (v38);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *unsigned int v17 = v16;
        unsigned int v18 = (unint64_t *)*((void *)this + 6);
        uint64_t v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v39 = v16 >> 14;
      v16 >>= 7;
    }
    while (v39);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  unsigned int v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      int v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80) {
        goto LABEL_34;
      }
    }
    else
    {
      *a2 = 26;
      int v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *int v27 = v26;
        int v28 = (unint64_t *)*((void *)this + 9);
        uint64_t v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v35 = *v28++;
            unint64_t v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              unint64_t v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  unint64_t v33 = v32 >> 7;
                  ++a2;
                  unint64_t v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            unint64_t v31 = *v28++;
            unint64_t v30 = v31;
            if (v31 > 0x7F) {
              goto LABEL_39;
            }
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29) {
            goto LABEL_46;
          }
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      unsigned int v40 = v26 >> 14;
      v26 >>= 7;
    }
    while (v40);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  uint64_t v36 = *((void *)this + 1);
  if ((v36 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::LinearConstraintProto::ByteSizeLong(operations_research::sat::LinearConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
LABEL_6:
    if ((v4 & 0x80000000) != 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    *((_DWORD *)this + 14) = v4;
    uint64_t v6 = v5 + v3 + v4;
    uint64_t v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_13:
    int v8 = v7;
    if ((v7 & 0x80000000) != 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v6 += v9;
    goto LABEL_17;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v4) {
    goto LABEL_6;
  }
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  uint64_t v6 = v3 + v4;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  if (v7) {
    goto LABEL_13;
  }
LABEL_10:
  int v8 = 0;
LABEL_17:
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v8;
  unint64_t v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearConstraintProto *)((char *)this + 8), v10, (_DWORD *)this + 21);
  }
  else
  {
    *((_DWORD *)this + 21) = v10;
    return (char *)(v6 + v7);
  }
}

void operations_research::sat::LinearConstraintProto::MergeFrom(operations_research::sat::LinearConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::LinearConstraintProto::MergeFrom((char *)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

char *operations_research::sat::LinearConstraintProto::MergeFrom(char *this, const operations_research::sat::LinearConstraintProto *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = (char *)google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (char *)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (char *)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v17 = *(int *)(v3 + 64);
    uint64_t v16 = v3 + 64;
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v16, v17 + v15);
    uint64_t v18 = *(void *)(v16 + 8);
    *(_DWORD *)v16 += *((_DWORD *)a2 + 16);
    uint64_t v19 = (void *)(v18 + 8 * v17);
    unint64_t v20 = (const void *)*((void *)a2 + 9);
    size_t v21 = 8 * *((int *)a2 + 16);
    return (char *)memcpy(v19, v20, v21);
  }
  return this;
}

void operations_research::sat::LinearConstraintProto::CopyFrom(operations_research::sat::LinearConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::LinearConstraintProto::MergeFrom((char *)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::LinearConstraintProto::IsInitialized(operations_research::sat::LinearConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearConstraintProto::GetMetadata(operations_research::sat::LinearConstraintProto *this)
{
  return off_26AED01D8[12];
}

void operations_research::sat::ElementConstraintProto::~ElementConstraintProto(operations_research::sat::ElementConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::ElementConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void operations_research::sat::ElementConstraintProto::Clear(operations_research::sat::ElementConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *(void *)((char *)this + 36) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::ElementConstraintProto::_InternalParse(operations_research::sat::ElementConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v22 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (operations_research::sat::ElementConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      unint64_t v22 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v11 = (unsigned __int8 *)v6 + 1;
    unsigned int v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((char)*v11 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      unint64_t v22 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v11 = (unsigned __int8 *)TagFallback;
      unsigned int v12 = a2;
      unsigned int v14 = a2 >> 3;
      if (a2 >> 3 != 3) {
        goto LABEL_9;
      }
LABEL_29:
      if (v12 == 26)
      {
        uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, v11, a3, a4);
        unint64_t v22 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v12 != 24) {
          goto LABEL_14;
        }
        int v19 = google::protobuf::internal::ReadVarint64(&v22, (const char **)a2);
        uint64_t v20 = *((unsigned int *)this + 4);
        if (v20 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v20 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v19;
        *((_DWORD *)this + 4) = v20 + 1;
        uint64_t v6 = v22;
        if (!v22) {
          return v6;
        }
      }
    }
    else
    {
      uint64_t v11 = (unsigned __int8 *)v6 + 2;
LABEL_8:
      unint64_t v22 = (google::protobuf::internal *)v11;
      unsigned int v14 = v12 >> 3;
      if (v12 >> 3 == 3) {
        goto LABEL_29;
      }
LABEL_9:
      if (v14 == 2)
      {
        if (v12 != 16) {
          goto LABEL_14;
        }
        uint64_t v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) != 0)
        {
          int v16 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v16 << 7) - 128);
          if ((v16 & 0x80000000) == 0)
          {
            uint64_t v6 = (google::protobuf::internal *)(v11 + 2);
            goto LABEL_22;
          }
          uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          unint64_t v22 = v6;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
          if (!v6) {
            return v6;
          }
        }
        else
        {
LABEL_22:
          unint64_t v22 = v6;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
        }
      }
      else if (v14 == 1 && v12 == 8)
      {
        uint64_t v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) == 0) {
          goto LABEL_26;
        }
        int v17 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          unint64_t v22 = v6;
          *((_DWORD *)this + 9) = a2;
          if (!v6) {
            return v6;
          }
        }
        else
        {
          uint64_t v6 = (google::protobuf::internal *)(v11 + 2);
LABEL_26:
          unint64_t v22 = v6;
          *((_DWORD *)this + 9) = a2;
        }
      }
      else
      {
LABEL_14:
        if (!v12 || (v12 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
          return (google::protobuf::internal *)v11;
        }
        if (*v8)
        {
          uint64_t v10 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          uint64_t v11 = (unsigned __int8 *)v22;
        }
        uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v10, (google::protobuf::UnknownFieldSet *)v11, (const char *)a3, a5);
        unint64_t v22 = v6;
        if (!v6) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::ElementConstraintProto::_InternalSerialize(operations_research::sat::ElementConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 9);
  if (!v6)
  {
LABEL_9:
    unsigned int v7 = *((_DWORD *)this + 10);
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v6 = *((_DWORD *)this + 9);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      unsigned int v7 = *((_DWORD *)this + 10);
      if (!v7) {
        goto LABEL_21;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v10 = v8 >> 7;
    ++a2;
    unint64_t v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  unsigned int v7 = *((_DWORD *)this + 10);
  if (!v7)
  {
LABEL_21:
    int v9 = *((_DWORD *)this + 8);
    if (v9 >= 1) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_10:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v7 = *((_DWORD *)this + 10);
    *a2 = 16;
    if (v7 <= 0x7F)
    {
LABEL_12:
      a2[1] = v7;
      a2 += 2;
      int v9 = *((_DWORD *)this + 8);
      if (v9 >= 1) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
  else
  {
    *a2 = 16;
    if (v7 <= 0x7F) {
      goto LABEL_12;
    }
  }
  a2[1] = v7 | 0x80;
  unint64_t v12 = (unint64_t)(int)v7 >> 7;
  if (!(v7 >> 14))
  {
    a2[2] = v12;
    a2 += 3;
    goto LABEL_21;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v12 | 0x80;
    unint64_t v22 = v12 >> 7;
    ++a2;
    unint64_t v23 = v12 >> 14;
    v12 >>= 7;
  }
  while (v23);
  *(a2 - 1) = v22;
  int v9 = *((_DWORD *)this + 8);
  if (v9 >= 1)
  {
LABEL_22:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      unsigned int v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80) {
        goto LABEL_24;
      }
    }
    else
    {
      *a2 = 26;
      unsigned int v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
      {
LABEL_24:
        a2 += 2;
        *unsigned int v13 = v9;
        unsigned int v14 = (int *)*((void *)this + 3);
        int v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v21 = *v14++;
            unint64_t v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_29:
              *a2 = v16 | 0x80;
              unint64_t v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v18 | 0x80;
                  unint64_t v19 = v18 >> 7;
                  ++a2;
                  unint64_t v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *(a2 - 1) = v19;
              }
              else
              {
                a2[1] = v18;
                a2 += 2;
              }
              goto LABEL_26;
            }
          }
          else
          {
            unint64_t v17 = *v14++;
            unint64_t v16 = v17;
            if (v17 > 0x7F) {
              goto LABEL_29;
            }
          }
          *a2++ = v16;
LABEL_26:
          if (v14 >= v15) {
            goto LABEL_39;
          }
        }
      }
    }
    do
    {
      *v13++ = v9 | 0x80;
      unsigned int v26 = v9 >> 14;
      int v9 = v9 >> 7;
    }
    while (v26);
    a2 = (char *)(v13 - 1);
    goto LABEL_24;
  }
LABEL_39:
  uint64_t v24 = *((void *)this + 1);
  if ((v24 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::ElementConstraintProto::ByteSizeLong(operations_research::sat::ElementConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
      int v4 = *((_DWORD *)this + 9);
      if (!v4) {
        goto LABEL_12;
      }
    }
    else
    {
      *((_DWORD *)this + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      int v4 = *((_DWORD *)this + 9);
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    unint64_t v3 = 0;
    int v4 = *((_DWORD *)this + 9);
    if (!v4) {
      goto LABEL_12;
    }
  }
  if (v4 < 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  unint64_t v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v5);
LABEL_12:
  int v6 = *((_DWORD *)this + 10);
  if (v6)
  {
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unint64_t v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v7);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ElementConstraintProto *)((char *)this + 8), v3, (_DWORD *)this + 11);
  }
  else
  {
    *((_DWORD *)this + 11) = v3;
    return (char *)v3;
  }
}

void operations_research::sat::ElementConstraintProto::MergeFrom(operations_research::sat::ElementConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      unint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v12 = *((int *)this + 4);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v12 + v11);
      uint64_t v13 = *((void *)this + 3);
      *((_DWORD *)this + 4) += *((_DWORD *)v6 + 4);
      memcpy((void *)(v13 + 4 * v12), (const void *)v6[3], 4 * *((int *)v6 + 4));
    }
    int v14 = *((_DWORD *)v6 + 9);
    if (v14) {
      *((_DWORD *)this + 9) = v14;
    }
    int v15 = *((_DWORD *)v6 + 10);
    if (v15) {
      *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15;
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::ElementConstraintProto::CopyFrom(operations_research::sat::ElementConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *(void *)((char *)this + 36) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::ElementConstraintProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::ElementConstraintProto::IsInitialized(operations_research::sat::ElementConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::ElementConstraintProto::GetMetadata(operations_research::sat::ElementConstraintProto *this)
{
  return off_26AED01D8[14];
}

operations_research::sat::IntervalConstraintProto *operations_research::sat::IntervalConstraintProto::IntervalConstraintProto(operations_research::sat::IntervalConstraintProto *this, const operations_research::sat::IntervalConstraintProto *a2)
{
  *((void *)this + 1) = 0;
  int v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_26F0BE600;
  *((_DWORD *)this + 7) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    int v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v7, v6);
  }
  uint64_t v8 = *((void *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((void *)this + 2) = v8;
  return this;
}

void operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto(operations_research::sat::IntervalConstraintProto *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        uint64_t v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t vars8;

  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        uint64_t v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::IntervalConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void operations_research::sat::IntervalConstraintProto::Clear(operations_research::sat::IntervalConstraintProto *this)
{
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::IntervalConstraintProto::_InternalParse(operations_research::sat::IntervalConstraintProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
        return a2;
      }
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
      if (v25) {
        return a2;
      }
    }
    uint64_t v9 = (char *)a2 + 1;
    unsigned int v10 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v11 = v10 + (*v9 << 7);
    unsigned int v10 = v11 - 128;
    if (*v9 < 0) {
      break;
    }
    uint64_t v9 = (char *)a2 + 2;
LABEL_8:
    unsigned int v12 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_30:
      if (v10 != 24) {
        goto LABEL_14;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
      LODWORD(v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *v9;
      if ((v20 & 0x80) != 0)
      {
        int v21 = *(char *)a2;
        unint64_t v20 = (const char *)(v20 + (v21 << 7) - 128);
        if ((v21 & 0x80000000) == 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
          goto LABEL_3;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v20);
        *((_DWORD *)this + 6) = v22;
        if (!a2) {
          return a2;
        }
      }
      else
      {
LABEL_3:
        *((_DWORD *)this + 6) = v20;
      }
    }
    else
    {
LABEL_9:
      if (v12 == 2)
      {
        if (v10 != 16) {
          goto LABEL_14;
        }
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v14) = *v9;
        if ((v14 & 0x80) != 0)
        {
          int v15 = *(char *)a2;
          int v14 = (const char *)(v14 + (v15 << 7) - 128);
          if ((v15 & 0x80000000) == 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
            goto LABEL_23;
          }
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v14);
          *((_DWORD *)this + 5) = v23;
          if (!a2) {
            return a2;
          }
        }
        else
        {
LABEL_23:
          *((_DWORD *)this + 5) = v14;
        }
      }
      else if (v12 == 1 && v10 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v16) = *v9;
        if ((v16 & 0x80) == 0) {
          goto LABEL_27;
        }
        int v17 = *(char *)a2;
        unint64_t v16 = (const char *)(v16 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v16);
          *((_DWORD *)this + 4) = v24;
          if (!a2) {
            return a2;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_27:
          *((_DWORD *)this + 4) = v16;
        }
      }
      else
      {
LABEL_14:
        if (!v10 || (v10 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v10 - 1;
          return (google::protobuf::UnknownFieldSet *)v9;
        }
        if (*v8)
        {
          a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, a5);
          if (!a2) {
            return a2;
          }
        }
        else
        {
          unsigned int v26 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)v26, (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, v27);
          if (!a2) {
            return a2;
          }
        }
      }
    }
  }
  uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v11 - 128));
  if (TagFallback)
  {
    uint64_t v9 = (char *)TagFallback;
    unsigned int v10 = v19;
    unsigned int v12 = v19 >> 3;
    if (v19 >> 3 != 3) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntervalConstraintProto::_InternalSerialize(operations_research::sat::IntervalConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 4);
  if (!v6)
  {
LABEL_9:
    unsigned int v7 = *((_DWORD *)this + 5);
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v6 = *((_DWORD *)this + 4);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      unsigned int v7 = *((_DWORD *)this + 5);
      if (!v7) {
        goto LABEL_21;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unsigned int v7 = *((_DWORD *)this + 5);
        *a2 = 16;
        if (v7 <= 0x7F)
        {
LABEL_12:
          a2[1] = v7;
          a2 += 2;
          unsigned int v9 = *((_DWORD *)this + 6);
          if (!v9) {
            goto LABEL_35;
          }
          goto LABEL_22;
        }
      }
      else
      {
        *a2 = 16;
        if (v7 <= 0x7F) {
          goto LABEL_12;
        }
      }
      a2[1] = v7 | 0x80;
      unint64_t v12 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v12 | 0x80;
          unint64_t v13 = v12 >> 7;
          ++a2;
          unint64_t v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(a2 - 1) = v13;
        unsigned int v9 = *((_DWORD *)this + 6);
        if (!v9) {
          goto LABEL_35;
        }
        goto LABEL_22;
      }
      a2[2] = v12;
      a2 += 3;
      goto LABEL_21;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v10 = v8 >> 7;
    ++a2;
    unint64_t v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  unsigned int v7 = *((_DWORD *)this + 5);
  if (v7) {
    goto LABEL_10;
  }
LABEL_21:
  unsigned int v9 = *((_DWORD *)this + 6);
  if (!v9) {
    goto LABEL_35;
  }
LABEL_22:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v9 = *((_DWORD *)this + 6);
    *a2 = 24;
    if (v9 <= 0x7F) {
      goto LABEL_24;
    }
  }
  else
  {
    *a2 = 24;
    if (v9 <= 0x7F)
    {
LABEL_24:
      a2[1] = v9;
      a2 += 2;
      goto LABEL_35;
    }
  }
  a2[1] = v9 | 0x80;
  unint64_t v15 = (unint64_t)(int)v9 >> 7;
  if (v9 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v15 | 0x80;
      unint64_t v16 = v15 >> 7;
      ++a2;
      unint64_t v17 = v15 >> 14;
      v15 >>= 7;
    }
    while (v17);
    *(a2 - 1) = v16;
  }
  else
  {
    a2[2] = v15;
    a2 += 3;
  }
LABEL_35:
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::IntervalConstraintProto::ByteSizeLong(operations_research::sat::IntervalConstraintProto *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
    {
      uint64_t v2 = 11;
      int v3 = *((_DWORD *)this + 5);
      if (!v3) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
      int v3 = *((_DWORD *)this + 5);
      if (!v3) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = *((_DWORD *)this + 5);
    if (!v3) {
      goto LABEL_12;
    }
  }
  if (v3 < 0) {
    uint64_t v4 = 11;
  }
  else {
    uint64_t v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v2 += v4;
LABEL_12:
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v6;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntervalConstraintProto *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 7);
  }
  *((_DWORD *)this + 7) = v2;
  return (char *)v2;
}

void operations_research::sat::IntervalConstraintProto::MergeFrom(operations_research::sat::IntervalConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *((void *)v4 + 1);
    if (v7)
    {
      unint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = v6[4];
    if (v11) {
      *((_DWORD *)this + 4) = v11;
    }
    int v12 = v6[5];
    if (v12) {
      *((_DWORD *)this + 5) = v12;
    }
    int v13 = v6[6];
    if (v13) {
      *((_DWORD *)this + 6) = v13;
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::IntervalConstraintProto::CopyFrom(operations_research::sat::IntervalConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 6) = 0;
    *((void *)this + 2) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::IntervalConstraintProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::IntervalConstraintProto::IsInitialized(operations_research::sat::IntervalConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::IntervalConstraintProto::GetMetadata(operations_research::sat::IntervalConstraintProto *this)
{
  return off_26AED01D8[16];
}

void operations_research::sat::NoOverlapConstraintProto::~NoOverlapConstraintProto(operations_research::sat::NoOverlapConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::NoOverlapConstraintProto::Clear(operations_research::sat::NoOverlapConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlapConstraintProto::_InternalParse(operations_research::sat::NoOverlapConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  uint64_t v18 = a2;
  unint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      uint64_t v18 = v6;
      if (a2) {
        return v6;
      }
    }
    int v11 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    unsigned int v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      uint64_t v18 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      int v11 = TagFallback;
      unsigned int v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8) {
        goto LABEL_9;
      }
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
        return v11;
      }
      if (*v8)
      {
        unint64_t v10 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        int v11 = v18;
      }
      uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v10, v11, (const char *)a3, a5);
      uint64_t v18 = v6;
      if (!v6) {
        return v6;
      }
    }
    else
    {
      int v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      uint64_t v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8) {
        goto LABEL_14;
      }
LABEL_9:
      if (v12 == 10)
      {
        uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, a3, a4);
        uint64_t v18 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v12 != 8) {
          goto LABEL_14;
        }
        int v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        uint64_t v16 = *((unsigned int *)this + 4);
        if (v16 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        uint64_t v6 = v18;
        if (!v18) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlapConstraintProto::_InternalSerialize(operations_research::sat::NoOverlapConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        unint64_t v8 = (int *)*((void *)this + 3);
        uint64_t v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::NoOverlapConstraintProto::ByteSizeLong(operations_research::sat::NoOverlapConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      uint64_t v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
      if (*((unsigned char *)this + 8)) {
        goto LABEL_8;
      }
LABEL_6:
      *((_DWORD *)this + 9) = v3;
      return (char *)v3;
    }
    *((_DWORD *)this + 8) = v2;
    unint64_t v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    uint64_t v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    unint64_t v3 = 0;
    uint64_t v4 = (operations_research::sat::NoOverlapConstraintProto *)((char *)this + 8);
    if ((*((unsigned char *)this + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:

  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::NoOverlapConstraintProto::MergeFrom(operations_research::sat::NoOverlapConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    unsigned int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      unint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    int v11 = *((_DWORD *)v6 + 4);
    if (v11)
    {
      uint64_t v13 = *((int *)this + 4);
      unint64_t v12 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v12, v13 + v11);
      uint64_t v14 = *((void *)v12 + 1);
      *v12 += *((_DWORD *)v6 + 4);
      unint64_t v15 = (void *)(v14 + 4 * v13);
      uint64_t v16 = (const void *)v6[3];
      size_t v17 = 4 * *((int *)v6 + 4);
      memcpy(v15, v16, v17);
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::NoOverlapConstraintProto::CopyFrom(operations_research::sat::NoOverlapConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::NoOverlapConstraintProto::MergeFrom(this, lpsrc);
  }
}

uint64_t operations_research::sat::NoOverlapConstraintProto::IsInitialized(operations_research::sat::NoOverlapConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::NoOverlapConstraintProto::GetMetadata(operations_research::sat::NoOverlapConstraintProto *this)
{
  return off_26AED01D8[18];
}

void operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::NoOverlap2DConstraintProto::Clear(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::NoOverlap2DConstraintProto::_InternalParse(operations_research::sat::NoOverlap2DConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unsigned int v6 = a2;
  int v24 = a2;
  unint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (unsigned int *)((char *)this + 40);
  unint64_t v10 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_7:
      unint64_t v12 = (unsigned __int8 *)v6 + 1;
      unsigned int v13 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      unsigned int v14 = v13 + (*v12 << 7);
      unsigned int v13 = v14 - 128;
      if ((char)*v12 < 0)
      {
        uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v14 - 128));
        int v24 = TagFallback;
        if (!TagFallback) {
          return 0;
        }
        unint64_t v12 = (unsigned __int8 *)TagFallback;
        unsigned int v13 = a2;
        unsigned int v15 = a2 >> 3;
        if (a2 >> 3 == 3) {
          goto LABEL_23;
        }
LABEL_11:
        if (v15 == 2)
        {
          if (v13 == 18)
          {
            int v11 = (google::protobuf::internal *)v9;
LABEL_5:
            unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, v12, a3, a4);
            int v24 = v6;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          if (v13 == 16)
          {
            int v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
            uint64_t v22 = *((unsigned int *)this + 10);
            if (v22 == *((_DWORD *)this + 11)) {
              google::protobuf::RepeatedField<int>::Reserve(v9, v22 + 1);
            }
            *(_DWORD *)(*((void *)this + 6) + 4 * v22) = v21;
            *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v22 + 1;
LABEL_42:
            unsigned int v6 = v24;
            if (!v24) {
              return v6;
            }
            goto LABEL_6;
          }
        }
        else if (v15 == 1)
        {
          if (v13 == 10)
          {
            int v11 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v13 == 8)
          {
            int v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
            uint64_t v20 = *((unsigned int *)this + 4);
            if (v20 == *((_DWORD *)this + 5)) {
              google::protobuf::RepeatedField<int>::Reserve(v10, v20 + 1);
            }
            *(_DWORD *)(*((void *)this + 3) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v19;
            *((_DWORD *)this + 4) = v20 + 1;
            goto LABEL_42;
          }
        }
LABEL_13:
        if (!v13 || (v13 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v13 - 1;
          return (google::protobuf::internal *)v12;
        }
        if (*v8)
        {
          uint64_t v16 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v16 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          unint64_t v12 = (unsigned __int8 *)v24;
        }
        unsigned int v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, (google::protobuf::UnknownFieldSet *)v16, (google::protobuf::UnknownFieldSet *)v12, (const char *)a3, a5);
        int v24 = v6;
        if (!v6) {
          return v6;
        }
LABEL_6:
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
      else
      {
        unint64_t v12 = (unsigned __int8 *)v6 + 2;
LABEL_10:
        int v24 = (google::protobuf::internal *)v12;
        unsigned int v15 = v13 >> 3;
        if (v13 >> 3 != 3) {
          goto LABEL_11;
        }
LABEL_23:
        if (v13 != 24) {
          goto LABEL_13;
        }
        unsigned int v6 = (google::protobuf::internal *)(v12 + 1);
        a2 = (google::protobuf::internal *)*v12;
        if ((char)*v12 < 0)
        {
          int v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v12, (const char *)a2);
            int v24 = v6;
            *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2 != 0;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          unsigned int v6 = (google::protobuf::internal *)(v12 + 2);
        }
        int v24 = v6;
        *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2 != 0;
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    int v24 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::NoOverlap2DConstraintProto::_InternalSerialize(operations_research::sat::NoOverlap2DConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        unint64_t v8 = (int *)*((void *)this + 3);
        uint64_t v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v29 = v6 >> 14;
      v6 >>= 7;
    }
    while (v29);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      size_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      size_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *size_t v17 = v16;
        int v18 = (int *)*((void *)this + 6);
        int v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v30 = v16 >> 14;
      v16 >>= 7;
    }
    while (v30);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  if (*((unsigned char *)this + 60))
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v26 = *((unsigned char *)this + 60);
    }
    else
    {
      unsigned __int8 v26 = 1;
    }
    *a2 = 24;
    a2[1] = v26;
    a2 += 2;
  }
  uint64_t v27 = *((void *)this + 1);
  if ((v27 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::NoOverlap2DConstraintProto::ByteSizeLong(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
LABEL_9:
    int v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (!v4) {
    goto LABEL_9;
  }
LABEL_6:
  int v5 = v4;
  if ((v4 & 0x80000000) != 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  if (*((unsigned char *)this + 60)) {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4 + 2);
  }
  else {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::NoOverlap2DConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 16);
  }
  else
  {
    *((_DWORD *)this + 16) = v7;
    return (char *)v7;
  }
}

void operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(operations_research::sat::NoOverlap2DConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::NoOverlap2DConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::NoOverlap2DConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      unint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  if (*((unsigned char *)a2 + 60)) {
    *(unsigned char *)(v3 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 1;
  }
  return this;
}

void operations_research::sat::NoOverlap2DConstraintProto::CopyFrom(operations_research::sat::NoOverlap2DConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::NoOverlap2DConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::IsInitialized(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::GetMetadata(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return off_26AED01D8[20];
}

void operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto(operations_research::sat::CumulativeConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CumulativeConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::CumulativeConstraintProto::Clear(operations_research::sat::CumulativeConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 15) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CumulativeConstraintProto::_InternalParse(operations_research::sat::CumulativeConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v25 = a2;
  unint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 40);
  uint64_t v10 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_7:
      int v12 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v13 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      unsigned int v14 = v13 + (*(unsigned __int8 *)v12 << 7);
      unsigned int v13 = v14 - 128;
      if (*(char *)v12 < 0)
      {
        uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v14 - 128));
        unint64_t v25 = TagFallback;
        if (!TagFallback) {
          return 0;
        }
        int v12 = TagFallback;
        unsigned int v13 = a2;
        unsigned int v15 = a2 >> 3;
        if (a2 >> 3 == 3) {
          goto LABEL_27;
        }
LABEL_11:
        if (v15 == 2)
        {
          if (v13 == 18)
          {
            uint64_t v11 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v13 == 16)
          {
            int v20 = google::protobuf::internal::ReadVarint64(&v25, (const char **)a2);
            uint64_t v21 = *((unsigned int *)this + 4);
            if (v21 == *((_DWORD *)this + 5)) {
              google::protobuf::RepeatedField<int>::Reserve(v10, v21 + 1);
            }
            *(_DWORD *)(*((void *)this + 3) + 4 * v21) = v20;
            *((_DWORD *)this + 4) = v21 + 1;
            goto LABEL_45;
          }
          goto LABEL_16;
        }
        if (v15 != 1 || v13 != 8) {
          goto LABEL_16;
        }
        uint64_t v6 = (google::protobuf::internal *)((char *)v12 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v12;
        if ((a2 & 0x80) != 0)
        {
          int v19 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v19 << 7) - 128);
          if (v19 < 0)
          {
            uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v12, (const char *)a2);
            unint64_t v25 = v6;
            *((_DWORD *)this + 15) = a2;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          uint64_t v6 = (google::protobuf::internal *)((char *)v12 + 2);
          unint64_t v25 = (google::protobuf::internal *)((char *)v12 + 2);
          *((_DWORD *)this + 15) = a2;
          if ((unint64_t)v12 + 2 >= *(void *)a3) {
            break;
          }
        }
        else
        {
          unint64_t v25 = (google::protobuf::internal *)((char *)v12 + 1);
          *((_DWORD *)this + 15) = a2;
          if ((unint64_t)v6 >= *(void *)a3) {
            break;
          }
        }
      }
      else
      {
        int v12 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        unint64_t v25 = v12;
        unsigned int v15 = v13 >> 3;
        if (v13 >> 3 != 3) {
          goto LABEL_11;
        }
LABEL_27:
        if (v13 == 26)
        {
          uint64_t v11 = (google::protobuf::internal *)v9;
LABEL_5:
          uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v12, a3, a4);
          unint64_t v25 = v6;
          if (!v6) {
            return v6;
          }
          goto LABEL_6;
        }
        if (v13 == 24)
        {
          int v22 = google::protobuf::internal::ReadVarint64(&v25, (const char **)a2);
          uint64_t v23 = *((unsigned int *)this + 10);
          if (v23 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<int>::Reserve(v9, v23 + 1);
          }
          *(_DWORD *)(*((void *)this + 6) + 4 * v23) = v22;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v23 + 1;
LABEL_45:
          uint64_t v6 = v25;
          if (!v25) {
            return v6;
          }
          goto LABEL_6;
        }
LABEL_16:
        if (!v13 || (v13 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v13 - 1;
          return v12;
        }
        if (*v8)
        {
          size_t v17 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          size_t v17 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          int v12 = v25;
        }
        uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, (google::protobuf::UnknownFieldSet *)v17, v12, (const char *)a3, a5);
        unint64_t v25 = v6;
        if (!v6) {
          return v6;
        }
LABEL_6:
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    unint64_t v25 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CumulativeConstraintProto::_InternalSerialize(operations_research::sat::CumulativeConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 15);
  if (!v6)
  {
LABEL_9:
    int v7 = *((_DWORD *)this + 8);
    if (v7 < 1) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v6 = *((_DWORD *)this + 15);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      int v7 = *((_DWORD *)this + 8);
      if (v7 < 1) {
        goto LABEL_27;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        *a2 = 18;
        int v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80) {
          goto LABEL_12;
        }
      }
      else
      {
        *a2 = 18;
        int v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
        {
LABEL_12:
          a2 += 2;
          *int v9 = v7;
          uint64_t v10 = (int *)*((void *)this + 3);
          uint64_t v11 = &v10[*((int *)this + 4)];
          while (1)
          {
            if (*(void *)a3 <= (unint64_t)a2)
            {
              a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
              unint64_t v17 = *v10++;
              unint64_t v12 = v17;
              if (v17 > 0x7F)
              {
LABEL_17:
                *a2 = v12 | 0x80;
                unint64_t v14 = v12 >> 7;
                if (v12 >> 14)
                {
                  a2 += 2;
                  do
                  {
                    *(a2 - 1) = v14 | 0x80;
                    unint64_t v15 = v14 >> 7;
                    ++a2;
                    unint64_t v16 = v14 >> 14;
                    v14 >>= 7;
                  }
                  while (v16);
                  *(a2 - 1) = v15;
                }
                else
                {
                  a2[1] = v14;
                  a2 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              unint64_t v13 = *v10++;
              unint64_t v12 = v13;
              if (v13 > 0x7F) {
                goto LABEL_17;
              }
            }
            *a2++ = v12;
LABEL_14:
            if (v10 >= v11) {
              goto LABEL_27;
            }
          }
        }
      }
      do
      {
        *v9++ = v7 | 0x80;
        unsigned int v32 = v7 >> 14;
        int v7 = v7 >> 7;
      }
      while (v32);
      a2 = (char *)(v9 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v18 = v8 >> 7;
    ++a2;
    unint64_t v19 = v8 >> 14;
    v8 >>= 7;
  }
  while (v19);
  *(a2 - 1) = v18;
  int v7 = *((_DWORD *)this + 8);
  if (v7 >= 1) {
    goto LABEL_10;
  }
LABEL_27:
  unsigned int v20 = *((_DWORD *)this + 14);
  if ((int)v20 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      uint64_t v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80) {
        goto LABEL_30;
      }
    }
    else
    {
      *a2 = 26;
      uint64_t v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
      {
LABEL_30:
        a2 += 2;
        unsigned __int8 *v21 = v20;
        int v22 = (int *)*((void *)this + 6);
        uint64_t v23 = &v22[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v29 = *v22++;
            unint64_t v24 = v29;
            if (v29 > 0x7F)
            {
LABEL_35:
              *a2 = v24 | 0x80;
              unint64_t v26 = v24 >> 7;
              if (v24 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v26 | 0x80;
                  unint64_t v27 = v26 >> 7;
                  ++a2;
                  unint64_t v28 = v26 >> 14;
                  v26 >>= 7;
                }
                while (v28);
                *(a2 - 1) = v27;
              }
              else
              {
                a2[1] = v26;
                a2 += 2;
              }
              goto LABEL_32;
            }
          }
          else
          {
            unint64_t v25 = *v22++;
            unint64_t v24 = v25;
            if (v25 > 0x7F) {
              goto LABEL_35;
            }
          }
          *a2++ = v24;
LABEL_32:
          if (v22 >= v23) {
            goto LABEL_42;
          }
        }
      }
    }
    do
    {
      *v21++ = v20 | 0x80;
      unsigned int v33 = v20 >> 14;
      v20 >>= 7;
    }
    while (v33);
    a2 = (char *)(v21 - 1);
    goto LABEL_30;
  }
LABEL_42:
  uint64_t v30 = *((void *)this + 1);
  if ((v30 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::CumulativeConstraintProto::ByteSizeLong(operations_research::sat::CumulativeConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
LABEL_6:
    if ((v4 & 0x80000000) != 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    *((_DWORD *)this + 14) = v4;
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)(v5 + v3 + v4);
    int v7 = *((_DWORD *)this + 15);
    if (!v7) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (v4) {
    goto LABEL_6;
  }
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  unsigned int v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  int v7 = *((_DWORD *)this + 15);
  if (v7)
  {
LABEL_13:
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v8);
  }
LABEL_17:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CumulativeConstraintProto *)((char *)this + 8), v6, (_DWORD *)this + 16);
  }
  else
  {
    *((_DWORD *)this + 16) = v6;
    return (char *)v6;
  }
}

void operations_research::sat::CumulativeConstraintProto::MergeFrom(operations_research::sat::CumulativeConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CumulativeConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::CumulativeConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::CumulativeConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(this + 8);
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 15);
  if (v15) {
    *(_DWORD *)(v3 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15;
  }
  return this;
}

void operations_research::sat::CumulativeConstraintProto::CopyFrom(operations_research::sat::CumulativeConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 15) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::CumulativeConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::CumulativeConstraintProto::IsInitialized(operations_research::sat::CumulativeConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CumulativeConstraintProto::GetMetadata(operations_research::sat::CumulativeConstraintProto *this)
{
  return off_26AED01D8[22];
}

void operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto(operations_research::sat::ReservoirConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::ReservoirConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

void operations_research::sat::ReservoirConstraintProto::Clear(operations_research::sat::ReservoirConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::ReservoirConstraintProto::_InternalParse(operations_research::sat::ReservoirConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unsigned int v6 = a2;
  uint64_t v30 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 64);
  uint64_t v10 = (operations_research::sat::ReservoirConstraintProto *)((char *)this + 40);
  uint64_t v11 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      uint64_t v30 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    unsigned int v16 = v15 + (*(unsigned __int8 *)v14 << 7);
    unsigned int v15 = v16 - 128;
    if (*(char *)v14 < 0) {
      break;
    }
    uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
    uint64_t v30 = v14;
    unsigned int v17 = (v15 >> 3) - 1;
LABEL_11:
    switch(v17)
    {
      case 0u:
        if (v15 != 8) {
          goto LABEL_28;
        }
        unsigned int v6 = (google::protobuf::internal *)((char *)v14 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_16;
        }
        int v18 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
        if (v18 < 0)
        {
          unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          uint64_t v30 = v6;
          *((void *)this + 11) = a2;
          if (!v6) {
            return v6;
          }
        }
        else
        {
          unsigned int v6 = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_16:
          uint64_t v30 = v6;
          *((void *)this + 11) = a2;
        }
        continue;
      case 1u:
        if (v15 != 16) {
          goto LABEL_28;
        }
        unsigned int v6 = (google::protobuf::internal *)((char *)v14 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        int v19 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v19 << 7) - 128);
        if (v19 < 0)
        {
          unsigned int v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          uint64_t v30 = v6;
          *((void *)this + 12) = a2;
          if (!v6) {
            return v6;
          }
        }
        else
        {
          unsigned int v6 = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_21:
          uint64_t v30 = v6;
          *((void *)this + 12) = a2;
        }
        continue;
      case 2u:
        if (v15 == 26)
        {
          int v12 = (google::protobuf::internal *)v11;
          goto LABEL_4;
        }
        if (v15 != 24) {
          goto LABEL_28;
        }
        int v23 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
        uint64_t v24 = *((unsigned int *)this + 4);
        if (v24 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<int>::Reserve(v11, v24 + 1);
        }
        *(_DWORD *)(*((void *)this + 3) + 4 * v24) = v23;
        *((_DWORD *)this + 4) = v24 + 1;
        goto LABEL_54;
      case 3u:
        if (v15 == 34)
        {
          uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v10, (unsigned __int8 *)v14, a3, a4);
          goto LABEL_5;
        }
        if (v15 != 32) {
          goto LABEL_28;
        }
        uint64_t v25 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
        uint64_t v26 = *((unsigned int *)this + 10);
        if (v26 == *((_DWORD *)this + 11)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v10, v26 + 1);
        }
        *(void *)(*((void *)this + 6) + 8 * v26) = v25;
        *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v26 + 1;
        goto LABEL_54;
      case 4u:
        if (v15 == 42)
        {
          int v12 = (google::protobuf::internal *)v9;
LABEL_4:
          uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v12, (unsigned __int8 *)v14, a3, a4);
LABEL_5:
          unsigned int v6 = v13;
          uint64_t v30 = v13;
          if (!v13) {
            return v6;
          }
        }
        else
        {
          if (v15 != 40) {
            goto LABEL_28;
          }
          int v27 = google::protobuf::internal::ReadVarint64(&v30, (const char **)a2);
          uint64_t v28 = *((unsigned int *)this + 16);
          if (v28 == *((_DWORD *)this + 17)) {
            google::protobuf::RepeatedField<int>::Reserve(v9, v28 + 1);
          }
          *(_DWORD *)(*((void *)this + 9) + 4 * v28) = v27;
          *((_DWORD *)this + 16) = v28 + 1;
LABEL_54:
          unsigned int v6 = v30;
          if (!v30) {
            return v6;
          }
        }
        break;
      default:
        goto LABEL_28;
    }
  }
  uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
  uint64_t v30 = TagFallback;
  if (!TagFallback) {
    return 0;
  }
  uint64_t v14 = TagFallback;
  unsigned int v15 = a2;
  unsigned int v17 = (a2 >> 3) - 1;
  if (v17 <= 4) {
    goto LABEL_11;
  }
LABEL_28:
  if (v15) {
    BOOL v21 = (v15 & 7) == 4;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    if (*v8)
    {
      int v22 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else
    {
      int v22 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      uint64_t v14 = v30;
    }
    uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v22, v14, (const char *)a3, a5);
    goto LABEL_5;
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 - 1;
  return v14;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::ReservoirConstraintProto::_InternalSerialize(operations_research::sat::ReservoirConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unint64_t v6 = *((void *)this + 11);
  if (!v6)
  {
LABEL_9:
    unint64_t v7 = *((void *)this + 12);
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v6 = *((void *)this + 11);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      unint64_t v7 = *((void *)this + 12);
      if (!v7) {
        goto LABEL_21;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v10 = v8 >> 7;
    ++a2;
    unint64_t v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  unint64_t v7 = *((void *)this + 12);
  if (!v7)
  {
LABEL_21:
    int v9 = *((_DWORD *)this + 8);
    if (v9 >= 1) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_10:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v7 = *((void *)this + 12);
    *a2 = 16;
    if (v7 <= 0x7F)
    {
LABEL_12:
      a2[1] = v7;
      a2 += 2;
      int v9 = *((_DWORD *)this + 8);
      if (v9 >= 1) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
  else
  {
    *a2 = 16;
    if (v7 <= 0x7F) {
      goto LABEL_12;
    }
  }
  a2[1] = v7 | 0x80;
  unint64_t v12 = v7 >> 7;
  if (!(v7 >> 14))
  {
    a2[2] = v12;
    a2 += 3;
    goto LABEL_21;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v12 | 0x80;
    unint64_t v22 = v12 >> 7;
    ++a2;
    unint64_t v23 = v12 >> 14;
    v12 >>= 7;
  }
  while (v23);
  *(a2 - 1) = v22;
  int v9 = *((_DWORD *)this + 8);
  if (v9 >= 1)
  {
LABEL_22:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      uint64_t v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80) {
        goto LABEL_24;
      }
    }
    else
    {
      *a2 = 26;
      uint64_t v13 = (unsigned __int8 *)(a2 + 1);
      if (v9 < 0x80)
      {
LABEL_24:
        a2 += 2;
        *uint64_t v13 = v9;
        uint64_t v14 = (int *)*((void *)this + 3);
        unsigned int v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v21 = *v14++;
            unint64_t v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_29:
              *a2 = v16 | 0x80;
              unint64_t v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v18 | 0x80;
                  unint64_t v19 = v18 >> 7;
                  ++a2;
                  unint64_t v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *(a2 - 1) = v19;
              }
              else
              {
                a2[1] = v18;
                a2 += 2;
              }
              goto LABEL_26;
            }
          }
          else
          {
            unint64_t v17 = *v14++;
            unint64_t v16 = v17;
            if (v17 > 0x7F) {
              goto LABEL_29;
            }
          }
          *a2++ = v16;
LABEL_26:
          if (v14 >= v15) {
            goto LABEL_39;
          }
        }
      }
    }
    do
    {
      *v13++ = v9 | 0x80;
      unsigned int v46 = v9 >> 14;
      int v9 = v9 >> 7;
    }
    while (v46);
    a2 = (char *)(v13 - 1);
    goto LABEL_24;
  }
LABEL_39:
  unsigned int v24 = *((_DWORD *)this + 14);
  if ((int)v24 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      uint64_t v25 = (unsigned __int8 *)(a2 + 1);
      if (v24 < 0x80) {
        goto LABEL_42;
      }
    }
    else
    {
      *a2 = 34;
      uint64_t v25 = (unsigned __int8 *)(a2 + 1);
      if (v24 < 0x80)
      {
LABEL_42:
        a2 += 2;
        *uint64_t v25 = v24;
        uint64_t v26 = (unint64_t *)*((void *)this + 6);
        int v27 = &v26[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v33 = *v26++;
            unint64_t v28 = v33;
            if (v33 > 0x7F)
            {
LABEL_47:
              *a2 = v28 | 0x80;
              unint64_t v30 = v28 >> 7;
              if (v28 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v30 | 0x80;
                  unint64_t v31 = v30 >> 7;
                  ++a2;
                  unint64_t v32 = v30 >> 14;
                  v30 >>= 7;
                }
                while (v32);
                *(a2 - 1) = v31;
              }
              else
              {
                a2[1] = v30;
                a2 += 2;
              }
              goto LABEL_44;
            }
          }
          else
          {
            unint64_t v29 = *v26++;
            unint64_t v28 = v29;
            if (v29 > 0x7F) {
              goto LABEL_47;
            }
          }
          *a2++ = v28;
LABEL_44:
          if (v26 >= v27) {
            goto LABEL_54;
          }
        }
      }
    }
    do
    {
      *v25++ = v24 | 0x80;
      unsigned int v47 = v24 >> 14;
      v24 >>= 7;
    }
    while (v47);
    a2 = (char *)(v25 - 1);
    goto LABEL_42;
  }
LABEL_54:
  unsigned int v34 = *((_DWORD *)this + 20);
  if ((int)v34 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      unint64_t v35 = (unsigned __int8 *)(a2 + 1);
      if (v34 < 0x80) {
        goto LABEL_57;
      }
    }
    else
    {
      *a2 = 42;
      unint64_t v35 = (unsigned __int8 *)(a2 + 1);
      if (v34 < 0x80)
      {
LABEL_57:
        a2 += 2;
        unsigned __int8 *v35 = v34;
        uint64_t v36 = (int *)*((void *)this + 9);
        unsigned int v37 = &v36[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v43 = *v36++;
            unint64_t v38 = v43;
            if (v43 > 0x7F)
            {
LABEL_62:
              *a2 = v38 | 0x80;
              unint64_t v40 = v38 >> 7;
              if (v38 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v40 | 0x80;
                  unint64_t v41 = v40 >> 7;
                  ++a2;
                  unint64_t v42 = v40 >> 14;
                  v40 >>= 7;
                }
                while (v42);
                *(a2 - 1) = v41;
              }
              else
              {
                a2[1] = v40;
                a2 += 2;
              }
              goto LABEL_59;
            }
          }
          else
          {
            unint64_t v39 = *v36++;
            unint64_t v38 = v39;
            if (v39 > 0x7F) {
              goto LABEL_62;
            }
          }
          *a2++ = v38;
LABEL_59:
          if (v36 >= v37) {
            goto LABEL_69;
          }
        }
      }
    }
    do
    {
      *v35++ = v34 | 0x80;
      unsigned int v48 = v34 >> 14;
      v34 >>= 7;
    }
    while (v48);
    a2 = (char *)(v35 - 1);
    goto LABEL_57;
  }
LABEL_69:
  uint64_t v44 = *((void *)this + 1);
  if ((v44 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::ReservoirConstraintProto::ByteSizeLong(operations_research::sat::ReservoirConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
LABEL_6:
    if ((v4 & 0x80000000) != 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    *((_DWORD *)this + 14) = v4;
    uint64_t v6 = v5 + v3 + v4;
    uint64_t v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v4) {
    goto LABEL_6;
  }
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  uint64_t v6 = v3 + v4;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (!v7)
  {
LABEL_10:
    int v8 = 0;
    goto LABEL_17;
  }
LABEL_13:
  int v8 = v7;
  if ((v7 & 0x80000000) != 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v6 += v9;
LABEL_17:
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v8;
  unint64_t v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  uint64_t v11 = *((void *)this + 11);
  uint64_t v12 = *((void *)this + 12);
  BOOL v13 = v11 == 0;
  unint64_t v14 = v6 + v7 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (!v13) {
    unint64_t v10 = (const google::protobuf::UnknownFieldSet *)(v14 + 1);
  }
  unsigned int v15 = (char *)v10 + ((9 * (__clz(v12 | 1) ^ 0x3F) + 73) >> 6);
  if (v12) {
    unint64_t v16 = (const google::protobuf::UnknownFieldSet *)(v15 + 1);
  }
  else {
    unint64_t v16 = v10;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ReservoirConstraintProto *)((char *)this + 8), v16, (_DWORD *)this + 26);
  }
  else
  {
    *((_DWORD *)this + 26) = v16;
    return (char *)v16;
  }
}

void operations_research::sat::ReservoirConstraintProto::MergeFrom(operations_research::sat::ReservoirConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::ReservoirConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::ReservoirConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::ReservoirConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(v3 + 64);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 64), v16 + v15);
    uint64_t v17 = *(void *)(v3 + 72);
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
    this = (uint64_t)memcpy((void *)(v17 + 4 * v16), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
  uint64_t v18 = *((void *)a2 + 11);
  if (v18) {
    *(void *)(v3 + 88) = v18;
  }
  uint64_t v19 = *((void *)a2 + 12);
  if (v19) {
    *(void *)(v3 + 96) = v19;
  }
  return this;
}

void operations_research::sat::ReservoirConstraintProto::CopyFrom(operations_research::sat::ReservoirConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::ReservoirConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::ReservoirConstraintProto::IsInitialized(operations_research::sat::ReservoirConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::ReservoirConstraintProto::GetMetadata(operations_research::sat::ReservoirConstraintProto *this)
{
  return off_26AED01D8[24];
}

void operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto(operations_research::sat::CircuitConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CircuitConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 84) = a2;
  return this;
}

void operations_research::sat::CircuitConstraintProto::Clear(operations_research::sat::CircuitConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CircuitConstraintProto::_InternalParse(operations_research::sat::CircuitConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  uint64_t v26 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 64);
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  uint64_t v11 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      uint64_t v26 = v6;
      if (a2) {
        return v6;
      }
    }
    int v15 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v16 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    unsigned int v17 = v16 + (*(unsigned __int8 *)v15 << 7);
    unsigned int v16 = v17 - 128;
    if ((*(char *)v15 & 0x80000000) == 0)
    {
      int v15 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_14:
      uint64_t v26 = v15;
      unsigned int v18 = v16 >> 3;
      if (v16 >> 3 == 5) {
        goto LABEL_27;
      }
      goto LABEL_15;
    }
    uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v17 - 128));
    uint64_t v26 = TagFallback;
    if (!TagFallback) {
      return 0;
    }
    int v15 = TagFallback;
    unsigned int v16 = a2;
    unsigned int v18 = a2 >> 3;
    if (a2 >> 3 == 5)
    {
LABEL_27:
      if (v16 == 42)
      {
        int v12 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v16 != 40) {
        goto LABEL_17;
      }
      int v23 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
      uint64_t v24 = *((unsigned int *)this + 16);
      if (v24 == *((_DWORD *)this + 17)) {
        google::protobuf::RepeatedField<int>::Reserve(v9, v24 + 1);
      }
      *(_DWORD *)(*((void *)this + 9) + 4 * v24) = v23;
      *((_DWORD *)this + 16) = v24 + 1;
      goto LABEL_41;
    }
LABEL_15:
    if (v18 == 4)
    {
      if (v16 == 34)
      {
        int v12 = (google::protobuf::internal *)v10;
        goto LABEL_4;
      }
      if (v16 != 32) {
        goto LABEL_17;
      }
      int v21 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
      uint64_t v22 = *((unsigned int *)this + 10);
      if (v22 == *((_DWORD *)this + 11)) {
        google::protobuf::RepeatedField<int>::Reserve(v10, v22 + 1);
      }
      *(_DWORD *)(*((void *)this + 6) + 4 * v22) = v21;
      *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v22 + 1;
LABEL_41:
      uint64_t v6 = v26;
      if (!v26) {
        return v6;
      }
    }
    else
    {
      if (v18 != 3) {
        goto LABEL_17;
      }
      if (v16 == 26)
      {
        int v12 = (google::protobuf::internal *)v11;
LABEL_4:
        uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v12, (unsigned __int8 *)v15, a3, a4);
        uint64_t v26 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v16 == 24)
        {
          int v13 = google::protobuf::internal::ReadVarint64(&v26, (const char **)a2);
          uint64_t v14 = *((unsigned int *)this + 4);
          if (v14 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve(v11, v14 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v14) = v13;
          *((_DWORD *)this + 4) = v14 + 1;
          goto LABEL_41;
        }
LABEL_17:
        if (!v16 || (v16 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v16 - 1;
          return v15;
        }
        if (*v8)
        {
          uint64_t v19 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          int v15 = v26;
        }
        uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v16, (google::protobuf::UnknownFieldSet *)v19, v15, (const char *)a3, a5);
        uint64_t v26 = v6;
        if (!v6) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CircuitConstraintProto::_InternalSerialize(operations_research::sat::CircuitConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 26;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        int v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v38 = v6 >> 14;
      v6 >>= 7;
    }
    while (v38);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 34;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *unsigned int v17 = v16;
        unsigned int v18 = (int *)*((void *)this + 6);
        uint64_t v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v39 = v16 >> 14;
      v16 >>= 7;
    }
    while (v39);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  unsigned int v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      int v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80) {
        goto LABEL_34;
      }
    }
    else
    {
      *a2 = 42;
      int v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *int v27 = v26;
        unint64_t v28 = (int *)*((void *)this + 9);
        unint64_t v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v35 = *v28++;
            unint64_t v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              unint64_t v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  unint64_t v33 = v32 >> 7;
                  ++a2;
                  unint64_t v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            unint64_t v31 = *v28++;
            unint64_t v30 = v31;
            if (v31 > 0x7F) {
              goto LABEL_39;
            }
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29) {
            goto LABEL_46;
          }
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      unsigned int v40 = v26 >> 14;
      v26 >>= 7;
    }
    while (v40);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  uint64_t v36 = *((void *)this + 1);
  if ((v36 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::CircuitConstraintProto::ByteSizeLong(operations_research::sat::CircuitConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (!v4) {
      goto LABEL_9;
    }
LABEL_6:
    if ((v4 & 0x80000000) != 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    *((_DWORD *)this + 14) = v4;
    uint64_t v6 = v5 + v3 + v4;
    uint64_t v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_13:
    int v8 = v7;
    if ((v7 & 0x80000000) != 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v6 += v9;
    goto LABEL_17;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  if (v4) {
    goto LABEL_6;
  }
LABEL_9:
  *((_DWORD *)this + 14) = 0;
  uint64_t v6 = v3 + v4;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (v7) {
    goto LABEL_13;
  }
LABEL_10:
  int v8 = 0;
LABEL_17:
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v8;
  unint64_t v10 = (const google::protobuf::UnknownFieldSet *)(v6 + v7);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CircuitConstraintProto *)((char *)this + 8), v10, (_DWORD *)this + 21);
  }
  else
  {
    *((_DWORD *)this + 21) = v10;
    return (char *)(v6 + v7);
  }
}

void operations_research::sat::CircuitConstraintProto::MergeFrom(operations_research::sat::CircuitConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CircuitConstraintProto::MergeFrom((char *)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

char *operations_research::sat::CircuitConstraintProto::MergeFrom(char *this, const operations_research::sat::CircuitConstraintProto *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = (char *)google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (char *)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (char *)memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v17 = *(int *)(v3 + 64);
    uint64_t v16 = v3 + 64;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v16, v17 + v15);
    uint64_t v18 = *(void *)(v16 + 8);
    *(_DWORD *)v16 += *((_DWORD *)a2 + 16);
    uint64_t v19 = (void *)(v18 + 4 * v17);
    unint64_t v20 = (const void *)*((void *)a2 + 9);
    size_t v21 = 4 * *((int *)a2 + 16);
    return (char *)memcpy(v19, v20, v21);
  }
  return this;
}

void operations_research::sat::CircuitConstraintProto::CopyFrom(operations_research::sat::CircuitConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::CircuitConstraintProto::MergeFrom((char *)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::CircuitConstraintProto::IsInitialized(operations_research::sat::CircuitConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CircuitConstraintProto::GetMetadata(operations_research::sat::CircuitConstraintProto *this)
{
  return off_26AED01D8[26];
}

void operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto(operations_research::sat::RoutesConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::RoutesConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::RoutesConstraintProto::Clear(operations_research::sat::RoutesConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 14) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::RoutesConstraintProto::_InternalParse(operations_research::sat::RoutesConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v31 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 88);
  uint64_t v10 = (unsigned int *)((char *)this + 64);
  uint64_t v11 = (unsigned int *)((char *)this + 40);
  int v12 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_7:
      uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v15 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      unsigned int v16 = v15 + (*(unsigned __int8 *)v14 << 7);
      unsigned int v15 = v16 - 128;
      if ((*(char *)v14 & 0x80000000) == 0) {
        break;
      }
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      unint64_t v31 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v14 = TagFallback;
      unsigned int v15 = a2;
      unsigned int v17 = (a2 >> 3) - 1;
      if (v17 > 4)
      {
LABEL_24:
        if (v15) {
          BOOL v19 = (v15 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 - 1;
          return v14;
        }
        if (*v8)
        {
          unint64_t v20 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          unint64_t v20 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          uint64_t v14 = v31;
        }
        uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v20, v14, (const char *)a3, a5);
        unint64_t v31 = v6;
        if (!v6) {
          return v6;
        }
        goto LABEL_6;
      }
LABEL_11:
      switch(v17)
      {
        case 0u:
          if (v15 == 10)
          {
            uint64_t v13 = (google::protobuf::internal *)v12;
            goto LABEL_5;
          }
          if (v15 != 8) {
            goto LABEL_24;
          }
          int v22 = google::protobuf::internal::ReadVarint64(&v31, (const char **)a2);
          uint64_t v23 = *((unsigned int *)this + 4);
          if (v23 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve(v12, v23 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v23) = v22;
          *((_DWORD *)this + 4) = v23 + 1;
          break;
        case 1u:
          if (v15 == 18)
          {
            uint64_t v13 = (google::protobuf::internal *)v11;
            goto LABEL_5;
          }
          if (v15 != 16) {
            goto LABEL_24;
          }
          int v24 = google::protobuf::internal::ReadVarint64(&v31, (const char **)a2);
          uint64_t v25 = *((unsigned int *)this + 10);
          if (v25 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<int>::Reserve(v11, v25 + 1);
          }
          *(_DWORD *)(*((void *)this + 6) + 4 * v25) = v24;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v25 + 1;
          break;
        case 2u:
          if (v15 == 26)
          {
            uint64_t v13 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v15 != 24) {
            goto LABEL_24;
          }
          int v26 = google::protobuf::internal::ReadVarint64(&v31, (const char **)a2);
          uint64_t v27 = *((unsigned int *)this + 16);
          if (v27 == *((_DWORD *)this + 17)) {
            google::protobuf::RepeatedField<int>::Reserve(v10, v27 + 1);
          }
          *(_DWORD *)(*((void *)this + 9) + 4 * v27) = v26;
          *((_DWORD *)this + 16) = v27 + 1;
          break;
        case 3u:
          if (v15 == 34)
          {
            uint64_t v13 = (google::protobuf::internal *)v9;
LABEL_5:
            uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v13, (unsigned __int8 *)v14, a3, a4);
            unint64_t v31 = v6;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          if (v15 != 32) {
            goto LABEL_24;
          }
          int v28 = google::protobuf::internal::ReadVarint64(&v31, (const char **)a2);
          uint64_t v29 = *((unsigned int *)this + 22);
          if (v29 == *((_DWORD *)this + 23)) {
            google::protobuf::RepeatedField<int>::Reserve(v9, v29 + 1);
          }
          *(_DWORD *)(*((void *)this + 12) + 4 * v29) = v28;
          *((_DWORD *)this + 22) = v29 + 1;
          break;
        case 4u:
          if (v15 != 40) {
            goto LABEL_24;
          }
          uint64_t v6 = (google::protobuf::internal *)((char *)v14 + 1);
          a2 = (google::protobuf::internal *)*(unsigned __int8 *)v14;
          if ((*(char *)v14 & 0x80000000) == 0)
          {
            unint64_t v31 = (google::protobuf::internal *)((char *)v14 + 1);
            *((void *)this + 14) = a2;
            if ((unint64_t)v6 >= *(void *)a3) {
              goto LABEL_34;
            }
            continue;
          }
          int v21 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v21 << 7) - 128);
          if ((v21 & 0x80000000) == 0)
          {
            uint64_t v6 = (google::protobuf::internal *)((char *)v14 + 2);
            unint64_t v31 = (google::protobuf::internal *)((char *)v14 + 2);
            *((void *)this + 14) = a2;
            if ((unint64_t)v14 + 2 >= *(void *)a3) {
              goto LABEL_34;
            }
            continue;
          }
          uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v14, (const char *)a2);
          unint64_t v31 = v6;
          *((void *)this + 14) = a2;
          if (!v6) {
            return v6;
          }
          goto LABEL_6;
        default:
          goto LABEL_24;
      }
      uint64_t v6 = v31;
      if (!v31) {
        return v6;
      }
LABEL_6:
      if ((unint64_t)v6 >= *(void *)a3) {
        goto LABEL_34;
      }
    }
    uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
    unint64_t v31 = v14;
    unsigned int v17 = (v15 >> 3) - 1;
    goto LABEL_11;
  }
LABEL_34:
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    unint64_t v31 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::RoutesConstraintProto::_InternalSerialize(operations_research::sat::RoutesConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        int v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v47 = v6 >> 14;
      v6 >>= 7;
    }
    while (v47);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *unsigned int v17 = v16;
        uint64_t v18 = (int *)*((void *)this + 6);
        BOOL v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v48 = v16 >> 14;
      v16 >>= 7;
    }
    while (v48);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  unsigned int v26 = *((_DWORD *)this + 20);
  if ((int)v26 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 26;
      uint64_t v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80) {
        goto LABEL_34;
      }
    }
    else
    {
      *a2 = 26;
      uint64_t v27 = (unsigned __int8 *)(a2 + 1);
      if (v26 < 0x80)
      {
LABEL_34:
        a2 += 2;
        *uint64_t v27 = v26;
        int v28 = (int *)*((void *)this + 9);
        uint64_t v29 = &v28[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v35 = *v28++;
            unint64_t v30 = v35;
            if (v35 > 0x7F)
            {
LABEL_39:
              *a2 = v30 | 0x80;
              unint64_t v32 = v30 >> 7;
              if (v30 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v32 | 0x80;
                  unint64_t v33 = v32 >> 7;
                  ++a2;
                  unint64_t v34 = v32 >> 14;
                  v32 >>= 7;
                }
                while (v34);
                *(a2 - 1) = v33;
              }
              else
              {
                a2[1] = v32;
                a2 += 2;
              }
              goto LABEL_36;
            }
          }
          else
          {
            unint64_t v31 = *v28++;
            unint64_t v30 = v31;
            if (v31 > 0x7F) {
              goto LABEL_39;
            }
          }
          *a2++ = v30;
LABEL_36:
          if (v28 >= v29) {
            goto LABEL_46;
          }
        }
      }
    }
    do
    {
      *v27++ = v26 | 0x80;
      unsigned int v49 = v26 >> 14;
      v26 >>= 7;
    }
    while (v49);
    a2 = (char *)(v27 - 1);
    goto LABEL_34;
  }
LABEL_46:
  unsigned int v36 = *((_DWORD *)this + 26);
  if ((int)v36 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      unsigned int v37 = (unsigned __int8 *)(a2 + 1);
      if (v36 < 0x80) {
        goto LABEL_49;
      }
    }
    else
    {
      *a2 = 34;
      unsigned int v37 = (unsigned __int8 *)(a2 + 1);
      if (v36 < 0x80)
      {
LABEL_49:
        a2 += 2;
        *unsigned int v37 = v36;
        unsigned int v38 = (int *)*((void *)this + 12);
        unsigned int v39 = &v38[*((int *)this + 22)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v45 = *v38++;
            unint64_t v40 = v45;
            if (v45 > 0x7F)
            {
LABEL_54:
              *a2 = v40 | 0x80;
              unint64_t v42 = v40 >> 7;
              if (v40 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v42 | 0x80;
                  unint64_t v43 = v42 >> 7;
                  ++a2;
                  unint64_t v44 = v42 >> 14;
                  v42 >>= 7;
                }
                while (v44);
                *(a2 - 1) = v43;
              }
              else
              {
                a2[1] = v42;
                a2 += 2;
              }
              goto LABEL_51;
            }
          }
          else
          {
            unint64_t v41 = *v38++;
            unint64_t v40 = v41;
            if (v41 > 0x7F) {
              goto LABEL_54;
            }
          }
          *a2++ = v40;
LABEL_51:
          if (v38 >= v39) {
            goto LABEL_61;
          }
        }
      }
    }
    do
    {
      *v37++ = v36 | 0x80;
      unsigned int v50 = v36 >> 14;
      v36 >>= 7;
    }
    while (v50);
    a2 = (char *)(v37 - 1);
    goto LABEL_49;
  }
LABEL_61:
  unint64_t v46 = *((void *)this + 14);
  if (v46)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unint64_t v46 = *((void *)this + 14);
      *a2 = 40;
      if (v46 <= 0x7F) {
        goto LABEL_64;
      }
    }
    else
    {
      *a2 = 40;
      if (v46 <= 0x7F)
      {
LABEL_64:
        a2[1] = v46;
        a2 += 2;
        goto LABEL_83;
      }
    }
    a2[1] = v46 | 0x80;
    unint64_t v51 = v46 >> 7;
    if (v46 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v51 | 0x80;
        unint64_t v52 = v51 >> 7;
        ++a2;
        unint64_t v53 = v51 >> 14;
        v51 >>= 7;
      }
      while (v53);
      *(a2 - 1) = v52;
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
    }
  }
LABEL_83:
  uint64_t v54 = *((void *)this + 1);
  if ((v54 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v54 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::RoutesConstraintProto::ByteSizeLong(operations_research::sat::RoutesConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0) {
    uint64_t v3 = v4;
  }
  if (v2) {
    int v5 = v2;
  }
  else {
    int v5 = 0;
  }
  if (!v2) {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  uint64_t v6 = v3 + v2;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
  uint64_t v8 = 11;
  uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v7 >= 0) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = v8 + v6;
  if (v7) {
    int v11 = v7;
  }
  else {
    int v11 = 0;
  }
  if (!v7) {
    uint64_t v10 = v6;
  }
  *((_DWORD *)this + 14) = v11;
  uint64_t v12 = v10 + v7;
  uint64_t v13 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 16);
  if (v13)
  {
    int v14 = v13;
    if ((v13 & 0x80000000) != 0) {
      uint64_t v15 = 11;
    }
    else {
      uint64_t v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v12 += v15;
  }
  else
  {
    int v14 = 0;
  }
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14;
  uint64_t v16 = v12 + v13;
  uint64_t v17 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 22);
  uint64_t v18 = 11;
  uint64_t v19 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v17 >= 0) {
    uint64_t v18 = v19;
  }
  uint64_t v20 = v18 + v16;
  if (v17) {
    int v21 = v17;
  }
  else {
    int v21 = 0;
  }
  if (!v17) {
    uint64_t v20 = v16;
  }
  *((_DWORD *)this + 26) = v21;
  unint64_t v22 = (const google::protobuf::UnknownFieldSet *)(v20 + v17);
  uint64_t v23 = *((void *)this + 14);
  unint64_t v24 = (char *)v22 + ((9 * (__clz(v23 | 1) ^ 0x3F) + 73) >> 6);
  if (v23) {
    unint64_t v25 = (const google::protobuf::UnknownFieldSet *)(v24 + 1);
  }
  else {
    unint64_t v25 = v22;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::RoutesConstraintProto *)((char *)this + 8), v25, (_DWORD *)this + 30);
  }
  else
  {
    *((_DWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v25;
    return (char *)v25;
  }
}

void operations_research::sat::RoutesConstraintProto::MergeFrom(operations_research::sat::RoutesConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::RoutesConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::RoutesConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::RoutesConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 4 * v13), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(v3 + 64);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 64), v16 + v15);
    uint64_t v17 = *(void *)(v3 + 72);
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
    this = (uint64_t)memcpy((void *)(v17 + 4 * v16), *((const void **)a2 + 9), 4 * *((int *)a2 + 16));
  }
  int v18 = *((_DWORD *)a2 + 22);
  if (v18)
  {
    uint64_t v19 = *(int *)(v3 + 88);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 88), v19 + v18);
    uint64_t v20 = *(void *)(v3 + 96);
    *(_DWORD *)(v3 + 88) += *((_DWORD *)a2 + 22);
    this = (uint64_t)memcpy((void *)(v20 + 4 * v19), *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  uint64_t v21 = *((void *)a2 + 14);
  if (v21) {
    *(void *)(v3 + 112) = v21;
  }
  return this;
}

void operations_research::sat::RoutesConstraintProto::CopyFrom(operations_research::sat::RoutesConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 22) = 0;
    *((void *)this + 14) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::RoutesConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::RoutesConstraintProto::IsInitialized(operations_research::sat::RoutesConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::RoutesConstraintProto::GetMetadata(operations_research::sat::RoutesConstraintProto *this)
{
  return off_26AED01D8[28];
}

void operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::CircuitCoveringConstraintProto::Clear(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CircuitCoveringConstraintProto::_InternalParse(operations_research::sat::CircuitCoveringConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  uint64_t v23 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 40);
  uint64_t v10 = (operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      uint64_t v23 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v13 = (unsigned __int8 *)v6 + 1;
    unsigned int v14 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    unsigned int v15 = v14 + (*v13 << 7);
    unsigned int v14 = v15 - 128;
    if ((char)*v13 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
      uint64_t v23 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v13 = (unsigned __int8 *)TagFallback;
      unsigned int v14 = a2;
      unsigned int v16 = a2 >> 3;
      if (a2 >> 3 != 2) {
        goto LABEL_10;
      }
LABEL_15:
      if (v14 == 18)
      {
        int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, v13, a3, a4);
        goto LABEL_4;
      }
      if (v14 == 16)
      {
        uint64_t v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
        uint64_t v21 = *((unsigned int *)this + 10);
        if (v21 == *((_DWORD *)this + 11)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v21 + 1);
        }
        *(void *)(*((void *)this + 6) + 8 * v21) = v20;
        *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v21 + 1;
        goto LABEL_28;
      }
LABEL_30:
      if (!v14 || (v14 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
        return (google::protobuf::internal *)v13;
      }
      if (*v8)
      {
        uint64_t v11 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        uint64_t v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        uint64_t v13 = (unsigned __int8 *)v23;
      }
      int v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v11, (google::protobuf::UnknownFieldSet *)v13, (const char *)a3, a5);
LABEL_4:
      uint64_t v6 = v12;
      uint64_t v23 = v12;
      if (!v12) {
        return v6;
      }
    }
    else
    {
      uint64_t v13 = (unsigned __int8 *)v6 + 2;
LABEL_9:
      uint64_t v23 = (google::protobuf::internal *)v13;
      unsigned int v16 = v14 >> 3;
      if (v14 >> 3 == 2) {
        goto LABEL_15;
      }
LABEL_10:
      if (v16 != 1) {
        goto LABEL_30;
      }
      if (v14 == 10)
      {
        int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, v13, a3, a4);
        goto LABEL_4;
      }
      if (v14 != 8) {
        goto LABEL_30;
      }
      int v18 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      uint64_t v19 = *((unsigned int *)this + 4);
      if (v19 == *((_DWORD *)this + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v19 + 1);
      }
      *(_DWORD *)(*((void *)this + 3) + 4 * v19) = v18;
      *((_DWORD *)this + 4) = v19 + 1;
LABEL_28:
      uint64_t v6 = v23;
      if (!v23) {
        return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CircuitCoveringConstraintProto::_InternalSerialize(operations_research::sat::CircuitCoveringConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *uint64_t v17 = v16;
        int v18 = (unint64_t *)*((void *)this + 6);
        uint64_t v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::CircuitCoveringConstraintProto::ByteSizeLong(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
      uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
      if (!v4) {
        goto LABEL_9;
      }
LABEL_6:
      int v5 = v4;
      if ((v4 & 0x80000000) != 0) {
        uint64_t v6 = 11;
      }
      else {
        uint64_t v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v3 += v6;
      goto LABEL_12;
    }
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
LABEL_9:
  int v5 = 0;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CircuitCoveringConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v7;
    return (char *)(v3 + v4);
  }
}

void operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(operations_research::sat::CircuitCoveringConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom((char *)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

char *operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(char *this, const operations_research::sat::CircuitCoveringConstraintProto *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = (char *)google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (char *)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v14 = *(int *)(v3 + 40);
    uint64_t v13 = v3 + 40;
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v13, v14 + v12);
    uint64_t v15 = *(void *)(v13 + 8);
    *(_DWORD *)v13 += *((_DWORD *)a2 + 10);
    unsigned int v16 = (void *)(v15 + 8 * v14);
    uint64_t v17 = (const void *)*((void *)a2 + 6);
    size_t v18 = 8 * *((int *)a2 + 10);
    return (char *)memcpy(v16, v17, v18);
  }
  return this;
}

void operations_research::sat::CircuitCoveringConstraintProto::CopyFrom(operations_research::sat::CircuitCoveringConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom((char *)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::IsInitialized(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::GetMetadata(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return off_26AED01D8[30];
}

void operations_research::sat::TableConstraintProto::~TableConstraintProto(operations_research::sat::TableConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::TableConstraintProto::~TableConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::TableConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

void operations_research::sat::TableConstraintProto::Clear(operations_research::sat::TableConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::TableConstraintProto::_InternalParse(operations_research::sat::TableConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v24 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (operations_research::sat::TableConstraintProto *)((char *)this + 40);
  uint64_t v10 = (operations_research::sat::TableConstraintProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_7:
      uint64_t v13 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v14 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      unsigned int v15 = v14 + (*(unsigned __int8 *)v13 << 7);
      unsigned int v14 = v15 - 128;
      if (*(char *)v13 < 0)
      {
        uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
        unint64_t v24 = TagFallback;
        if (!TagFallback) {
          return 0;
        }
        uint64_t v13 = TagFallback;
        unsigned int v14 = a2;
        unsigned int v16 = a2 >> 3;
        if (a2 >> 3 != 3) {
          goto LABEL_11;
        }
LABEL_19:
        if (v14 != 24) {
          goto LABEL_39;
        }
        uint64_t v6 = (google::protobuf::internal *)((char *)v13 + 1);
        a2 = (google::protobuf::internal *)*(unsigned __int8 *)v13;
        if (*(char *)v13 < 0)
        {
          int v18 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v18 << 7) - 128);
          if (v18 < 0)
          {
            uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v13, (const char *)a2);
            unint64_t v24 = v6;
            *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2 != 0;
            if (!v6) {
              return v6;
            }
            goto LABEL_6;
          }
          uint64_t v6 = (google::protobuf::internal *)((char *)v13 + 2);
        }
        unint64_t v24 = v6;
        *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2 != 0;
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
      else
      {
        uint64_t v13 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_10:
        unint64_t v24 = v13;
        unsigned int v16 = v14 >> 3;
        if (v14 >> 3 == 3) {
          goto LABEL_19;
        }
LABEL_11:
        if (v16 == 2)
        {
          if (v14 == 18)
          {
            int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, (unsigned __int8 *)v13, a3, a4);
LABEL_5:
            uint64_t v6 = v12;
            unint64_t v24 = v12;
            if (!v12) {
              return v6;
            }
            goto LABEL_6;
          }
          if (v14 != 16)
          {
LABEL_39:
            if (!v14 || (v14 & 7) == 4)
            {
              *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
              return v13;
            }
            if (*v8)
            {
              uint64_t v11 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
              uint64_t v13 = v24;
            }
            int v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v11, v13, (const char *)a3, a5);
            goto LABEL_5;
          }
          uint64_t v21 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          uint64_t v22 = *((unsigned int *)this + 10);
          if (v22 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v22 + 1);
          }
          *(void *)(*((void *)this + 6) + 8 * v22) = v21;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v22 + 1;
        }
        else
        {
          if (v16 != 1) {
            goto LABEL_39;
          }
          if (v14 == 10)
          {
            int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v13, a3, a4);
            goto LABEL_5;
          }
          if (v14 != 8) {
            goto LABEL_39;
          }
          int v19 = google::protobuf::internal::ReadVarint64(&v24, (const char **)a2);
          uint64_t v20 = *((unsigned int *)this + 4);
          if (v20 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v20 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v19;
          *((_DWORD *)this + 4) = v20 + 1;
        }
        uint64_t v6 = v24;
        if (!v24) {
          return v6;
        }
LABEL_6:
        if ((unint64_t)v6 >= *(void *)a3) {
          break;
        }
      }
    }
  }
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    unint64_t v24 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::TableConstraintProto::_InternalSerialize(operations_research::sat::TableConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v29 = v6 >> 14;
      v6 >>= 7;
    }
    while (v29);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *uint64_t v17 = v16;
        int v18 = (unint64_t *)*((void *)this + 6);
        int v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v30 = v16 >> 14;
      v16 >>= 7;
    }
    while (v30);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  if (*((unsigned char *)this + 60))
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v26 = *((unsigned char *)this + 60);
    }
    else
    {
      unsigned __int8 v26 = 1;
    }
    *a2 = 24;
    a2[1] = v26;
    a2 += 2;
  }
  uint64_t v27 = *((void *)this + 1);
  if ((v27 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::TableConstraintProto::ByteSizeLong(operations_research::sat::TableConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (!v2)
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
LABEL_9:
    int v5 = 0;
    goto LABEL_12;
  }
  if ((v2 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
  uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (!v4) {
    goto LABEL_9;
  }
LABEL_6:
  int v5 = v4;
  if ((v4 & 0x80000000) != 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v6;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  if (*((unsigned char *)this + 60)) {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4 + 2);
  }
  else {
    uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::TableConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 16);
  }
  else
  {
    *((_DWORD *)this + 16) = v7;
    return (char *)v7;
  }
}

void operations_research::sat::TableConstraintProto::MergeFrom(operations_research::sat::TableConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::TableConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::TableConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::TableConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  if (*((unsigned char *)a2 + 60)) {
    *(unsigned char *)(v3 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 1;
  }
  return this;
}

void operations_research::sat::TableConstraintProto::CopyFrom(operations_research::sat::TableConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((unsigned char *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::TableConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::TableConstraintProto::IsInitialized(operations_research::sat::TableConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::TableConstraintProto::GetMetadata(operations_research::sat::TableConstraintProto *this)
{
  return off_26AED01D8[32];
}

void operations_research::sat::InverseConstraintProto::~InverseConstraintProto(operations_research::sat::InverseConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::InverseConstraintProto::~InverseConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::InverseConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::InverseConstraintProto::Clear(operations_research::sat::InverseConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::InverseConstraintProto::_InternalParse(operations_research::sat::InverseConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v23 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 40);
  uint64_t v10 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      unint64_t v23 = v6;
      if (a2) {
        return v6;
      }
    }
    uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 1);
    unsigned int v15 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    unsigned int v16 = v15 + (*(unsigned __int8 *)v14 << 7);
    unsigned int v15 = v16 - 128;
    if (*(char *)v14 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v16 - 128));
      unint64_t v23 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v14 = TagFallback;
      unsigned int v15 = a2;
      unsigned int v17 = a2 >> 3;
      if (a2 >> 3 != 2) {
        goto LABEL_15;
      }
LABEL_24:
      if (v15 == 18)
      {
        uint64_t v11 = (google::protobuf::internal *)v9;
        goto LABEL_4;
      }
      if (v15 != 16) {
        goto LABEL_16;
      }
      int v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      uint64_t v21 = *((unsigned int *)this + 10);
      if (v21 == *((_DWORD *)this + 11)) {
        google::protobuf::RepeatedField<int>::Reserve(v9, v21 + 1);
      }
      *(_DWORD *)(*((void *)this + 6) + 4 * v21) = v20;
      *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v21 + 1;
LABEL_34:
      uint64_t v6 = v23;
      if (!v23) {
        return v6;
      }
    }
    else
    {
      uint64_t v14 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_14:
      unint64_t v23 = v14;
      unsigned int v17 = v15 >> 3;
      if (v15 >> 3 == 2) {
        goto LABEL_24;
      }
LABEL_15:
      if (v17 != 1) {
        goto LABEL_16;
      }
      if (v15 == 10)
      {
        uint64_t v11 = (google::protobuf::internal *)v10;
LABEL_4:
        uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v14, a3, a4);
        unint64_t v23 = v6;
        if (!v6) {
          return v6;
        }
      }
      else
      {
        if (v15 == 8)
        {
          int v12 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
          uint64_t v13 = *((unsigned int *)this + 4);
          if (v13 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve(v10, v13 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v13) = v12;
          *((_DWORD *)this + 4) = v13 + 1;
          goto LABEL_34;
        }
LABEL_16:
        if (!v15 || (v15 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 - 1;
          return v14;
        }
        if (*v8)
        {
          int v18 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          int v18 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          uint64_t v14 = v23;
        }
        uint64_t v6 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v18, v14, (const char *)a3, a5);
        unint64_t v23 = v6;
        if (!v6) {
          return v6;
        }
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::InverseConstraintProto::_InternalSerialize(operations_research::sat::InverseConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      uint64_t v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *uint64_t v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      unsigned int v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *unsigned int v17 = v16;
        int v18 = (int *)*((void *)this + 6);
        int v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::InverseConstraintProto::ByteSizeLong(operations_research::sat::InverseConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
      uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
      if (!v4) {
        goto LABEL_9;
      }
LABEL_6:
      int v5 = v4;
      if ((v4 & 0x80000000) != 0) {
        uint64_t v6 = 11;
      }
      else {
        uint64_t v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v3 += v6;
      goto LABEL_12;
    }
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
LABEL_9:
  int v5 = 0;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  uint64_t v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::InverseConstraintProto *)((char *)this + 8), v7, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v7;
    return (char *)(v3 + v4);
  }
}

void operations_research::sat::InverseConstraintProto::MergeFrom(operations_research::sat::InverseConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::InverseConstraintProto::MergeFrom((char *)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

char *operations_research::sat::InverseConstraintProto::MergeFrom(char *this, const operations_research::sat::InverseConstraintProto *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = (char *)google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (char *)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v14 = *(int *)(v3 + 40);
    uint64_t v13 = v3 + 40;
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v13, v14 + v12);
    uint64_t v15 = *(void *)(v13 + 8);
    *(_DWORD *)v13 += *((_DWORD *)a2 + 10);
    unsigned int v16 = (void *)(v15 + 4 * v14);
    unsigned int v17 = (const void *)*((void *)a2 + 6);
    size_t v18 = 4 * *((int *)a2 + 10);
    return (char *)memcpy(v16, v17, v18);
  }
  return this;
}

void operations_research::sat::InverseConstraintProto::CopyFrom(operations_research::sat::InverseConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::InverseConstraintProto::MergeFrom((char *)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::InverseConstraintProto::IsInitialized(operations_research::sat::InverseConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::InverseConstraintProto::GetMetadata(operations_research::sat::InverseConstraintProto *this)
{
  return off_26AED01D8[34];
}

void operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto(operations_research::sat::AutomatonConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 112);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::AutomatonConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 144) = a2;
  return this;
}

void operations_research::sat::AutomatonConstraintProto::Clear(operations_research::sat::AutomatonConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 17) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::AutomatonConstraintProto::_InternalParse(operations_research::sat::AutomatonConstraintProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  unint64_t v40 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (operations_research::sat::AutomatonConstraintProto *)((char *)this + 112);
  uint64_t v10 = (unsigned int *)((char *)this + 88);
  uint64_t v11 = (unsigned int *)((char *)this + 64);
  int v12 = (unsigned int *)((char *)this + 40);
  uint64_t v13 = (unsigned int *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_8:
      unsigned int v16 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v17 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      unsigned int v18 = v17 + (*(unsigned __int8 *)v16 << 7);
      unsigned int v17 = v18 - 128;
      if ((*(char *)v16 & 0x80000000) == 0) {
        break;
      }
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v18 - 128));
      unint64_t v40 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      unsigned int v16 = TagFallback;
      unsigned int v17 = a2;
      unsigned int v19 = (a2 >> 3) - 2;
      if (v19 > 5)
      {
LABEL_27:
        if (v17) {
          BOOL v21 = (v17 & 7) == 4;
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v17 - 1;
          return v16;
        }
        if (*v8)
        {
          unint64_t v22 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          unint64_t v22 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          unsigned int v16 = v40;
        }
        uint64_t v15 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v17, (google::protobuf::UnknownFieldSet *)v22, v16, (const char *)a3, a5);
        goto LABEL_6;
      }
LABEL_12:
      switch(v19)
      {
        case 0u:
          if (v17 != 16) {
            goto LABEL_27;
          }
          uint64_t v6 = (google::protobuf::internal *)((char *)v16 + 1);
          a2 = (google::protobuf::internal *)*(unsigned __int8 *)v16;
          if ((*(char *)v16 & 0x80000000) == 0)
          {
            unint64_t v40 = (google::protobuf::internal *)((char *)v16 + 1);
            *((void *)this + 17) = a2;
            if ((unint64_t)v6 >= *(void *)a3) {
              goto LABEL_36;
            }
            continue;
          }
          int v23 = *(char *)v6;
          a2 = (google::protobuf::internal *)(a2 + (v23 << 7) - 128);
          if ((v23 & 0x80000000) == 0)
          {
            uint64_t v6 = (google::protobuf::internal *)((char *)v16 + 2);
            unint64_t v40 = (google::protobuf::internal *)((char *)v16 + 2);
            *((void *)this + 17) = a2;
            if ((unint64_t)v16 + 2 >= *(void *)a3) {
              goto LABEL_36;
            }
            continue;
          }
          uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v16, (const char *)a2);
          unint64_t v40 = v6;
          *((void *)this + 17) = a2;
          if (!v6) {
            return v6;
          }
          goto LABEL_7;
        case 1u:
          if (v17 == 26)
          {
            uint64_t v14 = (google::protobuf::internal *)v13;
LABEL_5:
            uint64_t v15 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v14, (unsigned __int8 *)v16, a3, a4);
            goto LABEL_6;
          }
          if (v17 != 24) {
            goto LABEL_27;
          }
          uint64_t v24 = google::protobuf::internal::ReadVarint64(&v40, (const char **)a2);
          uint64_t v25 = *((unsigned int *)this + 4);
          if (v25 == *((_DWORD *)this + 5))
          {
            uint64_t v35 = v24;
            google::protobuf::RepeatedField<long long>::Reserve(v13, v25 + 1);
            uint64_t v24 = v35;
          }
          *(void *)(*((void *)this + 3) + 8 * v25) = v24;
          *((_DWORD *)this + 4) = v25 + 1;
          break;
        case 2u:
          if (v17 == 34)
          {
            uint64_t v14 = (google::protobuf::internal *)v12;
            goto LABEL_5;
          }
          if (v17 != 32) {
            goto LABEL_27;
          }
          uint64_t v26 = google::protobuf::internal::ReadVarint64(&v40, (const char **)a2);
          uint64_t v27 = *((unsigned int *)this + 10);
          if (v27 == *((_DWORD *)this + 11))
          {
            uint64_t v36 = v26;
            google::protobuf::RepeatedField<long long>::Reserve(v12, v27 + 1);
            uint64_t v26 = v36;
          }
          *(void *)(*((void *)this + 6) + 8 * v27) = v26;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v27 + 1;
          break;
        case 3u:
          if (v17 == 42)
          {
            uint64_t v14 = (google::protobuf::internal *)v11;
            goto LABEL_5;
          }
          if (v17 != 40) {
            goto LABEL_27;
          }
          uint64_t v28 = google::protobuf::internal::ReadVarint64(&v40, (const char **)a2);
          uint64_t v29 = *((unsigned int *)this + 16);
          if (v29 == *((_DWORD *)this + 17))
          {
            uint64_t v37 = v28;
            google::protobuf::RepeatedField<long long>::Reserve(v11, v29 + 1);
            uint64_t v28 = v37;
          }
          *(void *)(*((void *)this + 9) + 8 * v29) = v28;
          *((_DWORD *)this + 16) = v29 + 1;
          break;
        case 4u:
          if (v17 == 50)
          {
            uint64_t v14 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v17 != 48) {
            goto LABEL_27;
          }
          uint64_t v30 = google::protobuf::internal::ReadVarint64(&v40, (const char **)a2);
          uint64_t v31 = *((unsigned int *)this + 22);
          if (v31 == *((_DWORD *)this + 23))
          {
            uint64_t v38 = v30;
            google::protobuf::RepeatedField<long long>::Reserve(v10, v31 + 1);
            uint64_t v30 = v38;
          }
          *(void *)(*((void *)this + 12) + 8 * v31) = v30;
          *((_DWORD *)this + 22) = v31 + 1;
          break;
        case 5u:
          if (v17 == 58)
          {
            uint64_t v15 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v16, a3, a4);
LABEL_6:
            uint64_t v6 = v15;
            unint64_t v40 = v15;
            if (!v15) {
              return v6;
            }
            goto LABEL_7;
          }
          if (v17 != 56) {
            goto LABEL_27;
          }
          int v32 = google::protobuf::internal::ReadVarint64(&v40, (const char **)a2);
          uint64_t v33 = *((unsigned int *)this + 28);
          if (v33 == *((_DWORD *)this + 29))
          {
            int v39 = v32;
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v33 + 1);
            int v32 = v39;
          }
          *(_DWORD *)(*((void *)this + 15) + 4 * v33) = v32;
          *((_DWORD *)this + 28) = v33 + 1;
          break;
        default:
          goto LABEL_27;
      }
      uint64_t v6 = v40;
      if (!v40) {
        return v6;
      }
LABEL_7:
      if ((unint64_t)v6 >= *(void *)a3) {
        goto LABEL_36;
      }
    }
    unsigned int v16 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_11:
    unint64_t v40 = v16;
    unsigned int v19 = (v17 >> 3) - 2;
    goto LABEL_12;
  }
LABEL_36:
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    unint64_t v40 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::AutomatonConstraintProto::_InternalSerialize(operations_research::sat::AutomatonConstraintProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unint64_t v6 = *((void *)this + 17);
  if (!v6)
  {
LABEL_9:
    int v7 = *((_DWORD *)this + 8);
    if (v7 < 1) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v6 = *((void *)this + 17);
    *a2 = 16;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      int v7 = *((_DWORD *)this + 8);
      if (v7 < 1) {
        goto LABEL_27;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        *a2 = 26;
        int v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80) {
          goto LABEL_12;
        }
      }
      else
      {
        *a2 = 26;
        int v9 = (unsigned __int8 *)(a2 + 1);
        if (v7 < 0x80)
        {
LABEL_12:
          a2 += 2;
          *int v9 = v7;
          uint64_t v10 = (unint64_t *)*((void *)this + 3);
          uint64_t v11 = &v10[*((int *)this + 4)];
          while (1)
          {
            if (*(void *)a3 <= (unint64_t)a2)
            {
              a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
              unint64_t v17 = *v10++;
              unint64_t v12 = v17;
              if (v17 > 0x7F)
              {
LABEL_17:
                *a2 = v12 | 0x80;
                unint64_t v14 = v12 >> 7;
                if (v12 >> 14)
                {
                  a2 += 2;
                  do
                  {
                    *(a2 - 1) = v14 | 0x80;
                    unint64_t v15 = v14 >> 7;
                    ++a2;
                    unint64_t v16 = v14 >> 14;
                    v14 >>= 7;
                  }
                  while (v16);
                  *(a2 - 1) = v15;
                }
                else
                {
                  a2[1] = v14;
                  a2 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              unint64_t v13 = *v10++;
              unint64_t v12 = v13;
              if (v13 > 0x7F) {
                goto LABEL_17;
              }
            }
            *a2++ = v12;
LABEL_14:
            if (v10 >= v11) {
              goto LABEL_27;
            }
          }
        }
      }
      do
      {
        *v9++ = v7 | 0x80;
        unsigned int v62 = v7 >> 14;
        int v7 = v7 >> 7;
      }
      while (v62);
      a2 = (char *)(v9 - 1);
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 16;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v18 = v8 >> 7;
    ++a2;
    unint64_t v19 = v8 >> 14;
    v8 >>= 7;
  }
  while (v19);
  *(a2 - 1) = v18;
  int v7 = *((_DWORD *)this + 8);
  if (v7 >= 1) {
    goto LABEL_10;
  }
LABEL_27:
  unsigned int v20 = *((_DWORD *)this + 14);
  if ((int)v20 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      BOOL v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80) {
        goto LABEL_30;
      }
    }
    else
    {
      *a2 = 34;
      BOOL v21 = (unsigned __int8 *)(a2 + 1);
      if (v20 < 0x80)
      {
LABEL_30:
        a2 += 2;
        unsigned __int8 *v21 = v20;
        unint64_t v22 = (unint64_t *)*((void *)this + 6);
        int v23 = &v22[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v29 = *v22++;
            unint64_t v24 = v29;
            if (v29 > 0x7F)
            {
LABEL_35:
              *a2 = v24 | 0x80;
              unint64_t v26 = v24 >> 7;
              if (v24 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v26 | 0x80;
                  unint64_t v27 = v26 >> 7;
                  ++a2;
                  unint64_t v28 = v26 >> 14;
                  v26 >>= 7;
                }
                while (v28);
                *(a2 - 1) = v27;
              }
              else
              {
                a2[1] = v26;
                a2 += 2;
              }
              goto LABEL_32;
            }
          }
          else
          {
            unint64_t v25 = *v22++;
            unint64_t v24 = v25;
            if (v25 > 0x7F) {
              goto LABEL_35;
            }
          }
          *a2++ = v24;
LABEL_32:
          if (v22 >= v23) {
            goto LABEL_42;
          }
        }
      }
    }
    do
    {
      *v21++ = v20 | 0x80;
      unsigned int v63 = v20 >> 14;
      v20 >>= 7;
    }
    while (v63);
    a2 = (char *)(v21 - 1);
    goto LABEL_30;
  }
LABEL_42:
  unsigned int v30 = *((_DWORD *)this + 20);
  if ((int)v30 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      uint64_t v31 = (unsigned __int8 *)(a2 + 1);
      if (v30 < 0x80) {
        goto LABEL_45;
      }
    }
    else
    {
      *a2 = 42;
      uint64_t v31 = (unsigned __int8 *)(a2 + 1);
      if (v30 < 0x80)
      {
LABEL_45:
        a2 += 2;
        *uint64_t v31 = v30;
        int v32 = (unint64_t *)*((void *)this + 9);
        uint64_t v33 = &v32[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v39 = *v32++;
            unint64_t v34 = v39;
            if (v39 > 0x7F)
            {
LABEL_50:
              *a2 = v34 | 0x80;
              unint64_t v36 = v34 >> 7;
              if (v34 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v36 | 0x80;
                  unint64_t v37 = v36 >> 7;
                  ++a2;
                  unint64_t v38 = v36 >> 14;
                  v36 >>= 7;
                }
                while (v38);
                *(a2 - 1) = v37;
              }
              else
              {
                a2[1] = v36;
                a2 += 2;
              }
              goto LABEL_47;
            }
          }
          else
          {
            unint64_t v35 = *v32++;
            unint64_t v34 = v35;
            if (v35 > 0x7F) {
              goto LABEL_50;
            }
          }
          *a2++ = v34;
LABEL_47:
          if (v32 >= v33) {
            goto LABEL_57;
          }
        }
      }
    }
    do
    {
      *v31++ = v30 | 0x80;
      unsigned int v64 = v30 >> 14;
      v30 >>= 7;
    }
    while (v64);
    a2 = (char *)(v31 - 1);
    goto LABEL_45;
  }
LABEL_57:
  unsigned int v40 = *((_DWORD *)this + 26);
  if ((int)v40 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 50;
      unint64_t v41 = (unsigned __int8 *)(a2 + 1);
      if (v40 < 0x80) {
        goto LABEL_60;
      }
    }
    else
    {
      *a2 = 50;
      unint64_t v41 = (unsigned __int8 *)(a2 + 1);
      if (v40 < 0x80)
      {
LABEL_60:
        a2 += 2;
        *unint64_t v41 = v40;
        unint64_t v42 = (unint64_t *)*((void *)this + 12);
        unint64_t v43 = &v42[*((int *)this + 22)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v49 = *v42++;
            unint64_t v44 = v49;
            if (v49 > 0x7F)
            {
LABEL_65:
              *a2 = v44 | 0x80;
              unint64_t v46 = v44 >> 7;
              if (v44 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v46 | 0x80;
                  unint64_t v47 = v46 >> 7;
                  ++a2;
                  unint64_t v48 = v46 >> 14;
                  v46 >>= 7;
                }
                while (v48);
                *(a2 - 1) = v47;
              }
              else
              {
                a2[1] = v46;
                a2 += 2;
              }
              goto LABEL_62;
            }
          }
          else
          {
            unint64_t v45 = *v42++;
            unint64_t v44 = v45;
            if (v45 > 0x7F) {
              goto LABEL_65;
            }
          }
          *a2++ = v44;
LABEL_62:
          if (v42 >= v43) {
            goto LABEL_72;
          }
        }
      }
    }
    do
    {
      *v41++ = v40 | 0x80;
      unsigned int v65 = v40 >> 14;
      v40 >>= 7;
    }
    while (v65);
    a2 = (char *)(v41 - 1);
    goto LABEL_60;
  }
LABEL_72:
  unsigned int v50 = *((_DWORD *)this + 32);
  if ((int)v50 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 58;
      unint64_t v51 = (unsigned __int8 *)(a2 + 1);
      if (v50 < 0x80) {
        goto LABEL_75;
      }
    }
    else
    {
      *a2 = 58;
      unint64_t v51 = (unsigned __int8 *)(a2 + 1);
      if (v50 < 0x80)
      {
LABEL_75:
        a2 += 2;
        *unint64_t v51 = v50;
        unint64_t v52 = (int *)*((void *)this + 15);
        unint64_t v53 = &v52[*((int *)this + 28)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v59 = *v52++;
            unint64_t v54 = v59;
            if (v59 > 0x7F)
            {
LABEL_80:
              *a2 = v54 | 0x80;
              unint64_t v56 = v54 >> 7;
              if (v54 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v56 | 0x80;
                  unint64_t v57 = v56 >> 7;
                  ++a2;
                  unint64_t v58 = v56 >> 14;
                  v56 >>= 7;
                }
                while (v58);
                *(a2 - 1) = v57;
              }
              else
              {
                a2[1] = v56;
                a2 += 2;
              }
              goto LABEL_77;
            }
          }
          else
          {
            unint64_t v55 = *v52++;
            unint64_t v54 = v55;
            if (v55 > 0x7F) {
              goto LABEL_80;
            }
          }
          *a2++ = v54;
LABEL_77:
          if (v52 >= v53) {
            goto LABEL_87;
          }
        }
      }
    }
    do
    {
      *v51++ = v50 | 0x80;
      unsigned int v66 = v50 >> 14;
      v50 >>= 7;
    }
    while (v66);
    a2 = (char *)(v51 - 1);
    goto LABEL_75;
  }
LABEL_87:
  uint64_t v60 = *((void *)this + 1);
  if ((v60 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::AutomatonConstraintProto::ByteSizeLong(operations_research::sat::AutomatonConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0) {
    uint64_t v3 = v4;
  }
  if (v2) {
    int v5 = v2;
  }
  else {
    int v5 = 0;
  }
  if (!v2) {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  uint64_t v6 = v3 + v2;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  uint64_t v8 = 11;
  uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v7 >= 0) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = v8 + v6;
  if (v7) {
    int v11 = v7;
  }
  else {
    int v11 = 0;
  }
  if (!v7) {
    uint64_t v10 = v6;
  }
  *((_DWORD *)this + 14) = v11;
  uint64_t v12 = v10 + v7;
  uint64_t v13 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  if (v13)
  {
    int v14 = v13;
    if ((v13 & 0x80000000) != 0) {
      uint64_t v15 = 11;
    }
    else {
      uint64_t v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v12 += v15;
  }
  else
  {
    int v14 = 0;
  }
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14;
  uint64_t v16 = v12 + v13;
  uint64_t v17 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 22);
  uint64_t v18 = 11;
  uint64_t v19 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v17 >= 0) {
    uint64_t v18 = v19;
  }
  uint64_t v20 = v18 + v16;
  if (v17) {
    int v21 = v17;
  }
  else {
    int v21 = 0;
  }
  if (!v17) {
    uint64_t v20 = v16;
  }
  *((_DWORD *)this + 26) = v21;
  uint64_t v22 = v20 + v17;
  uint64_t v23 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 28);
  uint64_t v24 = 11;
  uint64_t v25 = ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v23 >= 0) {
    uint64_t v24 = v25;
  }
  uint64_t v26 = v24 + v22;
  if (v23) {
    int v27 = v23;
  }
  else {
    int v27 = 0;
  }
  if (!v23) {
    uint64_t v26 = v22;
  }
  *((_DWORD *)this + 32) = v27;
  unint64_t v28 = (const google::protobuf::UnknownFieldSet *)(v26 + v23);
  uint64_t v29 = *((void *)this + 17);
  unsigned int v30 = (char *)v28 + ((9 * (__clz(v29 | 1) ^ 0x3F) + 73) >> 6);
  if (v29) {
    uint64_t v31 = (const google::protobuf::UnknownFieldSet *)(v30 + 1);
  }
  else {
    uint64_t v31 = v28;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::AutomatonConstraintProto *)((char *)this + 8), v31, (_DWORD *)this + 36);
  }
  else
  {
    *((_DWORD *)this + 36) = v31;
    return (char *)v31;
  }
}

void operations_research::sat::AutomatonConstraintProto::MergeFrom(operations_research::sat::AutomatonConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::AutomatonConstraintProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::AutomatonConstraintProto::MergeFrom(uint64_t this, const operations_research::sat::AutomatonConstraintProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(v3 + 64);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 64), v16 + v15);
    uint64_t v17 = *(void *)(v3 + 72);
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
    this = (uint64_t)memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  int v18 = *((_DWORD *)a2 + 22);
  if (v18)
  {
    uint64_t v19 = *(int *)(v3 + 88);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 88), v19 + v18);
    uint64_t v20 = *(void *)(v3 + 96);
    *(_DWORD *)(v3 + 88) += *((_DWORD *)a2 + 22);
    this = (uint64_t)memcpy((void *)(v20 + 8 * v19), *((const void **)a2 + 12), 8 * *((int *)a2 + 22));
  }
  int v21 = *((_DWORD *)a2 + 28);
  if (v21)
  {
    uint64_t v22 = *(int *)(v3 + 112);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 112), v22 + v21);
    uint64_t v23 = *(void *)(v3 + 120);
    *(_DWORD *)(v3 + 112) += *((_DWORD *)a2 + 28);
    this = (uint64_t)memcpy((void *)(v23 + 4 * v22), *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  uint64_t v24 = *((void *)a2 + 17);
  if (v24) {
    *(void *)(v3 + 136) = v24;
  }
  return this;
}

void operations_research::sat::AutomatonConstraintProto::CopyFrom(operations_research::sat::AutomatonConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 22) = 0;
    *((_DWORD *)this + 28) = 0;
    *((void *)this + 17) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::AutomatonConstraintProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::AutomatonConstraintProto::IsInitialized(operations_research::sat::AutomatonConstraintProto *this)
{
  return 1;
}

uint64_t operations_research::sat::AutomatonConstraintProto::GetMetadata(operations_research::sat::AutomatonConstraintProto *this)
{
  return off_26AED01D8[36];
}

uint64_t operations_research::sat::ConstraintProto::clear_constraint(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 60))
  {
    case 3:
    case 4:
    case 5:
    case 0x1A:
      uint64_t v4 = *(void *)(this + 8);
      int v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
      {
        if (*v5) {
          goto LABEL_68;
        }
      }
      else if (v5)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::BoolArgumentProto::~BoolArgumentProto((operations_research::sat::BoolArgumentProto *)this);
      goto LABEL_104;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      uint64_t v2 = *(void *)(this + 8);
      uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v2)
      {
        if (*v3) {
          goto LABEL_68;
        }
      }
      else if (v3)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)this);
      goto LABEL_104;
    case 0xC:
      uint64_t v8 = *(void *)(this + 8);
      int v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFELL);
      if (v8)
      {
        if (*v9) {
          goto LABEL_68;
        }
      }
      else if (v9)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)this);
      goto LABEL_104;
    case 0xD:
      uint64_t v10 = *(void *)(this + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
      {
        if (*v11) {
          goto LABEL_68;
        }
      }
      else if (v11)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::AllDifferentConstraintProto::~AllDifferentConstraintProto((operations_research::sat::AllDifferentConstraintProto *)this);
      goto LABEL_104;
    case 0xE:
      uint64_t v12 = *(void *)(this + 8);
      uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      if (v12)
      {
        if (*v13) {
          goto LABEL_68;
        }
      }
      else if (v13)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::ElementConstraintProto::~ElementConstraintProto((operations_research::sat::ElementConstraintProto *)this);
      goto LABEL_104;
    case 0xF:
      uint64_t v14 = *(void *)(this + 8);
      int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if (v14)
      {
        if (*v15) {
          goto LABEL_68;
        }
      }
      else if (v15)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::CircuitConstraintProto::~CircuitConstraintProto((operations_research::sat::CircuitConstraintProto *)this);
      goto LABEL_104;
    case 0x10:
      uint64_t v16 = *(void *)(this + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16)
      {
        if (*v17) {
          goto LABEL_68;
        }
      }
      else if (v17)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::TableConstraintProto::~TableConstraintProto((operations_research::sat::TableConstraintProto *)this);
      goto LABEL_104;
    case 0x11:
      uint64_t v18 = *(void *)(this + 8);
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18)
      {
        if (*v19) {
          goto LABEL_68;
        }
      }
      else if (v19)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::AutomatonConstraintProto::~AutomatonConstraintProto((operations_research::sat::AutomatonConstraintProto *)this);
      goto LABEL_104;
    case 0x12:
      uint64_t v20 = *(void *)(this + 8);
      int v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFELL);
      if (v20)
      {
        if (*v21) {
          goto LABEL_68;
        }
      }
      else if (v21)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::InverseConstraintProto::~InverseConstraintProto((operations_research::sat::InverseConstraintProto *)this);
      goto LABEL_104;
    case 0x13:
      uint64_t v22 = *(void *)(this + 8);
      uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
      {
        if (*v23) {
          goto LABEL_68;
        }
      }
      else if (v23)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)this);
      goto LABEL_104;
    case 0x14:
      uint64_t v24 = *(void *)(this + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFELL);
      if (v24)
      {
        if (*v25) {
          goto LABEL_68;
        }
      }
      else if (v25)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::NoOverlapConstraintProto::~NoOverlapConstraintProto((operations_research::sat::NoOverlapConstraintProto *)this);
      goto LABEL_104;
    case 0x15:
      uint64_t v26 = *(void *)(this + 8);
      int v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFELL);
      if (v26)
      {
        if (*v27) {
          goto LABEL_68;
        }
      }
      else if (v27)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto((operations_research::sat::NoOverlap2DConstraintProto *)this);
      goto LABEL_104;
    case 0x16:
      uint64_t v28 = *(void *)(this + 8);
      uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFELL);
      if (v28)
      {
        if (*v29) {
          goto LABEL_68;
        }
      }
      else if (v29)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::CumulativeConstraintProto::~CumulativeConstraintProto((operations_research::sat::CumulativeConstraintProto *)this);
      goto LABEL_104;
    case 0x17:
      uint64_t v30 = *(void *)(this + 8);
      uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
      if (v30)
      {
        if (*v31) {
          goto LABEL_68;
        }
      }
      else if (v31)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::RoutesConstraintProto::~RoutesConstraintProto((operations_research::sat::RoutesConstraintProto *)this);
      goto LABEL_104;
    case 0x18:
      uint64_t v32 = *(void *)(this + 8);
      uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v32)
      {
        if (*v33) {
          goto LABEL_68;
        }
      }
      else if (v33)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::ReservoirConstraintProto::~ReservoirConstraintProto((operations_research::sat::ReservoirConstraintProto *)this);
      goto LABEL_104;
    case 0x19:
      uint64_t v34 = *(void *)(this + 8);
      unint64_t v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFELL);
      if (v34)
      {
        if (*v35) {
          goto LABEL_68;
        }
      }
      else if (v35)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (!this) {
        goto LABEL_68;
      }
      operations_research::sat::CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto((operations_research::sat::CircuitCoveringConstraintProto *)this);
LABEL_104:
      this = MEMORY[0x23ECF2BC0]();
      *(_DWORD *)(v1 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
      return this;
    case 0x1B:
    case 0x1C:
      uint64_t v6 = *(void *)(this + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFELL);
      if (v6)
      {
        if (*v7) {
          goto LABEL_68;
        }
      }
      else if (v7)
      {
        goto LABEL_68;
      }
      this = *(void *)(this + 48);
      if (this)
      {
        operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)this);
        this = MEMORY[0x23ECF2BC0]();
        *(_DWORD *)(v1 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
        return this;
      }
LABEL_68:
      *(_DWORD *)(v1 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
      return this;
    default:
      goto LABEL_68;
  }
}

operations_research::sat::ConstraintProto *operations_research::sat::ConstraintProto::ConstraintProto(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BED90;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    uint64_t v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 14) = 0;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7)
  {
    if (*v4) {
      uint64_t v8 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*v4) {
    uint64_t v10 = *(google::protobuf::Arena **)v10;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, v10, (long long *)v9);
LABEL_14:
  *((_DWORD *)this + 15) = 0;
  int v11 = *((_DWORD *)a2 + 15);
  switch(v11)
  {
    case 3:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 3;
      uint64_t v12 = *((void *)this + 1);
      uint64_t v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      if (v12) {
        uint64_t v13 = *(google::protobuf::Arena **)v13;
      }
      unint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v13);
      unint64_t v15 = v14;
      *((void *)this + 6) = v14;
      if (*((_DWORD *)a2 + 15) == 3) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      }
      uint64_t v17 = v16[1];
      if (v17)
      {
        uint64_t v18 = (unint64_t *)(v14 + 8);
        uint64_t v19 = *(void *)(v15 + 8);
        if (v19) {
          uint64_t v20 = (char *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          uint64_t v20 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v18);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v20, (const google::protobuf::UnknownFieldSet *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (!v21) {
        return this;
      }
      goto LABEL_230;
    case 4:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 4;
      uint64_t v22 = *((void *)this + 1);
      uint64_t v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        uint64_t v23 = *(google::protobuf::Arena **)v23;
      }
      unint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v23);
      unint64_t v15 = v24;
      *((void *)this + 6) = v24;
      if (*((_DWORD *)a2 + 15) == 4) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      }
      uint64_t v25 = v16[1];
      if (v25)
      {
        uint64_t v26 = (unint64_t *)(v24 + 8);
        uint64_t v27 = *(void *)(v15 + 8);
        if (v27) {
          uint64_t v28 = (char *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          uint64_t v28 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v26);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v28, (const google::protobuf::UnknownFieldSet *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (v21) {
        goto LABEL_230;
      }
      return this;
    case 5:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      uint64_t v29 = *((void *)this + 1);
      uint64_t v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
      if (v29) {
        uint64_t v30 = *(google::protobuf::Arena **)v30;
      }
      unint64_t v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v30);
      unint64_t v15 = v31;
      *((void *)this + 6) = v31;
      if (*((_DWORD *)a2 + 15) == 5) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      }
      uint64_t v32 = v16[1];
      if (v32)
      {
        uint64_t v33 = (unint64_t *)(v31 + 8);
        uint64_t v34 = *(void *)(v15 + 8);
        if (v34) {
          unint64_t v35 = (char *)((v34 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          unint64_t v35 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v33);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v35, (const google::protobuf::UnknownFieldSet *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (v21) {
        goto LABEL_230;
      }
      return this;
    case 7:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 7;
      uint64_t v36 = *((void *)this + 1);
      unint64_t v37 = (google::protobuf::Arena *)(v36 & 0xFFFFFFFFFFFFFFFELL);
      if (v36) {
        unint64_t v37 = *(google::protobuf::Arena **)v37;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v37);
      uint64_t v39 = v38;
      *((void *)this + 6) = v38;
      if (*((_DWORD *)a2 + 15) == 7) {
        unsigned int v40 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        unsigned int v40 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v41 = v40[1];
      if (v41)
      {
        unint64_t v42 = (unint64_t *)(v38 + 8);
        uint64_t v43 = *(void *)(v39 + 8);
        if (v43) {
          unint64_t v44 = (char *)((v43 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          unint64_t v44 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v42);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v44, (const google::protobuf::UnknownFieldSet *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v45 = *((_DWORD *)v40 + 4);
      if (v45)
      {
        uint64_t v46 = *(int *)(v39 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v39 + 16), v46 + v45);
        uint64_t v47 = *(void *)(v39 + 24);
        *(_DWORD *)(v39 + 16) += *((_DWORD *)v40 + 4);
        memcpy((void *)(v47 + 4 * v46), (const void *)v40[3], 4 * *((int *)v40 + 4));
      }
      int v48 = *((_DWORD *)v40 + 9);
      if (v48) {
        goto LABEL_60;
      }
      return this;
    case 8:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 8;
      uint64_t v50 = *((void *)this + 1);
      unint64_t v51 = (google::protobuf::Arena *)(v50 & 0xFFFFFFFFFFFFFFFELL);
      if (v50) {
        unint64_t v51 = *(google::protobuf::Arena **)v51;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v51);
      uint64_t v39 = v52;
      *((void *)this + 6) = v52;
      if (*((_DWORD *)a2 + 15) == 8) {
        unint64_t v53 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        unint64_t v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v54 = v53[1];
      if (v54)
      {
        unint64_t v55 = (unint64_t *)(v52 + 8);
        uint64_t v56 = *(void *)(v39 + 8);
        if (v56) {
          unint64_t v57 = (char *)((v56 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          unint64_t v57 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v55);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v57, (const google::protobuf::UnknownFieldSet *)((v54 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v58 = *((_DWORD *)v53 + 4);
      if (v58) {
        goto LABEL_104;
      }
      goto LABEL_105;
    case 9:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 9;
      uint64_t v59 = *((void *)this + 1);
      uint64_t v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
      if (v59) {
        uint64_t v60 = *(google::protobuf::Arena **)v60;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v60);
      uint64_t v39 = v61;
      *((void *)this + 6) = v61;
      if (*((_DWORD *)a2 + 15) == 9) {
        unint64_t v53 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        unint64_t v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v62 = v53[1];
      if (v62)
      {
        unsigned int v63 = (unint64_t *)(v61 + 8);
        uint64_t v64 = *(void *)(v39 + 8);
        if (v64) {
          unsigned int v65 = (char *)((v64 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          unsigned int v65 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v63);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v65, (const google::protobuf::UnknownFieldSet *)((v62 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v58 = *((_DWORD *)v53 + 4);
      if (v58) {
        goto LABEL_104;
      }
      goto LABEL_105;
    case 10:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 10;
      uint64_t v66 = *((void *)this + 1);
      v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
      if (v66) {
        v67 = *(google::protobuf::Arena **)v67;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v67);
      uint64_t v39 = v68;
      *((void *)this + 6) = v68;
      if (*((_DWORD *)a2 + 15) == 10) {
        unint64_t v53 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        unint64_t v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v69 = v53[1];
      if (v69)
      {
        v70 = (unint64_t *)(v68 + 8);
        uint64_t v71 = *(void *)(v39 + 8);
        if (v71) {
          v72 = (char *)((v71 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v72 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v70);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v72, (const google::protobuf::UnknownFieldSet *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v58 = *((_DWORD *)v53 + 4);
      if (v58) {
        goto LABEL_104;
      }
      goto LABEL_105;
    case 11:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 11;
      uint64_t v73 = *((void *)this + 1);
      v74 = (google::protobuf::Arena *)(v73 & 0xFFFFFFFFFFFFFFFELL);
      if (v73) {
        v74 = *(google::protobuf::Arena **)v74;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v74);
      uint64_t v39 = v75;
      *((void *)this + 6) = v75;
      if (*((_DWORD *)a2 + 15) == 11) {
        unint64_t v53 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        unint64_t v53 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      }
      uint64_t v76 = v53[1];
      if (v76)
      {
        v77 = (unint64_t *)(v75 + 8);
        uint64_t v78 = *(void *)(v39 + 8);
        if (v78) {
          v79 = (char *)((v78 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v79 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v77);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v79, (const google::protobuf::UnknownFieldSet *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v58 = *((_DWORD *)v53 + 4);
      if (v58)
      {
LABEL_104:
        uint64_t v80 = *(int *)(v39 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v39 + 16), v80 + v58);
        uint64_t v81 = *(void *)(v39 + 24);
        *(_DWORD *)(v39 + 16) += *((_DWORD *)v53 + 4);
        memcpy((void *)(v81 + 4 * v80), (const void *)v53[3], 4 * *((int *)v53 + 4));
      }
LABEL_105:
      int v48 = *((_DWORD *)v53 + 9);
      if (!v48) {
        return this;
      }
LABEL_60:
      *(_DWORD *)(v39 + 36) = v48;
      return this;
    case 12:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 12;
      uint64_t v82 = *((void *)this + 1);
      v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
      if (v82) {
        v83 = *(google::protobuf::Arena **)v83;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v83);
      *((void *)this + 6) = v84;
      if (*((_DWORD *)a2 + 15) == 12) {
        v85 = (const operations_research::sat::LinearConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v85 = (const operations_research::sat::LinearConstraintProto *)&operations_research::sat::_LinearConstraintProto_default_instance_;
      }
      operations_research::sat::LinearConstraintProto::MergeFrom(v84, v85);
      return this;
    case 13:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 13;
      uint64_t v86 = *((void *)this + 1);
      v87 = (google::protobuf::Arena *)(v86 & 0xFFFFFFFFFFFFFFFELL);
      if (v86) {
        v87 = *(google::protobuf::Arena **)v87;
      }
      unint64_t v88 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v87);
      unint64_t v15 = v88;
      *((void *)this + 6) = v88;
      if (*((_DWORD *)a2 + 15) == 13) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
      }
      uint64_t v89 = v16[1];
      if (v89)
      {
        v90 = (unint64_t *)(v88 + 8);
        uint64_t v91 = *(void *)(v15 + 8);
        if (v91) {
          v92 = (char *)((v91 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v92 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v90);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v92, (const google::protobuf::UnknownFieldSet *)((v89 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (v21) {
        goto LABEL_230;
      }
      return this;
    case 14:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 14;
      uint64_t v93 = *((void *)this + 1);
      v94 = (google::protobuf::Arena *)(v93 & 0xFFFFFFFFFFFFFFFELL);
      if (v93) {
        v94 = *(google::protobuf::Arena **)v94;
      }
      unint64_t v95 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v94);
      unint64_t v96 = v95;
      *((void *)this + 6) = v95;
      if (*((_DWORD *)a2 + 15) == 14) {
        v97 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        v97 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
      uint64_t v98 = v97[1];
      if (v98)
      {
        v99 = (unint64_t *)(v95 + 8);
        uint64_t v100 = *(void *)(v96 + 8);
        if (v100) {
          v101 = (char *)((v100 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v101 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v99);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v101, (const google::protobuf::UnknownFieldSet *)((v98 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v102 = *((_DWORD *)v97 + 4);
      if (v102)
      {
        uint64_t v103 = *(int *)(v96 + 16);
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v96 + 16), v103 + v102);
        uint64_t v104 = *(void *)(v96 + 24);
        *(_DWORD *)(v96 + 16) += *((_DWORD *)v97 + 4);
        memcpy((void *)(v104 + 4 * v103), (const void *)v97[3], 4 * *((int *)v97 + 4));
      }
      int v105 = *((_DWORD *)v97 + 9);
      if (v105) {
        *(_DWORD *)(v96 + 36) = v105;
      }
      int v106 = *((_DWORD *)v97 + 10);
      if (!v106) {
        return this;
      }
      *(_DWORD *)(v96 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v106;
      return this;
    case 15:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 15;
      uint64_t v107 = *((void *)this + 1);
      v108 = (google::protobuf::Arena *)(v107 & 0xFFFFFFFFFFFFFFFELL);
      if (v107) {
        v108 = *(google::protobuf::Arena **)v108;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v108);
      *((void *)this + 6) = v109;
      if (*((_DWORD *)a2 + 15) == 15) {
        v110 = (const operations_research::sat::CircuitConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v110 = (const operations_research::sat::CircuitConstraintProto *)&operations_research::sat::_CircuitConstraintProto_default_instance_;
      }
      operations_research::sat::CircuitConstraintProto::MergeFrom(v109, v110);
      return this;
    case 16:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 16;
      uint64_t v111 = *((void *)this + 1);
      v112 = (google::protobuf::Arena *)(v111 & 0xFFFFFFFFFFFFFFFELL);
      if (v111) {
        v112 = *(google::protobuf::Arena **)v112;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v112);
      *((void *)this + 6) = v113;
      if (*((_DWORD *)a2 + 15) == 16) {
        v114 = (const operations_research::sat::TableConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v114 = (const operations_research::sat::TableConstraintProto *)&operations_research::sat::_TableConstraintProto_default_instance_;
      }
      operations_research::sat::TableConstraintProto::MergeFrom(v113, v114);
      return this;
    case 17:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 17;
      uint64_t v115 = *((void *)this + 1);
      v116 = (google::protobuf::Arena *)(v115 & 0xFFFFFFFFFFFFFFFELL);
      if (v115) {
        v116 = *(google::protobuf::Arena **)v116;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(v116);
      *((void *)this + 6) = v117;
      if (*((_DWORD *)a2 + 15) == 17) {
        v118 = (const operations_research::sat::AutomatonConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v118 = (const operations_research::sat::AutomatonConstraintProto *)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
      }
      operations_research::sat::AutomatonConstraintProto::MergeFrom(v117, v118);
      return this;
    case 18:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 18;
      uint64_t v119 = *((void *)this + 1);
      v120 = (google::protobuf::Arena *)(v119 & 0xFFFFFFFFFFFFFFFELL);
      if (v119) {
        v120 = *(google::protobuf::Arena **)v120;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(v120);
      *((void *)this + 6) = v121;
      if (*((_DWORD *)a2 + 15) == 18) {
        v122 = (const operations_research::sat::InverseConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v122 = (const operations_research::sat::InverseConstraintProto *)&operations_research::sat::_InverseConstraintProto_default_instance_;
      }
      operations_research::sat::InverseConstraintProto::MergeFrom(v121, v122);
      return this;
    case 19:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 19;
      uint64_t v123 = *((void *)this + 1);
      v124 = (google::protobuf::Arena *)(v123 & 0xFFFFFFFFFFFFFFFELL);
      if (v123) {
        v124 = *(google::protobuf::Arena **)v124;
      }
      v125 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v124);
      v126 = v125;
      *((void *)this + 6) = v125;
      if (*((_DWORD *)a2 + 15) == 19) {
        v127 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        v127 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      }
      uint64_t v128 = v127[1];
      if (v128)
      {
        v129 = v125 + 1;
        uint64_t v130 = v126[1];
        if (v130) {
          v131 = (char *)((v130 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v131 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v129);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v131, (const google::protobuf::UnknownFieldSet *)((v128 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v132 = *((_DWORD *)v127 + 4);
      if (v132) {
        *((_DWORD *)v126 + 4) = v132;
      }
      int v133 = *((_DWORD *)v127 + 5);
      if (v133) {
        *((_DWORD *)v126 + 5) = v133;
      }
      int v134 = *((_DWORD *)v127 + 6);
      if (!v134) {
        return this;
      }
      *((_DWORD *)v126 + 6) = v134;
      return this;
    case 20:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 20;
      uint64_t v135 = *((void *)this + 1);
      v136 = (google::protobuf::Arena *)(v135 & 0xFFFFFFFFFFFFFFFELL);
      if (v135) {
        v136 = *(google::protobuf::Arena **)v136;
      }
      unint64_t v137 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v136);
      unint64_t v15 = v137;
      *((void *)this + 6) = v137;
      if (*((_DWORD *)a2 + 15) == 20) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
      }
      uint64_t v138 = v16[1];
      if (v138)
      {
        v139 = (unint64_t *)(v137 + 8);
        uint64_t v140 = *(void *)(v15 + 8);
        if (v140) {
          v141 = (char *)((v140 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v141 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v139);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v141, (const google::protobuf::UnknownFieldSet *)((v138 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (v21) {
        goto LABEL_230;
      }
      return this;
    case 21:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 21;
      uint64_t v142 = *((void *)this + 1);
      v143 = (google::protobuf::Arena *)(v142 & 0xFFFFFFFFFFFFFFFELL);
      if (v142) {
        v143 = *(google::protobuf::Arena **)v143;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(v143);
      *((void *)this + 6) = v144;
      if (*((_DWORD *)a2 + 15) == 21) {
        v145 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v145 = (const operations_research::sat::NoOverlap2DConstraintProto *)&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
      }
      operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(v144, v145);
      return this;
    case 22:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 22;
      uint64_t v146 = *((void *)this + 1);
      v147 = (google::protobuf::Arena *)(v146 & 0xFFFFFFFFFFFFFFFELL);
      if (v146) {
        v147 = *(google::protobuf::Arena **)v147;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v147);
      *((void *)this + 6) = v148;
      if (*((_DWORD *)a2 + 15) == 22) {
        v149 = (const operations_research::sat::CumulativeConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v149 = (const operations_research::sat::CumulativeConstraintProto *)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
      }
      operations_research::sat::CumulativeConstraintProto::MergeFrom(v148, v149);
      return this;
    case 23:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 23;
      uint64_t v150 = *((void *)this + 1);
      v151 = (google::protobuf::Arena *)(v150 & 0xFFFFFFFFFFFFFFFELL);
      if (v150) {
        v151 = *(google::protobuf::Arena **)v151;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(v151);
      *((void *)this + 6) = v152;
      if (*((_DWORD *)a2 + 15) == 23) {
        v153 = (const operations_research::sat::RoutesConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v153 = (const operations_research::sat::RoutesConstraintProto *)&operations_research::sat::_RoutesConstraintProto_default_instance_;
      }
      operations_research::sat::RoutesConstraintProto::MergeFrom(v152, v153);
      return this;
    case 24:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 24;
      uint64_t v154 = *((void *)this + 1);
      v155 = (google::protobuf::Arena *)(v154 & 0xFFFFFFFFFFFFFFFELL);
      if (v154) {
        v155 = *(google::protobuf::Arena **)v155;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(v155);
      *((void *)this + 6) = v156;
      if (*((_DWORD *)a2 + 15) == 24) {
        v157 = (const operations_research::sat::ReservoirConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v157 = (const operations_research::sat::ReservoirConstraintProto *)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
      }
      operations_research::sat::ReservoirConstraintProto::MergeFrom(v156, v157);
      return this;
    case 25:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 25;
      uint64_t v158 = *((void *)this + 1);
      v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
      if (v158) {
        v159 = *(google::protobuf::Arena **)v159;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(v159);
      *((void *)this + 6) = v160;
      if (*((_DWORD *)a2 + 15) == 25) {
        v161 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((void *)a2 + 6);
      }
      else {
        v161 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
      }
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v160, v161);
      return this;
    case 26:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 26;
      uint64_t v162 = *((void *)this + 1);
      v163 = (google::protobuf::Arena *)(v162 & 0xFFFFFFFFFFFFFFFELL);
      if (v162) {
        v163 = *(google::protobuf::Arena **)v163;
      }
      unint64_t v164 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v163);
      unint64_t v15 = v164;
      *((void *)this + 6) = v164;
      if (*((_DWORD *)a2 + 15) == 26) {
        uint64_t v16 = (uint64_t *)*((void *)a2 + 6);
      }
      else {
        uint64_t v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
      }
      uint64_t v165 = v16[1];
      if (v165)
      {
        v166 = (unint64_t *)(v164 + 8);
        uint64_t v167 = *(void *)(v15 + 8);
        if (v167) {
          v168 = (char *)((v167 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          v168 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v166);
        }
        google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v168, (const google::protobuf::UnknownFieldSet *)((v165 & 0xFFFFFFFFFFFFFFFELL) + 8));
      }
      int v21 = *((_DWORD *)v16 + 4);
      if (!v21) {
        return this;
      }
LABEL_230:
      uint64_t v169 = *(int *)(v15 + 16);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v15 + 16), v169 + v21);
      uint64_t v170 = *(void *)(v15 + 24);
      *(_DWORD *)(v15 + 16) += *((_DWORD *)v16 + 4);
      memcpy((void *)(v170 + 4 * v169), (const void *)v16[3], 4 * *((int *)v16 + 4));
      return this;
    case 27:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      int v171 = 27;
      goto LABEL_233;
    case 28:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      int v171 = 28;
LABEL_233:
      *((_DWORD *)this + 15) = v171;
      uint64_t v172 = *((void *)this + 1);
      v173 = (google::protobuf::Arena *)(v172 & 0xFFFFFFFFFFFFFFFELL);
      if (v172) {
        v173 = *(google::protobuf::Arena **)v173;
      }
      v174 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v173);
      *((void *)this + 6) = v174;
      if (*((_DWORD *)a2 + 15) == v11) {
        v175 = (const operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
      }
      else {
        v175 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
      }
      operations_research::sat::LinearArgumentProto::MergeFrom((uint64_t)v174, v175);
      return this;
    default:
      return this;
  }
}

void sub_23CBE5F48(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::ConstraintProto::~ConstraintProto(operations_research::sat::ConstraintProto *this)
{
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  if (*((_DWORD *)this + 15)) {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      uint64_t v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        uint64_t v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(void *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x23ECF2BC0](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::ConstraintProto::~ConstraintProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::ConstraintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void operations_research::sat::ConstraintProto::Clear(operations_research::sat::ConstraintProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_4:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    uint64_t v3 = *((void *)this + 1);
    if ((v3 & 1) == 0) {
      return;
    }
    goto LABEL_7;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_4;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 1) == 0) {
    return;
  }
LABEL_7:
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

std::string::value_type *operations_research::sat::ConstraintProto::_InternalParse(operations_research::sat::ConstraintProto *this, std::string::value_type *__s, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t SizeFallback = __s;
  unint64_t v137 = (google::protobuf::internal *)__s;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::ConstraintProto *)((char *)this + 16);
  uint64_t v10 = (std::string **)((char *)this + 40);
  while (2)
  {
    if ((unint64_t)SizeFallback >= *(void *)a3)
    {
      if (&SizeFallback[-*((void *)a3 + 1)] == (std::string::value_type *)*((int *)a3 + 7)) {
        return SizeFallback;
      }
      uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, SizeFallback, *((_DWORD *)a3 + 23));
      unint64_t v137 = (google::protobuf::internal *)SizeFallback;
      if (__s) {
        return SizeFallback;
      }
    }
    int v11 = SizeFallback + 1;
    unsigned int v12 = *SizeFallback;
    if (*SizeFallback < 0)
    {
      unsigned int v14 = v12 + (*v11 << 7);
      unsigned int v12 = v14 - 128;
      if (*v11 < 0)
      {
        uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v14 - 128));
        unint64_t v137 = TagFallback;
        if (!TagFallback) {
          return 0;
        }
        int v11 = (std::string::value_type *)TagFallback;
        unsigned int v12 = __s;
        unsigned int v13 = (__s >> 3) - 1;
      }
      else
      {
        int v11 = SizeFallback + 2;
        unint64_t v137 = (google::protobuf::internal *)(SizeFallback + 2);
        unsigned int v13 = (v12 >> 3) - 1;
        if (v13 > 0x1B) {
          goto LABEL_272;
        }
      }
    }
    else
    {
      unint64_t v137 = (google::protobuf::internal *)(SizeFallback + 1);
      unsigned int v13 = (v12 >> 3) - 1;
      if (v13 > 0x1B) {
        goto LABEL_272;
      }
    }
    switch(v13)
    {
      case 0u:
        if (v12 != 10) {
          goto LABEL_272;
        }
        uint64_t v16 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          uint64_t v17 = *v10;
          if (*v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_16;
          }
LABEL_15:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v10, v16, (long long *)&google::protobuf::internal::fixed_address_empty_string);
          uint64_t v17 = *v10;
          int v11 = (std::string::value_type *)v137;
          goto LABEL_16;
        }
        uint64_t v16 = *(google::protobuf::Arena **)v16;
        uint64_t v17 = *v10;
        if (*v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_15;
        }
LABEL_16:
        unint64_t v137 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v17, v11, (uint64_t)a3);
        if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v130 = (std::string *)v17->__r_.__value_.__r.__words[0];
          size_t size = v17->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0) {
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v17->__r_.__value_.__l.__size_, "size_t to int conversion", v18);
          }
          uint64_t v17 = v130;
        }
        else
        {
          size_t size = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        }
        BOOL v131 = google::protobuf::internal::VerifyUTF8(v17, size, (google::protobuf::internal *)"operations_research.sat.ConstraintProto.name");
        uint64_t SizeFallback = (std::string::value_type *)v137;
        if (v137) {
          int v127 = 2;
        }
        else {
          int v127 = 4;
        }
        if (v131) {
          goto LABEL_248;
        }
        return 0;
      case 1u:
        if (v12 == 18)
        {
          uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, a3, a4);
          goto LABEL_279;
        }
        if (v12 == 16)
        {
          int v132 = google::protobuf::internal::ReadVarint64(&v137, (const char **)__s);
          uint64_t v133 = *((unsigned int *)this + 4);
          if (v133 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v133 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v133) = v132;
          *((_DWORD *)this + 4) = v133 + 1;
          uint64_t SizeFallback = (std::string::value_type *)v137;
          if (!v137) {
            return SizeFallback;
          }
LABEL_247:
          int v127 = 2;
LABEL_248:
          if (v127 != 2) {
            return 0;
          }
          continue;
        }
LABEL_272:
        if (v12) {
          BOOL v134 = (v12 & 7) == 4;
        }
        else {
          BOOL v134 = 1;
        }
        if (!v134)
        {
          if (*v8)
          {
            uint64_t v135 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            uint64_t v135 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
            int v11 = (std::string::value_type *)v137;
          }
          uint64_t v20 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v135, (google::protobuf::UnknownFieldSet *)v11, (const char *)a3, a5);
LABEL_279:
          uint64_t SizeFallback = (std::string::value_type *)v20;
          unint64_t v137 = v20;
          if (!v20) {
            return SizeFallback;
          }
          goto LABEL_247;
        }
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
        return v11;
      case 2u:
        if (v12 != 26) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 3) {
          goto LABEL_129;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 3;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_28;
      case 3u:
        if (v12 != 34) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 4) {
          goto LABEL_129;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 4;
        uint64_t v25 = *((void *)this + 1);
        uint64_t v22 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
        if (v25) {
          goto LABEL_28;
        }
        goto LABEL_23;
      case 4u:
        if (v12 != 42) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 5) {
          goto LABEL_129;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 5;
        uint64_t v26 = *((void *)this + 1);
        uint64_t v22 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
        if (v26) {
          goto LABEL_28;
        }
        goto LABEL_23;
      case 6u:
        if (v12 != 58) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 7) {
          goto LABEL_52;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 7;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
        if ((v27 & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_41;
      case 7u:
        if (v12 != 66) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 8) {
          goto LABEL_52;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 8;
        uint64_t v32 = *((void *)this + 1);
        uint64_t v28 = (google::protobuf::Arena *)(v32 & 0xFFFFFFFFFFFFFFFELL);
        if (v32) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 8u:
        if (v12 != 74) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 9) {
          goto LABEL_52;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 9;
        uint64_t v33 = *((void *)this + 1);
        uint64_t v28 = (google::protobuf::Arena *)(v33 & 0xFFFFFFFFFFFFFFFELL);
        if (v33) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 9u:
        if (v12 != 82) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 10) {
          goto LABEL_52;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 10;
        uint64_t v34 = *((void *)this + 1);
        uint64_t v28 = (google::protobuf::Arena *)(v34 & 0xFFFFFFFFFFFFFFFELL);
        if (v34) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 0xAu:
        if (v12 != 90) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 11)
        {
LABEL_52:
          uint64_t v30 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
          unint64_t v31 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_37;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 11;
          uint64_t v73 = *((void *)this + 1);
          uint64_t v28 = (google::protobuf::Arena *)(v73 & 0xFFFFFFFFFFFFFFFELL);
          if (v73) {
LABEL_41:
          }
            uint64_t v28 = *(google::protobuf::Arena **)v28;
LABEL_36:
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v28);
          uint64_t v30 = v29;
          *((void *)this + 6) = v29;
          int v11 = (std::string::value_type *)v137;
          unint64_t v31 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_37:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_54;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v31);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_54:
        uint64_t v35 = *((void *)a3 + 1);
        int v36 = v31 + SizeFallback - v35;
        *(void *)a3 = v35 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v35) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v35, 1);
        LODWORD(v35) = v35 - 1;
        *((_DWORD *)a3 + 22) = v35;
        if ((int)v35 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::IntegerArgumentProto::_InternalParse(v30, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0xBu:
        if (v12 != 98) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 12)
        {
          uint64_t v39 = (operations_research::sat::LinearConstraintProto *)*((void *)this + 6);
          unint64_t v40 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_151;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 12;
          uint64_t v74 = *((void *)this + 1);
          uint64_t v75 = (google::protobuf::Arena *)(v74 & 0xFFFFFFFFFFFFFFFELL);
          if (v74) {
            uint64_t v75 = *(google::protobuf::Arena **)v75;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v75);
          uint64_t v39 = v76;
          *((void *)this + 6) = v76;
          int v11 = (std::string::value_type *)v137;
          unint64_t v40 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_151:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_152;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v40);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_152:
        uint64_t v77 = *((void *)a3 + 1);
        int v36 = v40 + SizeFallback - v77;
        *(void *)a3 = v77 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v77) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v77, 1);
        LODWORD(v77) = v77 - 1;
        *((_DWORD *)a3 + 22) = v77;
        if ((int)v77 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::LinearConstraintProto::_InternalParse(v39, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0xCu:
        if (v12 != 106) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 13)
        {
          uint64_t v41 = (operations_research::sat::AllDifferentConstraintProto *)*((void *)this + 6);
          unint64_t v42 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_158;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 13;
          uint64_t v78 = *((void *)this + 1);
          v79 = (google::protobuf::Arena *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          if (v78) {
            v79 = *(google::protobuf::Arena **)v79;
          }
          uint64_t v41 = (operations_research::sat::AllDifferentConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v79);
          *((void *)this + 6) = v41;
          int v11 = (std::string::value_type *)v137;
          unint64_t v42 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_158:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_159;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v42);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_159:
        uint64_t v80 = *((void *)a3 + 1);
        int v36 = v42 + SizeFallback - v80;
        *(void *)a3 = v80 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v80, 1);
        LODWORD(v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v80 - 1;
        *((_DWORD *)a3 + 22) = v80;
        if ((int)v80 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::AllDifferentConstraintProto::_InternalParse(v41, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0xDu:
        if (v12 != 114) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 14)
        {
          uint64_t v43 = (operations_research::sat::ElementConstraintProto *)*((void *)this + 6);
          unint64_t v44 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_165;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 14;
          uint64_t v81 = *((void *)this + 1);
          uint64_t v82 = (google::protobuf::Arena *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v81) {
            uint64_t v82 = *(google::protobuf::Arena **)v82;
          }
          uint64_t v43 = (operations_research::sat::ElementConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v82);
          *((void *)this + 6) = v43;
          int v11 = (std::string::value_type *)v137;
          unint64_t v44 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_165:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_166;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v44);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_166:
        uint64_t v83 = *((void *)a3 + 1);
        int v36 = v44 + SizeFallback - v83;
        *(void *)a3 = v83 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v83) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v83, 1);
        LODWORD(v83) = v83 - 1;
        *((_DWORD *)a3 + 22) = v83;
        if ((int)v83 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::ElementConstraintProto::_InternalParse(v43, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0xEu:
        if (v12 != 122) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 15)
        {
          int v45 = (operations_research::sat::CircuitConstraintProto *)*((void *)this + 6);
          unint64_t v46 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_172;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 15;
          uint64_t v84 = *((void *)this + 1);
          v85 = (google::protobuf::Arena *)(v84 & 0xFFFFFFFFFFFFFFFELL);
          if (v84) {
            v85 = *(google::protobuf::Arena **)v85;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v85);
          int v45 = v86;
          *((void *)this + 6) = v86;
          int v11 = (std::string::value_type *)v137;
          unint64_t v46 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_172:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_173;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v46);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_173:
        uint64_t v87 = *((void *)a3 + 1);
        int v36 = v46 + SizeFallback - v87;
        *(void *)a3 = v87 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v87) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v87, 1);
        LODWORD(v87) = v87 - 1;
        *((_DWORD *)a3 + 22) = v87;
        if ((int)v87 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::CircuitConstraintProto::_InternalParse(v45, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0xFu:
        if (v12 != 130) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 16)
        {
          uint64_t v47 = (operations_research::sat::TableConstraintProto *)*((void *)this + 6);
          unint64_t v48 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_179;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 16;
          uint64_t v88 = *((void *)this + 1);
          uint64_t v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
          if (v88) {
            uint64_t v89 = *(google::protobuf::Arena **)v89;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v89);
          uint64_t v47 = v90;
          *((void *)this + 6) = v90;
          int v11 = (std::string::value_type *)v137;
          unint64_t v48 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_179:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_180;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v48);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_180:
        uint64_t v91 = *((void *)a3 + 1);
        int v36 = v48 + SizeFallback - v91;
        *(void *)a3 = v91 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v91) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v91, 1);
        LODWORD(v91) = v91 - 1;
        *((_DWORD *)a3 + 22) = v91;
        if ((int)v91 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::TableConstraintProto::_InternalParse(v47, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x10u:
        if (v12 != 138) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 17)
        {
          unint64_t v49 = (operations_research::sat::AutomatonConstraintProto *)*((void *)this + 6);
          unint64_t v50 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_186;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 17;
          uint64_t v92 = *((void *)this + 1);
          uint64_t v93 = (google::protobuf::Arena *)(v92 & 0xFFFFFFFFFFFFFFFELL);
          if (v92) {
            uint64_t v93 = *(google::protobuf::Arena **)v93;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(v93);
          unint64_t v49 = v94;
          *((void *)this + 6) = v94;
          int v11 = (std::string::value_type *)v137;
          unint64_t v50 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_186:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_187;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v50);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_187:
        uint64_t v95 = *((void *)a3 + 1);
        int v36 = v50 + SizeFallback - v95;
        *(void *)a3 = v95 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v95) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v95, 1);
        LODWORD(v95) = v95 - 1;
        *((_DWORD *)a3 + 22) = v95;
        if ((int)v95 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::AutomatonConstraintProto::_InternalParse(v49, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x11u:
        if (v12 != 146) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 18)
        {
          unint64_t v51 = (operations_research::sat::InverseConstraintProto *)*((void *)this + 6);
          unint64_t v52 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_193;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 18;
          uint64_t v96 = *((void *)this + 1);
          v97 = (google::protobuf::Arena *)(v96 & 0xFFFFFFFFFFFFFFFELL);
          if (v96) {
            v97 = *(google::protobuf::Arena **)v97;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(v97);
          unint64_t v51 = v98;
          *((void *)this + 6) = v98;
          int v11 = (std::string::value_type *)v137;
          unint64_t v52 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_193:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_194;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v52);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_194:
        uint64_t v99 = *((void *)a3 + 1);
        int v36 = v52 + SizeFallback - v99;
        *(void *)a3 = v99 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v99) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v99, 1);
        LODWORD(v99) = v99 - 1;
        *((_DWORD *)a3 + 22) = v99;
        if ((int)v99 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::InverseConstraintProto::_InternalParse(v51, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x12u:
        if (v12 != 154) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 19)
        {
          unint64_t v53 = (operations_research::sat::IntervalConstraintProto *)*((void *)this + 6);
          unint64_t v54 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_200;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 19;
          uint64_t v100 = *((void *)this + 1);
          v101 = (google::protobuf::Arena *)(v100 & 0xFFFFFFFFFFFFFFFELL);
          if (v100) {
            v101 = *(google::protobuf::Arena **)v101;
          }
          unint64_t v53 = (operations_research::sat::IntervalConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v101);
          *((void *)this + 6) = v53;
          int v11 = (std::string::value_type *)v137;
          unint64_t v54 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_200:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_201;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v54);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_201:
        uint64_t v102 = *((void *)a3 + 1);
        int v36 = v54 + SizeFallback - v102;
        *(void *)a3 = v102 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v102) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v102, 1);
        LODWORD(v102) = v102 - 1;
        *((_DWORD *)a3 + 22) = v102;
        if ((int)v102 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::IntervalConstraintProto::_InternalParse(v53, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, (uint64_t)a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x13u:
        if (v12 != 162) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 20)
        {
          unint64_t v55 = (operations_research::sat::NoOverlapConstraintProto *)*((void *)this + 6);
          unint64_t v56 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_207;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 20;
          uint64_t v103 = *((void *)this + 1);
          uint64_t v104 = (google::protobuf::Arena *)(v103 & 0xFFFFFFFFFFFFFFFELL);
          if (v103) {
            uint64_t v104 = *(google::protobuf::Arena **)v104;
          }
          unint64_t v55 = (operations_research::sat::NoOverlapConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v104);
          *((void *)this + 6) = v55;
          int v11 = (std::string::value_type *)v137;
          unint64_t v56 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_207:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_208;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v56);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_208:
        uint64_t v105 = *((void *)a3 + 1);
        int v36 = v56 + SizeFallback - v105;
        *(void *)a3 = v105 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v105) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v105, 1);
        LODWORD(v105) = v105 - 1;
        *((_DWORD *)a3 + 22) = v105;
        if ((int)v105 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::NoOverlapConstraintProto::_InternalParse(v55, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x14u:
        if (v12 != 170) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 21)
        {
          unint64_t v57 = (operations_research::sat::NoOverlap2DConstraintProto *)*((void *)this + 6);
          unint64_t v58 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_214;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 21;
          uint64_t v106 = *((void *)this + 1);
          uint64_t v107 = (google::protobuf::Arena *)(v106 & 0xFFFFFFFFFFFFFFFELL);
          if (v106) {
            uint64_t v107 = *(google::protobuf::Arena **)v107;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(v107);
          unint64_t v57 = v108;
          *((void *)this + 6) = v108;
          int v11 = (std::string::value_type *)v137;
          unint64_t v58 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_214:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_215;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v58);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_215:
        uint64_t v109 = *((void *)a3 + 1);
        int v36 = v58 + SizeFallback - v109;
        *(void *)a3 = v109 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v109) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v109, 1);
        LODWORD(v109) = v109 - 1;
        *((_DWORD *)a3 + 22) = v109;
        if ((int)v109 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::NoOverlap2DConstraintProto::_InternalParse(v57, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x15u:
        if (v12 != 178) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 22)
        {
          uint64_t v59 = (operations_research::sat::CumulativeConstraintProto *)*((void *)this + 6);
          unint64_t v60 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_221;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 22;
          uint64_t v110 = *((void *)this + 1);
          uint64_t v111 = (google::protobuf::Arena *)(v110 & 0xFFFFFFFFFFFFFFFELL);
          if (v110) {
            uint64_t v111 = *(google::protobuf::Arena **)v111;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v111);
          uint64_t v59 = v112;
          *((void *)this + 6) = v112;
          int v11 = (std::string::value_type *)v137;
          unint64_t v60 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_221:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_222;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v60);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_222:
        uint64_t v113 = *((void *)a3 + 1);
        int v36 = v60 + SizeFallback - v113;
        *(void *)a3 = v113 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v113) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v113, 1);
        LODWORD(v113) = v113 - 1;
        *((_DWORD *)a3 + 22) = v113;
        if ((int)v113 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::CumulativeConstraintProto::_InternalParse(v59, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x16u:
        if (v12 != 186) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 23)
        {
          uint64_t v61 = (operations_research::sat::RoutesConstraintProto *)*((void *)this + 6);
          unint64_t v62 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_228;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 23;
          uint64_t v114 = *((void *)this + 1);
          uint64_t v115 = (google::protobuf::Arena *)(v114 & 0xFFFFFFFFFFFFFFFELL);
          if (v114) {
            uint64_t v115 = *(google::protobuf::Arena **)v115;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(v115);
          uint64_t v61 = v116;
          *((void *)this + 6) = v116;
          int v11 = (std::string::value_type *)v137;
          unint64_t v62 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_228:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_229;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v62);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_229:
        uint64_t v117 = *((void *)a3 + 1);
        int v36 = v62 + SizeFallback - v117;
        *(void *)a3 = v117 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v117) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v117, 1);
        LODWORD(v117) = v117 - 1;
        *((_DWORD *)a3 + 22) = v117;
        if ((int)v117 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::RoutesConstraintProto::_InternalParse(v61, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x17u:
        if (v12 != 194) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 24)
        {
          unsigned int v63 = (operations_research::sat::ReservoirConstraintProto *)*((void *)this + 6);
          unint64_t v64 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_235;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 24;
          uint64_t v118 = *((void *)this + 1);
          uint64_t v119 = (google::protobuf::Arena *)(v118 & 0xFFFFFFFFFFFFFFFELL);
          if (v118) {
            uint64_t v119 = *(google::protobuf::Arena **)v119;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(v119);
          unsigned int v63 = v120;
          *((void *)this + 6) = v120;
          int v11 = (std::string::value_type *)v137;
          unint64_t v64 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_235:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_236;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v64);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_236:
        uint64_t v121 = *((void *)a3 + 1);
        int v36 = v64 + SizeFallback - v121;
        *(void *)a3 = v121 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v121) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v121, 1);
        LODWORD(v121) = v121 - 1;
        *((_DWORD *)a3 + 22) = v121;
        if ((int)v121 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::ReservoirConstraintProto::_InternalParse(v63, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x18u:
        if (v12 != 202) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 25)
        {
          unsigned int v65 = (operations_research::sat::CircuitCoveringConstraintProto *)*((void *)this + 6);
          unint64_t v66 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_242;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 25;
          uint64_t v122 = *((void *)this + 1);
          uint64_t v123 = (google::protobuf::Arena *)(v122 & 0xFFFFFFFFFFFFFFFELL);
          if (v122) {
            uint64_t v123 = *(google::protobuf::Arena **)v123;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(v123);
          unsigned int v65 = v124;
          *((void *)this + 6) = v124;
          int v11 = (std::string::value_type *)v137;
          unint64_t v66 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_242:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_243;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v66);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_243:
        uint64_t v125 = *((void *)a3 + 1);
        int v36 = v66 + SizeFallback - v125;
        *(void *)a3 = v125 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v125) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v125, 1);
        LODWORD(v125) = v125 - 1;
        *((_DWORD *)a3 + 22) = v125;
        if ((int)v125 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::CircuitCoveringConstraintProto::_InternalParse(v65, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (SizeFallback) {
          goto LABEL_245;
        }
        return SizeFallback;
      case 0x19u:
        if (v12 != 210) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 26)
        {
LABEL_129:
          uint64_t v23 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
          unint64_t v24 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 26;
          uint64_t v128 = *((void *)this + 1);
          uint64_t v22 = (google::protobuf::Arena *)(v128 & 0xFFFFFFFFFFFFFFFELL);
          if (v128) {
LABEL_28:
          }
            uint64_t v22 = *(google::protobuf::Arena **)v22;
LABEL_23:
          uint64_t v23 = (operations_research::sat::BoolArgumentProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v22);
          *((void *)this + 6) = v23;
          int v11 = (std::string::value_type *)v137;
          unint64_t v24 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_24:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_131;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v24);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_131:
        uint64_t v67 = *((void *)a3 + 1);
        int v36 = v24 + SizeFallback - v67;
        *(void *)a3 = v67 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v67) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v67, 1);
        LODWORD(v67) = v67 - 1;
        *((_DWORD *)a3 + 22) = v67;
        if ((int)v67 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::BoolArgumentProto::_InternalParse(v23, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
        goto LABEL_245;
      case 0x1Au:
        if (v12 != 218) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 27) {
          goto LABEL_141;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 27;
        uint64_t v68 = *((void *)this + 1);
        uint64_t v69 = (google::protobuf::Arena *)(v68 & 0xFFFFFFFFFFFFFFFELL);
        if ((v68 & 1) == 0) {
          goto LABEL_137;
        }
        goto LABEL_253;
      case 0x1Bu:
        if (v12 != 226) {
          goto LABEL_272;
        }
        if (*((_DWORD *)this + 15) == 28)
        {
LABEL_141:
          v70 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
          unint64_t v71 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_138;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 28;
          uint64_t v129 = *((void *)this + 1);
          uint64_t v69 = (google::protobuf::Arena *)(v129 & 0xFFFFFFFFFFFFFFFELL);
          if (v129) {
LABEL_253:
          }
            uint64_t v69 = *(google::protobuf::Arena **)v69;
LABEL_137:
          v70 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v69);
          *((void *)this + 6) = v70;
          int v11 = (std::string::value_type *)v137;
          unint64_t v71 = *(unsigned __int8 *)v137;
          if ((*(char *)v137 & 0x80000000) == 0)
          {
LABEL_138:
            uint64_t SizeFallback = v11 + 1;
            goto LABEL_143;
          }
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)v71);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_143:
        uint64_t v72 = *((void *)a3 + 1);
        int v36 = v71 + SizeFallback - v72;
        *(void *)a3 = v72 + (v36 & (v36 >> 31));
        int v37 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v36;
        LODWORD(v72) = *((_DWORD *)a3 + 22);
        BOOL v38 = __OFSUB__(v72, 1);
        LODWORD(v72) = v72 - 1;
        *((_DWORD *)a3 + 22) = v72;
        if ((int)v72 < 0 != v38) {
          return 0;
        }
        uint64_t SizeFallback = (std::string::value_type *)operations_research::sat::LinearArgumentProto::_InternalParse(v70, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, a4, a5);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_245:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v126 = *((_DWORD *)a3 + 7) + v37 - v36;
        *((_DWORD *)a3 + 7) = v126;
        *(void *)a3 = *((void *)a3 + 1) + (v126 & (v126 >> 31));
        unint64_t v137 = (google::protobuf::internal *)SizeFallback;
        goto LABEL_247;
      default:
        goto LABEL_272;
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::ConstraintProto::_InternalSerialize(operations_research::sat::ConstraintProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)v7[1];
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v7 = (uint64_t *)*v7;
  }
  else
  {
    uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_14;
    }
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.ConstraintProto.name");
  uint64_t v9 = *((void *)this + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    int64_t v10 = *(void *)(v9 + 8);
    if (v10 > 127) {
      goto LABEL_29;
    }
  }
  else
  {
    int64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(void *)a3 - (void)a2 + 14 >= v10)
  {
    *(unsigned char *)a2 = 10;
    *((unsigned char *)a2 + 1) = v10;
    if (*(char *)(v9 + 23) >= 0) {
      int v11 = (const void *)v9;
    }
    else {
      int v11 = *(const void **)v9;
    }
    memcpy((char *)a2 + 2, v11, v10);
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
    int v12 = *((_DWORD *)this + 8);
    if (v12 >= 1) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
  int v12 = *((_DWORD *)this + 8);
  if (v12 >= 1)
  {
LABEL_15:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(unsigned char *)a2 = 18;
      unsigned int v13 = (char *)a2 + 1;
      if (v12 < 0x80) {
        goto LABEL_17;
      }
    }
    else
    {
      *(unsigned char *)a2 = 18;
      unsigned int v13 = (char *)a2 + 1;
      if (v12 < 0x80)
      {
LABEL_17:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *unsigned int v13 = v12;
        unsigned int v14 = (int *)*((void *)this + 3);
        unint64_t v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            unint64_t v21 = *v14++;
            unint64_t v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_22:
              *(unsigned char *)a2 = v16 | 0x80;
              unint64_t v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((unsigned char *)a2 - 1) = v18 | 0x80;
                  unint64_t v19 = v18 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  unint64_t v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *((unsigned char *)a2 - 1) = v19;
              }
              else
              {
                *((unsigned char *)a2 + 1) = v18;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_19;
            }
          }
          else
          {
            unint64_t v17 = *v14++;
            unint64_t v16 = v17;
            if (v17 > 0x7F) {
              goto LABEL_22;
            }
          }
          *(unsigned char *)a2 = v16;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_19:
          if (v14 >= v15) {
            goto LABEL_30;
          }
        }
      }
    }
    do
    {
      *v13++ = v12 | 0x80;
      unsigned int v28 = v12 >> 14;
      int v12 = v12 >> 7;
    }
    while (v28);
    a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
    goto LABEL_17;
  }
LABEL_30:
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 3)
  {
    if (v22 != 4) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v25 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 26;
    unsigned int v26 = *((_DWORD *)v25 + 9);
    if (v26 <= 0x7F) {
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v25 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 26;
    unsigned int v26 = *((_DWORD *)v25 + 9);
    if (v26 <= 0x7F)
    {
LABEL_59:
      *((unsigned char *)a2 + 1) = v26;
      uint64_t v27 = (char *)a2 + 2;
      goto LABEL_69;
    }
  }
  *((unsigned char *)a2 + 1) = v26 | 0x80;
  unsigned int v29 = v26 >> 7;
  if (v26 >> 14)
  {
    uint64_t v27 = (char *)a2 + 3;
    do
    {
      *(v27 - 1) = v29 | 0x80;
      unsigned int v30 = v29 >> 7;
      ++v27;
      unsigned int v31 = v29 >> 14;
      v29 >>= 7;
    }
    while (v31);
    *(v27 - 1) = v30;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v29;
    uint64_t v27 = (char *)a2 + 3;
  }
LABEL_69:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v25, v27, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 4)
  {
LABEL_32:
    if (v22 != 5) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_70:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v32 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 34;
    unsigned int v33 = *((_DWORD *)v32 + 9);
    if (v33 <= 0x7F) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v32 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 34;
    unsigned int v33 = *((_DWORD *)v32 + 9);
    if (v33 <= 0x7F)
    {
LABEL_72:
      *((unsigned char *)a2 + 1) = v33;
      uint64_t v34 = (char *)a2 + 2;
      goto LABEL_79;
    }
  }
  *((unsigned char *)a2 + 1) = v33 | 0x80;
  unsigned int v35 = v33 >> 7;
  if (v33 >> 14)
  {
    uint64_t v34 = (char *)a2 + 3;
    do
    {
      *(v34 - 1) = v35 | 0x80;
      unsigned int v36 = v35 >> 7;
      ++v34;
      unsigned int v37 = v35 >> 14;
      v35 >>= 7;
    }
    while (v37);
    *(v34 - 1) = v36;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v35;
    uint64_t v34 = (char *)a2 + 3;
  }
LABEL_79:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v32, v34, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 5)
  {
LABEL_33:
    if (v22 != 7) {
      goto LABEL_34;
    }
    goto LABEL_90;
  }
LABEL_80:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    BOOL v38 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 42;
    unsigned int v39 = *((_DWORD *)v38 + 9);
    if (v39 <= 0x7F) {
      goto LABEL_82;
    }
  }
  else
  {
    BOOL v38 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 42;
    unsigned int v39 = *((_DWORD *)v38 + 9);
    if (v39 <= 0x7F)
    {
LABEL_82:
      *((unsigned char *)a2 + 1) = v39;
      unint64_t v40 = (char *)a2 + 2;
      goto LABEL_89;
    }
  }
  *((unsigned char *)a2 + 1) = v39 | 0x80;
  unsigned int v41 = v39 >> 7;
  if (v39 >> 14)
  {
    unint64_t v40 = (char *)a2 + 3;
    do
    {
      *(v40 - 1) = v41 | 0x80;
      unsigned int v42 = v41 >> 7;
      ++v40;
      unsigned int v43 = v41 >> 14;
      v41 >>= 7;
    }
    while (v43);
    *(v40 - 1) = v42;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v41;
    unint64_t v40 = (char *)a2 + 3;
  }
LABEL_89:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v38, v40, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 7)
  {
LABEL_34:
    if (v22 != 8) {
      goto LABEL_35;
    }
    goto LABEL_100;
  }
LABEL_90:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v44 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 58;
    unsigned int v45 = *((_DWORD *)v44 + 10);
    if (v45 <= 0x7F) {
      goto LABEL_92;
    }
  }
  else
  {
    unint64_t v44 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 58;
    unsigned int v45 = *((_DWORD *)v44 + 10);
    if (v45 <= 0x7F)
    {
LABEL_92:
      *((unsigned char *)a2 + 1) = v45;
      unint64_t v46 = (char *)a2 + 2;
      goto LABEL_99;
    }
  }
  *((unsigned char *)a2 + 1) = v45 | 0x80;
  unsigned int v47 = v45 >> 7;
  if (v45 >> 14)
  {
    unint64_t v46 = (char *)a2 + 3;
    do
    {
      *(v46 - 1) = v47 | 0x80;
      unsigned int v48 = v47 >> 7;
      ++v46;
      unsigned int v49 = v47 >> 14;
      v47 >>= 7;
    }
    while (v49);
    *(v46 - 1) = v48;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v47;
    unint64_t v46 = (char *)a2 + 3;
  }
LABEL_99:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v44, v46, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 8)
  {
LABEL_35:
    if (v22 != 9) {
      goto LABEL_36;
    }
    goto LABEL_110;
  }
LABEL_100:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v50 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 66;
    unsigned int v51 = *((_DWORD *)v50 + 10);
    if (v51 <= 0x7F) {
      goto LABEL_102;
    }
  }
  else
  {
    unint64_t v50 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 66;
    unsigned int v51 = *((_DWORD *)v50 + 10);
    if (v51 <= 0x7F)
    {
LABEL_102:
      *((unsigned char *)a2 + 1) = v51;
      unint64_t v52 = (char *)a2 + 2;
      goto LABEL_109;
    }
  }
  *((unsigned char *)a2 + 1) = v51 | 0x80;
  unsigned int v53 = v51 >> 7;
  if (v51 >> 14)
  {
    unint64_t v52 = (char *)a2 + 3;
    do
    {
      *(v52 - 1) = v53 | 0x80;
      unsigned int v54 = v53 >> 7;
      ++v52;
      unsigned int v55 = v53 >> 14;
      v53 >>= 7;
    }
    while (v55);
    *(v52 - 1) = v54;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v53;
    unint64_t v52 = (char *)a2 + 3;
  }
LABEL_109:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v50, v52, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 9)
  {
LABEL_36:
    if (v22 != 10) {
      goto LABEL_37;
    }
    goto LABEL_120;
  }
LABEL_110:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v56 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 74;
    unsigned int v57 = *((_DWORD *)v56 + 10);
    if (v57 <= 0x7F) {
      goto LABEL_112;
    }
  }
  else
  {
    unint64_t v56 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 74;
    unsigned int v57 = *((_DWORD *)v56 + 10);
    if (v57 <= 0x7F)
    {
LABEL_112:
      *((unsigned char *)a2 + 1) = v57;
      unint64_t v58 = (char *)a2 + 2;
      goto LABEL_119;
    }
  }
  *((unsigned char *)a2 + 1) = v57 | 0x80;
  unsigned int v59 = v57 >> 7;
  if (v57 >> 14)
  {
    unint64_t v58 = (char *)a2 + 3;
    do
    {
      *(v58 - 1) = v59 | 0x80;
      unsigned int v60 = v59 >> 7;
      ++v58;
      unsigned int v61 = v59 >> 14;
      v59 >>= 7;
    }
    while (v61);
    *(v58 - 1) = v60;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v59;
    unint64_t v58 = (char *)a2 + 3;
  }
LABEL_119:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v56, v58, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 10)
  {
LABEL_37:
    if (v22 != 11) {
      goto LABEL_38;
    }
    goto LABEL_130;
  }
LABEL_120:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v62 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 82;
    unsigned int v63 = *((_DWORD *)v62 + 10);
    if (v63 <= 0x7F) {
      goto LABEL_122;
    }
  }
  else
  {
    unint64_t v62 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 82;
    unsigned int v63 = *((_DWORD *)v62 + 10);
    if (v63 <= 0x7F)
    {
LABEL_122:
      *((unsigned char *)a2 + 1) = v63;
      unint64_t v64 = (char *)a2 + 2;
      goto LABEL_129;
    }
  }
  *((unsigned char *)a2 + 1) = v63 | 0x80;
  unsigned int v65 = v63 >> 7;
  if (v63 >> 14)
  {
    unint64_t v64 = (char *)a2 + 3;
    do
    {
      *(v64 - 1) = v65 | 0x80;
      unsigned int v66 = v65 >> 7;
      ++v64;
      unsigned int v67 = v65 >> 14;
      v65 >>= 7;
    }
    while (v67);
    *(v64 - 1) = v66;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v65;
    unint64_t v64 = (char *)a2 + 3;
  }
LABEL_129:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v62, v64, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 11)
  {
LABEL_38:
    if (v22 != 12) {
      goto LABEL_39;
    }
    goto LABEL_140;
  }
LABEL_130:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v68 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 90;
    unsigned int v69 = *((_DWORD *)v68 + 10);
    if (v69 <= 0x7F) {
      goto LABEL_132;
    }
  }
  else
  {
    uint64_t v68 = (operations_research::sat::IntegerArgumentProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 90;
    unsigned int v69 = *((_DWORD *)v68 + 10);
    if (v69 <= 0x7F)
    {
LABEL_132:
      *((unsigned char *)a2 + 1) = v69;
      v70 = (char *)a2 + 2;
      goto LABEL_139;
    }
  }
  *((unsigned char *)a2 + 1) = v69 | 0x80;
  unsigned int v71 = v69 >> 7;
  if (v69 >> 14)
  {
    v70 = (char *)a2 + 3;
    do
    {
      *(v70 - 1) = v71 | 0x80;
      unsigned int v72 = v71 >> 7;
      ++v70;
      unsigned int v73 = v71 >> 14;
      v71 >>= 7;
    }
    while (v73);
    *(v70 - 1) = v72;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v71;
    v70 = (char *)a2 + 3;
  }
LABEL_139:
  a2 = operations_research::sat::IntegerArgumentProto::_InternalSerialize(v68, v70, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 12)
  {
LABEL_39:
    if (v22 != 13) {
      goto LABEL_40;
    }
    goto LABEL_150;
  }
LABEL_140:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v74 = (operations_research::sat::LinearConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 98;
    unsigned int v75 = *((_DWORD *)v74 + 21);
    if (v75 <= 0x7F) {
      goto LABEL_142;
    }
  }
  else
  {
    uint64_t v74 = (operations_research::sat::LinearConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 98;
    unsigned int v75 = *((_DWORD *)v74 + 21);
    if (v75 <= 0x7F)
    {
LABEL_142:
      *((unsigned char *)a2 + 1) = v75;
      uint64_t v76 = (char *)a2 + 2;
      goto LABEL_149;
    }
  }
  *((unsigned char *)a2 + 1) = v75 | 0x80;
  unsigned int v77 = v75 >> 7;
  if (v75 >> 14)
  {
    uint64_t v76 = (char *)a2 + 3;
    do
    {
      *(v76 - 1) = v77 | 0x80;
      unsigned int v78 = v77 >> 7;
      ++v76;
      unsigned int v79 = v77 >> 14;
      v77 >>= 7;
    }
    while (v79);
    *(v76 - 1) = v78;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v77;
    uint64_t v76 = (char *)a2 + 3;
  }
LABEL_149:
  a2 = operations_research::sat::LinearConstraintProto::_InternalSerialize(v74, v76, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 13)
  {
LABEL_40:
    if (v22 != 14) {
      goto LABEL_41;
    }
    goto LABEL_160;
  }
LABEL_150:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v80 = (operations_research::sat::AllDifferentConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 106;
    unsigned int v81 = *((_DWORD *)v80 + 9);
    if (v81 <= 0x7F) {
      goto LABEL_152;
    }
  }
  else
  {
    uint64_t v80 = (operations_research::sat::AllDifferentConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 106;
    unsigned int v81 = *((_DWORD *)v80 + 9);
    if (v81 <= 0x7F)
    {
LABEL_152:
      *((unsigned char *)a2 + 1) = v81;
      uint64_t v82 = (char *)a2 + 2;
      goto LABEL_159;
    }
  }
  *((unsigned char *)a2 + 1) = v81 | 0x80;
  unsigned int v83 = v81 >> 7;
  if (v81 >> 14)
  {
    uint64_t v82 = (char *)a2 + 3;
    do
    {
      *(v82 - 1) = v83 | 0x80;
      unsigned int v84 = v83 >> 7;
      ++v82;
      unsigned int v85 = v83 >> 14;
      v83 >>= 7;
    }
    while (v85);
    *(v82 - 1) = v84;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v83;
    uint64_t v82 = (char *)a2 + 3;
  }
LABEL_159:
  a2 = operations_research::sat::AllDifferentConstraintProto::_InternalSerialize(v80, v82, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 14)
  {
LABEL_41:
    if (v22 != 15) {
      goto LABEL_42;
    }
    goto LABEL_170;
  }
LABEL_160:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v86 = (operations_research::sat::ElementConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 114;
    unsigned int v87 = *((_DWORD *)v86 + 11);
    if (v87 <= 0x7F) {
      goto LABEL_162;
    }
  }
  else
  {
    uint64_t v86 = (operations_research::sat::ElementConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 114;
    unsigned int v87 = *((_DWORD *)v86 + 11);
    if (v87 <= 0x7F)
    {
LABEL_162:
      *((unsigned char *)a2 + 1) = v87;
      uint64_t v88 = (char *)a2 + 2;
      goto LABEL_169;
    }
  }
  *((unsigned char *)a2 + 1) = v87 | 0x80;
  unsigned int v89 = v87 >> 7;
  if (v87 >> 14)
  {
    uint64_t v88 = (char *)a2 + 3;
    do
    {
      *(v88 - 1) = v89 | 0x80;
      unsigned int v90 = v89 >> 7;
      ++v88;
      unsigned int v91 = v89 >> 14;
      v89 >>= 7;
    }
    while (v91);
    *(v88 - 1) = v90;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v89;
    uint64_t v88 = (char *)a2 + 3;
  }
LABEL_169:
  a2 = operations_research::sat::ElementConstraintProto::_InternalSerialize(v86, v88, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 15)
  {
LABEL_42:
    if (v22 != 16) {
      goto LABEL_43;
    }
    goto LABEL_180;
  }
LABEL_170:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v92 = (operations_research::sat::CircuitConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 122;
    unsigned int v93 = *((_DWORD *)v92 + 21);
    if (v93 <= 0x7F) {
      goto LABEL_172;
    }
  }
  else
  {
    uint64_t v92 = (operations_research::sat::CircuitConstraintProto *)*((void *)this + 6);
    *(unsigned char *)a2 = 122;
    unsigned int v93 = *((_DWORD *)v92 + 21);
    if (v93 <= 0x7F)
    {
LABEL_172:
      *((unsigned char *)a2 + 1) = v93;
      v94 = (char *)a2 + 2;
      goto LABEL_179;
    }
  }
  *((unsigned char *)a2 + 1) = v93 | 0x80;
  unsigned int v95 = v93 >> 7;
  if (v93 >> 14)
  {
    v94 = (char *)a2 + 3;
    do
    {
      *(v94 - 1) = v95 | 0x80;
      unsigned int v96 = v95 >> 7;
      ++v94;
      unsigned int v97 = v95 >> 14;
      v95 >>= 7;
    }
    while (v97);
    *(v94 - 1) = v96;
  }
  else
  {
    *((unsigned char *)a2 + 2) = v95;
    v94 = (char *)a2 + 3;
  }
LABEL_179:
  a2 = operations_research::sat::CircuitConstraintProto::_InternalSerialize(v92, v94, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 16)
  {
LABEL_43:
    if (v22 != 17) {
      goto LABEL_44;
    }
    goto LABEL_190;
  }
LABEL_180:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v98 = (operations_research::sat::TableConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 386;
    unsigned int v99 = *((_DWORD *)v98 + 16);
    if (v99 <= 0x7F) {
      goto LABEL_182;
    }
  }
  else
  {
    uint64_t v98 = (operations_research::sat::TableConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 386;
    unsigned int v99 = *((_DWORD *)v98 + 16);
    if (v99 <= 0x7F)
    {
LABEL_182:
      *((unsigned char *)a2 + 2) = v99;
      uint64_t v100 = (char *)a2 + 3;
      goto LABEL_189;
    }
  }
  *((unsigned char *)a2 + 2) = v99 | 0x80;
  unsigned int v101 = v99 >> 7;
  if (v99 >> 14)
  {
    uint64_t v100 = (char *)a2 + 4;
    do
    {
      *(v100 - 1) = v101 | 0x80;
      unsigned int v102 = v101 >> 7;
      ++v100;
      unsigned int v103 = v101 >> 14;
      v101 >>= 7;
    }
    while (v103);
    *(v100 - 1) = v102;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v101;
    uint64_t v100 = (char *)a2 + 4;
  }
LABEL_189:
  a2 = operations_research::sat::TableConstraintProto::_InternalSerialize(v98, v100, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 17)
  {
LABEL_44:
    if (v22 != 18) {
      goto LABEL_45;
    }
    goto LABEL_200;
  }
LABEL_190:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v104 = (operations_research::sat::AutomatonConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 394;
    unsigned int v105 = *((_DWORD *)v104 + 36);
    if (v105 <= 0x7F) {
      goto LABEL_192;
    }
  }
  else
  {
    uint64_t v104 = (operations_research::sat::AutomatonConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 394;
    unsigned int v105 = *((_DWORD *)v104 + 36);
    if (v105 <= 0x7F)
    {
LABEL_192:
      *((unsigned char *)a2 + 2) = v105;
      uint64_t v106 = (char *)a2 + 3;
      goto LABEL_199;
    }
  }
  *((unsigned char *)a2 + 2) = v105 | 0x80;
  unsigned int v107 = v105 >> 7;
  if (v105 >> 14)
  {
    uint64_t v106 = (char *)a2 + 4;
    do
    {
      *(v106 - 1) = v107 | 0x80;
      unsigned int v108 = v107 >> 7;
      ++v106;
      unsigned int v109 = v107 >> 14;
      v107 >>= 7;
    }
    while (v109);
    *(v106 - 1) = v108;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v107;
    uint64_t v106 = (char *)a2 + 4;
  }
LABEL_199:
  a2 = operations_research::sat::AutomatonConstraintProto::_InternalSerialize(v104, v106, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 18)
  {
LABEL_45:
    if (v22 != 19) {
      goto LABEL_46;
    }
    goto LABEL_210;
  }
LABEL_200:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v110 = (operations_research::sat::InverseConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 402;
    unsigned int v111 = *((_DWORD *)v110 + 15);
    if (v111 <= 0x7F) {
      goto LABEL_202;
    }
  }
  else
  {
    uint64_t v110 = (operations_research::sat::InverseConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 402;
    unsigned int v111 = *((_DWORD *)v110 + 15);
    if (v111 <= 0x7F)
    {
LABEL_202:
      *((unsigned char *)a2 + 2) = v111;
      v112 = (char *)a2 + 3;
      goto LABEL_209;
    }
  }
  *((unsigned char *)a2 + 2) = v111 | 0x80;
  unsigned int v113 = v111 >> 7;
  if (v111 >> 14)
  {
    v112 = (char *)a2 + 4;
    do
    {
      *(v112 - 1) = v113 | 0x80;
      unsigned int v114 = v113 >> 7;
      ++v112;
      unsigned int v115 = v113 >> 14;
      v113 >>= 7;
    }
    while (v115);
    *(v112 - 1) = v114;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v113;
    v112 = (char *)a2 + 4;
  }
LABEL_209:
  a2 = operations_research::sat::InverseConstraintProto::_InternalSerialize(v110, v112, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 19)
  {
LABEL_46:
    if (v22 != 20) {
      goto LABEL_47;
    }
    goto LABEL_220;
  }
LABEL_210:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v116 = (operations_research::sat::IntervalConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 410;
    unsigned int v117 = *((_DWORD *)v116 + 7);
    if (v117 <= 0x7F) {
      goto LABEL_212;
    }
  }
  else
  {
    v116 = (operations_research::sat::IntervalConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 410;
    unsigned int v117 = *((_DWORD *)v116 + 7);
    if (v117 <= 0x7F)
    {
LABEL_212:
      *((unsigned char *)a2 + 2) = v117;
      uint64_t v118 = (char *)a2 + 3;
      goto LABEL_219;
    }
  }
  *((unsigned char *)a2 + 2) = v117 | 0x80;
  unsigned int v119 = v117 >> 7;
  if (v117 >> 14)
  {
    uint64_t v118 = (char *)a2 + 4;
    do
    {
      *(v118 - 1) = v119 | 0x80;
      unsigned int v120 = v119 >> 7;
      ++v118;
      unsigned int v121 = v119 >> 14;
      v119 >>= 7;
    }
    while (v121);
    *(v118 - 1) = v120;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v119;
    uint64_t v118 = (char *)a2 + 4;
  }
LABEL_219:
  a2 = operations_research::sat::IntervalConstraintProto::_InternalSerialize(v116, v118, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 20)
  {
LABEL_47:
    if (v22 != 21) {
      goto LABEL_48;
    }
    goto LABEL_230;
  }
LABEL_220:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v122 = (operations_research::sat::NoOverlapConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 418;
    unsigned int v123 = *((_DWORD *)v122 + 9);
    if (v123 <= 0x7F) {
      goto LABEL_222;
    }
  }
  else
  {
    uint64_t v122 = (operations_research::sat::NoOverlapConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 418;
    unsigned int v123 = *((_DWORD *)v122 + 9);
    if (v123 <= 0x7F)
    {
LABEL_222:
      *((unsigned char *)a2 + 2) = v123;
      v124 = (char *)a2 + 3;
      goto LABEL_229;
    }
  }
  *((unsigned char *)a2 + 2) = v123 | 0x80;
  unsigned int v125 = v123 >> 7;
  if (v123 >> 14)
  {
    v124 = (char *)a2 + 4;
    do
    {
      *(v124 - 1) = v125 | 0x80;
      unsigned int v126 = v125 >> 7;
      ++v124;
      unsigned int v127 = v125 >> 14;
      v125 >>= 7;
    }
    while (v127);
    *(v124 - 1) = v126;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v125;
    v124 = (char *)a2 + 4;
  }
LABEL_229:
  a2 = operations_research::sat::NoOverlapConstraintProto::_InternalSerialize(v122, v124, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 21)
  {
LABEL_48:
    if (v22 != 22) {
      goto LABEL_49;
    }
    goto LABEL_240;
  }
LABEL_230:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v128 = (operations_research::sat::NoOverlap2DConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 426;
    unsigned int v129 = *((_DWORD *)v128 + 16);
    if (v129 <= 0x7F) {
      goto LABEL_232;
    }
  }
  else
  {
    uint64_t v128 = (operations_research::sat::NoOverlap2DConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 426;
    unsigned int v129 = *((_DWORD *)v128 + 16);
    if (v129 <= 0x7F)
    {
LABEL_232:
      *((unsigned char *)a2 + 2) = v129;
      uint64_t v130 = (char *)a2 + 3;
      goto LABEL_239;
    }
  }
  *((unsigned char *)a2 + 2) = v129 | 0x80;
  unsigned int v131 = v129 >> 7;
  if (v129 >> 14)
  {
    uint64_t v130 = (char *)a2 + 4;
    do
    {
      *(v130 - 1) = v131 | 0x80;
      unsigned int v132 = v131 >> 7;
      ++v130;
      unsigned int v133 = v131 >> 14;
      v131 >>= 7;
    }
    while (v133);
    *(v130 - 1) = v132;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v131;
    uint64_t v130 = (char *)a2 + 4;
  }
LABEL_239:
  a2 = operations_research::sat::NoOverlap2DConstraintProto::_InternalSerialize(v128, v130, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 22)
  {
LABEL_49:
    if (v22 != 23) {
      goto LABEL_50;
    }
    goto LABEL_250;
  }
LABEL_240:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    BOOL v134 = (operations_research::sat::CumulativeConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 434;
    unsigned int v135 = *((_DWORD *)v134 + 16);
    if (v135 <= 0x7F) {
      goto LABEL_242;
    }
  }
  else
  {
    BOOL v134 = (operations_research::sat::CumulativeConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 434;
    unsigned int v135 = *((_DWORD *)v134 + 16);
    if (v135 <= 0x7F)
    {
LABEL_242:
      *((unsigned char *)a2 + 2) = v135;
      v136 = (char *)a2 + 3;
      goto LABEL_249;
    }
  }
  *((unsigned char *)a2 + 2) = v135 | 0x80;
  unsigned int v137 = v135 >> 7;
  if (v135 >> 14)
  {
    v136 = (char *)a2 + 4;
    do
    {
      *(v136 - 1) = v137 | 0x80;
      unsigned int v138 = v137 >> 7;
      ++v136;
      unsigned int v139 = v137 >> 14;
      v137 >>= 7;
    }
    while (v139);
    *(v136 - 1) = v138;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v137;
    v136 = (char *)a2 + 4;
  }
LABEL_249:
  a2 = operations_research::sat::CumulativeConstraintProto::_InternalSerialize(v134, v136, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 23)
  {
LABEL_50:
    if (v22 != 24) {
      goto LABEL_51;
    }
    goto LABEL_260;
  }
LABEL_250:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v140 = (operations_research::sat::RoutesConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 442;
    unsigned int v141 = *((_DWORD *)v140 + 30);
    if (v141 <= 0x7F) {
      goto LABEL_252;
    }
  }
  else
  {
    uint64_t v140 = (operations_research::sat::RoutesConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 442;
    unsigned int v141 = *((_DWORD *)v140 + 30);
    if (v141 <= 0x7F)
    {
LABEL_252:
      *((unsigned char *)a2 + 2) = v141;
      uint64_t v142 = (char *)a2 + 3;
      goto LABEL_259;
    }
  }
  *((unsigned char *)a2 + 2) = v141 | 0x80;
  unsigned int v143 = v141 >> 7;
  if (v141 >> 14)
  {
    uint64_t v142 = (char *)a2 + 4;
    do
    {
      *(v142 - 1) = v143 | 0x80;
      unsigned int v144 = v143 >> 7;
      ++v142;
      unsigned int v145 = v143 >> 14;
      v143 >>= 7;
    }
    while (v145);
    *(v142 - 1) = v144;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v143;
    uint64_t v142 = (char *)a2 + 4;
  }
LABEL_259:
  a2 = operations_research::sat::RoutesConstraintProto::_InternalSerialize(v140, v142, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 24)
  {
LABEL_51:
    if (v22 != 25) {
      goto LABEL_52;
    }
    goto LABEL_270;
  }
LABEL_260:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v146 = (operations_research::sat::ReservoirConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 450;
    unsigned int v147 = *((_DWORD *)v146 + 26);
    if (v147 <= 0x7F) {
      goto LABEL_262;
    }
  }
  else
  {
    uint64_t v146 = (operations_research::sat::ReservoirConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 450;
    unsigned int v147 = *((_DWORD *)v146 + 26);
    if (v147 <= 0x7F)
    {
LABEL_262:
      *((unsigned char *)a2 + 2) = v147;
      uint64_t v148 = (char *)a2 + 3;
      goto LABEL_269;
    }
  }
  *((unsigned char *)a2 + 2) = v147 | 0x80;
  unsigned int v149 = v147 >> 7;
  if (v147 >> 14)
  {
    uint64_t v148 = (char *)a2 + 4;
    do
    {
      *(v148 - 1) = v149 | 0x80;
      unsigned int v150 = v149 >> 7;
      ++v148;
      unsigned int v151 = v149 >> 14;
      v149 >>= 7;
    }
    while (v151);
    *(v148 - 1) = v150;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v149;
    uint64_t v148 = (char *)a2 + 4;
  }
LABEL_269:
  a2 = operations_research::sat::ReservoirConstraintProto::_InternalSerialize(v146, v148, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 25)
  {
LABEL_52:
    if (v22 != 26) {
      goto LABEL_53;
    }
    goto LABEL_280;
  }
LABEL_270:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v152 = (operations_research::sat::CircuitCoveringConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 458;
    unsigned int v153 = *((_DWORD *)v152 + 15);
    if (v153 <= 0x7F) {
      goto LABEL_272;
    }
  }
  else
  {
    uint64_t v152 = (operations_research::sat::CircuitCoveringConstraintProto *)*((void *)this + 6);
    *(_WORD *)a2 = 458;
    unsigned int v153 = *((_DWORD *)v152 + 15);
    if (v153 <= 0x7F)
    {
LABEL_272:
      *((unsigned char *)a2 + 2) = v153;
      uint64_t v154 = (char *)a2 + 3;
      goto LABEL_279;
    }
  }
  *((unsigned char *)a2 + 2) = v153 | 0x80;
  unsigned int v155 = v153 >> 7;
  if (v153 >> 14)
  {
    uint64_t v154 = (char *)a2 + 4;
    do
    {
      *(v154 - 1) = v155 | 0x80;
      unsigned int v156 = v155 >> 7;
      ++v154;
      unsigned int v157 = v155 >> 14;
      v155 >>= 7;
    }
    while (v157);
    *(v154 - 1) = v156;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v155;
    uint64_t v154 = (char *)a2 + 4;
  }
LABEL_279:
  a2 = operations_research::sat::CircuitCoveringConstraintProto::_InternalSerialize(v152, v154, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 26)
  {
LABEL_53:
    if (v22 != 27) {
      goto LABEL_54;
    }
    goto LABEL_290;
  }
LABEL_280:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    uint64_t v158 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(_WORD *)a2 = 466;
    unsigned int v159 = *((_DWORD *)v158 + 9);
    if (v159 <= 0x7F) {
      goto LABEL_282;
    }
  }
  else
  {
    uint64_t v158 = (operations_research::sat::BoolArgumentProto *)*((void *)this + 6);
    *(_WORD *)a2 = 466;
    unsigned int v159 = *((_DWORD *)v158 + 9);
    if (v159 <= 0x7F)
    {
LABEL_282:
      *((unsigned char *)a2 + 2) = v159;
      v160 = (char *)a2 + 3;
      goto LABEL_289;
    }
  }
  *((unsigned char *)a2 + 2) = v159 | 0x80;
  unsigned int v161 = v159 >> 7;
  if (v159 >> 14)
  {
    v160 = (char *)a2 + 4;
    do
    {
      *(v160 - 1) = v161 | 0x80;
      unsigned int v162 = v161 >> 7;
      ++v160;
      unsigned int v163 = v161 >> 14;
      v161 >>= 7;
    }
    while (v163);
    *(v160 - 1) = v162;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v161;
    v160 = (char *)a2 + 4;
  }
LABEL_289:
  a2 = operations_research::sat::BoolArgumentProto::_InternalSerialize(v158, v160, a3, a4);
  int v22 = *((_DWORD *)this + 15);
  if (v22 != 27)
  {
LABEL_54:
    if (v22 != 28) {
      goto LABEL_55;
    }
LABEL_300:
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v170 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
      *(_WORD *)a2 = 482;
      unsigned int v171 = *((_DWORD *)v170 + 12);
      if (v171 <= 0x7F)
      {
LABEL_302:
        *((unsigned char *)a2 + 2) = v171;
        a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, (char *)a2 + 3, a3, a4);
        uint64_t v23 = *((void *)this + 1);
        if ((v23 & 1) == 0) {
          return a2;
        }
        goto LABEL_311;
      }
    }
    else
    {
      uint64_t v170 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
      *(_WORD *)a2 = 482;
      unsigned int v171 = *((_DWORD *)v170 + 12);
      if (v171 <= 0x7F) {
        goto LABEL_302;
      }
    }
    *((unsigned char *)a2 + 2) = v171 | 0x80;
    unsigned int v172 = v171 >> 7;
    if (v171 >> 14)
    {
      v173 = (char *)a2 + 4;
      do
      {
        *(v173 - 1) = v172 | 0x80;
        unsigned int v174 = v172 >> 7;
        ++v173;
        unsigned int v175 = v172 >> 14;
        v172 >>= 7;
      }
      while (v175);
      *(v173 - 1) = v174;
      a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, v173, a3, a4);
      uint64_t v23 = *((void *)this + 1);
      if ((v23 & 1) == 0) {
        return a2;
      }
    }
    else
    {
      *((unsigned char *)a2 + 3) = v172;
      a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v170, (char *)a2 + 4, a3, a4);
      uint64_t v23 = *((void *)this + 1);
      if ((v23 & 1) == 0) {
        return a2;
      }
    }
    goto LABEL_311;
  }
LABEL_290:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    unint64_t v164 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
    *(_WORD *)a2 = 474;
    unsigned int v165 = *((_DWORD *)v164 + 12);
    if (v165 <= 0x7F) {
      goto LABEL_292;
    }
  }
  else
  {
    unint64_t v164 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
    *(_WORD *)a2 = 474;
    unsigned int v165 = *((_DWORD *)v164 + 12);
    if (v165 <= 0x7F)
    {
LABEL_292:
      *((unsigned char *)a2 + 2) = v165;
      v166 = (char *)a2 + 3;
      goto LABEL_299;
    }
  }
  *((unsigned char *)a2 + 2) = v165 | 0x80;
  unsigned int v167 = v165 >> 7;
  if (v165 >> 14)
  {
    v166 = (char *)a2 + 4;
    do
    {
      *(v166 - 1) = v167 | 0x80;
      unsigned int v168 = v167 >> 7;
      ++v166;
      unsigned int v169 = v167 >> 14;
      v167 >>= 7;
    }
    while (v169);
    *(v166 - 1) = v168;
  }
  else
  {
    *((unsigned char *)a2 + 3) = v167;
    v166 = (char *)a2 + 4;
  }
LABEL_299:
  a2 = operations_research::sat::LinearArgumentProto::_InternalSerialize(v164, v166, a3, a4);
  if (*((_DWORD *)this + 15) == 28) {
    goto LABEL_300;
  }
LABEL_55:
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return a2;
  }
LABEL_311:

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
}

char *operations_research::sat::ConstraintProto::ByteSizeLong(operations_research::sat::ConstraintProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      *((_DWORD *)this + 8) = v2;
      uint64_t v4 = *((void *)this + 5);
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v2);
      if (*(void *)(v4 + 8)) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    uint64_t v3 = 11;
    *((_DWORD *)this + 8) = v2;
    uint64_t v4 = *((void *)this + 5);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v3 = 0;
    *((_DWORD *)this + 8) = 0;
    uint64_t v4 = *((void *)this + 5);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    if (*(char *)(v4 + 23) < 0) {
      goto LABEL_14;
    }
  }
LABEL_4:
  uint64_t v6 = (const google::protobuf::UnknownFieldSet *)(v3 + v2);
  if (v5)
  {
LABEL_5:
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v7 = v5;
    }
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
LABEL_8:
  switch(*((_DWORD *)this + 15))
  {
    case 3:
    case 4:
    case 5:
    case 0xD:
      int v12 = (int *)*((void *)this + 6);
      uint64_t v13 = google::protobuf::internal::WireFormatLite::Int32Size(v12 + 4);
      if (v13)
      {
        if ((v13 & 0x80000000) != 0)
        {
          v12[8] = v13;
          int64_t v10 = (char *)(v13 + 11);
          unsigned int v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          if ((v12[2] & 1) == 0) {
            goto LABEL_21;
          }
        }
        else
        {
          v12[8] = v13;
          int64_t v10 = (char *)(((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1 + v13);
          unsigned int v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          if ((v12[2] & 1) == 0)
          {
LABEL_21:
            v12[9] = (int)v10;
            goto LABEL_34;
          }
        }
      }
      else
      {
        v12[8] = 0;
        int64_t v10 = 0;
        unsigned int v14 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        if ((v12[2] & 1) == 0) {
          goto LABEL_21;
        }
      }
      unint64_t v16 = v12 + 9;
LABEL_109:
      int64_t v10 = google::protobuf::internal::ComputeUnknownFieldsSize(v14, (const google::protobuf::UnknownFieldSet *)v10, v16);
LABEL_34:
      uint64_t v18 = (9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6;
      unint64_t v19 = &v10[(void)v6];
LABEL_39:
      uint64_t v6 = (const google::protobuf::UnknownFieldSet *)&v19[v18 + 1];
LABEL_103:
      if (*((unsigned char *)this + 8))
      {
        return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::ConstraintProto *)((char *)this + 8), v6, (_DWORD *)this + 14);
      }
      else
      {
        *((_DWORD *)this + 14) = v6;
        return (char *)v6;
      }
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      uint64_t v8 = (int *)*((void *)this + 6);
      uint64_t v9 = google::protobuf::internal::WireFormatLite::Int32Size(v8 + 4);
      if (v9)
      {
        if ((v9 & 0x80000000) != 0)
        {
          v8[8] = v9;
          int64_t v10 = (char *)(v9 + 11);
          int v11 = v8[9];
          if (!v11) {
            goto LABEL_32;
          }
        }
        else
        {
          v8[8] = v9;
          int64_t v10 = (char *)(((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1 + v9);
          int v11 = v8[9];
          if (!v11) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        v8[8] = 0;
        int64_t v10 = 0;
        int v11 = v8[9];
        if (!v11) {
          goto LABEL_32;
        }
      }
      if (v11 < 0) {
        uint64_t v17 = 11;
      }
      else {
        uint64_t v17 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v10 += v17;
LABEL_32:
      unsigned int v14 = (google::protobuf::UnknownFieldSet *)(v8 + 2);
      if ((v8[2] & 1) == 0)
      {
        v8[10] = (int)v10;
        goto LABEL_34;
      }
      unint64_t v16 = v8 + 10;
      goto LABEL_109;
    case 0xC:
      unint64_t v20 = operations_research::sat::LinearConstraintProto::ByteSizeLong(*((operations_research::sat::LinearConstraintProto **)this
                                                                          + 6));
      goto LABEL_38;
    case 0xE:
      unint64_t v20 = operations_research::sat::ElementConstraintProto::ByteSizeLong(*((operations_research::sat::ElementConstraintProto **)this
                                                                           + 6));
      goto LABEL_38;
    case 0xF:
      unint64_t v20 = operations_research::sat::CircuitConstraintProto::ByteSizeLong(*((operations_research::sat::CircuitConstraintProto **)this
                                                                           + 6));
LABEL_38:
      uint64_t v18 = (9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6;
      unint64_t v19 = &v20[(void)v6];
      goto LABEL_39;
    case 0x10:
      unint64_t v15 = operations_research::sat::TableConstraintProto::ByteSizeLong(*((operations_research::sat::TableConstraintProto **)this
                                                                         + 6));
      goto LABEL_55;
    case 0x11:
      unint64_t v15 = operations_research::sat::AutomatonConstraintProto::ByteSizeLong(*((operations_research::sat::AutomatonConstraintProto **)this
                                                                             + 6));
      goto LABEL_55;
    case 0x12:
      unint64_t v21 = (int *)*((void *)this + 6);
      uint64_t v22 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 4);
      if (v22)
      {
        int v23 = v22;
        if ((v22 & 0x80000000) != 0) {
          uint64_t v24 = 11;
        }
        else {
          uint64_t v24 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        int v23 = 0;
        uint64_t v24 = 0;
      }
      v21[8] = v23;
      uint64_t v38 = v24 + v22;
      uint64_t v39 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 10);
      if (v39)
      {
        int v40 = v39;
        if ((v39 & 0x80000000) != 0) {
          uint64_t v41 = 11;
        }
        else {
          uint64_t v41 = ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v38 += v41;
      }
      else
      {
        int v40 = 0;
      }
      v21[14] = v40;
      uint64_t v27 = v38 + v39;
      unsigned int v37 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
      if (v21[2]) {
        goto LABEL_87;
      }
      goto LABEL_96;
    case 0x13:
      uint64_t v25 = (_DWORD *)*((void *)this + 6);
      int v26 = v25[4];
      if (v26)
      {
        if (v26 < 0) {
          uint64_t v27 = 11;
        }
        else {
          uint64_t v27 = ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v27 = 0;
      }
      int v42 = v25[5];
      if (v42)
      {
        if (v42 < 0) {
          uint64_t v43 = 11;
        }
        else {
          uint64_t v43 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v27 += v43;
      }
      int v49 = v25[6];
      if (v49)
      {
        if (v49 < 0) {
          uint64_t v50 = 11;
        }
        else {
          uint64_t v50 = ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v27 += v50;
      }
      unsigned int v37 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
      if ((v25[2] & 1) == 0)
      {
        v25[7] = v27;
        goto LABEL_101;
      }
      unsigned int v48 = v25 + 7;
      goto LABEL_112;
    case 0x14:
      unsigned int v28 = (int *)*((void *)this + 6);
      uint64_t v29 = google::protobuf::internal::WireFormatLite::Int32Size(v28 + 4);
      if (!v29) {
        goto LABEL_64;
      }
      int v30 = v29;
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_61;
    case 0x15:
      unint64_t v15 = operations_research::sat::NoOverlap2DConstraintProto::ByteSizeLong(*((operations_research::sat::NoOverlap2DConstraintProto **)this
                                                                               + 6));
      goto LABEL_55;
    case 0x16:
      unint64_t v15 = operations_research::sat::CumulativeConstraintProto::ByteSizeLong(*((operations_research::sat::CumulativeConstraintProto **)this
                                                                              + 6));
      goto LABEL_55;
    case 0x17:
      unint64_t v15 = operations_research::sat::RoutesConstraintProto::ByteSizeLong(*((operations_research::sat::RoutesConstraintProto **)this
                                                                          + 6));
      goto LABEL_55;
    case 0x18:
      unint64_t v15 = operations_research::sat::ReservoirConstraintProto::ByteSizeLong(*((operations_research::sat::ReservoirConstraintProto **)this
                                                                             + 6));
      goto LABEL_55;
    case 0x19:
      unint64_t v21 = (int *)*((void *)this + 6);
      uint64_t v34 = google::protobuf::internal::WireFormatLite::Int32Size(v21 + 4);
      if (v34)
      {
        int v35 = v34;
        if ((v34 & 0x80000000) != 0) {
          uint64_t v36 = 11;
        }
        else {
          uint64_t v36 = ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        int v35 = 0;
        uint64_t v36 = 0;
      }
      v21[8] = v35;
      uint64_t v44 = v36 + v34;
      uint64_t v45 = google::protobuf::internal::WireFormatLite::Int64Size(v21 + 10);
      if (v45)
      {
        int v46 = v45;
        if ((v45 & 0x80000000) != 0) {
          uint64_t v47 = 11;
        }
        else {
          uint64_t v47 = ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v44 += v47;
      }
      else
      {
        int v46 = 0;
      }
      v21[14] = v46;
      uint64_t v27 = v44 + v45;
      unsigned int v37 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
      if (v21[2])
      {
LABEL_87:
        unsigned int v48 = v21 + 15;
        goto LABEL_112;
      }
LABEL_96:
      v21[15] = v27;
      goto LABEL_101;
    case 0x1A:
      unsigned int v28 = (int *)*((void *)this + 6);
      uint64_t v29 = google::protobuf::internal::WireFormatLite::Int32Size(v28 + 4);
      if (v29)
      {
        int v30 = v29;
        if ((v29 & 0x80000000) != 0) {
LABEL_61:
        }
          uint64_t v31 = 11;
        else {
LABEL_50:
        }
          uint64_t v31 = ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
LABEL_64:
        int v30 = 0;
        uint64_t v31 = 0;
      }
      v28[8] = v30;
      uint64_t v27 = v31 + v29;
      unsigned int v37 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
      if (v28[2])
      {
        unsigned int v48 = v28 + 9;
LABEL_112:
        uint64_t v27 = (uint64_t)google::protobuf::internal::ComputeUnknownFieldsSize(v37, (const google::protobuf::UnknownFieldSet *)v27, v48);
      }
      else
      {
        v28[9] = v27;
      }
LABEL_101:
      uint64_t v32 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
      unsigned int v33 = (char *)v6 + v27;
LABEL_102:
      uint64_t v6 = (const google::protobuf::UnknownFieldSet *)&v33[v32 + 2];
      goto LABEL_103;
    case 0x1B:
    case 0x1C:
      unint64_t v15 = operations_research::sat::LinearArgumentProto::ByteSizeLong(*((operations_research::sat::LinearArgumentProto **)this
                                                                        + 6));
LABEL_55:
      uint64_t v32 = (9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6;
      unsigned int v33 = &v15[(void)v6];
      goto LABEL_102;
    default:
      goto LABEL_103;
  }
}

void operations_research::sat::ConstraintProto::MergeFrom(operations_research::sat::ConstraintProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::ConstraintProto::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::ConstraintProto::MergeFrom(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)((char *)this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v10 + v9);
    uint64_t v11 = *((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8))
    {
LABEL_14:
      unsigned int v17 = *((_DWORD *)a2 + 15) - 3;
LABEL_15:
      switch(v17)
      {
        case 0u:
          if (*((_DWORD *)this + 15) == 3) {
            goto LABEL_102;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 3;
          uint64_t v18 = *((void *)this + 1);
          unint64_t v19 = (google::protobuf::Arena *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          if ((v18 & 1) == 0)
          {
            unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v19);
            *((void *)this + 6) = v20;
            if (*((_DWORD *)a2 + 15) != 3) {
              goto LABEL_202;
            }
            goto LABEL_103;
          }
          unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*(google::protobuf::Arena **)v19);
          *((void *)this + 6) = v20;
          if (*((_DWORD *)a2 + 15) == 3) {
            goto LABEL_103;
          }
          goto LABEL_202;
        case 1u:
          if (*((_DWORD *)this + 15) == 4) {
            goto LABEL_102;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 4;
          uint64_t v21 = *((void *)this + 1);
          uint64_t v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
          if (v21) {
            uint64_t v22 = *(google::protobuf::Arena **)v22;
          }
          unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v22);
          *((void *)this + 6) = v20;
          if (*((_DWORD *)a2 + 15) != 4) {
            goto LABEL_202;
          }
          goto LABEL_103;
        case 2u:
          if (*((_DWORD *)this + 15) == 5) {
            goto LABEL_102;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 5;
          uint64_t v23 = *((void *)this + 1);
          uint64_t v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
          if (v23) {
            uint64_t v24 = *(google::protobuf::Arena **)v24;
          }
          unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v24);
          *((void *)this + 6) = v20;
          if (*((_DWORD *)a2 + 15) != 5) {
            goto LABEL_202;
          }
          goto LABEL_103;
        case 4u:
          if (*((_DWORD *)this + 15) == 7)
          {
            uint64_t v25 = *((void *)this + 6);
            int v26 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v27 = v26[1];
            if ((v27 & 1) == 0) {
              goto LABEL_227;
            }
            goto LABEL_224;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 7;
          uint64_t v86 = *((void *)this + 1);
          unsigned int v87 = (google::protobuf::Arena **)(v86 & 0xFFFFFFFFFFFFFFFELL);
          if (v86)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v87);
            uint64_t v25 = v129;
            *((void *)this + 6) = v129;
            if (*((_DWORD *)a2 + 15) == 7)
            {
LABEL_123:
              int v26 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v27 = v26[1];
              if ((v27 & 1) == 0) {
                goto LABEL_227;
              }
              goto LABEL_224;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v87);
            uint64_t v25 = v88;
            *((void *)this + 6) = v88;
            if (*((_DWORD *)a2 + 15) == 7) {
              goto LABEL_123;
            }
          }
          int v26 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          uint64_t v27 = qword_26AEE1878;
          if ((qword_26AEE1878 & 1) == 0) {
            goto LABEL_227;
          }
LABEL_224:
          uint64_t v130 = (const google::protobuf::UnknownFieldSet *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v131 = *(void *)(v25 + 8);
          if (v131) {
            unsigned int v132 = (char *)((v131 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            unsigned int v132 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v25 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v132, v130);
LABEL_227:
          int v133 = *((_DWORD *)v26 + 4);
          if (v133)
          {
            uint64_t v134 = *(int *)(v25 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v25 + 16), v134 + v133);
            uint64_t v135 = *(void *)(v25 + 24);
            *(_DWORD *)(v25 + 16) += *((_DWORD *)v26 + 4);
            memcpy((void *)(v135 + 4 * v134), (const void *)v26[3], 4 * *((int *)v26 + 4));
          }
          int v136 = *((_DWORD *)v26 + 9);
          if (v136) {
            *(_DWORD *)(v25 + 36) = v136;
          }
          return;
        case 5u:
          if (*((_DWORD *)this + 15) == 8)
          {
            uint64_t v28 = *((void *)this + 6);
            uint64_t v29 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v30 = v29[1];
            if ((v30 & 1) == 0) {
              goto LABEL_236;
            }
            goto LABEL_233;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 8;
          uint64_t v89 = *((void *)this + 1);
          unsigned int v90 = (google::protobuf::Arena **)(v89 & 0xFFFFFFFFFFFFFFFELL);
          if (v89)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v90);
            uint64_t v28 = v137;
            *((void *)this + 6) = v137;
            if (*((_DWORD *)a2 + 15) == 8)
            {
LABEL_127:
              uint64_t v29 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v30 = v29[1];
              if ((v30 & 1) == 0) {
                goto LABEL_236;
              }
              goto LABEL_233;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v90);
            uint64_t v28 = v91;
            *((void *)this + 6) = v91;
            if (*((_DWORD *)a2 + 15) == 8) {
              goto LABEL_127;
            }
          }
          uint64_t v29 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          uint64_t v30 = qword_26AEE1878;
          if ((qword_26AEE1878 & 1) == 0) {
            goto LABEL_236;
          }
LABEL_233:
          unsigned int v138 = (const google::protobuf::UnknownFieldSet *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v139 = *(void *)(v28 + 8);
          if (v139) {
            uint64_t v140 = (char *)((v139 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v140 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v28 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v140, v138);
LABEL_236:
          int v141 = *((_DWORD *)v29 + 4);
          if (v141)
          {
            uint64_t v142 = *(int *)(v28 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v28 + 16), v142 + v141);
            uint64_t v143 = *(void *)(v28 + 24);
            *(_DWORD *)(v28 + 16) += *((_DWORD *)v29 + 4);
            memcpy((void *)(v143 + 4 * v142), (const void *)v29[3], 4 * *((int *)v29 + 4));
          }
          int v144 = *((_DWORD *)v29 + 9);
          if (v144) {
            *(_DWORD *)(v28 + 36) = v144;
          }
          return;
        case 6u:
          if (*((_DWORD *)this + 15) == 9)
          {
            uint64_t v31 = *((void *)this + 6);
            uint64_t v32 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v33 = v32[1];
            if ((v33 & 1) == 0) {
              goto LABEL_245;
            }
            goto LABEL_242;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 9;
          uint64_t v92 = *((void *)this + 1);
          unsigned int v93 = (google::protobuf::Arena **)(v92 & 0xFFFFFFFFFFFFFFFELL);
          if (v92)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v93);
            uint64_t v31 = v145;
            *((void *)this + 6) = v145;
            if (*((_DWORD *)a2 + 15) == 9)
            {
LABEL_131:
              uint64_t v32 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v33 = v32[1];
              if ((v33 & 1) == 0) {
                goto LABEL_245;
              }
              goto LABEL_242;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v93);
            uint64_t v31 = v94;
            *((void *)this + 6) = v94;
            if (*((_DWORD *)a2 + 15) == 9) {
              goto LABEL_131;
            }
          }
          uint64_t v32 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          uint64_t v33 = qword_26AEE1878;
          if ((qword_26AEE1878 & 1) == 0) {
            goto LABEL_245;
          }
LABEL_242:
          uint64_t v146 = (const google::protobuf::UnknownFieldSet *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v147 = *(void *)(v31 + 8);
          if (v147) {
            uint64_t v148 = (char *)((v147 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v148 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v31 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v148, v146);
LABEL_245:
          int v149 = *((_DWORD *)v32 + 4);
          if (v149)
          {
            uint64_t v150 = *(int *)(v31 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v31 + 16), v150 + v149);
            uint64_t v151 = *(void *)(v31 + 24);
            *(_DWORD *)(v31 + 16) += *((_DWORD *)v32 + 4);
            memcpy((void *)(v151 + 4 * v150), (const void *)v32[3], 4 * *((int *)v32 + 4));
          }
          int v152 = *((_DWORD *)v32 + 9);
          if (v152) {
            *(_DWORD *)(v31 + 36) = v152;
          }
          return;
        case 7u:
          if (*((_DWORD *)this + 15) == 10)
          {
            uint64_t v34 = *((void *)this + 6);
            int v35 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v36 = v35[1];
            if ((v36 & 1) == 0) {
              goto LABEL_254;
            }
            goto LABEL_251;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 10;
          uint64_t v95 = *((void *)this + 1);
          unsigned int v96 = (google::protobuf::Arena **)(v95 & 0xFFFFFFFFFFFFFFFELL);
          if (v95)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v96);
            uint64_t v34 = v153;
            *((void *)this + 6) = v153;
            if (*((_DWORD *)a2 + 15) == 10)
            {
LABEL_135:
              int v35 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v36 = v35[1];
              if ((v36 & 1) == 0) {
                goto LABEL_254;
              }
              goto LABEL_251;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v96);
            uint64_t v34 = v97;
            *((void *)this + 6) = v97;
            if (*((_DWORD *)a2 + 15) == 10) {
              goto LABEL_135;
            }
          }
          int v35 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          uint64_t v36 = qword_26AEE1878;
          if ((qword_26AEE1878 & 1) == 0) {
            goto LABEL_254;
          }
LABEL_251:
          uint64_t v154 = (const google::protobuf::UnknownFieldSet *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v155 = *(void *)(v34 + 8);
          if (v155) {
            unsigned int v156 = (char *)((v155 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            unsigned int v156 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v34 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v156, v154);
LABEL_254:
          int v157 = *((_DWORD *)v35 + 4);
          if (v157)
          {
            uint64_t v158 = *(int *)(v34 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v34 + 16), v158 + v157);
            uint64_t v159 = *(void *)(v34 + 24);
            *(_DWORD *)(v34 + 16) += *((_DWORD *)v35 + 4);
            memcpy((void *)(v159 + 4 * v158), (const void *)v35[3], 4 * *((int *)v35 + 4));
          }
          int v160 = *((_DWORD *)v35 + 9);
          if (v160) {
            *(_DWORD *)(v34 + 36) = v160;
          }
          return;
        case 8u:
          if (*((_DWORD *)this + 15) == 11)
          {
            uint64_t v37 = *((void *)this + 6);
            uint64_t v38 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v39 = v38[1];
            if ((v39 & 1) == 0) {
              goto LABEL_263;
            }
            goto LABEL_260;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 11;
          uint64_t v98 = *((void *)this + 1);
          unsigned int v99 = (google::protobuf::Arena **)(v98 & 0xFFFFFFFFFFFFFFFELL);
          if (v98)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v99);
            uint64_t v37 = v161;
            *((void *)this + 6) = v161;
            if (*((_DWORD *)a2 + 15) == 11)
            {
LABEL_139:
              uint64_t v38 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v39 = v38[1];
              if ((v39 & 1) == 0) {
                goto LABEL_263;
              }
              goto LABEL_260;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v99);
            uint64_t v37 = v100;
            *((void *)this + 6) = v100;
            if (*((_DWORD *)a2 + 15) == 11) {
              goto LABEL_139;
            }
          }
          uint64_t v38 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          uint64_t v39 = qword_26AEE1878;
          if ((qword_26AEE1878 & 1) == 0) {
            goto LABEL_263;
          }
LABEL_260:
          unsigned int v162 = (const google::protobuf::UnknownFieldSet *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v163 = *(void *)(v37 + 8);
          if (v163) {
            unint64_t v164 = (char *)((v163 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            unint64_t v164 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v37 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v164, v162);
LABEL_263:
          int v165 = *((_DWORD *)v38 + 4);
          if (v165)
          {
            uint64_t v166 = *(int *)(v37 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v37 + 16), v166 + v165);
            uint64_t v167 = *(void *)(v37 + 24);
            *(_DWORD *)(v37 + 16) += *((_DWORD *)v38 + 4);
            memcpy((void *)(v167 + 4 * v166), (const void *)v38[3], 4 * *((int *)v38 + 4));
          }
          int v168 = *((_DWORD *)v38 + 9);
          if (v168) {
            *(_DWORD *)(v37 + 36) = v168;
          }
          return;
        case 9u:
          if (*((_DWORD *)this + 15) == 12)
          {
            int v40 = (char *)*((void *)this + 6);
            uint64_t v41 = (const operations_research::sat::LinearConstraintProto *)*((void *)a2 + 6);
            goto LABEL_48;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 12;
          uint64_t v101 = *((void *)this + 1);
          unsigned int v102 = (google::protobuf::Arena **)(v101 & 0xFFFFFFFFFFFFFFFELL);
          if (v101)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v102);
            *((void *)this + 6) = v40;
            if (*((_DWORD *)a2 + 15) == 12)
            {
LABEL_143:
              uint64_t v41 = (const operations_research::sat::LinearConstraintProto *)*((void *)a2 + 6);
              goto LABEL_48;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v102);
            *((void *)this + 6) = v40;
            if (*((_DWORD *)a2 + 15) == 12) {
              goto LABEL_143;
            }
          }
          uint64_t v41 = (const operations_research::sat::LinearConstraintProto *)&operations_research::sat::_LinearConstraintProto_default_instance_;
LABEL_48:
          operations_research::sat::LinearConstraintProto::MergeFrom(v40, v41);
          return;
        case 0xAu:
          if (*((_DWORD *)this + 15) == 13) {
            goto LABEL_102;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 13;
          uint64_t v42 = *((void *)this + 1);
          uint64_t v43 = (google::protobuf::Arena **)(v42 & 0xFFFFFFFFFFFFFFFELL);
          if (v42)
          {
            unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(*v43);
            *((void *)this + 6) = v20;
            if (*((_DWORD *)a2 + 15) == 13) {
              goto LABEL_103;
            }
          }
          else
          {
            unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>((google::protobuf::Arena *)v43);
            *((void *)this + 6) = v20;
            if (*((_DWORD *)a2 + 15) == 13) {
              goto LABEL_103;
            }
          }
          uint64_t v44 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
          uint64_t v45 = qword_26AEE1E40;
          if ((qword_26AEE1E40 & 1) == 0) {
            goto LABEL_107;
          }
          goto LABEL_104;
        case 0xBu:
          if (*((_DWORD *)this + 15) == 14)
          {
            unint64_t v46 = *((void *)this + 6);
            uint64_t v47 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v48 = v47[1];
            if ((v48 & 1) == 0) {
              goto LABEL_276;
            }
            goto LABEL_273;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 14;
          uint64_t v103 = *((void *)this + 1);
          uint64_t v104 = (google::protobuf::Arena **)(v103 & 0xFFFFFFFFFFFFFFFELL);
          if (v103)
          {
            unint64_t v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v104);
            *((void *)this + 6) = v46;
            if (*((_DWORD *)a2 + 15) == 14)
            {
LABEL_148:
              uint64_t v47 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v48 = v47[1];
              if ((v48 & 1) == 0) {
                goto LABEL_276;
              }
              goto LABEL_273;
            }
          }
          else
          {
            unint64_t v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v104);
            *((void *)this + 6) = v46;
            if (*((_DWORD *)a2 + 15) == 14) {
              goto LABEL_148;
            }
          }
          uint64_t v47 = &operations_research::sat::_ElementConstraintProto_default_instance_;
          uint64_t v48 = qword_26AEE1B60;
          if ((qword_26AEE1B60 & 1) == 0) {
            goto LABEL_276;
          }
LABEL_273:
          unsigned int v169 = (const google::protobuf::UnknownFieldSet *)((v48 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v170 = *(void *)(v46 + 8);
          if (v170) {
            unsigned int v171 = (char *)((v170 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            unsigned int v171 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v46 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v171, v169);
LABEL_276:
          int v172 = *((_DWORD *)v47 + 4);
          if (v172)
          {
            uint64_t v173 = *(int *)(v46 + 16);
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v46 + 16), v173 + v172);
            uint64_t v174 = *(void *)(v46 + 24);
            *(_DWORD *)(v46 + 16) += *((_DWORD *)v47 + 4);
            memcpy((void *)(v174 + 4 * v173), (const void *)v47[3], 4 * *((int *)v47 + 4));
          }
          int v175 = *((_DWORD *)v47 + 9);
          if (v175) {
            *(_DWORD *)(v46 + 36) = v175;
          }
          int v176 = *((_DWORD *)v47 + 10);
          if (v176) {
            *(_DWORD *)(v46 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v176;
          }
          return;
        case 0xCu:
          if (*((_DWORD *)this + 15) == 15)
          {
            int v49 = (char *)*((void *)this + 6);
            uint64_t v50 = (const operations_research::sat::CircuitConstraintProto *)*((void *)a2 + 6);
            goto LABEL_60;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 15;
          uint64_t v105 = *((void *)this + 1);
          uint64_t v106 = (google::protobuf::Arena **)(v105 & 0xFFFFFFFFFFFFFFFELL);
          if (v105)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(*v106);
            *((void *)this + 6) = v49;
            if (*((_DWORD *)a2 + 15) == 15)
            {
LABEL_152:
              uint64_t v50 = (const operations_research::sat::CircuitConstraintProto *)*((void *)a2 + 6);
              goto LABEL_60;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>((google::protobuf::Arena *)v106);
            *((void *)this + 6) = v49;
            if (*((_DWORD *)a2 + 15) == 15) {
              goto LABEL_152;
            }
          }
          uint64_t v50 = (const operations_research::sat::CircuitConstraintProto *)&operations_research::sat::_CircuitConstraintProto_default_instance_;
LABEL_60:
          operations_research::sat::CircuitConstraintProto::MergeFrom(v49, v50);
          return;
        case 0xDu:
          if (*((_DWORD *)this + 15) == 16)
          {
            uint64_t v51 = *((void *)this + 6);
            unint64_t v52 = (const operations_research::sat::TableConstraintProto *)*((void *)a2 + 6);
            goto LABEL_64;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 16;
          uint64_t v107 = *((void *)this + 1);
          unsigned int v108 = (google::protobuf::Arena **)(v107 & 0xFFFFFFFFFFFFFFFELL);
          if (v107)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(*v108);
            *((void *)this + 6) = v51;
            if (*((_DWORD *)a2 + 15) == 16)
            {
LABEL_157:
              unint64_t v52 = (const operations_research::sat::TableConstraintProto *)*((void *)a2 + 6);
              goto LABEL_64;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>((google::protobuf::Arena *)v108);
            *((void *)this + 6) = v51;
            if (*((_DWORD *)a2 + 15) == 16) {
              goto LABEL_157;
            }
          }
          unint64_t v52 = (const operations_research::sat::TableConstraintProto *)&operations_research::sat::_TableConstraintProto_default_instance_;
LABEL_64:
          operations_research::sat::TableConstraintProto::MergeFrom(v51, v52);
          return;
        case 0xEu:
          if (*((_DWORD *)this + 15) == 17)
          {
            uint64_t v53 = *((void *)this + 6);
            unsigned int v54 = (const operations_research::sat::AutomatonConstraintProto *)*((void *)a2 + 6);
            goto LABEL_68;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 17;
          uint64_t v109 = *((void *)this + 1);
          uint64_t v110 = (google::protobuf::Arena **)(v109 & 0xFFFFFFFFFFFFFFFELL);
          if (v109)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(*v110);
            *((void *)this + 6) = v53;
            if (*((_DWORD *)a2 + 15) == 17)
            {
LABEL_162:
              unsigned int v54 = (const operations_research::sat::AutomatonConstraintProto *)*((void *)a2 + 6);
              goto LABEL_68;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>((google::protobuf::Arena *)v110);
            *((void *)this + 6) = v53;
            if (*((_DWORD *)a2 + 15) == 17) {
              goto LABEL_162;
            }
          }
          unsigned int v54 = (const operations_research::sat::AutomatonConstraintProto *)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
LABEL_68:
          operations_research::sat::AutomatonConstraintProto::MergeFrom(v53, v54);
          return;
        case 0xFu:
          if (*((_DWORD *)this + 15) == 18)
          {
            unsigned int v55 = (char *)*((void *)this + 6);
            unint64_t v56 = (const operations_research::sat::InverseConstraintProto *)*((void *)a2 + 6);
            goto LABEL_72;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 18;
          uint64_t v111 = *((void *)this + 1);
          v112 = (google::protobuf::Arena **)(v111 & 0xFFFFFFFFFFFFFFFELL);
          if (v111)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(*v112);
            *((void *)this + 6) = v55;
            if (*((_DWORD *)a2 + 15) == 18)
            {
LABEL_167:
              unint64_t v56 = (const operations_research::sat::InverseConstraintProto *)*((void *)a2 + 6);
              goto LABEL_72;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>((google::protobuf::Arena *)v112);
            *((void *)this + 6) = v55;
            if (*((_DWORD *)a2 + 15) == 18) {
              goto LABEL_167;
            }
          }
          unint64_t v56 = (const operations_research::sat::InverseConstraintProto *)&operations_research::sat::_InverseConstraintProto_default_instance_;
LABEL_72:
          operations_research::sat::InverseConstraintProto::MergeFrom(v55, v56);
          return;
        case 0x10u:
          if (*((_DWORD *)this + 15) == 19)
          {
            unsigned int v57 = (void *)*((void *)this + 6);
            unint64_t v58 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v59 = v58[1];
            if ((v59 & 1) == 0) {
              goto LABEL_303;
            }
            goto LABEL_300;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 19;
          uint64_t v113 = *((void *)this + 1);
          unsigned int v114 = (google::protobuf::Arena **)(v113 & 0xFFFFFFFFFFFFFFFELL);
          if (v113)
          {
            unsigned int v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(*v114);
            *((void *)this + 6) = v57;
            if (*((_DWORD *)a2 + 15) == 19)
            {
LABEL_172:
              unint64_t v58 = (uint64_t *)*((void *)a2 + 6);
              uint64_t v59 = v58[1];
              if ((v59 & 1) == 0) {
                goto LABEL_303;
              }
              goto LABEL_300;
            }
          }
          else
          {
            unsigned int v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>((google::protobuf::Arena *)v114);
            *((void *)this + 6) = v57;
            if (*((_DWORD *)a2 + 15) == 19) {
              goto LABEL_172;
            }
          }
          unint64_t v58 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          uint64_t v59 = qword_26AEE1BD0;
          if ((qword_26AEE1BD0 & 1) == 0) {
            goto LABEL_303;
          }
LABEL_300:
          v177 = (const google::protobuf::UnknownFieldSet *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v178 = v57[1];
          if (v178) {
            v179 = (char *)((v178 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v179 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v57 + 1);
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v179, v177);
LABEL_303:
          int v180 = *((_DWORD *)v58 + 4);
          if (v180) {
            *((_DWORD *)v57 + 4) = v180;
          }
          int v181 = *((_DWORD *)v58 + 5);
          if (v181) {
            *((_DWORD *)v57 + 5) = v181;
          }
          int v182 = *((_DWORD *)v58 + 6);
          if (v182) {
            *((_DWORD *)v57 + 6) = v182;
          }
          return;
        case 0x11u:
          if (*((_DWORD *)this + 15) == 20) {
            goto LABEL_102;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 20;
          uint64_t v60 = *((void *)this + 1);
          unsigned int v61 = (google::protobuf::Arena **)(v60 & 0xFFFFFFFFFFFFFFFELL);
          if (v60)
          {
            unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v61);
            *((void *)this + 6) = v20;
            if (*((_DWORD *)a2 + 15) == 20) {
              goto LABEL_103;
            }
          }
          else
          {
            unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v61);
            *((void *)this + 6) = v20;
            if (*((_DWORD *)a2 + 15) == 20) {
              goto LABEL_103;
            }
          }
          uint64_t v44 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
          uint64_t v45 = qword_26AEE1CD8;
          if ((qword_26AEE1CD8 & 1) == 0) {
            goto LABEL_107;
          }
          goto LABEL_104;
        case 0x12u:
          if (*((_DWORD *)this + 15) == 21)
          {
            uint64_t v62 = *((void *)this + 6);
            unsigned int v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((void *)a2 + 6);
            goto LABEL_84;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 21;
          uint64_t v115 = *((void *)this + 1);
          v116 = (google::protobuf::Arena **)(v115 & 0xFFFFFFFFFFFFFFFELL);
          if (v115)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(*v116);
            *((void *)this + 6) = v62;
            if (*((_DWORD *)a2 + 15) == 21)
            {
LABEL_176:
              unsigned int v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)*((void *)a2 + 6);
              goto LABEL_84;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>((google::protobuf::Arena *)v116);
            *((void *)this + 6) = v62;
            if (*((_DWORD *)a2 + 15) == 21) {
              goto LABEL_176;
            }
          }
          unsigned int v63 = (const operations_research::sat::NoOverlap2DConstraintProto *)&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
LABEL_84:
          operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(v62, v63);
          return;
        case 0x13u:
          if (*((_DWORD *)this + 15) == 22)
          {
            uint64_t v64 = *((void *)this + 6);
            unsigned int v65 = (const operations_research::sat::CumulativeConstraintProto *)*((void *)a2 + 6);
            goto LABEL_88;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 22;
          uint64_t v117 = *((void *)this + 1);
          uint64_t v118 = (google::protobuf::Arena **)(v117 & 0xFFFFFFFFFFFFFFFELL);
          if (v117)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v118);
            *((void *)this + 6) = v64;
            if (*((_DWORD *)a2 + 15) == 22)
            {
LABEL_181:
              unsigned int v65 = (const operations_research::sat::CumulativeConstraintProto *)*((void *)a2 + 6);
              goto LABEL_88;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v118);
            *((void *)this + 6) = v64;
            if (*((_DWORD *)a2 + 15) == 22) {
              goto LABEL_181;
            }
          }
          unsigned int v65 = (const operations_research::sat::CumulativeConstraintProto *)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
LABEL_88:
          operations_research::sat::CumulativeConstraintProto::MergeFrom(v64, v65);
          return;
        case 0x14u:
          if (*((_DWORD *)this + 15) == 23)
          {
            uint64_t v66 = *((void *)this + 6);
            unsigned int v67 = (const operations_research::sat::RoutesConstraintProto *)*((void *)a2 + 6);
            goto LABEL_92;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 23;
          uint64_t v119 = *((void *)this + 1);
          unsigned int v120 = (google::protobuf::Arena **)(v119 & 0xFFFFFFFFFFFFFFFELL);
          if (v119)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(*v120);
            *((void *)this + 6) = v66;
            if (*((_DWORD *)a2 + 15) == 23)
            {
LABEL_186:
              unsigned int v67 = (const operations_research::sat::RoutesConstraintProto *)*((void *)a2 + 6);
              goto LABEL_92;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>((google::protobuf::Arena *)v120);
            *((void *)this + 6) = v66;
            if (*((_DWORD *)a2 + 15) == 23) {
              goto LABEL_186;
            }
          }
          unsigned int v67 = (const operations_research::sat::RoutesConstraintProto *)&operations_research::sat::_RoutesConstraintProto_default_instance_;
LABEL_92:
          operations_research::sat::RoutesConstraintProto::MergeFrom(v66, v67);
          return;
        case 0x15u:
          if (*((_DWORD *)this + 15) == 24)
          {
            uint64_t v68 = *((void *)this + 6);
            unsigned int v69 = (const operations_research::sat::ReservoirConstraintProto *)*((void *)a2 + 6);
            goto LABEL_96;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 24;
          uint64_t v121 = *((void *)this + 1);
          uint64_t v122 = (google::protobuf::Arena **)(v121 & 0xFFFFFFFFFFFFFFFELL);
          if (v121)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(*v122);
            *((void *)this + 6) = v68;
            if (*((_DWORD *)a2 + 15) == 24)
            {
LABEL_191:
              unsigned int v69 = (const operations_research::sat::ReservoirConstraintProto *)*((void *)a2 + 6);
              goto LABEL_96;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>((google::protobuf::Arena *)v122);
            *((void *)this + 6) = v68;
            if (*((_DWORD *)a2 + 15) == 24) {
              goto LABEL_191;
            }
          }
          unsigned int v69 = (const operations_research::sat::ReservoirConstraintProto *)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
LABEL_96:
          operations_research::sat::ReservoirConstraintProto::MergeFrom(v68, v69);
          return;
        case 0x16u:
          if (*((_DWORD *)this + 15) == 25)
          {
            v70 = (char *)*((void *)this + 6);
            unsigned int v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((void *)a2 + 6);
            goto LABEL_100;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 25;
          uint64_t v123 = *((void *)this + 1);
          v124 = (google::protobuf::Arena **)(v123 & 0xFFFFFFFFFFFFFFFELL);
          if (v123)
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(*v124);
            *((void *)this + 6) = v70;
            if (*((_DWORD *)a2 + 15) == 25)
            {
LABEL_196:
              unsigned int v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((void *)a2 + 6);
              goto LABEL_100;
            }
          }
          else
          {
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>((google::protobuf::Arena *)v124);
            *((void *)this + 6) = v70;
            if (*((_DWORD *)a2 + 15) == 25) {
              goto LABEL_196;
            }
          }
          unsigned int v71 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
LABEL_100:
          operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v70, v71);
          return;
        case 0x17u:
          if (*((_DWORD *)this + 15) == 26)
          {
LABEL_102:
            unint64_t v20 = *((void *)this + 6);
            goto LABEL_103;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 26;
          uint64_t v125 = *((void *)this + 1);
          unsigned int v126 = (google::protobuf::Arena *)(v125 & 0xFFFFFFFFFFFFFFFELL);
          if (v125) {
            unsigned int v126 = *(google::protobuf::Arena **)v126;
          }
          unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v126);
          *((void *)this + 6) = v20;
          if (*((_DWORD *)a2 + 15) == 26)
          {
LABEL_103:
            uint64_t v44 = (uint64_t *)*((void *)a2 + 6);
            uint64_t v45 = v44[1];
            if ((v45 & 1) == 0) {
              goto LABEL_107;
            }
            goto LABEL_104;
          }
LABEL_202:
          uint64_t v44 = &operations_research::sat::_BoolArgumentProto_default_instance_;
          uint64_t v45 = qword_26AEE17F0;
          if ((qword_26AEE17F0 & 1) == 0) {
            goto LABEL_107;
          }
LABEL_104:
          unsigned int v72 = (const google::protobuf::UnknownFieldSet *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
          uint64_t v73 = *(void *)(v20 + 8);
          if (v73) {
            uint64_t v74 = (char *)((v73 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v74 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(v20 + 8));
          }
          google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v74, v72);
LABEL_107:
          int v75 = *((_DWORD *)v44 + 4);
          if (v75)
          {
            uint64_t v77 = *(int *)(v20 + 16);
            unint64_t v76 = v20 + 16;
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v76, v77 + v75);
            uint64_t v78 = *(void *)(v76 + 8);
            *(_DWORD *)v76 += *((_DWORD *)v44 + 4);
            unsigned int v79 = (void *)(v78 + 4 * v77);
            uint64_t v80 = (const void *)v44[3];
            size_t v81 = 4 * *((int *)v44 + 4);
            memcpy(v79, v80, v81);
          }
          return;
        case 0x18u:
          if (*((_DWORD *)this + 15) == 27) {
            goto LABEL_118;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 27;
          uint64_t v82 = *((void *)this + 1);
          unsigned int v83 = (google::protobuf::Arena **)(v82 & 0xFFFFFFFFFFFFFFFELL);
          if (v82)
          {
            unsigned int v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*v83);
            *((void *)this + 6) = v84;
            if (*((_DWORD *)a2 + 15) != 27) {
              goto LABEL_331;
            }
          }
          else
          {
            unsigned int v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>((google::protobuf::Arena *)v83);
            *((void *)this + 6) = v84;
            if (*((_DWORD *)a2 + 15) != 27) {
              goto LABEL_331;
            }
          }
          unsigned int v85 = (const operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
          goto LABEL_116;
        case 0x19u:
          if (*((_DWORD *)this + 15) == 28)
          {
LABEL_118:
            unsigned int v84 = (operations_research::sat::LinearArgumentProto *)*((void *)this + 6);
            unsigned int v85 = (const operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
LABEL_116:
            operations_research::sat::LinearArgumentProto::MergeFrom((uint64_t)v84, v85);
            return;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 28;
          uint64_t v127 = *((void *)this + 1);
          uint64_t v128 = (google::protobuf::Arena **)(v127 & 0xFFFFFFFFFFFFFFFELL);
          if (v127)
          {
            unsigned int v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*v128);
            *((void *)this + 6) = v84;
            if (*((_DWORD *)a2 + 15) == 28)
            {
LABEL_206:
              unsigned int v85 = (const operations_research::sat::LinearArgumentProto *)*((void *)a2 + 6);
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>((google::protobuf::Arena *)v128);
            *((void *)this + 6) = v84;
            if (*((_DWORD *)a2 + 15) == 28) {
              goto LABEL_206;
            }
          }
LABEL_331:
          unsigned int v85 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
          goto LABEL_116;
        default:
          return;
      }
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v13 = (std::string **)((char *)this + 40);
  uint64_t v14 = *((void *)this + 1);
  unint64_t v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if (v14)
  {
    unint64_t v15 = *(google::protobuf::Arena **)v15;
    unint64_t v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v16, *((const std::string **)a2 + 5));
      goto LABEL_14;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v15, (long long *)v12);
  unsigned int v17 = *((_DWORD *)a2 + 15) - 3;
  if (v17 <= 0x19) {
    goto LABEL_15;
  }
}

void operations_research::sat::ConstraintProto::CopyFrom(operations_research::sat::ConstraintProto *this, const google::protobuf::Message *a2)
{
  if (a2 == this) {
    return;
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 5);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      uint64_t v5 = *((void *)this + 1);
      if ((v5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_9:
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
      }
                                                                                             + 8));
      goto LABEL_11;
    }
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    goto LABEL_9;
  }
LABEL_11:
  if (v6)
  {
    operations_research::sat::ConstraintProto::MergeFrom(this, v6);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, v7);
  }
}

void operations_research::sat::ConstraintProto::CopyFrom(operations_research::sat::ConstraintProto *this, const operations_research::sat::ConstraintProto *a2)
{
  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v5 = *((void *)this + 5);
    if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        uint64_t v6 = *((void *)this + 1);
        if ((v6 & 1) == 0) {
          goto LABEL_6;
        }
        goto LABEL_11;
      }
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
    uint64_t v6 = *((void *)this + 1);
    if ((v6 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
      uint64_t v7 = this;
      uint64_t v8 = a2;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v7 = this;
    uint64_t v8 = a2;
LABEL_8:
    operations_research::sat::ConstraintProto::MergeFrom(v7, v8);
  }
}

uint64_t operations_research::sat::ConstraintProto::IsInitialized(operations_research::sat::ConstraintProto *this)
{
  return 1;
}

__n128 operations_research::sat::ConstraintProto::InternalSwap(__n128 *this, __n128 *a2)
{
  uint64_t v5 = &this->n128_u64[1];
  unint64_t v4 = this->n128_u64[1];
  unint64_t v6 = a2->n128_u64[1];
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(&a2->n128_u64[1]);
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  uint64_t v9 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v7;
  *(void *)uint64_t v7 = v9;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v10;
  uint64_t v11 = *((void *)v8 + 2);
  *((void *)v8 + 2) = *((void *)v7 + 2);
  *((void *)v7 + 2) = v11;
LABEL_8:
  unint64_t v12 = this[1].n128_u64[0];
  unint64_t v13 = this[1].n128_u64[1];
  __n128 result = a2[1];
  this[1] = result;
  a2[1].n128_u64[0] = v12;
  a2[1].n128_u64[1] = v13;
  unint64_t v15 = this[2].n128_u64[1];
  this[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v15;
  unint64_t v16 = this[3].n128_u64[0];
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v16;
  LODWORD(v16) = this[3].n128_u32[3];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = v16;
  return result;
}

uint64_t operations_research::sat::ConstraintProto::GetMetadata(operations_research::sat::ConstraintProto *this)
{
  return off_26AED01D8[38];
}

operations_research::sat::CpObjectiveProto *operations_research::sat::CpObjectiveProto::CpObjectiveProto(operations_research::sat::CpObjectiveProto *this, const operations_research::sat::CpObjectiveProto *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BEE40;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    unint64_t v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    uint64_t v8 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    uint64_t v10 = (void *)*((void *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((_DWORD *)this + 26) = 0;
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    if (*v4) {
      unint64_t v12 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v12 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v12, (const google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  return this;
}

void sub_23CBEAA54(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_23CBEAA80(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpObjectiveProto::~CpObjectiveProto(operations_research::sat::CpObjectiveProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::CpObjectiveProto::~CpObjectiveProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CpObjectiveProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

void operations_research::sat::CpObjectiveProto::Clear(operations_research::sat::CpObjectiveProto *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::CpObjectiveProto::_InternalParse(operations_research::sat::CpObjectiveProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  unint64_t v6 = a2;
  uint64_t v28 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 64);
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  uint64_t v11 = (operations_research::sat::CpObjectiveProto *)((char *)this + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    while (1)
    {
LABEL_15:
      unint64_t v16 = (google::protobuf::internal *)((char *)v6 + 1);
      unsigned int v17 = *(unsigned __int8 *)v6;
      if ((*(char *)v6 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      unsigned int v18 = v17 + (*(unsigned __int8 *)v16 << 7);
      unsigned int v17 = v18 - 128;
      if ((*(char *)v16 & 0x80000000) == 0) {
        break;
      }
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v18 - 128));
      uint64_t v28 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      unint64_t v16 = TagFallback;
      unsigned int v17 = a2;
      unsigned int v19 = (a2 >> 3) - 1;
      if (v19 > 4)
      {
LABEL_32:
        if (v17) {
          BOOL v21 = (v17 & 7) == 4;
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v17 - 1;
          return v16;
        }
        if (*v8)
        {
          uint64_t v22 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v22 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          unint64_t v16 = v28;
        }
        unint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v17, (google::protobuf::UnknownFieldSet *)v22, v16, (const char *)a3, a5);
        goto LABEL_6;
      }
LABEL_19:
      switch(v19)
      {
        case 0u:
          if (v17 == 10)
          {
            unint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v11, (unsigned __int8 *)v16, a3, a4);
            goto LABEL_6;
          }
          if (v17 != 8) {
            goto LABEL_32;
          }
          int v23 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          uint64_t v24 = *((unsigned int *)this + 4);
          if (v24 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v11, v24 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v24) = v23;
          *((_DWORD *)this + 4) = v24 + 1;
          break;
        case 1u:
          if (v17 != 17) {
            goto LABEL_32;
          }
          *((void *)this + 11) = *(void *)v16;
          uint64_t v28 = (google::protobuf::internal *)((char *)v16 + 8);
          unint64_t v6 = (google::protobuf::internal *)((char *)v16 + 8);
          if ((unint64_t)v16 + 8 >= *(void *)a3) {
            goto LABEL_13;
          }
          continue;
        case 2u:
          if (v17 != 25) {
            goto LABEL_32;
          }
          *((void *)this + 12) = *(void *)v16;
          uint64_t v28 = (google::protobuf::internal *)((char *)v16 + 8);
          unint64_t v6 = (google::protobuf::internal *)((char *)v16 + 8);
          if ((unint64_t)v16 + 8 >= *(void *)a3) {
            goto LABEL_13;
          }
          continue;
        case 3u:
          if (v17 == 34)
          {
            unint64_t v12 = (google::protobuf::internal *)v10;
            goto LABEL_5;
          }
          if (v17 != 32) {
            goto LABEL_32;
          }
          uint64_t v14 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          uint64_t v15 = *((unsigned int *)this + 10);
          if (v15 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<long long>::Reserve(v10, v15 + 1);
          }
          *(void *)(*((void *)this + 6) + 8 * v15) = v14;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 + 1;
          break;
        case 4u:
          if (v17 == 42)
          {
            unint64_t v12 = (google::protobuf::internal *)v9;
LABEL_5:
            unint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v12, (unsigned __int8 *)v16, a3, a4);
LABEL_6:
            unint64_t v6 = v13;
            uint64_t v28 = v13;
            if (!v13) {
              return v6;
            }
            goto LABEL_7;
          }
          if (v17 != 40) {
            goto LABEL_32;
          }
          uint64_t v25 = google::protobuf::internal::ReadVarint64(&v28, (const char **)a2);
          uint64_t v26 = *((unsigned int *)this + 16);
          if (v26 == *((_DWORD *)this + 17)) {
            google::protobuf::RepeatedField<long long>::Reserve(v9, v26 + 1);
          }
          *(void *)(*((void *)this + 9) + 8 * v26) = v25;
          *((_DWORD *)this + 16) = v26 + 1;
          break;
        default:
          goto LABEL_32;
      }
      unint64_t v6 = v28;
      if (!v28) {
        return v6;
      }
LABEL_7:
      if ((unint64_t)v6 >= *(void *)a3) {
        goto LABEL_13;
      }
    }
    unint64_t v16 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_18:
    uint64_t v28 = v16;
    unsigned int v19 = (v17 >> 3) - 1;
    goto LABEL_19;
  }
LABEL_13:
  if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) != (google::protobuf::internal *)*((int *)a3 + 7))
  {
    unint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
    uint64_t v28 = v6;
    if ((a2 & 1) == 0) {
      goto LABEL_15;
    }
  }
  return v6;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpObjectiveProto::_InternalSerialize(operations_research::sat::CpObjectiveProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *int v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v40 = v6 >> 14;
      v6 >>= 7;
    }
    while (v40);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  if (*((double *)this + 11) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v16 = *((void *)this + 11);
    *a2 = 17;
    *(void *)(a2 + 1) = v16;
    a2 += 9;
  }
  if (*((double *)this + 12) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v17 = *((void *)this + 12);
    *a2 = 25;
    *(void *)(a2 + 1) = v17;
    a2 += 9;
  }
  unsigned int v18 = *((_DWORD *)this + 14);
  if ((int)v18 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 34;
      unsigned int v19 = (unsigned __int8 *)(a2 + 1);
      if (v18 < 0x80) {
        goto LABEL_27;
      }
    }
    else
    {
      *a2 = 34;
      unsigned int v19 = (unsigned __int8 *)(a2 + 1);
      if (v18 < 0x80)
      {
LABEL_27:
        a2 += 2;
        unsigned __int8 *v19 = v18;
        unint64_t v20 = (unint64_t *)*((void *)this + 6);
        BOOL v21 = &v20[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v27 = *v20++;
            unint64_t v22 = v27;
            if (v27 > 0x7F)
            {
LABEL_32:
              *a2 = v22 | 0x80;
              unint64_t v24 = v22 >> 7;
              if (v22 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v24 | 0x80;
                  unint64_t v25 = v24 >> 7;
                  ++a2;
                  unint64_t v26 = v24 >> 14;
                  v24 >>= 7;
                }
                while (v26);
                *(a2 - 1) = v25;
              }
              else
              {
                a2[1] = v24;
                a2 += 2;
              }
              goto LABEL_29;
            }
          }
          else
          {
            unint64_t v23 = *v20++;
            unint64_t v22 = v23;
            if (v23 > 0x7F) {
              goto LABEL_32;
            }
          }
          *a2++ = v22;
LABEL_29:
          if (v20 >= v21) {
            goto LABEL_39;
          }
        }
      }
    }
    do
    {
      *v19++ = v18 | 0x80;
      unsigned int v41 = v18 >> 14;
      v18 >>= 7;
    }
    while (v41);
    a2 = (char *)(v19 - 1);
    goto LABEL_27;
  }
LABEL_39:
  unsigned int v28 = *((_DWORD *)this + 20);
  if ((int)v28 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 42;
      uint64_t v29 = (unsigned __int8 *)(a2 + 1);
      if (v28 < 0x80) {
        goto LABEL_42;
      }
    }
    else
    {
      *a2 = 42;
      uint64_t v29 = (unsigned __int8 *)(a2 + 1);
      if (v28 < 0x80)
      {
LABEL_42:
        a2 += 2;
        *uint64_t v29 = v28;
        uint64_t v30 = (unint64_t *)*((void *)this + 9);
        uint64_t v31 = &v30[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v37 = *v30++;
            unint64_t v32 = v37;
            if (v37 > 0x7F)
            {
LABEL_47:
              *a2 = v32 | 0x80;
              unint64_t v34 = v32 >> 7;
              if (v32 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v34 | 0x80;
                  unint64_t v35 = v34 >> 7;
                  ++a2;
                  unint64_t v36 = v34 >> 14;
                  v34 >>= 7;
                }
                while (v36);
                *(a2 - 1) = v35;
              }
              else
              {
                a2[1] = v34;
                a2 += 2;
              }
              goto LABEL_44;
            }
          }
          else
          {
            unint64_t v33 = *v30++;
            unint64_t v32 = v33;
            if (v33 > 0x7F) {
              goto LABEL_47;
            }
          }
          *a2++ = v32;
LABEL_44:
          if (v30 >= v31) {
            goto LABEL_54;
          }
        }
      }
    }
    do
    {
      *v29++ = v28 | 0x80;
      unsigned int v42 = v28 >> 14;
      v28 >>= 7;
    }
    while (v42);
    a2 = (char *)(v29 - 1);
    goto LABEL_42;
  }
LABEL_54:
  uint64_t v38 = *((void *)this + 1);
  if ((v38 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::CpObjectiveProto::ByteSizeLong(operations_research::sat::CpObjectiveProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  uint64_t v3 = 11;
  uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0) {
    uint64_t v3 = v4;
  }
  if (v2) {
    int v5 = v2;
  }
  else {
    int v5 = 0;
  }
  if (!v2) {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  uint64_t v6 = v3 + v2;
  uint64_t v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  if (v7)
  {
    int v8 = v7;
    if ((v7 & 0x80000000) != 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v6 += v9;
  }
  else
  {
    int v8 = 0;
  }
  *((_DWORD *)this + 14) = v8;
  uint64_t v10 = v6 + v7;
  uint64_t v11 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  uint64_t v12 = 11;
  uint64_t v13 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v11 >= 0) {
    uint64_t v12 = v13;
  }
  uint64_t v14 = v12 + v10;
  if (v11) {
    int v15 = v11;
  }
  else {
    int v15 = 0;
  }
  if (!v11) {
    uint64_t v14 = v10;
  }
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15;
  uint64_t v16 = v14 + v11;
  if (*((double *)this + 11) != 0.0) {
    v16 += 9;
  }
  if (*((double *)this + 12) == 0.0) {
    uint64_t v17 = (const google::protobuf::UnknownFieldSet *)v16;
  }
  else {
    uint64_t v17 = (const google::protobuf::UnknownFieldSet *)(v16 + 9);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpObjectiveProto *)((char *)this + 8), v17, (_DWORD *)this + 26);
  }
  else
  {
    *((_DWORD *)this + 26) = v17;
    return (char *)v17;
  }
}

void operations_research::sat::CpObjectiveProto::MergeFrom(operations_research::sat::CpObjectiveProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CpObjectiveProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::CpObjectiveProto::MergeFrom(uint64_t this, const operations_research::sat::CpObjectiveProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)(this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *(int *)(v3 + 40);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 40), v13 + v12);
    uint64_t v14 = *(void *)(v3 + 48);
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
    this = (uint64_t)memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(v3 + 64);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v3 + 64), v16 + v15);
    uint64_t v17 = *(void *)(v3 + 72);
    *(_DWORD *)(v3 + 64) += *((_DWORD *)a2 + 16);
    this = (uint64_t)memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  double v18 = *((double *)a2 + 11);
  if (v18 != 0.0) {
    *(double *)(v3 + 88) = v18;
  }
  double v19 = *((double *)a2 + 12);
  if (v19 != 0.0) {
    *(double *)(v3 + 96) = v19;
  }
  return this;
}

void operations_research::sat::CpObjectiveProto::CopyFrom(operations_research::sat::CpObjectiveProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *((_DWORD *)this + 16) = 0;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::CpObjectiveProto::MergeFrom((uint64_t)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::CpObjectiveProto::IsInitialized(operations_research::sat::CpObjectiveProto *this)
{
  return 1;
}

uint64_t operations_research::sat::CpObjectiveProto::GetMetadata(operations_research::sat::CpObjectiveProto *this)
{
  return off_26AED01D8[40];
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::~DecisionStrategyProto_AffineTransformation(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      int v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        int v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t vars8;

  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(void *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      int v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        int v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(void *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x23ECF2BC0](v2, 0x20C40DC1BFBCFLL);
    }
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::Clear(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalParse(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
        return a2;
      }
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
      if (v25) {
        return a2;
      }
    }
    int v9 = (char *)a2 + 1;
    unsigned int v10 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    unsigned int v11 = v10 + (*v9 << 7);
    unsigned int v10 = v11 - 128;
    if (*v9 < 0) {
      break;
    }
    int v9 = (char *)a2 + 2;
LABEL_8:
    unsigned int v12 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_30:
      if (v10 != 24) {
        goto LABEL_14;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
      unint64_t v20 = *v9;
      if (*v9 < 0)
      {
        int v21 = *(char *)a2;
        unint64_t v20 = v20 + (v21 << 7) - 128;
        if ((v21 & 0x80000000) == 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
          goto LABEL_3;
        }
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v20);
        *((void *)this + 3) = v22;
        if (!a2) {
          return a2;
        }
      }
      else
      {
LABEL_3:
        *((void *)this + 3) = v20;
      }
    }
    else
    {
LABEL_9:
      if (v12 == 2)
      {
        if (v10 != 16) {
          goto LABEL_14;
        }
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        unint64_t v14 = *v9;
        if (*v9 < 0)
        {
          int v15 = *(char *)a2;
          unint64_t v14 = v14 + (v15 << 7) - 128;
          if ((v15 & 0x80000000) == 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
            goto LABEL_23;
          }
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v14);
          *((void *)this + 2) = v23;
          if (!a2) {
            return a2;
          }
        }
        else
        {
LABEL_23:
          *((void *)this + 2) = v14;
        }
      }
      else if (v12 == 1 && v10 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
        LODWORD(v16) = *v9;
        if ((v16 & 0x80) == 0) {
          goto LABEL_27;
        }
        int v17 = *(char *)a2;
        uint64_t v16 = (const char *)(v16 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v16);
          *((_DWORD *)this + 8) = v24;
          if (!a2) {
            return a2;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_27:
          *((_DWORD *)this + 8) = v16;
        }
      }
      else
      {
LABEL_14:
        if (!v10 || (v10 & 7) == 4)
        {
          *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v10 - 1;
          return (google::protobuf::UnknownFieldSet *)v9;
        }
        if (*v8)
        {
          a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, a5);
          if (!a2) {
            return a2;
          }
        }
        else
        {
          unint64_t v26 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          a2 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)v26, (google::protobuf::UnknownFieldSet *)v9, (const char *)a3, v27);
          if (!a2) {
            return a2;
          }
        }
      }
    }
  }
  uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v11 - 128));
  if (TagFallback)
  {
    int v9 = (char *)TagFallback;
    unsigned int v10 = v19;
    unsigned int v12 = v19 >> 3;
    if (v19 >> 3 != 3) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalSerialize(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if (!v6)
  {
LABEL_9:
    unint64_t v7 = *((void *)this + 2);
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v6 = *((_DWORD *)this + 8);
    *a2 = 8;
    if (v6 <= 0x7F)
    {
LABEL_4:
      a2[1] = v6;
      a2 += 2;
      unint64_t v7 = *((void *)this + 2);
      if (!v7) {
        goto LABEL_21;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unint64_t v7 = *((void *)this + 2);
        *a2 = 16;
        if (v7 <= 0x7F)
        {
LABEL_12:
          a2[1] = v7;
          a2 += 2;
          unint64_t v9 = *((void *)this + 3);
          if (!v9) {
            goto LABEL_35;
          }
          goto LABEL_22;
        }
      }
      else
      {
        *a2 = 16;
        if (v7 <= 0x7F) {
          goto LABEL_12;
        }
      }
      a2[1] = v7 | 0x80;
      unint64_t v12 = v7 >> 7;
      if (v7 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v12 | 0x80;
          unint64_t v13 = v12 >> 7;
          ++a2;
          unint64_t v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(a2 - 1) = v13;
        unint64_t v9 = *((void *)this + 3);
        if (!v9) {
          goto LABEL_35;
        }
        goto LABEL_22;
      }
      a2[2] = v12;
      a2 += 3;
      goto LABEL_21;
    }
  }
  else
  {
    *a2 = 8;
    if (v6 <= 0x7F) {
      goto LABEL_4;
    }
  }
  a2[1] = v6 | 0x80;
  unint64_t v8 = (unint64_t)(int)v6 >> 7;
  if (!(v6 >> 14))
  {
    a2[2] = v8;
    a2 += 3;
    goto LABEL_9;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v8 | 0x80;
    unint64_t v10 = v8 >> 7;
    ++a2;
    unint64_t v11 = v8 >> 14;
    v8 >>= 7;
  }
  while (v11);
  *(a2 - 1) = v10;
  unint64_t v7 = *((void *)this + 2);
  if (v7) {
    goto LABEL_10;
  }
LABEL_21:
  unint64_t v9 = *((void *)this + 3);
  if (!v9) {
    goto LABEL_35;
  }
LABEL_22:
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unint64_t v9 = *((void *)this + 3);
    *a2 = 24;
    if (v9 <= 0x7F) {
      goto LABEL_24;
    }
  }
  else
  {
    *a2 = 24;
    if (v9 <= 0x7F)
    {
LABEL_24:
      a2[1] = v9;
      a2 += 2;
      goto LABEL_35;
    }
  }
  a2[1] = v9 | 0x80;
  unint64_t v15 = v9 >> 7;
  if (v9 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v15 | 0x80;
      unint64_t v16 = v15 >> 7;
      ++a2;
      unint64_t v17 = v15 >> 14;
      v15 >>= 7;
    }
    while (v17);
    *(a2 - 1) = v16;
  }
  else
  {
    a2[2] = v15;
    a2 += 3;
  }
LABEL_35:
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::DecisionStrategyProto_AffineTransformation::ByteSizeLong(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v3 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = (char *)v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)(v5 + 1);
  }
  else {
    unsigned int v6 = v4;
  }
  int v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v8);
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::DecisionStrategyProto_AffineTransformation *)((char *)this + 8), v6, (_DWORD *)this + 9);
  }
  *((_DWORD *)this + 9) = v6;
  return (char *)v6;
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::MergeFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    unsigned int v6 = v4;
    uint64_t v7 = v4[1];
    if (v7)
    {
      uint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v9 = *((void *)this + 1);
      if (v9) {
        unint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        unint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)this + 1);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, v8);
    }
    uint64_t v11 = v6[2];
    if (v11) {
      *((void *)this + 2) = v11;
    }
    uint64_t v12 = v6[3];
    if (v12) {
      *((void *)this + 3) = v12;
    }
    int v13 = *((_DWORD *)v6 + 8);
    if (v13) {
      *((_DWORD *)this + 8) = v13;
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    operations_research::sat::DecisionStrategyProto_AffineTransformation::MergeFrom(this, lpsrc);
  }
}

void operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, const operations_research::sat::DecisionStrategyProto_AffineTransformation *a2)
{
  if (a2 != this)
  {
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    uint64_t v4 = (void *)((char *)this + 16);
    *((_DWORD *)this + 8) = 0;
    unsigned int v6 = (unint64_t *)((char *)this + 8);
    uint64_t v5 = *((void *)this + 1);
    if ((v5 & 1) != 0 && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    uint64_t v7 = *((void *)a2 + 1);
    if (v7)
    {
      uint64_t v8 = (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (*v6) {
        uint64_t v9 = (char *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        uint64_t v9 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v9, v8);
    }
    uint64_t v10 = *((void *)a2 + 2);
    if (v10) {
      void *v4 = v10;
    }
    uint64_t v11 = *((void *)a2 + 3);
    if (v11) {
      *((void *)this + 3) = v11;
    }
    int v12 = *((_DWORD *)a2 + 8);
    if (v12) {
      *((_DWORD *)this + 8) = v12;
    }
  }
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::IsInitialized(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return 1;
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::GetMetadata(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return off_26AED01D8[42];
}

operations_research::sat::DecisionStrategyProto *operations_research::sat::DecisionStrategyProto::DecisionStrategyProto(operations_research::sat::DecisionStrategyProto *this, const operations_research::sat::DecisionStrategyProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BEFA0;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    unsigned int v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  int v7 = *((_DWORD *)a2 + 12);
  if (v7)
  {
    uint64_t v28 = *((void *)a2 + 7);
    unint64_t v27 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::DecisionStrategyProto *)((char *)this + 40), v7);
    unint64_t v26 = v4;
    int v8 = **((_DWORD **)this + 7);
    int v9 = *((_DWORD *)this + 12);
    int v10 = v8 - v9;
    if (v8 - v9 >= v7) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v10;
    }
    if ((int)v11 >= 1)
    {
      int v12 = (uint64_t *)v27;
      int v13 = (uint64_t *)(v28 + 8);
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(*v13++, *v12++);
        --v11;
      }
      while (v11);
    }
    if (v10 < v7)
    {
      unint64_t v14 = (google::protobuf::Arena *)*((void *)this + 5);
      int v15 = v9 + v7 - v8;
      uint64_t v16 = 2 * v10;
      unint64_t v17 = &v27[v16];
      uint64_t v18 = (uint64_t *)(v16 * 4 + v28 + 8);
      do
      {
        uint64_t v19 = *v18;
        unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(v14);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v19, (uint64_t)v20);
        *(void *)unint64_t v17 = v20;
        v17 += 2;
        ++v18;
        --v15;
      }
      while (v15);
    }
    int v21 = *((_DWORD *)this + 12) + v7;
    *((_DWORD *)this + 12) = v21;
    uint64_t v22 = (int *)*((void *)this + 7);
    uint64_t v4 = v26;
    if (*v22 < v21) {
      int *v22 = v21;
    }
  }
  *((_DWORD *)this + 18) = 0;
  uint64_t v23 = *((void *)a2 + 1);
  if (v23)
  {
    if (*v4) {
      int v24 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v24 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v24, (const google::protobuf::UnknownFieldSet *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 8) = *((void *)a2 + 8);
  return this;
}

void sub_23CBEC224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v9);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(operations_research::sat::DecisionStrategyProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      unsigned int v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        unsigned int v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>((void *)this + 5);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::DecisionStrategyProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void operations_research::sat::DecisionStrategyProto::Clear(operations_research::sat::DecisionStrategyProto *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v4 = *v3;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      uint64_t v5 = *(void *)(v4 + 8);
      if ((v5 & 1) != 0
        && *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((void *)this + 8) = 0;
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 1) != 0 && *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

char *operations_research::sat::DecisionStrategyProto::_InternalParse(operations_research::sat::DecisionStrategyProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t SizeFallback = (char *)a2;
  uint64_t v39 = a2;
  int v8 = (unint64_t *)((char *)this + 8);
  int v9 = (unsigned int *)((char *)this + 40);
  int v10 = (operations_research::sat::DecisionStrategyProto *)((char *)this + 16);
  while (1)
  {
LABEL_4:
    if ((unint64_t)SizeFallback >= *(void *)a3)
    {
      if (&SizeFallback[-*((void *)a3 + 1)] == (char *)*((int *)a3 + 7)) {
        return SizeFallback;
      }
      uint64_t SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, SizeFallback, *((_DWORD *)a3 + 23));
      uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (a2) {
        return SizeFallback;
      }
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
    unsigned int v12 = *SizeFallback;
    if ((*SizeFallback & 0x80000000) == 0)
    {
      uint64_t v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
      unsigned int v13 = (v12 >> 3) - 1;
      if (v13 <= 3) {
        goto LABEL_13;
      }
      goto LABEL_55;
    }
    unsigned int v14 = v12 + (*(unsigned __int8 *)v11 << 7);
    unsigned int v12 = v14 - 128;
    if (*(char *)v11 < 0) {
      break;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
    uint64_t v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
    unsigned int v13 = (v12 >> 3) - 1;
    if (v13 <= 3) {
      goto LABEL_13;
    }
LABEL_55:
    if (v12) {
      BOOL v35 = (v12 & 7) == 4;
    }
    else {
      BOOL v35 = 1;
    }
    if (v35)
    {
      *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v12 - 1;
      return (char *)v11;
    }
    if (*v8)
    {
      uint64_t SizeFallback = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v11, (const char *)a3, a5);
      uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback) {
        return SizeFallback;
      }
    }
    else
    {
      unint64_t v36 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      uint64_t SizeFallback = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, (google::protobuf::UnknownFieldSet *)v36, v39, (const char *)a3, v37);
      uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback) {
        return SizeFallback;
      }
    }
  }
  uint64_t TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v14 - 128));
  uint64_t v39 = TagFallback;
  if (TagFallback)
  {
    uint64_t v11 = TagFallback;
    unsigned int v12 = a2;
    unsigned int v13 = (a2 >> 3) - 1;
LABEL_13:
    switch(v13)
    {
      case 0u:
        if (v12 == 10)
        {
          uint64_t SizeFallback = google::protobuf::internal::PackedInt32Parser(v10, (unsigned __int8 *)v11, a3, a4);
          uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
        }
        else
        {
          if (v12 != 8) {
            goto LABEL_55;
          }
          int v33 = google::protobuf::internal::ReadVarint64(&v39, (const char **)a2);
          uint64_t v34 = *((unsigned int *)this + 4);
          if (v34 == *((_DWORD *)this + 5)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v34 + 1);
          }
          *(_DWORD *)(*((void *)this + 3) + 4 * v34) = v33;
          *((_DWORD *)this + 4) = v34 + 1;
          uint64_t SizeFallback = (char *)v39;
          if (!v39) {
            return SizeFallback;
          }
        }
        goto LABEL_4;
      case 1u:
        if (v12 != 16) {
          goto LABEL_55;
        }
        uint64_t SizeFallback = (char *)v11 + 1;
        a2 = (google::protobuf::UnknownFieldSet *)*(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v16 = *SizeFallback;
        a2 = (google::protobuf::UnknownFieldSet *)(a2 + (v16 << 7) - 128);
        if (v16 < 0)
        {
          uint64_t SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64(v11, (const char *)a2);
          uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          *((_DWORD *)this + 16) = a2;
        }
        else
        {
          uint64_t SizeFallback = (char *)v11 + 2;
LABEL_3:
          uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_DWORD *)this + 16) = a2;
        }
        goto LABEL_4;
      case 2u:
        if (v12 != 24) {
          goto LABEL_55;
        }
        uint64_t SizeFallback = (char *)v11 + 1;
        a2 = (google::protobuf::UnknownFieldSet *)*(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_26;
        }
        int v17 = *SizeFallback;
        a2 = (google::protobuf::UnknownFieldSet *)(a2 + (v17 << 7) - 128);
        if (v17 < 0)
        {
          uint64_t SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64(v11, (const char *)a2);
          uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          *((_DWORD *)this + 17) = a2;
        }
        else
        {
          uint64_t SizeFallback = (char *)v11 + 2;
LABEL_26:
          uint64_t v39 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((_DWORD *)this + 17) = a2;
        }
        goto LABEL_4;
      case 3u:
        if (v12 != 34) {
          goto LABEL_55;
        }
        uint64_t SizeFallback = (char *)v11 - 1;
        break;
      default:
        goto LABEL_55;
    }
    while (2)
    {
      uint64_t v18 = (google::protobuf::internal *)(SizeFallback + 1);
      uint64_t v39 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
      uint64_t v19 = (int *)*((void *)this + 7);
      if (v19)
      {
        uint64_t v20 = *((int *)this + 12);
        int v21 = *v19;
        if ((int)v20 < *v19)
        {
          *((_DWORD *)this + 12) = v20 + 1;
          uint64_t v22 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)&v19[2 * v20 + 2];
          uint64_t v23 = (const char *)*(unsigned __int8 *)v18;
          if (*(char *)v18 < 0)
          {
LABEL_32:
            uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v18, v23);
            if (!SizeFallback) {
              return SizeFallback;
            }
LABEL_39:
            uint64_t v26 = *((void *)a3 + 1);
            int v27 = v23 + SizeFallback - v26;
            *(void *)a3 = v26 + (v27 & (v27 >> 31));
            int v28 = *((_DWORD *)a3 + 7);
            *((_DWORD *)a3 + 7) = v27;
            LODWORD(v26) = *((_DWORD *)a3 + 22);
            BOOL v29 = __OFSUB__(v26, 1);
            LODWORD(v26) = v26 - 1;
            *((_DWORD *)a3 + 22) = v26;
            if ((int)v26 < 0 != v29) {
              return 0;
            }
            uint64_t v30 = operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalParse(v22, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, (uint64_t)a4, a5);
            uint64_t SizeFallback = (char *)v30;
            if (!v30) {
              return SizeFallback;
            }
            ++*((_DWORD *)a3 + 22);
            if (*((_DWORD *)a3 + 20)) {
              return 0;
            }
            int v31 = *((_DWORD *)a3 + 7) + v28 - v27;
            *((_DWORD *)a3 + 7) = v31;
            unint64_t v32 = *((void *)a3 + 1) + (v31 & (v31 >> 31));
            *(void *)a3 = v32;
            uint64_t v39 = v30;
            if (v32 <= (unint64_t)v30 || *(unsigned char *)v30 != 34) {
              goto LABEL_4;
            }
            continue;
          }
LABEL_38:
          uint64_t SizeFallback = (char *)v18 + 1;
          goto LABEL_39;
        }
        if (v21 == *((_DWORD *)this + 13))
        {
LABEL_36:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v21 + 1);
          uint64_t v19 = (int *)*((void *)this + 7);
          int v21 = *v19;
        }
        int *v19 = v21 + 1;
        uint64_t v22 = (operations_research::sat::DecisionStrategyProto_AffineTransformation *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*((google::protobuf::Arena **)this + 5));
        uint64_t v24 = *((void *)this + 7);
        uint64_t v25 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v25 + 1;
        *(void *)(v24 + 8 * v25 + 8) = v22;
        uint64_t v18 = v39;
        uint64_t v23 = (const char *)*(unsigned __int8 *)v39;
        if (*(char *)v39 < 0) {
          goto LABEL_32;
        }
        goto LABEL_38;
      }
      break;
    }
    int v21 = *((_DWORD *)this + 13);
    goto LABEL_36;
  }
  return 0;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::DecisionStrategyProto::_InternalSerialize(operations_research::sat::DecisionStrategyProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *int v7 = v6;
        int v8 = (int *)*((void *)this + 3);
        int v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 16);
  if (!v16)
  {
LABEL_27:
    unsigned int v17 = *((_DWORD *)this + 17);
    if (!v17) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v16 = *((_DWORD *)this + 16);
    *a2 = 16;
    if (v16 <= 0x7F)
    {
LABEL_19:
      a2[1] = v16;
      a2 += 2;
      unsigned int v17 = *((_DWORD *)this + 17);
      if (!v17) {
        goto LABEL_39;
      }
LABEL_28:
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        unsigned int v17 = *((_DWORD *)this + 17);
        *a2 = 24;
        if (v17 <= 0x7F)
        {
LABEL_30:
          a2[1] = v17;
          a2 += 2;
          int v20 = *((_DWORD *)this + 12);
          if (!v20) {
            goto LABEL_54;
          }
          goto LABEL_40;
        }
      }
      else
      {
        *a2 = 24;
        if (v17 <= 0x7F) {
          goto LABEL_30;
        }
      }
      a2[1] = v17 | 0x80;
      unint64_t v23 = (unint64_t)(int)v17 >> 7;
      if (v17 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v23 | 0x80;
          unint64_t v31 = v23 >> 7;
          ++a2;
          unint64_t v32 = v23 >> 14;
          v23 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        int v20 = *((_DWORD *)this + 12);
        if (!v20) {
          goto LABEL_54;
        }
        goto LABEL_40;
      }
      a2[2] = v23;
      a2 += 3;
      goto LABEL_39;
    }
  }
  else
  {
    *a2 = 16;
    if (v16 <= 0x7F) {
      goto LABEL_19;
    }
  }
  a2[1] = v16 | 0x80;
  unint64_t v19 = (unint64_t)(int)v16 >> 7;
  if (!(v16 >> 14))
  {
    a2[2] = v19;
    a2 += 3;
    goto LABEL_27;
  }
  a2 += 3;
  do
  {
    *(a2 - 1) = v19 | 0x80;
    unint64_t v21 = v19 >> 7;
    ++a2;
    unint64_t v22 = v19 >> 14;
    v19 >>= 7;
  }
  while (v22);
  *(a2 - 1) = v21;
  unsigned int v17 = *((_DWORD *)this + 17);
  if (v17) {
    goto LABEL_28;
  }
LABEL_39:
  int v20 = *((_DWORD *)this + 12);
  if (!v20) {
    goto LABEL_54;
  }
LABEL_40:
  for (int i = 0; i != v20; ++i)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v26 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)(*((void *)this + 7) + 8 * i + 8);
    *a2 = 34;
    unsigned int v27 = *((_DWORD *)v26 + 9);
    if (v27 <= 0x7F)
    {
      a2[1] = v27;
      uint64_t v25 = (unsigned __int8 *)(a2 + 2);
    }
    else
    {
      a2[1] = v27 | 0x80;
      unsigned int v28 = v27 >> 7;
      if (v27 >> 14)
      {
        uint64_t v25 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v25 - 1) = v28 | 0x80;
          unsigned int v29 = v28 >> 7;
          ++v25;
          unsigned int v30 = v28 >> 14;
          v28 >>= 7;
        }
        while (v30);
        *(v25 - 1) = v29;
      }
      else
      {
        a2[2] = v28;
        uint64_t v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    a2 = (char *)operations_research::sat::DecisionStrategyProto_AffineTransformation::_InternalSerialize(v26, (char *)v25, a3, a4);
  }
LABEL_54:
  uint64_t v33 = *((void *)this + 1);
  if ((v33 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::DecisionStrategyProto::ByteSizeLong(operations_research::sat::DecisionStrategyProto *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    int v3 = v2;
    if ((v2 & 0x80000000) != 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 8) = v3;
  uint64_t v5 = *((int *)this + 12);
  unsigned int v6 = (const google::protobuf::UnknownFieldSet *)(v4 + v2 + v5);
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    int v8 = (uint64_t *)(v7 + 8);
  }
  else {
    int v8 = 0;
  }
  if (v5)
  {
    uint64_t v9 = 8 * v5;
    while (1)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = *(void *)(*v8 + 16);
      if (!v11) {
        break;
      }
      unint64_t v12 = (char *)(((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1);
      uint64_t v13 = *(void *)(v10 + 24);
      if (v13) {
        goto LABEL_13;
      }
LABEL_14:
      int v14 = *(_DWORD *)(v10 + 32);
      if (v14)
      {
        if (v14 < 0) {
          uint64_t v15 = 11;
        }
        else {
          uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v12 += v15;
      }
      if (*(unsigned char *)(v10 + 8)) {
        unint64_t v12 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v10 + 8), (const google::protobuf::UnknownFieldSet *)v12, (_DWORD *)(v10 + 36));
      }
      else {
        *(_DWORD *)(v10 + 36) = v12;
      }
      unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6
                                                     + (void)v12
                                                     + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6));
      ++v8;
      v9 -= 8;
      if (!v9) {
        goto LABEL_26;
      }
    }
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(v10 + 24);
    if (!v13) {
      goto LABEL_14;
    }
LABEL_13:
    v12 += ((9 * (__clz(v13 | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_14;
  }
LABEL_26:
  int v16 = *((_DWORD *)this + 16);
  if (v16)
  {
    if (v16 < 0) {
      uint64_t v17 = 11;
    }
    else {
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v17);
  }
  int v18 = *((_DWORD *)this + 17);
  if (v18)
  {
    if (v18 < 0) {
      uint64_t v19 = 11;
    }
    else {
      uint64_t v19 = ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((char *)v6 + v19);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::DecisionStrategyProto *)((char *)this + 8), v6, (_DWORD *)this + 18);
  }
  else
  {
    *((_DWORD *)this + 18) = v6;
    return (char *)v6;
  }
}

void operations_research::sat::DecisionStrategyProto::MergeFrom(operations_research::sat::DecisionStrategyProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::DecisionStrategyProto::MergeFrom((uint64_t)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

uint64_t operations_research::sat::DecisionStrategyProto::MergeFrom(uint64_t this, const operations_research::sat::DecisionStrategyProto *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(this + 8);
    unsigned int v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      int v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    this = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *(int *)(v3 + 16);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v3 + 16), v10 + v9);
    uint64_t v11 = *(void *)(v3 + 24);
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
    this = (uint64_t)memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 12);
  if (v12)
  {
    uint64_t v34 = *((void *)a2 + 7);
    this = (uint64_t)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), v12);
    uint64_t v33 = this;
    int v13 = **(_DWORD **)(v3 + 56);
    int v14 = *(_DWORD *)(v3 + 48);
    int v15 = v13 - v14;
    if (v13 - v14 >= v12) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v15;
    }
    if ((int)v16 >= 1)
    {
      uint64_t v17 = (uint64_t *)this;
      int v18 = (uint64_t *)(v34 + 8);
      do
      {
        uint64_t v20 = *v18++;
        uint64_t v19 = v20;
        uint64_t v21 = *v17++;
        this = google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v19, v21);
        --v16;
      }
      while (v16);
    }
    if (v15 < v12)
    {
      unint64_t v22 = *(google::protobuf::Arena **)(v3 + 40);
      int v23 = v14 + v12 - v13;
      uint64_t v24 = 8 * v15;
      uint64_t v25 = (void *)(v33 + v24);
      uint64_t v26 = (uint64_t *)(v24 + v34 + 8);
      do
      {
        uint64_t v27 = *v26++;
        unsigned int v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(v22);
        this = google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(v27, (uint64_t)v28);
        *v25++ = v28;
        --v23;
      }
      while (v23);
    }
    int v29 = *(_DWORD *)(v3 + 48) + v12;
    *(_DWORD *)(v3 + 48) = v29;
    unsigned int v30 = *(int **)(v3 + 56);
    if (*v30 < v29) {
      int *v30 = v29;
    }
  }
  int v31 = *((_DWORD *)a2 + 16);
  if (v31) {
    *(_DWORD *)(v3 + 64) = v31;
  }
  int v32 = *((_DWORD *)a2 + 17);
  if (v32) {
    *(_DWORD *)(v3 + 68) = v32;
  }
  return this;
}

void operations_research::sat::DecisionStrategyProto::CopyFrom(operations_research::sat::DecisionStrategyProto *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = (uint64_t *)(*((void *)this + 7) + 8);
      do
      {
        uint64_t v6 = *v5;
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
        *(_DWORD *)(v6 + 32) = 0;
        uint64_t v7 = *(void *)(v6 + 8);
        if ((v7 & 1) != 0
          && *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
        {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
        }
        ++v5;
        --v4;
      }
      while (v4);
      *((_DWORD *)this + 12) = 0;
    }
    *((void *)this + 8) = 0;
    uint64_t v8 = *((void *)this + 1);
    if ((v8 & 1) != 0 && *(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v9)
    {
      operations_research::sat::DecisionStrategyProto::MergeFrom((uint64_t)this, v9);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v10);
    }
  }
}

uint64_t operations_research::sat::DecisionStrategyProto::CopyFrom(uint64_t this, const operations_research::sat::DecisionStrategyProto *a2)
{
  if (a2 != (const operations_research::sat::DecisionStrategyProto *)this)
  {
    uint64_t v4 = this;
    *(_DWORD *)(this + 16) = 0;
    uint64_t v5 = *(unsigned int *)(this + 48);
    if ((int)v5 >= 1)
    {
      uint64_t v6 = (uint64_t *)(*(void *)(this + 56) + 8);
      do
      {
        uint64_t v7 = *v6;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        uint64_t v8 = *(void *)(v7 + 8);
        if ((v8 & 1) != 0
          && *(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
        {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
                                                                                               + 8));
        }
        ++v6;
        --v5;
      }
      while (v5);
      *(_DWORD *)(v4 + 48) = 0;
    }
    *(void *)(v4 + 64) = 0;
    uint64_t v9 = *(void *)(v4 + 8);
    if ((v9 & 1) != 0 && *(void *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    return operations_research::sat::DecisionStrategyProto::MergeFrom(v4, a2);
  }
  return this;
}

uint64_t operations_research::sat::DecisionStrategyProto::IsInitialized(operations_research::sat::DecisionStrategyProto *this)
{
  return 1;
}

uint64_t operations_research::sat::DecisionStrategyProto::GetMetadata(operations_research::sat::DecisionStrategyProto *this)
{
  return off_26AED01D8[44];
}

operations_research::sat::PartialVariableAssignment *operations_research::sat::PartialVariableAssignment::PartialVariableAssignment(operations_research::sat::PartialVariableAssignment *this, const operations_research::sat::PartialVariableAssignment *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BF050;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    uint64_t v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    uint64_t v8 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_DWORD *)this + 15) = 0;
  uint64_t v9 = *((void *)a2 + 1);
  if (v9)
  {
    if (*v4) {
      uint64_t v10 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v10, (const google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  return this;
}

void sub_23CBED38C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void sub_23CBED3A8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(operations_research::sat::PartialVariableAssignment *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        uint64_t v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(void *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x23ECF2BC0](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::PartialVariableAssignment::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::PartialVariableAssignment::Clear(operations_research::sat::PartialVariableAssignment *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 1) != 0 && *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
  }
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::PartialVariableAssignment::_InternalParse(operations_research::sat::PartialVariableAssignment *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t v6 = a2;
  int v23 = a2;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (operations_research::sat::PartialVariableAssignment *)((char *)this + 40);
  uint64_t v10 = (operations_research::sat::PartialVariableAssignment *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(void *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *((void *)a3 + 1)) == (google::protobuf::internal *)*((int *)a3 + 7)) {
        return v6;
      }
      uint64_t v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)v6, *((_DWORD *)a3 + 23));
      int v23 = v6;
      if (a2) {
        return v6;
      }
    }
    int v13 = (unsigned __int8 *)v6 + 1;
    unsigned int v14 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    unsigned int v15 = v14 + (*v13 << 7);
    unsigned int v14 = v15 - 128;
    if ((char)*v13 < 0)
    {
      uint64_t TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v15 - 128));
      int v23 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      int v13 = (unsigned __int8 *)TagFallback;
      unsigned int v14 = a2;
      unsigned int v16 = a2 >> 3;
      if (a2 >> 3 != 2) {
        goto LABEL_10;
      }
LABEL_15:
      if (v14 == 18)
      {
        int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v9, v13, a3, a4);
        goto LABEL_4;
      }
      if (v14 == 16)
      {
        uint64_t v20 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
        uint64_t v21 = *((unsigned int *)this + 10);
        if (v21 == *((_DWORD *)this + 11)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v9, v21 + 1);
        }
        *(void *)(*((void *)this + 6) + 8 * v21) = v20;
        *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v21 + 1;
        goto LABEL_28;
      }
LABEL_30:
      if (!v14 || (v14 & 7) == 4)
      {
        *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
        return (google::protobuf::internal *)v13;
      }
      if (*v8)
      {
        uint64_t v11 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        uint64_t v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        int v13 = (unsigned __int8 *)v23;
      }
      int v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v11, (google::protobuf::UnknownFieldSet *)v13, (const char *)a3, a5);
LABEL_4:
      uint64_t v6 = v12;
      int v23 = v12;
      if (!v12) {
        return v6;
      }
    }
    else
    {
      int v13 = (unsigned __int8 *)v6 + 2;
LABEL_9:
      int v23 = (google::protobuf::internal *)v13;
      unsigned int v16 = v14 >> 3;
      if (v14 >> 3 == 2) {
        goto LABEL_15;
      }
LABEL_10:
      if (v16 != 1) {
        goto LABEL_30;
      }
      if (v14 == 10)
      {
        int v12 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v10, v13, a3, a4);
        goto LABEL_4;
      }
      if (v14 != 8) {
        goto LABEL_30;
      }
      int v18 = google::protobuf::internal::ReadVarint64(&v23, (const char **)a2);
      uint64_t v19 = *((unsigned int *)this + 4);
      if (v19 == *((_DWORD *)this + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v10, v19 + 1);
      }
      *(_DWORD *)(*((void *)this + 3) + 4 * v19) = v18;
      *((_DWORD *)this + 4) = v19 + 1;
LABEL_28:
      uint64_t v6 = v23;
      if (!v23) {
        return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::PartialVariableAssignment::_InternalSerialize(operations_research::sat::PartialVariableAssignment *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *a2 = 10;
      int v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *int v7 = v6;
        uint64_t v8 = (int *)*((void *)this + 3);
        uint64_t v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v15 = *v8++;
            unint64_t v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              unint64_t v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  unint64_t v13 = v12 >> 7;
                  ++a2;
                  unint64_t v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v11 = *v8++;
            unint64_t v10 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_16;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v28 = v6 >> 14;
      v6 >>= 7;
    }
    while (v28);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  unsigned int v16 = *((_DWORD *)this + 14);
  if ((int)v16 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80) {
        goto LABEL_19;
      }
    }
    else
    {
      *a2 = 18;
      uint64_t v17 = (unsigned __int8 *)(a2 + 1);
      if (v16 < 0x80)
      {
LABEL_19:
        a2 += 2;
        *uint64_t v17 = v16;
        int v18 = (unint64_t *)*((void *)this + 6);
        uint64_t v19 = &v18[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            unint64_t v25 = *v18++;
            unint64_t v20 = v25;
            if (v25 > 0x7F)
            {
LABEL_24:
              *a2 = v20 | 0x80;
              unint64_t v22 = v20 >> 7;
              if (v20 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v22 | 0x80;
                  unint64_t v23 = v22 >> 7;
                  ++a2;
                  unint64_t v24 = v22 >> 14;
                  v22 >>= 7;
                }
                while (v24);
                *(a2 - 1) = v23;
              }
              else
              {
                a2[1] = v22;
                a2 += 2;
              }
              goto LABEL_21;
            }
          }
          else
          {
            unint64_t v21 = *v18++;
            unint64_t v20 = v21;
            if (v21 > 0x7F) {
              goto LABEL_24;
            }
          }
          *a2++ = v20;
LABEL_21:
          if (v18 >= v19) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v17++ = v16 | 0x80;
      unsigned int v29 = v16 >> 14;
      v16 >>= 7;
    }
    while (v29);
    a2 = (char *)(v17 - 1);
    goto LABEL_19;
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::PartialVariableAssignment::ByteSizeLong(operations_research::sat::PartialVariableAssignment *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2;
      uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
      if (!v4) {
        goto LABEL_9;
      }
LABEL_6:
      int v5 = v4;
      if ((v4 & 0x80000000) != 0) {
        uint64_t v6 = 11;
      }
      else {
        uint64_t v6 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v3 += v6;
      goto LABEL_12;
    }
    *((_DWORD *)this + 8) = v2;
    uint64_t v3 = v2 + 11;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v3 = 0;
    uint64_t v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
    if (v4) {
      goto LABEL_6;
    }
  }
LABEL_9:
  int v5 = 0;
LABEL_12:
  *((_DWORD *)this + 14) = v5;
  int v7 = (const google::protobuf::UnknownFieldSet *)(v3 + v4);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::PartialVariableAssignment *)((char *)this + 8), v7, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v7;
    return (char *)(v3 + v4);
  }
}

void operations_research::sat::PartialVariableAssignment::MergeFrom(operations_research::sat::PartialVariableAssignment *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom((char *)this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::PartialVariableAssignment::CopyFrom(operations_research::sat::PartialVariableAssignment *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    uint64_t v4 = *((void *)this + 1);
    if ((v4 & 1) != 0 && *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
    if (v5)
    {
      operations_research::sat::CircuitCoveringConstraintProto::MergeFrom((char *)this, v5);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
    }
  }
}

uint64_t operations_research::sat::PartialVariableAssignment::IsInitialized(operations_research::sat::PartialVariableAssignment *this)
{
  return 1;
}

uint64_t operations_research::sat::PartialVariableAssignment::GetMetadata(operations_research::sat::PartialVariableAssignment *this)
{
  return off_26AED01D8[46];
}

void *google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto>::~RepeatedPtrField(void *a1)
{
  uint64_t v2 = (operations_research::sat::DecisionStrategyProto **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(*v4);
          MEMORY[0x23ECF2BC0]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      uint64_t v2 = (operations_research::sat::DecisionStrategyProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

void *google::protobuf::RepeatedPtrField<operations_research::sat::ConstraintProto>::~RepeatedPtrField(void *a1)
{
  uint64_t v2 = (operations_research::sat::ConstraintProto **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v4);
          MEMORY[0x23ECF2BC0]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      uint64_t v2 = (operations_research::sat::ConstraintProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

void *google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(void *a1)
{
  uint64_t v2 = (operations_research::sat::IntegerVariableProto **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v4);
          MEMORY[0x23ECF2BC0]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      uint64_t v2 = (operations_research::sat::IntegerVariableProto **)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::CpModelProto(operations_research::sat::CpModelProto *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0BF100;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a2;
  *((void *)this + 9) = 0;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = a2;
  *((_DWORD *)this + 34) = 0;
  if (atomic_load_explicit(scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_23CBEDEC0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 88);
  uint64_t v3 = *(operations_research::sat::DecisionStrategyProto ***)(v1 + 80);
  if (v3) {
    operations_research::sat::CpModelProto::CpModelProto((void *)(v1 + 64), v3, (operations_research::sat::DecisionStrategyProto ***)(v1 + 80));
  }
  *(void *)(v1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v4 = *(operations_research::sat::ConstraintProto ***)(v1 + 56);
  if (v4 && !*(void *)(v1 + 40))
  {
    uint64_t v5 = v4 + 1;
    uint64_t v6 = *(unsigned int *)v4;
    if ((int)v6 >= 1)
    {
      do
      {
        int v7 = v5;
        if (*v5)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v5);
          MEMORY[0x23ECF2BC0]();
        }
        uint64_t v5 = v7 + 1;
        --v6;
      }
      while (v6);
      uint64_t v4 = *(operations_research::sat::ConstraintProto ***)(v1 + 56);
    }
    operator delete(v4);
  }
  *(void *)(v1 + 56) = 0;
  uint64_t v8 = *(operations_research::sat::IntegerVariableProto ***)(v1 + 32);
  if (v8 && !*(void *)(v1 + 16))
  {
    uint64_t v9 = v8 + 1;
    uint64_t v10 = *(unsigned int *)v8;
    if ((int)v10 >= 1)
    {
      do
      {
        unint64_t v11 = v9;
        if (*v9)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v9);
          MEMORY[0x23ECF2BC0]();
        }
        uint64_t v9 = v11 + 1;
        --v10;
      }
      while (v10);
      uint64_t v8 = *(operations_research::sat::IntegerVariableProto ***)(v1 + 32);
    }
    operator delete(v8);
  }
  *(void *)(v1 + 32) = 0;
  _Unwind_Resume(a1);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::CpModelProto(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v73 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  unsigned int v72 = (operations_research::sat::CpModelProto *)((char *)this + 16);
  *(void *)this = &unk_26F0BF100;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  int v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    v70 = (google::protobuf::internal::RepeatedPtrFieldBase *)*((void *)a2 + 4);
    uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v72, v4);
    uint64_t v6 = v5;
    int v7 = **((_DWORD **)this + 4);
    int v8 = *((_DWORD *)this + 6);
    int v9 = v7 - v8;
    if (v7 - v8 >= v4) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v9;
    }
    if ((int)v10 >= 1)
    {
      unint64_t v11 = (operations_research::sat::IntegerVariableProto **)((char *)v70 + 8);
      unint64_t v12 = (operations_research::sat::IntegerVariableProto **)v5;
      do
      {
        unint64_t v14 = *v11++;
        unint64_t v13 = v14;
        unint64_t v15 = *v12++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v4)
    {
      unsigned int v16 = *(google::protobuf::Arena **)v72;
      int v17 = v8 + v4 - v7;
      uint64_t v18 = 2 * v9;
      uint64_t v19 = (operations_research::sat::IntegerVariableProto **)&v6[v18];
      unint64_t v20 = (operations_research::sat::IntegerVariableProto **)((char *)v70 + v18 * 4 + 8);
      do
      {
        unint64_t v21 = *v20++;
        unint64_t v22 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v16);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v21, v22);
        *v19++ = v22;
        --v17;
      }
      while (v17);
    }
    int v23 = *((_DWORD *)this + 6) + v4;
    *((_DWORD *)this + 6) = v23;
    unint64_t v24 = (int *)*((void *)this + 4);
    if (*v24 < v23) {
      int *v24 = v23;
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  unsigned int v71 = (operations_research::sat::CpModelProto *)((char *)this + 40);
  *((void *)this + 7) = 0;
  int v25 = *((_DWORD *)a2 + 12);
  if (v25)
  {
    uint64_t v69 = *((void *)a2 + 7);
    uint64_t v26 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v71, v25);
    uint64_t v27 = v26;
    int v28 = **((_DWORD **)this + 7);
    int v29 = *((_DWORD *)this + 12);
    int v30 = v28 - v29;
    if (v28 - v29 >= v25) {
      uint64_t v31 = v25;
    }
    else {
      uint64_t v31 = v30;
    }
    if ((int)v31 >= 1)
    {
      int v32 = (operations_research::sat::ConstraintProto **)(v69 + 8);
      uint64_t v33 = (operations_research::sat::ConstraintProto **)v26;
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(*v32++, *v33++);
        --v31;
      }
      while (v31);
    }
    if (v30 < v25)
    {
      uint64_t v34 = *(google::protobuf::Arena **)v71;
      int v35 = v29 + v25 - v28;
      uint64_t v36 = 2 * v30;
      unint64_t v37 = (operations_research::sat::ConstraintProto **)&v27[v36];
      uint64_t v38 = (operations_research::sat::ConstraintProto **)(v36 * 4 + v69 + 8);
      do
      {
        uint64_t v39 = *v38;
        unsigned int v40 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(v34);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v39, v40);
        *v37++ = v40;
        ++v38;
        --v35;
      }
      while (v35);
    }
    int v41 = *((_DWORD *)this + 12) + v25;
    *((_DWORD *)this + 12) = v41;
    unsigned int v42 = (int *)*((void *)this + 7);
    if (*v42 < v41) {
      *unsigned int v42 = v41;
    }
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  int v43 = *((_DWORD *)a2 + 18);
  if (v43)
  {
    uint64_t v68 = *((void *)a2 + 10);
    uint64_t v44 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 64), v43);
    uint64_t v45 = v44;
    int v46 = **((_DWORD **)this + 10);
    int v47 = *((_DWORD *)this + 18);
    int v48 = v46 - v47;
    if (v46 - v47 >= v43) {
      uint64_t v49 = v43;
    }
    else {
      uint64_t v49 = v48;
    }
    if ((int)v49 >= 1)
    {
      uint64_t v50 = (operations_research::sat::DecisionStrategyProto **)(v68 + 8);
      uint64_t v51 = (operations_research::sat::DecisionStrategyProto **)v44;
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(*v50++, *v51++);
        --v49;
      }
      while (v49);
    }
    if (v48 < v43)
    {
      unint64_t v52 = (google::protobuf::Arena *)*((void *)this + 8);
      int v53 = v47 + v43 - v46;
      uint64_t v54 = 2 * v48;
      unsigned int v55 = (operations_research::sat::DecisionStrategyProto **)&v45[v54];
      unint64_t v56 = (operations_research::sat::DecisionStrategyProto **)(v54 * 4 + v68 + 8);
      do
      {
        unsigned int v57 = *v56;
        unint64_t v58 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(v52);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v57, v58);
        *v55++ = v58;
        ++v56;
        --v53;
      }
      while (v53);
    }
    int v59 = *((_DWORD *)this + 18) + v43;
    *((_DWORD *)this + 18) = v59;
    uint64_t v60 = (int *)*((void *)this + 10);
    if (*v60 < v59) {
      *uint64_t v60 = v59;
    }
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  int v61 = *((_DWORD *)a2 + 22);
  if (v61)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v61);
    uint64_t v62 = (void *)*((void *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy(v62, *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  *((_DWORD *)this + 34) = 0;
  uint64_t v63 = *((void *)a2 + 1);
  if (v63)
  {
    if (*v73) {
      uint64_t v64 = (char *)((*v73 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v64 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v73);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v64, (const google::protobuf::UnknownFieldSet *)((v63 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v65 = *((void *)a2 + 14);
  if (*(char *)(v65 + 23) < 0)
  {
    if (!*(void *)(v65 + 8)) {
      goto LABEL_50;
    }
  }
  else if (!*(unsigned char *)(v65 + 23))
  {
    goto LABEL_50;
  }
  uint64_t v66 = (google::protobuf::Arena *)(*v73 & 0xFFFFFFFFFFFFFFFELL);
  if (*v73) {
    uint64_t v66 = *(google::protobuf::Arena **)v66;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, v66, (long long *)v65);
LABEL_50:
  if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    *((void *)this + 15) = 0;
  }
  else
  {
    if (*((void *)a2 + 15)) {
      operator new();
    }
    *((void *)this + 15) = 0;
    if (*((void *)a2 + 16)) {
      operator new();
    }
  }
  *((void *)this + 16) = 0;
  return this;
}

void sub_23CBEE440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  MEMORY[0x23ECF2BC0](v13, 0x1081C40D3396336);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v14);
  google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto>::~RepeatedPtrField(v15);
  google::protobuf::RepeatedPtrField<operations_research::sat::ConstraintProto>::~RepeatedPtrField(a12);
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(a13);
  _Unwind_Resume(a1);
}

void sub_23CBEE4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_23CBEE4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
}

void sub_23CBEE500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void operations_research::sat::CpModelProto::~CpModelProto(operations_research::sat::CpModelProto *this)
{
  uint64_t v2 = *((void *)this + 14);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    int v4 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
    if (v4)
    {
      operations_research::sat::CpObjectiveProto::~CpObjectiveProto(v4);
      MEMORY[0x23ECF2BC0]();
    }
    uint64_t v5 = (operations_research::sat::PartialVariableAssignment *)*((void *)this + 16);
    if (v5)
    {
      operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v5);
      MEMORY[0x23ECF2BC0]();
    }
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(void *)(v6 & 0xFFFFFFFFFFFFFFFELL);
    if (v7 && v8 == 0)
    {
      uint64_t v10 = *(void **)(v7 + 8);
      if (v10 != *(void **)(v7 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v7 + 8));
        uint64_t v10 = *(void **)(v7 + 8);
      }
      if (v10)
      {
        *(void *)(v7 + 16) = v10;
        operator delete(v10);
      }
      MEMORY[0x23ECF2BC0](v7, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 88);
  unint64_t v11 = (operations_research::sat::DecisionStrategyProto **)*((void *)this + 10);
  if (v11 && !*((void *)this + 8))
  {
    unint64_t v12 = v11 + 1;
    uint64_t v13 = *(unsigned int *)v11;
    if ((int)v13 >= 1)
    {
      do
      {
        if (*v12)
        {
          operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto(*v12);
          MEMORY[0x23ECF2BC0]();
        }
        ++v12;
        --v13;
      }
      while (v13);
      unint64_t v11 = (operations_research::sat::DecisionStrategyProto **)*((void *)this + 10);
    }
    operator delete(v11);
  }
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v14 = (operations_research::sat::ConstraintProto **)*((void *)this + 7);
  if (v14 && !*((void *)this + 5))
  {
    unint64_t v15 = v14 + 1;
    uint64_t v16 = *(unsigned int *)v14;
    if ((int)v16 >= 1)
    {
      do
      {
        if (*v15)
        {
          operations_research::sat::ConstraintProto::~ConstraintProto(*v15);
          MEMORY[0x23ECF2BC0]();
        }
        ++v15;
        --v16;
      }
      while (v16);
      uint64_t v14 = (operations_research::sat::ConstraintProto **)*((void *)this + 7);
    }
    operator delete(v14);
  }
  *((void *)this + 7) = 0;
  int v17 = (operations_research::sat::IntegerVariableProto **)*((void *)this + 4);
  if (v17 && !*((void *)this + 2))
  {
    uint64_t v18 = v17 + 1;
    uint64_t v19 = *(unsigned int *)v17;
    if ((int)v19 >= 1)
    {
      do
      {
        if (*v18)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v18);
          MEMORY[0x23ECF2BC0]();
        }
        ++v18;
        --v19;
      }
      while (v19);
      int v17 = (operations_research::sat::IntegerVariableProto **)*((void *)this + 4);
    }
    operator delete(v17);
    *((void *)this + 4) = 0;
  }
  else
  {
    *((void *)this + 4) = 0;
  }
}

{
  uint64_t vars8;

  operations_research::sat::CpModelProto::~CpModelProto(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CpModelProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 136) = a2;
  return this;
}

void operations_research::sat::CpModelProto::Clear(operations_research::sat::CpModelProto *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 4) + 8);
    while (1)
    {
      uint64_t v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      uint64_t v5 = *(void *)(v4 + 40);
      if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_7;
      }
      if ((*(char *)(v5 + 23) & 0x80000000) == 0) {
        break;
      }
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = *(void *)(v4 + 8);
      if (v6)
      {
LABEL_8:
        if (*(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
        }
                                                                                               + 8));
      }
LABEL_3:
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + 6) = 0;
        goto LABEL_13;
      }
    }
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
LABEL_7:
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6) {
      goto LABEL_8;
    }
    goto LABEL_3;
  }
LABEL_13:
  uint64_t v7 = *((unsigned int *)this + 12);
  if ((int)v7 < 1) {
    goto LABEL_25;
  }
  uint64_t v8 = (uint64_t *)(*((void *)this + 7) + 8);
  do
  {
    uint64_t v9 = *v8;
    *(_DWORD *)(v9 + 16) = 0;
    uint64_t v10 = *(void *)(v9 + 40);
    if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        **(unsigned char **)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        operations_research::sat::ConstraintProto::clear_constraint(v9);
        uint64_t v11 = *(void *)(v9 + 8);
        if ((v11 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
      *(unsigned char *)uint64_t v10 = 0;
      *(unsigned char *)(v10 + 23) = 0;
    }
    operations_research::sat::ConstraintProto::clear_constraint(v9);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v11 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_20:
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL)
    }
                                                                                           + 8));
LABEL_15:
    ++v8;
    --v7;
  }
  while (v7);
  *((_DWORD *)this + 12) = 0;
LABEL_25:
  uint64_t v12 = *((unsigned int *)this + 18);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)this + 10) + 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + 8 * v13);
      *(_DWORD *)(v15 + 16) = 0;
      uint64_t v16 = *(unsigned int *)(v15 + 48);
      if ((int)v16 >= 1)
      {
        int v17 = (uint64_t *)(*(void *)(v15 + 56) + 8);
        do
        {
          uint64_t v18 = *v17;
          *(void *)(v18 + 16) = 0;
          *(void *)(v18 + 24) = 0;
          *(_DWORD *)(v18 + 32) = 0;
          uint64_t v19 = *(void *)(v18 + 8);
          if ((v19 & 1) != 0
            && *(void *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 16))
          {
            google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                 + 8));
          }
          ++v17;
          --v16;
        }
        while (v16);
        *(_DWORD *)(v15 + 48) = 0;
      }
      *(void *)(v15 + 64) = 0;
      uint64_t v20 = *(void *)(v15 + 8);
      if ((v20 & 1) != 0
        && *(void *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v20 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v13;
    }
    while (v13 != v12);
    *((_DWORD *)this + 18) = 0;
  }
  *((_DWORD *)this + 22) = 0;
  uint64_t v21 = *((void *)this + 14);
  if ((uint64_t *)v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_42:
    uint64_t v22 = *((void *)this + 1);
    uint64_t v23 = v22 & 1;
    unint64_t v24 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v22) {
      goto LABEL_57;
    }
  }
  else
  {
    if ((*(char *)(v21 + 23) & 0x80000000) == 0)
    {
      *(unsigned char *)uint64_t v21 = 0;
      *(unsigned char *)(v21 + 23) = 0;
      goto LABEL_42;
    }
    **(unsigned char **)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0;
    uint64_t v22 = *((void *)this + 1);
    uint64_t v23 = v22 & 1;
    unint64_t v24 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v22)
    {
LABEL_57:
      if (!*v24) {
        goto LABEL_44;
      }
      goto LABEL_46;
    }
  }
  if (!v25)
  {
LABEL_44:
    uint64_t v26 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
    if (v26)
    {
      operations_research::sat::CpObjectiveProto::~CpObjectiveProto(v26);
      MEMORY[0x23ECF2BC0]();
      uint64_t v22 = *((void *)this + 1);
      uint64_t v23 = v22 & 1;
      unint64_t v24 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
LABEL_46:
  *((void *)this + 15) = 0;
  if (v23)
  {
    if (!*v24) {
      goto LABEL_48;
    }
  }
  else if (!v24)
  {
LABEL_48:
    uint64_t v27 = (operations_research::sat::PartialVariableAssignment *)*((void *)this + 16);
    if (v27)
    {
      operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v27);
      MEMORY[0x23ECF2BC0]();
      uint64_t v22 = *((void *)this + 1);
      uint64_t v23 = v22 & 1;
    }
  }
  *((void *)this + 16) = 0;
  if (v23 && *(void *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v22 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

std::string::value_type *operations_research::sat::CpModelProto::_InternalParse(operations_research::sat::CpModelProto *this, std::string::value_type *__s, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t SizeFallback = __s;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v88 = (operations_research::sat::CpModelProto *)((char *)this + 88);
  *(void *)uint64_t v89 = __s;
  uint64_t v9 = (unsigned int *)((char *)this + 64);
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  uint64_t v11 = (unsigned int *)((char *)this + 16);
  uint64_t v12 = (std::string **)((char *)this + 112);
  while (1)
  {
LABEL_2:
    if ((unint64_t)SizeFallback >= *(void *)a3)
    {
      if (&SizeFallback[-*((void *)a3 + 1)] == (char *)*((int *)a3 + 7)) {
        return SizeFallback;
      }
      uint64_t SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, SizeFallback, *((_DWORD *)a3 + 23));
      *(void *)uint64_t v89 = SizeFallback;
      if (__s) {
        return SizeFallback;
      }
    }
    uint64_t v13 = SizeFallback + 1;
    unsigned int v14 = *SizeFallback;
    if ((*SizeFallback & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v15 = v14 + (*v13 << 7);
    unsigned int v14 = v15 - 128;
    if (*v13 < 0) {
      break;
    }
    uint64_t v13 = SizeFallback + 2;
LABEL_6:
    *(void *)uint64_t v89 = v13;
    unsigned int v16 = (v14 >> 3) - 1;
LABEL_7:
    switch(v16)
    {
      case 0u:
        if (v14 != 10) {
          goto LABEL_16;
        }
        int v17 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          uint64_t v18 = *v12;
          if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_12;
          }
LABEL_11:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v12, v17, (long long *)&google::protobuf::internal::fixed_address_empty_string);
          uint64_t v18 = *v12;
          uint64_t v13 = *(std::string::value_type **)v89;
          goto LABEL_12;
        }
        int v17 = *(google::protobuf::Arena **)v17;
        uint64_t v18 = *v12;
        if (*v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_11;
        }
LABEL_12:
        *(void *)uint64_t v89 = google::protobuf::internal::InlineGreedyStringParser(v18, v13, (uint64_t)a3);
        if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
        {
          unsigned int v72 = (std::string *)v18->__r_.__value_.__r.__words[0];
          size_t size = v18->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0) {
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v18->__r_.__value_.__l.__size_, "size_t to int conversion", v19);
          }
          uint64_t v18 = v72;
        }
        else
        {
          size_t size = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        }
        BOOL v73 = google::protobuf::internal::VerifyUTF8(v18, size, (google::protobuf::internal *)"operations_research.sat.CpModelProto.name");
        uint64_t SizeFallback = *(char **)v89;
        if (*(void *)v89) {
          int v74 = 2;
        }
        else {
          int v74 = 4;
        }
        if (v73 && v74 == 2) {
          continue;
        }
        return 0;
      case 1u:
        if (v14 != 18) {
          goto LABEL_16;
        }
        uint64_t SizeFallback = v13 - 1;
        while (1)
        {
          unint64_t v25 = (google::protobuf::internal *)(SizeFallback + 1);
          *(void *)uint64_t v89 = SizeFallback + 1;
          uint64_t v26 = (int *)*((void *)this + 4);
          if (!v26) {
            break;
          }
          uint64_t v27 = *((int *)this + 6);
          int v28 = *v26;
          if ((int)v27 < *v26)
          {
            *((_DWORD *)this + 6) = v27 + 1;
            int v29 = *(operations_research::sat::IntegerVariableProto **)&v26[2 * v27 + 2];
            unint64_t v30 = *(unsigned __int8 *)v25;
            if (*(char *)v25 < 0) {
              goto LABEL_28;
            }
            goto LABEL_34;
          }
          if (v28 == *((_DWORD *)this + 7)) {
            goto LABEL_32;
          }
LABEL_33:
          int *v26 = v28 + 1;
          int v29 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
          uint64_t v31 = *((void *)this + 4);
          uint64_t v32 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v32 + 1;
          *(void *)(v31 + 8 * v32 + 8) = v29;
          unint64_t v25 = *(google::protobuf::internal **)v89;
          unint64_t v30 = **(unsigned char **)v89;
          if ((char)**(unsigned char **)v89 < 0)
          {
LABEL_28:
            uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v25, (const char *)v30);
            if (!SizeFallback) {
              return SizeFallback;
            }
            goto LABEL_35;
          }
LABEL_34:
          uint64_t SizeFallback = (char *)v25 + 1;
LABEL_35:
          uint64_t v33 = *((void *)a3 + 1);
          int v34 = v30 + SizeFallback - v33;
          *(void *)a3 = v33 + (v34 & (v34 >> 31));
          int v35 = *((_DWORD *)a3 + 7);
          *((_DWORD *)a3 + 7) = v34;
          LODWORD(v33) = *((_DWORD *)a3 + 22);
          BOOL v36 = __OFSUB__(v33, 1);
          LODWORD(v33) = v33 - 1;
          *((_DWORD *)a3 + 22) = v33;
          if ((int)v33 < 0 != v36) {
            return 0;
          }
          unint64_t v37 = operations_research::sat::IntegerVariableProto::_InternalParse(v29, SizeFallback, a3, a4, a5);
          uint64_t SizeFallback = v37;
          if (!v37) {
            return SizeFallback;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v38 = *((_DWORD *)a3 + 7) + v35 - v34;
          *((_DWORD *)a3 + 7) = v38;
          unint64_t v39 = *((void *)a3 + 1) + (v38 & (v38 >> 31));
          *(void *)a3 = v39;
          *(void *)uint64_t v89 = v37;
          if (v39 <= (unint64_t)v37 || *v37 != 18) {
            goto LABEL_2;
          }
        }
        int v28 = *((_DWORD *)this + 7);
LABEL_32:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v11, v28 + 1);
        uint64_t v26 = (int *)*((void *)this + 4);
        int v28 = *v26;
        goto LABEL_33;
      case 2u:
        if (v14 != 26) {
          goto LABEL_16;
        }
        uint64_t SizeFallback = v13 - 1;
        while (1)
        {
          unsigned int v40 = (google::protobuf::internal *)(SizeFallback + 1);
          *(void *)uint64_t v89 = SizeFallback + 1;
          int v41 = (int *)*((void *)this + 7);
          if (!v41) {
            break;
          }
          uint64_t v42 = *((int *)this + 12);
          int v43 = *v41;
          if ((int)v42 < *v41)
          {
            *((_DWORD *)this + 12) = v42 + 1;
            uint64_t v44 = *(operations_research::sat::ConstraintProto **)&v41[2 * v42 + 2];
            unint64_t v45 = *(unsigned __int8 *)v40;
            if (*(char *)v40 < 0) {
              goto LABEL_46;
            }
            goto LABEL_52;
          }
          if (v43 == *((_DWORD *)this + 13)) {
            goto LABEL_50;
          }
LABEL_51:
          *int v41 = v43 + 1;
          uint64_t v44 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)this + 5));
          uint64_t v46 = *((void *)this + 7);
          uint64_t v47 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v47 + 1;
          *(void *)(v46 + 8 * v47 + 8) = v44;
          unsigned int v40 = *(google::protobuf::internal **)v89;
          unint64_t v45 = **(unsigned char **)v89;
          if ((char)**(unsigned char **)v89 < 0)
          {
LABEL_46:
            uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v40, (const char *)v45);
            if (!SizeFallback) {
              return SizeFallback;
            }
            goto LABEL_53;
          }
LABEL_52:
          uint64_t SizeFallback = (char *)v40 + 1;
LABEL_53:
          uint64_t v48 = *((void *)a3 + 1);
          int v49 = v45 + SizeFallback - v48;
          *(void *)a3 = v48 + (v49 & (v49 >> 31));
          int v50 = *((_DWORD *)a3 + 7);
          *((_DWORD *)a3 + 7) = v49;
          LODWORD(v48) = *((_DWORD *)a3 + 22);
          BOOL v36 = __OFSUB__(v48, 1);
          LODWORD(v48) = v48 - 1;
          *((_DWORD *)a3 + 22) = v48;
          if ((int)v48 < 0 != v36) {
            return 0;
          }
          uint64_t v51 = operations_research::sat::ConstraintProto::_InternalParse(v44, SizeFallback, a3, a4, a5);
          uint64_t SizeFallback = v51;
          if (!v51) {
            return SizeFallback;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v52 = *((_DWORD *)a3 + 7) + v50 - v49;
          *((_DWORD *)a3 + 7) = v52;
          unint64_t v53 = *((void *)a3 + 1) + (v52 & (v52 >> 31));
          *(void *)a3 = v53;
          *(void *)uint64_t v89 = v51;
          if (v53 <= (unint64_t)v51 || *v51 != 26) {
            goto LABEL_2;
          }
        }
        int v43 = *((_DWORD *)this + 13);
LABEL_50:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v43 + 1);
        int v41 = (int *)*((void *)this + 7);
        int v43 = *v41;
        goto LABEL_51;
      case 3u:
        if (v14 != 34) {
          goto LABEL_16;
        }
        uint64_t v54 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
        if (v54)
        {
          unint64_t v55 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_62;
          }
        }
        else
        {
          int v75 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if (*v8) {
            int v75 = *(google::protobuf::Arena **)v75;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v75);
          uint64_t v54 = v76;
          *((void *)this + 15) = v76;
          uint64_t v13 = *(std::string::value_type **)v89;
          unint64_t v55 = **(unsigned char **)v89;
          if (((char)**(unsigned char **)v89 & 0x80000000) == 0)
          {
LABEL_62:
            uint64_t SizeFallback = v13 + 1;
            goto LABEL_102;
          }
        }
        uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v13, (const char *)v55);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_102:
        uint64_t v77 = *((void *)a3 + 1);
        int v78 = v55 + SizeFallback - v77;
        *(void *)a3 = v77 + (v78 & (v78 >> 31));
        int v79 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v78;
        LODWORD(v77) = *((_DWORD *)a3 + 22);
        BOOL v36 = __OFSUB__(v77, 1);
        LODWORD(v77) = v77 - 1;
        *((_DWORD *)a3 + 22) = v77;
        if ((int)v77 < 0 != v36) {
          return 0;
        }
        uint64_t v80 = operations_research::sat::CpObjectiveProto::_InternalParse(v54, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
        goto LABEL_110;
      case 4u:
        if (v14 != 42) {
          goto LABEL_16;
        }
        uint64_t SizeFallback = v13 - 1;
        while (1)
        {
          unint64_t v56 = (google::protobuf::internal *)(SizeFallback + 1);
          *(void *)uint64_t v89 = SizeFallback + 1;
          unsigned int v57 = (int *)*((void *)this + 10);
          if (!v57) {
            break;
          }
          uint64_t v58 = *((int *)this + 18);
          int v59 = *v57;
          if ((int)v58 < *v57)
          {
            *((_DWORD *)this + 18) = v58 + 1;
            uint64_t v60 = *(operations_research::sat::DecisionStrategyProto **)&v57[2 * v58 + 2];
            unint64_t v61 = *(unsigned __int8 *)v56;
            if (*(char *)v56 < 0) {
              goto LABEL_68;
            }
            goto LABEL_74;
          }
          if (v59 == *((_DWORD *)this + 19)) {
            goto LABEL_72;
          }
LABEL_73:
          *unsigned int v57 = v59 + 1;
          uint64_t v60 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(*((google::protobuf::Arena **)this + 8));
          uint64_t v62 = *((void *)this + 10);
          uint64_t v63 = *((int *)this + 18);
          *((_DWORD *)this + 18) = v63 + 1;
          *(void *)(v62 + 8 * v63 + 8) = v60;
          unint64_t v56 = *(google::protobuf::internal **)v89;
          unint64_t v61 = **(unsigned char **)v89;
          if ((char)**(unsigned char **)v89 < 0)
          {
LABEL_68:
            uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(v56, (const char *)v61);
            if (!SizeFallback) {
              return SizeFallback;
            }
            goto LABEL_75;
          }
LABEL_74:
          uint64_t SizeFallback = (char *)v56 + 1;
LABEL_75:
          uint64_t v64 = *((void *)a3 + 1);
          int v65 = v61 + SizeFallback - v64;
          *(void *)a3 = v64 + (v65 & (v65 >> 31));
          int v66 = *((_DWORD *)a3 + 7);
          *((_DWORD *)a3 + 7) = v65;
          LODWORD(v64) = *((_DWORD *)a3 + 22);
          BOOL v36 = __OFSUB__(v64, 1);
          LODWORD(v64) = v64 - 1;
          *((_DWORD *)a3 + 22) = v64;
          if ((int)v64 < 0 != v36) {
            return 0;
          }
          unsigned int v67 = operations_research::sat::DecisionStrategyProto::_InternalParse(v60, (google::protobuf::UnknownFieldSet *)SizeFallback, a3, a4, a5);
          uint64_t SizeFallback = v67;
          if (!v67) {
            return SizeFallback;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v68 = *((_DWORD *)a3 + 7) + v66 - v65;
          *((_DWORD *)a3 + 7) = v68;
          unint64_t v69 = *((void *)a3 + 1) + (v68 & (v68 >> 31));
          *(void *)a3 = v69;
          *(void *)uint64_t v89 = v67;
          if (v69 <= (unint64_t)v67 || *v67 != 42) {
            goto LABEL_2;
          }
        }
        int v59 = *((_DWORD *)this + 19);
LABEL_72:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v59 + 1);
        unsigned int v57 = (int *)*((void *)this + 10);
        int v59 = *v57;
        goto LABEL_73;
      case 5u:
        if (v14 != 50) {
          goto LABEL_16;
        }
        v70 = (operations_research::sat::PartialVariableAssignment *)*((void *)this + 16);
        if (v70)
        {
          unint64_t v71 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_84;
          }
        }
        else
        {
          size_t v81 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
          if (*v8) {
            size_t v81 = *(google::protobuf::Arena **)v81;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v81);
          v70 = v82;
          *((void *)this + 16) = v82;
          uint64_t v13 = *(std::string::value_type **)v89;
          unint64_t v71 = **(unsigned char **)v89;
          if (((char)**(unsigned char **)v89 & 0x80000000) == 0)
          {
LABEL_84:
            uint64_t SizeFallback = v13 + 1;
            goto LABEL_108;
          }
        }
        uint64_t SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v13, (const char *)v71);
        if (!SizeFallback) {
          return SizeFallback;
        }
LABEL_108:
        uint64_t v83 = *((void *)a3 + 1);
        int v78 = v71 + SizeFallback - v83;
        *(void *)a3 = v83 + (v78 & (v78 >> 31));
        int v79 = *((_DWORD *)a3 + 7);
        *((_DWORD *)a3 + 7) = v78;
        LODWORD(v83) = *((_DWORD *)a3 + 22);
        BOOL v36 = __OFSUB__(v83, 1);
        LODWORD(v83) = v83 - 1;
        *((_DWORD *)a3 + 22) = v83;
        if ((int)v83 < 0 != v36) {
          return 0;
        }
        uint64_t v80 = operations_research::sat::PartialVariableAssignment::_InternalParse(v70, (google::protobuf::internal *)SizeFallback, a3, a4, a5);
LABEL_110:
        uint64_t SizeFallback = (char *)v80;
        if (!v80) {
          return SizeFallback;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v84 = *((_DWORD *)a3 + 7) + v79 - v78;
        *((_DWORD *)a3 + 7) = v84;
        *(void *)a3 = *((void *)a3 + 1) + (v84 & (v84 >> 31));
        *(void *)uint64_t v89 = v80;
        continue;
      case 6u:
        if (v14 == 58)
        {
          unint64_t v24 = google::protobuf::internal::PackedInt32Parser(v88, (unsigned __int8 *)v13, a3, a4);
LABEL_87:
          uint64_t SizeFallback = v24;
          *(void *)uint64_t v89 = v24;
          if (!v24) {
            return SizeFallback;
          }
        }
        else
        {
          if (v14 != 56) {
            goto LABEL_16;
          }
          int Varint64 = google::protobuf::internal::ReadVarint64((google::protobuf::internal **)v89, (const char **)__s);
          uint64_t v86 = *((unsigned int *)this + 22);
          if (v86 == *((_DWORD *)this + 23)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v88, v86 + 1);
          }
          *(_DWORD *)(*((void *)this + 12) + 4 * v86) = Varint64;
          *((_DWORD *)this + 22) = v86 + 1;
          uint64_t SizeFallback = *(char **)v89;
          if (!*(void *)v89) {
            return SizeFallback;
          }
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  uint64_t TagFallback = google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v15 - 128));
  *(void *)uint64_t v89 = TagFallback;
  if (!TagFallback) {
    return 0;
  }
  uint64_t v13 = (std::string::value_type *)TagFallback;
  unsigned int v14 = __s;
  unsigned int v16 = (__s >> 3) - 1;
  if (v16 <= 6) {
    goto LABEL_7;
  }
LABEL_16:
  if (v14) {
    BOOL v22 = (v14 & 7) == 4;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    if (*v8)
    {
      uint64_t v23 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else
    {
      uint64_t v23 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      uint64_t v13 = *(std::string::value_type **)v89;
    }
    unint64_t v24 = (char *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, (google::protobuf::UnknownFieldSet *)v23, (google::protobuf::UnknownFieldSet *)v13, (const char *)a3, a5);
    goto LABEL_87;
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v14 - 1;
  return v13;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpModelProto::_InternalSerialize(operations_research::sat::CpModelProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (uint64_t *)*((void *)this + 14);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)v7[1];
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v7 = (uint64_t *)*v7;
  }
  else
  {
    uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_14;
    }
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.CpModelProto.name");
  uint64_t v9 = *((void *)this + 14);
  if (*(char *)(v9 + 23) < 0)
  {
    int64_t v10 = *(void *)(v9 + 8);
    if (v10 > 127) {
      goto LABEL_26;
    }
  }
  else
  {
    int64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(void *)a3 - (void)a2 + 14 < v10)
  {
LABEL_26:
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
    int v12 = *((_DWORD *)this + 6);
    if (!v12) {
      goto LABEL_27;
    }
    goto LABEL_15;
  }
  *(unsigned char *)a2 = 10;
  *((unsigned char *)a2 + 1) = v10;
  if (*(char *)(v9 + 23) >= 0) {
    uint64_t v11 = (const void *)v9;
  }
  else {
    uint64_t v11 = *(const void **)v9;
  }
  memcpy((char *)a2 + 2, v11, v10);
  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
  int v12 = *((_DWORD *)this + 6);
  if (!v12) {
    goto LABEL_27;
  }
LABEL_15:
  for (int i = 0; i != v12; ++i)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned int v15 = *(operations_research::sat::IntegerVariableProto **)(*((void *)this + 4) + 8 * i + 8);
    *(unsigned char *)a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 12);
    if (v16 <= 0x7F)
    {
      *((unsigned char *)a2 + 1) = v16;
      unsigned int v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    else
    {
      *((unsigned char *)a2 + 1) = v16 | 0x80;
      unsigned int v17 = v16 >> 7;
      if (v16 >> 14)
      {
        unsigned int v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        do
        {
          *((unsigned char *)v14 - 1) = v17 | 0x80;
          unsigned int v18 = v17 >> 7;
          unsigned int v14 = (google::protobuf::UnknownFieldSet *)((char *)v14 + 1);
          unsigned int v19 = v17 >> 14;
          v17 >>= 7;
        }
        while (v19);
        *((unsigned char *)v14 - 1) = v18;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v17;
        unsigned int v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    a2 = operations_research::sat::IntegerVariableProto::_InternalSerialize(v15, v14, a3, a4);
  }
LABEL_27:
  int v20 = *((_DWORD *)this + 12);
  if (v20)
  {
    for (int j = 0; j != v20; ++j)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      uint64_t v23 = *(operations_research::sat::ConstraintProto **)(*((void *)this + 7) + 8 * j + 8);
      *(unsigned char *)a2 = 26;
      unsigned int v24 = *((_DWORD *)v23 + 14);
      if (v24 <= 0x7F)
      {
        *((unsigned char *)a2 + 1) = v24;
        BOOL v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      else
      {
        *((unsigned char *)a2 + 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        if (v24 >> 14)
        {
          BOOL v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          do
          {
            *((unsigned char *)v22 - 1) = v25 | 0x80;
            unsigned int v26 = v25 >> 7;
            BOOL v22 = (google::protobuf::UnknownFieldSet *)((char *)v22 + 1);
            unsigned int v27 = v25 >> 14;
            v25 >>= 7;
          }
          while (v27);
          *((unsigned char *)v22 - 1) = v26;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v25;
          BOOL v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      a2 = operations_research::sat::ConstraintProto::_InternalSerialize(v23, v22, a3, a4);
    }
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    int v28 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
    if (v28)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        int v28 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
        *(unsigned char *)a2 = 34;
        unsigned int v29 = *((_DWORD *)v28 + 26);
        if (v29 <= 0x7F) {
          goto LABEL_43;
        }
      }
      else
      {
        *(unsigned char *)a2 = 34;
        unsigned int v29 = *((_DWORD *)v28 + 26);
        if (v29 <= 0x7F)
        {
LABEL_43:
          *((unsigned char *)a2 + 1) = v29;
          unint64_t v30 = (char *)a2 + 2;
LABEL_50:
          a2 = operations_research::sat::CpObjectiveProto::_InternalSerialize(v28, v30, a3, a4);
          goto LABEL_51;
        }
      }
      *((unsigned char *)a2 + 1) = v29 | 0x80;
      unsigned int v31 = v29 >> 7;
      if (v29 >> 14)
      {
        unint64_t v30 = (char *)a2 + 3;
        do
        {
          *(v30 - 1) = v31 | 0x80;
          unsigned int v32 = v31 >> 7;
          ++v30;
          unsigned int v33 = v31 >> 14;
          v31 >>= 7;
        }
        while (v33);
        *(v30 - 1) = v32;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v31;
        unint64_t v30 = (char *)a2 + 3;
      }
      goto LABEL_50;
    }
  }
LABEL_51:
  int v34 = *((_DWORD *)this + 18);
  if (v34)
  {
    for (int k = 0; k != v34; ++k)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      unint64_t v37 = *(operations_research::sat::DecisionStrategyProto **)(*((void *)this + 10) + 8 * k + 8);
      *(unsigned char *)a2 = 42;
      unsigned int v38 = *((_DWORD *)v37 + 18);
      if (v38 <= 0x7F)
      {
        *((unsigned char *)a2 + 1) = v38;
        BOOL v36 = (char *)a2 + 2;
      }
      else
      {
        *((unsigned char *)a2 + 1) = v38 | 0x80;
        unsigned int v39 = v38 >> 7;
        if (v38 >> 14)
        {
          BOOL v36 = (char *)a2 + 3;
          do
          {
            *(v36 - 1) = v39 | 0x80;
            unsigned int v40 = v39 >> 7;
            ++v36;
            unsigned int v41 = v39 >> 14;
            v39 >>= 7;
          }
          while (v41);
          *(v36 - 1) = v40;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v39;
          BOOL v36 = (char *)a2 + 3;
        }
      }
      a2 = operations_research::sat::DecisionStrategyProto::_InternalSerialize(v37, v36, a3, a4);
    }
  }
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    uint64_t v42 = (operations_research::sat::PartialVariableAssignment *)*((void *)this + 16);
    if (v42)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        uint64_t v42 = (operations_research::sat::PartialVariableAssignment *)*((void *)this + 16);
        *(unsigned char *)a2 = 50;
        unsigned int v43 = *((_DWORD *)v42 + 15);
        if (v43 <= 0x7F) {
          goto LABEL_67;
        }
      }
      else
      {
        *(unsigned char *)a2 = 50;
        unsigned int v43 = *((_DWORD *)v42 + 15);
        if (v43 <= 0x7F)
        {
LABEL_67:
          *((unsigned char *)a2 + 1) = v43;
          uint64_t v44 = (char *)a2 + 2;
LABEL_74:
          a2 = operations_research::sat::PartialVariableAssignment::_InternalSerialize(v42, v44, a3, a4);
          goto LABEL_75;
        }
      }
      *((unsigned char *)a2 + 1) = v43 | 0x80;
      unsigned int v45 = v43 >> 7;
      if (v43 >> 14)
      {
        uint64_t v44 = (char *)a2 + 3;
        do
        {
          *(v44 - 1) = v45 | 0x80;
          unsigned int v46 = v45 >> 7;
          ++v44;
          unsigned int v47 = v45 >> 14;
          v45 >>= 7;
        }
        while (v47);
        *(v44 - 1) = v46;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v45;
        uint64_t v44 = (char *)a2 + 3;
      }
      goto LABEL_74;
    }
  }
LABEL_75:
  unsigned int v48 = *((_DWORD *)this + 26);
  if ((int)v48 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(unsigned char *)a2 = 58;
      int v49 = (char *)a2 + 1;
      if (v48 < 0x80) {
        goto LABEL_78;
      }
    }
    else
    {
      *(unsigned char *)a2 = 58;
      int v49 = (char *)a2 + 1;
      if (v48 < 0x80)
      {
LABEL_78:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *int v49 = v48;
        int v50 = (int *)*((void *)this + 12);
        uint64_t v51 = &v50[*((int *)this + 22)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            unint64_t v57 = *v50++;
            unint64_t v52 = v57;
            if (v57 > 0x7F)
            {
LABEL_83:
              *(unsigned char *)a2 = v52 | 0x80;
              unint64_t v54 = v52 >> 7;
              if (v52 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((unsigned char *)a2 - 1) = v54 | 0x80;
                  unint64_t v55 = v54 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  unint64_t v56 = v54 >> 14;
                  v54 >>= 7;
                }
                while (v56);
                *((unsigned char *)a2 - 1) = v55;
              }
              else
              {
                *((unsigned char *)a2 + 1) = v54;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v53 = *v50++;
            unint64_t v52 = v53;
            if (v53 > 0x7F) {
              goto LABEL_83;
            }
          }
          *(unsigned char *)a2 = v52;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_80:
          if (v50 >= v51) {
            goto LABEL_90;
          }
        }
      }
    }
    do
    {
      *v49++ = v48 | 0x80;
      unsigned int v60 = v48 >> 14;
      v48 >>= 7;
    }
    while (v60);
    a2 = (google::protobuf::UnknownFieldSet *)(v49 - 1);
    goto LABEL_78;
  }
LABEL_90:
  uint64_t v58 = *((void *)this + 1);
  if ((v58 & 1) == 0) {
    return a2;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v58 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
}

char *operations_research::sat::CpModelProto::ByteSizeLong(operations_research::sat::CpModelProto *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = google::protobuf::internal::WireFormatLite::Int64Size((int *)(*v4 + 16));
      if (v7)
      {
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v8 = 11;
          *(_DWORD *)(v6 + 32) = v7;
          uint64_t v9 = *(void *)(v6 + 40);
          uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
          if ((*(char *)(v9 + 23) & 0x80000000) == 0)
          {
LABEL_11:
            uint64_t v11 = (char *)(v8 + v7);
            if (v10) {
              goto LABEL_12;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
          *(_DWORD *)(v6 + 32) = v7;
          uint64_t v9 = *(void *)(v6 + 40);
          uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
          if ((*(char *)(v9 + 23) & 0x80000000) == 0) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
        *(_DWORD *)(v6 + 32) = 0;
        uint64_t v9 = *(void *)(v6 + 40);
        uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
        if ((*(char *)(v9 + 23) & 0x80000000) == 0) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = (char *)(v8 + v7);
      if (*(void *)(v9 + 8))
      {
LABEL_12:
        uint64_t v12 = *(void *)(v9 + 8);
        if ((v10 & 0x80u) == 0) {
          uint64_t v13 = v10;
        }
        else {
          uint64_t v13 = v12;
        }
        v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
LABEL_16:
      if (*(unsigned char *)(v6 + 8)) {
        uint64_t v11 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v6 + 8), (const google::protobuf::UnknownFieldSet *)v11, (_DWORD *)(v6 + 48));
      }
      else {
        *(_DWORD *)(v6 + 48) = v11;
      }
      v2 += (uint64_t)&v11[(9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6];
      ++v4;
      v5 -= 8;
      if (!v5) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v2 = 0;
LABEL_25:
  uint64_t v14 = *((int *)this + 12);
  uint64_t v15 = v2 + v14;
  uint64_t v16 = *((void *)this + 7);
  if (v16) {
    unsigned int v17 = (operations_research::sat::ConstraintProto **)(v16 + 8);
  }
  else {
    unsigned int v17 = 0;
  }
  if (v14)
  {
    uint64_t v18 = 8 * v14;
    do
    {
      unsigned int v19 = *v17++;
      int v20 = operations_research::sat::ConstraintProto::ByteSizeLong(v19);
      v15 += (uint64_t)&v20[(9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6];
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t v21 = *((int *)this + 18);
  uint64_t v22 = v15 + v21;
  uint64_t v23 = *((void *)this + 10);
  if (v23) {
    unsigned int v24 = (operations_research::sat::DecisionStrategyProto **)(v23 + 8);
  }
  else {
    unsigned int v24 = 0;
  }
  if (v21)
  {
    uint64_t v25 = 8 * v21;
    do
    {
      unsigned int v26 = *v24++;
      unsigned int v27 = operations_research::sat::DecisionStrategyProto::ByteSizeLong(v26);
      v22 += (uint64_t)&v27[(9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6];
      v25 -= 8;
    }
    while (v25);
  }
  uint64_t v28 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 22);
  uint64_t v29 = 11;
  uint64_t v30 = ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v28 >= 0) {
    uint64_t v29 = v30;
  }
  uint64_t v31 = v29 + v22;
  if (v28) {
    int v32 = v28;
  }
  else {
    int v32 = 0;
  }
  if (!v28) {
    uint64_t v31 = v22;
  }
  *((_DWORD *)this + 26) = v32;
  uint64_t v33 = *((void *)this + 14);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0)
  {
    int v35 = (const google::protobuf::UnknownFieldSet *)(v31 + v28);
    if (!*(void *)(v33 + 8)) {
      goto LABEL_49;
    }
  }
  else
  {
    int v35 = (const google::protobuf::UnknownFieldSet *)(v31 + v28);
    if (!*(unsigned char *)(v33 + 23)) {
      goto LABEL_49;
    }
  }
  uint64_t v36 = *(void *)(v33 + 8);
  if ((v34 & 0x80u) == 0) {
    uint64_t v36 = v34;
  }
  int v35 = (const google::protobuf::UnknownFieldSet *)((char *)v35 + v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_49:
  if (this != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
  {
    unint64_t v37 = (operations_research::sat::CpObjectiveProto *)*((void *)this + 15);
    if (v37)
    {
      unsigned int v38 = operations_research::sat::CpObjectiveProto::ByteSizeLong(v37);
      int v35 = (const google::protobuf::UnknownFieldSet *)&v38[((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6)
                                                          + 1
                                                          + (void)v35];
    }
    unsigned int v39 = (int *)*((void *)this + 16);
    if (v39)
    {
      uint64_t v40 = google::protobuf::internal::WireFormatLite::Int32Size(v39 + 4);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0)
        {
          v39[8] = v40;
          uint64_t v41 = ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1 + v40;
          uint64_t v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
          if (!v42) {
            goto LABEL_63;
          }
LABEL_60:
          int v43 = v42;
          if ((v42 & 0x80000000) != 0) {
            uint64_t v44 = 11;
          }
          else {
            uint64_t v44 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
          }
          v41 += v44;
          goto LABEL_66;
        }
        v39[8] = v40;
        uint64_t v41 = v40 + 11;
        uint64_t v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
        if (v42) {
          goto LABEL_60;
        }
      }
      else
      {
        v39[8] = 0;
        uint64_t v41 = 0;
        uint64_t v42 = google::protobuf::internal::WireFormatLite::Int64Size(v39 + 10);
        if (v42) {
          goto LABEL_60;
        }
      }
LABEL_63:
      int v43 = 0;
LABEL_66:
      v39[14] = v43;
      unsigned int v45 = (char *)(v41 + v42);
      if (v39[2]) {
        unsigned int v45 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v39 + 2), (const google::protobuf::UnknownFieldSet *)v45, v39 + 15);
      }
      else {
        v39[15] = (int)v45;
      }
      int v35 = (const google::protobuf::UnknownFieldSet *)&v45[(void)v35
                                                          + 1
                                                          + ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpModelProto *)((char *)this + 8), v35, (_DWORD *)this + 34);
  }
  else
  {
    *((_DWORD *)this + 34) = v35;
    return (char *)v35;
  }
}

void operations_research::sat::CpModelProto::MergeFrom(operations_research::sat::CpModelProto *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CpModelProto::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::CpModelProto::MergeFrom(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  uint64_t v86 = (unint64_t *)((char *)this + 8);
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v86) {
      uint64_t v6 = (char *)((*v86 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v6 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v86);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v6, v5);
  }
  int v7 = *((_DWORD *)a2 + 6);
  if (v7)
  {
    uint64_t v83 = *((void *)a2 + 4);
    uint64_t v80 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 16), v7);
    int v8 = **((_DWORD **)this + 4);
    int v9 = *((_DWORD *)this + 6);
    int v10 = v8 - v9;
    if (v8 - v9 >= v7) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v10;
    }
    if ((int)v11 >= 1)
    {
      uint64_t v12 = (operations_research::sat::IntegerVariableProto **)v80;
      uint64_t v13 = (operations_research::sat::IntegerVariableProto **)(v83 + 8);
      do
      {
        uint64_t v15 = *v13++;
        uint64_t v14 = v15;
        uint64_t v16 = *v12++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v14, v16);
        --v11;
      }
      while (v11);
    }
    if (v10 < v7)
    {
      unsigned int v17 = (google::protobuf::Arena *)*((void *)this + 2);
      int v18 = v9 + v7 - v8;
      uint64_t v19 = 2 * v10;
      int v20 = (operations_research::sat::IntegerVariableProto **)&v80[v19];
      uint64_t v21 = (operations_research::sat::IntegerVariableProto **)(v19 * 4 + v83 + 8);
      do
      {
        uint64_t v22 = *v21++;
        uint64_t v23 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v17);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v22, v23);
        *v20++ = v23;
        --v18;
      }
      while (v18);
    }
    int v24 = *((_DWORD *)this + 6) + v7;
    *((_DWORD *)this + 6) = v24;
    uint64_t v25 = (int *)*((void *)this + 4);
    if (*v25 < v24) {
      *uint64_t v25 = v24;
    }
  }
  int v26 = *((_DWORD *)a2 + 12);
  if (v26)
  {
    uint64_t v84 = *((void *)a2 + 7);
    size_t v81 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 40), v26);
    int v27 = **((_DWORD **)this + 7);
    int v28 = *((_DWORD *)this + 12);
    int v29 = v27 - v28;
    if (v27 - v28 >= v26) {
      uint64_t v30 = v26;
    }
    else {
      uint64_t v30 = v29;
    }
    if ((int)v30 >= 1)
    {
      uint64_t v31 = (operations_research::sat::ConstraintProto **)v81;
      int v32 = (operations_research::sat::ConstraintProto **)(v84 + 8);
      do
      {
        uint64_t v34 = *v32++;
        uint64_t v33 = v34;
        int v35 = *v31++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v33, v35);
        --v30;
      }
      while (v30);
    }
    if (v29 < v26)
    {
      uint64_t v36 = (google::protobuf::Arena *)*((void *)this + 5);
      int v37 = v28 + v26 - v27;
      uint64_t v38 = 2 * v29;
      unsigned int v39 = (operations_research::sat::ConstraintProto **)&v81[v38];
      uint64_t v40 = (operations_research::sat::ConstraintProto **)(v38 * 4 + v84 + 8);
      do
      {
        uint64_t v41 = *v40++;
        uint64_t v42 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(v36);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(v41, v42);
        *v39++ = v42;
        --v37;
      }
      while (v37);
    }
    int v43 = *((_DWORD *)this + 12) + v26;
    *((_DWORD *)this + 12) = v43;
    uint64_t v44 = (int *)*((void *)this + 7);
    if (*v44 < v43) {
      *uint64_t v44 = v43;
    }
  }
  int v45 = *((_DWORD *)a2 + 18);
  if (v45)
  {
    uint64_t v85 = *((void *)a2 + 10);
    uint64_t v82 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpModelProto *)((char *)this + 64), v45);
    int v46 = **((_DWORD **)this + 10);
    int v47 = *((_DWORD *)this + 18);
    int v48 = v46 - v47;
    if (v46 - v47 >= v45) {
      uint64_t v49 = v45;
    }
    else {
      uint64_t v49 = v48;
    }
    if ((int)v49 >= 1)
    {
      int v50 = (operations_research::sat::DecisionStrategyProto **)v82;
      uint64_t v51 = (operations_research::sat::DecisionStrategyProto **)(v85 + 8);
      do
      {
        unint64_t v53 = *v51++;
        unint64_t v52 = v53;
        unint64_t v54 = *v50++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v52, v54);
        --v49;
      }
      while (v49);
    }
    if (v48 < v45)
    {
      unint64_t v55 = (google::protobuf::Arena *)*((void *)this + 8);
      int v56 = v47 + v45 - v46;
      uint64_t v57 = 2 * v48;
      uint64_t v58 = (operations_research::sat::DecisionStrategyProto **)&v82[v57];
      int v59 = (operations_research::sat::DecisionStrategyProto **)(v57 * 4 + v85 + 8);
      do
      {
        unsigned int v60 = *v59++;
        unint64_t v61 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(v55);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(v60, v61);
        *v58++ = v61;
        --v56;
      }
      while (v56);
    }
    int v62 = *((_DWORD *)this + 18) + v45;
    *((_DWORD *)this + 18) = v62;
    uint64_t v63 = (int *)*((void *)this + 10);
    if (*v63 < v62) {
      *uint64_t v63 = v62;
    }
  }
  int v64 = *((_DWORD *)a2 + 22);
  if (v64)
  {
    uint64_t v65 = *((int *)this + 22);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 22, v65 + v64);
    uint64_t v66 = *((void *)this + 12);
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
    memcpy((void *)(v66 + 4 * v65), *((const void **)a2 + 12), 4 * *((int *)a2 + 22));
  }
  uint64_t v67 = *((void *)a2 + 14);
  if (*(char *)(v67 + 23) < 0)
  {
    if (!*(void *)(v67 + 8)) {
      goto LABEL_50;
    }
LABEL_47:
    int v68 = (std::string **)((char *)this + 112);
    uint64_t v69 = *((void *)this + 1);
    v70 = (google::protobuf::Arena *)(v69 & 0xFFFFFFFFFFFFFFFELL);
    if (v69)
    {
      v70 = *(google::protobuf::Arena **)v70;
      unint64_t v71 = *v68;
      if (*v68 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v71 = *v68;
      if (*v68 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_49:
        std::string::operator=(v71, *((const std::string **)a2 + 14));
        goto LABEL_50;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v68, v70, (long long *)v67);
    if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_) {
      return;
    }
    goto LABEL_51;
  }
  if (*(unsigned char *)(v67 + 23)) {
    goto LABEL_47;
  }
LABEL_50:
  if (a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_) {
    return;
  }
LABEL_51:
  unsigned int v72 = (const operations_research::sat::CpObjectiveProto *)*((void *)a2 + 15);
  if (v72)
  {
    uint64_t v73 = *((void *)this + 15);
    if (!v73)
    {
      int v74 = (google::protobuf::Arena *)(*v86 & 0xFFFFFFFFFFFFFFFELL);
      if (*v86) {
        int v74 = *(google::protobuf::Arena **)v74;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v74);
      *((void *)this + 15) = v73;
      unsigned int v72 = (const operations_research::sat::CpObjectiveProto *)*((void *)a2 + 15);
    }
    if (v72) {
      int v75 = v72;
    }
    else {
      int v75 = (const operations_research::sat::CpObjectiveProto *)&operations_research::sat::_CpObjectiveProto_default_instance_;
    }
    operations_research::sat::CpObjectiveProto::MergeFrom(v73, v75);
  }
  unint64_t v76 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((void *)a2 + 16);
  if (v76)
  {
    uint64_t v77 = (char *)*((void *)this + 16);
    if (!v77)
    {
      int v78 = (google::protobuf::Arena *)(*v86 & 0xFFFFFFFFFFFFFFFELL);
      if (*v86) {
        int v78 = *(google::protobuf::Arena **)v78;
      }
      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v78);
      *((void *)this + 16) = v77;
      unint64_t v76 = (const operations_research::sat::CircuitCoveringConstraintProto *)*((void *)a2 + 16);
    }
    if (v76) {
      int v79 = v76;
    }
    else {
      int v79 = (const operations_research::sat::CircuitCoveringConstraintProto *)&operations_research::sat::_PartialVariableAssignment_default_instance_;
    }
    operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(v77, v79);
  }
}

void operations_research::sat::CpModelProto::CopyFrom(operations_research::sat::CpModelProto *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpModelProto::Clear(this);
    if (v4)
    {
      operations_research::sat::CpModelProto::MergeFrom(this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

void operations_research::sat::CpModelProto::CopyFrom(operations_research::sat::CpModelProto *this, const operations_research::sat::CpModelProto *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpModelProto::Clear(this);
    operations_research::sat::CpModelProto::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::CpModelProto::IsInitialized(operations_research::sat::CpModelProto *this)
{
  return 1;
}

__n128 operations_research::sat::CpModelProto::InternalSwap(operations_research::sat::CpModelProto *this, operations_research::sat::CpModelProto *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      int v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)a2 + 1);
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      int v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  int v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  int v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  uint64_t v9 = *(void *)v8;
  *(void *)int v8 = *(void *)v7;
  *(void *)int v7 = v9;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v10;
  uint64_t v11 = *((void *)v8 + 2);
  *((void *)v8 + 2) = *((void *)v7 + 2);
  *((void *)v7 + 2) = v11;
LABEL_8:
  uint64_t v12 = *((void *)this + 3);
  uint64_t v13 = *((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *((void *)a2 + 3) = v12;
  *((void *)a2 + 4) = v13;
  uint64_t v14 = *((void *)this + 6);
  uint64_t v15 = *((void *)this + 7);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)a2 + 6) = v14;
  *((void *)a2 + 7) = v15;
  uint64_t v16 = *((void *)this + 9);
  uint64_t v17 = *((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *((void *)a2 + 9) = v16;
  *((void *)a2 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v17;
  uint64_t v18 = *((void *)this + 11);
  uint64_t v19 = *((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((void *)a2 + 11) = v18;
  *((void *)a2 + 12) = v19;
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v20;
  uint64_t v21 = *((void *)this + 15);
  uint64_t v22 = *((void *)this + 16);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)((char *)this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = result;
  *((void *)a2 + 15) = v21;
  *((void *)a2 + 16) = v22;
  return result;
}

uint64_t operations_research::sat::CpModelProto::GetMetadata(operations_research::sat::CpModelProto *this)
{
  return off_26AED01D8[48];
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::CpSolverResponse(operations_research::sat::CpSolverResponse *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0BF1B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = a2;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = a2;
  *((void *)this + 11) = a2;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = a2;
  *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  if (atomic_load_explicit(scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  return this;
}

void sub_23CBF05F4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2 + 112);
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v4);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::CpSolverResponse(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F0BF1B0;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v5);
    uint64_t v6 = (void *)*((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    int v8 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v9 = *((_DWORD *)a2 + 16);
  if (v9)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v9);
    uint64_t v10 = (void *)*((void *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy(v10, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  int v11 = *((_DWORD *)a2 + 24);
  if (v11)
  {
    uint64_t v40 = *((void *)a2 + 13);
    unsigned int v39 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpSolverResponse *)((char *)this + 88), v11);
    uint64_t v38 = v4;
    int v12 = **((_DWORD **)this + 13);
    int v13 = *((_DWORD *)this + 24);
    int v14 = v12 - v13;
    if (v12 - v13 >= v11) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = v14;
    }
    if ((int)v15 >= 1)
    {
      uint64_t v16 = (operations_research::sat::IntegerVariableProto **)v39;
      uint64_t v17 = (operations_research::sat::IntegerVariableProto **)(v40 + 8);
      do
      {
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(*v17++, *v16++);
        --v15;
      }
      while (v15);
    }
    if (v14 < v11)
    {
      uint64_t v18 = (google::protobuf::Arena *)*((void *)this + 11);
      int v19 = v13 + v11 - v12;
      uint64_t v20 = 2 * v14;
      uint64_t v21 = (operations_research::sat::IntegerVariableProto **)&v39[v20];
      uint64_t v22 = (operations_research::sat::IntegerVariableProto **)(v20 * 4 + v40 + 8);
      do
      {
        uint64_t v23 = *v22;
        int v24 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v18);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v23, v24);
        *v21++ = v24;
        ++v22;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 24) + v11;
    *((_DWORD *)this + 24) = v25;
    int v26 = (int *)*((void *)this + 13);
    uint64_t v4 = v38;
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  int v27 = *((_DWORD *)a2 + 28);
  if (v27)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v27);
    int v28 = (void *)*((void *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy(v28, *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  uint64_t v29 = *((void *)a2 + 1);
  if (v29)
  {
    if (*v4) {
      uint64_t v30 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v30 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v30, (const google::protobuf::UnknownFieldSet *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v31 = *((void *)a2 + 17);
  if (*(char *)(v31 + 23) < 0)
  {
    if (!*(void *)(v31 + 8)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(v31 + 23))
  {
    goto LABEL_32;
  }
  int v32 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*v4) {
    int v32 = *(google::protobuf::Arena **)v32;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, v32, (long long *)v31);
LABEL_32:
  long long v33 = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v33;
  long long v34 = *((_OWORD *)a2 + 11);
  long long v35 = *((_OWORD *)a2 + 12);
  long long v36 = *((_OWORD *)a2 + 14);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)this + 14) = v36;
  *((_OWORD *)this + 11) = v34;
  *((_OWORD *)this + 12) = v35;
  return this;
}

void sub_23CBF0924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::~RepeatedPtrField(v11);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a9);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a10);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(a11);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpSolverResponse::~CpSolverResponse(operations_research::sat::CpSolverResponse *this)
{
  uint64_t v2 = *((void *)this + 17);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      int v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        int v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(void *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x23ECF2BC0](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 112);
  int v9 = (operations_research::sat::IntegerVariableProto **)*((void *)this + 13);
  if (v9 && !*((void *)this + 11))
  {
    uint64_t v10 = v9 + 1;
    uint64_t v11 = *(unsigned int *)v9;
    if ((int)v11 >= 1)
    {
      do
      {
        if (*v10)
        {
          operations_research::sat::IntegerVariableProto::~IntegerVariableProto(*v10);
          MEMORY[0x23ECF2BC0]();
        }
        ++v10;
        --v11;
      }
      while (v11);
      int v9 = (operations_research::sat::IntegerVariableProto **)*((void *)this + 13);
    }
    operator delete(v9);
  }
  *((void *)this + 13) = 0;
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 64);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t vars8;

  operations_research::sat::CpSolverResponse::~CpSolverResponse(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CpSolverResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a2;
  return this;
}

void operations_research::sat::CpSolverResponse::Clear(operations_research::sat::CpSolverResponse *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 16) = 0;
  uint64_t v2 = *((unsigned int *)this + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 13) + 8);
    while (1)
    {
      uint64_t v4 = *v3;
      *(_DWORD *)(v4 + 16) = 0;
      uint64_t v5 = *(void *)(v4 + 40);
      if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_7;
      }
      if ((*(char *)(v5 + 23) & 0x80000000) == 0) {
        break;
      }
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = *(void *)(v4 + 8);
      if (v6)
      {
LABEL_8:
        if (*(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16)) {
          google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
        }
                                                                                               + 8));
      }
LABEL_3:
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + 24) = 0;
        goto LABEL_13;
      }
    }
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
LABEL_7:
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6) {
      goto LABEL_8;
    }
    goto LABEL_3;
  }
LABEL_13:
  *((_DWORD *)this + 28) = 0;
  uint64_t v7 = *((void *)this + 17);
  if ((uint64_t *)v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_16:
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
    uint64_t v8 = *((void *)this + 1);
    if ((v8 & 1) == 0) {
      return;
    }
    goto LABEL_19;
  }
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
    goto LABEL_16;
  }
  **(unsigned char **)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 1) == 0) {
    return;
  }
LABEL_19:
  if (*(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

std::string::value_type *operations_research::sat::CpSolverResponse::_InternalParse(operations_research::sat::CpSolverResponse *this, std::string::value_type *__s, google::protobuf::internal::ParseContext *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t SizeFallback = __s;
  uint64_t v8 = (unint64_t *)((char *)this + 8);
  uint64_t v67 = (operations_research::sat::CpSolverResponse *)((char *)this + 112);
  int v68 = (google::protobuf::UnknownFieldSet *)__s;
  int v9 = (unsigned int *)((char *)this + 88);
  uint64_t v10 = (std::string **)((char *)this + 136);
  uint64_t v66 = (operations_research::sat::CpSolverResponse *)((char *)this + 64);
  uint64_t v11 = (operations_research::sat::CpSolverResponse *)((char *)this + 40);
  int v12 = (operations_research::sat::CpSolverResponse *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)SizeFallback >= *(void *)a3)
    {
      if (&SizeFallback[-*((void *)a3 + 1)] == (std::string::value_type *)*((int *)a3 + 7)) {
        return SizeFallback;
      }
      uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, SizeFallback, *((_DWORD *)a3 + 23));
      int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (__s) {
        return SizeFallback;
      }
    }
    int v14 = (google::protobuf::internal *)(SizeFallback + 1);
    unsigned int v15 = *SizeFallback;
    if (*SizeFallback < 0) {
      break;
    }
    int v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 1);
    unsigned int v16 = (v15 >> 3) - 1;
    if (v16 > 0x16) {
      goto LABEL_145;
    }
LABEL_14:
    switch(v16)
    {
      case 0u:
        if (v15 != 8) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_19;
        }
        int v19 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v19 << 7) - 128);
        if (v19 < 0)
        {
          uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
        }
        else
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_19:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        }
        *((_DWORD *)this + 38) = __s;
        int v13 = 2;
        goto LABEL_4;
      case 1u:
        if (v15 == 18)
        {
          uint64_t SizeFallback = google::protobuf::internal::PackedInt64Parser(v12, (unsigned __int8 *)v14, a3, a4);
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          break;
        }
        if (v15 != 16) {
          goto LABEL_145;
        }
        uint64_t v54 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        uint64_t v55 = *((unsigned int *)this + 4);
        if (v55 == *((_DWORD *)this + 5)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v12, v55 + 1);
        }
        *(void *)(*((void *)this + 3) + 8 * v55) = v54;
        *((_DWORD *)this + 4) = v55 + 1;
        uint64_t SizeFallback = (std::string::value_type *)v68;
        if (!v68) {
          return SizeFallback;
        }
        break;
      case 2u:
        if (v15 != 25) {
          goto LABEL_145;
        }
        uint64_t v21 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 18) = v21;
        goto LABEL_96;
      case 3u:
        if (v15 != 33) {
          goto LABEL_145;
        }
        uint64_t v22 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v22;
        goto LABEL_96;
      case 4u:
        if (v15 != 40) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_32;
        }
        int v23 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v23 << 7) - 128);
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_32:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((unsigned char *)this + 156) = __s != 0;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((unsigned char *)this + 156) = __s != 0;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 9u:
        if (v15 != 80) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_37;
        }
        int v24 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v24 << 7) - 128);
        if ((v24 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_37:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((void *)this + 21) = __s;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((void *)this + 21) = __s;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 0xAu:
        if (v15 != 88) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_42;
        }
        int v25 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v25 << 7) - 128);
        if ((v25 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_42:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((void *)this + 22) = __s;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((void *)this + 22) = __s;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 0xBu:
        if (v15 != 96) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_47;
        }
        int v26 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v26 << 7) - 128);
        if ((v26 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_47:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((void *)this + 23) = __s;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((void *)this + 23) = __s;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 0xCu:
        if (v15 != 104) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_52;
        }
        int v27 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v27 << 7) - 128);
        if ((v27 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_52:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((void *)this + 24) = __s;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((void *)this + 24) = __s;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 0xDu:
        if (v15 != 112) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 + 1;
        __s = (std::string::value_type *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0) {
          goto LABEL_57;
        }
        int v28 = *SizeFallback;
        __s = (std::string::value_type *)(__s + (v28 << 7) - 128);
        if ((v28 & 0x80000000) == 0)
        {
          uint64_t SizeFallback = (char *)v14 + 2;
LABEL_57:
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          *((void *)this + 25) = __s;
          int v13 = 2;
          goto LABEL_4;
        }
        uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64(v14, __s);
        int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
        *((void *)this + 25) = __s;
        if (!SizeFallback) {
          return SizeFallback;
        }
        break;
      case 0xEu:
        if (v15 != 121) {
          goto LABEL_145;
        }
        uint64_t v29 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 26) = v29;
        goto LABEL_96;
      case 0xFu:
        if (v15 != 129) {
          goto LABEL_145;
        }
        uint64_t v30 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 27) = v30;
        goto LABEL_96;
      case 0x10u:
        if (v15 != 137) {
          goto LABEL_145;
        }
        uint64_t v31 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 28) = v31;
        goto LABEL_96;
      case 0x11u:
        if (v15 == 146)
        {
          uint64_t SizeFallback = google::protobuf::internal::PackedInt64Parser(v11, (unsigned __int8 *)v14, a3, a4);
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          break;
        }
        if (v15 != 144) {
          goto LABEL_145;
        }
        uint64_t v56 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        uint64_t v57 = *((unsigned int *)this + 10);
        if (v57 == *((_DWORD *)this + 11)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v11, v57 + 1);
        }
        *(void *)(*((void *)this + 6) + 8 * v57) = v56;
        *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v57 + 1;
        uint64_t SizeFallback = (std::string::value_type *)v68;
        if (!v68) {
          return SizeFallback;
        }
        break;
      case 0x12u:
        if (v15 == 154)
        {
          uint64_t SizeFallback = google::protobuf::internal::PackedInt64Parser(v66, (unsigned __int8 *)v14, a3, a4);
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          break;
        }
        if (v15 != 152) {
          goto LABEL_145;
        }
        uint64_t v58 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        uint64_t v59 = *((unsigned int *)this + 16);
        if (v59 == *((_DWORD *)this + 17)) {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v66, v59 + 1);
        }
        *(void *)(*((void *)this + 9) + 8 * v59) = v58;
        *((_DWORD *)this + 16) = v59 + 1;
        uint64_t SizeFallback = (std::string::value_type *)v68;
        if (!v68) {
          return SizeFallback;
        }
        break;
      case 0x13u:
        if (v15 != 162) {
          goto LABEL_145;
        }
        int v32 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v8 & 1) == 0)
        {
          long long v33 = *v10;
          if (*v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_74;
          }
LABEL_73:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v10, v32, (long long *)&google::protobuf::internal::fixed_address_empty_string);
          long long v33 = *v10;
          int v14 = v68;
          goto LABEL_74;
        }
        int v32 = *(google::protobuf::Arena **)v32;
        long long v33 = *v10;
        if (*v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_73;
        }
LABEL_74:
        int v68 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v33, (std::string::value_type *)v14, (uint64_t)a3);
        if (SHIBYTE(v33->__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v52 = (std::string *)v33->__r_.__value_.__r.__words[0];
          size_t size = v33->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0) {
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v33->__r_.__value_.__l.__size_, "size_t to int conversion", v34);
          }
          long long v33 = v52;
        }
        else
        {
          size_t size = HIBYTE(v33->__r_.__value_.__r.__words[2]);
        }
        BOOL v53 = google::protobuf::internal::VerifyUTF8(v33, size, (google::protobuf::internal *)"operations_research.sat.CpSolverResponse.solution_info");
        uint64_t SizeFallback = (std::string::value_type *)v68;
        if (v68) {
          int v13 = 2;
        }
        else {
          int v13 = 4;
        }
        if (v53) {
          goto LABEL_4;
        }
        return 0;
      case 0x14u:
        if (v15 != 170) {
          goto LABEL_145;
        }
        uint64_t SizeFallback = (char *)v14 - 2;
        while (2)
        {
          long long v36 = (google::protobuf::internal *)(SizeFallback + 2);
          int v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
          int v37 = (int *)*((void *)this + 13);
          if (!v37)
          {
            int v39 = *((_DWORD *)this + 25);
LABEL_85:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v39 + 1);
            int v37 = (int *)*((void *)this + 13);
            int v39 = *v37;
            goto LABEL_86;
          }
          uint64_t v38 = *((int *)this + 24);
          int v39 = *v37;
          if ((int)v38 < *v37)
          {
            *((_DWORD *)this + 24) = v38 + 1;
            uint64_t v40 = *(operations_research::sat::IntegerVariableProto **)&v37[2 * v38 + 2];
            uint64_t v41 = (const char *)*(unsigned __int8 *)v36;
            if ((*(char *)v36 & 0x80000000) == 0) {
              goto LABEL_87;
            }
            goto LABEL_81;
          }
          if (v39 == *((_DWORD *)this + 25)) {
            goto LABEL_85;
          }
LABEL_86:
          *int v37 = v39 + 1;
          uint64_t v40 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 11));
          uint64_t v42 = *((void *)this + 13);
          uint64_t v43 = *((int *)this + 24);
          *((_DWORD *)this + 24) = v43 + 1;
          *(void *)(v42 + 8 * v43 + 8) = v40;
          long long v36 = v68;
          uint64_t v41 = (const char *)*(unsigned __int8 *)v68;
          if ((*(char *)v68 & 0x80000000) == 0)
          {
LABEL_87:
            uint64_t SizeFallback = (char *)v36 + 1;
            goto LABEL_88;
          }
LABEL_81:
          uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback(v36, v41);
          if (!SizeFallback) {
            return SizeFallback;
          }
LABEL_88:
          uint64_t v44 = *((void *)a3 + 1);
          int v45 = v41 + SizeFallback - v44;
          *(void *)a3 = v44 + (v45 & (v45 >> 31));
          int v46 = *((_DWORD *)a3 + 7);
          *((_DWORD *)a3 + 7) = v45;
          LODWORD(v44) = *((_DWORD *)a3 + 22);
          BOOL v47 = __OFSUB__(v44, 1);
          LODWORD(v44) = v44 - 1;
          *((_DWORD *)a3 + 22) = v44;
          if ((int)v44 < 0 != v47) {
            return 0;
          }
          int v48 = operations_research::sat::IntegerVariableProto::_InternalParse(v40, SizeFallback, a3, a4, a5);
          uint64_t SizeFallback = v48;
          if (!v48) {
            return SizeFallback;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v49 = *((_DWORD *)a3 + 7) + v46 - v45;
          *((_DWORD *)a3 + 7) = v49;
          unint64_t v50 = *((void *)a3 + 1) + (v49 & (v49 >> 31));
          *(void *)a3 = v50;
          int v68 = (google::protobuf::UnknownFieldSet *)v48;
          if (v50 > (unint64_t)v48)
          {
            int v13 = 2;
            if (*(_WORD *)v48 != 426) {
              goto LABEL_4;
            }
            continue;
          }
          goto LABEL_3;
        }
      case 0x15u:
        if (v15 != 177) {
          goto LABEL_145;
        }
        uint64_t v51 = *(void *)v14;
        uint64_t v20 = (google::protobuf::internal *)((char *)v14 + 8);
        *((void *)this + 29) = v51;
LABEL_96:
        int v68 = v20;
        int v13 = 2;
        uint64_t SizeFallback = (std::string::value_type *)v20;
        goto LABEL_4;
      case 0x16u:
        if (v15 == 186)
        {
          uint64_t SizeFallback = google::protobuf::internal::PackedInt32Parser(v67, (unsigned __int8 *)v14, a3, a4);
          int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
          if (!SizeFallback) {
            return SizeFallback;
          }
          break;
        }
        if (v15 != 184) {
          goto LABEL_145;
        }
        int v60 = google::protobuf::internal::ReadVarint64(&v68, (const char **)__s);
        uint64_t v61 = *((unsigned int *)this + 28);
        if (v61 == *((_DWORD *)this + 29)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v67, v61 + 1);
        }
        *(_DWORD *)(*((void *)this + 15) + 4 * v61) = v60;
        *((_DWORD *)this + 28) = v61 + 1;
        uint64_t SizeFallback = (std::string::value_type *)v68;
        if (!v68) {
          return SizeFallback;
        }
        break;
      default:
        goto LABEL_145;
    }
LABEL_3:
    int v13 = 2;
LABEL_4:
    if (v13 != 2) {
      return 0;
    }
  }
  unsigned int v17 = v15 + (*(unsigned __int8 *)v14 << 7);
  unsigned int v15 = v17 - 128;
  if (*(char *)v14 < 0)
  {
    uint64_t TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)SizeFallback, (const char *)(v17 - 128));
    int v68 = TagFallback;
    if (!TagFallback) {
      return 0;
    }
    int v14 = TagFallback;
    unsigned int v15 = __s;
    unsigned int v16 = (__s >> 3) - 1;
    goto LABEL_14;
  }
  int v14 = (google::protobuf::internal *)(SizeFallback + 2);
  int v68 = (google::protobuf::UnknownFieldSet *)(SizeFallback + 2);
  unsigned int v16 = (v15 >> 3) - 1;
  if (v16 <= 0x16) {
    goto LABEL_14;
  }
LABEL_145:
  if (v15) {
    BOOL v62 = (v15 & 7) == 4;
  }
  else {
    BOOL v62 = 1;
  }
  if (!v62)
  {
    if (*v8)
    {
      uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v14, (const char *)a3, a5);
      int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback) {
        return SizeFallback;
      }
    }
    else
    {
      uint64_t v63 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      uint64_t SizeFallback = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v63, v68, (const char *)a3, v64);
      int v68 = (google::protobuf::UnknownFieldSet *)SizeFallback;
      if (!SizeFallback) {
        return SizeFallback;
      }
    }
    goto LABEL_3;
  }
  *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15 - 1;
  return (std::string::value_type *)v14;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::CpSolverResponse::_InternalSerialize(operations_research::sat::CpSolverResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = a2;
  unsigned int v7 = *((_DWORD *)this + 38);
  if (!v7)
  {
LABEL_9:
    int v8 = *((_DWORD *)this + 8);
    if (v8 < 1) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  if (*(void *)a3 <= (unint64_t)a2)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    unsigned int v7 = *((_DWORD *)this + 38);
    char *v5 = 8;
    if (v7 <= 0x7F)
    {
LABEL_4:
      v5[1] = v7;
      v5 += 2;
      int v8 = *((_DWORD *)this + 8);
      if (v8 < 1) {
        goto LABEL_27;
      }
LABEL_10:
      if (*(void *)a3 <= (unint64_t)v5)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        char *v5 = 18;
        uint64_t v10 = v5 + 1;
        if (v8 < 0x80) {
          goto LABEL_12;
        }
      }
      else
      {
        char *v5 = 18;
        uint64_t v10 = v5 + 1;
        if (v8 < 0x80)
        {
LABEL_12:
          v5 += 2;
          *uint64_t v10 = v8;
          uint64_t v11 = (unint64_t *)*((void *)this + 3);
          int v12 = &v11[*((int *)this + 4)];
          while (1)
          {
            if (*(void *)a3 <= (unint64_t)v5)
            {
              uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
              unint64_t v18 = *v11++;
              unint64_t v13 = v18;
              if (v18 > 0x7F)
              {
LABEL_17:
                char *v5 = v13 | 0x80;
                unint64_t v15 = v13 >> 7;
                if (v13 >> 14)
                {
                  v5 += 2;
                  do
                  {
                    *(v5 - 1) = v15 | 0x80;
                    unint64_t v16 = v15 >> 7;
                    ++v5;
                    unint64_t v17 = v15 >> 14;
                    v15 >>= 7;
                  }
                  while (v17);
                  *(v5 - 1) = v16;
                }
                else
                {
                  v5[1] = v15;
                  v5 += 2;
                }
                goto LABEL_14;
              }
            }
            else
            {
              unint64_t v14 = *v11++;
              unint64_t v13 = v14;
              if (v14 > 0x7F) {
                goto LABEL_17;
              }
            }
            *v5++ = v13;
LABEL_14:
            if (v11 >= v12) {
              goto LABEL_27;
            }
          }
        }
      }
      do
      {
        *v10++ = v8 | 0x80;
        unsigned int v26 = v8 >> 14;
        int v8 = v8 >> 7;
      }
      while (v26);
      uint64_t v5 = v10 - 1;
      goto LABEL_12;
    }
  }
  else
  {
    *a2 = 8;
    if (v7 <= 0x7F) {
      goto LABEL_4;
    }
  }
  v5[1] = v7 | 0x80;
  unint64_t v9 = (unint64_t)(int)v7 >> 7;
  if (!(v7 >> 14))
  {
    v5[2] = v9;
    v5 += 3;
    goto LABEL_9;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v9 | 0x80;
    unint64_t v19 = v9 >> 7;
    ++v5;
    unint64_t v20 = v9 >> 14;
    v9 >>= 7;
  }
  while (v20);
  *(v5 - 1) = v19;
  int v8 = *((_DWORD *)this + 8);
  if (v8 >= 1) {
    goto LABEL_10;
  }
LABEL_27:
  if (*((double *)this + 18) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v21 = *((void *)this + 18);
    char *v5 = 25;
    *(void *)(v5 + 1) = v21;
    v5 += 9;
  }
  if (*((double *)this + 20) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v22 = *((void *)this + 20);
    char *v5 = 33;
    *(void *)(v5 + 1) = v22;
    v5 += 9;
  }
  if (*((unsigned char *)this + 156))
  {
    if (*(void *)a3 <= (unint64_t)v5)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v23 = *((unsigned char *)this + 156);
    }
    else
    {
      char v23 = 1;
    }
    char *v5 = 40;
    v5[1] = v23;
    v5 += 2;
  }
  unint64_t v24 = *((void *)this + 21);
  if (!v24)
  {
LABEL_51:
    unint64_t v25 = *((void *)this + 22);
    if (!v25) {
      goto LABEL_63;
    }
    goto LABEL_52;
  }
  if (*(void *)a3 <= (unint64_t)v5)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v24 = *((void *)this + 21);
    char *v5 = 80;
    if (v24 <= 0x7F)
    {
LABEL_42:
      v5[1] = v24;
      v5 += 2;
      unint64_t v25 = *((void *)this + 22);
      if (!v25) {
        goto LABEL_63;
      }
LABEL_52:
      if (*(void *)a3 <= (unint64_t)v5)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        unint64_t v25 = *((void *)this + 22);
        char *v5 = 88;
        if (v25 <= 0x7F)
        {
LABEL_54:
          v5[1] = v25;
          v5 += 2;
          unint64_t v28 = *((void *)this + 23);
          if (v28) {
            goto LABEL_64;
          }
          goto LABEL_75;
        }
      }
      else
      {
        char *v5 = 88;
        if (v25 <= 0x7F) {
          goto LABEL_54;
        }
      }
      v5[1] = v25 | 0x80;
      unint64_t v31 = v25 >> 7;
      if (!(v25 >> 14))
      {
        v5[2] = v31;
        v5 += 3;
        goto LABEL_63;
      }
      v5 += 3;
      do
      {
        *(v5 - 1) = v31 | 0x80;
        unint64_t v33 = v31 >> 7;
        ++v5;
        unint64_t v34 = v31 >> 14;
        v31 >>= 7;
      }
      while (v34);
      *(v5 - 1) = v33;
      unint64_t v28 = *((void *)this + 23);
      if (v28) {
        goto LABEL_64;
      }
LABEL_75:
      unint64_t v32 = *((void *)this + 24);
      if (!v32) {
        goto LABEL_87;
      }
      goto LABEL_76;
    }
  }
  else
  {
    char *v5 = 80;
    if (v24 <= 0x7F) {
      goto LABEL_42;
    }
  }
  v5[1] = v24 | 0x80;
  unint64_t v27 = v24 >> 7;
  if (!(v24 >> 14))
  {
    v5[2] = v27;
    v5 += 3;
    goto LABEL_51;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v27 | 0x80;
    unint64_t v29 = v27 >> 7;
    ++v5;
    unint64_t v30 = v27 >> 14;
    v27 >>= 7;
  }
  while (v30);
  *(v5 - 1) = v29;
  unint64_t v25 = *((void *)this + 22);
  if (v25) {
    goto LABEL_52;
  }
LABEL_63:
  unint64_t v28 = *((void *)this + 23);
  if (!v28) {
    goto LABEL_75;
  }
LABEL_64:
  if (*(void *)a3 <= (unint64_t)v5)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v28 = *((void *)this + 23);
    char *v5 = 96;
    if (v28 <= 0x7F)
    {
LABEL_66:
      v5[1] = v28;
      v5 += 2;
      unint64_t v32 = *((void *)this + 24);
      if (!v32) {
        goto LABEL_87;
      }
LABEL_76:
      if (*(void *)a3 <= (unint64_t)v5)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        unint64_t v32 = *((void *)this + 24);
        char *v5 = 104;
        if (v32 <= 0x7F)
        {
LABEL_78:
          v5[1] = v32;
          v5 += 2;
          unint64_t v36 = *((void *)this + 25);
          if (!v36) {
            goto LABEL_99;
          }
          goto LABEL_88;
        }
      }
      else
      {
        char *v5 = 104;
        if (v32 <= 0x7F) {
          goto LABEL_78;
        }
      }
      v5[1] = v32 | 0x80;
      unint64_t v39 = v32 >> 7;
      if (v32 >> 14)
      {
        v5 += 3;
        do
        {
          *(v5 - 1) = v39 | 0x80;
          unint64_t v41 = v39 >> 7;
          ++v5;
          unint64_t v42 = v39 >> 14;
          v39 >>= 7;
        }
        while (v42);
        *(v5 - 1) = v41;
        unint64_t v36 = *((void *)this + 25);
        if (!v36) {
          goto LABEL_99;
        }
        goto LABEL_88;
      }
      v5[2] = v39;
      v5 += 3;
      goto LABEL_87;
    }
  }
  else
  {
    char *v5 = 96;
    if (v28 <= 0x7F) {
      goto LABEL_66;
    }
  }
  v5[1] = v28 | 0x80;
  unint64_t v35 = v28 >> 7;
  if (!(v28 >> 14))
  {
    v5[2] = v35;
    v5 += 3;
    goto LABEL_75;
  }
  v5 += 3;
  do
  {
    *(v5 - 1) = v35 | 0x80;
    unint64_t v37 = v35 >> 7;
    ++v5;
    unint64_t v38 = v35 >> 14;
    v35 >>= 7;
  }
  while (v38);
  *(v5 - 1) = v37;
  unint64_t v32 = *((void *)this + 24);
  if (v32) {
    goto LABEL_76;
  }
LABEL_87:
  unint64_t v36 = *((void *)this + 25);
  if (!v36) {
    goto LABEL_99;
  }
LABEL_88:
  if (*(void *)a3 <= (unint64_t)v5)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v36 = *((void *)this + 25);
    char *v5 = 112;
    if (v36 <= 0x7F)
    {
LABEL_90:
      v5[1] = v36;
      v5 += 2;
      double v40 = *((double *)this + 26);
      if (v40 == 0.0) {
        goto LABEL_103;
      }
      goto LABEL_100;
    }
  }
  else
  {
    char *v5 = 112;
    if (v36 <= 0x7F) {
      goto LABEL_90;
    }
  }
  v5[1] = v36 | 0x80;
  unint64_t v43 = v36 >> 7;
  if (v36 >> 14)
  {
    v5 += 3;
    do
    {
      *(v5 - 1) = v43 | 0x80;
      unint64_t v82 = v43 >> 7;
      ++v5;
      unint64_t v83 = v43 >> 14;
      v43 >>= 7;
    }
    while (v83);
    *(v5 - 1) = v82;
    double v40 = *((double *)this + 26);
    if (v40 == 0.0) {
      goto LABEL_103;
    }
    goto LABEL_100;
  }
  v5[2] = v43;
  v5 += 3;
LABEL_99:
  double v40 = *((double *)this + 26);
  if (v40 == 0.0) {
    goto LABEL_103;
  }
LABEL_100:
  if (*(void *)a3 <= (unint64_t)v5)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    double v44 = *((double *)this + 26);
  }
  else
  {
    double v44 = v40;
  }
  char *v5 = 121;
  *(double *)(v5 + 1) = v44;
  v5 += 9;
LABEL_103:
  if (*((double *)this + 27) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v45 = *((void *)this + 27);
    *(_WORD *)uint64_t v5 = 385;
    *(void *)(v5 + 2) = v45;
    v5 += 10;
  }
  if (*((double *)this + 28) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v46 = *((void *)this + 28);
    *(_WORD *)uint64_t v5 = 393;
    *(void *)(v5 + 2) = v46;
    v5 += 10;
  }
  unsigned int v47 = *((_DWORD *)this + 14);
  if ((int)v47 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v5)
    {
      uint64_t v98 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)uint64_t v98 = 402;
      int v48 = v98 + 2;
      if (v47 < 0x80) {
        goto LABEL_114;
      }
    }
    else
    {
      *(_WORD *)uint64_t v5 = 402;
      int v48 = v5 + 2;
      if (v47 < 0x80)
      {
LABEL_114:
        LOBYTE(v49) = v47;
LABEL_115:
        unsigned char *v48 = v49;
        uint64_t v5 = v48 + 1;
        unint64_t v50 = (unint64_t *)*((void *)this + 6);
        uint64_t v51 = &v50[*((int *)this + 10)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v5)
          {
            uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            unint64_t v57 = *v50++;
            unint64_t v52 = v57;
            if (v57 > 0x7F)
            {
LABEL_120:
              char *v5 = v52 | 0x80;
              unint64_t v54 = v52 >> 7;
              if (v52 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v54 | 0x80;
                  unint64_t v55 = v54 >> 7;
                  ++v5;
                  unint64_t v56 = v54 >> 14;
                  v54 >>= 7;
                }
                while (v56);
                *(v5 - 1) = v55;
              }
              else
              {
                v5[1] = v54;
                v5 += 2;
              }
              goto LABEL_117;
            }
          }
          else
          {
            unint64_t v53 = *v50++;
            unint64_t v52 = v53;
            if (v53 > 0x7F) {
              goto LABEL_120;
            }
          }
          *v5++ = v52;
LABEL_117:
          if (v50 >= v51) {
            goto LABEL_127;
          }
        }
      }
    }
    do
    {
      *v48++ = v47 | 0x80;
      unsigned int v49 = v47 >> 7;
      unsigned int v99 = v47 >> 14;
      v47 >>= 7;
    }
    while (v99);
    goto LABEL_115;
  }
LABEL_127:
  unsigned int v58 = *((_DWORD *)this + 20);
  if ((int)v58 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v5)
    {
      uint64_t v100 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)uint64_t v100 = 410;
      uint64_t v59 = v100 + 2;
      if (v58 < 0x80) {
        goto LABEL_130;
      }
    }
    else
    {
      *(_WORD *)uint64_t v5 = 410;
      uint64_t v59 = v5 + 2;
      if (v58 < 0x80)
      {
LABEL_130:
        LOBYTE(v6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v58;
LABEL_131:
        *uint64_t v59 = v60;
        uint64_t v5 = v59 + 1;
        uint64_t v61 = (unint64_t *)*((void *)this + 9);
        BOOL v62 = &v61[*((int *)this + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v5)
          {
            uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            unint64_t v68 = *v61++;
            unint64_t v63 = v68;
            if (v68 > 0x7F)
            {
LABEL_136:
              char *v5 = v63 | 0x80;
              unint64_t v65 = v63 >> 7;
              if (v63 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v65 | 0x80;
                  unint64_t v66 = v65 >> 7;
                  ++v5;
                  unint64_t v67 = v65 >> 14;
                  v65 >>= 7;
                }
                while (v67);
                *(v5 - 1) = v66;
              }
              else
              {
                v5[1] = v65;
                v5 += 2;
              }
              goto LABEL_133;
            }
          }
          else
          {
            unint64_t v64 = *v61++;
            unint64_t v63 = v64;
            if (v64 > 0x7F) {
              goto LABEL_136;
            }
          }
          *v5++ = v63;
LABEL_133:
          if (v61 >= v62) {
            goto LABEL_143;
          }
        }
      }
    }
    do
    {
      *v59++ = v58 | 0x80;
      unsigned int v60 = v58 >> 7;
      unsigned int v101 = v58 >> 14;
      v58 >>= 7;
    }
    while (v101);
    goto LABEL_131;
  }
LABEL_143:
  uint64_t v69 = (uint64_t *)*((void *)this + 17);
  if (*((char *)v69 + 23) < 0)
  {
    v70 = (const char *)v69[1];
    if (!v70) {
      goto LABEL_156;
    }
    uint64_t v69 = (uint64_t *)*v69;
  }
  else
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((unsigned char *)v69 + 23)) {
      goto LABEL_156;
    }
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"operations_research.sat.CpSolverResponse.solution_info");
  uint64_t v71 = *((void *)this + 17);
  if (*(char *)(v71 + 23) < 0)
  {
    int64_t v72 = *(void *)(v71 + 8);
    if (v72 > 127) {
      goto LABEL_172;
    }
  }
  else
  {
    int64_t v72 = *(unsigned __int8 *)(v71 + 23);
  }
  if (*(void *)a3 - (void)v5 + 13 < v72)
  {
LABEL_172:
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 20, v71, v5);
    int v74 = *((_DWORD *)this + 24);
    if (!v74) {
      goto LABEL_173;
    }
    goto LABEL_157;
  }
  *(_WORD *)uint64_t v5 = 418;
  v5[2] = v72;
  if (*(char *)(v71 + 23) >= 0) {
    uint64_t v73 = (const void *)v71;
  }
  else {
    uint64_t v73 = *(const void **)v71;
  }
  memcpy(v5 + 3, v73, v72);
  v5 += v72 + 3;
LABEL_156:
  int v74 = *((_DWORD *)this + 24);
  if (!v74) {
    goto LABEL_173;
  }
LABEL_157:
  for (int i = 0; i != v74; ++i)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v77 = *(operations_research::sat::IntegerVariableProto **)(*((void *)this + 13) + 8 * i + 8);
    *(_WORD *)uint64_t v5 = 426;
    unsigned int v78 = *((_DWORD *)v77 + 12);
    if (v78 <= 0x7F)
    {
      v5[2] = v78;
      unint64_t v76 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    else
    {
      v5[2] = v78 | 0x80;
      unsigned int v79 = v78 >> 7;
      if (v78 >> 14)
      {
        unint64_t v76 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
        do
        {
          *((unsigned char *)v76 - 1) = v79 | 0x80;
          unsigned int v80 = v79 >> 7;
          unint64_t v76 = (google::protobuf::UnknownFieldSet *)((char *)v76 + 1);
          unsigned int v81 = v79 >> 14;
          v79 >>= 7;
        }
        while (v81);
        *((unsigned char *)v76 - 1) = v80;
      }
      else
      {
        v5[3] = v79;
        unint64_t v76 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    uint64_t v5 = (char *)operations_research::sat::IntegerVariableProto::_InternalSerialize(v77, v76, a3, a4);
  }
LABEL_173:
  if (*((double *)this + 29) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)v5) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    uint64_t v84 = *((void *)this + 29);
    *(_WORD *)uint64_t v5 = 433;
    *(void *)(v5 + 2) = v84;
    v5 += 10;
  }
  unsigned int v85 = *((_DWORD *)this + 32);
  if ((int)v85 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v5)
    {
      unsigned int v102 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      *(_WORD *)unsigned int v102 = 442;
      uint64_t v86 = v102 + 2;
      if (v85 < 0x80) {
        goto LABEL_180;
      }
    }
    else
    {
      *(_WORD *)uint64_t v5 = 442;
      uint64_t v86 = v5 + 2;
      if (v85 < 0x80)
      {
LABEL_180:
        LOBYTE(v87) = v85;
LABEL_181:
        *uint64_t v86 = v87;
        uint64_t v5 = v86 + 1;
        uint64_t v88 = (int *)*((void *)this + 15);
        uint64_t v89 = &v88[*((int *)this + 28)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v5)
          {
            uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
            unint64_t v95 = *v88++;
            unint64_t v90 = v95;
            if (v95 > 0x7F)
            {
LABEL_186:
              char *v5 = v90 | 0x80;
              unint64_t v92 = v90 >> 7;
              if (v90 >> 14)
              {
                v5 += 2;
                do
                {
                  *(v5 - 1) = v92 | 0x80;
                  unint64_t v93 = v92 >> 7;
                  ++v5;
                  unint64_t v94 = v92 >> 14;
                  v92 >>= 7;
                }
                while (v94);
                *(v5 - 1) = v93;
              }
              else
              {
                v5[1] = v92;
                v5 += 2;
              }
              goto LABEL_183;
            }
          }
          else
          {
            unint64_t v91 = *v88++;
            unint64_t v90 = v91;
            if (v91 > 0x7F) {
              goto LABEL_186;
            }
          }
          *v5++ = v90;
LABEL_183:
          if (v88 >= v89) {
            goto LABEL_193;
          }
        }
      }
    }
    do
    {
      *v86++ = v85 | 0x80;
      unsigned int v87 = v85 >> 7;
      unsigned int v103 = v85 >> 14;
      v85 >>= 7;
    }
    while (v103);
    goto LABEL_181;
  }
LABEL_193:
  uint64_t v96 = *((void *)this + 1);
  if ((v96 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v96 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

char *operations_research::sat::CpSolverResponse::ByteSizeLong(operations_research::sat::CpSolverResponse *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  uint64_t v3 = 10;
  uint64_t v4 = (9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v2 >= 0) {
    uint64_t v3 = v4;
  }
  if (v2) {
    int v5 = v2;
  }
  else {
    int v5 = 0;
  }
  if (v2) {
    uint64_t v6 = v3 + 1;
  }
  else {
    uint64_t v6 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  uint64_t v7 = v6 + v2;
  uint64_t v8 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  uint64_t v9 = 10;
  uint64_t v10 = (9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v8 >= 0) {
    uint64_t v9 = v10;
  }
  uint64_t v11 = v7 + v9 + 2;
  if (v8) {
    int v12 = v8;
  }
  else {
    int v12 = 0;
  }
  if (!v8) {
    uint64_t v11 = v7;
  }
  *((_DWORD *)this + 14) = v12;
  uint64_t v13 = v11 + v8;
  uint64_t v14 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 16);
  uint64_t v15 = 10;
  uint64_t v16 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v14 >= 0) {
    uint64_t v15 = v16;
  }
  uint64_t v17 = v13 + v15 + 2;
  if (v14) {
    int v18 = v14;
  }
  else {
    int v18 = 0;
  }
  if (!v14) {
    uint64_t v17 = v13;
  }
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v18;
  uint64_t v19 = v17 + v14;
  uint64_t v20 = *((int *)this + 24);
  uint64_t v21 = v19 + 2 * v20;
  uint64_t v22 = *((void *)this + 13);
  if (v22) {
    char v23 = (uint64_t *)(v22 + 8);
  }
  else {
    char v23 = 0;
  }
  if (v20)
  {
    for (uint64_t i = 8 * v20; i; i -= 8)
    {
      uint64_t v25 = *v23;
      uint64_t v26 = google::protobuf::internal::WireFormatLite::Int64Size((int *)(*v23 + 16));
      if (v26)
      {
        if ((v26 & 0x80000000) != 0)
        {
          uint64_t v27 = 11;
          *(_DWORD *)(v25 + 32) = v26;
          uint64_t v28 = *(void *)(v25 + 40);
          uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
          if ((*(char *)(v28 + 23) & 0x80000000) == 0)
          {
LABEL_33:
            unint64_t v30 = (char *)(v27 + v26);
            if (v29) {
              goto LABEL_34;
            }
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v27 = ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
          *(_DWORD *)(v25 + 32) = v26;
          uint64_t v28 = *(void *)(v25 + 40);
          uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
          if ((*(char *)(v28 + 23) & 0x80000000) == 0) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        uint64_t v27 = 0;
        *(_DWORD *)(v25 + 32) = 0;
        uint64_t v28 = *(void *)(v25 + 40);
        uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
        if ((*(char *)(v28 + 23) & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      unint64_t v30 = (char *)(v27 + v26);
      if (*(void *)(v28 + 8))
      {
LABEL_34:
        uint64_t v31 = *(void *)(v28 + 8);
        if ((v29 & 0x80u) == 0) {
          uint64_t v32 = v29;
        }
        else {
          uint64_t v32 = v31;
        }
        v30 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
LABEL_38:
      if (*(unsigned char *)(v25 + 8)) {
        unint64_t v30 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v25 + 8), (const google::protobuf::UnknownFieldSet *)v30, (_DWORD *)(v25 + 48));
      }
      else {
        *(_DWORD *)(v25 + 48) = v30;
      }
      v21 += (uint64_t)&v30[(9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6];
      ++v23;
    }
  }
  uint64_t v33 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 28);
  uint64_t v34 = 12;
  uint64_t v35 = ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((int)v33 >= 0) {
    uint64_t v34 = v35;
  }
  uint64_t v36 = v34 + v21;
  if (v33) {
    int v37 = v33;
  }
  else {
    int v37 = 0;
  }
  if (!v33) {
    uint64_t v36 = v21;
  }
  *((_DWORD *)this + 32) = v37;
  uint64_t v38 = *((void *)this + 17);
  uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0)
  {
    uint64_t v40 = v36 + v33;
    if (!*(void *)(v38 + 8)) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v40 = v36 + v33;
    if (!*(unsigned char *)(v38 + 23)) {
      goto LABEL_58;
    }
  }
  uint64_t v41 = *(void *)(v38 + 8);
  if ((v39 & 0x80u) == 0) {
    uint64_t v41 = v39;
  }
  v40 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_58:
  if (*((double *)this + 18) != 0.0) {
    v40 += 9;
  }
  int v42 = *((_DWORD *)this + 38);
  uint64_t v43 = 11;
  uint64_t v44 = ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v42 >= 0) {
    uint64_t v43 = v44;
  }
  uint64_t v45 = v43 + v40;
  if (v42) {
    uint64_t v40 = v45;
  }
  if (*((unsigned char *)this + 156)) {
    v40 += 2;
  }
  if (*((double *)this + 20) != 0.0) {
    v40 += 9;
  }
  uint64_t v46 = *((void *)this + 21);
  uint64_t v47 = *((void *)this + 22);
  uint64_t v48 = v40 + ((9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6);
  if (v46) {
    uint64_t v40 = v48 + 1;
  }
  uint64_t v49 = v40 + ((9 * (__clz(v47 | 1) ^ 0x3F) + 73) >> 6);
  if (v47) {
    uint64_t v40 = v49 + 1;
  }
  uint64_t v50 = *((void *)this + 23);
  uint64_t v51 = *((void *)this + 24);
  uint64_t v52 = v40 + ((9 * (__clz(v50 | 1) ^ 0x3F) + 73) >> 6);
  if (v50) {
    uint64_t v40 = v52 + 1;
  }
  uint64_t v53 = v40 + ((9 * (__clz(v51 | 1) ^ 0x3F) + 73) >> 6);
  if (v51) {
    uint64_t v40 = v53 + 1;
  }
  uint64_t v54 = *((void *)this + 25);
  uint64_t v55 = v40 + ((9 * (__clz(v54 | 1) ^ 0x3F) + 73) >> 6);
  if (v54) {
    uint64_t v40 = v55 + 1;
  }
  if (*((double *)this + 26) != 0.0) {
    v40 += 9;
  }
  if (*((double *)this + 27) != 0.0) {
    v40 += 10;
  }
  if (*((double *)this + 28) != 0.0) {
    v40 += 10;
  }
  if (*((double *)this + 29) == 0.0) {
    unint64_t v56 = (const google::protobuf::UnknownFieldSet *)v40;
  }
  else {
    unint64_t v56 = (const google::protobuf::UnknownFieldSet *)(v40 + 10);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::CpSolverResponse *)((char *)this + 8), v56, (_DWORD *)this + 60);
  }
  else
  {
    *((_DWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v56;
    return (char *)v56;
  }
}

void operations_research::sat::CpSolverResponse::MergeFrom(operations_research::sat::CpSolverResponse *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::CpSolverResponse::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::CpSolverResponse::MergeFrom(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    int v5 = (unint64_t *)((char *)this + 8);
    uint64_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    uint64_t v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v10 + v9);
    uint64_t v11 = *((void *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  int v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    uint64_t v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    uint64_t v14 = *((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  int v15 = *((_DWORD *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = *((int *)this + 16);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 16, v16 + v15);
    uint64_t v17 = *((void *)this + 9);
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
    memcpy((void *)(v17 + 8 * v16), *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
  }
  int v18 = *((_DWORD *)a2 + 24);
  if (v18)
  {
    uint64_t v58 = *((void *)a2 + 13);
    unint64_t v57 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((operations_research::sat::CpSolverResponse *)((char *)this + 88), v18);
    int v19 = **((_DWORD **)this + 13);
    int v20 = *((_DWORD *)this + 24);
    int v21 = v19 - v20;
    if (v19 - v20 >= v18) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v21;
    }
    if ((int)v22 >= 1)
    {
      char v23 = (operations_research::sat::IntegerVariableProto **)v57;
      unint64_t v24 = (operations_research::sat::IntegerVariableProto **)(v58 + 8);
      do
      {
        uint64_t v26 = *v24++;
        uint64_t v25 = v26;
        uint64_t v27 = *v23++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v25, v27);
        --v22;
      }
      while (v22);
    }
    if (v21 < v18)
    {
      uint64_t v28 = (google::protobuf::Arena *)*((void *)this + 11);
      int v29 = v20 + v18 - v19;
      uint64_t v30 = 2 * v21;
      uint64_t v31 = (operations_research::sat::IntegerVariableProto **)&v57[v30];
      uint64_t v32 = (operations_research::sat::IntegerVariableProto **)(v30 * 4 + v58 + 8);
      do
      {
        uint64_t v33 = *v32++;
        uint64_t v34 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v28);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v33, v34);
        *v31++ = v34;
        --v29;
      }
      while (v29);
    }
    int v35 = *((_DWORD *)this + 24) + v18;
    *((_DWORD *)this + 24) = v35;
    uint64_t v36 = (int *)*((void *)this + 13);
    if (*v36 < v35) {
      *uint64_t v36 = v35;
    }
  }
  int v37 = *((_DWORD *)a2 + 28);
  if (v37)
  {
    uint64_t v38 = *((int *)this + 28);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 28, v38 + v37);
    uint64_t v39 = *((void *)this + 15);
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
    memcpy((void *)(v39 + 4 * v38), *((const void **)a2 + 15), 4 * *((int *)a2 + 28));
  }
  uint64_t v40 = *((void *)a2 + 17);
  if (*(char *)(v40 + 23) < 0)
  {
    if (!*(void *)(v40 + 8)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(v40 + 23))
  {
LABEL_32:
    double v45 = *((double *)a2 + 18);
    if (v45 == 0.0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v41 = (std::string **)((char *)this + 136);
  uint64_t v42 = *((void *)this + 1);
  uint64_t v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
  if (v42)
  {
    uint64_t v43 = *(google::protobuf::Arena **)v43;
    uint64_t v44 = *v41;
    if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v44 = *v41;
    if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_31:
      std::string::operator=(v44, *((const std::string **)a2 + 17));
      goto LABEL_32;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v41, v43, (long long *)v40);
  double v45 = *((double *)a2 + 18);
  if (v45 != 0.0) {
LABEL_33:
  }
    *((double *)this + 18) = v45;
LABEL_34:
  int v46 = *((_DWORD *)a2 + 38);
  if (v46) {
    *((_DWORD *)this + 38) = v46;
  }
  if (*((unsigned char *)a2 + 156)) {
    *((unsigned char *)this + 156) = 1;
  }
  double v47 = *((double *)a2 + 20);
  if (v47 != 0.0) {
    *((double *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v47;
  }
  uint64_t v48 = *((void *)a2 + 21);
  if (v48) {
    *((void *)this + 21) = v48;
  }
  uint64_t v49 = *((void *)a2 + 22);
  if (v49) {
    *((void *)this + 22) = v49;
  }
  uint64_t v50 = *((void *)a2 + 23);
  if (v50) {
    *((void *)this + 23) = v50;
  }
  uint64_t v51 = *((void *)a2 + 24);
  if (v51) {
    *((void *)this + 24) = v51;
  }
  uint64_t v52 = *((void *)a2 + 25);
  if (v52) {
    *((void *)this + 25) = v52;
  }
  double v53 = *((double *)a2 + 26);
  if (v53 != 0.0) {
    *((double *)this + 26) = v53;
  }
  double v54 = *((double *)a2 + 27);
  if (v54 != 0.0) {
    *((double *)this + 27) = v54;
  }
  double v55 = *((double *)a2 + 28);
  if (v55 != 0.0) {
    *((double *)this + 28) = v55;
  }
  double v56 = *((double *)a2 + 29);
  if (v56 != 0.0) {
    *((double *)this + 29) = v56;
  }
}

void operations_research::sat::CpSolverResponse::CopyFrom(operations_research::sat::CpSolverResponse *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpSolverResponse::Clear(this);
    if (v4)
    {
      operations_research::sat::CpSolverResponse::MergeFrom(this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

void operations_research::sat::CpSolverResponse::CopyFrom(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  if (a2 != this)
  {
    operations_research::sat::CpSolverResponse::Clear(this);
    operations_research::sat::CpSolverResponse::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::CpSolverResponse::IsInitialized(operations_research::sat::CpSolverResponse *this)
{
  return 1;
}

__n128 operations_research::sat::CpSolverResponse::InternalSwap(operations_research::sat::CpSolverResponse *this, operations_research::sat::CpSolverResponse *a2)
{
  int v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)a2 + 1);
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      uint64_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  uint64_t v9 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v7;
  *(void *)uint64_t v7 = v9;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v10;
  uint64_t v11 = *((void *)v8 + 2);
  *((void *)v8 + 2) = *((void *)v7 + 2);
  *((void *)v7 + 2) = v11;
LABEL_8:
  uint64_t v12 = *((void *)this + 2);
  uint64_t v13 = *((void *)this + 3);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((void *)a2 + 2) = v12;
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 5);
  uint64_t v15 = *((void *)this + 6);
  *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *(_OWORD *)((char *)a2 + 40);
  *((void *)a2 + 5) = v14;
  *((void *)a2 + 6) = v15;
  uint64_t v16 = *((void *)this + 8);
  uint64_t v17 = *((void *)this + 9);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((void *)a2 + 8) = v16;
  *((void *)a2 + 9) = v17;
  uint64_t v18 = *((void *)this + 12);
  uint64_t v19 = *((void *)this + 13);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 12) = v18;
  *((void *)a2 + 13) = v19;
  uint64_t v20 = *((void *)this + 14);
  uint64_t v21 = *((void *)this + 15);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((void *)a2 + 14) = v20;
  *((void *)a2 + 15) = v21;
  uint64_t v22 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v22;
  uint64_t v23 = *((void *)this + 18);
  uint64_t v24 = *((void *)this + 19);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((void *)a2 + 18) = v23;
  *((void *)a2 + 19) = v24;
  uint64_t v25 = *((void *)this + 20);
  uint64_t v26 = *((void *)this + 21);
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *((_OWORD *)a2 + 10);
  *((void *)a2 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v25;
  *((void *)a2 + 21) = v26;
  uint64_t v27 = *((void *)this + 22);
  uint64_t v28 = *((void *)this + 23);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((void *)a2 + 22) = v27;
  *((void *)a2 + 23) = v28;
  uint64_t v29 = *((void *)this + 24);
  uint64_t v30 = *((void *)this + 25);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((void *)a2 + 24) = v29;
  *((void *)a2 + 25) = v30;
  uint64_t v31 = *((void *)this + 26);
  uint64_t v32 = *((void *)this + 27);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  *((void *)a2 + 26) = v31;
  *((void *)a2 + 27) = v32;
  uint64_t v33 = *((void *)this + 28);
  uint64_t v34 = *((void *)this + 29);
  __n128 result = *((__n128 *)a2 + 14);
  *((__n128 *)this + 14) = result;
  *((void *)a2 + 28) = v33;
  *((void *)a2 + 29) = v34;
  return result;
}

uint64_t operations_research::sat::CpSolverResponse::GetMetadata(operations_research::sat::CpSolverResponse *this)
{
  return off_26AED01D8[50];
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x38uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE080;
  *(void *)(AlignedNoHook + 8) = this;
  *(_DWORD *)(AlignedNoHook + 16) = 0;
  *(_DWORD *)(AlignedNoHook + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(_DWORD *)(AlignedNoHook + 48) = 0;
  if (atomic_load_explicit(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_23CBF2E78(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x23ECF2BC0](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

void sub_23CBF2EA4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x28uLL);
  }
  *(void *)unint64_t result = &unk_26F0BE130;
  *(void *)(result + 8) = this;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = this;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = (void *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x30uLL);
  }
  *AlignedNoHooint k = &unk_26F0BE1E0;
  AlignedNoHook[1] = this;
  double result = 0.0;
  AlignedNoHook[2] = 0;
  AlignedNoHook[3] = this;
  *(void *)((char *)AlignedNoHook + 36) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x50uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE290;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 72) = 0;
  *(void *)(AlignedNoHook + 64) = 0;
  return result;
}

operations_research::sat::LinearArgumentProto *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = (operations_research::sat::LinearArgumentProto *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x38uLL);
  }
  return operations_research::sat::LinearArgumentProto::LinearArgumentProto(AlignedNoHook, this);
}

void sub_23CBF319C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x28uLL);
  }
  *(void *)unint64_t result = &unk_26F0BE3F0;
  *(void *)(result + 8) = this;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = this;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x58uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE4A0;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(_DWORD *)(AlignedNoHook + 84) = 0;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x30uLL);
  }
  *(void *)unint64_t result = &unk_26F0BE550;
  *(void *)(result + 8) = this;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = this;
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 36) = 0;
  return result;
}

void *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = (void *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x20uLL);
  }
  *unint64_t result = &unk_26F0BE600;
  result[1] = this;
  result[2] = 0;
  result[3] = 0;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t result = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x28uLL);
  }
  *(void *)unint64_t result = &unk_26F0BE6B0;
  *(void *)(result + 8) = this;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = this;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x48uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE760;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 64) = 0;
  *(unsigned char *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = (void *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x48uLL);
  }
  *AlignedNoHooint k = &unk_26F0BE810;
  AlignedNoHook[1] = this;
  double result = 0.0;
  AlignedNoHook[2] = 0;
  AlignedNoHook[3] = this;
  AlignedNoHook[5] = 0;
  AlignedNoHook[6] = this;
  *(void *)((char *)AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x70uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE8C0;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(void *)(AlignedNoHook + 88) = 0;
  *(void *)(AlignedNoHook + 96) = 0;
  *(_DWORD *)(AlignedNoHook + 104) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x58uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BE970;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(_DWORD *)(AlignedNoHook + 84) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x80uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BEA20;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(void *)(AlignedNoHook + 88) = 0;
  *(void *)(AlignedNoHook + 96) = this;
  *(_DWORD *)(AlignedNoHook + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 112) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x40uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BEAD0;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x48uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BEB80;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 64) = 0;
  *(unsigned char *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x40uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BEC30;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x98uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BECE0;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(void *)(AlignedNoHook + 88) = 0;
  *(void *)(AlignedNoHook + 96) = this;
  *(void *)(AlignedNoHook + 112) = 0;
  *(void *)(AlignedNoHook + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = this;
  *(_DWORD *)(AlignedNoHook + 144) = 0;
  *(void *)(AlignedNoHook + 136) = 0;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x40uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BED90;
  *(void *)(AlignedNoHook + 8) = this;
  *(_DWORD *)(AlignedNoHook + 16) = 0;
  *(_DWORD *)(AlignedNoHook + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(_DWORD *)(AlignedNoHook + 56) = 0;
  if (atomic_load_explicit(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return AlignedNoHook;
}

void sub_23CBF3E80(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x23ECF2BC0](v1, 0x10A1C409813F0CCLL);
  _Unwind_Resume(a1);
}

void sub_23CBF3EAC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x70uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BEE40;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(void *)(AlignedNoHook + 64) = 0;
  *(void *)(AlignedNoHook + 72) = this;
  *(void *)(AlignedNoHook + 88) = 0;
  *(void *)(AlignedNoHook + 96) = 0;
  *(_DWORD *)(AlignedNoHook + 104) = 0;
  return result;
}

void *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = (void *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x28uLL);
  }
  *double result = &unk_26F0BEEF0;
  result[1] = this;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x50uLL);
  }
  *(_DWORD *)(AlignedNoHook + 16) = 0;
  *(void *)AlignedNoHooint k = &unk_26F0BEFA0;
  *(void *)(AlignedNoHook + 8) = this;
  *(_DWORD *)(AlignedNoHook + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = this;
  *(void *)(AlignedNoHook + 48) = 0;
  *(void *)(AlignedNoHook + 56) = 0;
  *(_DWORD *)(AlignedNoHook + 72) = 0;
  if (atomic_load_explicit(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  }
  *(void *)(AlignedNoHook + 64) = 0;
  return AlignedNoHook;
}

void sub_23CBF4168(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v3);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40E4523975);
  _Unwind_Resume(a1);
}

void sub_23CBF41A0(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x40uLL);
  }
  *(void *)AlignedNoHooint k = &unk_26F0BF050;
  *(void *)(AlignedNoHook + 8) = this;
  double result = 0.0;
  *(void *)(AlignedNoHook + 16) = 0;
  *(void *)(AlignedNoHook + 24) = this;
  *(void *)(AlignedNoHook + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(AlignedNoHook + 48) = this;
  *(_DWORD *)(AlignedNoHook + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  return result;
}

operations_research::sat::CpModelProto *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = (operations_research::sat::CpModelProto *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x90uLL);
  }
  return operations_research::sat::CpModelProto::CpModelProto(AlignedNoHook, this);
}

void sub_23CBF431C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C402A9E5E58);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedNoHooint k = (operations_research::sat::CpSolverResponse *)google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0xF8uLL);
  }
  return operations_research::sat::CpSolverResponse::CpSolverResponse(AlignedNoHook, this);
}

void sub_23CBF43CC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40DD2F4064);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::IntegerVariableProto::New(operations_research::sat::IntegerVariableProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(0);
}

unint64_t operations_research::sat::IntegerVariableProto::New(operations_research::sat::IntegerVariableProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(a2);
}

uint64_t operations_research::sat::IntegerVariableProto::GetCachedSize(operations_research::sat::IntegerVariableProto *this)
{
  return *((unsigned int *)this + 12);
}

unint64_t operations_research::sat::BoolArgumentProto::New(operations_research::sat::BoolArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(0);
}

unint64_t operations_research::sat::BoolArgumentProto::New(operations_research::sat::BoolArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(a2);
}

uint64_t operations_research::sat::BoolArgumentProto::GetCachedSize(operations_research::sat::BoolArgumentProto *this)
{
  return *((unsigned int *)this + 9);
}

double operations_research::sat::IntegerArgumentProto::New(operations_research::sat::IntegerArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(0);
}

double operations_research::sat::IntegerArgumentProto::New(operations_research::sat::IntegerArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(a2);
}

uint64_t operations_research::sat::IntegerArgumentProto::GetCachedSize(operations_research::sat::IntegerArgumentProto *this)
{
  return *((unsigned int *)this + 10);
}

double operations_research::sat::LinearExpressionProto::New(operations_research::sat::LinearExpressionProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(0);
}

double operations_research::sat::LinearExpressionProto::New(operations_research::sat::LinearExpressionProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(a2);
}

uint64_t operations_research::sat::LinearExpressionProto::GetCachedSize(operations_research::sat::LinearExpressionProto *this)
{
  return *((unsigned int *)this + 18);
}

operations_research::sat::LinearArgumentProto *operations_research::sat::LinearArgumentProto::New(operations_research::sat::LinearArgumentProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(0);
}

operations_research::sat::LinearArgumentProto *operations_research::sat::LinearArgumentProto::New(operations_research::sat::LinearArgumentProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(a2);
}

uint64_t operations_research::sat::LinearArgumentProto::GetCachedSize(operations_research::sat::LinearArgumentProto *this)
{
  return *((unsigned int *)this + 12);
}

unint64_t operations_research::sat::AllDifferentConstraintProto::New(operations_research::sat::AllDifferentConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(0);
}

unint64_t operations_research::sat::AllDifferentConstraintProto::New(operations_research::sat::AllDifferentConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(a2);
}

uint64_t operations_research::sat::AllDifferentConstraintProto::GetCachedSize(operations_research::sat::AllDifferentConstraintProto *this)
{
  return *((unsigned int *)this + 9);
}

double operations_research::sat::LinearConstraintProto::New(operations_research::sat::LinearConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(0);
}

double operations_research::sat::LinearConstraintProto::New(operations_research::sat::LinearConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(a2);
}

uint64_t operations_research::sat::LinearConstraintProto::GetCachedSize(operations_research::sat::LinearConstraintProto *this)
{
  return *((unsigned int *)this + 21);
}

unint64_t operations_research::sat::ElementConstraintProto::New(operations_research::sat::ElementConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(0);
}

unint64_t operations_research::sat::ElementConstraintProto::New(operations_research::sat::ElementConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(a2);
}

uint64_t operations_research::sat::ElementConstraintProto::GetCachedSize(operations_research::sat::ElementConstraintProto *this)
{
  return *((unsigned int *)this + 11);
}

void *operations_research::sat::IntervalConstraintProto::New(operations_research::sat::IntervalConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(0);
}

void *operations_research::sat::IntervalConstraintProto::New(operations_research::sat::IntervalConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(a2);
}

uint64_t operations_research::sat::IntervalConstraintProto::GetCachedSize(operations_research::sat::IntervalConstraintProto *this)
{
  return *((unsigned int *)this + 7);
}

unint64_t operations_research::sat::NoOverlapConstraintProto::New(operations_research::sat::NoOverlapConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(0);
}

unint64_t operations_research::sat::NoOverlapConstraintProto::New(operations_research::sat::NoOverlapConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(a2);
}

uint64_t operations_research::sat::NoOverlapConstraintProto::GetCachedSize(operations_research::sat::NoOverlapConstraintProto *this)
{
  return *((unsigned int *)this + 9);
}

double operations_research::sat::NoOverlap2DConstraintProto::New(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(0);
}

double operations_research::sat::NoOverlap2DConstraintProto::New(operations_research::sat::NoOverlap2DConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(a2);
}

uint64_t operations_research::sat::NoOverlap2DConstraintProto::GetCachedSize(operations_research::sat::NoOverlap2DConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

double operations_research::sat::CumulativeConstraintProto::New(operations_research::sat::CumulativeConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(0);
}

double operations_research::sat::CumulativeConstraintProto::New(operations_research::sat::CumulativeConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(a2);
}

uint64_t operations_research::sat::CumulativeConstraintProto::GetCachedSize(operations_research::sat::CumulativeConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

double operations_research::sat::ReservoirConstraintProto::New(operations_research::sat::ReservoirConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(0);
}

double operations_research::sat::ReservoirConstraintProto::New(operations_research::sat::ReservoirConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ReservoirConstraintProto>(a2);
}

uint64_t operations_research::sat::ReservoirConstraintProto::GetCachedSize(operations_research::sat::ReservoirConstraintProto *this)
{
  return *((unsigned int *)this + 26);
}

double operations_research::sat::CircuitConstraintProto::New(operations_research::sat::CircuitConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(0);
}

double operations_research::sat::CircuitConstraintProto::New(operations_research::sat::CircuitConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(a2);
}

uint64_t operations_research::sat::CircuitConstraintProto::GetCachedSize(operations_research::sat::CircuitConstraintProto *this)
{
  return *((unsigned int *)this + 21);
}

double operations_research::sat::RoutesConstraintProto::New(operations_research::sat::RoutesConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(0);
}

double operations_research::sat::RoutesConstraintProto::New(operations_research::sat::RoutesConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(a2);
}

uint64_t operations_research::sat::RoutesConstraintProto::GetCachedSize(operations_research::sat::RoutesConstraintProto *this)
{
  return *((unsigned int *)this + 30);
}

double operations_research::sat::CircuitCoveringConstraintProto::New(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(0);
}

double operations_research::sat::CircuitCoveringConstraintProto::New(operations_research::sat::CircuitCoveringConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitCoveringConstraintProto>(a2);
}

uint64_t operations_research::sat::CircuitCoveringConstraintProto::GetCachedSize(operations_research::sat::CircuitCoveringConstraintProto *this)
{
  return *((unsigned int *)this + 15);
}

double operations_research::sat::TableConstraintProto::New(operations_research::sat::TableConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(0);
}

double operations_research::sat::TableConstraintProto::New(operations_research::sat::TableConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(a2);
}

uint64_t operations_research::sat::TableConstraintProto::GetCachedSize(operations_research::sat::TableConstraintProto *this)
{
  return *((unsigned int *)this + 16);
}

double operations_research::sat::InverseConstraintProto::New(operations_research::sat::InverseConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(0);
}

double operations_research::sat::InverseConstraintProto::New(operations_research::sat::InverseConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(a2);
}

uint64_t operations_research::sat::InverseConstraintProto::GetCachedSize(operations_research::sat::InverseConstraintProto *this)
{
  return *((unsigned int *)this + 15);
}

double operations_research::sat::AutomatonConstraintProto::New(operations_research::sat::AutomatonConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(0);
}

double operations_research::sat::AutomatonConstraintProto::New(operations_research::sat::AutomatonConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(a2);
}

uint64_t operations_research::sat::AutomatonConstraintProto::GetCachedSize(operations_research::sat::AutomatonConstraintProto *this)
{
  return *((unsigned int *)this + 36);
}

unint64_t operations_research::sat::ConstraintProto::New(operations_research::sat::ConstraintProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(0);
}

unint64_t operations_research::sat::ConstraintProto::New(operations_research::sat::ConstraintProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(a2);
}

uint64_t operations_research::sat::ConstraintProto::GetCachedSize(operations_research::sat::ConstraintProto *this)
{
  return *((unsigned int *)this + 14);
}

double operations_research::sat::CpObjectiveProto::New(operations_research::sat::CpObjectiveProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(0);
}

double operations_research::sat::CpObjectiveProto::New(operations_research::sat::CpObjectiveProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(a2);
}

uint64_t operations_research::sat::CpObjectiveProto::GetCachedSize(operations_research::sat::CpObjectiveProto *this)
{
  return *((unsigned int *)this + 26);
}

void *operations_research::sat::DecisionStrategyProto_AffineTransformation::New(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(0);
}

void *operations_research::sat::DecisionStrategyProto_AffineTransformation::New(operations_research::sat::DecisionStrategyProto_AffineTransformation *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(a2);
}

uint64_t operations_research::sat::DecisionStrategyProto_AffineTransformation::GetCachedSize(operations_research::sat::DecisionStrategyProto_AffineTransformation *this)
{
  return *((unsigned int *)this + 9);
}

unint64_t operations_research::sat::DecisionStrategyProto::New(operations_research::sat::DecisionStrategyProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(0);
}

unint64_t operations_research::sat::DecisionStrategyProto::New(operations_research::sat::DecisionStrategyProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(a2);
}

uint64_t operations_research::sat::DecisionStrategyProto::GetCachedSize(operations_research::sat::DecisionStrategyProto *this)
{
  return *((unsigned int *)this + 18);
}

double operations_research::sat::PartialVariableAssignment::New(operations_research::sat::PartialVariableAssignment *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(0);
}

double operations_research::sat::PartialVariableAssignment::New(operations_research::sat::PartialVariableAssignment *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(a2);
}

uint64_t operations_research::sat::PartialVariableAssignment::GetCachedSize(operations_research::sat::PartialVariableAssignment *this)
{
  return *((unsigned int *)this + 15);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::New(operations_research::sat::CpModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(0);
}

operations_research::sat::CpModelProto *operations_research::sat::CpModelProto::New(operations_research::sat::CpModelProto *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpModelProto>(a2);
}

uint64_t operations_research::sat::CpModelProto::GetCachedSize(operations_research::sat::CpModelProto *this)
{
  return *((unsigned int *)this + 34);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::New(operations_research::sat::CpSolverResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(0);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::New(operations_research::sat::CpSolverResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpSolverResponse>(a2);
}

uint64_t operations_research::sat::CpSolverResponse::GetCachedSize(operations_research::sat::CpSolverResponse *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearExpressionProto>::Merge(operations_research::sat::LinearExpressionProto *a1, operations_research::sat::LinearExpressionProto *this)
{
  return operations_research::sat::LinearExpressionProto::MergeFrom((uint64_t)this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6)
          {
            unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v8 = *(void *)(v6 & 0xFFFFFFFFFFFFFFFELL);
            if (v7 && v8 == 0)
            {
              uint64_t v10 = *(void **)(v7 + 8);
              if (v10 != *(void **)(v7 + 16))
              {
                google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v7 + 8));
                uint64_t v10 = *(void **)(v7 + 8);
              }
              if (v10)
              {
                *(void *)(v7 + 16) = v10;
                operator delete(v10);
              }
              MEMORY[0x23ECF2BC0](v7, 0x20C40DC1BFBCFLL);
            }
          }
          MEMORY[0x23ECF2BC0](v5, 0x1081C40825B58B5);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
  }
  else
  {
    a1[2] = 0;
  }
}

uint64_t google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto_AffineTransformation>::Merge(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6) {
      unint64_t v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v7 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((unint64_t *)(a2 + 8));
    }
    double result = google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v7, v5);
  }
  uint64_t v8 = *(void *)(v3 + 16);
  if (v8) {
    *(void *)(a2 + 16) = v8;
  }
  uint64_t v9 = *(void *)(v3 + 24);
  if (v9) {
    *(void *)(a2 + 24) = v9;
  }
  int v10 = *(_DWORD *)(v3 + 32);
  if (v10) {
    *(_DWORD *)(a2 + 32) = v10;
  }
  return result;
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(operations_research::sat::IntegerVariableProto *a1, operations_research::sat::IntegerVariableProto *this)
{
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::ConstraintProto>::Merge(operations_research::sat::ConstraintProto *a1, operations_research::sat::ConstraintProto *this)
{
}

uint64_t google::protobuf::internal::GenericTypeHandler<operations_research::sat::DecisionStrategyProto>::Merge(operations_research::sat::DecisionStrategyProto *a1, operations_research::sat::DecisionStrategyProto *this)
{
  return operations_research::sat::DecisionStrategyProto::MergeFrom((uint64_t)this, a1);
}

void _GLOBAL__sub_I_cp_model_pb_cc()
{
}

void operations_research::sat::ValidateCpModel(operations_research::sat *this@<X0>, int64_t a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v4 = this;
  unint64_t v5 = a3;
  uint64_t v308 = *MEMORY[0x263EF8340];
  if (*((int *)this + 6) >= 1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(*((void *)v4 + 4) + 8 * v6 + 8);
      int v8 = *(_DWORD *)(v7 + 16);
      if (!v8)
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        uint64_t v23 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v6, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v23 - v305;
        v301 = " has no domain(): ";
        uint64_t v302 = 18;
        google::protobuf::Message::ShortDebugString(&__p);
      }
      if (v8)
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        uint64_t v24 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v6, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v24 - v305;
        v301 = " has an odd domain() size: ";
        uint64_t v302 = 27;
        google::protobuf::Message::ShortDebugString(&__p);
      }
      __s[0] = 0;
      __s[1] = 0;
      *(void *)&long long v292 = 0;
      if (v8 >= 1) {
        break;
      }
      uint64_t v9 = 0;
      uint64_t v12 = 0;
LABEL_35:
      __s[0] = v12;
      BOOL v25 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v12, (v9 - v12) >> 4);
      if (v12) {
LABEL_36:
      }
        operator delete(v12);
LABEL_37:
      if (!v25)
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        uint64_t v31 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v6, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v31 - v305;
        v301 = " has and invalid domain() format: ";
        uint64_t v302 = 34;
        google::protobuf::Message::ShortDebugString(&__p);
      }
      uint64_t v26 = *(int64_t **)(v7 + 24);
      int64_t v27 = *v26;
      int64_t v28 = v26[*(int *)(v7 + 16) - 1];
      if (v27 < (uint64_t)0x8000000000000002 || v28 == 0x7FFFFFFFFFFFFFFFLL)
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        uint64_t v30 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v6, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v30 - v305;
        v301 = " domain do not fall in [kint64min + 2, kint64max - 1]. ";
        uint64_t v302 = 55;
        google::protobuf::Message::ShortDebugString(&__p);
      }
      uint64_t v4 = this;
      if (v27 < 0 && v27 + 0x7FFFFFFFFFFFFFFFLL < v28)
      {
        __s[0] = "var #";
        __s[1] = (std::string::value_type *)5;
        uint64_t v32 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v6, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v32 - v305;
        v301 = " has a domain that is too large, i.e. |UB - LB| overflow an int64: ";
        uint64_t v302 = 67;
        google::protobuf::Message::ShortDebugString(&__p);
      }
      *(unsigned char *)(v5 + 23) = 0;
      *(unsigned char *)unint64_t v5 = 0;
      if (++v6 >= *((int *)this + 6)) {
        goto LABEL_49;
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(v7 + 24);
        uint64_t v14 = *(void *)(v13 + 8 * v10);
        uint64_t v15 = *(void *)(v13 + ((8 * v10) | 8));
        if (v14 > v15)
        {
          BOOL v25 = 0;
          unint64_t v5 = a3;
          if (v12) {
            goto LABEL_36;
          }
          goto LABEL_37;
        }
        if (v9 >= v11) {
          break;
        }
        *(void *)uint64_t v9 = v14;
        *((void *)v9 + 1) = v15;
        v9 += 16;
        v10 += 2;
        if (*(_DWORD *)(v7 + 16) <= (int)v10) {
          goto LABEL_34;
        }
      }
      uint64_t v16 = (v9 - v12) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
      {
        __s[1] = v9;
        *(void *)&long long v292 = v11;
        __s[0] = v12;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v11 - v12) >> 3 > v17) {
        unint64_t v17 = (v11 - v12) >> 3;
      }
      if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 60)
        {
          *(void *)&long long v292 = v11;
          __s[0] = v12;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(16 * v18);
        uint64_t v20 = &v19[16 * v16];
        *(void *)uint64_t v20 = v14;
        *((void *)v20 + 1) = v15;
        if (v9 == v12)
        {
LABEL_27:
          uint64_t v22 = v20;
          uint64_t v11 = &v19[16 * v18];
          uint64_t v9 = v20 + 16;
          if (!v12) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = (char *)(16 * v16);
        *(void *)uint64_t v20 = v14;
        *((void *)v20 + 1) = v15;
        if (v9 == v12) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v20;
      do
      {
        uint64_t v22 = v21 - 16;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v9 - 1);
        v9 -= 16;
        v21 -= 16;
      }
      while (v9 != v12);
      uint64_t v11 = &v19[16 * v18];
      uint64_t v9 = v20 + 16;
      if (!v12) {
        goto LABEL_24;
      }
LABEL_23:
      operator delete(v12);
LABEL_24:
      uint64_t v12 = v22;
      v10 += 2;
      if (*(_DWORD *)(v7 + 16) <= (int)v10)
      {
LABEL_34:
        __s[1] = v9;
        *(void *)&long long v292 = v11;
        unint64_t v5 = a3;
        goto LABEL_35;
      }
    }
  }
LABEL_49:
  if (*((int *)v4 + 12) < 1) {
    goto LABEL_328;
  }
  uint64_t v33 = 0;
  uint64_t v34 = (char *)&v303;
  while (2)
  {
    uint64_t v35 = *(void *)(*((void *)v4 + 7) + 8 * v33 + 8);
    operations_research::sat::GetReferencesUsedByConstraint((operations_research::sat *)v35, (uint64_t)&v304);
    int v37 = (unsigned int *)v304;
    if ((void)v304 != *((void *)&v304 + 1))
    {
      int v38 = *((_DWORD *)v4 + 6);
      do
      {
        uint64_t v39 = (absl::lts_2020_02_25::numbers_internal *)*v37;
        if (v38 <= (int)v39 || (int)v39 < -v38)
        {
          unsigned int v60 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v39, v34, v36);
          v301 = v34;
          uint64_t v302 = v60 - v34;
          BOOL v62 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v300, v61);
          v299[0] = v300;
          v299[1] = (void *)(v62 - v300);
          google::protobuf::Message::ShortDebugString(&__p);
        }
        ++v37;
      }
      while (v37 != *((unsigned int **)&v304 + 1));
    }
    uint64_t v41 = *(int *)(v35 + 16);
    if (v41)
    {
      uint64_t v42 = *(int **)(v35 + 24);
      int v43 = *((_DWORD *)v4 + 6);
      uint64_t v44 = 4 * v41;
      do
      {
        double v45 = (absl::lts_2020_02_25::numbers_internal *)*v42;
        BOOL v46 = v43 <= (int)v45 || (int)v45 < -v43;
        if (v46
          || (~v45 <= (int)v45 ? (int v47 = *v42) : (int v47 = ~v45),
              (uint64_t v48 = *(void *)(*((void *)v4 + 4) + 8 * v47 + 8),
               uint64_t v49 = *(void **)(v48 + 24),
               (*v49 & 0x8000000000000000) != 0)
           || (uint64_t)v49[*(int *)(v48 + 16) - 1] >= 2))
        {
          unint64_t v63 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v45, v34, v36);
          v301 = v34;
          uint64_t v302 = v63 - v34;
          unint64_t v65 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v300, v64);
          v299[0] = v300;
          v299[1] = (void *)(v65 - v300);
          google::protobuf::Message::ShortDebugString(&__p);
        }
        ++v42;
        v44 -= 4;
      }
      while (v44);
    }
    uint64_t v50 = v306;
    if (v306 != v307)
    {
      int v51 = *((_DWORD *)v4 + 6);
      do
      {
        uint64_t v52 = (absl::lts_2020_02_25::numbers_internal *)*v50;
        BOOL v53 = v51 <= (int)v52 || (int)v52 < -v51;
        if (v53
          || (~v52 <= (int)v52 ? (int v54 = *v50) : (int v54 = ~v52),
              (uint64_t v55 = *(void *)(*((void *)v4 + 4) + 8 * v54 + 8),
               double v56 = *(void **)(v55 + 24),
               (*v56 & 0x8000000000000000) != 0)
           || (uint64_t)v56[*(int *)(v55 + 16) - 1] >= 2))
        {
          unint64_t v66 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v52, v34, v36);
          v301 = v34;
          uint64_t v302 = v66 - v34;
          unint64_t v68 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v300, v67);
          v299[0] = v300;
          v299[1] = (void *)(v68 - v300);
          google::protobuf::Message::ShortDebugString(&__p);
        }
        ++v50;
      }
      while (v50 != v307);
    }
    operations_research::sat::UsedIntervals((operations_research::sat *)v35, (unint64_t *)&__p);
    if (__p != v290)
    {
      uint64_t v58 = (unsigned int *)__p;
      do
      {
        uint64_t v59 = *v58;
        if ((v59 & 0x80000000) != 0 || (int)v59 >= *((_DWORD *)v4 + 12))
        {
          uint64_t v104 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*v58, v34, (char *)a2);
          v301 = v34;
          uint64_t v302 = v104 - v34;
          uint64_t v106 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v300, v105);
          v299[0] = v300;
          v299[1] = (void *)(v106 - v300);
          google::protobuf::Message::ShortDebugString(&v288);
        }
        if (*(_DWORD *)(*(void *)(*((void *)v4 + 7) + 8 * v59 + 8) + 60) != 19)
        {
          uint64_t v107 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*v58, v34, (char *)a2);
          v301 = v34;
          uint64_t v302 = v107 - v34;
          uint64_t v109 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v300, v108);
          v299[0] = v300;
          v299[1] = (void *)(v109 - v300);
          google::protobuf::Message::ShortDebugString(&v288);
        }
        ++v58;
      }
      while (v58 != v290);
    }
    if (__p)
    {
      v290 = (unsigned int *)__p;
      operator delete(__p);
    }
    *(unsigned char *)(v5 + 23) = 0;
    *(unsigned char *)unint64_t v5 = 0;
    if (v306)
    {
      v307 = v306;
      operator delete(v306);
    }
    if ((void)v304)
    {
      *((void *)&v304 + 1) = v304;
      operator delete((void *)v304);
    }
    if (*(char *)(v5 + 23) < 0)
    {
      if (*(void *)(v5 + 8)) {
        return;
      }
      operator delete(*(void **)v5);
    }
    else if (*(unsigned char *)(v5 + 23))
    {
      return;
    }
    uint64_t v69 = *(void *)(*((void *)v4 + 7) + 8 * v33 + 8);
    switch(*(_DWORD *)(v69 + 60))
    {
      case 3:
      case 4:
        goto LABEL_52;
      case 7:
        if (*(_DWORD *)(*(void *)(v69 + 48) + 16) != 2)
        {
          __s[0] = "An int_div constraint should have exactly 2 terms: ";
          __s[1] = (std::string::value_type *)51;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        goto LABEL_194;
      case 8:
        uint64_t v102 = *(void *)(v69 + 48);
        if (*(_DWORD *)(v102 + 16) != 2)
        {
          __s[0] = "An int_mod constraint should have exactly 2 terms: ";
          __s[1] = (std::string::value_type *)51;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        if (**(uint64_t **)(*(void *)(*((void *)v4 + 4) + 8 * *(int *)(*(void *)(v102 + 24) + 4) + 8) + 24) <= 0)
        {
          __s[0] = "An int_mod must have a strictly positive modulo argument: ";
          __s[1] = (std::string::value_type *)58;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        goto LABEL_168;
      case 0xC:
        uint64_t v78 = *(void *)(v69 + 48);
        int v79 = *(_DWORD *)(v78 + 64);
        if (v79) {
          goto LABEL_517;
        }
        __s[0] = 0;
        __s[1] = 0;
        *(void *)&long long v292 = 0;
        if (v79 < 1)
        {
          unsigned int v80 = 0;
          unint64_t v83 = 0;
          goto LABEL_218;
        }
        v282 = v34;
        v283 = (absl::lts_2020_02_25::numbers_internal *)v33;
        v286 = v4;
        unsigned int v80 = 0;
        uint64_t v81 = 0;
        unint64_t v82 = 0;
        unint64_t v83 = 0;
        do
        {
          while (1)
          {
            uint64_t v84 = *(void *)(v78 + 72);
            uint64_t v85 = *(void *)(v84 + 8 * v81);
            uint64_t v86 = *(void *)(v84 + ((8 * v81) | 8));
            if (v85 > v86)
            {
              BOOL v126 = 0;
              __s[1] = v80;
              uint64_t v4 = v286;
              uint64_t v34 = v282;
              uint64_t v33 = (uint64_t)v283;
              goto LABEL_219;
            }
            if (v80 >= v82) {
              break;
            }
            *(void *)unsigned int v80 = v85;
            *((void *)v80 + 1) = v86;
            v80 += 16;
            v81 += 2;
            if (*(_DWORD *)(v78 + 64) <= (int)v81) {
              goto LABEL_217;
            }
          }
          uint64_t v87 = (v80 - v83) >> 4;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 60)
          {
            __s[1] = v80;
            *(void *)&long long v292 = v82;
            __s[0] = v83;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v82 - v83) >> 3 > v88) {
            unint64_t v88 = (v82 - v83) >> 3;
          }
          if ((unint64_t)(v82 - v83) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v88;
          }
          if (v89)
          {
            if (v89 >> 60)
            {
              *(void *)&long long v292 = v82;
              __s[0] = v83;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v90 = (char *)operator new(16 * v89);
            unint64_t v91 = &v90[16 * v87];
            *(void *)unint64_t v91 = v85;
            *((void *)v91 + 1) = v86;
            if (v80 == v83)
            {
LABEL_151:
              unint64_t v93 = v91;
              unint64_t v82 = &v90[16 * v89];
              unsigned int v80 = v91 + 16;
              if (v83) {
                goto LABEL_147;
              }
              goto LABEL_148;
            }
          }
          else
          {
            unint64_t v90 = 0;
            unint64_t v91 = (char *)(16 * v87);
            *(void *)unint64_t v91 = v85;
            *((void *)v91 + 1) = v86;
            if (v80 == v83) {
              goto LABEL_151;
            }
          }
          unint64_t v92 = v91;
          do
          {
            unint64_t v93 = v92 - 16;
            *((_OWORD *)v92 - 1) = *((_OWORD *)v80 - 1);
            v80 -= 16;
            v92 -= 16;
          }
          while (v80 != v83);
          unint64_t v82 = &v90[16 * v89];
          unsigned int v80 = v91 + 16;
          if (v83) {
LABEL_147:
          }
            operator delete(v83);
LABEL_148:
          unint64_t v83 = v93;
          v81 += 2;
        }
        while (*(_DWORD *)(v78 + 64) > (int)v81);
LABEL_217:
        __s[1] = v80;
        *(void *)&long long v292 = v82;
        uint64_t v4 = v286;
        uint64_t v34 = v282;
        uint64_t v33 = (uint64_t)v283;
LABEL_218:
        __s[0] = v83;
        BOOL v126 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v83, (v80 - v83) >> 4);
LABEL_219:
        if (v83) {
          operator delete(v83);
        }
        if (!v126)
        {
LABEL_517:
          __s[0] = "Invalid domain in constraint #";
          __s[1] = (std::string::value_type *)30;
          v279 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v305, (char *)a2);
          *(void *)&long long v304 = v305;
          *((void *)&v304 + 1) = v279 - v305;
          v301 = " : ";
          uint64_t v302 = 3;
          google::protobuf::Message::ShortDebugString(&__p);
        }
        int v127 = *(_DWORD *)(v69 + 60);
        uint64_t v128 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (v127 == 12) {
          uint64_t v128 = *(uint64_t **)(v69 + 48);
        }
        unint64_t v5 = a3;
        if (*((_DWORD *)v128 + 10) != *((_DWORD *)v128 + 4))
        {
          __s[0] = "coeffs_size() != vars_size() in constraint #";
          __s[1] = (std::string::value_type *)44;
          v281 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v305, (char *)a2);
          *(void *)&long long v304 = v305;
          *((void *)&v304 + 1) = v281 - v305;
          v301 = " : ";
          uint64_t v302 = 3;
          google::protobuf::Message::ShortDebugString(&__p);
        }
        if (v127 == 12) {
          uint64_t v129 = *(uint64_t **)(v69 + 48);
        }
        else {
          uint64_t v129 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        }
        unint64_t v130 = *((unsigned int *)v129 + 4);
        if ((int)v130 >= 1)
        {
          uint64_t v131 = 0;
          unint64_t v132 = 0;
          unint64_t v133 = 0;
          uint64_t v134 = v129[3];
          BOOL v135 = 1;
          uint64_t v136 = v129[6];
          do
          {
            int v137 = *(_DWORD *)(v134 + 4 * v131);
            if (~v137 <= v137) {
              int v138 = *(_DWORD *)(v134 + 4 * v131);
            }
            else {
              int v138 = ~v137;
            }
            uint64_t v139 = *(void *)(*((void *)v4 + 4) + 8 * v138 + 8);
            uint64_t v140 = *(uint64_t **)(v139 + 24);
            uint64_t v141 = *v140;
            if (*v140 >= 0) {
              unint64_t v142 = *v140;
            }
            else {
              unint64_t v142 = -v141;
            }
            int v143 = 63 - __clz(v142);
            uint64_t v144 = *(void *)(v136 + 8 * v131);
            if (v141) {
              int v145 = v143;
            }
            else {
              int v145 = 0;
            }
            if (v137 >= 0) {
              uint64_t v146 = *(void *)(v136 + 8 * v131);
            }
            else {
              uint64_t v146 = -v144;
            }
            if (v144 >= 0) {
              unint64_t v147 = *(void *)(v136 + 8 * v131);
            }
            else {
              unint64_t v147 = -v144;
            }
            int v148 = 63 - __clz(v147);
            if (!v146) {
              int v148 = 0;
            }
            int v149 = v148 + v145;
            if (v149 > 61)
            {
              if (v141) {
                BOOL v151 = v146 == 0;
              }
              else {
                BOOL v151 = 1;
              }
              if (v151)
              {
                uint64_t v150 = 0;
              }
              else
              {
                uint64_t v150 = ((v146 ^ (unint64_t)v141) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v152 = v147 * v142;
                if (v149 <= 0x3E && v152 < v150)
                {
                  if (v150 >= 0) {
                    uint64_t v150 = v152;
                  }
                  else {
                    uint64_t v150 = -(uint64_t)v152;
                  }
                }
              }
            }
            else
            {
              uint64_t v150 = v146 * v141;
            }
            uint64_t v154 = &v140[*(int *)(v139 + 16)];
            uint64_t v155 = *(v154 - 1);
            if (v155 >= 0) {
              unint64_t v156 = *(v154 - 1);
            }
            else {
              unint64_t v156 = -v155;
            }
            int v157 = 63 - __clz(v156);
            if (!v155) {
              int v157 = 0;
            }
            int v158 = v148 + v157;
            if (v158 > 61)
            {
              if (v155) {
                BOOL v160 = v146 == 0;
              }
              else {
                BOOL v160 = 1;
              }
              if (v160)
              {
                uint64_t v159 = 0;
              }
              else
              {
                uint64_t v159 = ((v146 ^ (unint64_t)v155) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v161 = v147 * v156;
                if (v158 <= 0x3E && v161 < v159)
                {
                  if (v159 >= 0) {
                    uint64_t v159 = v161;
                  }
                  else {
                    uint64_t v159 = -(uint64_t)v161;
                  }
                }
              }
            }
            else
            {
              uint64_t v159 = v146 * v155;
            }
            if (v159 >= v150) {
              uint64_t v163 = v150;
            }
            else {
              uint64_t v163 = v159;
            }
            uint64_t v164 = v163 & (v163 >> 63);
            unint64_t v165 = v164 + v132;
            a2 = (v164 + v132) ^ v132;
            unint64_t v166 = (v164 + v132) ^ v164;
            unint64_t v132 = (v132 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if (((a2 & v166 & 0x8000000000000000) != 0) == __OFSUB__(v159, v150)) {
              unint64_t v132 = v165;
            }
            if (v150 <= v159) {
              uint64_t v167 = v159;
            }
            else {
              uint64_t v167 = v150;
            }
            unint64_t v168 = (v167 & ~(v167 >> 63)) + v133;
            if (((v168 & ~v133 & 0x8000000000000000) != 0) != __OFSUB__(v150, v159)) {
              unint64_t v133 = (v133 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v133 = v168;
            }
            if ((unint64_t)(v150 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            if ((unint64_t)(v159 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            if (v132 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            if (v133 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
              break;
            }
            BOOL v135 = ++v131 < v130;
          }
          while (v130 != v131);
          if (v135) {
            google::protobuf::Message::DebugString(__s);
          }
        }
LABEL_51:
        *(unsigned char *)(v5 + 23) = 0;
        *(unsigned char *)unint64_t v5 = 0;
LABEL_52:
        if (++v33 < *((int *)v4 + 12)) {
          continue;
        }
LABEL_328:
        uint64_t v180 = *((void *)v4 + 15);
        if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_ || v180 == 0)
        {
LABEL_333:
          uint64_t v182 = *((void *)v4 + 10);
          if (v182) {
            v183 = (uint64_t *)(v182 + 8);
          }
          else {
            v183 = 0;
          }
          uint64_t v184 = *((int *)v4 + 18);
          if (v184)
          {
            v185 = &v183[v184];
            int v186 = *((_DWORD *)v4 + 6);
            int v187 = -v186;
            do
            {
              uint64_t v188 = *v183;
              uint64_t v189 = *(int *)(*v183 + 16);
              if (v189)
              {
                v190 = *(int **)(v188 + 24);
                uint64_t v191 = 4 * v189;
                do
                {
                  if (v186 <= *v190 || *v190 < v187)
                  {
                    __s[0] = "Invalid variable reference in strategy: ";
                    __s[1] = (std::string::value_type *)40;
                    google::protobuf::Message::ShortDebugString(&v301);
                  }
                  ++v190;
                  v191 -= 4;
                }
                while (v191);
              }
              uint64_t v193 = *(void *)(v188 + 56);
              if (v193) {
                uint64_t v194 = v193 + 8;
              }
              else {
                uint64_t v194 = 0;
              }
              uint64_t v195 = *(int *)(v188 + 48);
              if (v195)
              {
                uint64_t v196 = 8 * v195;
                do
                {
                  if (*(uint64_t *)(*(void *)v194 + 24) <= 0)
                  {
                    __s[0] = "Affine transformation coeff should be positive: ";
                    __s[1] = (std::string::value_type *)48;
                    google::protobuf::Message::ShortDebugString(&v301);
                  }
                  int v197 = *(_DWORD *)(*(void *)v194 + 32);
                  if (v186 <= v197 || v197 < v187)
                  {
                    __s[0] = "Invalid variable reference in affine transformation: ";
                    __s[1] = (std::string::value_type *)53;
                    google::protobuf::Message::ShortDebugString(&v301);
                  }
                  v194 += 8;
                  v196 -= 8;
                }
                while (v196);
              }
              ++v183;
            }
            while (v183 != v185);
          }
          *(unsigned char *)(v5 + 23) = 0;
          *(unsigned char *)unint64_t v5 = 0;
          if (*(char *)(v5 + 23) < 0)
          {
            if (*(void *)(v5 + 8)) {
              return;
            }
            operator delete(*(void **)v5);
            if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_) {
              goto LABEL_400;
            }
          }
          else
          {
            if (*(unsigned char *)(v5 + 23)) {
              return;
            }
            if (v4 == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_) {
              goto LABEL_400;
            }
          }
          uint64_t v214 = *((void *)v4 + 16);
          if (v214)
          {
            uint64_t v215 = *(int *)(v214 + 16);
            if (v215 != *(_DWORD *)(v214 + 40))
            {
              v276 = (char *)operator new(0x48uLL);
              *(void *)unint64_t v5 = v276;
              *(_OWORD *)(v5 + 8) = xmmword_23CE834C0;
              strcpy(v276, "Invalid solution hint: vars and values do not have the same size.");
LABEL_509:
              if (*(void *)(v5 + 8)) {
                return;
              }
              operator delete(*(void **)v5);
              goto LABEL_401;
            }
            if (v215)
            {
              v216 = *(unsigned int **)(v214 + 24);
              int v217 = *((_DWORD *)v4 + 6);
              uint64_t v218 = 4 * v215;
              while (1)
              {
                v219 = (absl::lts_2020_02_25::numbers_internal *)*v216;
                if (v217 <= (int)v219 || (int)v219 < -v217) {
                  break;
                }
                ++v216;
                v218 -= 4;
                if (!v218) {
                  goto LABEL_400;
                }
              }
              __s[0] = "Invalid variable reference in solution hint: ";
              __s[1] = (std::string::value_type *)45;
              v277 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v219, v305, (char *)a2);
              *(void *)&long long v304 = v305;
              *((void *)&v304 + 1) = v277 - v305;
              absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v304, (std::string *)v5);
              if ((*(char *)(v5 + 23) & 0x80000000) == 0)
              {
                if (*(unsigned char *)(v5 + 23)) {
                  return;
                }
                goto LABEL_401;
              }
              goto LABEL_509;
            }
          }
LABEL_400:
          *(unsigned char *)(v5 + 23) = 0;
          *(unsigned char *)unint64_t v5 = 0;
LABEL_401:
          uint64_t v221 = *((int *)v4 + 22);
          if (v221)
          {
            v222 = (int *)*((void *)v4 + 12);
            int v223 = *((_DWORD *)v4 + 6);
            uint64_t v224 = 4 * v221;
            while (1)
            {
              v225 = (absl::lts_2020_02_25::numbers_internal *)*v222;
              if (v223 <= (int)v225 || (int)v225 < -v223) {
                break;
              }
              int v227 = ~v225 <= (int)v225 ? *v222 : ~v225;
              uint64_t v228 = *(void *)(*((void *)v4 + 4) + 8 * v227 + 8);
              v229 = *(void **)(v228 + 24);
              if ((*v229 & 0x8000000000000000) != 0 || (uint64_t)v229[*(int *)(v228 + 16) - 1] >= 2) {
                break;
              }
              ++v222;
              v224 -= 4;
              if (!v224) {
                goto LABEL_413;
              }
            }
            __s[0] = "Invalid literal reference ";
            __s[1] = (std::string::value_type *)26;
            v230 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v225, v305, (char *)a2);
            *(void *)&long long v304 = v305;
            *((void *)&v304 + 1) = v230 - v305;
            v301 = " in the 'assumptions' field.";
            uint64_t v302 = 28;
            absl::lts_2020_02_25::StrCat((uint64_t)__s, (uint64_t)&v304, (uint64_t)&v301, (std::string *)v5);
          }
          else
          {
LABEL_413:
            *(unsigned char *)(v5 + 23) = 0;
            *(unsigned char *)unint64_t v5 = 0;
          }
          return;
        }
        int v199 = *(_DWORD *)(v180 + 64);
        if (v199) {
          goto LABEL_502;
        }
        __s[0] = 0;
        __s[1] = 0;
        *(void *)&long long v292 = 0;
        if (v199 >= 1)
        {
          v287 = v4;
          v200 = 0;
          uint64_t v201 = 0;
          v202 = 0;
          v203 = 0;
          while (1)
          {
            while (1)
            {
              uint64_t v204 = *(void *)(v180 + 72);
              uint64_t v205 = *(void *)(v204 + 8 * v201);
              uint64_t v206 = *(void *)(v204 + ((8 * v201) | 8));
              if (v205 > v206)
              {
                BOOL v231 = 0;
                unint64_t v5 = a3;
                uint64_t v4 = v287;
                goto LABEL_419;
              }
              if (v200 >= v202) {
                break;
              }
              *(void *)v200 = v205;
              *((void *)v200 + 1) = v206;
              v200 += 16;
              v201 += 2;
              if (*(_DWORD *)(v180 + 64) <= (int)v201) {
                goto LABEL_417;
              }
            }
            uint64_t v207 = (v200 - v203) >> 4;
            unint64_t v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 60)
            {
              __s[1] = v200;
              *(void *)&long long v292 = v202;
              __s[0] = v203;
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if ((v202 - v203) >> 3 > v208) {
              unint64_t v208 = (v202 - v203) >> 3;
            }
            if ((unint64_t)(v202 - v203) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v209 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v209 = v208;
            }
            if (v209)
            {
              if (v209 >> 60)
              {
                *(void *)&long long v292 = v202;
                __s[0] = v203;
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v210 = (char *)operator new(16 * v209);
              v211 = &v210[16 * v207];
              *(void *)v211 = v205;
              *((void *)v211 + 1) = v206;
              if (v200 == v203)
              {
LABEL_380:
                v213 = v211;
                v202 = &v210[16 * v209];
                v200 = v211 + 16;
                if (!v203) {
                  goto LABEL_377;
                }
                goto LABEL_376;
              }
            }
            else
            {
              v210 = 0;
              v211 = (char *)(16 * v207);
              *(void *)v211 = v205;
              *((void *)v211 + 1) = v206;
              if (v200 == v203) {
                goto LABEL_380;
              }
            }
            v212 = v211;
            do
            {
              v213 = v212 - 16;
              *((_OWORD *)v212 - 1) = *((_OWORD *)v200 - 1);
              v200 -= 16;
              v212 -= 16;
            }
            while (v200 != v203);
            v202 = &v210[16 * v209];
            v200 = v211 + 16;
            if (!v203) {
              goto LABEL_377;
            }
LABEL_376:
            operator delete(v203);
LABEL_377:
            v203 = v213;
            v201 += 2;
            if (*(_DWORD *)(v180 + 64) <= (int)v201)
            {
LABEL_417:
              __s[1] = v200;
              *(void *)&long long v292 = v202;
              unint64_t v5 = a3;
              uint64_t v4 = v287;
              goto LABEL_418;
            }
          }
        }
        v200 = 0;
        v203 = 0;
LABEL_418:
        __s[0] = v203;
        BOOL v231 = operations_research::IntervalsAreSortedAndNonAdjacent((uint64_t *)v203, (v200 - v203) >> 4);
LABEL_419:
        if (v203) {
          operator delete(v203);
        }
        if (!v231)
        {
LABEL_502:
          __s[0] = "The objective has and invalid domain() format: ";
          __s[1] = (std::string::value_type *)47;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        uint64_t v232 = *(int *)(v180 + 16);
        if (v232 != *(_DWORD *)(v180 + 40))
        {
          __s[0] = "vars and coeffs size do not match in objective: ";
          __s[1] = (std::string::value_type *)48;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        if (v232)
        {
          int v233 = *((_DWORD *)v4 + 6);
          uint64_t v234 = 4 * v232;
          v235 = *(unsigned int **)(v180 + 24);
          do
          {
            v236 = (absl::lts_2020_02_25::numbers_internal *)*v235;
            if (v233 <= (int)v236 || (int)v236 < -v233)
            {
              __s[0] = "Out of bound integer variable ";
              __s[1] = (std::string::value_type *)30;
              v278 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v236, v305, (char *)a2);
              *(void *)&long long v304 = v305;
              *((void *)&v304 + 1) = v278 - v305;
              v301 = " in objective: ";
              uint64_t v302 = 15;
              google::protobuf::Message::ShortDebugString(&__p);
            }
            ++v235;
            v234 -= 4;
          }
          while (v234);
          if ((int)v232 >= 1)
          {
            uint64_t v238 = 0;
            unint64_t v239 = 0;
            unint64_t v240 = 0;
            unint64_t v242 = *(unsigned int *)(v180 + 16);
            BOOL v243 = 1;
            do
            {
              int v244 = *(_DWORD *)(*(void *)(v180 + 24) + 4 * v238);
              if (~v244 <= v244) {
                int v245 = *(_DWORD *)(*(void *)(v180 + 24) + 4 * v238);
              }
              else {
                int v245 = ~v244;
              }
              uint64_t v246 = *(void *)(*((void *)v4 + 4) + 8 * v245 + 8);
              v247 = *(uint64_t **)(v246 + 24);
              uint64_t v248 = *v247;
              if (*v247 >= 0) {
                unint64_t v249 = *v247;
              }
              else {
                unint64_t v249 = -v248;
              }
              int v250 = 63 - __clz(v249);
              uint64_t v241 = *(void *)(v180 + 48);
              uint64_t v251 = *(void *)(v241 + 8 * v238);
              if (v248) {
                int v252 = v250;
              }
              else {
                int v252 = 0;
              }
              if (v244 >= 0) {
                uint64_t v253 = *(void *)(v241 + 8 * v238);
              }
              else {
                uint64_t v253 = -v251;
              }
              if (v251 >= 0) {
                unint64_t v254 = *(void *)(v241 + 8 * v238);
              }
              else {
                unint64_t v254 = -v251;
              }
              int v255 = 63 - __clz(v254);
              if (!v253) {
                int v255 = 0;
              }
              int v256 = v255 + v252;
              if (v256 > 61)
              {
                if (v248) {
                  BOOL v258 = v253 == 0;
                }
                else {
                  BOOL v258 = 1;
                }
                if (v258)
                {
                  uint64_t v257 = 0;
                }
                else
                {
                  uint64_t v257 = ((v253 ^ (unint64_t)v248) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                  unint64_t v259 = v254 * v249;
                  if (v256 <= 0x3E && v259 < v257)
                  {
                    if (v257 >= 0) {
                      uint64_t v257 = v259;
                    }
                    else {
                      uint64_t v257 = -(uint64_t)v259;
                    }
                  }
                }
              }
              else
              {
                uint64_t v257 = v253 * v248;
              }
              v261 = &v247[*(int *)(v246 + 16)];
              uint64_t v262 = *(v261 - 1);
              if (v262 >= 0) {
                unint64_t v263 = *(v261 - 1);
              }
              else {
                unint64_t v263 = -v262;
              }
              int v264 = 63 - __clz(v263);
              if (!v262) {
                int v264 = 0;
              }
              int v265 = v255 + v264;
              if (v265 > 61)
              {
                if (v262) {
                  BOOL v266 = v253 == 0;
                }
                else {
                  BOOL v266 = 1;
                }
                if (v266)
                {
                  a2 = 0;
                }
                else
                {
                  a2 = ((v253 ^ (unint64_t)v262) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                  unint64_t v267 = v254 * v263;
                  if (v265 <= 0x3E && v267 < a2)
                  {
                    if (a2 >= 0) {
                      a2 = v267;
                    }
                    else {
                      a2 = -(uint64_t)v267;
                    }
                  }
                }
              }
              else
              {
                a2 = v253 * v262;
              }
              if (a2 >= v257) {
                uint64_t v269 = v257;
              }
              else {
                uint64_t v269 = a2;
              }
              uint64_t v270 = v269 & (v269 >> 63);
              unint64_t v271 = v270 + v239;
              unint64_t v272 = (v270 + v239) ^ v239;
              unint64_t v273 = (v270 + v239) ^ v270;
              unint64_t v239 = (v239 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              if (((v272 & v273 & 0x8000000000000000) != 0) == __OFSUB__(a2, v257)) {
                unint64_t v239 = v271;
              }
              if (v257 <= a2) {
                uint64_t v274 = a2;
              }
              else {
                uint64_t v274 = v257;
              }
              unint64_t v275 = (v274 & ~(v274 >> 63)) + v240;
              if (((v275 & ~v240 & 0x8000000000000000) != 0) != __OFSUB__(v257, a2)) {
                unint64_t v240 = (v240 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v240 = v275;
              }
              if ((unint64_t)(v257 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
                break;
              }
              if ((unint64_t)(a2 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
                break;
              }
              if (v239 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
                break;
              }
              if (v240 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
                break;
              }
              BOOL v243 = ++v238 < v242;
            }
            while (v242 != v238);
            if (v243) {
              google::protobuf::Message::DebugString(__s);
            }
          }
        }
        *(unsigned char *)(v5 + 23) = 0;
        *(unsigned char *)unint64_t v5 = 0;
        if (*(char *)(v5 + 23) < 0)
        {
          if (!*(void *)(v5 + 8))
          {
            operator delete(*(void **)v5);
            goto LABEL_333;
          }
        }
        else if (!*(unsigned char *)(v5 + 23))
        {
          goto LABEL_333;
        }
        return;
      case 0xF:
        unint64_t v76 = *(_DWORD **)(v69 + 48);
        int v77 = v76[4];
        if (v76[10] != v77 || v76[16] != v77)
        {
          __s[0] = "Wrong field sizes in circuit: ";
          __s[1] = (std::string::value_type *)30;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        goto LABEL_168;
      case 0x12:
        if (*(_DWORD *)(*(void *)(v69 + 48) + 16) != *(_DWORD *)(*(void *)(v69 + 48) + 40))
        {
          __s[0] = "Non-matching fields size in inverse: ";
          __s[1] = (std::string::value_type *)37;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        goto LABEL_194;
      case 0x13:
        uint64_t v73 = *((void *)v4 + 4);
        uint64_t v74 = *(unsigned int *)(*(void *)(v69 + 48) + 24);
        if ((v74 & 0x80000000) != 0)
        {
          uint64_t v110 = *(void *)(v73 + 8 * ~v74 + 8);
          if (*(uint64_t *)(*(void *)(v110 + 24) + 8 * *(int *)(v110 + 16) - 8) >= 1)
          {
            __s[0] = "Negative value in interval size domain: ";
            __s[1] = (std::string::value_type *)40;
            google::protobuf::Message::DebugString(&__p);
          }
        }
        else if ((**(void **)(*(void *)(v73 + 8 * v74 + 8) + 24) & 0x8000000000000000) != 0)
        {
          __s[0] = "Negative value in interval size domain: ";
          __s[1] = (std::string::value_type *)40;
          google::protobuf::Message::DebugString(&__p);
        }
        goto LABEL_51;
      case 0x16:
        if (*(_DWORD *)(*(void *)(v69 + 48) + 16) != *(_DWORD *)(*(void *)(v69 + 48) + 40))
        {
          __s[0] = "intervals_size() != demands_size() in constraint #";
          __s[1] = (std::string::value_type *)50;
          v280 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v33, v305, (char *)a2);
          *(void *)&long long v304 = v305;
          *((void *)&v304 + 1) = v280 - v305;
          v301 = " : ";
          uint64_t v302 = 3;
          google::protobuf::Message::ShortDebugString(&__p);
        }
        goto LABEL_194;
      case 0x17:
        v70 = *(_DWORD **)(v69 + 48);
        int v71 = v70[4];
        if (v70[10] != v71 || v70[16] != v71)
        {
          __s[0] = "Wrong field sizes in routes: ";
          __s[1] = (std::string::value_type *)29;
          google::protobuf::Message::ShortDebugString(&v301);
        }
        goto LABEL_168;
      case 0x18:
        if (*(int *)(v69 + 16) < 1)
        {
          uint64_t v111 = *(void *)(v69 + 48);
          uint64_t v112 = *(int *)(v111 + 16);
          if (v112 != *(_DWORD *)(v111 + 40))
          {
            __s[0] = "Times and demands fields must be of the same size: ";
            __s[1] = (std::string::value_type *)51;
            google::protobuf::Message::ShortDebugString(&v301);
          }
          if (v112)
          {
            uint64_t v113 = *(int **)(v111 + 24);
            unsigned int v114 = &v113[v112];
            do
            {
              uint64_t v169 = *(void *)(*((void *)v4 + 4) + 8 * *v113 + 8);
              uint64_t v170 = *(int *)(v169 + 16);
              if (v170)
              {
                unsigned int v171 = *(void **)(v169 + 24);
                uint64_t v172 = 8 * v170;
                do
                {
                  if ((*v171 & 0x8000000000000000) != 0)
                  {
                    __s[0] = "Time variables must be >= 0 in constraint ";
                    __s[1] = (std::string::value_type *)42;
                    google::protobuf::Message::ShortDebugString(&v301);
                  }
                  ++v171;
                  v172 -= 8;
                }
                while (v172);
              }
              ++v113;
            }
            while (v113 != v114);
            unint64_t v173 = 0;
            uint64_t v174 = *(uint64_t **)(v111 + 48);
            uint64_t v175 = 8 * v112;
            do
            {
              uint64_t v176 = *v174;
              if (*v174 < 0) {
                uint64_t v176 = -v176;
              }
              unint64_t v177 = v176 + v173;
              if ((v177 & ~v173 & 0x8000000000000000) == 0) {
                unint64_t v173 = v177;
              }
              else {
                unint64_t v173 = (v173 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              }
              if (v173 == 0x7FFFFFFFFFFFFFFFLL) {
                google::protobuf::Message::DebugString(__s);
              }
              ++v174;
              v175 -= 8;
            }
            while (v175);
          }
          int v178 = *(_DWORD *)(v111 + 64);
          if (v178 < 1 || v178 == v112)
          {
LABEL_168:
            *(unsigned char *)(v5 + 23) = 0;
            *(unsigned char *)unint64_t v5 = 0;
            uint64_t v103 = *(int *)(v69 + 16);
            if (!v103) {
              goto LABEL_52;
            }
            goto LABEL_195;
          }
          v179 = (char *)operator new(0x28uLL);
          *(void *)unint64_t v5 = v179;
          *(_OWORD *)(v5 + 8) = xmmword_23CE834B0;
          __n128 v57 = *(__n128 *)"Wrong array length of actives variables";
          strcpy(v179, "Wrong array length of actives variables");
        }
        else
        {
          int v75 = (char *)operator new(0x38uLL);
          *(void *)unint64_t v5 = v75;
          *(_OWORD *)(v5 + 8) = xmmword_23CE7E430;
          strcpy(v75, "Reservoir does not support enforcement literals.");
          __n128 v57 = *(__n128 *)"cement literals.";
        }
LABEL_309:
        if (*(char *)(v5 + 23) < 0)
        {
          if (*(void *)(v5 + 8)) {
            return;
          }
          operator delete(*(void **)v5);
          uint64_t v103 = *(int *)(v69 + 16);
          if (!v103) {
            goto LABEL_52;
          }
LABEL_195:
          uint64_t v117 = *(int **)(v69 + 24);
          uint64_t v118 = 4 * v103;
          do
          {
            int v119 = *v117;
            if (~*v117 > *v117) {
              int v119 = ~v119;
            }
            uint64_t v120 = *(void *)(*((void *)v4 + 4) + 8 * v119 + 8);
            operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v120 + 24), *(int *)(v120 + 16), (unint64_t *)&v301, v57);
            if (operations_research::Domain::Size((operations_research::Domain *)&v301) != 1)
            {
              __s[0] = "Enforcement literal not supported in constraint: ";
              __s[1] = (std::string::value_type *)49;
              google::protobuf::Message::ShortDebugString(v299);
            }
            if (v301) {
              operator delete((void *)v302);
            }
            ++v117;
            v118 -= 4;
          }
          while (v118);
          goto LABEL_52;
        }
        if (*(unsigned char *)(v5 + 23)) {
          return;
        }
        goto LABEL_194;
      case 0x19:
        uint64_t v96 = *(void *)(v69 + 48);
        uint64_t v97 = *(int *)(v96 + 40);
        if (!v97) {
          goto LABEL_168;
        }
        uint64_t v98 = (absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(v96 + 16);
        unsigned int v99 = *(unsigned int **)(v96 + 48);
        uint64_t v100 = 8 * v97;
        while (1)
        {
          unsigned int v101 = (absl::lts_2020_02_25::numbers_internal *)*v99;
          if ((v101 & 0x80000000) != 0 || (int)v98 <= (int)v101) {
            break;
          }
          v99 += 2;
          v100 -= 8;
          if (!v100) {
            goto LABEL_168;
          }
        }
        uint64_t v123 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v101, v305, (char *)a2);
        *(void *)&long long v304 = v305;
        *((void *)&v304 + 1) = v123 - v305;
        uint64_t v125 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v98, v34, v124);
        v301 = v34;
        uint64_t v302 = v125 - v34;
        __s[0] = "Distinguished node ";
        __s[1] = (std::string::value_type *)19;
        long long v292 = v304;
        v293 = " not in [0, ";
        uint64_t v294 = 12;
        v295 = v34;
        uint64_t v296 = v125 - v34;
        v297 = ").";
        uint64_t v298 = 2;
        absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)__s, 5, (char *)v5);
        goto LABEL_309;
      case 0x1B:
        if (qword_26AEE1860) {
          unint64_t v94 = (const operations_research::sat::LinearExpressionProto *)qword_26AEE1860;
        }
        else {
          unint64_t v94 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
        }
        if (SBYTE7(v292) < 0)
        {
          a2 = (int64_t)__s[1];
          if (__s[1]) {
            goto LABEL_190;
          }
        }
        else if (BYTE7(v292))
        {
          goto LABEL_158;
        }
        uint64_t v121 = 0;
        while (2)
        {
          if (*(_DWORD *)(v69 + 60) == 27)
          {
            uint64_t v122 = *(int **)(v69 + 48);
            if (v121 >= v122[6])
            {
LABEL_212:
              char v95 = 1;
              if ((SBYTE7(v292) & 0x80000000) == 0)
              {
LABEL_193:
                if ((v95 & 1) == 0) {
                  return;
                }
LABEL_194:
                uint64_t v103 = *(int *)(v69 + 16);
                if (!v103) {
                  goto LABEL_52;
                }
                goto LABEL_195;
              }
LABEL_192:
              operator delete(__s[0]);
              goto LABEL_193;
            }
          }
          else
          {
            uint64_t v122 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
            if (v121 >= dword_26AEE1850) {
              goto LABEL_212;
            }
          }
          if (*(char *)(v5 + 23) < 0)
          {
            if (!*(void *)(v5 + 8))
            {
              operator delete(*(void **)v5);
              goto LABEL_204;
            }
          }
          else if (!*(unsigned char *)(v5 + 23))
          {
LABEL_204:
            ++v121;
            continue;
          }
          goto LABEL_191;
        }
      case 0x1C:
        if (*(void *)(*(void *)(v69 + 48) + 40)) {
          int64_t v72 = *(const operations_research::sat::LinearExpressionProto **)(*(void *)(v69 + 48) + 40);
        }
        else {
          int64_t v72 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
        }
        if (SBYTE7(v292) < 0)
        {
          a2 = (int64_t)__s[1];
          if (__s[1])
          {
LABEL_190:
            std::string::__init_copy_ctor_external((std::string *)v5, __s[0], a2);
LABEL_191:
            char v95 = 0;
            if ((SBYTE7(v292) & 0x80000000) == 0) {
              goto LABEL_193;
            }
            goto LABEL_192;
          }
        }
        else if (BYTE7(v292))
        {
LABEL_158:
          char v95 = 0;
          __n128 v57 = *(__n128 *)__s;
          *(_OWORD *)unint64_t v5 = *(_OWORD *)__s;
          *(void *)(v5 + 16) = v292;
          if ((SBYTE7(v292) & 0x80000000) == 0) {
            goto LABEL_193;
          }
          goto LABEL_192;
        }
        for (uint64_t i = 0; ; ++i)
        {
          if (*(_DWORD *)(v69 + 60) == 28)
          {
            v116 = *(int **)(v69 + 48);
            if (i >= v116[6]) {
              goto LABEL_212;
            }
          }
          else
          {
            v116 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
            if (i >= dword_26AEE1850) {
              goto LABEL_212;
            }
          }
          if (*(char *)(v5 + 23) < 0)
          {
            if (*(void *)(v5 + 8)) {
              goto LABEL_191;
            }
            operator delete(*(void **)v5);
          }
          else if (*(unsigned char *)(v5 + 23))
          {
            goto LABEL_191;
          }
        }
      default:
        goto LABEL_194;
    }
  }
}

void sub_23CBF6BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::anonymous namespace'::ValidateLinearExpression(unint64_t this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::LinearExpressionProto *a3)
{
  uint64_t v3 = (unsigned char *)this;
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned int *)a3 + 10);
  if (v4 != *((_DWORD *)a3 + 4))
  {
    int v43 = "coeffs_size() != vars_size() in linear expression: ";
    uint64_t v44 = 51;
    google::protobuf::Message::ShortDebugString(&__p);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    BOOL v9 = 1;
    do
    {
      int v10 = *(_DWORD *)(*((void *)a3 + 3) + 4 * v5);
      if (~v10 <= v10) {
        int v11 = *(_DWORD *)(*((void *)a3 + 3) + 4 * v5);
      }
      else {
        int v11 = ~v10;
      }
      uint64_t v12 = *((void *)a2 + v11 + 1);
      uint64_t v13 = *(uint64_t **)(v12 + 24);
      uint64_t v14 = *v13;
      if (*v13 >= 0) {
        unint64_t v15 = *v13;
      }
      else {
        unint64_t v15 = -v14;
      }
      int v16 = 63 - __clz(v15);
      uint64_t v8 = *((void *)a3 + 6);
      uint64_t v17 = *(void *)(v8 + 8 * v5);
      if (v14) {
        int v18 = v16;
      }
      else {
        int v18 = 0;
      }
      if (v10 >= 0) {
        uint64_t v19 = *(void *)(v8 + 8 * v5);
      }
      else {
        uint64_t v19 = -v17;
      }
      if (v17 >= 0) {
        unint64_t v20 = *(void *)(v8 + 8 * v5);
      }
      else {
        unint64_t v20 = -v17;
      }
      int v21 = 63 - __clz(v20);
      if (!v19) {
        int v21 = 0;
      }
      int v22 = v21 + v18;
      if (v22 > 61)
      {
        if (v14) {
          BOOL v24 = v19 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24)
        {
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = ((v19 ^ (unint64_t)v14) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v25 = v20 * v15;
          if (v22 <= 0x3E && v25 < v23)
          {
            if (v23 >= 0) {
              uint64_t v23 = v25;
            }
            else {
              uint64_t v23 = -(uint64_t)v25;
            }
          }
        }
      }
      else
      {
        uint64_t v23 = v19 * v14;
      }
      int64_t v27 = &v13[*(int *)(v12 + 16)];
      uint64_t v28 = *(v27 - 1);
      if (v28 >= 0) {
        unint64_t v29 = *(v27 - 1);
      }
      else {
        unint64_t v29 = -v28;
      }
      int v30 = 63 - __clz(v29);
      if (!v28) {
        int v30 = 0;
      }
      int v31 = v21 + v30;
      if (v31 > 61)
      {
        if (v28) {
          BOOL v33 = v19 == 0;
        }
        else {
          BOOL v33 = 1;
        }
        if (v33)
        {
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v32 = ((v19 ^ (unint64_t)v28) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v34 = v20 * v29;
          if (v31 <= 0x3E && v34 < v32)
          {
            if (v32 >= 0) {
              uint64_t v32 = v34;
            }
            else {
              uint64_t v32 = -(uint64_t)v34;
            }
          }
        }
      }
      else
      {
        uint64_t v32 = v19 * v28;
      }
      if (v32 >= v23) {
        uint64_t v36 = v23;
      }
      else {
        uint64_t v36 = v32;
      }
      uint64_t v37 = v36 & (v36 >> 63);
      unint64_t v38 = v37 + v6;
      unint64_t v39 = (v37 + v6) ^ v6;
      unint64_t v40 = (v37 + v6) ^ v37;
      unint64_t v6 = (v6 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v39 & v40 & 0x8000000000000000) != 0) == __OFSUB__(v32, v23)) {
        unint64_t v6 = v38;
      }
      if (v23 <= v32) {
        uint64_t v41 = v32;
      }
      else {
        uint64_t v41 = v23;
      }
      this = (v41 & ~(v41 >> 63)) + v7;
      if (((this & ~v7 & 0x8000000000000000) != 0) != __OFSUB__(v23, v32)) {
        unint64_t v7 = (v7 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v7 = this;
      }
      if ((unint64_t)(v23 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      if ((unint64_t)(v32 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      if (v6 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      if (v7 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
      BOOL v9 = ++v5 < v4;
    }
    while (v4 != v5);
    if (v9)
    {
      int v43 = "Possible overflow in linear expression: ";
      uint64_t v44 = 40;
      google::protobuf::Message::ShortDebugString(&__p);
    }
  }
  v3[23] = 0;
  *uint64_t v3 = 0;
  return this;
}

void sub_23CBF71B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SolutionIsFeasible(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v5 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  int64_t v6 = (int64_t)v4 - *(void *)a2;
  if (v6 >> 3 != *(_DWORD *)(a1 + 24))
  {
    if (*_MergedGlobals_3[0] >= 1
      && (_MergedGlobals_3[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_3, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 983);
      int v18 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Wrong number of variables in the solution vector", 48);
      google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    }
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v8 + 8);
      int v10 = *(_DWORD *)(v9 + 16);
      if (v10 < 1) {
        break;
      }
      uint64_t v11 = 0;
      uint64_t v12 = v5[v8];
      uint64_t v13 = *(void *)(v9 + 24);
      while (*(void *)(v13 + 8 * v11) > v12 || *(void *)(v13 + 8 * v11 + 8) < v12)
      {
        v11 += 2;
        if (v10 <= (int)v11) {
          goto LABEL_19;
        }
      }
      if (++v8 == v7) {
        goto LABEL_10;
      }
    }
LABEL_19:
    if (*off_26AECFDA0[0] >= 1
      && (off_26AECFDA0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFDA0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
    {
      uint64_t v19 = google::LogMessage::LogMessage((google::LogMessage *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 990);
      unint64_t v20 = (void *)google::LogMessage::stream(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Variable #", 10);
      int v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" has value ", 11);
      int v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" which do not fall in its domain: ", 34);
      google::protobuf::Message::ShortDebugString(&__p);
    }
    return 0;
  }
LABEL_10:
  v644 = 0;
  v645 = 0;
  v646 = 0;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v6);
    unint64_t v15 = &v14[8 * (v6 >> 3)];
    v644 = v14;
    v646 = v15;
    memcpy(v14, v5, v6);
    v645 = v15;
  }
  if (*(int *)(a1 + 48) < 1)
  {
LABEL_855:
    uint64_t v23 = 1;
    goto LABEL_896;
  }
  uint64_t v16 = 0;
  uint64_t v17 = a1;
LABEL_30:
  uint64_t v640 = v16;
  uint64_t v27 = *(void *)(*(void *)(v17 + 56) + 8 * v16 + 8);
  uint64_t v28 = *(int *)(v27 + 16);
  if (v28)
  {
    unint64_t v29 = *(unsigned int **)(v27 + 24);
    uint64_t v30 = 4 * v28;
    do
    {
      uint64_t v31 = *v29;
      if ((v31 & 0x80000000) != 0)
      {
        if (*((void *)v644 + ~v31)) {
          goto LABEL_29;
        }
      }
      else if (!*((void *)v644 + v31))
      {
        goto LABEL_29;
      }
      ++v29;
      v30 -= 4;
    }
    while (v30);
  }
  uint64_t v32 = *(unsigned int *)(v27 + 60);
  switch((int)v32)
  {
    case 0:
      goto LABEL_29;
    case 3:
      uint64_t v33 = *(void *)(v27 + 48);
      uint64_t v34 = *(int *)(v33 + 16);
      if (!v34) {
        goto LABEL_866;
      }
      uint64_t v35 = *(unsigned int **)(v33 + 24);
      uint64_t v36 = 4 * v34;
      while (2)
      {
        uint64_t v37 = *v35;
        if ((v37 & 0x80000000) != 0)
        {
          if (!*((void *)v644 + ~v37)) {
            goto LABEL_29;
          }
        }
        else if (*((void *)v644 + v37))
        {
          goto LABEL_29;
        }
        ++v35;
        v36 -= 4;
        if (!v36) {
          goto LABEL_866;
        }
        continue;
      }
    case 4:
      uint64_t v243 = *(void *)(v27 + 48);
      uint64_t v244 = *(int *)(v243 + 16);
      if (!v244) {
        goto LABEL_29;
      }
      int v245 = *(unsigned int **)(v243 + 24);
      uint64_t v246 = 4 * v244;
      while (2)
      {
        uint64_t v247 = *v245;
        if ((v247 & 0x80000000) != 0)
        {
          if (*((void *)v644 + ~v247)) {
            goto LABEL_866;
          }
        }
        else if (!*((void *)v644 + v247))
        {
          goto LABEL_866;
        }
        ++v245;
        v246 -= 4;
        if (!v246) {
          goto LABEL_29;
        }
        continue;
      }
    case 5:
      uint64_t v214 = *(void *)(v27 + 48);
      uint64_t v215 = *(int *)(v214 + 16);
      if (!v215) {
        goto LABEL_866;
      }
      int v216 = 0;
      int v217 = *(unsigned int **)(v214 + 24);
      uint64_t v218 = 4 * v215;
      do
      {
        while (1)
        {
          uint64_t v219 = *v217;
          if ((v219 & 0x80000000) == 0) {
            break;
          }
          v216 ^= *((void *)v644 + ~v219) == 0;
          ++v217;
          v218 -= 4;
          if (!v218) {
            goto LABEL_271;
          }
        }
        v216 ^= *((void *)v644 + v219) != 0;
        ++v217;
        v218 -= 4;
      }
      while (v218);
LABEL_271:
      if (v216 != 1) {
        goto LABEL_866;
      }
      goto LABEL_29;
    case 7:
      uint64_t v240 = *(void *)(v27 + 48);
      uint64_t v241 = *(unsigned int *)(v240 + 36);
      if ((v241 & 0x80000000) != 0) {
        uint64_t v242 = -*((void *)v644 + ~v241);
      }
      else {
        uint64_t v242 = *((void *)v644 + v241);
      }
      v531 = *(unsigned int **)(v240 + 24);
      uint64_t v532 = *v531;
      if ((v532 & 0x80000000) != 0) {
        uint64_t v533 = -*((void *)v644 + ~v532);
      }
      else {
        uint64_t v533 = *((void *)v644 + v532);
      }
      uint64_t v534 = v531[1];
      if ((v534 & 0x80000000) != 0) {
        uint64_t v535 = -*((void *)v644 + ~v534);
      }
      else {
        uint64_t v535 = *((void *)v644 + v534);
      }
      if (v242 != v533 / v535) {
        goto LABEL_866;
      }
      goto LABEL_29;
    case 8:
      uint64_t v250 = *(void *)(v27 + 48);
      uint64_t v251 = *(unsigned int *)(v250 + 36);
      if ((v251 & 0x80000000) != 0) {
        uint64_t v252 = -*((void *)v644 + ~v251);
      }
      else {
        uint64_t v252 = *((void *)v644 + v251);
      }
      v542 = *(unsigned int **)(v250 + 24);
      uint64_t v543 = *v542;
      if ((v543 & 0x80000000) != 0) {
        uint64_t v544 = -*((void *)v644 + ~v543);
      }
      else {
        uint64_t v544 = *((void *)v644 + v543);
      }
      uint64_t v545 = v542[1];
      if ((v545 & 0x80000000) != 0)
      {
        if (v252 == v544 % -*((void *)v644 + ~v545)) {
          goto LABEL_29;
        }
      }
      else if (v252 == v544 % *((void *)v644 + v545))
      {
        goto LABEL_29;
      }
      goto LABEL_866;
    case 9:
      uint64_t v154 = *(void *)(v27 + 48);
      uint64_t v155 = *(unsigned int *)(v154 + 36);
      if ((v155 & 0x80000000) != 0) {
        uint64_t v156 = -*((void *)v644 + ~v155);
      }
      else {
        uint64_t v156 = *((void *)v644 + v155);
      }
      uint64_t v486 = *(unsigned int *)(v154 + 16);
      if ((int)v486 < 1)
      {
        int64_t v488 = 0x8000000000000000;
        goto LABEL_710;
      }
      v487 = *(unsigned int **)(v154 + 24);
      int64_t v488 = 0x8000000000000000;
      do
      {
        while (1)
        {
          unsigned int v491 = *v487++;
          uint64_t v490 = v491;
          if ((v491 & 0x80000000) != 0) {
            break;
          }
          int64_t v492 = *((void *)v644 + v490);
          if (v488 <= v492) {
            int64_t v488 = v492;
          }
          if (!--v486) {
            goto LABEL_710;
          }
        }
        int64_t v489 = -*((void *)v644 + ~v490);
        if (v488 <= v489) {
          int64_t v488 = v489;
        }
        --v486;
      }
      while (v486);
      goto LABEL_710;
    case 10:
      uint64_t v248 = *(void *)(v27 + 48);
      uint64_t v249 = *(unsigned int *)(v248 + 36);
      if ((v249 & 0x80000000) != 0) {
        uint64_t v156 = -*((void *)v644 + ~v249);
      }
      else {
        uint64_t v156 = *((void *)v644 + v249);
      }
      uint64_t v536 = *(unsigned int *)(v248 + 16);
      if ((int)v536 < 1)
      {
        int64_t v488 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_710;
      }
      v537 = *(unsigned int **)(v248 + 24);
      int64_t v488 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        while (1)
        {
          unsigned int v540 = *v537++;
          uint64_t v539 = v540;
          if ((v540 & 0x80000000) != 0) {
            break;
          }
          int64_t v541 = *((void *)v644 + v539);
          if (v541 < v488) {
            int64_t v488 = v541;
          }
          if (!--v536) {
            goto LABEL_710;
          }
        }
        int64_t v538 = -*((void *)v644 + ~v539);
        if (v538 < v488) {
          int64_t v488 = v538;
        }
        --v536;
      }
      while (v536);
LABEL_710:
      if (v156 != v488) {
        goto LABEL_866;
      }
      goto LABEL_29;
    case 11:
      uint64_t v157 = *(void *)(v27 + 48);
      uint64_t v158 = *(unsigned int *)(v157 + 36);
      if ((v158 & 0x80000000) != 0) {
        uint64_t v156 = -*((void *)v644 + ~v158);
      }
      else {
        uint64_t v156 = *((void *)v644 + v158);
      }
      uint64_t v493 = *(unsigned int *)(v157 + 16);
      if ((int)v493 < 1)
      {
        int64_t v488 = 1;
      }
      else
      {
        v494 = *(unsigned int **)(v157 + 24);
        int64_t v488 = 1;
        do
        {
          while (1)
          {
            unsigned int v496 = *v494++;
            uint64_t v495 = v496;
            if ((v496 & 0x80000000) == 0) {
              break;
            }
            v488 *= -*((void *)v644 + ~v495);
            if (!--v493) {
              goto LABEL_710;
            }
          }
          v488 *= *((void *)v644 + v495);
          --v493;
        }
        while (v493);
      }
      goto LABEL_710;
    case 12:
      uint64_t v78 = *(void *)(v27 + 48);
      uint64_t v79 = *(unsigned int *)(v78 + 40);
      if ((int)v79 < 1)
      {
        uint64_t v80 = 0;
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = *(unsigned int **)(v78 + 24);
        unint64_t v82 = *(uint64_t **)(v78 + 48);
        do
        {
          while (1)
          {
            unsigned int v85 = *v81++;
            uint64_t v84 = v85;
            if ((v85 & 0x80000000) == 0) {
              break;
            }
            uint64_t v83 = *v82++;
            v80 += v83 * -*((void *)v644 + ~v84);
            if (!--v79) {
              goto LABEL_502;
            }
          }
          uint64_t v86 = *v82++;
          v80 += v86 * *((void *)v644 + v84);
          --v79;
        }
        while (v79);
      }
LABEL_502:
      int v395 = *(_DWORD *)(v78 + 64);
      if (v395 < 1) {
        goto LABEL_866;
      }
      uint64_t v396 = 0;
      uint64_t v397 = *(void *)(v78 + 72);
      while (*(void *)(v397 + 8 * v396) > v80 || *(void *)(v397 + 8 * v396 + 8) < v80)
      {
        v396 += 2;
        if (v395 <= (int)v396) {
          goto LABEL_866;
        }
      }
      goto LABEL_29;
    case 13:
      uint64_t v131 = *(void *)(v27 + 48);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v649 = 0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      long long v648 = 0u;
      uint64_t v132 = *(int *)(v131 + 16);
      if (!v132)
      {
        BOOL v25 = 1;
        goto LABEL_26;
      }
      unint64_t v133 = *(unsigned int **)(v131 + 24);
      uint64_t v134 = &v133[v132];
      while (2)
      {
        uint64_t v141 = *v133;
        if ((v141 & 0x80000000) != 0) {
          uint64_t v142 = -*((void *)v644 + ~v141);
        }
        else {
          uint64_t v142 = *((void *)v644 + v141);
        }
        uint64_t v143 = 0;
        unint64_t v144 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v142)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v142));
        std::string::size_type v145 = (__p.__r_.__value_.__r.__words[0] >> 12) ^ (v144 >> 7);
        uint64_t v146 = v648;
        uint64_t v147 = 0x101010101010101 * (v144 & 0x7F);
        while (2)
        {
          std::string::size_type v148 = v145 & v648;
          uint64_t v149 = *(void *)(__p.__r_.__value_.__r.__words[0] + v148);
          unint64_t v150 = ((v149 ^ v147) - 0x101010101010101) & ~(v149 ^ v147) & 0x8080808080808080;
          if (v150)
          {
            while (1)
            {
              unint64_t v151 = (v148 + (__clz(__rbit64(v150)) >> 3)) & v648;
              if (*(void *)(__p.__r_.__value_.__l.__size_ + 8 * v151) == v142) {
                break;
              }
              v150 &= v150 - 1;
              if (!v150) {
                goto LABEL_178;
              }
            }
            if (v151 != (void)v648)
            {
              BOOL v25 = 0;
LABEL_796:
              if (v146)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                uint64_t v649 = 0;
                *(void *)&long long v648 = 0;
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
              }
LABEL_26:
              uint64_t v26 = (void *)*((void *)&v648 + 1);
              if (*((void *)&v648 + 1)) {
LABEL_27:
              }
                absl::lts_2020_02_25::container_internal::UnsampleSlow(v26);
LABEL_28:
              if (!v25) {
                goto LABEL_866;
              }
              goto LABEL_29;
            }
          }
          else
          {
LABEL_178:
            if ((v149 & (~v149 << 6) & 0x8080808080808080) == 0)
            {
              v143 += 8;
              std::string::size_type v145 = v143 + v148;
              continue;
            }
          }
          break;
        }
        if ((v141 & 0x80000000) != 0) {
          uint64_t v152 = -*((void *)v644 + ~v141);
        }
        else {
          uint64_t v152 = *((void *)v644 + v141);
        }
        uint64_t v138 = 0;
        unint64_t v153 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v152)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v152));
        for (std::string::size_type i = (__p.__r_.__value_.__r.__words[0] >> 12) ^ (v153 >> 7); ; std::string::size_type i = v138 + v135)
        {
          std::string::size_type v135 = i & v648;
          uint64_t v136 = *(void *)(__p.__r_.__value_.__r.__words[0] + v135);
          unint64_t v137 = ((v136 ^ (0x101010101010101 * (v153 & 0x7F))) - 0x101010101010101) & ~(v136 ^ (0x101010101010101
                                                                                                  * (v153 & 0x7F))) & 0x8080808080808080;
          if (v137) {
            break;
          }
LABEL_167:
          if ((v136 & (~v136 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v140 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&__p, v153);
            *(void *)(__p.__r_.__value_.__l.__size_ + 8 * v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v152;
            goto LABEL_170;
          }
          v138 += 8;
        }
        while (*(void *)(__p.__r_.__value_.__l.__size_ + 8 * ((v135 + (__clz(__rbit64(v137)) >> 3)) & v648)) != v152)
        {
          v137 &= v137 - 1;
          if (!v137) {
            goto LABEL_167;
          }
        }
LABEL_170:
        if (++v133 == v134)
        {
          BOOL v25 = 1;
          uint64_t v146 = v648;
          goto LABEL_796;
        }
        continue;
      }
    case 14:
      uint64_t v44 = *(void *)(v27 + 48);
      uint64_t v45 = *(unsigned int *)(v44 + 36);
      if ((v45 & 0x80000000) != 0) {
        uint64_t v46 = -*((void *)v644 + ~v45);
      }
      else {
        uint64_t v46 = *((void *)v644 + v45);
      }
      uint64_t v391 = *(unsigned int *)(*(void *)(v44 + 24) + 4 * (int)v46);
      if ((v391 & 0x80000000) != 0) {
        uint64_t v392 = -*((void *)v644 + ~v391);
      }
      else {
        uint64_t v392 = *((void *)v644 + v391);
      }
      uint64_t v393 = *(unsigned int *)(v44 + 40);
      if ((v393 & 0x80000000) != 0) {
        uint64_t v394 = -*((void *)v644 + ~v393);
      }
      else {
        uint64_t v394 = *((void *)v644 + v393);
      }
      if (v392 != v394) {
        goto LABEL_866;
      }
      goto LABEL_29;
    case 15:
      uint64_t v91 = *(unsigned int *)(*(void *)(v27 + 48) + 16);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      long long v648 = 0u;
      uint64_t v649 = 0;
      *(void *)v656 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&v656[8] = 0u;
      long long v657 = 0u;
      uint64_t v658 = 0;
      if ((int)v91 < 1)
      {
        v386 = 0;
        v385 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
LABEL_562:
        if (*(char *)v385 > -2)
        {
          v434 = v385;
        }
        else
        {
          v434 = v385;
          do
          {
            unint64_t v435 = (__clz(__rbit64((((unint64_t)*v434 >> 7) & ~*v434 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v434 = (uint64_t *)((char *)v434 + v435);
            v386 += v435;
          }
          while (*(char *)v434 < -1);
        }
        v436 = (uint64_t *)((char *)v385 + v648);
        if (v434 == (uint64_t *)((char *)v385 + v648)) {
          goto LABEL_779;
        }
        int v437 = 0;
        int v438 = 0;
        do
        {
          uint64_t v439 = 0;
          uint64_t v440 = *v386;
          unint64_t v441 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v440)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v440));
          uint64_t v442 = *(void *)&v656[8];
          unint64_t v443 = (v441 >> 7) ^ (*(void *)v656 >> 12);
          uint64_t v444 = 0x101010101010101 * (v441 & 0x7F);
          for (unint64_t j = v443; ; unint64_t j = v439 + v446)
          {
            uint64_t v446 = j & v657;
            uint64_t v447 = *(void *)(*(void *)v656 + v446);
            unint64_t v448 = ((v447 ^ v444) - 0x101010101010101) & ~(v447 ^ v444) & 0x8080808080808080;
            if (v448) {
              break;
            }
LABEL_573:
            if ((v447 & (~v447 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_612;
            }
            v439 += 8;
          }
          while (1)
          {
            unint64_t v449 = (v446 + (__clz(__rbit64(v448)) >> 3)) & v657;
            if (*(_DWORD *)(*(void *)&v656[8] + 8 * v449) == v440) {
              break;
            }
            v448 &= v448 - 1;
            if (!v448) {
              goto LABEL_573;
            }
          }
          if (v449 == (void)v657)
          {
LABEL_612:
            BOOL v485 = 0;
            goto LABEL_809;
          }
          for (uint64_t k = 0; ; v443 = k + v451)
          {
            unint64_t v451 = v443 & v657;
            uint64_t v452 = *(void *)(*(void *)v656 + v451);
            unint64_t v453 = ((v452 ^ v444) - 0x101010101010101) & ~(v452 ^ v444) & 0x8080808080808080;
            if (v453) {
              break;
            }
LABEL_580:
            if ((v452 & (~v452 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v454 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v656, v441);
              uint64_t v442 = *(void *)&v656[8];
              v455 = (_DWORD *)(*(void *)&v656[8] + 8 * v454);
              _DWORD *v455 = v440;
              v455[1] = 0;
              goto LABEL_583;
            }
            k += 8;
          }
          while (1)
          {
            unint64_t v454 = (v451 + (__clz(__rbit64(v453)) >> 3)) & v657;
            if (*(_DWORD *)(*(void *)&v656[8] + 8 * v454) == v440) {
              break;
            }
            v453 &= v453 - 1;
            if (!v453) {
              goto LABEL_580;
            }
          }
LABEL_583:
          if (*(_DWORD *)(v442 + 8 * v454 + 4) != v440)
          {
            int v438 = v440;
            ++v437;
          }
          int v456 = *((char *)v434 + 1);
          v434 = (uint64_t *)((char *)v434 + 1);
          ++v386;
          if (v456 <= -2)
          {
            do
            {
              unint64_t v457 = (__clz(__rbit64((((unint64_t)*v434 >> 7) & ~*v434 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v434 = (uint64_t *)((char *)v434 + v457);
              v386 += v457;
            }
            while (*(char *)v434 < -1);
          }
        }
        while (v434 != v436);
        if (!v437)
        {
LABEL_779:
          BOOL v485 = 1;
        }
        else
        {
          uint64_t v458 = 0;
          uint64_t v459 = 0;
          int v460 = 0;
          *(void *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          long long v653 = 0u;
          long long v654 = 0u;
          uint64_t v655 = 0;
          unint64_t v461 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          int v462 = v438;
LABEL_597:
          uint64_t v471 = 0;
          unint64_t v472 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v462)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v462));
          unint64_t v473 = (v472 >> 7) ^ (v461 >> 12);
          uint64_t v474 = 0x101010101010101 * (v472 & 0x7F);
          for (unint64_t m = v473; ; unint64_t m = v471 + v476)
          {
            unint64_t v476 = m & v459;
            uint64_t v477 = *(void *)(v461 + v476);
            unint64_t v478 = ((v477 ^ v474) - 0x101010101010101) & ~(v477 ^ v474) & 0x8080808080808080;
            if (v478) {
              break;
            }
LABEL_601:
            if ((v477 & (~v477 << 6) & 0x8080808080808080) != 0)
            {
LABEL_604:
              uint64_t v480 = 0;
              ++v460;
              while (1)
              {
                unint64_t v481 = v473 & v459;
                uint64_t v482 = *(void *)(v461 + v481);
                unint64_t v483 = ((v482 ^ v474) - 0x101010101010101) & ~(v482 ^ v474) & 0x8080808080808080;
                if (v483) {
                  break;
                }
LABEL_608:
                if ((v482 & (~v482 << 6) & 0x8080808080808080) != 0)
                {
                  unint64_t v484 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)__x, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v462)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v462)));
                  *(_DWORD *)(v653 + 4 * v484) = v462;
                  goto LABEL_611;
                }
                v480 += 8;
                unint64_t v473 = v480 + v481;
              }
              while (*(_DWORD *)(v458 + 4 * ((v481 + (__clz(__rbit64(v483)) >> 3)) & v459)) != v462)
              {
                v483 &= v483 - 1;
                if (!v483) {
                  goto LABEL_608;
                }
              }
LABEL_611:
              uint64_t v467 = 0;
              uint64_t v469 = *(void *)&v656[8];
              for (unint64_t n = (v472 >> 7) ^ (*(void *)v656 >> 12); ; unint64_t n = v467 + v463)
              {
                unint64_t v463 = n & v657;
                uint64_t v464 = *(void *)(*(void *)v656 + v463);
                unint64_t v465 = ((v464 ^ v474) - 0x101010101010101) & ~(v464 ^ v474) & 0x8080808080808080;
                if (v465) {
                  break;
                }
LABEL_593:
                if ((v464 & (~v464 << 6) & 0x8080808080808080) != 0)
                {
                  unint64_t v466 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v656, v472);
                  uint64_t v469 = *(void *)&v656[8];
                  v470 = (_DWORD *)(*(void *)&v656[8] + 8 * v466);
                  _DWORD *v470 = v462;
                  v470[1] = 0;
                  goto LABEL_596;
                }
                v467 += 8;
              }
              while (1)
              {
                unint64_t v466 = (v463 + (__clz(__rbit64(v465)) >> 3)) & v657;
                if (*(_DWORD *)(*(void *)&v656[8] + 8 * v466) == v462) {
                  break;
                }
                v465 &= v465 - 1;
                if (!v465) {
                  goto LABEL_593;
                }
              }
LABEL_596:
              int v462 = *(_DWORD *)(v469 + 8 * v466 + 4);
              uint64_t v459 = v654;
              unint64_t v461 = *(void *)__x;
              uint64_t v458 = v653;
              goto LABEL_597;
            }
            v471 += 8;
          }
          while (1)
          {
            unint64_t v479 = (v476 + (__clz(__rbit64(v478)) >> 3)) & v459;
            if (*(_DWORD *)(v458 + 4 * v479) == v462) {
              break;
            }
            v478 &= v478 - 1;
            if (!v478) {
              goto LABEL_601;
            }
          }
          if (v479 == v459) {
            goto LABEL_604;
          }
          BOOL v485 = v462 == v438 && v460 == v437;
          if (v459)
          {
            operator delete((void *)v461);
            *(void *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            uint64_t v655 = 0;
            *(void *)&long long v654 = 0;
            long long v653 = 0uLL;
          }
          if (*((void *)&v654 + 1)) {
            absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v654 + 1));
          }
        }
LABEL_809:
        if ((void)v657)
        {
          operator delete(*(void **)v656);
          *(void *)v656 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          uint64_t v658 = 0;
          *(void *)&v656[16] = 0;
          *(void *)&long long v657 = 0;
          *(void *)&v656[8] = 0;
        }
        if (*((void *)&v657 + 1)) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v657 + 1));
        }
        if ((void)v648)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          uint64_t v649 = 0;
          *(void *)&long long v648 = 0;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        }
        if (*((void *)&v648 + 1)) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v648 + 1));
        }
        goto LABEL_840;
      }
      uint64_t v92 = 0;
      while (1)
      {
        uint64_t v101 = 0;
        if (*(_DWORD *)(v27 + 60) == 15) {
          uint64_t v102 = *(uint64_t **)(v27 + 48);
        }
        else {
          uint64_t v102 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
        }
        uint64_t v103 = *(int *)(v102[3] + 4 * v92);
        int v104 = *(_DWORD *)(v102[6] + 4 * v92);
        unint64_t v105 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v103)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v103));
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        std::string::size_type v106 = __p.__r_.__value_.__r.__words[0];
        std::string::size_type v108 = __p.__r_.__value_.__r.__words[0] >> 12;
        std::string::size_type v109 = (v105 >> 7) ^ (__p.__r_.__value_.__r.__words[0] >> 12);
        uint64_t v110 = 0x101010101010101 * (v105 & 0x7F);
        uint64_t v111 = v648;
        while (1)
        {
          std::string::size_type v112 = v109 & v648;
          uint64_t v113 = *(void *)(__p.__r_.__value_.__r.__words[0] + v112);
          unint64_t v114 = ((v113 ^ v110) - 0x101010101010101) & ~(v113 ^ v110) & 0x8080808080808080;
          if (v114) {
            break;
          }
LABEL_137:
          if ((v113 & (~v113 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v115 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v103)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v103)));
            *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * v115) = v103;
            uint64_t v111 = v648;
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            std::string::size_type v106 = __p.__r_.__value_.__r.__words[0];
            std::string::size_type v108 = __p.__r_.__value_.__r.__words[0] >> 12;
            goto LABEL_140;
          }
          v101 += 8;
          std::string::size_type v109 = v101 + v112;
        }
        while (*(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * ((v112 + (__clz(__rbit64(v114)) >> 3)) & v648)) != v103)
        {
          v114 &= v114 - 1;
          if (!v114) {
            goto LABEL_137;
          }
        }
LABEL_140:
        uint64_t v116 = 0;
        unint64_t v117 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v104)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v104));
        for (istd::string::size_type i = v108 ^ (v117 >> 7); ; istd::string::size_type i = v116 + v119)
        {
          std::string::size_type v119 = ii & v111;
          uint64_t v120 = *(void *)(v106 + v119);
          unint64_t v121 = ((v120 ^ (0x101010101010101 * (v117 & 0x7F))) - 0x101010101010101) & ~(v120 ^ (0x101010101010101
                                                                                                  * (v117 & 0x7F))) & 0x8080808080808080;
          if (v121) {
            break;
          }
LABEL_144:
          if ((v120 & (~v120 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v122 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v117);
            *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4 * v122) = v104;
            goto LABEL_147;
          }
          v116 += 8;
        }
        while (*(_DWORD *)(size + 4 * ((v119 + (__clz(__rbit64(v121)) >> 3)) & v111)) != v104)
        {
          v121 &= v121 - 1;
          if (!v121) {
            goto LABEL_144;
          }
        }
LABEL_147:
        if (*(_DWORD *)(v27 + 60) == 15) {
          uint64_t v123 = *(uint64_t **)(v27 + 48);
        }
        else {
          uint64_t v123 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
        }
        uint64_t v124 = *(unsigned int *)(v123[9] + 4 * v92);
        if ((v124 & 0x80000000) != 0)
        {
          if (*((void *)v644 + ~v124)) {
            goto LABEL_129;
          }
        }
        else if (!*((void *)v644 + v124))
        {
          goto LABEL_129;
        }
        uint64_t v125 = 0;
        uint64_t v99 = *(void *)&v656[8];
        unint64_t v98 = (v105 >> 7) ^ (*(void *)v656 >> 12);
        for (junint64_t j = v98; ; junint64_t j = v125 + v127)
        {
          uint64_t v127 = jj & v657;
          uint64_t v128 = *(void *)(*(void *)v656 + v127);
          unint64_t v129 = ((v128 ^ v110) - 0x101010101010101) & ~(v128 ^ v110) & 0x8080808080808080;
          if (v129) {
            break;
          }
LABEL_158:
          if ((v128 & (~v128 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_161;
          }
          v125 += 8;
        }
        while (1)
        {
          unint64_t v130 = (v127 + (__clz(__rbit64(v129)) >> 3)) & v657;
          if (*(_DWORD *)(*(void *)&v656[8] + 8 * v130) == v103) {
            break;
          }
          v129 &= v129 - 1;
          if (!v129) {
            goto LABEL_158;
          }
        }
        if (v130 != (void)v657)
        {
          BOOL v485 = 0;
          goto LABEL_809;
        }
LABEL_161:
        for (kk = 0; ; unint64_t v98 = kk + v93)
        {
          unint64_t v93 = v98 & v657;
          uint64_t v94 = *(void *)(*(void *)v656 + v93);
          unint64_t v95 = ((v94 ^ v110) - 0x101010101010101) & ~(v94 ^ v110) & 0x8080808080808080;
          if (v95) {
            break;
          }
LABEL_125:
          if ((v94 & (~v94 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v96 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert((uint64_t *)v656, v105);
            uint64_t v99 = *(void *)&v656[8];
            uint64_t v100 = (_DWORD *)(*(void *)&v656[8] + 8 * v96);
            *uint64_t v100 = v103;
            v100[1] = 0;
            goto LABEL_128;
          }
          kk += 8;
        }
        while (1)
        {
          unint64_t v96 = (v93 + (__clz(__rbit64(v95)) >> 3)) & v657;
          if (*(_DWORD *)(*(void *)&v656[8] + 8 * v96) == v103) {
            break;
          }
          v95 &= v95 - 1;
          if (!v95) {
            goto LABEL_125;
          }
        }
LABEL_128:
        *(_DWORD *)(v99 + 8 * v96 + 4) = v104;
LABEL_129:
        if (++v92 == v91)
        {
          v386 = (int *)__p.__r_.__value_.__l.__size_;
          v385 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_562;
        }
      }
    case 16:
      uint64_t v159 = *(void *)(v27 + 48);
      uint64_t v160 = *(int *)(v159 + 16);
      if (!v160) {
        goto LABEL_29;
      }
      uint64_t v161 = *(unsigned int *)(v159 + 40);
      if ((int)v161 < 1) {
        goto LABEL_198;
      }
      uint64_t v162 = 0;
      uint64_t v163 = *(void **)(v159 + 48);
      while (1)
      {
        uint64_t v164 = *(unsigned int **)(v159 + 24);
        unint64_t v165 = v163;
        uint64_t v166 = *(unsigned int *)(v159 + 16);
        while (1)
        {
          unsigned int v168 = *v164++;
          uint64_t v167 = v168;
          if ((v168 & 0x80000000) != 0)
          {
            if (-*((void *)v644 + ~v167) != *v165) {
              break;
            }
            goto LABEL_194;
          }
          if (*((void *)v644 + v167) != *v165) {
            break;
          }
LABEL_194:
          ++v165;
          if (!--v166)
          {
            if (!*(unsigned char *)(v159 + 60)) {
              goto LABEL_29;
            }
            goto LABEL_866;
          }
        }
        v162 += v160;
        v163 += v160;
        if (v162 >= v161)
        {
LABEL_198:
          if (!*(unsigned char *)(v159 + 60)) {
            goto LABEL_866;
          }
LABEL_29:
          uint64_t v16 = v640 + 1;
          uint64_t v17 = a1;
          if (v640 + 1 >= *(int *)(a1 + 48)) {
            goto LABEL_855;
          }
          goto LABEL_30;
        }
      }
    case 17:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v649 = 0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      long long v648 = 0u;
      v220 = *(uint64_t **)(v27 + 48);
      uint64_t v221 = *((unsigned int *)v220 + 10);
      if ((int)v221 < 1)
      {
        int v384 = 17;
      }
      else
      {
        uint64_t v222 = 0;
        uint64_t v223 = 8 * v221;
        do
        {
          if (*(_DWORD *)(v27 + 60) == 17)
          {
            uint64_t v224 = *(uint64_t **)(v27 + 48);
            uint64_t v225 = *(void *)(v224[9] + v222);
          }
          else
          {
            uint64_t v225 = *(void *)(qword_26AEE1C80 + v222);
            uint64_t v224 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
          }
          uint64_t v226 = *(void *)(v224[6] + v222);
          uint64_t v227 = *(void *)(v224[12] + v222);
          *(void *)v656 = v226;
          *(void *)&v656[8] = v227;
          unint64_t v228 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>((uint64_t *)&__p, (uint64_t *)v656);
          if (v229)
          {
            std::string::size_type v230 = __p.__r_.__value_.__l.__size_ + 24 * v228;
            *(_OWORD *)std::string::size_type v230 = *(_OWORD *)v656;
            *(void *)(v230 + 16) = 0;
          }
          *(void *)(__p.__r_.__value_.__l.__size_ + 24 * v228 + 16) = v225;
          v222 += 8;
        }
        while (v223 != v222);
        int v384 = *(_DWORD *)(v27 + 60);
        v220 = *(uint64_t **)(v27 + 48);
      }
      if (v384 == 17) {
        v502 = v220;
      }
      else {
        v502 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      }
      uint64_t v503 = v502[17];
      uint64_t v504 = *((unsigned int *)v502 + 28);
      if ((int)v504 < 1) {
        goto LABEL_670;
      }
      for (munint64_t m = 0; mm != v504; ++mm)
      {
        if (*(_DWORD *)(v27 + 60) == 17) {
          v506 = *(uint64_t **)(v27 + 48);
        }
        else {
          v506 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
        }
        uint64_t v507 = *(unsigned int *)(v506[15] + 4 * mm);
        if ((v507 & 0x80000000) != 0) {
          uint64_t v508 = -*((void *)v644 + ~v507);
        }
        else {
          uint64_t v508 = *((void *)v644 + v507);
        }
        uint64_t v509 = 0;
        *(void *)v656 = v503;
        *(void *)&v656[8] = v508;
        unint64_t v510 = v508
             + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v503)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v503)));
        unint64_t v511 = ((v510 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v510);
        for (nunint64_t n = (v511 >> 7) ^ (__p.__r_.__value_.__r.__words[0] >> 12); ; nunint64_t n = v509 + v513)
        {
          std::string::size_type v513 = nn & v648;
          uint64_t v514 = *(void *)(__p.__r_.__value_.__r.__words[0] + v513);
          unint64_t v515 = ((v514 ^ (0x101010101010101 * (v511 & 0x7F))) - 0x101010101010101) & ~(v514 ^ (0x101010101010101
                                                                                                  * (v511 & 0x7F))) & 0x8080808080808080;
          if (v515) {
            break;
          }
LABEL_663:
          if ((v514 & (~v514 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_680;
          }
          v509 += 8;
        }
        while (1)
        {
          unint64_t v516 = (v513 + (__clz(__rbit64(v515)) >> 3)) & v648;
          v517 = (uint64_t *)(__p.__r_.__value_.__l.__size_ + 24 * v516);
          uint64_t v519 = *v517;
          uint64_t v518 = v517[1];
          BOOL v520 = v519 == v503 && v518 == v508;
          if (v520) {
            break;
          }
          v515 &= v515 - 1;
          if (!v515) {
            goto LABEL_663;
          }
        }
        if (v516 == (void)v648) {
          goto LABEL_680;
        }
        unint64_t v521 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>((uint64_t *)&__p, (uint64_t *)v656);
        if (v522)
        {
          std::string::size_type v523 = __p.__r_.__value_.__l.__size_ + 24 * v521;
          *(_OWORD *)std::string::size_type v523 = *(_OWORD *)v656;
          *(void *)(v523 + 16) = 0;
        }
        uint64_t v503 = *(void *)(__p.__r_.__value_.__l.__size_ + 24 * v521 + 16);
      }
      int v384 = *(_DWORD *)(v27 + 60);
      v220 = *(uint64_t **)(v27 + 48);
LABEL_670:
      if (v384 != 17) {
        v220 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      }
      uint64_t v524 = *((int *)v220 + 4);
      if (v524)
      {
        v525 = (uint64_t *)v220[3];
        uint64_t v526 = 8 * v524 - 8;
        do
        {
          uint64_t v527 = *v525++;
          BOOL v25 = v503 == v527;
          BOOL v528 = v503 == v527 || v526 == 0;
          v526 -= 8;
        }
        while (!v528);
      }
      else
      {
LABEL_680:
        BOOL v25 = 0;
      }
      if ((void)v648)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        uint64_t v649 = 0;
        *(void *)&long long v648 = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      }
      uint64_t v26 = (void *)*((void *)&v648 + 1);
      if (*((void *)&v648 + 1)) {
        goto LABEL_27;
      }
      goto LABEL_28;
    case 18:
      uint64_t v234 = *(void *)(v27 + 48);
      unint64_t v235 = *(unsigned int *)(v234 + 16);
      if (v235 != *(_DWORD *)(v234 + 40)) {
        goto LABEL_866;
      }
      if ((int)v235 < 1) {
        goto LABEL_29;
      }
      uint64_t v236 = 0;
      BOOL v237 = 0;
      while (2)
      {
        uint64_t v238 = *(unsigned int *)(*(void *)(v234 + 24) + 4 * v236);
        if ((v238 & 0x80000000) != 0)
        {
          uint64_t v238 = -*((void *)v644 + ~v238);
          if ((v238 & 0x80000000) != 0) {
            goto LABEL_295;
          }
        }
        else
        {
          LODWORD(v238) = *((_DWORD *)v644 + 2 * v238);
          if ((v238 & 0x80000000) != 0)
          {
LABEL_295:
            if (v237) {
              goto LABEL_29;
            }
            goto LABEL_866;
          }
        }
        if ((int)v235 <= (int)v238) {
          goto LABEL_295;
        }
        uint64_t v239 = *(unsigned int *)(*(void *)(v234 + 48) + 4 * v238);
        if ((v239 & 0x80000000) != 0)
        {
          if (v236 != -*((void *)v644 + ~v239)) {
            goto LABEL_295;
          }
        }
        else if (v236 != *((void *)v644 + v239))
        {
          goto LABEL_295;
        }
        BOOL v237 = ++v236 >= v235;
        if (v235 == v236) {
          goto LABEL_295;
        }
        continue;
      }
    case 19:
      BOOL v231 = *(unsigned int **)(v27 + 48);
      uint64_t v232 = v231[6];
      if ((v232 & 0x80000000) != 0) {
        uint64_t v233 = -*((void *)v644 + ~v232);
      }
      else {
        uint64_t v233 = *((void *)v644 + v232);
      }
      if (v233 < 0) {
        goto LABEL_866;
      }
      uint64_t v529 = v231[4];
      uint64_t v530 = (v529 & 0x80000000) != 0 ? -*((void *)v644 + ~v529) : *((void *)v644 + v529);
      uint64_t v574 = v231[5];
      uint64_t v575 = (v574 & 0x80000000) != 0 ? -*((void *)v644 + ~v574) : *((void *)v644 + v574);
      if (v530 + v233 != v575) {
        goto LABEL_866;
      }
      goto LABEL_29;
    case 20:
      uint64_t v169 = *(void *)(v27 + 48);
      memset(&__p, 0, sizeof(__p));
      uint64_t v170 = *(int *)(v169 + 16);
      if (!v170)
      {
        unsigned int v171 = 0;
        unint64_t v173 = 0;
LABEL_634:
        unint64_t v497 = 126 - 2 * __clz(((char *)v171 - (char *)v173) >> 4);
        if (v171 == v173) {
          uint64_t v498 = 0;
        }
        else {
          uint64_t v498 = v497;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>((uint64_t)v173, v171, (uint64_t)v656, v498, 1);
        v499 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
        {
LABEL_641:
          BOOL v485 = 1;
        }
        else
        {
          int64_t v500 = 0x8000000000000000;
          v501 = (int64_t *)__p.__r_.__value_.__r.__words[0];
          while (1)
          {
            BOOL v485 = *v501 >= v500;
            if (*v501 < v500) {
              break;
            }
            int64_t v500 = v501[1] + *v501;
            v501 += 2;
            if (v501 == (int64_t *)__p.__r_.__value_.__l.__size_) {
              goto LABEL_641;
            }
          }
        }
        if (__p.__r_.__value_.__r.__words[0]) {
LABEL_839:
        }
          operator delete(v499);
        goto LABEL_840;
      }
      unsigned int v171 = 0;
      std::string::size_type v172 = 0;
      unint64_t v173 = 0;
      uint64_t v174 = *(int **)(v169 + 24);
      uint64_t v175 = &v174[v170];
      while (1)
      {
        uint64_t v176 = *(void *)(*(void *)(a1 + 56) + 8 * *v174 + 8);
        uint64_t v177 = *(int *)(v176 + 16);
        if (v177)
        {
          int v178 = *(unsigned int **)(v176 + 24);
          for (uint64_t i1 = 4 * v177; i1; i1 -= 4)
          {
            uint64_t v180 = *v178;
            if ((v180 & 0x80000000) != 0)
            {
              if (*((void *)v644 + ~v180)) {
                goto LABEL_204;
              }
            }
            else if (!*((void *)v644 + v180))
            {
              goto LABEL_204;
            }
            ++v178;
          }
        }
        if (*(_DWORD *)(v176 + 60) == 19)
        {
          int v181 = *(uint64_t **)(v176 + 48);
          uint64_t v182 = *((unsigned int *)v181 + 4);
          if ((v182 & 0x80000000) != 0) {
            goto LABEL_214;
          }
        }
        else
        {
          int v181 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          uint64_t v182 = dword_26AEE1BD8;
          if (dword_26AEE1BD8 < 0)
          {
LABEL_214:
            v183 = v644;
            uint64_t v184 = -*((void *)v644 + ~v182);
            uint64_t v185 = *((unsigned int *)v181 + 6);
            if ((v185 & 0x80000000) != 0) {
              goto LABEL_215;
            }
            goto LABEL_219;
          }
        }
        v183 = v644;
        uint64_t v184 = *((void *)v644 + v182);
        uint64_t v185 = *((unsigned int *)v181 + 6);
        if ((v185 & 0x80000000) != 0)
        {
LABEL_215:
          uint64_t v186 = -v183[~v185];
          if ((unint64_t)v171 >= v172) {
            goto LABEL_220;
          }
          goto LABEL_202;
        }
LABEL_219:
        uint64_t v186 = v183[v185];
        if ((unint64_t)v171 >= v172)
        {
LABEL_220:
          uint64_t v187 = ((char *)v171 - (char *)v173) >> 4;
          unint64_t v188 = v187 + 1;
          if ((unint64_t)(v187 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v172 - (void)v173) >> 3 > v188) {
            unint64_t v188 = (uint64_t)(v172 - (void)v173) >> 3;
          }
          if (v172 - (unint64_t)v173 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v189 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v189 = v188;
          }
          if (v189)
          {
            if (v189 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v190 = (char *)operator new(16 * v189);
            uint64_t v191 = (uint64_t *)&v190[16 * v187];
            *uint64_t v191 = v184;
            v191[1] = v186;
            if (v171 != v173)
            {
LABEL_229:
              v192 = v191;
              do
              {
                std::string::size_type v193 = (std::string::size_type)(v192 - 2);
                *((_OWORD *)v192 - 1) = *((_OWORD *)v171 - 1);
                v171 -= 2;
                v192 -= 2;
              }
              while (v171 != v173);
              std::string::size_type v172 = (std::string::size_type)&v190[16 * v189];
              unsigned int v171 = v191 + 2;
              __p.__r_.__value_.__r.__words[0] = v193;
              __p.__r_.__value_.__r.__words[2] = v172;
              if (v173) {
LABEL_232:
              }
                operator delete(v173);
LABEL_233:
              unint64_t v173 = (uint64_t *)v193;
              goto LABEL_203;
            }
          }
          else
          {
            v190 = 0;
            uint64_t v191 = (uint64_t *)(16 * v187);
            *uint64_t v191 = v184;
            v191[1] = v186;
            if (v171 != v173) {
              goto LABEL_229;
            }
          }
          std::string::size_type v193 = (std::string::size_type)v191;
          std::string::size_type v172 = (std::string::size_type)&v190[16 * v189];
          unsigned int v171 = v191 + 2;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
          __p.__r_.__value_.__r.__words[2] = v172;
          if (v173) {
            goto LABEL_232;
          }
          goto LABEL_233;
        }
LABEL_202:
        *unsigned int v171 = v184;
        v171[1] = v186;
        v171 += 2;
LABEL_203:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v171;
LABEL_204:
        if (++v174 == v175) {
          goto LABEL_634;
        }
      }
    case 21:
      uint64_t v253 = *(void *)(v27 + 48);
      memset(&__p, 0, sizeof(__p));
      uint64_t v254 = *(unsigned int *)(v253 + 16);
      *(_DWORD *)v656 = *(_DWORD *)(v253 + 40);
      LODWORD(v642[0]) = v254;
      if (*(_DWORD *)v656 != v254) {
        google::MakeCheckOpString<int,int>((int)v656, (int)v642, "arg.y_intervals_size() == num_intervals");
      }
      if ((int)v254 < 1) {
        goto LABEL_29;
      }
      int v255 = 0;
      for (uint64_t i2 = 0; i2 != v254; ++i2)
      {
        uint64_t v258 = *(void *)(a1 + 56) + 8;
        uint64_t v259 = *(void *)(v258 + 8 * *(int *)(*(void *)(v253 + 24) + 4 * i2));
        uint64_t v260 = *(void *)(v258 + 8 * *(int *)(*(void *)(v253 + 48) + 4 * i2));
        uint64_t v261 = *(int *)(v259 + 16);
        if (v261)
        {
          uint64_t v262 = *(unsigned int **)(v259 + 24);
          for (uint64_t i3 = 4 * v261; i3; i3 -= 4)
          {
            uint64_t v264 = *v262;
            if ((v264 & 0x80000000) != 0)
            {
              if (*((void *)v644 + ~v264)) {
                goto LABEL_315;
              }
            }
            else if (!*((void *)v644 + v264))
            {
              goto LABEL_315;
            }
            ++v262;
          }
        }
        uint64_t v265 = *(int *)(v260 + 16);
        if (v265)
        {
          BOOL v266 = *(unsigned int **)(v260 + 24);
          for (uint64_t i4 = 4 * v265; i4; i4 -= 4)
          {
            uint64_t v268 = *v266;
            if ((v268 & 0x80000000) != 0)
            {
              if (*((void *)v644 + ~v268)) {
                goto LABEL_315;
              }
            }
            else if (!*((void *)v644 + v268))
            {
              goto LABEL_315;
            }
            ++v266;
          }
        }
        int v269 = *(_DWORD *)(v259 + 60);
        if (!*(unsigned char *)(v253 + 60))
        {
LABEL_347:
          if (v269 == 19)
          {
            v280 = *(uint64_t **)(v259 + 48);
            if (*(_DWORD *)(v260 + 60) != 19) {
              goto LABEL_349;
            }
          }
          else
          {
            v280 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v260 + 60) != 19)
            {
LABEL_349:
              v281 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              std::string::size_type v282 = __p.__r_.__value_.__r.__words[2];
              if ((unint64_t)v255 >= __p.__r_.__value_.__r.__words[2])
              {
LABEL_353:
                std::string::size_type v283 = __p.__r_.__value_.__r.__words[0];
                uint64_t v284 = (uint64_t)((uint64_t)v255 - __p.__r_.__value_.__r.__words[0]) >> 4;
                unint64_t v285 = v284 + 1;
                if ((unint64_t)(v284 + 1) >> 60) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v286 = v282 - __p.__r_.__value_.__r.__words[0];
                if (v286 >> 3 > v285) {
                  unint64_t v285 = v286 >> 3;
                }
                if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v287 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v287 = v285;
                }
                if (v287)
                {
                  if (v287 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v288 = (char *)operator new(16 * v287);
                  v289 = (uint64_t **)&v288[16 * v284];
                  *v289 = v280;
                  v289[1] = v281;
                  uint64_t v290 = (uint64_t)v289;
                  if (v255 == (void *)v283) {
                    goto LABEL_366;
                  }
                }
                else
                {
                  v288 = 0;
                  v289 = (uint64_t **)(16 * v284);
                  *v289 = v280;
                  v289[1] = v281;
                  uint64_t v290 = 16 * v284;
                  if (v255 == (void *)v283) {
                    goto LABEL_366;
                  }
                }
                do
                {
                  *(_OWORD *)(v290 - 16) = *((_OWORD *)v255 - 1);
                  v290 -= 16;
                  v255 -= 2;
                }
                while (v255 != (void *)v283);
                int v255 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_366:
                std::string::size_type v257 = (std::string::size_type)(v289 + 2);
                __p.__r_.__value_.__r.__words[0] = v290;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v289 + 2);
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v288[16 * v287];
                if (v255) {
                  operator delete(v255);
                }
                goto LABEL_314;
              }
LABEL_313:
              *int v255 = v280;
              v255[1] = v281;
              std::string::size_type v257 = (std::string::size_type)(v255 + 2);
LABEL_314:
              __p.__r_.__value_.__l.__size_ = v257;
              int v255 = (void *)v257;
              continue;
            }
          }
          v281 = *(uint64_t **)(v260 + 48);
          std::string::size_type v282 = __p.__r_.__value_.__r.__words[2];
          if ((unint64_t)v255 >= __p.__r_.__value_.__r.__words[2]) {
            goto LABEL_353;
          }
          goto LABEL_313;
        }
        if (v269 == 19)
        {
          uint64_t v270 = *(uint64_t **)(v259 + 48);
          uint64_t v271 = *((unsigned int *)v270 + 4);
          if ((v271 & 0x80000000) != 0) {
            goto LABEL_333;
          }
        }
        else
        {
          uint64_t v270 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          uint64_t v271 = dword_26AEE1BD8;
          if (dword_26AEE1BD8 < 0)
          {
LABEL_333:
            unint64_t v272 = v644;
            uint64_t v273 = -*((void *)v644 + ~v271);
            uint64_t v274 = *((unsigned int *)v270 + 5);
            if ((v274 & 0x80000000) != 0) {
              goto LABEL_334;
            }
            goto LABEL_338;
          }
        }
        unint64_t v272 = v644;
        uint64_t v273 = *((void *)v644 + v271);
        uint64_t v274 = *((unsigned int *)v270 + 5);
        if ((v274 & 0x80000000) != 0)
        {
LABEL_334:
          if (v273 == -v272[~v274]) {
            continue;
          }
          goto LABEL_339;
        }
LABEL_338:
        if (v273 == v272[v274]) {
          continue;
        }
LABEL_339:
        if (*(_DWORD *)(v260 + 60) == 19)
        {
          unint64_t v275 = *(uint64_t **)(v260 + 48);
          uint64_t v276 = *((unsigned int *)v275 + 4);
          if ((v276 & 0x80000000) != 0) {
            goto LABEL_341;
          }
        }
        else
        {
          unint64_t v275 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          uint64_t v276 = dword_26AEE1BD8;
          if (dword_26AEE1BD8 < 0)
          {
LABEL_341:
            uint64_t v277 = -v272[~v276];
            uint64_t v278 = *((unsigned int *)v275 + 5);
            if ((v278 & 0x80000000) != 0) {
              goto LABEL_342;
            }
            goto LABEL_345;
          }
        }
        uint64_t v277 = v272[v276];
        uint64_t v278 = *((unsigned int *)v275 + 5);
        if ((v278 & 0x80000000) != 0)
        {
LABEL_342:
          uint64_t v279 = -v272[~v278];
          goto LABEL_346;
        }
LABEL_345:
        uint64_t v279 = v272[v278];
LABEL_346:
        if (v277 != v279) {
          goto LABEL_347;
        }
LABEL_315:
        ;
      }
      v347 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v348 = (uint64_t)v255 - __p.__r_.__value_.__r.__words[0];
      if ((int)(((unint64_t)v255 - __p.__r_.__value_.__r.__words[0]) >> 4) < 1)
      {
        if (__p.__r_.__value_.__r.__words[0]) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      }
      uint64_t v349 = 0;
      BOOL v350 = 0;
      uint64_t v351 = (int)(v348 >> 4);
      uint64_t v352 = ((unint64_t)v348 >> 4);
      std::string::size_type v353 = __p.__r_.__value_.__r.__words[0] + 24;
      uint64_t v354 = 1;
      while (2)
      {
        uint64_t v355 = v349 + 1;
        if (v349 + 1 < v351)
        {
          v356 = (void *)(__p.__r_.__value_.__r.__words[0] + 16 * v349);
          uint64_t v357 = *v356;
          uint64_t v358 = v356[1];
          uint64_t v359 = *(unsigned int *)(*v356 + 16);
          uint64_t v360 = *(unsigned int *)(v357 + 20);
          uint64_t v361 = ~v360;
          uint64_t v362 = ~v359;
          std::string::size_type v363 = v353;
          for (uint64_t i5 = v354; v352 != i5; ++i5)
          {
            if ((v360 & 0x80000000) != 0)
            {
              uint64_t v365 = -*((void *)v644 + v361);
              uint64_t v366 = *(void *)(v363 - 8);
              uint64_t v367 = *(unsigned int *)(v366 + 16);
              if ((v367 & 0x80000000) != 0)
              {
LABEL_432:
                if (v365 <= -*((void *)v644 + ~v367)) {
                  goto LABEL_426;
                }
                goto LABEL_433;
              }
            }
            else
            {
              uint64_t v365 = *((void *)v644 + v360);
              uint64_t v366 = *(void *)(v363 - 8);
              uint64_t v367 = *(unsigned int *)(v366 + 16);
              if ((v367 & 0x80000000) != 0) {
                goto LABEL_432;
              }
            }
            if (v365 <= *((void *)v644 + v367)) {
              goto LABEL_426;
            }
LABEL_433:
            uint64_t v368 = *(unsigned int *)(v366 + 20);
            if ((v368 & 0x80000000) != 0)
            {
              uint64_t v369 = -*((void *)v644 + ~v368);
              if ((v359 & 0x80000000) != 0)
              {
LABEL_438:
                if (v369 <= -*((void *)v644 + v362)) {
                  goto LABEL_426;
                }
                goto LABEL_439;
              }
            }
            else
            {
              uint64_t v369 = *((void *)v644 + v368);
              if ((v359 & 0x80000000) != 0) {
                goto LABEL_438;
              }
            }
            if (v369 <= *((void *)v644 + v359)) {
              goto LABEL_426;
            }
LABEL_439:
            uint64_t v370 = *(unsigned int *)(v358 + 20);
            if ((v370 & 0x80000000) != 0)
            {
              uint64_t v371 = -*((void *)v644 + ~v370);
              uint64_t v372 = *(void *)v363;
              uint64_t v373 = *(unsigned int *)(*(void *)v363 + 16);
              if ((v373 & 0x80000000) != 0)
              {
LABEL_444:
                if (v371 <= -*((void *)v644 + ~v373)) {
                  goto LABEL_426;
                }
                goto LABEL_445;
              }
            }
            else
            {
              uint64_t v371 = *((void *)v644 + v370);
              uint64_t v372 = *(void *)v363;
              uint64_t v373 = *(unsigned int *)(*(void *)v363 + 16);
              if ((v373 & 0x80000000) != 0) {
                goto LABEL_444;
              }
            }
            if (v371 <= *((void *)v644 + v373)) {
              goto LABEL_426;
            }
LABEL_445:
            uint64_t v374 = *(unsigned int *)(v372 + 20);
            if ((v374 & 0x80000000) != 0)
            {
              uint64_t v375 = -*((void *)v644 + ~v374);
              uint64_t v376 = *(unsigned int *)(v358 + 16);
              if ((v376 & 0x80000000) != 0)
              {
LABEL_450:
                if (v375 <= -*((void *)v644 + ~v376)) {
                  goto LABEL_426;
                }
                goto LABEL_451;
              }
            }
            else
            {
              uint64_t v375 = *((void *)v644 + v374);
              uint64_t v376 = *(unsigned int *)(v358 + 16);
              if ((v376 & 0x80000000) != 0) {
                goto LABEL_450;
              }
            }
            if (v375 <= *((void *)v644 + v376)) {
              goto LABEL_426;
            }
LABEL_451:
            if ((v359 & 0x80000000) != 0)
            {
              uint64_t v377 = -*((void *)v644 + v362);
              if ((v360 & 0x80000000) != 0)
              {
LABEL_456:
                if (v377 == -*((void *)v644 + v361)) {
                  goto LABEL_426;
                }
                goto LABEL_457;
              }
            }
            else
            {
              uint64_t v377 = *((void *)v644 + v359);
              if ((v360 & 0x80000000) != 0) {
                goto LABEL_456;
              }
            }
            if (v377 == *((void *)v644 + v360)) {
              goto LABEL_426;
            }
LABEL_457:
            if ((v367 & 0x80000000) != 0)
            {
              uint64_t v378 = -*((void *)v644 + ~v367);
              if ((v368 & 0x80000000) != 0)
              {
LABEL_462:
                if (v378 == -*((void *)v644 + ~v368)) {
                  goto LABEL_426;
                }
                goto LABEL_463;
              }
            }
            else
            {
              uint64_t v378 = *((void *)v644 + v367);
              if ((v368 & 0x80000000) != 0) {
                goto LABEL_462;
              }
            }
            if (v378 == *((void *)v644 + v368)) {
              goto LABEL_426;
            }
LABEL_463:
            if ((v376 & 0x80000000) != 0)
            {
              uint64_t v379 = -*((void *)v644 + ~v376);
              if ((v370 & 0x80000000) == 0)
              {
LABEL_465:
                if (v379 == *((void *)v644 + v370)) {
                  goto LABEL_426;
                }
                goto LABEL_469;
              }
            }
            else
            {
              uint64_t v379 = *((void *)v644 + v376);
              if ((v370 & 0x80000000) == 0) {
                goto LABEL_465;
              }
            }
            if (v379 == -*((void *)v644 + ~v370)) {
              goto LABEL_426;
            }
LABEL_469:
            if ((v373 & 0x80000000) != 0) {
              uint64_t v380 = -*((void *)v644 + ~v373);
            }
            else {
              uint64_t v380 = *((void *)v644 + v373);
            }
            if ((v374 & 0x80000000) != 0)
            {
              if (v380 != -*((void *)v644 + ~v374)) {
                goto LABEL_474;
              }
            }
            else if (v380 != *((void *)v644 + v374))
            {
LABEL_474:
              if (*off_26AECFDB8[0] >= 1
                && (off_26AECFDB8[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFDB8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
              {
                v381 = google::LogMessage::LogMessage((google::LogMessage *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 714);
                v382 = (void *)google::LogMessage::stream(v381);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)"Interval ", 9);
                v383 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, (uint64_t)"(x=[", 4);
                v586 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v586, (uint64_t)", ", 2);
                v587 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v587, (uint64_t)"], y=[", 6);
                v588 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v588, (uint64_t)", ", 2);
                v589 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v589, (uint64_t)"]) and ", 7);
                v590 = (void *)std::ostream::operator<<();
                v591 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v590, (uint64_t)"(", 1);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v591, (uint64_t)"(x=[", 4);
                v592 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v592, (uint64_t)", ", 2);
                v593 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v593, (uint64_t)"], y=[", 6);
                v594 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)", ", 2);
                v595 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v595, (uint64_t)"]) are not disjoint.", 20);
                google::LogMessage::~LogMessage((google::LogMessage *)v656);
                operator delete(v347);
                if (!v350) {
                  goto LABEL_866;
                }
                goto LABEL_29;
              }
LABEL_777:
              operator delete(v347);
              if (v350) {
                goto LABEL_29;
              }
              goto LABEL_866;
            }
LABEL_426:
            v363 += 16;
          }
        }
        BOOL v350 = v355 >= v351;
        ++v354;
        v353 += 16;
        ++v349;
        if (v355 != v352) {
          continue;
        }
        break;
      }
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_777;
      }
      if (v355 >= v351) {
        goto LABEL_29;
      }
LABEL_866:
      if (*off_26AECFDA8[0] >= 1
        && (off_26AECFDA8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFDA8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
      {
        v602 = google::LogMessage::LogMessage((google::LogMessage *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1090);
        v603 = (void *)google::LogMessage::stream(v602);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v603, (uint64_t)"Failing constraint #", 20);
        v604 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v604, (uint64_t)" : ", 3);
        google::protobuf::Message::ShortDebugString(&__p);
      }
      uint64_t v23 = 0;
      if (a3 && a4)
      {
        unint64_t v605 = *(int *)(a3 + 24);
        memset(&__p, 0, sizeof(__p));
        if (v605)
        {
          if ((v605 & 0x80000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)operator new(8 * (((v605 - 1) >> 6) + 1));
          __p.__r_.__value_.__r.__words[2] = ((v605 - 1) >> 6) + 1;
          std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v605, 0);
        }
        v606 = *a4;
        v607 = a4[1];
        if (*a4 != v607)
        {
          std::string::size_type v608 = __p.__r_.__value_.__r.__words[0];
          do
          {
            unint64_t v609 = *v606++;
            *(void *)(v608 + ((v609 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v609;
          }
          while (v606 != v607);
        }
        operations_research::sat::UsedVariables(*(operations_research::sat **)(*(void *)(a1 + 56) + 8 * v640 + 8), v656);
        uint64_t v611 = *(void *)&v656[8];
        v610 = *(void **)v656;
        if (*(void *)v656 != *(void *)&v656[8])
        {
          v612 = off_26AECFDB0[0];
          if (*off_26AECFDB0[0] >= 1)
          {
            uint64_t v613 = *(void *)v656 + 4;
LABEL_882:
            uint64_t v614 = *(int *)(v613 - 4);
            if (v612 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_26AECFDB0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v643, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1096);
              v615 = (void *)google::LogMessage::stream((google::LogMessage *)v643);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v615, (uint64_t)"var: ", 5);
              v616 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v616, (uint64_t)" value: ", 8);
              v617 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v617, (uint64_t)" was_fixed: ", 12);
              v618 = (void *)std::ostream::operator<<();
              v619 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v618, (uint64_t)" initial_domain: ", 17);
              uint64_t v620 = *(void *)(*(void *)(a1 + 32) + 8 * v614 + 8);
              operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v620 + 24), *(int *)(v620 + 16), (unint64_t *)__x, v621);
              v622 = operations_research::operator<<(v619, (unint64_t *)__x);
              v623 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v622, (uint64_t)" postsolved_domain: ", 20);
              uint64_t v624 = *(void *)(*(void *)(a3 + 32) + 8 * v614 + 8);
              operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v624 + 24), *(int *)(v624 + 16), v642, v625);
              operations_research::operator<<(v623, v642);
              if (v642[0]) {
                operator delete((void *)v642[1]);
              }
              if (__x[0]) {
                operator delete((void *)v653);
              }
              google::LogMessage::~LogMessage((google::LogMessage *)v643);
            }
            while (v613 != v611)
            {
              v612 = off_26AECFDB0[0];
              v613 += 4;
              if (*off_26AECFDB0[0] >= 1) {
                goto LABEL_882;
              }
            }
            v610 = *(void **)v656;
          }
        }
        if (v610)
        {
          *(void *)&v656[8] = v610;
          operator delete(v610);
        }
        if (__p.__r_.__value_.__r.__words[0]) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = 0;
      }
LABEL_896:
      if (v644) {
        operator delete(v644);
      }
      return v23;
    case 22:
      uint64_t v87 = *(void *)(v27 + 48);
      uint64_t v88 = *(unsigned int *)(v87 + 60);
      unint64_t v89 = v644;
      if ((v88 & 0x80000000) != 0) {
        uint64_t v90 = -*((void *)v644 + ~v88);
      }
      else {
        uint64_t v90 = *((void *)v644 + v88);
      }
      uint64_t v637 = v90;
      unint64_t v398 = *(unsigned int *)(v87 + 16);
      *(void *)v656 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)&v656[8] = 0u;
      long long v657 = 0u;
      uint64_t v658 = 0;
      if ((int)v398 < 1)
      {
        BOOL v25 = 1;
        if (!(void)v657) {
          goto LABEL_557;
        }
        goto LABEL_556;
      }
      uint64_t v399 = 0;
      BOOL v400 = 0;
      unint64_t v632 = v398;
      while (1)
      {
        if (*(_DWORD *)(v27 + 60) == 22) {
          v401 = *(uint64_t **)(v27 + 48);
        }
        else {
          v401 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        }
        operations_research::sat::ConstraintProto::ConstraintProto((operations_research::sat::ConstraintProto *)&__p, *(const operations_research::sat::ConstraintProto **)(*(void *)(a1 + 56)+ 8 * *(int *)(v401[3] + 4 * v399)+ 8));
        if (LODWORD(__p.__r_.__value_.__r.__words[2]))
        {
          v402 = (unsigned int *)v648;
          for (uint64_t i6 = 4 * SLODWORD(__p.__r_.__value_.__r.__words[2]); i6; i6 -= 4)
          {
            uint64_t v404 = *v402;
            if ((v404 & 0x80000000) != 0)
            {
              if (v89[~v404]) {
                goto LABEL_512;
              }
            }
            else if (!v89[v404])
            {
              goto LABEL_512;
            }
            ++v402;
          }
        }
        if (v651 == 19) {
          v405 = v650;
        }
        else {
          v405 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        }
        uint64_t v406 = *((unsigned int *)v405 + 4);
        if ((v406 & 0x80000000) != 0)
        {
          uint64_t v407 = -v89[~v406];
          uint64_t v408 = *((unsigned int *)v405 + 6);
          if ((v408 & 0x80000000) != 0)
          {
LABEL_530:
            uint64_t v409 = -v89[~v408];
            goto LABEL_531;
          }
        }
        else
        {
          uint64_t v407 = v89[v406];
          uint64_t v408 = *((unsigned int *)v405 + 6);
          if ((v408 & 0x80000000) != 0) {
            goto LABEL_530;
          }
        }
        uint64_t v409 = v89[v408];
LABEL_531:
        if (*(_DWORD *)(v27 + 60) == 22) {
          v410 = *(uint64_t **)(v27 + 48);
        }
        else {
          v410 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        }
        uint64_t v411 = *(unsigned int *)(v410[6] + 4 * v399);
        BOOL v634 = v400;
        if ((v411 & 0x80000000) != 0)
        {
          uint64_t v412 = -v89[~v411];
          uint64_t v413 = v409 + v407;
          if (v409 >= 1) {
            goto LABEL_538;
          }
        }
        else
        {
          uint64_t v412 = v89[v411];
          uint64_t v413 = v409 + v407;
          if (v409 >= 1)
          {
LABEL_538:
            while (1)
            {
              uint64_t v414 = 0;
              unint64_t v415 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v407)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v407));
              uint64_t v417 = *(void *)&v656[8];
              uint64_t v416 = *(void *)v656;
              unint64_t v418 = (v415 >> 7) ^ (*(void *)v656 >> 12);
              uint64_t v419 = v657;
              uint64_t v420 = 0x101010101010101 * (v415 & 0x7F);
              for (unint64_t i7 = v418; ; unint64_t i7 = v414 + v422)
              {
                uint64_t v422 = i7 & v657;
                uint64_t v423 = *(void *)(*(void *)v656 + v422);
                unint64_t v424 = ((v423 ^ v420) - 0x101010101010101) & ~(v423 ^ v420) & 0x8080808080808080;
                if (v424) {
                  break;
                }
LABEL_542:
                if ((v423 & (~v423 << 6) & 0x8080808080808080) != 0)
                {
                  unint64_t v425 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert((uint64_t *)v656, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v407)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v407)));
                  uint64_t v417 = *(void *)&v656[8];
                  v426 = (void *)(*(void *)&v656[8] + 16 * v425);
                  void *v426 = v407;
                  v426[1] = 0;
                  uint64_t v416 = *(void *)v656;
                  uint64_t v419 = v657;
                  unint64_t v418 = (v415 >> 7) ^ (*(void *)v656 >> 12);
                  goto LABEL_545;
                }
                v414 += 8;
              }
              while (1)
              {
                unint64_t v425 = (v422 + (__clz(__rbit64(v424)) >> 3)) & v657;
                if (*(void *)(*(void *)&v656[8] + 16 * v425) == v407) {
                  break;
                }
                v424 &= v424 - 1;
                if (!v424) {
                  goto LABEL_542;
                }
              }
LABEL_545:
              uint64_t v427 = 0;
              *(void *)(v417 + 16 * v425 + 8) += v412;
              uint64_t v428 = *(void *)&v656[8];
              while (1)
              {
                unint64_t v429 = v418 & v419;
                uint64_t v430 = *(void *)(v416 + v429);
                unint64_t v431 = ((v430 ^ v420) - 0x101010101010101) & ~(v430 ^ v420) & 0x8080808080808080;
                if (v431) {
                  break;
                }
LABEL_549:
                if ((v430 & (~v430 << 6) & 0x8080808080808080) != 0)
                {
                  unint64_t v432 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert((uint64_t *)v656, v415);
                  uint64_t v428 = *(void *)&v656[8];
                  v433 = (void *)(*(void *)&v656[8] + 16 * v432);
                  void *v433 = v407;
                  v433[1] = 0;
                  goto LABEL_552;
                }
                v427 += 8;
                unint64_t v418 = v427 + v429;
              }
              while (1)
              {
                unint64_t v432 = (v429 + (__clz(__rbit64(v431)) >> 3)) & v419;
                if (*(void *)(*(void *)&v656[8] + 16 * v432) == v407) {
                  break;
                }
                v431 &= v431 - 1;
                if (!v431) {
                  goto LABEL_549;
                }
              }
LABEL_552:
              if (*(void *)(v428 + 16 * v432 + 8) > v637) {
                break;
              }
              if (++v407 >= v413) {
                goto LABEL_511;
              }
            }
            operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)&__p);
            BOOL v25 = v634;
            if (!(void)v657) {
              goto LABEL_557;
            }
            goto LABEL_556;
          }
        }
LABEL_511:
        unint64_t v398 = v632;
LABEL_512:
        operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)&__p);
        BOOL v400 = ++v399 >= v398;
        if (v399 == v398)
        {
          BOOL v25 = 1;
          if (!(void)v657)
          {
LABEL_557:
            uint64_t v26 = (void *)*((void *)&v657 + 1);
            if (*((void *)&v657 + 1)) {
              goto LABEL_27;
            }
            goto LABEL_28;
          }
LABEL_556:
          operator delete(*(void **)v656);
          *(void *)v656 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          uint64_t v658 = 0;
          *(void *)&v656[16] = 0;
          *(void *)&long long v657 = 0;
          *(void *)&v656[8] = 0;
          goto LABEL_557;
        }
      }
    case 23:
      uint64_t v47 = *(unsigned int *)(*(void *)(v27 + 48) + 16);
      memset(&__p, 0, sizeof(__p));
      memset(v656, 0, sizeof(v656));
      if ((int)v47 <= 0) {
        goto LABEL_29;
      }
      uint64_t v48 = 0;
      v633 = 0;
      v635 = 0;
      uint64_t v49 = 0;
      int v50 = 0;
      uint64_t v51 = 0;
      LODWORD(v52) = 0;
      while (1)
      {
        int v53 = *(_DWORD *)(v27 + 60);
        int v54 = *(uint64_t **)(v27 + 48);
        if (v53 == 23) {
          uint64_t v55 = *(uint64_t **)(v27 + 48);
        }
        else {
          uint64_t v55 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
        }
        uint64_t v56 = *(int *)(v55[3] + 4 * v49);
        int v57 = *(_DWORD *)(v55[6] + 4 * v49);
        if ((int)v52 <= (int)v56 + 1) {
          unsigned int v58 = v56 + 1;
        }
        else {
          unsigned int v58 = v52;
        }
        if ((int)v58 <= v57 + 1) {
          unint64_t v52 = (v57 + 1);
        }
        else {
          unint64_t v52 = v58;
        }
        __x[0] = -1;
        unint64_t v59 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v52 <= v59)
        {
          if (v52 < v59) {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0] + 4 * v52;
          }
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)&__p, v52 - v59, __x);
          int v53 = *(_DWORD *)(v27 + 60);
          int v54 = *(uint64_t **)(v27 + 48);
        }
        if (v53 == 23) {
          unsigned int v60 = v54;
        }
        else {
          unsigned int v60 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
        }
        uint64_t v61 = *(unsigned int *)(v60[9] + 4 * v49);
        if ((v61 & 0x80000000) != 0)
        {
          if (!*((void *)v644 + ~v61)) {
            goto LABEL_76;
          }
        }
        else if (*((void *)v644 + v61))
        {
LABEL_76:
          if (v56 == v57)
          {
            if (!v56) {
              goto LABEL_800;
            }
            uint64_t v51 = (v51 + 1);
            goto LABEL_57;
          }
          ++v50;
          if (v56)
          {
            if (*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v56) != -1)
            {
LABEL_800:
              BOOL v485 = 0;
              v387 = *(void **)v656;
              goto LABEL_835;
            }
            *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v56) = v57;
            goto LABEL_57;
          }
          if (v635 < v633)
          {
            *(_DWORD *)v635 = v57;
            BOOL v62 = v635 + 4;
LABEL_107:
            *(void *)&v656[8] = v62;
            v635 = v62;
            goto LABEL_57;
          }
          uint64_t v631 = v51;
          uint64_t v63 = (v635 - v48) >> 2;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v633 - v48) >> 1 > v64) {
            unint64_t v64 = (v633 - v48) >> 1;
          }
          if ((unint64_t)(v633 - v48) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v64;
          }
          if (v65)
          {
            if (v65 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v66 = v65;
            unint64_t v67 = operator new(4 * v65);
            unint64_t v65 = v66;
          }
          else
          {
            unint64_t v67 = 0;
          }
          unint64_t v68 = &v67[4 * v63];
          *(_DWORD *)unint64_t v68 = v57;
          BOOL v62 = v68 + 4;
          if (v635 == v48)
          {
            uint64_t v51 = v631;
          }
          else
          {
            unint64_t v69 = v635 - 4 - v48;
            if (v69 < 0xBC)
            {
              v70 = v635;
              goto LABEL_102;
            }
            if (&v67[v635 - v48 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] <= &v67[v635 - v48 - 4]
              && &v635[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v635 - 4
              && (unint64_t)(v48 - v67) >= 0x20)
            {
              uint64_t v72 = (v69 >> 2) + 1;
              uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
              v70 = &v635[-v73];
              v68 -= v73;
              uint64_t v74 = &v67[4 * v63 - 16];
              int v75 = v635 - 16;
              uint64_t v76 = v72 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v77 = *(_OWORD *)v75;
                *(v74 - 1) = *((_OWORD *)v75 - 1);
                _OWORD *v74 = v77;
                v74 -= 2;
                v75 -= 32;
                v76 -= 8;
              }
              while (v76);
              uint64_t v51 = v631;
              if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_103;
              }
            }
            else
            {
              v70 = v635;
LABEL_102:
              uint64_t v51 = v631;
              do
              {
LABEL_103:
                int v71 = *((_DWORD *)v70 - 1);
                v70 -= 4;
                *((_DWORD *)v68 - 1) = v71;
                v68 -= 4;
              }
              while (v70 != v48);
            }
          }
          *(void *)v656 = v68;
          *(void *)&v656[8] = v62;
          v633 = &v67[4 * v65];
          *(void *)&v656[16] = v633;
          if (v48) {
            operator delete(v48);
          }
          uint64_t v48 = v68;
          goto LABEL_107;
        }
LABEL_57:
        if (++v49 == v47)
        {
          v387 = *(void **)v656;
          if (!v52) {
            goto LABEL_822;
          }
          if (*(char **)v656 == v635)
          {
            int v388 = 0;
          }
          else
          {
            int v388 = 0;
            v389 = *(char **)v656;
            do
            {
              int v390 = *(_DWORD *)v389;
              ++v388;
              while (v390)
              {
                int v390 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v390);
                ++v388;
                if (v390 == -1) {
                  goto LABEL_834;
                }
              }
              v389 += 4;
            }
            while (v389 != v635);
          }
          if (v388 == v50)
          {
            if ((int)v51 + (uint64_t)v50 - ((uint64_t)&v635[-*(void *)v656] >> 2) + 1 == v52)
            {
LABEL_822:
              BOOL v485 = 1;
              goto LABEL_835;
            }
            if (*off_26AECFDC8[0] >= 1
              && (off_26AECFDC8[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_26AECFDC8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
            {
              v583 = google::LogMessage::LogMessage((google::LogMessage *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 893);
              v584 = (void *)google::LogMessage::stream(v583);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v584, (uint64_t)"Not all nodes are covered!", 26);
LABEL_833:
              google::LogMessage::~LogMessage((google::LogMessage *)__x);
            }
          }
          else if (*off_26AECFDC0[0] >= 1 {
                 && (off_26AECFDC0[0] != &google::kLogSiteUninitialized
          }
                  || google::InitVLOG3__((google *)off_26AECFDC0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
          {
            v580 = google::LogMessage::LogMessage((google::LogMessage *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 884);
            v581 = (void *)google::LogMessage::stream(v580);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v581, (uint64_t)"count: ", 7);
            v582 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v582, (uint64_t)" != num_used_arcs:", 18);
            std::ostream::operator<<();
            goto LABEL_833;
          }
LABEL_834:
          BOOL v485 = 0;
LABEL_835:
          if (v387) {
            operator delete(v387);
          }
          v499 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            goto LABEL_839;
          }
LABEL_840:
          if (v485) {
            goto LABEL_29;
          }
          goto LABEL_866;
        }
      }
    case 24:
      uint64_t v194 = *(void *)(v27 + 48);
      uint64_t v195 = *(unsigned int *)(v194 + 16);
      uint64_t v197 = *(void *)(v194 + 88);
      uint64_t v196 = *(void *)(v194 + 96);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      v198 = operator new(0x30uLL);
      *(void *)v198 = 0;
      *((void *)v198 + 1) = 0;
      *((void *)v198 + 2) = &__p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v198;
      *((unsigned char *)v198 + 24) = 1;
      __p.__r_.__value_.__r.__words[2] = 1;
      *((void *)v198 + 4) = 0;
      *((void *)v198 + 5) = 0;
      if (*(_DWORD *)(v27 + 60) == 24) {
        int v199 = *(uint64_t **)(v27 + 48);
      }
      else {
        int v199 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
      }
      if ((int)v195 < 1) {
        goto LABEL_781;
      }
      uint64_t v636 = v197;
      uint64_t v200 = 0;
      int v201 = *((_DWORD *)v199 + 16);
      break;
    case 25:
      uint64_t v314 = *(void *)(v27 + 48);
      std::string::size_type v315 = *(int *)(v314 + 16);
      memset(&__p, 0, sizeof(__p));
      if (v315)
      {
        if ((v315 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v316 = (v315 - 1) >> 6;
        size_t v317 = 8 * (v316 + 1);
        v318 = operator new(v317);
        v319 = v318;
        __p.__r_.__value_.__l.__size_ = v315;
        __p.__r_.__value_.__r.__words[2] = v316 + 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
        if (v315 >= 0x41) {
          unint64_t v320 = (v315 - 1) >> 6;
        }
        else {
          unint64_t v320 = 0;
        }
        v318[v320] = 0;
        uint64_t v321 = v315 >> 6;
        if (v315 >= 0x40) {
          bzero(v318, 8 * (v315 >> 6));
        }
        char v322 = v315 & 0x3F;
        if ((v315 & 0x3F) != 0) {
          v319[v321] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v322);
        }
        v323 = operator new(v317);
        v324 = v323;
        v323[v320] = 0;
        if (v315 >= 0x40) {
          bzero(v323, 8 * (v315 >> 6));
        }
        if ((v315 & 0x3F) != 0) {
          v324[v321] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v322);
        }
        int v325 = *(_DWORD *)(v27 + 60);
        uint64_t v314 = *(void *)(v27 + 48);
      }
      else
      {
        v324 = 0;
        v319 = 0;
        int v325 = 25;
      }
      if (v325 == 25) {
        v546 = (uint64_t *)v314;
      }
      else {
        v546 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
      }
      v547 = (uint64_t *)v546[6];
      int v548 = *((_DWORD *)v546 + 10);
      uint64_t v549 = v548;
      if (v548)
      {
        uint64_t v550 = 8 * v548;
        v551 = (uint64_t *)v546[6];
        do
        {
          uint64_t v552 = *v551++;
          *(void *)((char *)v319 + (((unint64_t)(int)v552 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v552;
          v550 -= 8;
        }
        while (v550);
      }
      memset(v656, 0, sizeof(v656));
      if (v315)
      {
        if ((v315 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v553 = (char *)operator new(4 * v315);
        *(void *)v656 = v553;
        *(void *)&v656[8] = v553;
        *(void *)&v656[16] = &v553[4 * v315];
        memset(v553, 255, 4 * v315);
        v547 = (uint64_t *)v546[6];
        int v548 = *((_DWORD *)v546 + 10);
        uint64_t v549 = v548;
      }
      else
      {
        v553 = 0;
      }
      if (!v548) {
        goto LABEL_760;
      }
      v554 = &v547[v549];
      v555 = v644;
      while (1)
      {
        uint64_t v556 = *v547;
        unint64_t v557 = ((unint64_t)(int)*v547 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)((char *)v324 + v557) |= 1 << *v547;
        v558 = *(uint64_t **)(v27 + 48);
        if (v325 != 25) {
          v558 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
        }
        uint64_t v559 = *(unsigned int *)(v558[3] + 4 * (int)v556);
        if ((v559 & 0x80000000) != 0)
        {
          uint64_t v560 = -v555[~v559];
          if (v560 != v556)
          {
LABEL_745:
            if (*(_DWORD *)(v27 + 60) == 25)
            {
              while (1)
              {
                uint64_t v561 = (int)v560;
                unint64_t v562 = (unint64_t)(int)v560 >> 6;
                uint64_t v563 = 1 << v560;
                if ((v563 & v319[v562]) != 0) {
                  break;
                }
                uint64_t v564 = v324[v562];
                if ((v564 & v563) != 0) {
                  goto LABEL_898;
                }
                v324[v562] = v564 | v563;
                uint64_t v565 = *(unsigned int *)(*(void *)(*(void *)(v27 + 48) + 24) + 4 * v561);
                if ((v565 & 0x80000000) != 0)
                {
                  uint64_t v560 = -v555[~v565];
                  if (v560 == v556) {
                    goto LABEL_738;
                  }
                }
                else
                {
                  uint64_t v560 = v555[v565];
                  if (v560 == v556) {
                    goto LABEL_738;
                  }
                }
              }
            }
            else
            {
              while (1)
              {
                uint64_t v566 = (int)v560;
                unint64_t v567 = (unint64_t)(int)v560 >> 6;
                uint64_t v568 = 1 << v560;
                if ((v568 & v319[v567]) != 0) {
                  break;
                }
                uint64_t v569 = v324[v567];
                if ((v569 & v568) != 0)
                {
LABEL_898:
                  v626 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 917);
                  v627 = (void *)google::LogMessage::stream(v626);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v627, (uint64_t)"Check failed: !visited[node] ", 29);
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
                }
                v324[v567] = v569 | v568;
                uint64_t v570 = *(unsigned int *)(qword_26AEE1E78 + 4 * v566);
                if ((v570 & 0x80000000) != 0)
                {
                  uint64_t v560 = -v555[~v570];
                  if (v560 == v556) {
                    goto LABEL_738;
                  }
                }
                else
                {
                  uint64_t v560 = v555[v570];
                  if (v560 == v556) {
                    goto LABEL_738;
                  }
                }
              }
            }
            BOOL v25 = 0;
LABEL_802:
            if (v553) {
              operator delete(v553);
            }
            if (v324) {
              operator delete(v324);
            }
            if (v319) {
              operator delete(v319);
            }
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v560 = v555[v559];
          if (v560 != v556) {
            goto LABEL_745;
          }
        }
LABEL_738:
        if (++v547 == v554)
        {
LABEL_760:
          if ((int)v315 >= 1)
          {
            unint64_t v571 = 0;
            BOOL v25 = 0;
            if (*(_DWORD *)(v27 + 60) == 25) {
              v572 = *(uint64_t **)(v27 + 48);
            }
            else {
              v572 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
            }
            while (1)
            {
              if (((*(void *)((char *)v324 + ((v571 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v571) & 1) == 0)
              {
                uint64_t v573 = *(unsigned int *)(v572[3] + 4 * v571);
                if ((v573 & 0x80000000) != 0)
                {
                  if (v571 != -*((void *)v644 + ~v573)) {
                    goto LABEL_802;
                  }
                }
                else if (v571 != *((void *)v644 + v573))
                {
                  goto LABEL_802;
                }
              }
              BOOL v25 = (uint64_t)++v571 >= (uint64_t)v315;
              if (v315 == v571) {
                goto LABEL_802;
              }
            }
          }
          BOOL v25 = 1;
          goto LABEL_802;
        }
      }
    case 26:
      uint64_t v38 = *(void *)(v27 + 48);
      uint64_t v39 = *(int *)(v38 + 16);
      if (!v39) {
        goto LABEL_29;
      }
      unsigned int v40 = 0;
      uint64_t v41 = *(unsigned int **)(v38 + 24);
      uint64_t v42 = 4 * v39;
      while (1)
      {
        uint64_t v43 = *v41;
        if ((v43 & 0x80000000) != 0)
        {
          v40 += *((void *)v644 + ~v43) == 0;
          ++v41;
          v42 -= 4;
          if (!v42) {
            goto LABEL_50;
          }
        }
        else
        {
          v40 += *((void *)v644 + v43) != 0;
          ++v41;
          v42 -= 4;
          if (!v42)
          {
LABEL_50:
            if (v40 >= 2) {
              goto LABEL_866;
            }
            goto LABEL_29;
          }
        }
      }
    case 27:
      uint64_t v291 = *(void *)(v27 + 48);
      if (*(void *)(v291 + 40)) {
        long long v292 = *(uint64_t **)(v291 + 40);
      }
      else {
        long long v292 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      }
      uint64_t v293 = v292[8];
      uint64_t v294 = *((unsigned int *)v292 + 4);
      if ((int)v294 < 1) {
        goto LABEL_376;
      }
      v295 = (unsigned int *)v292[3];
      uint64_t v296 = (uint64_t *)v292[6];
      do
      {
        while (1)
        {
          unsigned int v299 = *v295++;
          uint64_t v298 = v299;
          if ((v299 & 0x80000000) == 0) {
            break;
          }
          uint64_t v297 = *v296++;
          v293 += v297 * -*((void *)v644 + ~v298);
          if (!--v294) {
            goto LABEL_376;
          }
        }
        uint64_t v300 = *v296++;
        v293 += v300 * *((void *)v644 + v298);
        --v294;
      }
      while (v294);
LABEL_376:
      uint64_t v301 = *(unsigned int *)(v291 + 24);
      if ((int)v301 < 1)
      {
        int64_t v304 = 0x8000000000000000;
      }
      else
      {
        uint64_t v302 = 0;
        uint64_t v303 = *(void *)(v291 + 32);
        int64_t v304 = 0x8000000000000000;
        do
        {
          uint64_t v305 = *(void *)(v303 + 8 * v302 + 8);
          int64_t v306 = *(void *)(v305 + 64);
          uint64_t v307 = *(unsigned int *)(v305 + 16);
          if ((int)v307 >= 1)
          {
            uint64_t v308 = *(unsigned int **)(v305 + 24);
            v309 = *(uint64_t **)(v305 + 48);
            do
            {
              while (1)
              {
                unsigned int v312 = *v308++;
                uint64_t v311 = v312;
                if ((v312 & 0x80000000) == 0) {
                  break;
                }
                uint64_t v310 = *v309++;
                v306 += v310 * -*((void *)v644 + ~v311);
                if (!--v307) {
                  goto LABEL_378;
                }
              }
              uint64_t v313 = *v309++;
              v306 += v313 * *((void *)v644 + v311);
              --v307;
            }
            while (v307);
          }
LABEL_378:
          if (v304 <= v306) {
            int64_t v304 = v306;
          }
          ++v302;
        }
        while (v302 != v301);
      }
      goto LABEL_733;
    case 28:
      uint64_t v326 = *(void *)(v27 + 48);
      if (*(void *)(v326 + 40)) {
        v327 = *(uint64_t **)(v326 + 40);
      }
      else {
        v327 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      }
      uint64_t v293 = v327[8];
      uint64_t v328 = *((unsigned int *)v327 + 4);
      if ((int)v328 < 1) {
        goto LABEL_409;
      }
      v329 = (unsigned int *)v327[3];
      v330 = (uint64_t *)v327[6];
      while (1)
      {
        unsigned int v333 = *v329++;
        uint64_t v332 = v333;
        if ((v333 & 0x80000000) != 0)
        {
          uint64_t v331 = *v330++;
          v293 += v331 * -*((void *)v644 + ~v332);
          if (!--v328) {
            goto LABEL_409;
          }
        }
        else
        {
          uint64_t v334 = *v330++;
          v293 += v334 * *((void *)v644 + v332);
          if (!--v328)
          {
LABEL_409:
            uint64_t v335 = *(unsigned int *)(v326 + 24);
            if ((int)v335 < 1)
            {
              int64_t v304 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v336 = 0;
              uint64_t v337 = *(void *)(v326 + 32);
              int64_t v304 = 0x7FFFFFFFFFFFFFFFLL;
              do
              {
                uint64_t v338 = *(void *)(v337 + 8 * v336 + 8);
                int64_t v339 = *(void *)(v338 + 64);
                uint64_t v340 = *(unsigned int *)(v338 + 16);
                if ((int)v340 >= 1)
                {
                  v341 = *(unsigned int **)(v338 + 24);
                  v342 = *(uint64_t **)(v338 + 48);
                  do
                  {
                    while (1)
                    {
                      unsigned int v345 = *v341++;
                      uint64_t v344 = v345;
                      if ((v345 & 0x80000000) == 0) {
                        break;
                      }
                      uint64_t v343 = *v342++;
                      v339 += v343 * -*((void *)v644 + ~v344);
                      if (!--v340) {
                        goto LABEL_411;
                      }
                    }
                    uint64_t v346 = *v342++;
                    v339 += v346 * *((void *)v644 + v344);
                    --v340;
                  }
                  while (v340);
                }
LABEL_411:
                if (v339 < v304) {
                  int64_t v304 = v339;
                }
                ++v336;
              }
              while (v336 != v335);
            }
LABEL_733:
            if (v293 == v304) {
              goto LABEL_29;
            }
            goto LABEL_866;
          }
        }
      }
    default:
      v628 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 1087);
      v629 = (void *)google::LogMessage::stream(v628);
      v630 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v629, (uint64_t)"Unuspported constraint: ", 24);
      operations_research::sat::ConstraintCaseName(v32, (char *)&__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v630, (uint64_t)&__p);
      std::string::~string(&__p);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v656);
  }
LABEL_245:
  v202 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
  if (*(_DWORD *)(v27 + 60) == 24) {
    v202 = *(uint64_t **)(v27 + 48);
  }
  uint64_t v203 = *(unsigned int *)(v202[3] + 4 * v200);
  if ((v203 & 0x80000000) != 0)
  {
    uint64_t v204 = v644;
    uint64_t v205 = -*((void *)v644 + ~v203);
    if (v205 < 0)
    {
LABEL_856:
      if (*off_26AECFDD0[0] >= 1
        && (off_26AECFDD0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFDD0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
      {
        v596 = google::LogMessage::LogMessage((google::LogMessage *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 953);
        v597 = (void *)google::LogMessage::stream(v596);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v597, (uint64_t)"reservoir times(", 16);
        v598 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v598, (uint64_t)") is negative.", 14);
        goto LABEL_864;
      }
LABEL_865:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
      goto LABEL_866;
    }
  }
  else
  {
    uint64_t v204 = v644;
    uint64_t v205 = *((void *)v644 + v203);
    if (v205 < 0) {
      goto LABEL_856;
    }
  }
  if (v201 >= 1)
  {
    uint64_t v206 = *(unsigned int *)(v202[9] + 4 * v200);
    if ((v206 & 0x80000000) != 0)
    {
      if (-v204[~v206] != 1) {
        goto LABEL_244;
      }
    }
    else if (v204[v206] != 1)
    {
      goto LABEL_244;
    }
  }
  uint64_t v207 = *(void *)(v202[6] + 8 * v200);
  std::string::size_type v208 = __p.__r_.__value_.__l.__size_;
  for (i8 = &__p.__r_.__value_.__l.__size_; ; std::string::size_type v208 = *i8)
  {
    v210 = (uint64_t **)i8;
    if (!v208) {
      goto LABEL_263;
    }
    while (1)
    {
      i8 = (std::string::size_type *)v208;
      uint64_t v211 = *(void *)(v208 + 32);
      if (v205 < v211) {
        break;
      }
      if (v211 >= v205)
      {
        v212 = (uint64_t *)i8;
        goto LABEL_243;
      }
      std::string::size_type v208 = i8[1];
      if (!v208)
      {
        v210 = (uint64_t **)(i8 + 1);
LABEL_263:
        v212 = (uint64_t *)operator new(0x30uLL);
        v212[4] = v205;
        v212[5] = 0;
        uint64_t *v212 = 0;
        v212[1] = 0;
        v212[2] = (uint64_t)i8;
        char *v210 = v212;
        v213 = v212;
        if (*(void *)__p.__r_.__value_.__l.__data_)
        {
          __p.__r_.__value_.__r.__words[0] = *(void *)__p.__r_.__value_.__l.__data_;
          v213 = *v210;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p.__r_.__value_.__l.__size_, v213);
        ++__p.__r_.__value_.__r.__words[2];
LABEL_243:
        v212[5] += v207;
LABEL_244:
        if (++v200 == v195)
        {
          v198 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v197 = v636;
          if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ == &__p.__r_.__value_.__r.__words[1])
          {
LABEL_794:
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
            goto LABEL_29;
          }
LABEL_781:
          uint64_t v576 = 0;
          while (1)
          {
            v576 += *((void *)v198 + 5);
            if (v576 < v197 || v576 > v196) {
              break;
            }
            v578 = (std::string *)*((void *)v198 + 1);
            if (v578)
            {
              do
              {
                v579 = v578;
                v578 = (std::string *)v578->__r_.__value_.__r.__words[0];
              }
              while (v578);
            }
            else
            {
              do
              {
                v579 = (std::string *)*((void *)v198 + 2);
                BOOL v520 = v579->__r_.__value_.__r.__words[0] == (void)v198;
                v198 = v579;
              }
              while (!v520);
            }
            v198 = v579;
            if (v579 == (std::string *)&__p.__r_.__value_.__r.__words[1]) {
              goto LABEL_794;
            }
          }
          if (*off_26AECFDD8[0] >= 1
            && (off_26AECFDD8[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_26AECFDD8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_checker.cc", (const char *)1)))
          {
            v599 = google::LogMessage::LogMessage((google::LogMessage *)v656, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_checker.cc", 964);
            v600 = (void *)google::LogMessage::stream(v599);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v600, (uint64_t)"Reservoir level ", 16);
            v601 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v601, (uint64_t)" is out of bounds at time", 25);
            std::ostream::operator<<();
LABEL_864:
            google::LogMessage::~LogMessage((google::LogMessage *)v656);
          }
          goto LABEL_865;
        }
        goto LABEL_245;
      }
    }
  }
}

void sub_23CBFA9F4()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_23CBFAA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v30 - 184);
  absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map(v30 - 136);
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a30);
  JUMPOUT(0x23CBFACC4);
}

void sub_23CBFAA34()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_23CBFAA44()
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 136));
  JUMPOUT(0x23CBFACC0);
}

void sub_23CBFAA58()
{
  uint64_t v3 = *(void **)(v2 - 136);
  if (v3)
  {
    *(void *)(v2 - 128) = v3;
    operator delete(v3);
  }
  if (v1) {
    operator delete(v1);
  }
  if (v0) {
    JUMPOUT(0x23CBFACBCLL);
  }
  JUMPOUT(0x23CBFACC4);
}

void sub_23CBFAA6C()
{
}

void sub_23CBFAA78()
{
}

void sub_23CBFAA84()
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 136));
  JUMPOUT(0x23CBFAB5CLL);
}

void sub_23CBFAAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30)
{
  if (a30) {
    operator delete(a30);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_23CBFAAB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
  JUMPOUT(0x23CBFACC4);
}

void sub_23CBFAAD4()
{
  if (v0) {
    JUMPOUT(0x23CBFACC0);
  }
  JUMPOUT(0x23CBFACC4);
}

void sub_23CBFAADC()
{
  absl::lts_2020_02_25::flat_hash_map<long long,long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::~flat_hash_map(v0 - 136);
  JUMPOUT(0x23CBFACC4);
}

void sub_23CBFAAE4()
{
}

void sub_23CBFAAF0()
{
}

void sub_23CBFAB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = *(void **)(v30 - 136);
  if (v31)
  {
    *(void *)(v30 - 128) = v31;
    operator delete(v31);
  }
  if (!a30) {
    JUMPOUT(0x23CBFACC4);
  }
  JUMPOUT(0x23CBFACC0);
}

void sub_23CBFAB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CBFAB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)(v35 - 136));
  _Unwind_Resume(a1);
}

void sub_23CBFAB44(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_23CBFAB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31)
{
}

void sub_23CBFAB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(void *)(v31 - 128) = v33;
    operator delete(v33);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CBFABB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    JUMPOUT(0x23CBFACCCLL);
  }
  JUMPOUT(0x23CBFACD0);
}

void sub_23CBFABC8()
{
  uint64_t v1 = *(void **)(v0 - 136);
  if (v1)
  {
    *(void *)(v0 - 128) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x23CBFAC88);
}

void sub_23CBFABD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *__p)
{
  if (a22) {
    operator delete(__p);
  }
  JUMPOUT(0x23CBFAC30);
}

void sub_23CBFAC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CBFAC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CBFAC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (*(unsigned char *)(v16 - 184)) {
    operator delete(*(void **)(v16 - 176));
  }
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  JUMPOUT(0x23CBFAC78);
}

void sub_23CBFAC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_23CBFAC94()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 184));
}

void sub_23CBFAC9C()
{
  if (v0) {
    JUMPOUT(0x23CBFACA4);
  }
  JUMPOUT(0x23CBFACB0);
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v23 = a1[4];
    if (!v23) {
      return;
    }
LABEL_21:
    *((void *)v23 + 4) = v14 >> 3;
    *((void *)v23 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
             + *(void *)&v5[8 * (void)v13])
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)&v5[8 * (void)v13]));
      uint64_t v19 = *a1;
      unint64_t v20 = a1[3];
      unint64_t v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v21 = (v15 + v21) & (unint64_t)v20;
          unint64_t v22 = *(void *)&v19[v21] & (~*(void *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      unint64_t v16 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v14 += v15;
      char v17 = v18 & 0x7F;
      v19[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)&v5[8 * (void)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v23 = a1[4];
  if (v23) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(void *)(*(void *)(result + 8) + 8 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(void *)(v25 + 8 * v18) = *(void *)(v25 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 8 * v14);
          *(void *)(v25 + 8 * v14) = *(void *)(v25 + 8 * v18);
          *(void *)(v25 + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  int8x16_t v11 = a2 - 2;
  unint64_t v65 = a2 - 6;
  unint64_t v66 = a2 - 4;
  int8x16_t v12 = v10;
  unint64_t v67 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *(a2 - 2);
          uint64_t v28 = *v10;
          if (v27 < *v10 || v28 >= v27 && *(a2 - 1) < v10[1])
          {
            *uint64_t v10 = v27;
            *(a2 - 2) = v28;
            uint64_t v29 = v10[1];
            v10[1] = *(a2 - 1);
            *(a2 - 1) = v29;
          }
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10, v10 + 2, v11);
        case 4uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10, v10 + 2, v10 + 4);
          uint64_t v30 = *(a2 - 2);
          uint64_t v31 = v10[4];
          if (v30 >= v31 && (v31 < v30 || *(a2 - 1) >= v10[5])) {
            return result;
          }
          v10[4] = v30;
          *(a2 - 2) = v31;
          uint64_t v32 = v10[5];
          v10[5] = *(a2 - 1);
          *(a2 - 1) = v32;
          uint64_t v33 = v10[4];
          uint64_t v34 = v10[2];
          if (v33 >= v34)
          {
            if (v34 < v33) {
              return result;
            }
            uint64_t v36 = v10[5];
            uint64_t v35 = v10[3];
            if (v36 >= v35) {
              return result;
            }
          }
          else
          {
            uint64_t v35 = v10[3];
            uint64_t v36 = v10[5];
          }
          v10[2] = v33;
          v10[3] = v36;
          v10[4] = v34;
          v10[5] = v35;
          uint64_t v37 = *v10;
          if (v33 >= *v10)
          {
            if (v37 < v33) {
              return result;
            }
            uint64_t v38 = v10[1];
            if (v36 >= v38) {
              return result;
            }
          }
          else
          {
            uint64_t v38 = v10[1];
          }
          *uint64_t v10 = v33;
          v10[1] = v36;
          v10[2] = v37;
          v10[3] = v38;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10, v10 + 2, v10 + 4, v10 + 6, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v53 = (v15 - 2) >> 1;
        unint64_t v54 = v53 + 1;
        uint64_t v55 = &v10[2 * v53];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>((uint64_t)v10, a3, v14 >> 4, v55);
          v55 -= 2;
          --v54;
        }
        while (v54);
        unint64_t v56 = (unint64_t)v14 >> 4;
        do
        {
          double result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,long long> *>(v10, (uint64_t)a2, a3, v56);
          a2 -= 2;
        }
        while (v56-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = &v10[2 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10, v18, v11);
      uint64_t v19 = a5;
      unint64_t v20 = v11;
      unint64_t v21 = &v10[2 * v17];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10 + 2, v21 - 2, v66);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10 + 4, &v10[2 * v17 + 2], v65);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v21 - 2, v18, &v10[2 * v17 + 2]);
      long long v22 = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v21;
      *(_OWORD *)unint64_t v21 = v22;
      int8x16_t v11 = v20;
      a5 = v19;
      a2 = v67;
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v23 = *(v10 - 2);
    if (v23 >= *v10 && (*v10 < v23 || *(v10 - 1) >= v10[1]))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(v10, a2);
      int8x16_t v12 = (uint64_t *)result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    int v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(v10, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v10, v24);
    int8x16_t v12 = v24 + 2;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(v24 + 2, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *,false>(v10, v24, a3, -v16, a5 & 1);
      int8x16_t v12 = v24 + 2;
      goto LABEL_20;
    }
  }
  uint64_t v39 = v10 + 2;
  BOOL v41 = v10 == a2 || v39 == a2;
  if (a5)
  {
    if (v41) {
      return result;
    }
    uint64_t v42 = 0;
    uint64_t v43 = v10;
LABEL_48:
    uint64_t v44 = v43;
    uint64_t v43 = v39;
    uint64_t v45 = v44[2];
    uint64_t v46 = *v44;
    if (v45 >= *v44)
    {
      if (v46 < v45) {
        goto LABEL_47;
      }
      uint64_t v47 = v44[3];
      if (v47 >= v44[1]) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v47 = v44[3];
    }
    v44[2] = v46;
    v43[1] = v44[1];
    uint64_t v48 = v10;
    if (v44 == v10) {
      goto LABEL_46;
    }
    uint64_t v49 = v42;
    while (1)
    {
      uint64_t v52 = *(uint64_t *)((char *)v10 + v49 - 16);
      if (v45 >= v52)
      {
        if (v52 < v45)
        {
          uint64_t v48 = (uint64_t *)((char *)v10 + v49);
          goto LABEL_46;
        }
        uint64_t v50 = *(uint64_t *)((char *)v10 + v49 - 8);
        if (v47 >= v50)
        {
          uint64_t v48 = v44;
LABEL_46:
          uint64_t *v48 = v45;
          v48[1] = v47;
LABEL_47:
          uint64_t v39 = v43 + 2;
          v42 += 16;
          if (v43 + 2 == a2) {
            return result;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v50 = *(uint64_t *)((char *)v10 + v49 - 8);
      }
      v44 -= 2;
      uint64_t v51 = (uint64_t *)((char *)v10 + v49);
      *uint64_t v51 = v52;
      v51[1] = v50;
      v49 -= 16;
      if (!v49)
      {
        uint64_t v48 = v10;
        goto LABEL_46;
      }
    }
  }
  if (!v41)
  {
    for (unint64_t i = v10 + 1; ; i += 2)
    {
      unint64_t v59 = v10;
      uint64_t v10 = v39;
      uint64_t v60 = v59[2];
      uint64_t v61 = *v59;
      if (v60 < *v59) {
        break;
      }
      if (v61 >= v60)
      {
        uint64_t v62 = v59[3];
        if (v62 < v59[1]) {
          goto LABEL_82;
        }
      }
LABEL_77:
      uint64_t v39 = v10 + 2;
      if (v10 + 2 == a2) {
        return result;
      }
    }
    uint64_t v62 = v59[3];
LABEL_82:
    for (unint64_t j = i; ; j -= 2)
    {
      uint64_t v64 = *j;
      j[1] = v61;
      j[2] = v64;
      uint64_t v61 = *(j - 3);
      if (v60 >= v61 && (v61 < v60 || v62 >= *(j - 2))) {
        break;
      }
    }
    *(j - 1) = v60;
    *unint64_t j = v62;
    goto LABEL_77;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    uint64_t v9 = *a3;
    if (*a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < v9) {
      return 0;
    }
    if (a3[1] < a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      int8x16_t v11 = a2 + 1;
      uint64_t v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      uint64_t v12 = *a2;
      uint64_t v13 = *a1;
      if (*a2 < *a1) {
        goto LABEL_8;
      }
      if (v13 < v12) {
        return 1;
      }
      if (*v11 < a1[1])
      {
LABEL_8:
        *a1 = v12;
        uint64_t v14 = a1 + 1;
        *a2 = v13;
        uint64_t v15 = *v14;
        *uint64_t v14 = *v11;
        *int8x16_t v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      char v6 = a1 + 1;
      *a3 = v4;
      unint64_t v7 = a3 + 1;
      uint64_t v8 = 1;
LABEL_13:
      uint64_t v20 = *v6;
      uint64_t *v6 = *v7;
      *unint64_t v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    uint64_t v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    uint64_t v18 = *a3;
    uint64_t v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      unint64_t v7 = a3 + 1;
      uint64_t v8 = 2;
      char v6 = a2 + 1;
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (a3[1] < v17) {
        goto LABEL_12;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (unint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      uint64_t v7 = i[2];
      i += 2;
      uint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      uint64_t v8 = *(a2 - 2);
      uint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    uint64_t v9 = *i;
    uint64_t v10 = *a2;
    do
    {
      *unint64_t i = v10;
      *a2 = v9;
      uint64_t v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        uint64_t v12 = i[2];
        i += 2;
        uint64_t v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          uint64_t v13 = *(a2 - 2);
          a2 -= 2;
          uint64_t v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,long long> *,std::__less<void,void> &>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  while (1)
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      uint64_t v8 = *(a2 - 2);
      a2 -= 2;
      uint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        uint64_t v10 = *(a2 - 2);
        a2 -= 2;
        uint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    uint64_t v13 = (void *)v6;
  }
  else
  {
    uint64_t v12 = *a2;
    uint64_t v13 = (void *)v6;
    uint64_t v14 = a2;
    do
    {
      *uint64_t v13 = v12;
      *uint64_t v14 = v5;
      uint64_t v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          uint64_t v16 = v13[2];
          v13 += 2;
          uint64_t v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        uint64_t v17 = *(v14 - 2);
        v14 -= 2;
        uint64_t v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v18 = *(a2 - 2);
      uint64_t v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && *(a2 - 1) < a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        uint64_t v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4);
      uint64_t v21 = *(a2 - 2);
      uint64_t v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5])) {
        return 1;
      }
      a1[4] = v21;
      *(a2 - 2) = v22;
      uint64_t v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      uint64_t v24 = a1[4];
      uint64_t v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24) {
          return 1;
        }
        uint64_t v27 = a1[5];
        uint64_t v26 = a1[3];
        if (v27 >= v26) {
          return 1;
        }
      }
      else
      {
        uint64_t v26 = a1[3];
        uint64_t v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      uint64_t v28 = *a1;
      if (v24 < *a1)
      {
        uint64_t v29 = a1[1];
LABEL_44:
        *a1 = v24;
        a1[1] = v27;
        BOOL result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        uint64_t v29 = a1[1];
        if (v27 < v29) {
          goto LABEL_44;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v6 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a1 + 2, a1 + 4);
      uint64_t v7 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        uint64_t v11 = *v7;
        uint64_t v12 = *v6;
        if (*v7 >= *v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          uint64_t v13 = v7[1];
          if (v13 >= v6[1]) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v13 = v7[1];
        }
        *uint64_t v7 = v12;
        v7[1] = v6[1];
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v14 = v8;
        while (2)
        {
          uint64_t v16 = (char *)a1 + v14;
          uint64_t v17 = *(uint64_t *)((char *)a1 + v14 + 16);
          if (v11 < v17)
          {
            uint64_t v15 = *((void *)v16 + 3);
LABEL_13:
            v6 -= 2;
            *((void *)v16 + 4) = v17;
            *(uint64_t *)((char *)a1 + v14 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v15;
            v14 -= 16;
            if (v14 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 >= v11)
        {
          uint64_t v15 = *(uint64_t *)((char *)a1 + v14 + 24);
          if (v13 >= v15)
          {
            uint64_t v10 = (uint64_t *)((char *)a1 + v14 + 32);
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *uint64_t v10 = v11;
        v10[1] = v13;
        if (++v9 == 8) {
          return v7 + 2 == a2;
        }
LABEL_7:
        unint64_t v6 = v7;
        v8 += 16;
        v7 += 2;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(a1, a2, a3);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && a4[1] < a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && a3[1] < a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      uint64_t v17 = *a2;
      uint64_t v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && a2[1] < a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        uint64_t v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  uint64_t v20 = *a5;
  uint64_t v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && a5[1] < a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    uint64_t v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    uint64_t v23 = *a4;
    uint64_t v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && a4[1] < a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a3;
      uint64_t v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && a3[1] < a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        uint64_t v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        uint64_t v29 = *a2;
        uint64_t v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && a2[1] < a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          uint64_t v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,long long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v11 = *v8;
      uint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          uint64_t v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          uint64_t v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = (uint64_t *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              uint64_t v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(void *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            uint64_t v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            uint64_t *v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v14 = v8;
LABEL_14:
        *uint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,long long> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    uint64_t v6 = result[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        uint64_t v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && v8[2 * v9 + 1] < v7[3])
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      uint64_t *v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 16))
    {
      *uint64_t v7 = v5;
      v7[1] = v6;
      return result;
    }
    *uint64_t v7 = *(void *)(a2 - 16);
    v7[1] = *(void *)(a2 - 8);
    *(void *)(a2 - 16) = v5;
    *(void *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[2 * (v14 >> 1)];
      uint64_t v17 = *v16;
      uint64_t v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        uint64_t v19 = v7[1];
        if (result[2 * v15 + 1] >= v19) {
          return result;
        }
      }
      else
      {
        uint64_t v19 = v7[1];
      }
      *uint64_t v7 = v17;
      v7[1] = result[2 * v15 + 1];
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v22 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          uint64_t v20 = &result[2 * v15];
          uint64_t v23 = *v20;
          if (*v20 < v18)
          {
            uint64_t v21 = v20[1];
          }
          else
          {
            if (v18 < v23) {
              break;
            }
            uint64_t v21 = result[2 * v15 + 1];
            if (v21 >= v19) {
              break;
            }
          }
          *uint64_t v16 = v23;
          v16[1] = v21;
          uint64_t v16 = &result[2 * v15];
          if (v22 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v20 = v16;
LABEL_19:
      uint64_t *v20 = v18;
      v20[1] = v19;
    }
  }
  return result;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      uint64_t v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<long long,long long>,long long,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::find_or_prepare_insert<std::pair<long long,long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = v4
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)));
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    unint64_t v13 = (uint64_t *)(a1[1] + 24 * v12);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    if (v15 == v3 && v14 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v27 = a1[4];
    if (!v27) {
      return;
    }
LABEL_21:
    *((void *)v27 + 4) = v14 >> 3;
    *((void *)v27 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v20 = &v5[24 * (void)v13];
      unint64_t v21 = *((void *)v20 + 1)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(void *)v20)));
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = *a1;
      uint64_t v24 = a1[3];
      unint64_t v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v25 = (v15 + v25) & (unint64_t)v24;
          unint64_t v26 = *(void *)&v23[v25] & (~*(void *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      char v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      long long v18 = *(_OWORD *)v20;
      uint64_t v19 = (uint64_t)&a1[1][24 * v16];
      *(void *)(v19 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v27 = a1[4];
  if (v27) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<long long,long long>,long long>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<long long,long long>>,std::equal_to<std::pair<long long,long long>>,std::allocator<std::pair<std::pair<long long,long long> const,long long>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v38 = *(void *)(result + 32);
    if (!v38) {
      return result;
    }
LABEL_26:
    *(void *)(v38 + 32) = v15 >> 3;
    *(void *)(v38 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = *(void *)(*(void *)(result + 8) + 24 * v14 + 8)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(void *)(*(void *)(result + 8) + 24 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(void *)(*(void *)(result + 8) + 24 * v14))));
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 24 * v18;
          uint64_t v27 = (long long *)(v25 + 24 * v14);
          long long v28 = *v27;
          *(void *)(v26 + 16) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v26 = v28;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v29 = (long long *)(v25 + 24 * v14);
          long long v30 = *v29;
          uint64_t v31 = *((void *)v29 + 2);
          uint64_t v32 = (long long *)(v25 + 24 * v18);
          uint64_t v33 = *((void *)v32 + 2);
          *uint64_t v29 = *v32;
          *((void *)v29 + 2) = v33;
          uint64_t v34 = *(void *)(result + 8) + 24 * v18;
          *(_OWORD *)uint64_t v34 = v30;
          *(void *)(v34 + 16) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v35 = v14 - (v14 >> 3);
  BOOL v36 = v14 == 7;
  uint64_t v37 = 6;
  if (!v36) {
    uint64_t v37 = v35;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v37 - *(void *)(result + 16);
  uint64_t v38 = *(void *)(result + 32);
  if (v38) {
    goto LABEL_26;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  int8x16_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  int8x16_t v9 = (char *)operator new(v8 + 4 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int8x16_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int8x16_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int8x16_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)&v5[4 * (void)v13];
      unint64_t v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      unint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_DWORD *)&a1[1][4 * v16] = *(_DWORD *)&v5[4 * (void)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 4 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_DWORD *)(v25 + 4 * v18) = *(_DWORD *)(v25 + 4 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          int v26 = *(_DWORD *)(v25 + 4 * v14);
          *(_DWORD *)(v25 + 4 * v14) = *(_DWORD *)(v25 + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void operations_research::sat::ExpandCpModel(unsigned char *a1, operations_research::sat::PresolveContext *a2, __n128 a3)
{
  uint64_t v1271 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 504)) {
    return;
  }
  uint64_t v3 = (uint64_t)a2;
  operations_research::sat::PresolveContext::InitializeNewDomains(a2, a3);
  uint64_t v1193 = *(unsigned int *)(*(void *)(v3 + 48) + 48);
  if ((int)v1193 >= 1)
  {
    uint64_t v7 = 0;
    __n128 v6 = (__n128)xmmword_23CE7ECE0;
    v1232 = (operations_research::sat::PresolveContext *)v3;
    while (2)
    {
      uint64_t v8 = *(void *)(v3 + 48);
      int8x16_t v9 = *(int **)(v8 + 56);
      *(void *)v1203 = v7;
      v1233 = *(operations_research::sat::ConstraintProto **)&v9[2 * v7 + 2];
      switch(*((_DWORD *)v1233 + 15))
      {
        case 8:
          uint64_t v10 = *((void *)v1233 + 6);
          int8x16_t v11 = *(unsigned int **)(v10 + 24);
          unsigned int v1225 = *v11;
          *(void *)v1198 = v10;
          int v1204 = *(_DWORD *)(v10 + 36);
          unsigned int v1220 = v11[1];
          uint64_t v12 = operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)v1220);
          v1258[0] = v12;
          *(_DWORD *)v1265 = 1;
          if (v12 < 1) {
            google::MakeCheckOpString<long long,int>((int)v1258, (int)v1265, "mod_lb >= 1");
          }
          uint64_t v13 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, (const char *)v1220);
          uint64_t v14 = operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)v1225);
          uint64_t v15 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, (const char *)v1225);
          operations_research::Domain::Domain(v1258, v14 / v13, v15 / v12);
          int v1211 = operations_research::sat::PresolveContext::NewIntVar((operations_research::sat::PresolveContext *)v3, (const operations_research::Domain *)v1258);
          if (v1258[0]) {
            operator delete((void *)v1258[1]);
          }
          uint64_t v16 = *(void *)(v3 + 48);
          unint64_t v17 = *(int **)(v16 + 56);
          if (v17)
          {
            uint64_t v18 = *(int *)(v16 + 48);
            int v19 = *v17;
            if ((int)v18 < *v17)
            {
              *(_DWORD *)(v16 + 48) = v18 + 1;
              unint64_t v20 = *(void *)&v17[2 * v18 + 2];
              if (*(_DWORD *)(v20 + 60) != 7)
              {
LABEL_12:
                operations_research::sat::ConstraintProto::clear_constraint(v20);
                *(_DWORD *)(v20 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 7;
                uint64_t v21 = *(void *)(v20 + 8);
                unint64_t v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
                if (v21) {
                  unint64_t v22 = *(google::protobuf::Arena **)v22;
                }
                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v22);
                uint64_t v24 = v23;
                *(void *)(v20 + 48) = v23;
LABEL_184:
                uint64_t v146 = *(unsigned int *)(v24 + 16);
                *(_DWORD *)(v24 + 36) = v1211;
                unsigned int v147 = v146 + 1;
                if (v146 == *(_DWORD *)(v24 + 20)) {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v146 + 1);
                }
                uint64_t v148 = *(void *)(v24 + 24);
                *(_DWORD *)(v148 + 4 * v146) = v1225;
                *(_DWORD *)(v24 + 16) = v147;
                if (v147 == *(_DWORD *)(v24 + 20))
                {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v146 + 2);
                  uint64_t v148 = *(void *)(v24 + 24);
                }
                *(_DWORD *)(v148 + 4 * v147) = v1220;
                *(_DWORD *)(v24 + 16) = v146 + 2;
                if (*((_DWORD *)v1233 + 4))
                {
                  int v149 = **((_DWORD **)v1233 + 3);
                  uint64_t v150 = *(void *)(*(void *)(*(void *)(v3 + 48) + 56)
                                   + 8 * *(int *)(*(void *)(v3 + 48) + 48));
                  unsigned int v152 = *(_DWORD *)(v150 + 16);
                  uint64_t v151 = v152;
                  int v153 = v152 + 1;
                  if (v152 == *(_DWORD *)(v150 + 20)) {
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v150 + 16), v153);
                  }
                  *(_DWORD *)(*(void *)(v150 + 24) + 4 * v151) = v149;
                  *(_DWORD *)(v150 + 16) = v153;
                }
                if (v12 == v13)
                {
                  uint64_t v154 = *(void *)(v3 + 48);
                  uint64_t v155 = *(int **)(v154 + 56);
                  if (v155)
                  {
                    uint64_t v156 = *(int *)(v154 + 48);
                    int v157 = *v155;
                    if ((int)v156 < *v155)
                    {
                      *(_DWORD *)(v154 + 48) = v156 + 1;
                      unint64_t v158 = *(void *)&v155[2 * v156 + 2];
                      if (*(_DWORD *)(v158 + 60) != 12)
                      {
LABEL_196:
                        operations_research::sat::ConstraintProto::clear_constraint(v158);
                        *(_DWORD *)(v158 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                        uint64_t v159 = *(void *)(v158 + 8);
                        uint64_t v160 = (google::protobuf::Arena *)(v159 & 0xFFFFFFFFFFFFFFFELL);
                        if (v159) {
                          uint64_t v160 = *(google::protobuf::Arena **)v160;
                        }
                        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v160);
                        uint64_t v162 = v161;
                        *(void *)(v158 + 48) = v161;
LABEL_417:
                        int v349 = **(_DWORD **)(*(void *)v1198 + 24);
                        uint64_t v351 = *(unsigned int *)(v162 + 16);
                        BOOL v350 = (unsigned int *)(v162 + 16);
                        unsigned int v352 = v351 + 1;
                        if (v351 == *(_DWORD *)(v162 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v162 + 16), v351 + 1);
                        }
                        *(_DWORD *)(*(void *)(v162 + 24) + 4 * v351) = v349;
                        uint64_t v353 = *(unsigned int *)(v162 + 40);
                        *(_DWORD *)(v162 + 16) = v352;
                        if (v353 == *(_DWORD *)(v162 + 44))
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v162 + 40), v353 + 1);
                          unsigned int v352 = *v350;
                        }
                        *(void *)(*(void *)(v162 + 48) + 8 * v353) = 1;
                        *(_DWORD *)(v162 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v353 + 1;
                        unsigned int v354 = v352 + 1;
                        if (v352 == *(_DWORD *)(v162 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v162 + 16), v352 + 1);
                        }
                        *(_DWORD *)(*(void *)(v162 + 24) + 4 * v352) = v1211;
                        *(_DWORD *)(v162 + 16) = v354;
                        uint64_t v355 = *(unsigned int *)(v162 + 40);
                        if (v355 == *(_DWORD *)(v162 + 44))
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v162 + 40), v355 + 1);
                          unsigned int v354 = *v350;
                        }
                        *(void *)(*(void *)(v162 + 48) + 8 * v355) = -v12;
                        *(_DWORD *)(v162 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v355 + 1;
                        if (v354 == *(_DWORD *)(v162 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v162 + 16), v354 + 1);
                        }
                        *(_DWORD *)(*(void *)(v162 + 24) + 4 * v354) = v1204;
                        *(_DWORD *)(v162 + 16) = v354 + 1;
                        uint64_t v356 = *(unsigned int *)(v162 + 40);
                        if (v356 == *(_DWORD *)(v162 + 44)) {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v162 + 40), v356 + 1);
                        }
                        uint64_t v357 = *(unsigned int *)(v162 + 64);
                        *(void *)(*(void *)(v162 + 48) + 8 * v356) = -1;
                        *(_DWORD *)(v162 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v356 + 1;
                        int v358 = *(_DWORD *)(v162 + 68);
                        unsigned int v359 = v357 + 1;
                        if (v357 == v358)
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v162 + 64), v357 + 1);
                          int v358 = *(_DWORD *)(v162 + 68);
                        }
                        uint64_t v360 = *(void *)(v162 + 72);
                        *(void *)(v360 + 8 * v357) = 0;
                        *(_DWORD *)(v162 + 64) = v359;
                        if (v359 == v358)
                        {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v162 + 64), v357 + 2);
                          uint64_t v360 = *(void *)(v162 + 72);
                        }
                        *(void *)(v360 + 8 * v359) = 0;
                        *(_DWORD *)(v162 + 64) = v357 + 2;
                        uint64_t v361 = v1233;
                        if (!*((_DWORD *)v1233 + 4)) {
                          goto LABEL_479;
                        }
                        int v362 = **((_DWORD **)v1233 + 3);
                        uint64_t v363 = *(void *)(*(void *)(*(void *)(v3 + 48) + 56)
                                         + 8 * *(int *)(*(void *)(v3 + 48) + 48));
                        unsigned int v366 = *(_DWORD *)(v363 + 16);
                        v364 = (unsigned int *)(v363 + 16);
                        uint64_t v365 = v366;
                        int v367 = v366 + 1;
                        if (v366 != *(_DWORD *)(v363 + 20))
                        {
LABEL_478:
                          *(_DWORD *)(*(void *)(v363 + 24) + 4 * v365) = v362;
                          *(_DWORD *)(v363 + 16) = v367;
                          uint64_t v361 = v1233;
LABEL_479:
                          operations_research::sat::ConstraintProto::Clear(v361);
                          HIBYTE(v1258[2]) = 17;
                          strcpy((char *)v1258, "int_mod: expanded");
                          operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1258);
LABEL_623:
                          if (SHIBYTE(v1258[2]) < 0)
                          {
                            uint64_t v467 = (void *)v1258[0];
                            goto LABEL_1506;
                          }
                          goto LABEL_1507;
                        }
LABEL_477:
                        google::protobuf::RepeatedField<int>::Reserve(v364, v367);
                        goto LABEL_478;
                      }
LABEL_416:
                      uint64_t v162 = *(void *)(v158 + 48);
                      goto LABEL_417;
                    }
                    if (v157 != *(_DWORD *)(v154 + 52))
                    {
LABEL_415:
                      int *v155 = v157 + 1;
                      unint64_t v158 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v154 + 40));
                      uint64_t v347 = *(void *)(v154 + 56);
                      uint64_t v348 = *(int *)(v154 + 48);
                      *(_DWORD *)(v154 + 48) = v348 + 1;
                      *(void *)(v347 + 8 * v348 + 8) = v158;
                      if (*(_DWORD *)(v158 + 60) != 12) {
                        goto LABEL_196;
                      }
                      goto LABEL_416;
                    }
                  }
                  else
                  {
                    int v157 = *(_DWORD *)(v154 + 52);
                  }
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v154 + 40), v157 + 1);
                  uint64_t v155 = *(int **)(v154 + 56);
                  int v157 = *v155;
                  goto LABEL_415;
                }
                operations_research::Domain::Domain(v1258, v14 * v12 / v13, v15 * v13 / v12);
                int v163 = operations_research::sat::PresolveContext::NewIntVar((operations_research::sat::PresolveContext *)v3, (const operations_research::Domain *)v1258);
                if (v1258[0]) {
                  operator delete((void *)v1258[1]);
                }
                uint64_t v164 = *(void *)(v3 + 48);
                unint64_t v165 = *(int **)(v164 + 56);
                if (v165)
                {
                  uint64_t v166 = *(int *)(v164 + 48);
                  int v167 = *v165;
                  if ((int)v166 < *v165)
                  {
                    *(_DWORD *)(v164 + 48) = v166 + 1;
                    unint64_t v168 = *(void *)&v165[2 * v166 + 2];
                    if (*(_DWORD *)(v168 + 60) != 11)
                    {
LABEL_204:
                      operations_research::sat::ConstraintProto::clear_constraint(v168);
                      *(_DWORD *)(v168 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 11;
                      uint64_t v169 = *(void *)(v168 + 8);
                      uint64_t v170 = (google::protobuf::Arena *)(v169 & 0xFFFFFFFFFFFFFFFELL);
                      if (v169) {
                        uint64_t v170 = *(google::protobuf::Arena **)v170;
                      }
                      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v170);
                      uint64_t v172 = v171;
                      *(void *)(v168 + 48) = v171;
LABEL_440:
                      uint64_t v370 = *(unsigned int *)(v172 + 16);
                      *(_DWORD *)(v172 + 36) = v163;
                      unsigned int v371 = v370 + 1;
                      if (v370 == *(_DWORD *)(v172 + 20)) {
                        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v172 + 16), v370 + 1);
                      }
                      uint64_t v372 = *(void *)(v172 + 24);
                      *(_DWORD *)(v372 + 4 * v37google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v1211;
                      *(_DWORD *)(v172 + 16) = v371;
                      if (v371 == *(_DWORD *)(v172 + 20))
                      {
                        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v172 + 16), v370 + 2);
                        uint64_t v372 = *(void *)(v172 + 24);
                      }
                      *(_DWORD *)(v372 + 4 * v371) = v1220;
                      *(_DWORD *)(v172 + 16) = v370 + 2;
                      uint64_t v373 = *(void *)(v3 + 48);
                      if (*((_DWORD *)v1233 + 4))
                      {
                        int v374 = **((_DWORD **)v1233 + 3);
                        uint64_t v375 = *(void *)(*(void *)(v373 + 56) + 8 * *(int *)(v373 + 48));
                        unsigned int v377 = *(_DWORD *)(v375 + 16);
                        uint64_t v376 = v377;
                        int v378 = v377 + 1;
                        if (v377 == *(_DWORD *)(v375 + 20))
                        {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v375 + 16), v378);
                          uint64_t v373 = *(void *)(v3 + 48);
                        }
                        *(_DWORD *)(*(void *)(v375 + 24) + 4 * v376) = v374;
                        *(_DWORD *)(v375 + 16) = v378;
                      }
                      uint64_t v379 = *(int **)(v373 + 56);
                      if (v379)
                      {
                        uint64_t v380 = *(int *)(v373 + 48);
                        int v381 = *v379;
                        if ((int)v380 < *v379)
                        {
                          *(_DWORD *)(v373 + 48) = v380 + 1;
                          unint64_t v382 = *(void *)&v379[2 * v380 + 2];
                          if (*(_DWORD *)(v382 + 60) != 12) {
                            goto LABEL_451;
                          }
                          goto LABEL_459;
                        }
                        if (v381 != *(_DWORD *)(v373 + 52))
                        {
LABEL_458:
                          *uint64_t v379 = v381 + 1;
                          unint64_t v382 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v373 + 40));
                          uint64_t v390 = *(void *)(v373 + 56);
                          uint64_t v391 = *(int *)(v373 + 48);
                          *(_DWORD *)(v373 + 48) = v391 + 1;
                          *(void *)(v390 + 8 * v391 + 8) = v382;
                          if (*(_DWORD *)(v382 + 60) != 12)
                          {
LABEL_451:
                            operations_research::sat::ConstraintProto::clear_constraint(v382);
                            *(_DWORD *)(v382 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                            uint64_t v383 = *(void *)(v382 + 8);
                            int v384 = (google::protobuf::Arena *)(v383 & 0xFFFFFFFFFFFFFFFELL);
                            if (v383) {
                              int v384 = *(google::protobuf::Arena **)v384;
                            }
                            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v384);
                            uint64_t v386 = v385;
                            *(void *)(v382 + 48) = v385;
                            uint64_t v387 = *(unsigned int *)(v385 + 16);
                            int v388 = (unsigned int *)(v385 + 16);
                            unsigned int v389 = v387 + 1;
                            if (v387 != *(_DWORD *)(v385 + 20))
                            {
LABEL_461:
                              *(_DWORD *)(*(void *)(v386 + 24) + 4 * v387) = v1225;
                              uint64_t v392 = *(unsigned int *)(v386 + 40);
                              *(_DWORD *)(v386 + 16) = v389;
                              if (v392 == *(_DWORD *)(v386 + 44))
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v386 + 40), v392 + 1);
                                unsigned int v389 = *v388;
                              }
                              *(void *)(*(void *)(v386 + 48) + 8 * v392) = 1;
                              *(_DWORD *)(v386 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v392 + 1;
                              unsigned int v393 = v389 + 1;
                              if (v389 == *(_DWORD *)(v386 + 20)) {
                                google::protobuf::RepeatedField<int>::Reserve(v388, v389 + 1);
                              }
                              *(_DWORD *)(*(void *)(v386 + 24) + 4 * v389) = v163;
                              *(_DWORD *)(v386 + 16) = v393;
                              uint64_t v394 = *(unsigned int *)(v386 + 40);
                              if (v394 == *(_DWORD *)(v386 + 44))
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v386 + 40), v394 + 1);
                                unsigned int v393 = *v388;
                              }
                              *(void *)(*(void *)(v386 + 48) + 8 * v394) = -1;
                              *(_DWORD *)(v386 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v394 + 1;
                              if (v393 == *(_DWORD *)(v386 + 20)) {
                                google::protobuf::RepeatedField<int>::Reserve(v388, v393 + 1);
                              }
                              *(_DWORD *)(*(void *)(v386 + 24) + 4 * v393) = v1204;
                              *(_DWORD *)(v386 + 16) = v393 + 1;
                              uint64_t v395 = *(unsigned int *)(v386 + 40);
                              if (v395 == *(_DWORD *)(v386 + 44)) {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v386 + 40), v395 + 1);
                              }
                              uint64_t v396 = *(unsigned int *)(v386 + 64);
                              *(void *)(*(void *)(v386 + 48) + 8 * v395) = -1;
                              *(_DWORD *)(v386 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v395 + 1;
                              int v397 = *(_DWORD *)(v386 + 68);
                              unsigned int v398 = v396 + 1;
                              if (v396 == v397)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v386 + 64), v396 + 1);
                                int v397 = *(_DWORD *)(v386 + 68);
                              }
                              uint64_t v399 = *(void *)(v386 + 72);
                              *(void *)(v399 + 8 * v396) = 0;
                              *(_DWORD *)(v386 + 64) = v398;
                              if (v398 == v397)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v386 + 64), v396 + 2);
                                uint64_t v399 = *(void *)(v386 + 72);
                              }
                              *(void *)(v399 + 8 * v398) = 0;
                              *(_DWORD *)(v386 + 64) = v396 + 2;
                              uint64_t v361 = v1233;
                              if (!*((_DWORD *)v1233 + 4)) {
                                goto LABEL_479;
                              }
                              int v362 = **((_DWORD **)v1233 + 3);
                              uint64_t v363 = *(void *)(*(void *)(*(void *)(v3 + 48) + 56)
                                               + 8 * *(int *)(*(void *)(v3 + 48) + 48));
                              unsigned int v400 = *(_DWORD *)(v363 + 16);
                              v364 = (unsigned int *)(v363 + 16);
                              uint64_t v365 = v400;
                              int v367 = v400 + 1;
                              if (v400 != *(_DWORD *)(v363 + 20)) {
                                goto LABEL_478;
                              }
                              goto LABEL_477;
                            }
LABEL_460:
                            google::protobuf::RepeatedField<int>::Reserve(v388, v389);
                            goto LABEL_461;
                          }
LABEL_459:
                          uint64_t v386 = *(void *)(v382 + 48);
                          uint64_t v387 = *(unsigned int *)(v386 + 16);
                          int v388 = (unsigned int *)(v386 + 16);
                          unsigned int v389 = v387 + 1;
                          if (v387 != *(_DWORD *)(v386 + 20)) {
                            goto LABEL_461;
                          }
                          goto LABEL_460;
                        }
                      }
                      else
                      {
                        int v381 = *(_DWORD *)(v373 + 52);
                      }
                      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v373 + 40), v381 + 1);
                      uint64_t v379 = *(int **)(v373 + 56);
                      int v381 = *v379;
                      goto LABEL_458;
                    }
LABEL_439:
                    uint64_t v172 = *(void *)(v168 + 48);
                    goto LABEL_440;
                  }
                  if (v167 != *(_DWORD *)(v164 + 52))
                  {
LABEL_438:
                    *unint64_t v165 = v167 + 1;
                    unint64_t v168 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v164 + 40));
                    uint64_t v368 = *(void *)(v164 + 56);
                    uint64_t v369 = *(int *)(v164 + 48);
                    *(_DWORD *)(v164 + 48) = v369 + 1;
                    *(void *)(v368 + 8 * v369 + 8) = v168;
                    if (*(_DWORD *)(v168 + 60) != 11) {
                      goto LABEL_204;
                    }
                    goto LABEL_439;
                  }
                }
                else
                {
                  int v167 = *(_DWORD *)(v164 + 52);
                }
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v164 + 40), v167 + 1);
                unint64_t v165 = *(int **)(v164 + 56);
                int v167 = *v165;
                goto LABEL_438;
              }
LABEL_183:
              uint64_t v24 = *(void *)(v20 + 48);
              goto LABEL_184;
            }
            if (v19 != *(_DWORD *)(v16 + 52))
            {
LABEL_182:
              *unint64_t v17 = v19 + 1;
              unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
              uint64_t v144 = *(void *)(v16 + 56);
              uint64_t v145 = *(int *)(v16 + 48);
              *(_DWORD *)(v16 + 48) = v145 + 1;
              *(void *)(v144 + 8 * v145 + 8) = v20;
              if (*(_DWORD *)(v20 + 60) != 7) {
                goto LABEL_12;
              }
              goto LABEL_183;
            }
          }
          else
          {
            int v19 = *(_DWORD *)(v16 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
          unint64_t v17 = *(int **)(v16 + 56);
          int v19 = *v17;
          goto LABEL_182;
        case 0xB:
          uint64_t v41 = *((void *)v1233 + 6);
          if (*(_DWORD *)(v41 + 16) != 2) {
            goto LABEL_1507;
          }
          uint64_t v42 = *(unsigned int **)(v41 + 24);
          uint64_t v43 = (char *)*v42;
          uint64_t v44 = (char *)v42[1];
          int v45 = *(_DWORD *)(v41 + 36);
          if ((v43 & 0x80000000) != 0
            || operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, (const char *)*v42))
          {
            BOOL v46 = 0;
            if ((v44 & 0x80000000) != 0) {
              goto LABEL_616;
            }
          }
          else
          {
            BOOL v46 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, v43) == 1;
            if ((v44 & 0x80000000) != 0) {
              goto LABEL_616;
            }
          }
          if (!operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v3, v44))
          {
            BOOL v508 = operations_research::sat::PresolveContext::MaxOf((operations_research::sat::PresolveContext *)v3, v44) == 1;
            if (!v46) {
              goto LABEL_621;
            }
LABEL_619:
            if (!v508)
            {
              operations_research::sat::ConstraintProto::Clear(v1233);
              v1258[0] = (unint64_t)operator new(0x30uLL);
              *(_OWORD *)&v1258[1] = xmmword_23CE7ECD0;
              strcpy((char *)v1258[0], "int_prod: expanded product with Boolean var");
              operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1258);
              goto LABEL_623;
            }
LABEL_621:
            if (!v508 || v46) {
              goto LABEL_1507;
            }
            operations_research::sat::ConstraintProto::Clear(v1233);
            v1258[0] = (unint64_t)operator new(0x30uLL);
            *(_OWORD *)&v1258[1] = xmmword_23CE7ECD0;
            strcpy((char *)v1258[0], "int_prod: expanded product with Boolean var");
            operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1258);
            goto LABEL_623;
          }
LABEL_616:
          BOOL v508 = 0;
          if (!v46) {
            goto LABEL_621;
          }
          goto LABEL_619;
        case 0xE:
          if (!a1[460]) {
            goto LABEL_1507;
          }
          uint64_t v55 = (_DWORD *)*((void *)v1233 + 6);
          unint64_t v56 = v55[9];
          unsigned int v1199 = v55[10];
          *(void *)v1226 = v55;
          uint64_t v57 = (int)v55[4];
          operations_research::Domain::Domain(v1258, 0, v57 - 1);
          char v58 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v56, (const operations_research::Domain *)v1258, 0);
          if (v1258[0]) {
            operator delete((void *)v1258[1]);
          }
          if ((v58 & 1) == 0)
          {
            if (*off_26AECFDE8[0] >= 1
              && (off_26AECFDE8[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_26AECFDE8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v1258, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 440);
              uint64_t v143 = (void *)google::LogMessage::stream((google::LogMessage *)v1258);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Empty domain for the index variable in ExpandElement()", 54);
              google::LogMessage::~LogMessage((google::LogMessage *)v1258);
            }
            goto LABEL_237;
          }
          v1258[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_OWORD *)&v1258[1] = 0u;
          long long v1259 = 0u;
          uint64_t v1260 = 0;
          memset(v1265, 0, sizeof(v1265));
          memset(v1262, 0, sizeof(v1262));
          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v56, (unint64_t *)&__str);
          int v1191 = v57;
          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v1199, (unint64_t *)&v1256);
          if (__str.__r_.__value_.__s.__data_[0]) {
            std::string::size_type size = (uint64_t *)__str.__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type size = (uint64_t *)&__str.__r_.__value_.__l.__size_;
          }
          unsigned int v1221 = v56;
          if (__str.__r_.__value_.__r.__words[0] <= 1)
          {
            uint64_t v61 = 0;
            BOOL v62 = v1199 == v56;
            char v1205 = 1;
            goto LABEL_57;
          }
          uint64_t v297 = 0;
          *(void *)v1214 = 0;
          uint64_t v61 = 0;
          v1196 = &size[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
          char v1205 = 1;
          while (1)
          {
            uint64_t v298 = *size;
            if (*size <= size[1]) {
              break;
            }
LABEL_336:
            size += 2;
            if (size == v1196)
            {
              BOOL v62 = v1199 == v56;
              if (v1199 == v56) {
                goto LABEL_57;
              }
              uint64_t v458 = *(const void **)v1262;
              if (*(void *)v1262 == *(void *)&v1262[2]) {
                goto LABEL_57;
              }
              v1252 = 0;
              v1253 = 0;
              v1251 = 0;
              int64_t v459 = *(void *)&v1262[2] - *(void *)v1262;
              if ((uint64_t)(*(void *)&v1262[2] - *(void *)v1262) < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              v1251 = operator new(*(void *)&v1262[2] - *(void *)v1262);
              v1252 = v1251;
              int v460 = (char *)v1251 + 8 * (v459 >> 3);
              v1253 = v460;
              memcpy(v1251, v458, v459);
              v1252 = v460;
              operations_research::Domain::FromValues((int64_t **)&v1251, (unint64_t *)v1254);
              operations_research::Domain::Complement((operations_research::Domain *)v1254, (unint64_t *)&v1268);
              char v461 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v56, (const operations_research::Domain *)&v1268, 0);
              if (v1268.__r_.__value_.__s.__data_[0])
              {
                operator delete((void *)v1268.__r_.__value_.__l.__size_);
                if (((uint64_t)v1254[0] & 1) == 0)
                {
LABEL_542:
                  int v462 = v1251;
                  if (!v1251) {
                    goto LABEL_544;
                  }
                  goto LABEL_543;
                }
              }
              else if (((uint64_t)v1254[0] & 1) == 0)
              {
                goto LABEL_542;
              }
              operator delete(v1254[1]);
              int v462 = v1251;
              if (!v1251)
              {
LABEL_544:
                if (v461)
                {
                  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v56, (unint64_t *)&v1268);
                  if (__str.__r_.__value_.__s.__data_[0]) {
                    operator delete((void *)__str.__r_.__value_.__l.__size_);
                  }
                  BOOL v62 = 0;
                  std::string __str = v1268;
LABEL_57:
                  v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0u;
                  long long v1269 = 0u;
                  std::string::size_type v1270 = 0;
                  if (v62 || (v1205 & 1) == 0) {
                    goto LABEL_838;
                  }
                  v1249 = 0;
                  v1250 = 0;
                  v1248 = 0;
                  uint64_t v63 = *(const void **)v1265;
                  uint64_t v64 = (uint64_t)&v61[-*(void *)v1265];
                  if (v61 != *(char **)v1265)
                  {
                    if (v64 < 0) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    v1248 = operator new((size_t)&v61[-*(void *)v1265]);
                    v1249 = (char *)v1248;
                    unint64_t v65 = (char *)v1248 + 8 * (v64 >> 3);
                    v1250 = v65;
                    memcpy(v1248, v63, v61 - (unsigned char *)v63);
                    v1249 = v65;
                  }
                  operations_research::Domain::FromValues((int64_t **)&v1248, (unint64_t *)v1254);
                  char v66 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, (const char *)v1199, (const operations_research::Domain *)v1254, 0);
                  if ((uint64_t)v1254[0]) {
                    operator delete(v1254[1]);
                  }
                  if (v1248)
                  {
                    v1249 = (char *)v1248;
                    operator delete(v1248);
                  }
                  if ((v66 & 1) == 0)
                  {
                    if (*off_26AECFDF8[0] >= 1
                      && (off_26AECFDF8[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_26AECFDF8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)v1254, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 490);
                      v674 = (void *)google::LogMessage::stream((google::LogMessage *)v1254);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v674, (uint64_t)"Empty domain for the target variable in ExpandElement()", 55);
                      google::LogMessage::~LogMessage((google::LogMessage *)v1254);
                    }
                    goto LABEL_1002;
                  }
                  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)v1199, (unint64_t *)v1254);
                  if (v1256) {
                    operator delete((void *)v1257);
                  }
                  v1256 = (operations_research::sat::PresolveContext *)v1254[0];
                  long long v1257 = *(_OWORD *)&v1254[1];
                  if (operations_research::Domain::Size((operations_research::Domain *)&v1256) == 1)
                  {
                    v1254[0] = (operations_research::sat::PresolveContext **)operator new(0x20uLL);
                    *(_OWORD *)&v1254[1] = xmmword_23CE7ED90;
                    strcpy((char *)v1254[0], "element: one value array");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1254);
                    if (SHIBYTE(v1254[2]) < 0) {
                      operator delete(v1254[0]);
                    }
LABEL_1001:
                    operations_research::sat::ConstraintProto::Clear(v1233);
LABEL_1002:
                    if ((void)v1269)
                    {
                      operator delete(v1268.__r_.__value_.__l.__data_);
                      v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                      std::string::size_type v1270 = 0;
                      *(void *)&long long v1269 = 0;
                      *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0uLL;
                    }
                    if (*((void *)&v1269 + 1)) {
                      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v1269 + 1));
                    }
                    goto LABEL_1006;
                  }
                  v677 = (v1256 & 1) != 0 ? (long long *)v1257 : &v1257;
                  if ((unint64_t)v1256 < 2)
                  {
LABEL_838:
                    uint64_t v678 = *(void *)(v3 + 48);
                    v679 = *(int **)(v678 + 56);
                    if (v679)
                    {
                      uint64_t v680 = *(int *)(v678 + 48);
                      int v681 = *v679;
                      if ((int)v680 < *v679)
                      {
                        *(_DWORD *)(v678 + 48) = v680 + 1;
                        unint64_t v682 = *(void *)&v679[2 * v680 + 2];
                        if (*(_DWORD *)(v682 + 60) != 3)
                        {
LABEL_841:
                          operations_research::sat::ConstraintProto::clear_constraint(v682);
                          *(_DWORD *)(v682 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
                          uint64_t v683 = *(void *)(v682 + 8);
                          v684 = (google::protobuf::Arena *)(v683 & 0xFFFFFFFFFFFFFFFELL);
                          if (v683) {
                            v684 = *(google::protobuf::Arena **)v684;
                          }
                          unint64_t v685 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v684);
                          *(void *)(v682 + 48) = v685;
                          goto LABEL_849;
                        }
LABEL_848:
                        unint64_t v685 = *(void *)(v682 + 48);
LABEL_849:
                        if (__str.__r_.__value_.__s.__data_[0]) {
                          p_std::string::size_type size = (uint64_t *)__str.__r_.__value_.__l.__size_;
                        }
                        else {
                          p_std::string::size_type size = (uint64_t *)&__str.__r_.__value_.__l.__size_;
                        }
                        if (__str.__r_.__value_.__r.__words[0] < 2) {
                          goto LABEL_853;
                        }
                        v1197 = &p_size[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
                        v1216 = (unsigned int *)(v685 + 16);
                        if (v62)
                        {
                          do
                          {
                            uint64_t v699 = *p_size;
                            if (*p_size <= p_size[1])
                            {
                              uint64_t v700 = v699 << 32;
                              do
                              {
                                v701 = (const char *)*(unsigned int *)(*(void *)(*(void *)v1226 + 24)
                                                                     + (v700 >> 30));
                                unsigned int VarValueEncoding = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v56, v699);
                                operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v701, (unint64_t *)v1254);
                                unint64_t v56 = *(unsigned int *)(v685 + 16);
                                if (v56 == *(_DWORD *)(v685 + 20)) {
                                  google::protobuf::RepeatedField<int>::Reserve(v1216, v56 + 1);
                                }
                                *(_DWORD *)(*(void *)(v685 + 24) + 4 * v56) = VarValueEncoding;
                                *(_DWORD *)(v685 + 16) = v56 + 1;
                                operations_research::Domain::Domain(&v1245, v699);
                                operations_research::sat::PresolveContext::AddImplyInDomain((operations_research::sat::PresolveContext *)v3, VarValueEncoding, v701, (const operations_research::Domain *)&v1245);
                                LODWORD(v56) = v1221;
                                if (v1245) {
                                  operator delete(v1246);
                                }
                                if ((uint64_t)v1254[0]) {
                                  operator delete(v1254[1]);
                                }
                                v700 += 0x100000000;
                                BOOL v70 = v699++ < p_size[1];
                              }
                              while (v70);
                            }
                            p_size += 2;
                          }
                          while (p_size != v1197);
LABEL_853:
                          if ((v1205 & 1) == 0)
                          {
                            HIBYTE(v1254[2]) = 17;
                            strcpy((char *)v1254, "element: expanded");
                            operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1254);
LABEL_999:
                            if (SHIBYTE(v1254[2]) < 0) {
                              operator delete(v1254[0]);
                            }
                            goto LABEL_1001;
                          }
                          uint64_t v689 = operations_research::Domain::Min((operations_research::Domain *)&v1256, (const char *)v59);
                          unint64_t v690 = v1258[1];
                          v691 = (void *)v1258[0];
                          if (*(char *)v1258[0] <= -2)
                          {
                            do
                            {
                              unint64_t v692 = (__clz(__rbit64(((*v691 >> 7) & ~*v691 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                              v691 = (void *)((char *)v691 + v692);
                              v690 += 16 * v692;
                            }
                            while (*(char *)v691 < -1);
                          }
                          if (v691 == (void *)(v1258[0] + v1259))
                          {
                            int v694 = -1;
                            uint64_t v693 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else
                          {
                            uint64_t v693 = 0x7FFFFFFFFFFFFFFFLL;
                            int v694 = -1;
                            do
                            {
                              int v695 = *(_DWORD *)(v690 + 8);
                              if (v695 > v694 || (v695 == v694 ? (BOOL v696 = *(void *)v690 < v693) : (BOOL v696 = 0), v696))
                              {
                                uint64_t v693 = *(void *)v690;
                                int v694 = *(_DWORD *)(v690 + 8);
                              }
                              int v697 = *((char *)v691 + 1);
                              v691 = (void *)((char *)v691 + 1);
                              v690 += 16;
                              if (v697 <= -2)
                              {
                                do
                                {
                                  unint64_t v698 = (__clz(__rbit64(((*v691 >> 7) & ~*v691 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                                  v691 = (void *)((char *)v691 + v698);
                                  v690 += 16 * v698;
                                }
                                while (*(char *)v691 < -1);
                              }
                            }
                            while (v691 != (void *)(v1258[0] + v1259));
                          }
                          if (v694 <= v1191 / 10 || v694 <= 2) {
                            uint64_t v784 = v689;
                          }
                          else {
                            uint64_t v784 = v693;
                          }
                          *(void *)v1217 = v784;
                          if (v784 != v689
                            && *off_26AECFE00[0] >= 3
                            && (off_26AECFE00[0] != &google::kLogSiteUninitialized
                             || google::InitVLOG3__((google *)off_26AECFE00, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)3)))
                          {
                            google::LogMessage::LogMessage((google::LogMessage *)v1254, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 589);
                            v785 = (void *)google::LogMessage::stream((google::LogMessage *)v1254);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v785, (uint64_t)"expand element: choose ", 23);
                            v786 = (void *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v786, (uint64_t)" with usage ", 12);
                            v787 = (void *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v787, (uint64_t)" over ", 6);
                            v788 = (void *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v788, (uint64_t)" among ", 7);
                            v789 = (void *)std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v789, (uint64_t)" values.", 8);
                            google::LogMessage::~LogMessage((google::LogMessage *)v1254);
                          }
                          uint64_t v790 = *(void *)(v3 + 48);
                          v791 = *(int **)(v790 + 56);
                          if (v791)
                          {
                            uint64_t v792 = *(int *)(v790 + 48);
                            int v793 = *v791;
                            if ((int)v792 < *v791)
                            {
                              *(_DWORD *)(v790 + 48) = v792 + 1;
                              unint64_t v794 = *(void *)&v791[2 * v792 + 2];
LABEL_981:
                              if (*(_DWORD *)(v794 + 60) == 12)
                              {
                                uint64_t v797 = *(void *)(v794 + 48);
                              }
                              else
                              {
                                operations_research::sat::ConstraintProto::clear_constraint(v794);
                                *(_DWORD *)(v794 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                uint64_t v798 = *(void *)(v794 + 8);
                                v799 = (google::protobuf::Arena *)(v798 & 0xFFFFFFFFFFFFFFFELL);
                                if (v798) {
                                  v799 = *(google::protobuf::Arena **)v799;
                                }
                                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v799);
                                uint64_t v797 = v800;
                                *(void *)(v794 + 48) = v800;
                              }
                              uint64_t v801 = *(unsigned int *)(v797 + 16);
                              v1209 = (unsigned int *)(v797 + 16);
                              int v802 = v801 + 1;
                              if (v801 == *(_DWORD *)(v797 + 20)) {
                                google::protobuf::RepeatedField<int>::Reserve(v1209, v801 + 1);
                              }
                              *(_DWORD *)(*(void *)(v797 + 24) + 4 * v801) = v1199;
                              uint64_t v803 = *(unsigned int *)(v797 + 40);
                              *(_DWORD *)(v797 + 16) = v802;
                              if (v803 == *(_DWORD *)(v797 + 44)) {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v797 + 40), v803 + 1);
                              }
                              uint64_t v804 = -*(void *)v1217;
                              *(void *)(*(void *)(v797 + 48) + 8 * v803) = -1;
                              *(_DWORD *)(v797 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v803 + 1;
                              if (__str.__r_.__value_.__s.__data_[0]) {
                                v805 = (uint64_t *)__str.__r_.__value_.__l.__size_;
                              }
                              else {
                                v805 = (uint64_t *)&__str.__r_.__value_.__l.__size_;
                              }
                              if (__str.__r_.__value_.__r.__words[0] >= 2)
                              {
                                *(void *)v1202 = &v805[2 * (__str.__r_.__value_.__r.__words[0] >> 1)];
                                do
                                {
                                  uint64_t v811 = *v805;
                                  if (*v805 <= v805[1])
                                  {
                                    uint64_t v812 = v811 << 32;
                                    do
                                    {
                                      v813 = (const char *)*(unsigned int *)(*(void *)(*(void *)v1226 + 24)
                                                                           + (v812 >> 30));
                                      unsigned int v814 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v1232, v1221, v811);
                                      operations_research::sat::PresolveContext::DomainOf(v1232, v813, (unint64_t *)v1254);
                                      uint64_t v816 = operations_research::Domain::Min((operations_research::Domain *)v1254, v815);
                                      if ((uint64_t)v1254[0]) {
                                        operator delete(v1254[1]);
                                      }
                                      uint64_t v817 = v816 - *(void *)v1217;
                                      if ((v814 & 0x80000000) != 0)
                                      {
                                        uint64_t v820 = *(unsigned int *)(v797 + 16);
                                        if (v820 == *(_DWORD *)(v797 + 20)) {
                                          google::protobuf::RepeatedField<int>::Reserve(v1209, v820 + 1);
                                        }
                                        *(_DWORD *)(*(void *)(v797 + 24) + 4 * v82google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = ~v814;
                                        *(_DWORD *)(v797 + 16) = v820 + 1;
                                        uint64_t v821 = *(unsigned int *)(v797 + 40);
                                        if (v821 == *(_DWORD *)(v797 + 44)) {
                                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v797 + 40), v821 + 1);
                                        }
                                        *(void *)(*(void *)(v797 + 48) + 8 * v821) = -v817;
                                        *(_DWORD *)(v797 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v821 + 1;
                                        v804 -= v817;
                                      }
                                      else
                                      {
                                        uint64_t v818 = *(unsigned int *)(v797 + 16);
                                        if (v818 == *(_DWORD *)(v797 + 20)) {
                                          google::protobuf::RepeatedField<int>::Reserve(v1209, v818 + 1);
                                        }
                                        *(_DWORD *)(*(void *)(v797 + 24) + 4 * v818) = v814;
                                        *(_DWORD *)(v797 + 16) = v818 + 1;
                                        uint64_t v819 = *(unsigned int *)(v797 + 40);
                                        if (v819 == *(_DWORD *)(v797 + 44)) {
                                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v797 + 40), v819 + 1);
                                        }
                                        *(void *)(*(void *)(v797 + 48) + 8 * v819) = v817;
                                        *(_DWORD *)(v797 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v819 + 1;
                                      }
                                      v812 += 0x100000000;
                                      BOOL v70 = v811++ < v805[1];
                                    }
                                    while (v70);
                                  }
                                  v805 += 2;
                                }
                                while (v805 != *(uint64_t **)v1202);
                              }
                              uint64_t v807 = *(unsigned int *)(v797 + 64);
                              int v806 = *(_DWORD *)(v797 + 68);
                              unsigned int v808 = v807 + 1;
                              uint64_t v3 = (uint64_t)v1232;
                              if (v807 == v806)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v797 + 64), v807 + 1);
                                int v806 = *(_DWORD *)(v797 + 68);
                              }
                              uint64_t v809 = *(void *)(v797 + 72);
                              *(void *)(v809 + 8 * v807) = v804;
                              *(_DWORD *)(v797 + 64) = v808;
                              if (v808 == v806)
                              {
                                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v797 + 64), v807 + 2);
                                uint64_t v809 = *(void *)(v797 + 72);
                              }
                              *(void *)(v809 + 8 * v808) = v804;
                              *(_DWORD *)(v797 + 64) = v807 + 2;
                              v1254[0] = (operations_research::sat::PresolveContext **)operator new(0x20uLL);
                              *(_OWORD *)&v1254[1] = xmmword_23CE7ECA0;
                              strcpy((char *)v1254[0], "element: expanded value element");
                              operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1232, (uint64_t)v1254);
                              goto LABEL_999;
                            }
                            if (v793 != *(_DWORD *)(v790 + 52))
                            {
LABEL_980:
                              int *v791 = v793 + 1;
                              unint64_t v794 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v790 + 40));
                              uint64_t v795 = *(void *)(v790 + 56);
                              uint64_t v796 = *(int *)(v790 + 48);
                              *(_DWORD *)(v790 + 48) = v796 + 1;
                              *(void *)(v795 + 8 * v796 + 8) = v794;
                              goto LABEL_981;
                            }
                          }
                          else
                          {
                            int v793 = *(_DWORD *)(v790 + 52);
                          }
                          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v790 + 40), v793 + 1);
                          v791 = *(int **)(v790 + 56);
                          int v793 = *v791;
                          goto LABEL_980;
                        }
                        while (1)
                        {
                          uint64_t v703 = *p_size;
                          if (*p_size <= p_size[1]) {
                            break;
                          }
LABEL_882:
                          p_size += 2;
                          if (p_size == v1197) {
                            goto LABEL_853;
                          }
                        }
                        while (1)
                        {
                          v704 = (const char *)*(unsigned int *)(*(void *)(*(void *)v1226 + 24) + 4 * (int)v703);
                          v705 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v56, v703);
                          operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v704, (unint64_t *)v1254);
                          uint64_t v706 = *(unsigned int *)(v685 + 16);
                          if (v706 == *(_DWORD *)(v685 + 20)) {
                            google::protobuf::RepeatedField<int>::Reserve(v1216, v706 + 1);
                          }
                          *(_DWORD *)(*(void *)(v685 + 24) + 4 * v706) = v705;
                          *(_DWORD *)(v685 + 16) = v706 + 1;
                          if (operations_research::Domain::Size((operations_research::Domain *)&v1256) == 1)
                          {
                            v707 = &v1256;
                          }
                          else
                          {
                            if (operations_research::Domain::Size((operations_research::Domain *)v1254) != 1)
                            {
                              uint64_t v717 = *(void *)(v3 + 48);
                              v718 = *(int **)(v717 + 56);
                              if (v718)
                              {
                                uint64_t v719 = *(int *)(v717 + 48);
                                int v720 = *v718;
                                if ((int)v719 < *v718)
                                {
                                  *(_DWORD *)(v717 + 48) = v719 + 1;
                                  unint64_t v721 = *(void *)&v718[2 * v719 + 2];
                                  uint64_t v723 = *(unsigned int *)(v721 + 16);
                                  v722 = (unsigned int *)(v721 + 16);
                                  int v724 = v723 + 1;
                                  if (v723 != *(_DWORD *)(v721 + 20))
                                  {
LABEL_910:
                                    *(_DWORD *)(*(void *)(v721 + 24) + 4 * v723) = v705;
                                    *(_DWORD *)(v721 + 16) = v724;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v727 = *(void *)(v721 + 48);
                                      uint64_t v729 = *(unsigned int *)(v727 + 16);
                                      v728 = (unsigned int *)(v727 + 16);
                                      int v730 = v729 + 1;
                                      if (v729 != *(_DWORD *)(v727 + 20)) {
                                        goto LABEL_917;
                                      }
LABEL_916:
                                      google::protobuf::RepeatedField<int>::Reserve(v728, v730);
                                      goto LABEL_917;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v721);
                                    *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                    uint64_t v731 = *(void *)(v721 + 8);
                                    v732 = (google::protobuf::Arena *)(v731 & 0xFFFFFFFFFFFFFFFELL);
                                    if (v731) {
                                      v732 = *(google::protobuf::Arena **)v732;
                                    }
                                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v732);
                                    uint64_t v727 = v733;
                                    *(void *)(v721 + 48) = v733;
                                    uint64_t v729 = *(unsigned int *)(v733 + 16);
                                    int v734 = *(_DWORD *)(v733 + 20);
                                    v728 = (unsigned int *)(v733 + 16);
                                    int v730 = v729 + 1;
                                    if (v729 == v734) {
                                      goto LABEL_916;
                                    }
LABEL_917:
                                    *(_DWORD *)(*(void *)(v727 + 24) + 4 * v729) = v704;
                                    *(_DWORD *)(v727 + 16) = v730;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v735 = *(void *)(v721 + 48);
                                      uint64_t v737 = *(unsigned int *)(v735 + 40);
                                      v736 = (unsigned int *)(v735 + 40);
                                      int v738 = v737 + 1;
                                      if (v737 != *(_DWORD *)(v735 + 44)) {
                                        goto LABEL_924;
                                      }
LABEL_923:
                                      google::protobuf::RepeatedField<long long>::Reserve(v736, v738);
                                      goto LABEL_924;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v721);
                                    *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                    uint64_t v739 = *(void *)(v721 + 8);
                                    v740 = (google::protobuf::Arena *)(v739 & 0xFFFFFFFFFFFFFFFELL);
                                    if (v739) {
                                      v740 = *(google::protobuf::Arena **)v740;
                                    }
                                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v740);
                                    uint64_t v735 = v741;
                                    *(void *)(v721 + 48) = v741;
                                    uint64_t v737 = *(unsigned int *)(v741 + 40);
                                    int v742 = *(_DWORD *)(v741 + 44);
                                    v736 = (unsigned int *)(v741 + 40);
                                    int v738 = v737 + 1;
                                    if (v737 == v742) {
                                      goto LABEL_923;
                                    }
LABEL_924:
                                    *(void *)(*(void *)(v735 + 48) + 8 * v737) = 1;
                                    *(_DWORD *)(v735 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v738;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v743 = *(void *)(v721 + 48);
                                      uint64_t v745 = *(unsigned int *)(v743 + 16);
                                      v744 = (unsigned int *)(v743 + 16);
                                      int v746 = v745 + 1;
                                      if (v745 != *(_DWORD *)(v743 + 20)) {
                                        goto LABEL_931;
                                      }
LABEL_930:
                                      google::protobuf::RepeatedField<int>::Reserve(v744, v746);
                                      goto LABEL_931;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v721);
                                    *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                    uint64_t v747 = *(void *)(v721 + 8);
                                    v748 = (google::protobuf::Arena *)(v747 & 0xFFFFFFFFFFFFFFFELL);
                                    if (v747) {
                                      v748 = *(google::protobuf::Arena **)v748;
                                    }
                                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v748);
                                    uint64_t v743 = v749;
                                    *(void *)(v721 + 48) = v749;
                                    uint64_t v745 = *(unsigned int *)(v749 + 16);
                                    int v750 = *(_DWORD *)(v749 + 20);
                                    v744 = (unsigned int *)(v749 + 16);
                                    int v746 = v745 + 1;
                                    if (v745 == v750) {
                                      goto LABEL_930;
                                    }
LABEL_931:
                                    *(_DWORD *)(*(void *)(v743 + 24) + 4 * v745) = v1199;
                                    *(_DWORD *)(v743 + 16) = v746;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v751 = *(void *)(v721 + 48);
                                      uint64_t v753 = *(unsigned int *)(v751 + 40);
                                      v752 = (unsigned int *)(v751 + 40);
                                      int v754 = v753 + 1;
                                      if (v753 != *(_DWORD *)(v751 + 44)) {
                                        goto LABEL_938;
                                      }
LABEL_937:
                                      google::protobuf::RepeatedField<long long>::Reserve(v752, v754);
                                      goto LABEL_938;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v721);
                                    *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                    uint64_t v755 = *(void *)(v721 + 8);
                                    v756 = (google::protobuf::Arena *)(v755 & 0xFFFFFFFFFFFFFFFELL);
                                    if (v755) {
                                      v756 = *(google::protobuf::Arena **)v756;
                                    }
                                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v756);
                                    uint64_t v751 = v757;
                                    *(void *)(v721 + 48) = v757;
                                    uint64_t v753 = *(unsigned int *)(v757 + 40);
                                    int v758 = *(_DWORD *)(v757 + 44);
                                    v752 = (unsigned int *)(v757 + 40);
                                    int v754 = v753 + 1;
                                    if (v753 == v758) {
                                      goto LABEL_937;
                                    }
LABEL_938:
                                    *(void *)(*(void *)(v751 + 48) + 8 * v753) = -1;
                                    *(_DWORD *)(v751 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v754;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v759 = *(void *)(v721 + 48);
                                      uint64_t v761 = *(unsigned int *)(v759 + 64);
                                      v760 = (unsigned int *)(v759 + 64);
                                      int v762 = v761 + 1;
                                      if (v761 != *(_DWORD *)(v759 + 68)) {
                                        goto LABEL_945;
                                      }
LABEL_944:
                                      google::protobuf::RepeatedField<long long>::Reserve(v760, v762);
                                      goto LABEL_945;
                                    }
                                    operations_research::sat::ConstraintProto::clear_constraint(v721);
                                    *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                    uint64_t v763 = *(void *)(v721 + 8);
                                    v764 = (google::protobuf::Arena *)(v763 & 0xFFFFFFFFFFFFFFFELL);
                                    if (v763) {
                                      v764 = *(google::protobuf::Arena **)v764;
                                    }
                                    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v764);
                                    uint64_t v759 = v765;
                                    *(void *)(v721 + 48) = v765;
                                    uint64_t v761 = *(unsigned int *)(v765 + 64);
                                    int v766 = *(_DWORD *)(v765 + 68);
                                    v760 = (unsigned int *)(v765 + 64);
                                    int v762 = v761 + 1;
                                    if (v761 == v766) {
                                      goto LABEL_944;
                                    }
LABEL_945:
                                    *(void *)(*(void *)(v759 + 72) + 8 * v761) = 0;
                                    *(_DWORD *)(v759 + 64) = v762;
                                    if (*(_DWORD *)(v721 + 60) == 12)
                                    {
                                      uint64_t v767 = *(void *)(v721 + 48);
                                      uint64_t v769 = *(unsigned int *)(v767 + 64);
                                      v768 = (unsigned int *)(v767 + 64);
                                      int v770 = v769 + 1;
                                      if (v769 != *(_DWORD *)(v767 + 68)) {
                                        goto LABEL_952;
                                      }
                                    }
                                    else
                                    {
                                      operations_research::sat::ConstraintProto::clear_constraint(v721);
                                      *(_DWORD *)(v721 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                                      uint64_t v771 = *(void *)(v721 + 8);
                                      v772 = (google::protobuf::Arena *)(v771 & 0xFFFFFFFFFFFFFFFELL);
                                      if (v771) {
                                        v772 = *(google::protobuf::Arena **)v772;
                                      }
                                      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v772);
                                      uint64_t v767 = v773;
                                      *(void *)(v721 + 48) = v773;
                                      uint64_t v769 = *(unsigned int *)(v773 + 64);
                                      int v774 = *(_DWORD *)(v773 + 68);
                                      v768 = (unsigned int *)(v773 + 64);
                                      int v770 = v769 + 1;
                                      if (v769 != v774) {
                                        goto LABEL_952;
                                      }
                                    }
                                    google::protobuf::RepeatedField<long long>::Reserve(v768, v770);
LABEL_952:
                                    *(void *)(*(void *)(v767 + 72) + 8 * v769) = 0;
                                    *(_DWORD *)(v767 + 64) = v770;
                                    goto LABEL_959;
                                  }
LABEL_909:
                                  google::protobuf::RepeatedField<int>::Reserve(v722, v724);
                                  goto LABEL_910;
                                }
                                if (v720 == *(_DWORD *)(v717 + 52))
                                {
LABEL_907:
                                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v717 + 40), v720 + 1);
                                  v718 = *(int **)(v717 + 56);
                                  int v720 = *v718;
                                }
                                int *v718 = v720 + 1;
                                unint64_t v721 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v717 + 40));
                                uint64_t v725 = *(void *)(v717 + 56);
                                uint64_t v726 = *(int *)(v717 + 48);
                                *(_DWORD *)(v717 + 48) = v726 + 1;
                                *(void *)(v725 + 8 * v726 + 8) = v721;
                                uint64_t v723 = *(unsigned int *)(v721 + 16);
                                v722 = (unsigned int *)(v721 + 16);
                                int v724 = v723 + 1;
                                if (v723 != *(_DWORD *)(v721 + 20)) {
                                  goto LABEL_910;
                                }
                                goto LABEL_909;
                              }
                              int v720 = *(_DWORD *)(v717 + 52);
                              goto LABEL_907;
                            }
                            if (v1205)
                            {
                              v1245 = 0;
                              v708 = (void *)operations_research::Domain::Min((operations_research::Domain *)v1254, (const char *)v59);
                              uint64_t v709 = 0;
                              v1245 = v708;
                              unint64_t v710 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                      + (unint64_t)v708)
                                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                         + (void)v708));
                              unint64_t v711 = v1258[1];
                              for (unint64_t i = (v1258[0] >> 12) ^ (v710 >> 7); ; unint64_t i = v709 + v713)
                              {
                                unint64_t v713 = i & v1259;
                                uint64_t v714 = *(void *)(v1258[0] + v713);
                                unint64_t v715 = ((v714 ^ (0x101010101010101 * (v710 & 0x7F))) - 0x101010101010101) & ~(v714 ^ (0x101010101010101 * (v710 & 0x7F))) & 0x8080808080808080;
                                if (v715) {
                                  break;
                                }
LABEL_898:
                                if ((v714 & (~v714 << 6) & 0x8080808080808080) != 0)
                                {
                                  unint64_t v716 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1258, v710);
                                  unint64_t v711 = v1258[1];
                                  unint64_t v775 = v1258[1] + 16 * v716;
                                  *(void *)unint64_t v775 = v1245;
                                  *(_DWORD *)(v775 + 8) = 0;
                                  v708 = v1245;
                                  goto LABEL_954;
                                }
                                v709 += 8;
                              }
                              while (1)
                              {
                                unint64_t v716 = (v713 + (__clz(__rbit64(v715)) >> 3)) & v1259;
                                if (*(void **)(v1258[1] + 16 * v716) == v708) {
                                  break;
                                }
                                v715 &= v715 - 1;
                                if (!v715) {
                                  goto LABEL_898;
                                }
                              }
LABEL_954:
                              if (*(int *)(v711 + 16 * v716 + 8) < 2)
                              {
                                operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, v705, v1199, (uint64_t)v708);
                              }
                              else
                              {
                                int v776 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v1199, (uint64_t)v708);
                                operations_research::sat::PresolveContext::AddImplication((operations_research::sat::PresolveContext *)v3, (int)v705, v776);
                                uint64_t v777 = gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>>((uint64_t *)&v1268, &v1245);
                                uint64_t v778 = *(void *)v777;
                                unsigned int v781 = *(_DWORD *)(*(void *)v777 + 16);
                                v779 = (unsigned int *)(*(void *)v777 + 16);
                                uint64_t v780 = v781;
                                int v782 = v781 + 1;
                                if (v781 == *(_DWORD *)(v778 + 20)) {
                                  google::protobuf::RepeatedField<int>::Reserve(v779, v782);
                                }
                                *(_DWORD *)(*(void *)(v778 + 24) + 4 * v78google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v705;
                                *(_DWORD *)(v778 + 16) = v782;
                              }
                              goto LABEL_959;
                            }
                            v707 = (operations_research::sat::PresolveContext **)v1254;
                            LODWORD(v704) = v1199;
                          }
                          operations_research::sat::PresolveContext::AddImplyInDomain((operations_research::sat::PresolveContext *)v3, v705, v704, (const operations_research::Domain *)v707);
LABEL_959:
                          if ((uint64_t)v1254[0]) {
                            operator delete(v1254[1]);
                          }
                          BOOL v70 = v703++ < p_size[1];
                          if (!v70) {
                            goto LABEL_882;
                          }
                        }
                      }
                      if (v681 != *(_DWORD *)(v678 + 52))
                      {
LABEL_847:
                        int *v679 = v681 + 1;
                        unint64_t v682 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v678 + 40));
                        uint64_t v686 = *(void *)(v678 + 56);
                        uint64_t v687 = *(int *)(v678 + 48);
                        *(_DWORD *)(v678 + 48) = v687 + 1;
                        *(void *)(v686 + 8 * v687 + 8) = v682;
                        if (*(_DWORD *)(v682 + 60) != 3) {
                          goto LABEL_841;
                        }
                        goto LABEL_848;
                      }
                    }
                    else
                    {
                      int v681 = *(_DWORD *)(v678 + 52);
                    }
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v678 + 40), v681 + 1);
                    v679 = *(int **)(v678 + 56);
                    int v681 = *v679;
                    goto LABEL_847;
                  }
                  v822 = &v677[(unint64_t)v1256 >> 1];
                  while (1)
                  {
                    v1254[0] = 0;
                    uint64_t v823 = *((void *)v677 + 1);
                    v1254[0] = *(operations_research::sat::PresolveContext ***)v677;
                    if ((uint64_t)v1254[0] <= v823) {
                      break;
                    }
LABEL_1039:
                    if (++v677 == v822) {
                      goto LABEL_838;
                    }
                  }
                  while (*(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>((uint64_t *)v1258, v1254) < 2)
                  {
LABEL_1043:
                    v824 = v1254[0]++;
                    if ((uint64_t)v824 >= *((void *)v677 + 1)) {
                      goto LABEL_1039;
                    }
                  }
                  unsigned int v825 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, v1199, (uint64_t)v1254[0]);
                  uint64_t v826 = *(void *)(v3 + 48);
                  v827 = *(int **)(v826 + 56);
                  if (v827)
                  {
                    uint64_t v828 = *(int *)(v826 + 48);
                    int v829 = *v827;
                    if ((int)v828 < *v827)
                    {
                      *(_DWORD *)(v826 + 48) = v828 + 1;
                      unint64_t v830 = *(void *)&v827[2 * v828 + 2];
                      if (*(_DWORD *)(v830 + 60) != 3)
                      {
LABEL_1048:
                        operations_research::sat::ConstraintProto::clear_constraint(v830);
                        *(_DWORD *)(v830 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
                        uint64_t v831 = *(void *)(v830 + 8);
                        v832 = (google::protobuf::Arena *)(v831 & 0xFFFFFFFFFFFFFFFELL);
                        if (v831) {
                          v832 = *(google::protobuf::Arena **)v832;
                        }
                        unint64_t v833 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v832);
                        *(void *)(v830 + 48) = v833;
LABEL_1056:
                        uint64_t v836 = 0;
                        unint64_t v59 = ((((unint64_t)v1254[0]
                               + (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed)
                              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                 * ((void)v1254[0]
                                                                                  + (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed));
                        std::string::size_type v837 = v1268.__r_.__value_.__l.__size_;
                        for (std::string::size_type j = (v59 >> 7) ^ (v1268.__r_.__value_.__r.__words[0] >> 12); ; std::string::size_type j = v836 + v839)
                        {
                          std::string::size_type v839 = j & v1269;
                          uint64_t v840 = *(void *)(v1268.__r_.__value_.__r.__words[0] + v839);
                          unint64_t v841 = ((v840 ^ (0x101010101010101 * (v59 & 0x7F))) - 0x101010101010101) & ~(v840 ^ (0x101010101010101 * (v59 & 0x7F))) & 0x8080808080808080;
                          if (v841) {
                            break;
                          }
LABEL_1060:
                          if ((v840 & (~v840 << 6) & 0x8080808080808080) != 0)
                          {
                            unint64_t v842 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::prepare_insert((uint64_t *)&v1268, v59);
                            std::string::size_type v837 = v1268.__r_.__value_.__l.__size_;
                            std::string::size_type v843 = v1268.__r_.__value_.__l.__size_ + 16 * v842;
                            *(operations_research::sat::PresolveContext ***)std::string::size_type v843 = v1254[0];
                            *(void *)(v843 + 8) = 0;
                            goto LABEL_1063;
                          }
                          v836 += 8;
                        }
                        while (1)
                        {
                          unint64_t v842 = (v839 + (__clz(__rbit64(v841)) >> 3)) & v1269;
                          if (*(operations_research::sat::PresolveContext ***)(v1268.__r_.__value_.__l.__size_
                                                                              + 16 * v842) == v1254[0])
                            break;
                          v841 &= v841 - 1;
                          if (!v841) {
                            goto LABEL_1060;
                          }
                        }
LABEL_1063:
                        *(void *)(v837 + 16 * v842 + 8) = v833;
                        uint64_t v844 = *(unsigned int *)(v833 + 16);
                        if (v844 == *(_DWORD *)(v833 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v833 + 16), v844 + 1);
                        }
                        *(_DWORD *)(*(void *)(v833 + 24) + 4 * v844) = ~v825;
                        *(_DWORD *)(v833 + 16) = v844 + 1;
                        goto LABEL_1043;
                      }
LABEL_1055:
                      unint64_t v833 = *(void *)(v830 + 48);
                      goto LABEL_1056;
                    }
                    if (v829 != *(_DWORD *)(v826 + 52))
                    {
LABEL_1054:
                      int *v827 = v829 + 1;
                      unint64_t v830 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v826 + 40));
                      uint64_t v834 = *(void *)(v826 + 56);
                      uint64_t v835 = *(int *)(v826 + 48);
                      *(_DWORD *)(v826 + 48) = v835 + 1;
                      *(void *)(v834 + 8 * v835 + 8) = v830;
                      if (*(_DWORD *)(v830 + 60) != 3) {
                        goto LABEL_1048;
                      }
                      goto LABEL_1055;
                    }
                  }
                  else
                  {
                    int v829 = *(_DWORD *)(v826 + 52);
                  }
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v826 + 40), v829 + 1);
                  v827 = *(int **)(v826 + 56);
                  int v829 = *v827;
                  goto LABEL_1054;
                }
                if (*off_26AECFDF0[0] >= 1
                  && (off_26AECFDF0[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_26AECFDF0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1)))
                {
                  v675 = google::LogMessage::LogMessage((google::LogMessage *)&v1268, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 473);
                  v676 = (void *)google::LogMessage::stream(v675);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v676, (uint64_t)"No compatible variable domains in ExpandElement()", 49);
                  google::LogMessage::~LogMessage((google::LogMessage *)&v1268);
                }
                *((unsigned char *)&v1268.__r_.__value_.__s + 23) = 0;
                v1268.__r_.__value_.__s.__data_[0] = 0;
                operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1268);
                if (SHIBYTE(v1268.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v1268.__r_.__value_.__l.__data_);
                }
LABEL_1006:
                if (v1256)
                {
                  operator delete((void *)v1257);
                  if ((__str.__r_.__value_.__s.__data_[0] & 1) == 0)
                  {
LABEL_1008:
                    v810 = *(void **)v1262;
                    if (!*(void *)v1262) {
                      goto LABEL_1010;
                    }
                    goto LABEL_1009;
                  }
                }
                else if ((__str.__r_.__value_.__s.__data_[0] & 1) == 0)
                {
                  goto LABEL_1008;
                }
                operator delete((void *)__str.__r_.__value_.__l.__size_);
                v810 = *(void **)v1262;
                if (!*(void *)v1262)
                {
LABEL_1010:
                  if (*(void *)v1265) {
                    operator delete(*(void **)v1265);
                  }
                  if ((void)v1259)
                  {
                    operator delete((void *)v1258[0]);
                    v1258[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    uint64_t v1260 = 0;
                    v1258[2] = 0;
                    *(void *)&long long v1259 = 0;
                    v1258[1] = 0;
                  }
                  v641 = (void *)*((void *)&v1259 + 1);
                  if (!*((void *)&v1259 + 1)) {
                    goto LABEL_1507;
                  }
                  goto LABEL_784;
                }
LABEL_1009:
                operator delete(v810);
                goto LABEL_1010;
              }
LABEL_543:
              v1252 = v462;
              operator delete(v462);
              goto LABEL_544;
            }
          }
          while (1)
          {
            operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)*(unsigned int *)(*(void *)(*(void *)v1226 + 24) + 4 * (int)v298), (unint64_t *)&v1268);
            operations_research::Domain::IntersectionWith(&v1268, (const operations_research::Domain *)&v1256, (unint64_t *)v1254);
            BOOL IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)v1254);
            if ((uint64_t)v1254[0]) {
              operator delete(v1254[1]);
            }
            if (IsEmpty) {
              break;
            }
            uint64_t v302 = operations_research::Domain::Min((operations_research::Domain *)&v1268, (const char *)v59);
            if (v302 != operations_research::Domain::Max((operations_research::Domain *)&v1268, v303))
            {
              char v1205 = 0;
              int v319 = 4;
              goto LABEL_397;
            }
            unint64_t v56 = v1221;
            uint64_t v304 = operations_research::Domain::Min((operations_research::Domain *)&v1268, (const char *)v59);
            uint64_t v305 = 0;
            unint64_t v59 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v304)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v304));
            unint64_t v306 = v1258[1];
            for (unint64_t k = (v1258[0] >> 12) ^ (v59 >> 7); ; unint64_t k = v305 + v308)
            {
              unint64_t v308 = k & v1259;
              uint64_t v309 = *(void *)(v1258[0] + v308);
              unint64_t v310 = ((v309 ^ (0x101010101010101 * (v59 & 0x7F))) - 0x101010101010101) & ~(v309 ^ (0x101010101010101 * (v59 & 0x7F))) & 0x8080808080808080;
              if (v310) {
                break;
              }
LABEL_351:
              if ((v309 & (~v309 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v311 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1258, v59);
                unint64_t v306 = v1258[1];
                unint64_t v329 = v1258[1] + 16 * v311;
                *(void *)unint64_t v329 = v304;
                *(_DWORD *)(v329 + 8) = 0;
                goto LABEL_375;
              }
              v305 += 8;
            }
            while (1)
            {
              unint64_t v311 = (v308 + (__clz(__rbit64(v310)) >> 3)) & v1259;
              if (*(void *)(v1258[1] + 16 * v311) == v304) {
                break;
              }
              v310 &= v310 - 1;
              if (!v310) {
                goto LABEL_351;
              }
            }
LABEL_375:
            unint64_t v330 = v306 + 16 * v311;
            int v331 = *(_DWORD *)(v330 + 8);
            *(_DWORD *)(v330 + 8) = v331 + 1;
            if (!v331)
            {
              if ((unint64_t)v61 < *(void *)v1214)
              {
                *(void *)uint64_t v61 = v304;
                uint64_t v332 = (uint64_t)(v61 + 8);
                goto LABEL_396;
              }
              uint64_t v333 = (v61 - v297) >> 3;
              unint64_t v334 = v333 + 1;
              if ((unint64_t)(v333 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(*(void *)v1214 - (void)v297) >> 2 > v334) {
                unint64_t v334 = (uint64_t)(*(void *)v1214 - (void)v297) >> 2;
              }
              if (*(void *)v1214 - (void)v297 >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v335 = v334;
              }
              if (v335)
              {
                if (v335 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v336 = operator new(8 * v335);
                uint64_t v337 = (uint64_t *)&v336[8 * v333];
                *uint64_t v337 = v304;
                uint64_t v332 = (uint64_t)(v337 + 1);
                if (v61 == v297) {
                  goto LABEL_393;
                }
LABEL_390:
                unint64_t v338 = v61 - 8 - v297;
                if (v338 < 0x168)
                {
                  int64_t v339 = v61;
                  goto LABEL_392;
                }
                if (&v336[v61 - v297 - 8 - (v338 & 0xFFFFFFFFFFFFFFF8)] > &v336[v61 - v297 - 8])
                {
                  int64_t v339 = v61;
                  goto LABEL_392;
                }
                if (&v61[-(v338 & 0xFFFFFFFFFFFFFFF8) - 8] > v61 - 8)
                {
                  int64_t v339 = v61;
                  goto LABEL_392;
                }
                if ((unint64_t)(v297 - v336) < 0x20)
                {
                  int64_t v339 = v61;
                  goto LABEL_392;
                }
                uint64_t v341 = (v338 >> 3) + 1;
                uint64_t v342 = 8 * (v341 & 0x3FFFFFFFFFFFFFFCLL);
                int64_t v339 = &v61[-v342];
                uint64_t v337 = (uint64_t *)((char *)v337 - v342);
                uint64_t v343 = &v336[8 * v333 - 16];
                uint64_t v344 = v61 - 16;
                uint64_t v345 = v341 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v346 = *(_OWORD *)v344;
                  *(v343 - 1) = *((_OWORD *)v344 - 1);
                  *uint64_t v343 = v346;
                  v343 -= 2;
                  v344 -= 32;
                  v345 -= 4;
                }
                while (v345);
                if (v341 != (v341 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_392:
                    uint64_t v340 = *((void *)v339 - 1);
                    v339 -= 8;
                    *--uint64_t v337 = v340;
                  }
                  while (v339 != v297);
                }
              }
              else
              {
                uint64_t v336 = 0;
                uint64_t v337 = (uint64_t *)(8 * v333);
                *(void *)(8 * v333) = v304;
                uint64_t v332 = 8 * v333 + 8;
                if (v61 != v297) {
                  goto LABEL_390;
                }
              }
LABEL_393:
              *(void *)v1265 = v337;
              *(void *)&v1265[8] = v332;
              *(void *)v1214 = &v336[8 * v335];
              *(void *)&v1265[16] = *(void *)v1214;
              if (v297) {
                operator delete(v297);
              }
              uint64_t v297 = (char *)v337;
              uint64_t v3 = (uint64_t)v1232;
LABEL_396:
              int v319 = 0;
              *(void *)&v1265[8] = v332;
              uint64_t v61 = (char *)v332;
LABEL_397:
              unint64_t v56 = v1221;
              goto LABEL_398;
            }
            int v319 = 0;
LABEL_398:
            if (v1268.__r_.__value_.__s.__data_[0]) {
              operator delete((void *)v1268.__r_.__value_.__l.__size_);
            }
            if (v319 == 6 || !v319)
            {
              BOOL v70 = v298++ < size[1];
              if (v70) {
                continue;
              }
            }
            goto LABEL_336;
          }
          uint64_t v300 = *(char **)&v1262[2];
          if (*(void *)&v1262[2] < *(void *)&v1262[4])
          {
            **(void **)&v1262[2] = v298;
            uint64_t v301 = (uint64_t)(v300 + 8);
LABEL_373:
            unint64_t v56 = v1221;
            *(void *)&v1262[2] = v301;
            int v319 = 6;
            uint64_t v3 = (uint64_t)v1232;
            goto LABEL_398;
          }
          unsigned int v312 = *(char **)v1262;
          uint64_t v313 = (uint64_t)(*(void *)&v1262[2] - *(void *)v1262) >> 3;
          unint64_t v314 = v313 + 1;
          if ((unint64_t)(v313 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v315 = *(void *)&v1262[4] - *(void *)v1262;
          if ((uint64_t)(*(void *)&v1262[4] - *(void *)v1262) >> 2 > v314) {
            unint64_t v314 = v315 >> 2;
          }
          if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v316 = v314;
          }
          if (v316)
          {
            if (v316 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            size_t v317 = operator new(8 * v316);
            v318 = &v317[8 * v313];
            void *v318 = v298;
            uint64_t v301 = (uint64_t)(v318 + 1);
            if (v300 == v312) {
              goto LABEL_371;
            }
          }
          else
          {
            size_t v317 = 0;
            v318 = (void *)(8 * v313);
            *(void *)(8 * v313) = v298;
            uint64_t v301 = 8 * v313 + 8;
            if (v300 == v312)
            {
LABEL_371:
              *(void *)v1262 = v318;
              *(void *)&v1262[4] = &v317[8 * v316];
              if (v312) {
                operator delete(v312);
              }
              goto LABEL_373;
            }
          }
          unint64_t v320 = v300 - 8 - v312;
          if (v320 < 0x58) {
            goto LABEL_1561;
          }
          if ((unint64_t)(v312 - v317) < 0x20) {
            goto LABEL_1561;
          }
          uint64_t v321 = (v320 >> 3) + 1;
          uint64_t v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
          v323 = &v300[-v322];
          v318 = (void *)((char *)v318 - v322);
          v324 = &v317[8 * v313 - 16];
          int v325 = v300 - 16;
          uint64_t v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v327 = *(_OWORD *)v325;
            *(v324 - 1) = *((_OWORD *)v325 - 1);
            _OWORD *v324 = v327;
            v324 -= 2;
            v325 -= 32;
            v326 -= 4;
          }
          while (v326);
          uint64_t v300 = v323;
          if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1561:
            do
            {
              uint64_t v328 = *((void *)v300 - 1);
              v300 -= 8;
              *--v318 = v328;
            }
            while (v300 != v312);
          }
          goto LABEL_371;
        case 0x10:
          uint64_t v67 = *((void *)v1233 + 6);
          if (!*(unsigned char *)(v67 + 60))
          {
            if (a1[462]) {
            goto LABEL_1507;
            }
          }
          uint64_t v68 = *(unsigned int *)(v67 + 16);
          uint64_t v69 = (*(_DWORD *)(v67 + 40) / (int)v68);
          std::vector<std::vector<long long>>::vector(v1258, (int)v69);
          BOOL v70 = (int)v69 < 1 || (int)v68 < 1;
          *(void *)v1227 = v67;
          *(void *)v1206 = v68;
          if (v70) {
            goto LABEL_79;
          }
          unint64_t v173 = 0;
          int v174 = 0;
          *(void *)v1200 = v69;
          while (2)
          {
            uint64_t v175 = v174;
            v174 += v68;
            int v1212 = v174;
            v1223 = v173;
            do
            {
              while (1)
              {
                unint64_t v176 = v1258[0] + 24 * (void)v173;
                uint64_t v177 = *(void *)(*(void *)(v67 + 48) + 8 * v175);
                v179 = (uint64_t *)(v176 + 8);
                int v178 = *(char **)(v176 + 8);
                unint64_t v180 = *(void *)(v176 + 16);
                if ((unint64_t)v178 >= v180) {
                  break;
                }
                *(void *)int v178 = v177;
                ++v175;
                uint64_t *v179 = (uint64_t)(v178 + 8);
                if (v174 == v175) {
                  goto LABEL_207;
                }
              }
              int v181 = *(char **)v176;
              uint64_t v182 = (uint64_t)&v178[-*(void *)v176];
              uint64_t v183 = v182 >> 3;
              unint64_t v184 = (v182 >> 3) + 1;
              if (v184 >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v185 = v180 - (void)v181;
              if (v185 >> 2 > v184) {
                unint64_t v184 = v185 >> 2;
              }
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v184;
              }
              if (!v186)
              {
                unint64_t v188 = 0;
                unint64_t v189 = (void *)(8 * v183);
                *(void *)(8 * v183) = v177;
                uint64_t v190 = 8 * v183 + 8;
                if (v178 == v181) {
                  goto LABEL_228;
                }
LABEL_222:
                unint64_t v191 = v178 - 8 - v181;
                if (v191 < 0x58) {
                  goto LABEL_1562;
                }
                if ((unint64_t)(v178 - &v188[v182]) < 0x20) {
                  goto LABEL_1562;
                }
                uint64_t v192 = (v191 >> 3) + 1;
                uint64_t v193 = 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v194 = &v178[-v193];
                unint64_t v189 = (void *)((char *)v189 - v193);
                uint64_t v195 = &v188[8 * v183 - 16];
                uint64_t v196 = v178 - 16;
                uint64_t v197 = v192 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v198 = *(_OWORD *)v196;
                  *(v195 - 1) = *((_OWORD *)v196 - 1);
                  *uint64_t v195 = v198;
                  v195 -= 2;
                  v196 -= 32;
                  v197 -= 4;
                }
                while (v197);
                int v178 = v194;
                if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1562:
                  do
                  {
                    uint64_t v199 = *((void *)v178 - 1);
                    v178 -= 8;
                    *--unint64_t v189 = v199;
                  }
                  while (v178 != v181);
                }
                goto LABEL_228;
              }
              if (v186 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v187 = v186;
              unint64_t v188 = operator new(8 * v186);
              unint64_t v186 = v187;
              unint64_t v189 = &v188[8 * v183];
              *unint64_t v189 = v177;
              uint64_t v190 = (uint64_t)(v189 + 1);
              if (v178 != v181) {
                goto LABEL_222;
              }
LABEL_228:
              *(void *)unint64_t v176 = v189;
              uint64_t *v179 = v190;
              *(void *)(v176 + 16) = &v188[8 * v186];
              if (v181) {
                operator delete(v181);
              }
              unint64_t v173 = v1223;
              uint64_t v67 = *(void *)v1227;
              int v174 = v1212;
              ++v175;
              uint64_t *v179 = v190;
            }
            while (v1212 != v175);
LABEL_207:
            unint64_t v173 = (char *)v173 + 1;
            uint64_t v68 = *(void *)v1206;
            if (v173 != *(void **)v1200) {
              continue;
            }
            break;
          }
LABEL_79:
          if (v1258[0] == v1258[1])
          {
            uint64_t v3 = (uint64_t)v1232;
            v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = xmmword_23CE7ECA0;
            strcpy(v1268.__r_.__value_.__l.__data_, "table: empty negated constraint");
            operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1232, (uint64_t)&v1268);
            if (SHIBYTE(v1268.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1268.__r_.__value_.__l.__data_);
            }
            operations_research::sat::ConstraintProto::Clear(v1233);
            goto LABEL_557;
          }
          memset(&v1268, 0, sizeof(v1268));
          int v71 = v1232;
          if ((int)v68 >= 1)
          {
            uint64_t v72 = 0;
            std::string::size_type v73 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            while (1)
            {
              operations_research::sat::PresolveContext::DomainOf(v71, (const char *)*(unsigned int *)(*(void *)(v67 + 24) + 4 * v75), (unint64_t *)v1265);
              unint64_t v76 = operations_research::Domain::Size((operations_research::Domain *)v1265);
              unint64_t v77 = v76;
              if ((unint64_t)v74 < v73)
              {
                *v74++ = v76;
                uint64_t v67 = *(void *)v1227;
                v1268.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
                if ((v1265[0] & 1) == 0) {
                  goto LABEL_83;
                }
                goto LABEL_82;
              }
              uint64_t v78 = v74 - v72;
              unint64_t v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v73 - (void)v72) >> 2 > v79) {
                unint64_t v79 = (uint64_t)(v73 - (void)v72) >> 2;
              }
              if (v73 - (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80)
              {
                if (v80 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v81 = operator new(8 * v80);
                unint64_t v82 = (unint64_t *)&v81[8 * v78];
                *unint64_t v82 = v77;
                std::string::size_type v83 = (std::string::size_type)(v82 + 1);
                if (v74 == v72) {
                  goto LABEL_101;
                }
              }
              else
              {
                uint64_t v81 = 0;
                unint64_t v82 = (unint64_t *)(8 * v78);
                *(void *)(8 * v78) = v77;
                std::string::size_type v83 = 8 * v78 + 8;
                if (v74 == v72) {
                  goto LABEL_101;
                }
              }
              unint64_t v84 = (char *)(v74 - 1) - (char *)v72;
              if (v84 < 0x168)
              {
                unsigned int v85 = v74;
                goto LABEL_100;
              }
              if (&v81[(char *)v74 - (char *)v72 - 8 - (v84 & 0xFFFFFFFFFFFFFFF8)] > &v81[(char *)v74
                                                                                           - (char *)v72
                                                                                           - 8])
              {
                unsigned int v85 = v74;
                do
                {
LABEL_100:
                  unint64_t v86 = *--v85;
                  *--unint64_t v82 = v86;
                }
                while (v85 != v72);
                goto LABEL_101;
              }
              if ((unint64_t *)((char *)v74 - (v84 & 0xFFFFFFFFFFFFFFF8) - 8) > v74 - 1)
              {
                unsigned int v85 = v74;
                goto LABEL_100;
              }
              if ((unint64_t)((char *)v72 - v81) < 0x20)
              {
                unsigned int v85 = v74;
                goto LABEL_100;
              }
              uint64_t v87 = (v84 >> 3) + 1;
              uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v85 = &v74[v88 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v82 = (unint64_t *)((char *)v82 - v88);
              unint64_t v89 = &v81[8 * v78 - 16];
              uint64_t v90 = v74 - 2;
              uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v92 = *(_OWORD *)v90;
                *(v89 - 1) = *((_OWORD *)v90 - 1);
                *unint64_t v89 = v92;
                v89 -= 2;
                v90 -= 4;
                v91 -= 4;
              }
              while (v91);
              if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_100;
              }
LABEL_101:
              std::string::size_type v73 = (std::string::size_type)&v81[8 * v80];
              v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
              v1268.__r_.__value_.__l.__size_ = v83;
              v1268.__r_.__value_.__r.__words[2] = v73;
              if (v72) {
                operator delete(v72);
              }
              uint64_t v72 = v82;
              uint64_t v74 = (unint64_t *)v83;
              uint64_t v67 = *(void *)v1227;
              int v71 = v1232;
              uint64_t v68 = *(void *)v1206;
              v1268.__r_.__value_.__l.__size_ = v83;
              if ((v1265[0] & 1) == 0) {
                goto LABEL_83;
              }
LABEL_82:
              operator delete(*(void **)&v1265[8]);
LABEL_83:
              if (++v75 == v68)
              {
                uint64_t v200 = v1268.__r_.__value_.__r.__words[0];
                goto LABEL_550;
              }
            }
          }
          uint64_t v74 = 0;
          uint64_t v200 = 0;
LABEL_550:
          operations_research::sat::CompressTuples(v200, ((uint64_t)v74 - v200) >> 3, 0x8000000000000000, (uint64_t)v1258);
          memset(v1265, 0, sizeof(v1265));
          unint64_t v463 = (void *)v1258[0];
          unint64_t v464 = v1258[1];
          if (v1258[0] == v1258[1]) {
            goto LABEL_551;
          }
          while (2)
          {
            uint64_t v471 = *(int **)v1265;
            *(void *)&v1265[8] = *(void *)v1265;
            if ((int)v68 < 1) {
              goto LABEL_563;
            }
            uint64_t v472 = 0;
            unint64_t v473 = v1232;
            uint64_t v474 = *(void *)v1206;
            while (2)
            {
              uint64_t v476 = *(void *)(*v463 + 8 * v472);
              if (v476 != 0x8000000000000000)
              {
                unsigned int v477 = ~operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v473, *(_DWORD *)(*(void *)(*(void *)v1227 + 24) + 4 * v472), v476);
                if ((unint64_t)v471 < *(void *)&v1265[16])
                {
                  *uint64_t v471 = v477;
                  uint64_t v475 = (uint64_t)(v471 + 1);
                  goto LABEL_567;
                }
                unint64_t v478 = *(int **)v1265;
                unint64_t v479 = (char *)v471 - *(void *)v1265;
                uint64_t v480 = ((uint64_t)v471 - *(void *)v1265) >> 2;
                unint64_t v481 = v480 + 1;
                if ((unint64_t)(v480 + 1) >> 62) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v482 = *(void *)&v1265[16] - *(void *)v1265;
                if ((uint64_t)(*(void *)&v1265[16] - *(void *)v1265) >> 1 > v481) {
                  unint64_t v481 = v482 >> 1;
                }
                if ((unint64_t)v482 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v483 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v483 = v481;
                }
                if (v483)
                {
                  if (v483 >> 62) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v484 = operator new(4 * v483);
                  BOOL v485 = (unsigned int *)&v484[4 * v480];
                  *BOOL v485 = v477;
                  uint64_t v475 = (uint64_t)(v485 + 1);
                  if (v471 != v478)
                  {
LABEL_580:
                    unint64_t v486 = (char *)(v471 - 1) - (char *)v478;
                    if (v486 < 0xBC
                      || &v479[(void)v484 - 4 - (v486 & 0xFFFFFFFFFFFFFFFCLL)] > &v479[(void)v484 - 4]
                      || (int *)((char *)v471 - (v486 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v471 - 1
                      || (unint64_t)((char *)v478 - v484) < 0x20)
                    {
                      v487 = v471;
                    }
                    else
                    {
                      uint64_t v489 = (v486 >> 2) + 1;
                      uint64_t v490 = 4 * (v489 & 0x7FFFFFFFFFFFFFF8);
                      v487 = &v471[v490 / 0xFFFFFFFFFFFFFFFCLL];
                      BOOL v485 = (unsigned int *)((char *)v485 - v490);
                      unsigned int v491 = &v484[4 * v480 - 16];
                      int64_t v492 = (long long *)(v471 - 4);
                      uint64_t v493 = v489 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v494 = *v492;
                        *(v491 - 1) = *(v492 - 1);
                        *unsigned int v491 = v494;
                        v491 -= 2;
                        v492 -= 2;
                        v493 -= 8;
                      }
                      while (v493);
                      if (v489 == (v489 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_583:
                        *(void *)v1265 = v485;
                        *(void *)&v1265[16] = &v484[4 * v483];
                        if (!v478)
                        {
LABEL_567:
                          *(void *)&v1265[8] = v475;
                          uint64_t v471 = (int *)v475;
                          unint64_t v473 = v1232;
                          uint64_t v474 = *(void *)v1206;
                          goto LABEL_568;
                        }
LABEL_587:
                        operator delete(v478);
                        goto LABEL_567;
                      }
                    }
                    do
                    {
                      unsigned int v488 = *--v487;
                      *--BOOL v485 = v488;
                    }
                    while (v487 != v478);
                    goto LABEL_583;
                  }
                }
                else
                {
                  unint64_t v484 = 0;
                  BOOL v485 = (unsigned int *)(4 * v480);
                  *(_DWORD *)(4 * v48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v477;
                  uint64_t v475 = 4 * v480 + 4;
                  if (v471 != v478) {
                    goto LABEL_580;
                  }
                }
                *(void *)v1265 = v485;
                *(void *)&v1265[16] = &v484[4 * v483];
                if (!v478) {
                  goto LABEL_567;
                }
                goto LABEL_587;
              }
LABEL_568:
              if (++v472 != v474) {
                continue;
              }
              break;
            }
            uint64_t v495 = *(int **)v1265;
            if (*(int **)v1265 != v471)
            {
              uint64_t v496 = *((void *)v1232 + 6);
              unint64_t v497 = *(int **)(v496 + 56);
              if (!v497)
              {
                int v499 = *(_DWORD *)(v496 + 52);
                goto LABEL_604;
              }
              uint64_t v498 = *(int *)(v496 + 48);
              int v499 = *v497;
              if ((int)v498 < *v497)
              {
                *(_DWORD *)(v496 + 48) = v498 + 1;
                unint64_t v500 = *(void *)&v497[2 * v498 + 2];
                if (*(_DWORD *)(v500 + 60) != 3) {
                  goto LABEL_599;
                }
LABEL_606:
                unint64_t v503 = *(void *)(v500 + 48);
                goto LABEL_607;
              }
              if (v499 == *(_DWORD *)(v496 + 52))
              {
LABEL_604:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v496 + 40), v499 + 1);
                unint64_t v497 = *(int **)(v496 + 56);
                int v499 = *v497;
              }
              *unint64_t v497 = v499 + 1;
              unint64_t v500 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v496 + 40));
              uint64_t v504 = *(void *)(v496 + 56);
              uint64_t v505 = *(int *)(v496 + 48);
              *(_DWORD *)(v496 + 48) = v505 + 1;
              *(void *)(v504 + 8 * v505 + 8) = v500;
              if (*(_DWORD *)(v500 + 60) == 3) {
                goto LABEL_606;
              }
LABEL_599:
              operations_research::sat::ConstraintProto::clear_constraint(v500);
              *(_DWORD *)(v500 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
              uint64_t v501 = *(void *)(v500 + 8);
              v502 = (google::protobuf::Arena *)(v501 & 0xFFFFFFFFFFFFFFFELL);
              if (v501) {
                v502 = *(google::protobuf::Arena **)v502;
              }
              unint64_t v503 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v502);
              *(void *)(v500 + 48) = v503;
LABEL_607:
              unsigned int v506 = *(_DWORD *)(v503 + 16);
              do
              {
                int v507 = *v495;
                if (v506 == *(_DWORD *)(v503 + 20)) {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v503 + 16), v506 + 1);
                }
                *(_DWORD *)(*(void *)(v503 + 24) + 4 * v506) = v507;
                *(_DWORD *)(v503 + 16) = v506 + 1;
                ++v495;
                ++v506;
              }
              while (v495 != v471);
            }
LABEL_563:
            v463 += 3;
            LODWORD(v68) = v1206[0];
            if (v463 != (void *)v464) {
              continue;
            }
            break;
          }
LABEL_551:
          *(void *)v1262 = operator new(0x28uLL);
          *(_OWORD *)&v1262[2] = xmmword_23CE834D0;
          strcpy(*(char **)v1262, "table: expanded negated constraint");
          uint64_t v3 = (uint64_t)v1232;
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1232, (uint64_t)v1262);
          if (SHIBYTE(v1262[5]) < 0) {
            operator delete(*(void **)v1262);
          }
          operations_research::sat::ConstraintProto::Clear(v1233);
          if (*(void *)v1265) {
            operator delete(*(void **)v1265);
          }
          if (v1268.__r_.__value_.__r.__words[0]) {
            operator delete(v1268.__r_.__value_.__l.__data_);
          }
LABEL_557:
          unint64_t v465 = v1258[0];
          if (!v1258[0]) {
            goto LABEL_1507;
          }
          unint64_t v466 = v1258[1];
          uint64_t v467 = (void *)v1258[0];
          if (v1258[1] != v1258[0])
          {
            unint64_t v468 = v1258[1];
            do
            {
              v470 = *(void **)(v468 - 24);
              v468 -= 24;
              uint64_t v469 = v470;
              if (v470)
              {
                *(void *)(v466 - 16) = v469;
                operator delete(v469);
              }
              unint64_t v466 = v468;
            }
            while (v468 != v465);
            uint64_t v467 = (void *)v1258[0];
          }
          v1258[1] = v465;
LABEL_1506:
          operator delete(v467);
LABEL_1507:
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v3);
          if (!*((_DWORD *)v1233 + 15)) {
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)v3, v1203[0]);
          }
          if (*(unsigned char *)(v3 + 504)) {
            return;
          }
LABEL_1510:
          uint64_t v7 = *(void *)v1203 + 1;
          if (*(void *)v1203 + 1 == v1193) {
            break;
          }
          continue;
        case 0x11:
          if (!a1[461]) {
            goto LABEL_1507;
          }
          uint64_t v93 = *((void *)v1233 + 6);
          uint64_t v94 = *(int *)(v93 + 112);
          if (v94)
          {
            if (*(_DWORD *)(v93 + 88))
            {
              unint64_t v95 = *(const void **)(v93 + 120);
              memset(&__str, 0, sizeof(__str));
              uint64_t v1194 = v94;
              if ((v94 & 0x80000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v96 = operator new(4 * v94);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
              __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v96 + 4 * v94;
              memcpy(v96, v95, 4 * v94);
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)v96 + 4 * v94;
              absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::raw_hash_set<long long const*>((uint64_t)v1258, *(void **)(v93 + 24), (void *)(*(void *)(v93 + 24) + 8 * *(int *)(v93 + 16)), 0);
              std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v1256, v94 + 1);
              uint64_t v97 = 0;
              unint64_t v98 = v1256;
              uint64_t v99 = *(void *)(v93 + 136);
              unint64_t v100 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v99)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v99));
              unint64_t v101 = (v100 >> 7) ^ (*(void *)v1256 >> 12);
              uint64_t v102 = *((void *)v1256 + 3);
              *(void *)v1228 = v96;
              while (1)
              {
                unint64_t v103 = v101 & v102;
                uint64_t v104 = *(void *)(*(void *)v1256 + v103);
                unint64_t v105 = ((v104 ^ (0x101010101010101 * (v100 & 0x7F))) - 0x101010101010101) & ~(v104 ^ (0x101010101010101 * (v100 & 0x7F))) & 0x8080808080808080;
                if (v105) {
                  break;
                }
LABEL_123:
                if ((v104 & (~v104 << 6) & 0x8080808080808080) != 0)
                {
                  *(void *)(*((void *)v98 + 1)
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v1256, v100)) = v99;
                  goto LABEL_786;
                }
                v97 += 8;
                unint64_t v101 = v97 + v103;
              }
              while (*(void *)(*((void *)v1256 + 1) + 8 * ((v103 + (__clz(__rbit64(v105)) >> 3)) & v102)) != v99)
              {
                v105 &= v105 - 1;
                if (!v105) {
                  goto LABEL_123;
                }
              }
LABEL_786:
              if ((int)v94 >= 1)
              {
                LODWORD(v642) = *(_DWORD *)(v93 + 40);
                if ((int)v642 > 0)
                {
                  uint64_t v643 = 0;
                  do
                  {
                    if ((int)v642 <= 0)
                    {
                      uint64_t v644 = v643 + 1;
                    }
                    else
                    {
                      uint64_t v645 = 0;
                      uint64_t v644 = v643 + 1;
                      do
                      {
                        uint64_t v650 = 0;
                        uint64_t v668 = *(void *)(*(void *)(v93 + 48) + 8 * v645);
                        uint64_t v669 = *(void *)(*(void *)(v93 + 72) + 8 * v645);
                        v670 = (void *)((char *)v1256 + 48 * v643);
                        unint64_t v671 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v668)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + v668));
                        unint64_t v651 = (*v670 >> 12) ^ (v671 >> 7);
                        uint64_t v672 = v670[3];
                        uint64_t v673 = 0x101010101010101 * (v671 & 0x7F);
                        while (1)
                        {
                          uint64_t v646 = v651 & v672;
                          uint64_t v647 = *(void *)(*v670 + v646);
                          unint64_t v648 = ((v647 ^ v673) - 0x101010101010101) & ~(v647 ^ v673) & 0x8080808080808080;
                          if (v648) {
                            break;
                          }
LABEL_796:
                          if ((v647 & (~v647 << 6) & 0x8080808080808080) != 0) {
                            goto LABEL_816;
                          }
                          v650 += 8;
                          unint64_t v651 = v650 + v646;
                        }
                        while (1)
                        {
                          unint64_t v649 = (v646 + (__clz(__rbit64(v648)) >> 3)) & v672;
                          if (*(void *)(v670[1] + 8 * v649) == v668) {
                            break;
                          }
                          v648 &= v648 - 1;
                          if (!v648) {
                            goto LABEL_796;
                          }
                        }
                        if (v649 != v672
                          && operations_research::sat::PresolveContext::DomainContains((operations_research::sat::PresolveContext *)v3, *((_DWORD *)v96 + v643), *(void *)(*(void *)(v93 + 96) + 8 * v645)))
                        {
                          unint64_t v652 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v669)
                                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                     + v669));
                          if (v643 == v94 - 1)
                          {
                            uint64_t v653 = 0;
                            unint64_t v654 = v652 >> 7;
                            unint64_t v655 = (v652 >> 7) ^ (v1258[0] >> 12);
                            uint64_t v656 = 0x101010101010101 * (v652 & 0x7F);
                            while (1)
                            {
                              unint64_t v657 = v655 & v1259;
                              uint64_t v658 = *(void *)(v1258[0] + v657);
                              unint64_t v659 = ((v658 ^ v656) - 0x101010101010101) & ~(v658 ^ v656) & 0x8080808080808080;
                              if (v659) {
                                break;
                              }
LABEL_805:
                              if ((v658 & (~v658 << 6) & 0x8080808080808080) != 0) {
                                goto LABEL_816;
                              }
                              v653 += 8;
                              unint64_t v655 = v653 + v657;
                            }
                            while (1)
                            {
                              unint64_t v660 = (v657 + (__clz(__rbit64(v659)) >> 3)) & v1259;
                              if (*(void *)(v1258[1] + 8 * v660) == v669) {
                                break;
                              }
                              v659 &= v659 - 1;
                              if (!v659) {
                                goto LABEL_805;
                              }
                            }
                            if (v660 == (void)v1259) {
                              goto LABEL_816;
                            }
                          }
                          else
                          {
                            unint64_t v654 = v652 >> 7;
                            uint64_t v656 = 0x101010101010101 * (v652 & 0x7F);
                          }
                          uint64_t v661 = 0;
                          v662 = (void *)((char *)v1256 + 48 * v644);
                          unint64_t v663 = v654 ^ (*v662 >> 12);
                          uint64_t v664 = v662[3];
                          while (1)
                          {
                            unint64_t v665 = v663 & v664;
                            uint64_t v666 = *(void *)(*v662 + v665);
                            unint64_t v667 = ((v666 ^ v656) - 0x101010101010101) & ~(v666 ^ v656) & 0x8080808080808080;
                            if (v667) {
                              break;
                            }
LABEL_813:
                            if ((v666 & (~v666 << 6) & 0x8080808080808080) != 0)
                            {
                              *(void *)(v662[1]
                                        + 8
                                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v1256 + 6 * v644, v652)) = v669;
                              goto LABEL_816;
                            }
                            v661 += 8;
                            unint64_t v663 = v661 + v665;
                          }
                          while (*(void *)(v662[1] + 8 * ((v665 + (__clz(__rbit64(v667)) >> 3)) & v664)) != v669)
                          {
                            v667 &= v667 - 1;
                            if (!v667) {
                              goto LABEL_813;
                            }
                          }
                        }
LABEL_816:
                        ++v645;
                        uint64_t v642 = *(int *)(v93 + 40);
                      }
                      while (v645 < v642);
                    }
                    uint64_t v643 = v644;
                  }
                  while (v644 != v94);
                }
                do
                {
                  uint64_t v845 = v94;
                  uint64_t v846 = v94 - 1;
                  v847 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  std::string::size_type v1270 = 0;
                  *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0u;
                  long long v1269 = 0u;
                  if (*(int *)(v93 + 40) < 1)
                  {
                    v877 = 0;
                  }
                  else
                  {
                    uint64_t v848 = 0;
                    do
                    {
                      uint64_t v853 = 0;
                      uint64_t v871 = *(void *)(*(void *)(v93 + 48) + 8 * v848);
                      uint64_t v872 = *(void *)(*(void *)(v93 + 72) + 8 * v848);
                      v873 = (void *)((char *)v1256 + 48 * v846);
                      unint64_t v874 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v871)
                             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                 + v871));
                      unint64_t v854 = (v874 >> 7) ^ (*v873 >> 12);
                      uint64_t v875 = v873[3];
                      uint64_t v876 = 0x101010101010101 * (v874 & 0x7F);
                      while (1)
                      {
                        unint64_t v849 = v854 & v875;
                        uint64_t v850 = *(void *)(*v873 + v849);
                        unint64_t v851 = ((v850 ^ v876) - 0x101010101010101) & ~(v850 ^ v876) & 0x8080808080808080;
                        if (v851) {
                          break;
                        }
LABEL_1070:
                        if ((v850 & (~v850 << 6) & 0x8080808080808080) != 0) {
                          goto LABEL_1088;
                        }
                        v853 += 8;
                        unint64_t v854 = v853 + v849;
                      }
                      while (1)
                      {
                        unint64_t v852 = (v849 + (__clz(__rbit64(v851)) >> 3)) & v875;
                        if (*(void *)(v873[1] + 8 * v852) == v871) {
                          break;
                        }
                        v851 &= v851 - 1;
                        if (!v851) {
                          goto LABEL_1070;
                        }
                      }
                      if (v852 != v875
                        && operations_research::sat::PresolveContext::DomainContains(v1232, *(_DWORD *)(*(void *)v1228 + 4 * v846), *(void *)(*(void *)(v93 + 96) + 8 * v848)))
                      {
                        uint64_t v855 = 0;
                        v856 = (void *)((char *)v1256 + 48 * v845);
                        unint64_t v857 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v872)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + v872));
                        unint64_t v858 = (*v856 >> 12) ^ (v857 >> 7);
                        uint64_t v859 = v856[3];
                        uint64_t v860 = 0x101010101010101 * (v857 & 0x7F);
                        while (1)
                        {
                          uint64_t v861 = v858 & v859;
                          uint64_t v862 = *(void *)(*v856 + v861);
                          unint64_t v863 = ((v862 ^ v860) - 0x101010101010101) & ~(v862 ^ v860) & 0x8080808080808080;
                          if (v863) {
                            break;
                          }
LABEL_1078:
                          if ((v862 & (~v862 << 6) & 0x8080808080808080) != 0) {
                            goto LABEL_1088;
                          }
                          v855 += 8;
                          unint64_t v858 = v855 + v861;
                        }
                        while (1)
                        {
                          unint64_t v864 = (v861 + (__clz(__rbit64(v863)) >> 3)) & v859;
                          if (*(void *)(v856[1] + 8 * v864) == v872) {
                            break;
                          }
                          v863 &= v863 - 1;
                          if (!v863) {
                            goto LABEL_1078;
                          }
                        }
                        if (v864 == v859) {
                          goto LABEL_1088;
                        }
                        uint64_t v865 = 0;
                        for (std::string::size_type m = (v874 >> 7) ^ (v1268.__r_.__value_.__r.__words[0] >> 12); ; std::string::size_type m = v865 + v867)
                        {
                          std::string::size_type v867 = m & v1269;
                          uint64_t v868 = *(void *)(v1268.__r_.__value_.__r.__words[0] + v867);
                          unint64_t v869 = ((v868 ^ v876) - 0x101010101010101) & ~(v868 ^ v876) & 0x8080808080808080;
                          if (v869) {
                            break;
                          }
LABEL_1085:
                          if ((v868 & (~v868 << 6) & 0x8080808080808080) != 0)
                          {
                            unint64_t v870 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v1268, v874);
                            *(void *)(v1268.__r_.__value_.__l.__size_ + 8 * v87google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v871;
                            goto LABEL_1088;
                          }
                          v865 += 8;
                        }
                        while (*(void *)(v1268.__r_.__value_.__l.__size_
                                          + 8 * ((v867 + (__clz(__rbit64(v869)) >> 3)) & v1269)) != v871)
                        {
                          v869 &= v869 - 1;
                          if (!v869) {
                            goto LABEL_1085;
                          }
                        }
                      }
LABEL_1088:
                      ++v848;
                    }
                    while (v848 < *(int *)(v93 + 40));
                    v847 = (uint64_t *)v1268.__r_.__value_.__r.__words[0];
                    v877 = (uint64_t *)v1268.__r_.__value_.__r.__words[2];
                    uint64_t v3 = (uint64_t)v1232;
                  }
                  v878 = (uint64_t **)((char *)v1256 + 48 * v846);
                  std::string::size_type v879 = (std::string::size_type)*v878;
                  *v878 = v847;
                  v1268.__r_.__value_.__r.__words[0] = v879;
                  std::string::size_type v880 = (std::string::size_type)v878[1];
                  v878[1] = (uint64_t *)v1268.__r_.__value_.__l.__size_;
                  v1268.__r_.__value_.__l.__size_ = v880;
                  std::string::size_type v881 = (std::string::size_type)v878[2];
                  v878[2] = v877;
                  v1268.__r_.__value_.__r.__words[2] = v881;
                  v882 = v878[3];
                  v878[3] = (uint64_t *)v1269;
                  *(void *)&long long v1269 = v882;
                  v883 = v878[5];
                  v878[5] = (uint64_t *)v1270;
                  std::string::size_type v1270 = (std::string::size_type)v883;
                  v884 = v878[4];
                  v878[4] = (uint64_t *)*((void *)&v1269 + 1);
                  *((void *)&v1269 + 1) = v884;
                  if ((void)v1269)
                  {
                    operator delete(v1268.__r_.__value_.__l.__data_);
                    v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    std::string::size_type v1270 = 0;
                    *(void *)&long long v1269 = 0;
                    *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0uLL;
                    v884 = (uint64_t *)*((void *)&v1269 + 1);
                  }
                  if (v884) {
                    absl::lts_2020_02_25::container_internal::UnsampleSlow(v884);
                  }
                  uint64_t v94 = v846;
                }
                while (v845 > 1);
              }
              v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              __n128 v885 = 0uLL;
              *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0u;
              long long v1269 = 0u;
              std::string::size_type v1270 = 0;
              *(void *)v1265 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              *(_OWORD *)&v1265[8] = 0u;
              unsigned long long v1266 = 0u;
              uint64_t v1267 = 0;
              *(void *)v1262 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              *(_OWORD *)&v1262[2] = 0u;
              unsigned long long v1263 = 0u;
              uint64_t v1264 = 0;
              BOOL v1255 = 0;
              if ((int)v1194 < 1)
              {
LABEL_1477:
                HIBYTE(v1254[2]) = 19;
                strcpy((char *)v1254, "automaton: expanded");
                operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1254);
                if (SHIBYTE(v1254[2]) < 0) {
                  operator delete(v1254[0]);
                }
                operations_research::sat::ConstraintProto::Clear(v1233);
LABEL_1480:
                if ((void)v1263)
                {
                  operator delete(*(void **)v1262);
                  *(void *)v1262 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  uint64_t v1264 = 0;
                  *(void *)&v1262[4] = 0;
                  *(void *)&unsigned long long v1263 = 0;
                  *(void *)&v1262[2] = 0;
                }
                if (*((void *)&v1263 + 1)) {
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v1263 + 1));
                }
                if ((void)v1266)
                {
                  operator delete(*(void **)v1265);
                  *(void *)v1265 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  uint64_t v1267 = 0;
                  *(void *)&v1265[16] = 0;
                  *(void *)&unsigned long long v1266 = 0;
                  *(void *)&v1265[8] = 0;
                }
                if (*((void *)&v1266 + 1)) {
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v1266 + 1));
                }
                if ((void)v1269)
                {
                  operator delete(v1268.__r_.__value_.__l.__data_);
                  v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  std::string::size_type v1270 = 0;
                  *(void *)&long long v1269 = 0;
                  *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0uLL;
                }
                if (*((void *)&v1269 + 1)) {
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v1269 + 1));
                }
                v1170 = v1256;
                if (v1256)
                {
                  v1171 = (operations_research::sat::PresolveContext *)v1257;
                  v1172 = v1256;
                  if ((operations_research::sat::PresolveContext *)v1257 != v1256)
                  {
                    do
                    {
                      if (*((void *)v1171 - 3))
                      {
                        operator delete(*((void **)v1171 - 6));
                        *((void *)v1171 - 1) = 0;
                        *((void *)v1171 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                        *((void *)v1171 - 5) = 0;
                        *((void *)v1171 - 4) = 0;
                        *((void *)v1171 - 3) = 0;
                      }
                      v1173 = (void *)*((void *)v1171 - 2);
                      if (v1173) {
                        absl::lts_2020_02_25::container_internal::UnsampleSlow(v1173);
                      }
                      v1171 = (operations_research::sat::PresolveContext *)((char *)v1171 - 48);
                    }
                    while (v1171 != v1170);
                    v1172 = v1256;
                  }
                  *(void *)&long long v1257 = v1170;
                  operator delete(v1172);
                }
                if ((void)v1259)
                {
                  operator delete((void *)v1258[0]);
                  v1258[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  uint64_t v1260 = 0;
                  v1258[2] = 0;
                  *(void *)&long long v1259 = 0;
                  v1258[1] = 0;
                }
                if (*((void *)&v1259 + 1)) {
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v1259 + 1));
                }
                uint64_t v467 = (void *)__str.__r_.__value_.__r.__words[0];
                if (__str.__r_.__value_.__r.__words[0]) {
                  goto LABEL_1506;
                }
                goto LABEL_1507;
              }
              uint64_t v886 = 0;
              while (1)
              {
                memset(v1254, 0, 24);
                v1251 = 0;
                v1252 = 0;
                v1253 = 0;
                v1248 = 0;
                v1249 = 0;
                v1250 = 0;
                if (*(int *)(v93 + 88) >= 1)
                {
                  *(void *)v1218 = 0;
                  v1224 = 0;
                  *(void *)v1230 = 0;
                  v1210 = 0;
                  v887 = 0;
                  uint64_t v888 = 0;
                  uint64_t v889 = v886 + 1;
                  while (1)
                  {
                    uint64_t v894 = 0;
                    v907 = *(operations_research::sat::PresolveContext **)(*(void *)(v93 + 48) + 8 * v888);
                    uint64_t v908 = *(void *)(*(void *)(v93 + 96) + 8 * v888);
                    uint64_t v909 = *(void *)(*(void *)(v93 + 72) + 8 * v888);
                    v910 = (void *)((char *)v1256 + 48 * v886);
                    unint64_t v911 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                            + (unint64_t)v907)
                           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                               + (void)v907));
                    unint64_t v895 = (*v910 >> 12) ^ (v911 >> 7);
                    uint64_t v912 = v910[3];
                    uint64_t v913 = 0x101010101010101 * (v911 & 0x7F);
                    while (1)
                    {
                      uint64_t v890 = v895 & v912;
                      uint64_t v891 = *(void *)(*v910 + v890);
                      unint64_t v892 = ((v891 ^ v913) - 0x101010101010101) & ~(v891 ^ v913) & 0x8080808080808080;
                      if (v892) {
                        break;
                      }
LABEL_1105:
                      if ((v891 & (~v891 << 6) & 0x8080808080808080) != 0) {
                        goto LABEL_1115;
                      }
                      v894 += 8;
                      unint64_t v895 = v894 + v890;
                    }
                    while (1)
                    {
                      unint64_t v893 = (v890 + (__clz(__rbit64(v892)) >> 3)) & v912;
                      if (*(operations_research::sat::PresolveContext **)(v910[1] + 8 * v893) == v907) {
                        break;
                      }
                      v892 &= v892 - 1;
                      if (!v892) {
                        goto LABEL_1105;
                      }
                    }
                    if (v893 == v912) {
                      goto LABEL_1115;
                    }
                    uint64_t v896 = 0;
                    v897 = (void *)((char *)v1256 + 48 * v889);
                    unint64_t v898 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v909)
                           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                              * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                               + v909));
                    unint64_t v899 = (*v897 >> 12) ^ (v898 >> 7);
                    uint64_t v900 = v897[3];
                    uint64_t v901 = 0x101010101010101 * (v898 & 0x7F);
                    while (1)
                    {
                      uint64_t v902 = v899 & v900;
                      uint64_t v903 = *(void *)(*v897 + v902);
                      unint64_t v904 = ((v903 ^ v901) - 0x101010101010101) & ~(v903 ^ v901) & 0x8080808080808080;
                      if (v904) {
                        break;
                      }
LABEL_1112:
                      if ((v903 & (~v903 << 6) & 0x8080808080808080) != 0) {
                        goto LABEL_1115;
                      }
                      v896 += 8;
                      unint64_t v899 = v896 + v902;
                    }
                    while (1)
                    {
                      unint64_t v905 = (v902 + (__clz(__rbit64(v904)) >> 3)) & v900;
                      if (*(void *)(v897[1] + 8 * v905) == v909) {
                        break;
                      }
                      v904 &= v904 - 1;
                      if (!v904) {
                        goto LABEL_1112;
                      }
                    }
                    if (v905 == v900)
                    {
LABEL_1115:
                      v906 = v887;
                      uint64_t v3 = (uint64_t)v1232;
                    }
                    else
                    {
                      if (operations_research::sat::PresolveContext::DomainContains(v1232, *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v886), *(void *)(*(void *)(v93 + 96) + 8 * v888)))
                      {
                        if (v887 < v1210)
                        {
                          *v887 = v907;
                          v906 = v887 + 1;
                          v914 = *(char **)v1230;
                          v1254[1] = v887 + 1;
                          if (*(void *)v1230 < *(void *)v1218) {
                            goto LABEL_1121;
                          }
LABEL_1140:
                          v926 = (char *)v1251;
                          int64_t v927 = v914 - (unsigned char *)v1251;
                          uint64_t v928 = (v914 - (unsigned char *)v1251) >> 3;
                          unint64_t v929 = v928 + 1;
                          if ((unint64_t)(v928 + 1) >> 61) {
LABEL_1544:
                          }
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          if ((uint64_t)(*(void *)v1218 - (void)v1251) >> 2 > v929) {
                            unint64_t v929 = (uint64_t)(*(void *)v1218 - (void)v1251) >> 2;
                          }
                          if (*(void *)v1218 - (void)v1251 >= 0x7FFFFFFFFFFFFFF8uLL) {
                            unint64_t v930 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v930 = v929;
                          }
                          if (v930)
                          {
                            if (v930 >> 61) {
LABEL_1541:
                            }
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            unint64_t v931 = v930;
                            v932 = (char *)operator new(8 * v930);
                            unint64_t v930 = v931;
                            v933 = &v932[8 * v928];
                            *(void *)v933 = v908;
                            uint64_t v915 = (uint64_t)(v933 + 8);
                            v934 = *(char **)v1230;
                            if (*(char **)v1230 != v926)
                            {
LABEL_1149:
                              unint64_t v935 = v934 - 8 - v926;
                              if (v935 < 0x168)
                              {
                                v936 = v934;
                                goto LABEL_1166;
                              }
                              if (&v932[v927 - 8 - (v935 & 0xFFFFFFFFFFFFFFF8)] > &v932[v927 - 8]
                                || &v934[-(v935 & 0xFFFFFFFFFFFFFFF8) - 8] > v934 - 8
                                || (unint64_t)(v934 - v932 - v927) < 0x20)
                              {
                                v936 = *(char **)v1230;
                                goto LABEL_1166;
                              }
                              uint64_t v963 = (v935 >> 3) + 1;
                              uint64_t v964 = 8 * (v963 & 0x3FFFFFFFFFFFFFFCLL);
                              v936 = (char *)(*(void *)v1230 - v964);
                              v933 -= v964;
                              v965 = (__n128 *)&v932[8 * v928 - 16];
                              v966 = (__n128 *)(*(void *)v1230 - 16);
                              uint64_t v967 = v963 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                __n128 v885 = *v966;
                                v965[-1] = v966[-1];
                                __n128 *v965 = v885;
                                v965 -= 2;
                                v966 -= 2;
                                v967 -= 4;
                              }
                              while (v967);
                              if (v963 != (v963 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                do
                                {
LABEL_1166:
                                  uint64_t v942 = *((void *)v936 - 1);
                                  v936 -= 8;
                                  *((void *)v933 - 1) = v942;
                                  v933 -= 8;
                                }
                                while (v936 != v926);
                              }
                            }
                          }
                          else
                          {
                            v932 = 0;
                            v933 = (char *)(8 * v928);
                            *(void *)(8 * v928) = v908;
                            uint64_t v915 = 8 * v928 + 8;
                            v934 = *(char **)v1230;
                            if (*(char **)v1230 != v926) {
                              goto LABEL_1149;
                            }
                          }
                          v1251 = v933;
                          *(void *)v1218 = &v932[8 * v930];
                          v1253 = *(char **)v1218;
                          if (v926) {
                            operator delete(v926);
                          }
LABEL_1169:
                          *(void *)v1230 = v915;
                          v1252 = (unsigned char *)v915;
                          if (v886 + 1 == v1194) {
                            uint64_t v943 = 0;
                          }
                          else {
                            uint64_t v943 = v909;
                          }
                          v944 = v1249;
                          if (v1249 < v1250)
                          {
                            *(void *)v1249 = v943;
                            uint64_t v945 = (uint64_t)(v944 + 8);
                            uint64_t v3 = (uint64_t)v1232;
LABEL_1194:
                            uint64_t v889 = v886 + 1;
                            v1249 = (char *)v945;
                            goto LABEL_1116;
                          }
                          v946 = (char *)v1248;
                          int64_t v947 = v1249 - (unsigned char *)v1248;
                          uint64_t v948 = (v1249 - (unsigned char *)v1248) >> 3;
                          unint64_t v949 = v948 + 1;
                          if ((unint64_t)(v948 + 1) >> 61) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v950 = v1250 - (unsigned char *)v1248;
                          if ((v1250 - (unsigned char *)v1248) >> 2 > v949) {
                            unint64_t v949 = v950 >> 2;
                          }
                          if ((unint64_t)v950 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v951 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v951 = v949;
                          }
                          if (v951)
                          {
                            if (v951 >> 61) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            unint64_t v952 = v951;
                            v953 = (char *)operator new(8 * v951);
                            unint64_t v951 = v952;
                            v954 = &v953[8 * v948];
                            *(void *)v954 = v943;
                            uint64_t v945 = (uint64_t)(v954 + 8);
                            if (v944 != v946)
                            {
LABEL_1183:
                              unint64_t v955 = v944 - 8 - v946;
                              uint64_t v3 = (uint64_t)v1232;
                              if (v955 < 0x58) {
                                goto LABEL_1563;
                              }
                              if ((unint64_t)(v944 - &v953[v947]) < 0x20) {
                                goto LABEL_1563;
                              }
                              uint64_t v956 = (v955 >> 3) + 1;
                              uint64_t v957 = 8 * (v956 & 0x3FFFFFFFFFFFFFFCLL);
                              v958 = &v944[-v957];
                              v954 -= v957;
                              v959 = (__n128 *)&v953[8 * v948 - 16];
                              v960 = (__n128 *)(v944 - 16);
                              uint64_t v961 = v956 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                __n128 v885 = *v960;
                                v959[-1] = v960[-1];
                                __n128 *v959 = v885;
                                v959 -= 2;
                                v960 -= 2;
                                v961 -= 4;
                              }
                              while (v961);
                              v944 = v958;
                              if (v956 != (v956 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1563:
                                do
                                {
                                  uint64_t v962 = *((void *)v944 - 1);
                                  v944 -= 8;
                                  *((void *)v954 - 1) = v962;
                                  v954 -= 8;
                                }
                                while (v944 != v946);
                              }
                              goto LABEL_1192;
                            }
                          }
                          else
                          {
                            v953 = 0;
                            v954 = (char *)(8 * v948);
                            *(void *)(8 * v948) = v943;
                            uint64_t v945 = 8 * v948 + 8;
                            if (v944 != v946) {
                              goto LABEL_1183;
                            }
                          }
                          uint64_t v3 = (uint64_t)v1232;
LABEL_1192:
                          v1248 = v954;
                          v1250 = &v953[8 * v951];
                          if (v946) {
                            operator delete(v946);
                          }
                          goto LABEL_1194;
                        }
                        uint64_t v916 = v887 - v1224;
                        unint64_t v917 = v916 + 1;
                        if ((unint64_t)(v916 + 1) >> 61) {
                          goto LABEL_1544;
                        }
                        if (((char *)v1210 - (char *)v1224) >> 2 > v917) {
                          unint64_t v917 = ((char *)v1210 - (char *)v1224) >> 2;
                        }
                        if ((unint64_t)((char *)v1210 - (char *)v1224) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v918 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v918 = v917;
                        }
                        if (v918)
                        {
                          if (v918 >> 61) {
                            goto LABEL_1541;
                          }
                          unint64_t v919 = v918;
                          v920 = operator new(8 * v918);
                          unint64_t v918 = v919;
                        }
                        else
                        {
                          v920 = 0;
                        }
                        v921 = (operations_research::sat::PresolveContext **)&v920[8 * v916];
                        *v921 = v907;
                        v906 = v921 + 1;
                        if (v887 != v1224)
                        {
                          unint64_t v922 = (char *)(v887 - 1) - (char *)v1224;
                          if (v922 < 0x168
                            || &v920[(char *)v887 - (char *)v1224 - 8 - (v922 & 0xFFFFFFFFFFFFFFF8)] > &v920[(char *)v887 - (char *)v1224 - 8]
                            || (operations_research::sat::PresolveContext **)((char *)v887
                                                                            - (v922 & 0xFFFFFFFFFFFFFFF8)
                                                                            - 8) > v887 - 1
                            || (unint64_t)((char *)v1224 - v920) < 0x20)
                          {
                            v923 = v887;
                          }
                          else
                          {
                            uint64_t v937 = (v922 >> 3) + 1;
                            uint64_t v938 = 8 * (v937 & 0x3FFFFFFFFFFFFFFCLL);
                            v923 = &v887[v938 / 0xFFFFFFFFFFFFFFF8];
                            v921 = (operations_research::sat::PresolveContext **)((char *)v921 - v938);
                            v939 = (__n128 *)&v920[8 * (v887 - v1224) - 16];
                            v940 = (__n128 *)(v887 - 2);
                            uint64_t v941 = v937 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              __n128 v885 = *v940;
                              v939[-1] = v940[-1];
                              __n128 *v939 = v885;
                              v939 -= 2;
                              v940 -= 2;
                              v941 -= 4;
                            }
                            while (v941);
                            if (v937 == (v937 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_1137:
                              v1254[0] = v921;
                              v1254[1] = v906;
                              v1210 = (operations_research::sat::PresolveContext **)&v920[8 * v918];
                              v1254[2] = v1210;
                              if (v1224) {
                                goto LABEL_1138;
                              }
                              goto LABEL_1139;
                            }
                          }
                          do
                          {
                            v924 = *--v923;
                            *--v921 = v924;
                          }
                          while (v923 != v1224);
                          goto LABEL_1137;
                        }
                        v1254[0] = v921;
                        v1254[1] = v921 + 1;
                        v1210 = (operations_research::sat::PresolveContext **)&v920[8 * v918];
                        v1254[2] = v1210;
                        if (v1224)
                        {
LABEL_1138:
                          operator delete(v1224);
                          *(void *)v1230 = v1252;
                          *(void *)v1218 = v1253;
                        }
LABEL_1139:
                        v925 = v921;
                        v1254[1] = v906;
                        v914 = *(char **)v1230;
                        v1224 = v925;
                        if (*(void *)v1230 >= *(void *)v1218) {
                          goto LABEL_1140;
                        }
LABEL_1121:
                        *(void *)v914 = v908;
                        uint64_t v915 = (uint64_t)(v914 + 8);
                        goto LABEL_1169;
                      }
                      v906 = v887;
                      uint64_t v3 = (uint64_t)v1232;
                    }
LABEL_1116:
                    ++v888;
                    v887 = v906;
                    if (v888 >= *(int *)(v93 + 88))
                    {
                      v968 = (char *)v1251;
                      v969 = *(char **)v1230;
                      goto LABEL_1201;
                    }
                  }
                }
                v968 = 0;
                v969 = 0;
LABEL_1201:
                v1245 = 0;
                v1246 = 0;
                unint64_t v1247 = 0;
                *(void *)v1231 = v969;
                size_t v970 = v969 - v968;
                uint64_t v971 = (v969 - v968) >> 3;
                if (v971 != 1)
                {
                  if (v971 == 2)
                  {
                    int v972 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                    int v973 = v972;
                    v975 = (char *)v1246;
                    v974 = (int *)v1247;
                    if ((unint64_t)v1246 < v1247)
                    {
                      uint64_t v976 = v886;
                      *(_DWORD *)v1246 = v972;
                      v977 = (int *)(v975 + 4);
                      goto LABEL_1283;
                    }
                    v995 = (char *)v1245;
                    int64_t v996 = (unsigned char *)v1246 - (unsigned char *)v1245;
                    int64_t v997 = ((unsigned char *)v1246 - (unsigned char *)v1245) >> 2;
                    unint64_t v998 = v997 + 1;
                    if ((unint64_t)(v997 + 1) >> 62) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v999 = v1247 - (void)v1245;
                    if ((uint64_t)(v1247 - (void)v1245) >> 1 > v998) {
                      unint64_t v998 = v999 >> 1;
                    }
                    if ((unint64_t)v999 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v1000 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v1000 = v998;
                    }
                    if (v1000)
                    {
                      if (v1000 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      unint64_t v1001 = v1000;
                      v1002 = operator new(4 * v1000);
                      unint64_t v1000 = v1001;
                      v1003 = (int *)&v1002[4 * v997];
                      int *v1003 = v973;
                      v977 = v1003 + 1;
                      if (v975 == v995) {
                        goto LABEL_1281;
                      }
LABEL_1275:
                      unint64_t v1043 = v975 - 4 - v995;
                      if (v1043 < 0x2C) {
                        goto LABEL_1564;
                      }
                      if ((unint64_t)(v975 - &v1002[v996]) < 0x20) {
                        goto LABEL_1564;
                      }
                      uint64_t v1044 = (v1043 >> 2) + 1;
                      uint64_t v1045 = 4 * (v1044 & 0x7FFFFFFFFFFFFFF8);
                      v1046 = &v975[-v1045];
                      v1003 = (int *)((char *)v1003 - v1045);
                      v1047 = &v1002[4 * v997 - 16];
                      v1048 = v975 - 16;
                      uint64_t v1049 = v1044 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v1050 = *(_OWORD *)v1048;
                        *(v1047 - 1) = *((_OWORD *)v1048 - 1);
                        _OWORD *v1047 = v1050;
                        v1047 -= 2;
                        v1048 -= 32;
                        v1049 -= 8;
                      }
                      while (v1049);
                      v975 = v1046;
                      if (v1044 != (v1044 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1564:
                        do
                        {
                          int v1051 = *((_DWORD *)v975 - 1);
                          v975 -= 4;
                          *--v1003 = v1051;
                        }
                        while (v975 != v995);
                      }
                    }
                    else
                    {
                      v1002 = 0;
                      v1003 = (int *)(4 * v997);
                      *(_DWORD *)(4 * v997) = v973;
                      v977 = (int *)(4 * v997 + 4);
                      if (v975 != v995) {
                        goto LABEL_1275;
                      }
                    }
LABEL_1281:
                    uint64_t v976 = v886;
                    v974 = (int *)&v1002[4 * v1000];
                    v1245 = v1003;
                    v1246 = v977;
                    unint64_t v1247 = (unint64_t)v974;
                    if (v995)
                    {
                      operator delete(v995);
                      v974 = (int *)v1247;
                    }
LABEL_1283:
                    v1246 = v977;
                    int v1052 = ~v973;
                    if (v977 < v974)
                    {
                      int *v977 = v1052;
                      v1053 = v977 + 1;
                      uint64_t v3 = (uint64_t)v1232;
                      uint64_t v886 = v976;
LABEL_1300:
                      v1246 = v1053;
                      unint64_t v1017 = 2;
                      v1240 = 0;
                      v1241 = 0;
                      v1242 = 0;
                      if (*(char **)v1231 != v968) {
                        goto LABEL_1301;
                      }
LABEL_1272:
                      v1041 = 0;
                      v1042 = 0;
                      goto LABEL_1303;
                    }
                    v1054 = (int *)v1245;
                    int64_t v1055 = (char *)v977 - (unsigned char *)v1245;
                    uint64_t v1056 = ((char *)v977 - (unsigned char *)v1245) >> 2;
                    unint64_t v1057 = v1056 + 1;
                    if ((unint64_t)(v1056 + 1) >> 62) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v1058 = (char *)v974 - (unsigned char *)v1245;
                    if (v1058 >> 1 > v1057) {
                      unint64_t v1057 = v1058 >> 1;
                    }
                    if ((unint64_t)v1058 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v1059 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v1059 = v1057;
                    }
                    if (v1059)
                    {
                      if (v1059 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      unint64_t v1060 = v1059;
                      v1061 = operator new(4 * v1059);
                      unint64_t v1059 = v1060;
                      v1062 = (int *)&v1061[4 * v1056];
                      int *v1062 = v1052;
                      v1053 = v1062 + 1;
                      if (v977 != v1054)
                      {
LABEL_1294:
                        unint64_t v1063 = (char *)(v977 - 1) - (char *)v1054;
                        uint64_t v886 = v976;
                        if (v1063 < 0x2C || (unint64_t)((char *)v977 - v1061 - v1055) < 0x20)
                        {
                          v1064 = v977;
                          uint64_t v3 = (uint64_t)v1232;
                          goto LABEL_1297;
                        }
                        uint64_t v1147 = (v1063 >> 2) + 1;
                        uint64_t v1148 = 4 * (v1147 & 0x7FFFFFFFFFFFFFF8);
                        v1064 = &v977[v1148 / 0xFFFFFFFFFFFFFFFCLL];
                        v1062 = (int *)((char *)v1062 - v1148);
                        v1149 = &v1061[4 * v1056 - 16];
                        v1150 = v977 - 4;
                        uint64_t v1151 = v1147 & 0x7FFFFFFFFFFFFFF8;
                        uint64_t v3 = (uint64_t)v1232;
                        do
                        {
                          long long v1152 = *(_OWORD *)v1150;
                          *(v1149 - 1) = *((_OWORD *)v1150 - 1);
                          _OWORD *v1149 = v1152;
                          v1149 -= 2;
                          v1150 -= 8;
                          v1151 -= 8;
                        }
                        while (v1151);
                        if (v1147 != (v1147 & 0x7FFFFFFFFFFFFFF8))
                        {
                          do
                          {
LABEL_1297:
                            int v1065 = *--v1064;
                            *--v1062 = v1065;
                          }
                          while (v1064 != v1054);
                        }
                        v1245 = v1062;
                        v1246 = v1053;
                        unint64_t v1247 = (unint64_t)&v1061[4 * v1059];
                        if (!v1054) {
                          goto LABEL_1300;
                        }
LABEL_1299:
                        operator delete(v1054);
                        goto LABEL_1300;
                      }
                    }
                    else
                    {
                      v1061 = 0;
                      v1062 = (int *)(4 * v1056);
                      *(_DWORD *)(4 * v1056) = v1052;
                      v1053 = (void *)(4 * v1056 + 4);
                      if (v977 != v1054) {
                        goto LABEL_1294;
                      }
                    }
                    uint64_t v3 = (uint64_t)v1232;
                    uint64_t v886 = v976;
                    v1245 = v1062;
                    v1246 = v1053;
                    unint64_t v1247 = (unint64_t)&v1061[4 * v1059];
                    if (!v1054) {
                      goto LABEL_1300;
                    }
                    goto LABEL_1299;
                  }
                  uint64_t v982 = *(void *)(v3 + 48);
                  v983 = *(int **)(v982 + 56);
                  if (!v983)
                  {
                    int v985 = *(_DWORD *)(v982 + 52);
                    goto LABEL_1237;
                  }
                  uint64_t v984 = *(int *)(v982 + 48);
                  int v985 = *v983;
                  if ((int)v984 < *v983)
                  {
                    *(_DWORD *)(v982 + 48) = v984 + 1;
                    unint64_t v986 = *(void *)&v983[2 * v984 + 2];
                    if (*(_DWORD *)(v986 + 60) != 12) {
                      goto LABEL_1210;
                    }
LABEL_1239:
                    uint64_t v990 = *(void *)(v986 + 48);
                    uint64_t v992 = *(unsigned int *)(v990 + 64);
                    int v991 = *(_DWORD *)(v990 + 68);
                    v993 = (unsigned int *)(v990 + 64);
                    unsigned int v994 = v992 + 1;
                    if (v992 == v991) {
                      goto LABEL_1240;
                    }
                    goto LABEL_1241;
                  }
                  if (v985 == *(_DWORD *)(v982 + 52))
                  {
LABEL_1237:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v982 + 40), v985 + 1);
                    v983 = *(int **)(v982 + 56);
                    int v985 = *v983;
                  }
                  int *v983 = v985 + 1;
                  unint64_t v986 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v982 + 40));
                  uint64_t v1013 = *(void *)(v982 + 56);
                  uint64_t v1014 = *(int *)(v982 + 48);
                  *(_DWORD *)(v982 + 48) = v1014 + 1;
                  *(void *)(v1013 + 8 * v1014 + 8) = v986;
                  if (*(_DWORD *)(v986 + 60) == 12) {
                    goto LABEL_1239;
                  }
LABEL_1210:
                  operations_research::sat::ConstraintProto::clear_constraint(v986);
                  *(_DWORD *)(v986 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                  uint64_t v987 = *(void *)(v986 + 8);
                  v988 = (google::protobuf::Arena *)(v987 & 0xFFFFFFFFFFFFFFFELL);
                  if (v987) {
                    v988 = *(google::protobuf::Arena **)v988;
                  }
                  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v988);
                  uint64_t v990 = v989;
                  *(void *)(v986 + 48) = v989;
                  uint64_t v992 = *(unsigned int *)(v989 + 64);
                  int v991 = *(_DWORD *)(v989 + 68);
                  v993 = (unsigned int *)(v989 + 64);
                  unsigned int v994 = v992 + 1;
                  if (v992 == v991)
                  {
LABEL_1240:
                    google::protobuf::RepeatedField<long long>::Reserve(v993, v994);
                    int v991 = *(_DWORD *)(v990 + 68);
                  }
LABEL_1241:
                  uint64_t v1015 = *(void *)(v990 + 72);
                  *(void *)(v1015 + 8 * v992) = 1;
                  *(_DWORD *)(v990 + 64) = v994;
                  if (v994 == v991)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v993, v992 + 2);
                    uint64_t v1015 = *(void *)(v990 + 72);
                  }
                  *(void *)(v1015 + 8 * v994) = 1;
                  unsigned int *v993 = v992 + 2;
                  if (v1252 == v1251)
                  {
                    v1041 = 0;
                    v1042 = 0;
                    v1240 = 0;
                    v1241 = 0;
                    v1242 = 0;
                    goto LABEL_1303;
                  }
                  unint64_t v1016 = 0;
                  *(void *)v1219 = v886;
                  while (2)
                  {
                    int v1018 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                    int v1019 = v1018;
                    v1020 = (char *)v1246;
                    if ((unint64_t)v1246 < v1247)
                    {
                      *(_DWORD *)v1246 = v1018;
                      v1021 = v1020 + 4;
                      goto LABEL_1267;
                    }
                    v1022 = (char *)v1245;
                    int64_t v1023 = (unsigned char *)v1246 - (unsigned char *)v1245;
                    int64_t v1024 = ((unsigned char *)v1246 - (unsigned char *)v1245) >> 2;
                    unint64_t v1025 = v1024 + 1;
                    if ((unint64_t)(v1024 + 1) >> 62) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v1026 = v1247 - (void)v1245;
                    if ((uint64_t)(v1247 - (void)v1245) >> 1 > v1025) {
                      unint64_t v1025 = v1026 >> 1;
                    }
                    if ((unint64_t)v1026 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v1027 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v1027 = v1025;
                    }
                    if (v1027)
                    {
                      if (v1027 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      v1028 = operator new(4 * v1027);
                      v1029 = &v1028[4 * v1024];
                      _DWORD *v1029 = v1019;
                      v1021 = v1029 + 1;
                      if (v1020 == v1022) {
                        goto LABEL_1265;
                      }
LABEL_1259:
                      unint64_t v1030 = v1020 - 4 - v1022;
                      if (v1030 < 0x2C) {
                        goto LABEL_1565;
                      }
                      if ((unint64_t)(v1020 - &v1028[v1023]) < 0x20) {
                        goto LABEL_1565;
                      }
                      uint64_t v1031 = (v1030 >> 2) + 1;
                      uint64_t v1032 = 4 * (v1031 & 0x7FFFFFFFFFFFFFF8);
                      v1033 = &v1020[-v1032];
                      v1029 = (_DWORD *)((char *)v1029 - v1032);
                      v1034 = &v1028[4 * v1024 - 16];
                      v1035 = v1020 - 16;
                      uint64_t v1036 = v1031 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v1037 = *(_OWORD *)v1035;
                        *(v1034 - 1) = *((_OWORD *)v1035 - 1);
                        _OWORD *v1034 = v1037;
                        v1034 -= 2;
                        v1035 -= 32;
                        v1036 -= 8;
                      }
                      while (v1036);
                      v1020 = v1033;
                      if (v1031 != (v1031 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1565:
                        do
                        {
                          int v1038 = *((_DWORD *)v1020 - 1);
                          v1020 -= 4;
                          *--v1029 = v1038;
                        }
                        while (v1020 != v1022);
                      }
                    }
                    else
                    {
                      v1028 = 0;
                      v1029 = (_DWORD *)(4 * v1024);
                      *(_DWORD *)(4 * v1024) = v1019;
                      v1021 = (void *)(4 * v1024 + 4);
                      if (v1020 != v1022) {
                        goto LABEL_1259;
                      }
                    }
LABEL_1265:
                    v1245 = v1029;
                    v1246 = v1021;
                    unint64_t v1247 = (unint64_t)&v1028[4 * v1027];
                    if (v1022) {
                      operator delete(v1022);
                    }
LABEL_1267:
                    v1246 = v1021;
                    uint64_t v1039 = *(unsigned int *)(v990 + 16);
                    uint64_t v3 = (uint64_t)v1232;
                    if (v1039 == *(_DWORD *)(v990 + 20)) {
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v990 + 16), v1039 + 1);
                    }
                    *(_DWORD *)(*(void *)(v990 + 24) + 4 * v1039) = v1019;
                    *(_DWORD *)(v990 + 16) = v1039 + 1;
                    uint64_t v1040 = *(unsigned int *)(v990 + 40);
                    if (v1040 == *(_DWORD *)(v990 + 44)) {
                      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v990 + 40), v1040 + 1);
                    }
                    *(void *)(*(void *)(v990 + 48) + 8 * v104google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 1;
                    *(_DWORD *)(v990 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v1040 + 1;
                    ++v1016;
                    v968 = (char *)v1251;
                    size_t v970 = v1252 - (unsigned char *)v1251;
                    unint64_t v1017 = (v1252 - (unsigned char *)v1251) >> 3;
                    if (v1017 <= v1016)
                    {
                      uint64_t v886 = *(void *)v1219;
                      v1240 = 0;
                      v1241 = 0;
                      v1242 = 0;
                      if (v1252 == v1251) {
                        goto LABEL_1272;
                      }
LABEL_1301:
                      if ((v970 & 0x8000000000000000) != 0) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      v1042 = (char *)operator new(v970);
                      v1240 = v1042;
                      v1241 = v1042;
                      v1041 = &v1042[8 * v1017];
                      v1242 = v1041;
                      memcpy(v1042, v968, v970);
LABEL_1303:
                      std::__sort<std::__less<long long,long long> &,long long *>();
                      if (v1042 == v1041) {
                        goto LABEL_1319;
                      }
                      v1066 = v1042 + 8;
                      do
                      {
                        if (v1066 == v1041) {
                          goto LABEL_1319;
                        }
                        uint64_t v1067 = *((void *)v1066 - 1);
                        uint64_t v1068 = *(void *)v1066;
                        v1066 += 8;
                      }
                      while (v1067 != v1068);
                      v1069 = v1066 - 16;
                      while (v1066 != v1041)
                      {
                        uint64_t v1070 = v1067;
                        uint64_t v1067 = *(void *)v1066;
                        if (v1070 != *(void *)v1066)
                        {
                          *((void *)v1069 + 1) = v1067;
                          v1069 += 8;
                        }
                        v1066 += 8;
                      }
                      if (v1041 == v1069 + 8)
                      {
LABEL_1319:
                        unint64_t v1071 = v1269;
                        if ((unint64_t)v1269 >= 0x80)
                        {
LABEL_1320:
                          operator delete(v1268.__r_.__value_.__l.__data_);
                          unint64_t v1071 = 0;
                          v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                          std::string::size_type v1270 = 0;
                          *(void *)&long long v1269 = 0;
                          *(_OWORD *)&v1268.__r_.__value_.__r.__words[1] = 0uLL;
                          goto LABEL_1321;
                        }
                      }
                      else
                      {
                        v1041 = v1069 + 8;
                        v1241 = v1069 + 8;
                        unint64_t v1071 = v1269;
                        if ((unint64_t)v1269 >= 0x80) {
                          goto LABEL_1320;
                        }
                      }
                      if (v1071)
                      {
                        v1268.__r_.__value_.__r.__words[2] = 0;
                        memset(v1268.__r_.__value_.__l.__data_, 128, v1071 + 8);
                        *(unsigned char *)(v1268.__r_.__value_.__r.__words[0] + v1269) = -1;
                        unint64_t v1071 = v1269;
                        uint64_t v1072 = v1071 - (v1071 >> 3);
                        if ((void)v1269 == 7) {
                          uint64_t v1072 = 6;
                        }
                        std::string::size_type v1270 = v1072 - v1268.__r_.__value_.__r.__words[2];
                      }
LABEL_1321:
                      v1073 = (unint64_t *)*((void *)&v1269 + 1);
                      if (*((void *)&v1269 + 1))
                      {
                        *(void *)(*((void *)&v1269 + 1) + 8) = 0;
                        unint64_t *v1073 = v1071;
                        v1073[4] = 0;
                        v1073[2] = 0;
                        std::string::size_type v1074 = __str.__r_.__value_.__r.__words[0];
                        v1075 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v886);
                        v1235 = 0;
                        v1236 = 0;
                        v1234 = 0;
                        int64_t v1076 = v1041 - v1042;
                        if (v1076)
                        {
LABEL_1323:
                          if (v1076 < 0) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          v1077 = (char *)operator new(v1076);
                          v1078 = &v1077[8 * (v1076 >> 3)];
                          v1234 = v1077;
                          v1236 = v1078;
                          memcpy(v1077, v1042, v1076);
                          v1235 = v1078;
                        }
                      }
                      else
                      {
                        std::string::size_type v1074 = __str.__r_.__value_.__r.__words[0];
                        v1075 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v886);
                        v1235 = 0;
                        v1236 = 0;
                        v1234 = 0;
                        int64_t v1076 = v1041 - v1042;
                        if (v1076) {
                          goto LABEL_1323;
                        }
                      }
                      operations_research::Domain::FromValues((int64_t **)&v1234, &v1237);
                      int v1079 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v1075, (const operations_research::Domain *)&v1237, &v1255);
                      if (v1237) {
                        operator delete(v1238);
                      }
                      if (v1234)
                      {
                        v1235 = v1234;
                        operator delete(v1234);
                      }
                      if (v1079)
                      {
                        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, (const char *)*(unsigned int *)(v1074 + 4 * v886), &v1237);
                        unint64_t v1080 = v1237 & 1;
                        if (v1237) {
                          v1081 = (uint64_t *)v1238;
                        }
                        else {
                          v1081 = (uint64_t *)&v1238;
                        }
                        if (v1237 >= 2)
                        {
                          v1082 = &v1081[2 * (v1237 >> 1)];
                          do
                          {
                            uint64_t v1083 = *v1081;
                            if (*v1081 <= v1081[1])
                            {
                              do
                              {
                                unsigned int v1092 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v1232, *(_DWORD *)(v1074 + 4 * v886), v1083);
                                uint64_t v1088 = 0;
                                unint64_t v1093 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                         + v1083)
                                        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                            + v1083));
                                std::string::size_type v1090 = v1268.__r_.__value_.__l.__size_;
                                for (std::string::size_type n = (v1268.__r_.__value_.__r.__words[0] >> 12) ^ (v1093 >> 7); ; std::string::size_type n = v1088 + v1084)
                                {
                                  std::string::size_type v1084 = n & v1269;
                                  uint64_t v1085 = *(void *)(v1268.__r_.__value_.__r.__words[0] + v1084);
                                  unint64_t v1086 = ((v1085 ^ (0x101010101010101 * (v1093 & 0x7F))) - 0x101010101010101) & ~(v1085 ^ (0x101010101010101 * (v1093 & 0x7F))) & 0x8080808080808080;
                                  if (v1086) {
                                    break;
                                  }
LABEL_1341:
                                  if ((v1085 & (~v1085 << 6) & 0x8080808080808080) != 0)
                                  {
                                    unint64_t v1087 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)&v1268, v1093);
                                    std::string::size_type v1090 = v1268.__r_.__value_.__l.__size_;
                                    std::string::size_type v1091 = v1268.__r_.__value_.__l.__size_ + 16 * v1087;
                                    *(void *)std::string::size_type v1091 = v1083;
                                    *(_DWORD *)(v1091 + 8) = 0;
                                    goto LABEL_1344;
                                  }
                                  v1088 += 8;
                                }
                                while (1)
                                {
                                  unint64_t v1087 = (v1084 + (__clz(__rbit64(v1086)) >> 3)) & v1269;
                                  if (*(void *)(v1268.__r_.__value_.__l.__size_ + 16 * v1087) == v1083) {
                                    break;
                                  }
                                  v1086 &= v1086 - 1;
                                  if (!v1086) {
                                    goto LABEL_1341;
                                  }
                                }
LABEL_1344:
                                *(_DWORD *)(v1090 + 16 * v1087 + 8) = v1092;
                                BOOL v70 = v1083++ < v1081[1];
                              }
                              while (v70);
                            }
                            v1081 += 2;
                          }
                          while (v1081 != v1082);
                          unint64_t v1080 = v1237 & 1;
                          uint64_t v3 = (uint64_t)v1232;
                        }
                        if (v1080)
                        {
                          v1094 = v1238;
LABEL_1352:
                          operator delete(v1094);
                        }
                      }
                      else
                      {
                        char v1239 = 0;
                        LOBYTE(v1237) = 0;
                        operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1237);
                        if (v1239 < 0)
                        {
                          v1094 = (void *)v1237;
                          goto LABEL_1352;
                        }
                      }
                      if (v1042) {
                        operator delete(v1042);
                      }
                      if (v1079)
                      {
                        v1240 = 0;
                        v1241 = 0;
                        v1242 = 0;
                        v1095 = v1248;
                        int64_t v1096 = v1249 - (unsigned char *)v1248;
                        if (v1249 == v1248)
                        {
                          v1098 = 0;
                          v1097 = 0;
                        }
                        else
                        {
                          if (v1096 < 0) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          v1097 = (char *)operator new(v1249 - (unsigned char *)v1248);
                          v1098 = &v1097[8 * (v1096 >> 3)];
                          v1240 = v1097;
                          v1242 = v1098;
                          memcpy(v1097, v1095, v1096);
                        }
                        std::__sort<std::__less<long long,long long> &,long long *>();
                        if (v1097 == v1098) {
                          goto LABEL_1376;
                        }
                        v1099 = v1097 + 8;
                        do
                        {
                          if (v1099 == v1098) {
                            goto LABEL_1376;
                          }
                          uint64_t v1100 = *((void *)v1099 - 1);
                          uint64_t v1101 = *(void *)v1099;
                          v1099 += 8;
                        }
                        while (v1100 != v1101);
                        v1102 = v1099 - 16;
                        while (v1099 != v1098)
                        {
                          uint64_t v1103 = v1100;
                          uint64_t v1100 = *(void *)v1099;
                          if (v1103 != *(void *)v1099)
                          {
                            *((void *)v1102 + 1) = v1100;
                            v1102 += 8;
                          }
                          v1099 += 8;
                        }
                        if (v1098 == v1102 + 8)
                        {
LABEL_1376:
                          unint64_t v1104 = v1263;
                          if ((unint64_t)v1263 >= 0x80)
                          {
LABEL_1377:
                            operator delete(*(void **)v1262);
                            unint64_t v1104 = 0;
                            *(void *)v1262 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                            uint64_t v1264 = 0;
                            *(void *)&v1262[4] = 0;
                            *(void *)&unsigned long long v1263 = 0;
                            *(void *)&v1262[2] = 0;
                            goto LABEL_1378;
                          }
                        }
                        else
                        {
                          v1098 = v1102 + 8;
                          v1241 = v1102 + 8;
                          unint64_t v1104 = v1263;
                          if ((unint64_t)v1263 >= 0x80) {
                            goto LABEL_1377;
                          }
                        }
                        if (v1104)
                        {
                          *(void *)&v1262[4] = 0;
                          memset(*(void **)v1262, 128, v1104 + 8);
                          *(unsigned char *)(*(void *)v1262 + v1263) = -1;
                          unint64_t v1104 = v1263;
                          uint64_t v1105 = v1104 - (v1104 >> 3);
                          if ((void)v1263 == 7) {
                            uint64_t v1105 = 6;
                          }
                          uint64_t v1264 = v1105 - *(void *)&v1262[4];
                        }
LABEL_1378:
                        v1106 = (unint64_t *)*((void *)&v1263 + 1);
                        if (*((void *)&v1263 + 1))
                        {
                          *(void *)(*((void *)&v1263 + 1) + 8) = 0;
                          unint64_t *v1106 = v1104;
                          v1106[4] = 0;
                          v1106[2] = 0;
                          unint64_t v1107 = v1098 - v1097;
                          if (v1098 - v1097 == 16) {
                            goto LABEL_1380;
                          }
                        }
                        else
                        {
                          unint64_t v1107 = v1098 - v1097;
                          if (v1098 - v1097 == 16)
                          {
LABEL_1380:
                            int v1108 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                            uint64_t v1109 = 0;
                            unint64_t v1110 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + *(void *)v1097)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + *(void *)v1097));
                            uint64_t v1111 = *(void *)v1262;
                            uint64_t v1112 = *(void *)&v1262[2];
                            uint64_t v1113 = *(void *)v1262 >> 12;
                            unint64_t v1114 = (*(void *)v1262 >> 12) ^ (v1110 >> 7);
                            uint64_t v1115 = v1263;
                            while (1)
                            {
                              uint64_t v1116 = v1114 & v1263;
                              uint64_t v1117 = *(void *)(*(void *)v1262 + v1116);
                              unint64_t v1118 = ((v1117 ^ (0x101010101010101 * (v1110 & 0x7F))) - 0x101010101010101) & ~(v1117 ^ (0x101010101010101 * (v1110 & 0x7F))) & 0x8080808080808080;
                              if (v1118) {
                                break;
                              }
LABEL_1384:
                              if ((v1117 & (~v1117 << 6) & 0x8080808080808080) != 0)
                              {
                                unint64_t v1119 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1262, v1110);
                                uint64_t v1112 = *(void *)&v1262[2];
                                uint64_t v1120 = *(void *)&v1262[2] + 16 * v1119;
                                *(void *)uint64_t v1120 = *(void *)v1097;
                                *(_DWORD *)(v1120 + 8) = 0;
                                uint64_t v1111 = *(void *)v1262;
                                uint64_t v1115 = v1263;
                                uint64_t v1113 = *(void *)v1262 >> 12;
                                goto LABEL_1392;
                              }
                              v1109 += 8;
                              unint64_t v1114 = v1109 + v1116;
                            }
                            while (1)
                            {
                              unint64_t v1119 = (v1116 + (__clz(__rbit64(v1118)) >> 3)) & v1263;
                              if (*(void *)(*(void *)&v1262[2] + 16 * v1119) == *(void *)v1097) {
                                break;
                              }
                              v1118 &= v1118 - 1;
                              if (!v1118) {
                                goto LABEL_1384;
                              }
                            }
LABEL_1392:
                            uint64_t v1121 = 0;
                            *(_DWORD *)(v1112 + 16 * v1119 + 8) = v1108;
                            uint64_t v1122 = *((void *)v1098 - 1);
                            unint64_t v1123 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + v1122)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + v1122));
                            unint64_t v1124 = v1113 ^ (v1123 >> 7);
                            uint64_t v1125 = *(void *)&v1262[2];
                            while (1)
                            {
                              unint64_t v1126 = v1124 & v1115;
                              uint64_t v1127 = *(void *)(v1111 + v1126);
                              unint64_t v1128 = ((v1127 ^ (0x101010101010101 * (v1123 & 0x7F))) - 0x101010101010101) & ~(v1127 ^ (0x101010101010101 * (v1123 & 0x7F))) & 0x8080808080808080;
                              if (v1128) {
                                break;
                              }
LABEL_1396:
                              if ((v1127 & (~v1127 << 6) & 0x8080808080808080) != 0)
                              {
                                unint64_t v1129 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1262, v1123);
                                uint64_t v1125 = *(void *)&v1262[2];
                                uint64_t v1130 = *(void *)&v1262[2] + 16 * v1129;
                                *(void *)uint64_t v1130 = *((void *)v1098 - 1);
                                *(_DWORD *)(v1130 + 8) = 0;
                                goto LABEL_1399;
                              }
                              v1121 += 8;
                              unint64_t v1124 = v1121 + v1126;
                            }
                            while (1)
                            {
                              unint64_t v1129 = (v1126 + (__clz(__rbit64(v1128)) >> 3)) & v1115;
                              if (*(void *)(*(void *)&v1262[2] + 16 * v1129) == v1122) {
                                break;
                              }
                              v1128 &= v1128 - 1;
                              if (!v1128) {
                                goto LABEL_1396;
                              }
                            }
LABEL_1399:
                            *(_DWORD *)(v1125 + 16 * v1129 + 8) = ~v1108;
                            goto LABEL_1443;
                          }
                        }
                        if (v1097 != v1098 && v1107 >= 0x11)
                        {
                          v1153 = v1097;
                          do
                          {
                            uint64_t v1162 = *(void *)v1153;
                            int v1163 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v3);
                            uint64_t v1158 = 0;
                            unint64_t v1164 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                     + v1162)
                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                       * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                        + v1162));
                            uint64_t v1160 = *(void *)&v1262[2];
                            for (iunint64_t i = (*(void *)v1262 >> 12) ^ (v1164 >> 7); ; iunint64_t i = v1158 + v1154)
                            {
                              uint64_t v1154 = ii & v1263;
                              uint64_t v1155 = *(void *)(*(void *)v1262 + v1154);
                              unint64_t v1156 = ((v1155 ^ (0x101010101010101 * (v1164 & 0x7F))) - 0x101010101010101) & ~(v1155 ^ (0x101010101010101 * (v1164 & 0x7F))) & 0x8080808080808080;
                              if (v1156) {
                                break;
                              }
LABEL_1438:
                              if ((v1155 & (~v1155 << 6) & 0x8080808080808080) != 0)
                              {
                                unint64_t v1157 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)v1262, v1164);
                                uint64_t v1160 = *(void *)&v1262[2];
                                uint64_t v1161 = *(void *)&v1262[2] + 16 * v1157;
                                *(void *)uint64_t v1161 = v1162;
                                *(_DWORD *)(v1161 + 8) = 0;
                                goto LABEL_1441;
                              }
                              v1158 += 8;
                            }
                            while (1)
                            {
                              unint64_t v1157 = (v1154 + (__clz(__rbit64(v1156)) >> 3)) & v1263;
                              if (*(void *)(*(void *)&v1262[2] + 16 * v1157) == v1162) {
                                break;
                              }
                              v1156 &= v1156 - 1;
                              if (!v1156) {
                                goto LABEL_1438;
                              }
                            }
LABEL_1441:
                            *(_DWORD *)(v1160 + 16 * v1157 + 8) = v1163;
                            v1153 += 8;
                          }
                          while (v1153 != v1098);
                        }
LABEL_1443:
                        if (v1097) {
                          operator delete(v1097);
                        }
                        if (*(void *)&v1265[16]) {
                        if (v1268.__r_.__value_.__r.__words[2])
                        }
                        uint64_t v1165 = *(void *)&v1262[4];
                        if (*(void *)&v1262[4])
                        {
                          uint64_t v1165 = *(void *)&v1262[4];
                        }
                        __n128 v885 = *(__n128 *)v1265;
                        *(_OWORD *)v1265 = *(_OWORD *)v1262;
                        *(__n128 *)v1262 = v885;
                        v1146 = (unint64_t *)*((void *)&v1266 + 1);
                        unint64_t v1166 = v1266;
                        uint64_t v1167 = v1267;
                        unsigned long long v1266 = v1263;
                        *(void *)&v1262[4] = *(void *)&v1265[16];
                        unsigned long long v1263 = __PAIR128__((unint64_t)v1146, v1166);
                        *(void *)&v1265[16] = v1165;
                        uint64_t v1267 = v1264;
                        uint64_t v1264 = v1167;
                        if (v1166 < 0x80)
                        {
                          if (v1166)
                          {
                            *(void *)&v1262[4] = 0;
                            memset((void *)v885.n128_u64[0], 128, v1166 + 8);
                            *(unsigned char *)(*(void *)v1262 + v1263) = -1;
                            unint64_t v1168 = v1263;
                            uint64_t v1169 = v1168 - (v1168 >> 3);
                            if ((void)v1263 == 7) {
                              uint64_t v1169 = 6;
                            }
                            uint64_t v1264 = v1169 - *(void *)&v1262[4];
                            v1146 = (unint64_t *)*((void *)&v1263 + 1);
                            int v1143 = 0;
                            if (*((void *)&v1263 + 1)) {
                              goto LABEL_1468;
                            }
                          }
                          else
                          {
                            unint64_t v1168 = 0;
                            int v1143 = 0;
                            if (v1146) {
                              goto LABEL_1468;
                            }
                          }
LABEL_1453:
                          v1144 = v1245;
                          if (!v1245) {
                            goto LABEL_1455;
                          }
                        }
                        else
                        {
                          operator delete((void *)v885.n128_u64[0]);
                          unint64_t v1168 = 0;
                          *(void *)v1262 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                          uint64_t v1264 = 0;
                          *(void *)&v1262[4] = 0;
                          *(void *)&unsigned long long v1263 = 0;
                          *(void *)&v1262[2] = 0;
                          v1146 = (unint64_t *)*((void *)&v1263 + 1);
                          int v1143 = 0;
                          if (!*((void *)&v1263 + 1)) {
                            goto LABEL_1453;
                          }
LABEL_1468:
                          v1146[1] = 0;
                          unint64_t *v1146 = v1168;
                          v1146[4] = 0;
LABEL_1472:
                          v1146[2] = 0;
                          v1144 = v1245;
                          if (!v1245) {
                            goto LABEL_1455;
                          }
                        }
LABEL_1454:
                        v1246 = v1144;
                        operator delete(v1144);
                        goto LABEL_1455;
                      }
LABEL_1415:
                      int v1143 = 1;
                      v1144 = v1245;
                      if (!v1245) {
                        goto LABEL_1455;
                      }
                      goto LABEL_1454;
                    }
                    continue;
                  }
                }
                BOOL v1244 = 0;
                int ConstantVar = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)v3, 1, v885);
                int v979 = ConstantVar;
                v980 = (char *)v1246;
                if ((unint64_t)v1246 >= v1247) {
                  break;
                }
                *(_DWORD *)v1246 = ConstantVar;
                v981 = v980 + 4;
                uint64_t v3 = (uint64_t)v1232;
LABEL_1407:
                v1246 = v981;
                v1240 = (void *)*((void *)v1256 + 6 * v886 + 8);
                int v1243 = 1;
                if (v1240 != (void *)1) {
                  google::MakeCheckOpString<unsigned long,int>((int)&v1240, (int)&v1243, "reachable_states[time + 1].size() == 1");
                }
                v1140 = (const char *)*(unsigned int *)(__str.__r_.__value_.__r.__words[0] + 4 * v886);
                operations_research::Domain::Domain(&v1240, *(void *)v968);
                char v1141 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v1140, (const operations_research::Domain *)&v1240, &v1244);
                if (v1240) {
                  operator delete(v1241);
                }
                if ((v1141 & 1) == 0)
                {
                  HIBYTE(v1242) = 0;
                  LOBYTE(v124google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
                  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)&v1240);
                  if (SHIBYTE(v1242) < 0) {
                    operator delete(v1240);
                  }
                  goto LABEL_1415;
                }
                unint64_t v1142 = v1266;
                if ((unint64_t)v1266 < 0x80)
                {
                  if ((void)v1266)
                  {
                    *(void *)&v1265[16] = 0;
                    memset(*(void **)v1265, 128, v1266 + 8);
                    *(unsigned char *)(*(void *)v1265 + v1266) = -1;
                    unint64_t v1142 = v1266;
                    uint64_t v1145 = v1142 - (v1142 >> 3);
                    if ((void)v1266 == 7) {
                      uint64_t v1145 = 6;
                    }
                    uint64_t v1267 = v1145 - *(void *)&v1265[16];
                  }
                }
                else
                {
                  operator delete(*(void **)v1265);
                  unint64_t v1142 = 0;
                  *(void *)v1265 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                  uint64_t v1267 = 0;
                  *(void *)&v1265[16] = 0;
                  *(void *)&unsigned long long v1266 = 0;
                  *(void *)&v1265[8] = 0;
                }
                v1146 = (unint64_t *)*((void *)&v1266 + 1);
                if (*((void *)&v1266 + 1))
                {
                  *(void *)(*((void *)&v1266 + 1) + 8) = 0;
                  unint64_t *v1146 = v1142;
                  v1146[4] = 0;
                  int v1143 = 18;
                  goto LABEL_1472;
                }
                int v1143 = 18;
                v1144 = v1245;
                if (v1245) {
                  goto LABEL_1454;
                }
LABEL_1455:
                if (v1248) {
                  operator delete(v1248);
                }
                if (v1251) {
                  operator delete(v1251);
                }
                if (v1254[0]) {
                  operator delete(v1254[0]);
                }
                if (v1143 != 18 && v1143) {
                  goto LABEL_1480;
                }
                if (++v886 == v1194)
                {
                  if (v1255)
                  {
                    v1254[0] = (operations_research::sat::PresolveContext **)operator new(0x28uLL);
                    *(_OWORD *)&v1254[1] = xmmword_23CE7ECE0;
                    strcpy((char *)v1254[0], "automaton: reduced variable domains");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1254);
                    if (SHIBYTE(v1254[2]) < 0) {
                      operator delete(v1254[0]);
                    }
                  }
                  goto LABEL_1477;
                }
              }
              v1004 = (char *)v1245;
              int64_t v1005 = (unsigned char *)v1246 - (unsigned char *)v1245;
              int64_t v1006 = ((unsigned char *)v1246 - (unsigned char *)v1245) >> 2;
              unint64_t v1007 = v1006 + 1;
              if ((unint64_t)(v1006 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v1008 = v1247 - (void)v1245;
              if ((uint64_t)(v1247 - (void)v1245) >> 1 > v1007) {
                unint64_t v1007 = v1008 >> 1;
              }
              if ((unint64_t)v1008 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v1009 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v1009 = v1007;
              }
              if (v1009)
              {
                if (v1009 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v1010 = operator new(4 * v1009);
                v1011 = &v1010[4 * v1006];
                _DWORD *v1011 = v979;
                v981 = v1011 + 1;
                if (v980 != v1004)
                {
LABEL_1233:
                  unint64_t v1012 = v980 - 4 - v1004;
                  if (v1012 >= 0x2C)
                  {
                    unint64_t v1131 = v980 - &v1010[v1005];
                    uint64_t v3 = (uint64_t)v1232;
                    if (v1131 >= 0x20)
                    {
                      uint64_t v1132 = (v1012 >> 2) + 1;
                      uint64_t v1133 = 4 * (v1132 & 0x7FFFFFFFFFFFFFF8);
                      v1134 = &v980[-v1133];
                      v1011 = (_DWORD *)((char *)v1011 - v1133);
                      v1135 = &v1010[4 * v1006 - 16];
                      v1136 = v980 - 16;
                      uint64_t v1137 = v1132 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v1138 = *(_OWORD *)v1136;
                        *(v1135 - 1) = *((_OWORD *)v1136 - 1);
                        _OWORD *v1135 = v1138;
                        v1135 -= 2;
                        v1136 -= 32;
                        v1137 -= 8;
                      }
                      while (v1137);
                      v980 = v1134;
                      if (v1132 == (v1132 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1405:
                        v1245 = v1011;
                        v1246 = v981;
                        unint64_t v1247 = (unint64_t)&v1010[4 * v1009];
                        if (v1004) {
                          operator delete(v1004);
                        }
                        goto LABEL_1407;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v3 = (uint64_t)v1232;
                  }
                  do
                  {
                    int v1139 = *((_DWORD *)v980 - 1);
                    v980 -= 4;
                    *--v1011 = v1139;
                  }
                  while (v980 != v1004);
                  goto LABEL_1405;
                }
              }
              else
              {
                v1010 = 0;
                v1011 = (_DWORD *)(4 * v1006);
                *(_DWORD *)(4 * v1006) = v979;
                v981 = (void *)(4 * v1006 + 4);
                if (v980 != v1004) {
                  goto LABEL_1233;
                }
              }
              uint64_t v3 = (uint64_t)v1232;
              goto LABEL_1405;
            }
          }
          else
          {
            uint64_t v201 = *(int *)(v93 + 16);
            if (v201)
            {
              v202 = *(void **)(v93 + 24);
              uint64_t v203 = 8 * v201;
              while (*(void *)(v93 + 136) != *v202)
              {
                ++v202;
                v203 -= 8;
                if (!v203) {
                  goto LABEL_237;
                }
              }
              v1258[0] = (unint64_t)operator new(0x20uLL);
              *(_OWORD *)&v1258[1] = xmmword_23CE7EC70;
              strcpy((char *)v1258[0], "automaton: empty constraint");
              operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1258);
              if (SHIBYTE(v1258[2]) < 0) {
                operator delete((void *)v1258[0]);
              }
LABEL_820:
              operations_research::sat::ConstraintProto::Clear(v1233);
              goto LABEL_1507;
            }
          }
LABEL_237:
          HIBYTE(v1258[2]) = 0;
          LOBYTE(v1258[0]) = 0;
          operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v3, (uint64_t)v1258);
          goto LABEL_623;
        case 0x12:
          uint64_t v25 = *((void *)v1233 + 6);
          int v27 = *(_DWORD *)(v25 + 40);
          LODWORD(v1258[0]) = *(_DWORD *)(v25 + 16);
          uint64_t v26 = LODWORD(v1258[0]);
          *(_DWORD *)v1265 = v27;
          if (LODWORD(v1258[0]) != v27) {
            google::MakeCheckOpString<int,int>((int)v1258, (int)v1265, "size == ct->inverse().f_inverse().size()");
          }
          int v28 = 18;
          uint64_t v29 = *(int *)(v25 + 16);
          if (!v29) {
            goto LABEL_23;
          }
          uint64_t v30 = *(unsigned int **)(v25 + 24);
          uint64_t v31 = 4 * v29;
          while (1)
          {
            uint64_t v32 = (const char *)*v30;
            operations_research::Domain::Domain(v1258, 0, (int)v26 - 1);
            char v33 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v32, (const operations_research::Domain *)v1258, 0);
            if (v1258[0]) {
              operator delete((void *)v1258[1]);
            }
            if ((v33 & 1) == 0) {
              break;
            }
            ++v30;
            v31 -= 4;
            if (!v31)
            {
              int v28 = *((_DWORD *)v1233 + 15);
LABEL_23:
              uint64_t v34 = &operations_research::sat::_InverseConstraintProto_default_instance_;
              if (v28 == 18) {
                uint64_t v34 = (uint64_t *)*((void *)v1233 + 6);
              }
              uint64_t v35 = *((int *)v34 + 10);
              if (!v35)
              {
LABEL_32:
                memset(v1258, 0, sizeof(v1258));
                v1268.__r_.__value_.__r.__words[0] = v3;
                LODWORD(v1268.__r_.__value_.__r.__words[1]) = v26;
                v1268.__r_.__value_.__r.__words[2] = (std::string::size_type)v1258;
                if (v28 == 18) {
                  unsigned int v40 = (uint64_t *)*((void *)v1233 + 6);
                }
                else {
                  unsigned int v40 = &operations_research::sat::_InverseConstraintProto_default_instance_;
                }
                {
                  uint64_t v204 = *((_DWORD *)v1233 + 15) == 18
                       ? (uint64_t *)*((void *)v1233 + 6)
                       : &operations_research::sat::_InverseConstraintProto_default_instance_;
                  {
                    if ((int)v26 >= 1)
                    {
                      for (jstd::string::size_type j = 0; jj != v26; ++jj)
                      {
                        unint64_t v510 = &operations_research::sat::_InverseConstraintProto_default_instance_;
                        if (*((_DWORD *)v1233 + 15) == 18) {
                          unint64_t v510 = (uint64_t *)*((void *)v1233 + 6);
                        }
                        unint64_t v511 = (const char *)*(unsigned int *)(v510[3] + 4 * jj);
                        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v511, (unint64_t *)v1265);
                        uint64_t v512 = v1265[0] & 1;
                        if (v1265[0]) {
                          std::string::size_type v513 = *(uint64_t **)&v1265[8];
                        }
                        else {
                          std::string::size_type v513 = (uint64_t *)&v1265[8];
                        }
                        if (*(void *)v1265 >= 2uLL)
                        {
                          uint64_t v514 = &v513[2 * (*(void *)v1265 >> 1)];
                          do
                          {
                            uint64_t v515 = *v513;
                            if (*v513 <= v513[1])
                            {
                              uint64_t v516 = v515 << 32;
                              do
                              {
                                v517 = &operations_research::sat::_InverseConstraintProto_default_instance_;
                                if (*((_DWORD *)v1233 + 15) == 18) {
                                  v517 = (uint64_t *)*((void *)v1233 + 6);
                                }
                                int v518 = *(_DWORD *)(v517[6] + (v516 >> 30));
                                v1262[0] = 0;
                                if (operations_research::sat::PresolveContext::HasVarValueEncoding((operations_research::sat::PresolveContext *)v3, v518, jj, v1262))
                                {
                                  operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, (const char *)v1262[0], (int)v511, v515);
                                }
                                else
                                {
                                  uint64_t v519 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding((operations_research::sat::PresolveContext *)v3, (int)v511, v515);
                                  operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)v3, v519, v518, jj);
                                }
                                v516 += 0x100000000;
                                BOOL v70 = v515++ < v513[1];
                              }
                              while (v70);
                            }
                            v513 += 2;
                          }
                          while (v513 != v514);
                          uint64_t v512 = v1265[0] & 1;
                        }
                        if (v512) {
                          operator delete(*(void **)&v1265[8]);
                        }
                      }
                    }
                    operations_research::sat::ConstraintProto::Clear(v1233);
                    v1265[23] = 17;
                    strcpy(v1265, "inverse: expanded");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)v1265);
                    if ((v1265[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v1265);
                    }
                  }
                }
                uint64_t v467 = (void *)v1258[0];
                if (v1258[0])
                {
                  v1258[1] = v1258[0];
                  goto LABEL_1506;
                }
                goto LABEL_1507;
              }
              BOOL v36 = (unsigned int *)v34[6];
              uint64_t v37 = 4 * v35;
              while (1)
              {
                uint64_t v38 = (const char *)*v36;
                operations_research::Domain::Domain(v1258, 0, (int)v26 - 1);
                char v39 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v3, v38, (const operations_research::Domain *)v1258, 0);
                if (v1258[0]) {
                  operator delete((void *)v1258[1]);
                }
                if ((v39 & 1) == 0) {
                  break;
                }
                ++v36;
                v37 -= 4;
                if (!v37)
                {
                  int v28 = *((_DWORD *)v1233 + 15);
                  goto LABEL_32;
                }
              }
              if (*off_26AECFE10[0] < 1
                || off_26AECFE10[0] == &google::kLogSiteUninitialized
                && !google::InitVLOG3__((google *)off_26AECFE10, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1))
              {
                goto LABEL_1507;
              }
              google::LogMessage::LogMessage((google::LogMessage *)v1258, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 360);
              uint64_t v205 = (void *)google::LogMessage::stream((google::LogMessage *)v1258);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
LABEL_249:
              google::LogMessage::~LogMessage((google::LogMessage *)v1258);
              goto LABEL_1507;
            }
          }
          if (*off_26AECFE08[0] < 1
            || off_26AECFE08[0] == &google::kLogSiteUninitialized
            && !google::InitVLOG3__((google *)off_26AECFE08, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1))
          {
            goto LABEL_1507;
          }
          google::LogMessage::LogMessage((google::LogMessage *)v1258, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 354);
          uint64_t v142 = (void *)google::LogMessage::stream((google::LogMessage *)v1258);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
          goto LABEL_249;
        case 0x18:
          v1256 = (operations_research::sat::PresolveContext *)v3;
          uint64_t v47 = *((void *)v1233 + 6);
          if (*(void *)(v47 + 88) > *(void *)(v47 + 96))
          {
            uint64_t v48 = (operations_research::sat::PresolveContext *)v3;
            if (*_MergedGlobals_4[0] >= 1)
            {
              if (_MergedGlobals_4[0] != &google::kLogSiteUninitialized
                || (inited = google::InitVLOG3__((google *)_MergedGlobals_4, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)1), uint64_t v48 = (operations_research::sat::PresolveContext *)v3, inited))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v1258, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 35);
                uint64_t v50 = (void *)google::LogMessage::stream((google::LogMessage *)v1258);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Empty level domain in reservoir constraint.", 43);
                google::LogMessage::~LogMessage((google::LogMessage *)v1258);
                uint64_t v48 = v1256;
              }
            }
            HIBYTE(v1258[2]) = 0;
            LOBYTE(v1258[0]) = 0;
            operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v48, (uint64_t)v1258);
            goto LABEL_623;
          }
          v1258[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_OWORD *)&v1258[1] = 0u;
          long long v1259 = 0u;
          uint64_t v1260 = 0;
          std::string::size_type v106 = (char *)*(unsigned int *)(v47 + 16);
          unsigned int v1229 = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)v3, 1, (__n128)0);
          v1254[0] = &v1256;
          uint64_t v107 = *(int *)(v47 + 40);
          v1222 = v106;
          if (!v107) {
            goto LABEL_265;
          }
          std::string::size_type v108 = *(int64x2_t **)(v47 + 48);
          unint64_t v109 = (v107 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v109 >= 7)
          {
            unint64_t v206 = v109 + 1;
            uint64_t v207 = (v109 + 1) & 0x3FFFFFFFFFFFFFF8;
            std::string::size_type v112 = &v108->i64[v207];
            std::string::size_type v208 = v108 + 2;
            int32x4_t v209 = 0uLL;
            uint64_t v210 = v207;
            int32x4_t v211 = 0uLL;
            int32x4_t v212 = 0uLL;
            int32x4_t v213 = 0uLL;
            do
            {
              int64x2_t v214 = v208[-2];
              int64x2_t v215 = v208[-1];
              int64x2_t v216 = *v208;
              int64x2_t v217 = v208[1];
              v208 += 4;
              int8x16_t v218 = (int8x16_t)vuzp1q_s32((int32x4_t)vshrq_n_u64((uint64x2_t)v214, 0x3FuLL), (int32x4_t)vshrq_n_u64((uint64x2_t)v215, 0x3FuLL));
              int32x4_t v219 = vuzp1q_s32((int32x4_t)vcgtzq_s64(v214), (int32x4_t)vcgtzq_s64(v215));
              int32x4_t v220 = vuzp1q_s32((int32x4_t)vcgtzq_s64(v216), (int32x4_t)vcgtzq_s64(v217));
              int32x4_t v212 = vsubq_s32(v212, v219);
              int32x4_t v213 = vsubq_s32(v213, v220);
              int32x4_t v209 = vaddq_s32((int32x4_t)vbicq_s8(v218, (int8x16_t)v219), v209);
              int32x4_t v211 = vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshrq_n_u64((uint64x2_t)v216, 0x3FuLL), (int32x4_t)vshrq_n_u64((uint64x2_t)v217, 0x3FuLL)), (int8x16_t)v220), v211);
              v210 -= 8;
            }
            while (v210);
            int v111 = vaddvq_s32(vaddq_s32(v213, v212));
            int v110 = vaddvq_s32(vaddq_s32(v211, v209));
            if (v206 == v207) {
              goto LABEL_260;
            }
          }
          else
          {
            int v110 = 0;
            int v111 = 0;
            std::string::size_type v112 = *(uint64_t **)(v47 + 48);
          }
          uint64_t v221 = &v108->i64[v107];
          do
          {
            uint64_t v222 = *v112++;
            unint64_t v223 = (unint64_t)v222 >> 63;
            if (v222 <= 0)
            {
              int v224 = v223;
            }
            else
            {
              ++v111;
              int v224 = 0;
            }
            v110 += v224;
          }
          while (v112 != v221);
LABEL_260:
          if (v111) {
            BOOL v225 = v110 == 0;
          }
          else {
            BOOL v225 = 1;
          }
          if (!v225)
          {
            if ((int)v106 > 1)
            {
              unint64_t v235 = 0;
              uint64_t v236 = (absl::lts_2020_02_25::numbers_internal *)(v106 - 1);
              uint64_t v237 = 1;
              v1186 = v236;
              while (1)
              {
                unint64_t v239 = v1229;
                if (*(_DWORD *)(v47 + 64)) {
                  unint64_t v239 = *(unsigned int *)(*(void *)(v47 + 72) + 4 * (void)v235);
                }
                if (operations_research::sat::PresolveContext::LiteralIsFalse(v1256, (const char *)v239))
                {
                  uint64_t v238 = (absl::lts_2020_02_25::numbers_internal *)((char *)v235 + 1);
                  goto LABEL_275;
                }
                uint64_t v238 = (absl::lts_2020_02_25::numbers_internal *)((char *)v235 + 1);
                if ((uint64_t)((char *)v235 + 1) < (uint64_t)v106) {
                  break;
                }
LABEL_275:
                ++v237;
                unint64_t v235 = v238;
                if (v238 == v236) {
                  goto LABEL_480;
                }
              }
              v1187 = (absl::lts_2020_02_25::numbers_internal *)((char *)v235 + 1);
              uint64_t v1188 = v237;
              uint64_t v240 = *(unsigned int *)(*(void *)(v47 + 24) + 4 * (void)v235);
              *(void *)v1201 = v240 << 32;
              unsigned int v1207 = v239;
              int v1192 = ~v239;
              *(void *)v1213 = v240;
              uint64_t v1195 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v240)
                      * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                         * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                          + v240));
              v1190 = v235;
              while (1)
              {
                unint64_t v241 = v1229;
                if (*(_DWORD *)(v47 + 64)) {
                  unint64_t v241 = *(unsigned int *)(*(void *)(v47 + 72) + 4 * v237);
                }
                if (operations_research::sat::PresolveContext::LiteralIsFalse(v1256, (const char *)v241)) {
                  goto LABEL_283;
                }
                uint64_t v242 = 0;
                uint64_t v243 = *(unsigned int *)(*(void *)(v47 + 24) + 4 * v237);
                v1251 = (void *)(*(void *)v1213 | (v243 << 32));
                v1248 = (void *)(*(void *)v1201 | v243);
                unint64_t v244 = (((unint64_t)(v243 + v1195) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v243 + v1195));
                unint64_t v245 = (v244 >> 7) ^ (v1258[0] >> 12);
                uint64_t v246 = 0x101010101010101 * (v244 & 0x7F);
                while (1)
                {
                  unint64_t v247 = v245 & v1259;
                  uint64_t v248 = *(void *)(v1258[0] + v247);
                  unint64_t v249 = ((v248 ^ v246) - 0x101010101010101) & ~(v248 ^ v246) & 0x8080808080808080;
                  if (v249) {
                    break;
                  }
LABEL_294:
                  if ((v248 & (~v248 << 6) & 0x8080808080808080) != 0) {
                    goto LABEL_297;
                  }
                  v242 += 8;
                  unint64_t v245 = v242 + v247;
                }
                while (1)
                {
                  unint64_t v250 = (v247 + (__clz(__rbit64(v249)) >> 3)) & v1259;
                  uint64_t v251 = (int *)(v1258[1] + 12 * v250);
                  int v252 = *v251;
                  int v253 = v251[1];
                  if (v252 == v1213[0] && v253 == v243) {
                    break;
                  }
                  v249 &= v249 - 1;
                  if (!v249) {
                    goto LABEL_294;
                  }
                }
                if (v250 == (void)v1259) {
                  break;
                }
LABEL_282:
                std::string::size_type v106 = v1222;
LABEL_283:
                if ((char *)++v237 == v106)
                {
                  uint64_t v236 = v1186;
                  uint64_t v238 = v1187;
                  uint64_t v237 = v1188;
                  goto LABEL_275;
                }
              }
LABEL_297:
              int v255 = operations_research::sat::PresolveContext::NewBoolVar(v1256);
              uint64_t v256 = *(void *)(*(void *)(*((void *)v1256 + 6) + 32) + 8 * v255 + 8);
              uint64_t v258 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v235, &v1268.__r_.__value_.__s.__data_[16], v257);
              v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1268.__r_.__value_.__r.__words[2];
              v1268.__r_.__value_.__l.__size_ = v258 - (unsigned char *)&v1268.__r_.__value_.__r.__words[2];
              *(void *)v1265 = " before ";
              *(void *)&v1265[8] = 8;
              uint64_t v260 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v237, &v1262[4], v259);
              *(void *)v1262 = &v1262[4];
              *(void *)&v1262[2] = v260 - (unsigned char *)&v1262[4];
              absl::lts_2020_02_25::StrCat((uint64_t)&v1268, (uint64_t)v1265, (uint64_t)v1262, &__str);
              uint64_t v261 = *(void *)(v256 + 8);
              uint64_t v262 = (google::protobuf::Arena *)(v261 & 0xFFFFFFFFFFFFFFFELL);
              if (v261)
              {
                uint64_t v262 = *(google::protobuf::Arena **)v262;
                unint64_t v263 = (std::string **)(v256 + 40);
                uint64_t v264 = *(std::string **)(v256 + 40);
                if (v264 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                  goto LABEL_299;
                }
              }
              else
              {
                unint64_t v263 = (std::string **)(v256 + 40);
                uint64_t v264 = *(std::string **)(v256 + 40);
                if (v264 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                {
LABEL_299:
                  std::string::operator=(v264, &__str);
                  goto LABEL_302;
                }
              }
              google::protobuf::internal::ArenaStringPtr::CreateInstance(v263, v262, (long long *)&__str);
LABEL_302:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              unint64_t v265 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)v1258, (unsigned int *)&v1251);
              if (v266)
              {
                unint64_t v267 = v1258[1] + 12 * v265;
                *(void *)unint64_t v267 = v1251;
                *(_DWORD *)(v267 + 8) = 0;
              }
              *(_DWORD *)(v1258[1] + 12 * v265 + 8) = v255;
              int v268 = operations_research::sat::PresolveContext::NewBoolVar(v1256);
              uint64_t v269 = *(void *)(*(void *)(*((void *)v1256 + 6) + 32) + 8 * v268 + 8);
              uint64_t v271 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v237, &v1268.__r_.__value_.__s.__data_[16], v270);
              v1268.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1268.__r_.__value_.__r.__words[2];
              v1268.__r_.__value_.__l.__size_ = v271 - (unsigned char *)&v1268.__r_.__value_.__r.__words[2];
              *(void *)v1265 = " before ";
              *(void *)&v1265[8] = 8;
              uint64_t v273 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v235, &v1262[4], v272);
              *(void *)v1262 = &v1262[4];
              *(void *)&v1262[2] = v273 - (unsigned char *)&v1262[4];
              absl::lts_2020_02_25::StrCat((uint64_t)&v1268, (uint64_t)v1265, (uint64_t)v1262, &__str);
              uint64_t v274 = *(void *)(v269 + 8);
              unint64_t v275 = (google::protobuf::Arena *)(v274 & 0xFFFFFFFFFFFFFFFELL);
              if (v274)
              {
                unint64_t v275 = *(google::protobuf::Arena **)v275;
                uint64_t v276 = (std::string **)(v269 + 40);
                uint64_t v277 = *(std::string **)(v269 + 40);
                if (v277 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                  goto LABEL_308;
                }
              }
              else
              {
                uint64_t v276 = (std::string **)(v269 + 40);
                uint64_t v277 = *(std::string **)(v269 + 40);
                if (v277 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                {
LABEL_308:
                  std::string::operator=(v277, &__str);
                  goto LABEL_311;
                }
              }
              google::protobuf::internal::ArenaStringPtr::CreateInstance(v276, v275, (long long *)&__str);
LABEL_311:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              unint64_t v278 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)v1258, (unsigned int *)&v1248);
              if (v279)
              {
                unint64_t v280 = v1258[1] + 12 * v278;
                *(void *)unint64_t v280 = v1248;
                *(_DWORD *)(v280 + 8) = 0;
              }
              *(_DWORD *)(v1258[1] + 12 * v278 + 8) = v268;
              uint64_t v281 = *((void *)v1256 + 6);
              std::string::size_type v282 = *(int **)(v281 + 56);
              if (v282)
              {
                uint64_t v283 = *(int *)(v281 + 48);
                int v284 = *v282;
                if ((int)v283 < *v282)
                {
                  *(_DWORD *)(v281 + 48) = v283 + 1;
                  unint64_t v285 = *(void *)&v282[2 * v283 + 2];
                  if (*(_DWORD *)(v285 + 60) != 3) {
                    goto LABEL_318;
                  }
                  goto LABEL_326;
                }
                if (v284 != *(_DWORD *)(v281 + 52))
                {
LABEL_325:
                  int *v282 = v284 + 1;
                  unint64_t v285 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v281 + 40));
                  uint64_t v292 = *(void *)(v281 + 56);
                  uint64_t v293 = *(int *)(v281 + 48);
                  *(_DWORD *)(v281 + 48) = v293 + 1;
                  *(void *)(v292 + 8 * v293 + 8) = v285;
                  if (*(_DWORD *)(v285 + 60) != 3)
                  {
LABEL_318:
                    operations_research::sat::ConstraintProto::clear_constraint(v285);
                    *(_DWORD *)(v285 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
                    uint64_t v286 = *(void *)(v285 + 8);
                    unint64_t v287 = (google::protobuf::Arena *)(v286 & 0xFFFFFFFFFFFFFFFELL);
                    if (v286) {
                      unint64_t v287 = *(google::protobuf::Arena **)v287;
                    }
                    unint64_t v288 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v287);
                    *(void *)(v285 + 48) = v288;
                    uint64_t v289 = *(unsigned int *)(v288 + 16);
                    uint64_t v290 = (unsigned int *)(v288 + 16);
                    unsigned int v291 = v289 + 1;
                    if (v289 != *(_DWORD *)(v288 + 20)) {
                      goto LABEL_328;
                    }
                    goto LABEL_327;
                  }
LABEL_326:
                  unint64_t v288 = *(void *)(v285 + 48);
                  uint64_t v289 = *(unsigned int *)(v288 + 16);
                  uint64_t v290 = (unsigned int *)(v288 + 16);
                  unsigned int v291 = v289 + 1;
                  if (v289 != *(_DWORD *)(v288 + 20))
                  {
LABEL_328:
                    uint64_t v294 = *(void *)(v288 + 24);
                    *(_DWORD *)(v294 + 4 * v289) = v255;
                    *(_DWORD *)(v288 + 16) = v291;
                    unsigned int v295 = v289 + 2;
                    if (v291 == *(_DWORD *)(v288 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v290, v289 + 2);
                      uint64_t v294 = *(void *)(v288 + 24);
                    }
                    *(_DWORD *)(v294 + 4 * v291) = v268;
                    *(_DWORD *)(v288 + 16) = v295;
                    unsigned int v296 = v289 + 3;
                    if (v295 == *(_DWORD *)(v288 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v290, v289 + 3);
                      uint64_t v294 = *(void *)(v288 + 24);
                    }
                    *(_DWORD *)(v294 + 4 * v295) = v1192;
                    *(_DWORD *)(v288 + 16) = v296;
                    if (v296 == *(_DWORD *)(v288 + 20))
                    {
                      google::protobuf::RepeatedField<int>::Reserve(v290, v289 + 4);
                      uint64_t v294 = *(void *)(v288 + 24);
                    }
                    *(_DWORD *)(v294 + 4 * v296) = ~v241;
                    unsigned int *v290 = v289 + 4;
                    unint64_t v235 = v1190;
                    goto LABEL_282;
                  }
LABEL_327:
                  google::protobuf::RepeatedField<int>::Reserve(v290, v291);
                  goto LABEL_328;
                }
              }
              else
              {
                int v284 = *(_DWORD *)(v281 + 52);
              }
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v281 + 40), v284 + 1);
              std::string::size_type v282 = *(int **)(v281 + 56);
              int v284 = *v282;
              goto LABEL_325;
            }
LABEL_480:
            if ((int)v106 < 1) {
              goto LABEL_671;
            }
            v401 = 0;
            while (1)
            {
              unint64_t v402 = v1229;
              if (*(_DWORD *)(v47 + 64)) {
                unint64_t v402 = *(unsigned int *)(*(void *)(v47 + 72) + 4 * (void)v401);
              }
              if (operations_research::sat::PresolveContext::LiteralIsFalse(v1256, (const char *)v402)) {
                goto LABEL_483;
              }
              uint64_t v403 = *(unsigned int *)(*(void *)(v47 + 24) + 4 * (void)v401);
              uint64_t v404 = *((void *)v1256 + 6);
              v405 = *(int **)(v404 + 56);
              if (!v405) {
                break;
              }
              uint64_t v406 = *(int *)(v404 + 48);
              int v407 = *v405;
              if ((int)v406 >= *v405)
              {
                if (v407 == *(_DWORD *)(v404 + 52))
                {
LABEL_493:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v404 + 40), v407 + 1);
                  v405 = *(int **)(v404 + 56);
                  int v407 = *v405;
                }
                int *v405 = v407 + 1;
                unint64_t v408 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v404 + 40));
                uint64_t v412 = *(void *)(v404 + 56);
                uint64_t v413 = *(int *)(v404 + 48);
                *(_DWORD *)(v404 + 48) = v413 + 1;
                *(void *)(v412 + 8 * v413 + 8) = v408;
                uint64_t v410 = *(unsigned int *)(v408 + 16);
                uint64_t v409 = (unsigned int *)(v408 + 16);
                int v411 = v410 + 1;
                if (v410 != *(_DWORD *)(v408 + 20)) {
                  goto LABEL_496;
                }
LABEL_495:
                google::protobuf::RepeatedField<int>::Reserve(v409, v411);
                goto LABEL_496;
              }
              *(_DWORD *)(v404 + 48) = v406 + 1;
              unint64_t v408 = *(void *)&v405[2 * v406 + 2];
              uint64_t v410 = *(unsigned int *)(v408 + 16);
              uint64_t v409 = (unsigned int *)(v408 + 16);
              int v411 = v410 + 1;
              if (v410 == *(_DWORD *)(v408 + 20)) {
                goto LABEL_495;
              }
LABEL_496:
              uint64_t v414 = 0;
              *(_DWORD *)(*(void *)(v408 + 24) + 4 * v41google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v402;
              *(_DWORD *)(v408 + 16) = v411;
              uint64_t v415 = v403 << 32;
              uint64_t v416 = v1222;
              do
              {
                if (v401 != v414)
                {
                  unint64_t v417 = v1229;
                  if (*(_DWORD *)(v47 + 64)) {
                    unint64_t v417 = *(unsigned int *)(*(void *)(v47 + 72) + 4 * (void)v414);
                  }
                  if (!operations_research::sat::PresolveContext::LiteralIsFalse(v1256, (const char *)v417))
                  {
                    uint64_t v418 = *(unsigned int *)(*(void *)(v47 + 24) + 4 * (void)v414);
                    if (*(_DWORD *)(v408 + 60) == 12)
                    {
                      uint64_t v419 = *(void *)(v408 + 48);
                    }
                    else
                    {
                      operations_research::sat::ConstraintProto::clear_constraint(v408);
                      *(_DWORD *)(v408 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                      uint64_t v420 = *(void *)(v408 + 8);
                      v421 = (google::protobuf::Arena *)(v420 & 0xFFFFFFFFFFFFFFFELL);
                      if (v420) {
                        v421 = *(google::protobuf::Arena **)v421;
                      }
                      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v421);
                      uint64_t v419 = v422;
                      *(void *)(v408 + 48) = v422;
                    }
                    v1268.__r_.__value_.__r.__words[0] = v415 | v418;
                    int v423 = *gtl::FindOrDieNoPrint<absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>>((uint64_t *)v1258, (unsigned int *)&v1268);
                    uint64_t v424 = *(unsigned int *)(v419 + 16);
                    if (v424 == *(_DWORD *)(v419 + 20)) {
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v419 + 16), v424 + 1);
                    }
                    *(_DWORD *)(*(void *)(v419 + 24) + 4 * v424) = v423;
                    *(_DWORD *)(v419 + 16) = v424 + 1;
                    if (*(_DWORD *)(v408 + 60) == 12)
                    {
                      uint64_t v425 = *(void *)(v408 + 48);
                    }
                    else
                    {
                      operations_research::sat::ConstraintProto::clear_constraint(v408);
                      *(_DWORD *)(v408 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                      uint64_t v426 = *(void *)(v408 + 8);
                      uint64_t v427 = (google::protobuf::Arena *)(v426 & 0xFFFFFFFFFFFFFFFELL);
                      if (v426) {
                        uint64_t v427 = *(google::protobuf::Arena **)v427;
                      }
                      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v427);
                      uint64_t v425 = v428;
                      *(void *)(v408 + 48) = v428;
                    }
                    uint64_t v429 = *(void *)(*(void *)(v47 + 48) + 8 * (void)v414);
                    uint64_t v430 = *(unsigned int *)(v425 + 40);
                    if (v430 == *(_DWORD *)(v425 + 44)) {
                      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v425 + 40), v430 + 1);
                    }
                    *(void *)(*(void *)(v425 + 48) + 8 * v43google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v429;
                    *(_DWORD *)(v425 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v430 + 1;
                    uint64_t v416 = v1222;
                  }
                }
                ++v414;
              }
              while (v416 != v414);
              uint64_t v431 = *(void *)(*(void *)(v47 + 48) + 8 * (void)v401);
              int v432 = *(_DWORD *)(v408 + 60);
              BOOL v433 = __OFSUB__(v432, 12);
              if (v432 == 12)
              {
                uint64_t v434 = *(void *)(v408 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v408);
                *(_DWORD *)(v408 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                uint64_t v435 = *(void *)(v408 + 8);
                v436 = (google::protobuf::Arena *)(v435 & 0xFFFFFFFFFFFFFFFELL);
                if (v435) {
                  v436 = *(google::protobuf::Arena **)v436;
                }
                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v436);
                uint64_t v434 = v437;
                *(void *)(v408 + 48) = v437;
              }
              unint64_t v438 = *(void *)(v47 + 88);
              uint64_t v439 = v438 - v431;
              uint64_t v440 = (v438 - v431) ^ v438;
              uint64_t v441 = v438 ^ v431;
              uint64_t v442 = (v438 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              if ((v440 & v441) < 0 != v433) {
                uint64_t v443 = v442;
              }
              else {
                uint64_t v443 = v439;
              }
              uint64_t v444 = *(unsigned int *)(v434 + 64);
              if (v444 == *(_DWORD *)(v434 + 68)) {
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v434 + 64), v444 + 1);
              }
              *(void *)(*(void *)(v434 + 72) + 8 * v444) = v443;
              *(_DWORD *)(v434 + 64) = v444 + 1;
              int v445 = *(_DWORD *)(v408 + 60);
              BOOL v446 = __OFSUB__(v445, 12);
              if (v445 == 12)
              {
                uint64_t v447 = *(void *)(v408 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v408);
                *(_DWORD *)(v408 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                uint64_t v448 = *(void *)(v408 + 8);
                unint64_t v449 = (google::protobuf::Arena *)(v448 & 0xFFFFFFFFFFFFFFFELL);
                if (v448) {
                  unint64_t v449 = *(google::protobuf::Arena **)v449;
                }
                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v449);
                uint64_t v447 = v450;
                *(void *)(v408 + 48) = v450;
              }
              unint64_t v451 = *(void *)(v47 + 96);
              uint64_t v452 = v451 - v431;
              uint64_t v453 = (v451 - v431) ^ v451;
              uint64_t v454 = v451 ^ v431;
              uint64_t v455 = (v451 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              if ((v453 & v454) < 0 != v446) {
                uint64_t v456 = v455;
              }
              else {
                uint64_t v456 = v452;
              }
              uint64_t v457 = *(unsigned int *)(v447 + 64);
              if (v457 == *(_DWORD *)(v447 + 68)) {
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v447 + 64), v457 + 1);
              }
              *(void *)(*(void *)(v447 + 72) + 8 * v457) = v456;
              *(_DWORD *)(v447 + 64) = v457 + 1;
LABEL_483:
              ++v401;
              std::string::size_type v106 = v1222;
              if (v401 == v1222) {
                goto LABEL_671;
              }
            }
            int v407 = *(_DWORD *)(v404 + 52);
            goto LABEL_493;
          }
LABEL_265:
          uint64_t v226 = *((void *)v1256 + 6);
          uint64_t v227 = *(int **)(v226 + 56);
          if (v227)
          {
            uint64_t v228 = *(int *)(v226 + 48);
            int v229 = *v227;
            if ((int)v228 < *v227)
            {
              *(_DWORD *)(v226 + 48) = v228 + 1;
              unint64_t v230 = *(void *)&v227[2 * v228 + 2];
              if (*(_DWORD *)(v230 + 60) != 12) {
                goto LABEL_268;
              }
              goto LABEL_657;
            }
            if (v229 != *(_DWORD *)(v226 + 52))
            {
LABEL_656:
              *uint64_t v227 = v229 + 1;
              unint64_t v230 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v226 + 40));
              uint64_t v520 = *(void *)(v226 + 56);
              uint64_t v521 = *(int *)(v226 + 48);
              *(_DWORD *)(v226 + 48) = v521 + 1;
              *(void *)(v520 + 8 * v521 + 8) = v230;
              if (*(_DWORD *)(v230 + 60) != 12)
              {
LABEL_268:
                operations_research::sat::ConstraintProto::clear_constraint(v230);
                *(_DWORD *)(v230 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                uint64_t v231 = *(void *)(v230 + 8);
                uint64_t v232 = (google::protobuf::Arena *)(v231 & 0xFFFFFFFFFFFFFFFELL);
                if (v231) {
                  uint64_t v232 = *(google::protobuf::Arena **)v232;
                }
                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v232);
                uint64_t v234 = v233;
                *(void *)(v230 + 48) = v233;
                if ((int)v1222 < 1) {
                  goto LABEL_666;
                }
                goto LABEL_658;
              }
LABEL_657:
              uint64_t v234 = *(void *)(v230 + 48);
              if ((int)v1222 < 1)
              {
LABEL_666:
                uint64_t v527 = *(void *)(v47 + 88);
                uint64_t v529 = *(unsigned int *)(v234 + 64);
                int v528 = *(_DWORD *)(v234 + 68);
                unsigned int v530 = v529 + 1;
                if (v529 == v528)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v234 + 64), v529 + 1);
                  int v528 = *(_DWORD *)(v234 + 68);
                }
                uint64_t v531 = *(void *)(v234 + 72);
                *(void *)(v531 + 8 * v529) = v527;
                *(_DWORD *)(v234 + 64) = v530;
                uint64_t v532 = *(void *)(v47 + 96);
                if (v530 == v528)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v234 + 64), v529 + 2);
                  uint64_t v531 = *(void *)(v234 + 72);
                }
                *(void *)(v531 + 8 * v53google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v532;
                *(_DWORD *)(v234 + 64) = v529 + 2;
                std::string::size_type v106 = v1222;
LABEL_671:
                if (*(uint64_t *)(v47 + 88) <= 0 && (*(void *)(v47 + 96) & 0x8000000000000000) == 0)
                {
LABEL_779:
                  operations_research::sat::ConstraintProto::Clear(v1233);
                  *((unsigned char *)&v1268.__r_.__value_.__s + 23) = 19;
                  strcpy((char *)&v1268, "reservoir: expanded");
                  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v1256, (uint64_t)&v1268);
                  if (SHIBYTE(v1268.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v1268.__r_.__value_.__l.__data_);
                  }
                  if ((void)v1259)
                  {
                    operator delete((void *)v1258[0]);
                    v1258[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                    uint64_t v1260 = 0;
                    v1258[2] = 0;
                    *(void *)&long long v1259 = 0;
                    v1258[1] = 0;
                  }
                  v641 = (void *)*((void *)&v1259 + 1);
                  if (!*((void *)&v1259 + 1)) {
                    goto LABEL_1507;
                  }
LABEL_784:
                  absl::lts_2020_02_25::container_internal::UnsampleSlow(v641);
                  goto LABEL_1507;
                }
                uint64_t v533 = *((void *)v1256 + 6);
                uint64_t v534 = *(int **)(v533 + 56);
                if (v534)
                {
                  uint64_t v535 = *(int *)(v533 + 48);
                  int v536 = *v534;
                  if ((int)v535 < *v534)
                  {
                    *(_DWORD *)(v533 + 48) = v535 + 1;
                    unint64_t v537 = *(void *)&v534[2 * v535 + 2];
                    if (*(_DWORD *)(v537 + 60) != 12) {
                      goto LABEL_675;
                    }
                    goto LABEL_685;
                  }
                  if (v536 != *(_DWORD *)(v533 + 52))
                  {
LABEL_684:
                    *uint64_t v534 = v536 + 1;
                    unint64_t v537 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v533 + 40));
                    uint64_t v542 = *(void *)(v533 + 56);
                    uint64_t v543 = *(int *)(v533 + 48);
                    *(_DWORD *)(v533 + 48) = v543 + 1;
                    *(void *)(v542 + 8 * v543 + 8) = v537;
                    if (*(_DWORD *)(v537 + 60) != 12)
                    {
LABEL_675:
                      operations_research::sat::ConstraintProto::clear_constraint(v537);
                      *(_DWORD *)(v537 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                      uint64_t v538 = *(void *)(v537 + 8);
                      uint64_t v539 = (google::protobuf::Arena *)(v538 & 0xFFFFFFFFFFFFFFFELL);
                      if (v538) {
                        uint64_t v539 = *(google::protobuf::Arena **)v539;
                      }
                      google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v539);
                      uint64_t v541 = v540;
                      *(void *)(v537 + 48) = v540;
                      if ((int)v106 < 1) {
                        goto LABEL_774;
                      }
LABEL_686:
                      uint64_t v544 = 0;
                      while (1)
                      {
                        unint64_t v545 = v1229;
                        if (*(_DWORD *)(v47 + 64)) {
                          unint64_t v545 = *(unsigned int *)(*(void *)(v47 + 72) + 4 * v544);
                        }
                        if (operations_research::sat::PresolveContext::LiteralIsFalse(v1256, (const char *)v545)) {
                          goto LABEL_688;
                        }
                        int v1215 = *(_DWORD *)(*(void *)(v47 + 24) + 4 * v544);
                        int v546 = operations_research::sat::PresolveContext::NewBoolVar(v1256);
                        uint64_t v547 = *((void *)v1256 + 6);
                        int v548 = *(int **)(v547 + 56);
                        if (!v548) {
                          break;
                        }
                        uint64_t v549 = *(int *)(v547 + 48);
                        int v550 = *v548;
                        if ((int)v549 >= *v548)
                        {
                          if (v550 == *(_DWORD *)(v547 + 52))
                          {
LABEL_698:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v547 + 40), v550 + 1);
                            int v548 = *(int **)(v547 + 56);
                            int v550 = *v548;
                          }
                          *int v548 = v550 + 1;
                          unint64_t v551 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v547 + 40));
                          uint64_t v555 = *(void *)(v547 + 56);
                          uint64_t v556 = *(int *)(v547 + 48);
                          *(_DWORD *)(v547 + 48) = v556 + 1;
                          *(void *)(v555 + 8 * v556 + 8) = v551;
                          uint64_t v553 = *(unsigned int *)(v551 + 16);
                          uint64_t v552 = (unsigned int *)(v551 + 16);
                          int v554 = v553 + 1;
                          if (v553 != *(_DWORD *)(v551 + 20)) {
                            goto LABEL_701;
                          }
LABEL_700:
                          google::protobuf::RepeatedField<int>::Reserve(v552, v554);
                          goto LABEL_701;
                        }
                        *(_DWORD *)(v547 + 48) = v549 + 1;
                        unint64_t v551 = *(void *)&v548[2 * v549 + 2];
                        uint64_t v553 = *(unsigned int *)(v551 + 16);
                        uint64_t v552 = (unsigned int *)(v551 + 16);
                        int v554 = v553 + 1;
                        if (v553 == *(_DWORD *)(v551 + 20)) {
                          goto LABEL_700;
                        }
LABEL_701:
                        *(_DWORD *)(*(void *)(v551 + 24) + 4 * v553) = v546;
                        *(_DWORD *)(v551 + 16) = v554;
                        if (*(_DWORD *)(v551 + 60) == 12)
                        {
                          uint64_t v557 = *(void *)(v551 + 48);
                          uint64_t v559 = *(unsigned int *)(v557 + 16);
                          v558 = (unsigned int *)(v557 + 16);
                          int v560 = v559 + 1;
                          if (v559 == *(_DWORD *)(v557 + 20)) {
                            goto LABEL_707;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v551);
                          *(_DWORD *)(v551 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v561 = *(void *)(v551 + 8);
                          unint64_t v562 = (google::protobuf::Arena *)(v561 & 0xFFFFFFFFFFFFFFFELL);
                          if (v561) {
                            unint64_t v562 = *(google::protobuf::Arena **)v562;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v562);
                          uint64_t v557 = v563;
                          *(void *)(v551 + 48) = v563;
                          uint64_t v559 = *(unsigned int *)(v563 + 16);
                          int v564 = *(_DWORD *)(v563 + 20);
                          v558 = (unsigned int *)(v563 + 16);
                          int v560 = v559 + 1;
                          if (v559 == v564) {
LABEL_707:
                          }
                            google::protobuf::RepeatedField<int>::Reserve(v558, v560);
                        }
                        *(_DWORD *)(*(void *)(v557 + 24) + 4 * v559) = v1215;
                        *(_DWORD *)(v557 + 16) = v560;
                        if (*(_DWORD *)(v551 + 60) == 12)
                        {
                          uint64_t v565 = *(void *)(v551 + 48);
                          uint64_t v567 = *(unsigned int *)(v565 + 40);
                          uint64_t v566 = (unsigned int *)(v565 + 40);
                          int v568 = v567 + 1;
                          if (v567 == *(_DWORD *)(v565 + 44)) {
                            goto LABEL_714;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v551);
                          *(_DWORD *)(v551 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v569 = *(void *)(v551 + 8);
                          uint64_t v570 = (google::protobuf::Arena *)(v569 & 0xFFFFFFFFFFFFFFFELL);
                          if (v569) {
                            uint64_t v570 = *(google::protobuf::Arena **)v570;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v570);
                          uint64_t v565 = v571;
                          *(void *)(v551 + 48) = v571;
                          uint64_t v567 = *(unsigned int *)(v571 + 40);
                          int v572 = *(_DWORD *)(v571 + 44);
                          uint64_t v566 = (unsigned int *)(v571 + 40);
                          int v568 = v567 + 1;
                          if (v567 == v572) {
LABEL_714:
                          }
                            google::protobuf::RepeatedField<long long>::Reserve(v566, v568);
                        }
                        *(void *)(*(void *)(v565 + 48) + 8 * v567) = 1;
                        *(_DWORD *)(v565 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v568;
                        if (*(_DWORD *)(v551 + 60) == 12)
                        {
                          uint64_t v573 = *(void *)(v551 + 48);
                          uint64_t v575 = *(unsigned int *)(v573 + 64);
                          uint64_t v574 = (unsigned int *)(v573 + 64);
                          int v576 = v575 + 1;
                          if (v575 == *(_DWORD *)(v573 + 68)) {
                            goto LABEL_721;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v551);
                          *(_DWORD *)(v551 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v577 = *(void *)(v551 + 8);
                          v578 = (google::protobuf::Arena *)(v577 & 0xFFFFFFFFFFFFFFFELL);
                          if (v577) {
                            v578 = *(google::protobuf::Arena **)v578;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v578);
                          uint64_t v573 = v579;
                          *(void *)(v551 + 48) = v579;
                          uint64_t v575 = *(unsigned int *)(v579 + 64);
                          int v580 = *(_DWORD *)(v579 + 68);
                          uint64_t v574 = (unsigned int *)(v579 + 64);
                          int v576 = v575 + 1;
                          if (v575 == v580) {
LABEL_721:
                          }
                            google::protobuf::RepeatedField<long long>::Reserve(v574, v576);
                        }
                        *(void *)(*(void *)(v573 + 72) + 8 * v575) = 0x8000000000000000;
                        *(_DWORD *)(v573 + 64) = v576;
                        if (*(_DWORD *)(v551 + 60) == 12)
                        {
                          uint64_t v581 = *(void *)(v551 + 48);
                          uint64_t v583 = *(unsigned int *)(v581 + 64);
                          v582 = (unsigned int *)(v581 + 64);
                          int v584 = v583 + 1;
                          if (v583 == *(_DWORD *)(v581 + 68)) {
                            goto LABEL_728;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v551);
                          *(_DWORD *)(v551 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v585 = *(void *)(v551 + 8);
                          v586 = (google::protobuf::Arena *)(v585 & 0xFFFFFFFFFFFFFFFELL);
                          if (v585) {
                            v586 = *(google::protobuf::Arena **)v586;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v586);
                          uint64_t v581 = v587;
                          *(void *)(v551 + 48) = v587;
                          uint64_t v583 = *(unsigned int *)(v587 + 64);
                          int v588 = *(_DWORD *)(v587 + 68);
                          v582 = (unsigned int *)(v587 + 64);
                          int v584 = v583 + 1;
                          if (v583 == v588) {
LABEL_728:
                          }
                            google::protobuf::RepeatedField<long long>::Reserve(v582, v584);
                        }
                        *(void *)(*(void *)(v581 + 72) + 8 * v583) = 0;
                        *(_DWORD *)(v581 + 64) = v584;
                        if (!operations_research::sat::PresolveContext::LiteralIsTrue(v1256, (const char *)v545)) {
                          operations_research::sat::PresolveContext::AddImplication(v1256, v546, v545);
                        }
                        uint64_t v589 = *((void *)v1256 + 6);
                        v590 = *(int **)(v589 + 56);
                        int v1208 = v546;
                        if (!v590)
                        {
                          int v592 = *(_DWORD *)(v589 + 52);
                          goto LABEL_737;
                        }
                        uint64_t v591 = *(int *)(v589 + 48);
                        int v592 = *v590;
                        if ((int)v591 >= *v590)
                        {
                          if (v592 == *(_DWORD *)(v589 + 52))
                          {
LABEL_737:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v589 + 40), v592 + 1);
                            v590 = *(int **)(v589 + 56);
                            int v592 = *v590;
                          }
                          int *v590 = v592 + 1;
                          unint64_t v593 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v589 + 40));
                          uint64_t v597 = *(void *)(v589 + 56);
                          uint64_t v598 = *(int *)(v589 + 48);
                          *(_DWORD *)(v589 + 48) = v598 + 1;
                          *(void *)(v597 + 8 * v598 + 8) = v593;
                          uint64_t v594 = *(unsigned int *)(v593 + 16);
                          v595 = (unsigned int *)(v593 + 16);
                          unsigned int v596 = v594 + 1;
                          if (v594 != *(_DWORD *)(v593 + 20)) {
                            goto LABEL_740;
                          }
LABEL_739:
                          google::protobuf::RepeatedField<int>::Reserve(v595, v596);
                          goto LABEL_740;
                        }
                        *(_DWORD *)(v589 + 48) = v591 + 1;
                        unint64_t v593 = *(void *)&v590[2 * v591 + 2];
                        uint64_t v594 = *(unsigned int *)(v593 + 16);
                        v595 = (unsigned int *)(v593 + 16);
                        unsigned int v596 = v594 + 1;
                        if (v594 == *(_DWORD *)(v593 + 20)) {
                          goto LABEL_739;
                        }
LABEL_740:
                        uint64_t v599 = *(void *)(v593 + 24);
                        *(_DWORD *)(v599 + 4 * v594) = ~v1208;
                        *(_DWORD *)(v593 + 16) = v596;
                        if (v596 == *(_DWORD *)(v593 + 20))
                        {
                          google::protobuf::RepeatedField<int>::Reserve(v595, v594 + 2);
                          uint64_t v599 = *(void *)(v593 + 24);
                        }
                        *(_DWORD *)(v599 + 4 * v596) = v545;
                        *(_DWORD *)(v593 + 16) = v594 + 2;
                        if (*(_DWORD *)(v593 + 60) == 12)
                        {
                          uint64_t v600 = *(void *)(v593 + 48);
                          uint64_t v602 = *(unsigned int *)(v600 + 16);
                          v601 = (unsigned int *)(v600 + 16);
                          int v603 = v602 + 1;
                          if (v602 == *(_DWORD *)(v600 + 20)) {
                            goto LABEL_748;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v593);
                          *(_DWORD *)(v593 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v604 = *(void *)(v593 + 8);
                          unint64_t v605 = (google::protobuf::Arena *)(v604 & 0xFFFFFFFFFFFFFFFELL);
                          if (v604) {
                            unint64_t v605 = *(google::protobuf::Arena **)v605;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v605);
                          uint64_t v600 = v606;
                          *(void *)(v593 + 48) = v606;
                          uint64_t v602 = *(unsigned int *)(v606 + 16);
                          int v607 = *(_DWORD *)(v606 + 20);
                          v601 = (unsigned int *)(v606 + 16);
                          int v603 = v602 + 1;
                          if (v602 == v607) {
LABEL_748:
                          }
                            google::protobuf::RepeatedField<int>::Reserve(v601, v603);
                        }
                        *(_DWORD *)(*(void *)(v600 + 24) + 4 * v602) = v1215;
                        *(_DWORD *)(v600 + 16) = v603;
                        if (*(_DWORD *)(v593 + 60) == 12)
                        {
                          uint64_t v608 = *(void *)(v593 + 48);
                          uint64_t v610 = *(unsigned int *)(v608 + 40);
                          unint64_t v609 = (unsigned int *)(v608 + 40);
                          int v611 = v610 + 1;
                          if (v610 == *(_DWORD *)(v608 + 44)) {
                            goto LABEL_755;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v593);
                          *(_DWORD *)(v593 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v612 = *(void *)(v593 + 8);
                          uint64_t v613 = (google::protobuf::Arena *)(v612 & 0xFFFFFFFFFFFFFFFELL);
                          if (v612) {
                            uint64_t v613 = *(google::protobuf::Arena **)v613;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v613);
                          uint64_t v608 = v614;
                          *(void *)(v593 + 48) = v614;
                          uint64_t v610 = *(unsigned int *)(v614 + 40);
                          int v615 = *(_DWORD *)(v614 + 44);
                          unint64_t v609 = (unsigned int *)(v614 + 40);
                          int v611 = v610 + 1;
                          if (v610 == v615) {
LABEL_755:
                          }
                            google::protobuf::RepeatedField<long long>::Reserve(v609, v611);
                        }
                        *(void *)(*(void *)(v608 + 48) + 8 * v61google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 1;
                        *(_DWORD *)(v608 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v611;
                        if (*(_DWORD *)(v593 + 60) == 12)
                        {
                          uint64_t v616 = *(void *)(v593 + 48);
                          uint64_t v618 = *(unsigned int *)(v616 + 64);
                          v617 = (unsigned int *)(v616 + 64);
                          int v619 = v618 + 1;
                          if (v618 == *(_DWORD *)(v616 + 68)) {
                            goto LABEL_762;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v593);
                          *(_DWORD *)(v593 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v620 = *(void *)(v593 + 8);
                          __n128 v621 = (google::protobuf::Arena *)(v620 & 0xFFFFFFFFFFFFFFFELL);
                          if (v620) {
                            __n128 v621 = *(google::protobuf::Arena **)v621;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v621);
                          uint64_t v616 = v622;
                          *(void *)(v593 + 48) = v622;
                          uint64_t v618 = *(unsigned int *)(v622 + 64);
                          int v623 = *(_DWORD *)(v622 + 68);
                          v617 = (unsigned int *)(v622 + 64);
                          int v619 = v618 + 1;
                          if (v618 == v623) {
LABEL_762:
                          }
                            google::protobuf::RepeatedField<long long>::Reserve(v617, v619);
                        }
                        *(void *)(*(void *)(v616 + 72) + 8 * v618) = 1;
                        *(_DWORD *)(v616 + 64) = v619;
                        if (*(_DWORD *)(v593 + 60) == 12)
                        {
                          uint64_t v624 = *(void *)(v593 + 48);
                          uint64_t v626 = *(unsigned int *)(v624 + 64);
                          __n128 v625 = (unsigned int *)(v624 + 64);
                          int v627 = v626 + 1;
                          if (v626 != *(_DWORD *)(v624 + 68)) {
                            goto LABEL_770;
                          }
                        }
                        else
                        {
                          operations_research::sat::ConstraintProto::clear_constraint(v593);
                          *(_DWORD *)(v593 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
                          uint64_t v628 = *(void *)(v593 + 8);
                          v629 = (google::protobuf::Arena *)(v628 & 0xFFFFFFFFFFFFFFFELL);
                          if (v628) {
                            v629 = *(google::protobuf::Arena **)v629;
                          }
                          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v629);
                          uint64_t v624 = v630;
                          *(void *)(v593 + 48) = v630;
                          uint64_t v626 = *(unsigned int *)(v630 + 64);
                          int v631 = *(_DWORD *)(v630 + 68);
                          __n128 v625 = (unsigned int *)(v630 + 64);
                          int v627 = v626 + 1;
                          if (v626 != v631) {
                            goto LABEL_770;
                          }
                        }
                        google::protobuf::RepeatedField<long long>::Reserve(v625, v627);
LABEL_770:
                        *(void *)(*(void *)(v624 + 72) + 8 * v626) = 0x7FFFFFFFFFFFFFFFLL;
                        *(_DWORD *)(v624 + 64) = v627;
                        uint64_t v632 = *(unsigned int *)(v541 + 16);
                        if (v632 == *(_DWORD *)(v541 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v541 + 16), v632 + 1);
                        }
                        *(_DWORD *)(*(void *)(v541 + 24) + 4 * v632) = v1208;
                        *(_DWORD *)(v541 + 16) = v632 + 1;
                        uint64_t v633 = *(void *)(*(void *)(v47 + 48) + 8 * v544);
                        uint64_t v634 = *(unsigned int *)(v541 + 40);
                        if (v634 == *(_DWORD *)(v541 + 44)) {
                          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v541 + 40), v634 + 1);
                        }
                        *(void *)(*(void *)(v541 + 48) + 8 * v634) = v633;
                        *(_DWORD *)(v541 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v634 + 1;
                        std::string::size_type v106 = v1222;
LABEL_688:
                        if (v106 == (char *)++v544) {
                          goto LABEL_774;
                        }
                      }
                      int v550 = *(_DWORD *)(v547 + 52);
                      goto LABEL_698;
                    }
LABEL_685:
                    uint64_t v541 = *(void *)(v537 + 48);
                    if ((int)v106 < 1)
                    {
LABEL_774:
                      uint64_t v635 = *(void *)(v47 + 88);
                      uint64_t v637 = *(unsigned int *)(v541 + 64);
                      int v636 = *(_DWORD *)(v541 + 68);
                      unsigned int v638 = v637 + 1;
                      if (v637 == v636)
                      {
                        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v541 + 64), v637 + 1);
                        int v636 = *(_DWORD *)(v541 + 68);
                      }
                      uint64_t v639 = *(void *)(v541 + 72);
                      *(void *)(v639 + 8 * v637) = v635;
                      *(_DWORD *)(v541 + 64) = v638;
                      uint64_t v640 = *(void *)(v47 + 96);
                      if (v638 == v636)
                      {
                        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v541 + 64), v637 + 2);
                        uint64_t v639 = *(void *)(v541 + 72);
                      }
                      *(void *)(v639 + 8 * v638) = v640;
                      *(_DWORD *)(v541 + 64) = v637 + 2;
                      goto LABEL_779;
                    }
                    goto LABEL_686;
                  }
                }
                else
                {
                  int v536 = *(_DWORD *)(v533 + 52);
                }
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v533 + 40), v536 + 1);
                uint64_t v534 = *(int **)(v533 + 56);
                int v536 = *v534;
                goto LABEL_684;
              }
LABEL_658:
              for (kunint64_t k = 0; kk != v1222; kunint64_t k = (char *)kk + 1)
              {
                unsigned int v523 = v1229;
                if (*(_DWORD *)(v47 + 64)) {
                  unsigned int v523 = *(_DWORD *)(*(void *)(v47 + 72) + 4 * (void)kk);
                }
                uint64_t v524 = *(unsigned int *)(v234 + 16);
                if (v524 == *(_DWORD *)(v234 + 20)) {
                  google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v234 + 16), v524 + 1);
                }
                *(_DWORD *)(*(void *)(v234 + 24) + 4 * v524) = v523;
                *(_DWORD *)(v234 + 16) = v524 + 1;
                uint64_t v525 = *(void *)(*(void *)(v47 + 48) + 8 * (void)kk);
                uint64_t v526 = *(unsigned int *)(v234 + 40);
                if (v526 == *(_DWORD *)(v234 + 44)) {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v234 + 40), v526 + 1);
                }
                *(void *)(*(void *)(v234 + 48) + 8 * v526) = v525;
                *(_DWORD *)(v234 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v526 + 1;
              }
              goto LABEL_666;
            }
          }
          else
          {
            int v229 = *(_DWORD *)(v226 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v226 + 40), v229 + 1);
          uint64_t v227 = *(int **)(v226 + 56);
          int v229 = *v227;
          goto LABEL_656;
        case 0x1C:
          uint64_t v51 = *(int *)(v8 + 48);
          int v52 = *v9;
          if ((int)v51 < *v9)
          {
            *(_DWORD *)(v8 + 48) = v51 + 1;
            unint64_t v53 = *(void *)&v9[2 * v51 + 2];
            unint64_t v54 = v1233;
            if (*((int *)v1233 + 4) < 1) {
              goto LABEL_135;
            }
            goto LABEL_131;
          }
          if (v52 == *(_DWORD *)(v8 + 52))
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v8 + 40), v52 + 1);
            int8x16_t v9 = *(int **)(v8 + 56);
            int v52 = *v9;
          }
          *int8x16_t v9 = v52 + 1;
          unint64_t v53 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v8 + 40));
          uint64_t v113 = *(void *)(v8 + 56);
          uint64_t v114 = *(int *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = v114 + 1;
          *(void *)(v113 + 8 * v114 + 8) = v53;
          unint64_t v54 = v1233;
          if (*((int *)v1233 + 4) >= 1)
          {
LABEL_131:
            uint64_t v115 = 0;
            int v116 = *(_DWORD *)(v53 + 16);
            do
            {
              int v117 = *(_DWORD *)(*((void *)v54 + 3) + 4 * v115);
              if (v116 + v115 == *(_DWORD *)(v53 + 20)) {
                google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v53 + 16), v116 + v115 + 1);
              }
              *(_DWORD *)(*(void *)(v53 + 24) + 4 * (v116 + v115)) = v117;
              *(_DWORD *)(v53 + 16) = v116 + v115++ + 1;
              unint64_t v54 = v1233;
            }
            while (v115 < *((int *)v1233 + 4));
          }
LABEL_135:
          uint64_t v118 = &operations_research::sat::_LinearArgumentProto_default_instance_;
          if (*((_DWORD *)v54 + 15) == 28) {
            uint64_t v118 = (void *)*((void *)v1233 + 6);
          }
          std::string::size_type v119 = (operations_research::sat *)v118[5];
          if (v119) {
            uint64_t v120 = v119;
          }
          else {
            uint64_t v120 = (operations_research::sat *)&operations_research::sat::_LinearExpressionProto_default_instance_;
          }
          if (*(_DWORD *)(v53 + 60) == 27)
          {
            unint64_t v121 = *(operations_research::sat::LinearArgumentProto **)(v53 + 48);
            unint64_t v122 = (const operations_research::sat::LinearExpressionProto *)*((void *)v121 + 5);
            if (v122)
            {
LABEL_149:
              operations_research::sat::SetToNegatedLinearExpression(v120, v122, v4);
              uint64_t v129 = 0;
              unint64_t v130 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
              if (*((_DWORD *)v1233 + 15) != 28) {
                goto LABEL_151;
              }
LABEL_150:
              unint64_t v130 = (int *)*((void *)v1233 + 6);
              while (1)
              {
LABEL_151:
                if (v129 >= v130[6]) {
                  goto LABEL_820;
                }
                if (*(_DWORD *)(v53 + 60) == 27)
                {
                  uint64_t v131 = *(operations_research::sat::LinearArgumentProto **)(v53 + 48);
                  uint64_t v132 = (int *)*((void *)v131 + 4);
                  if (!v132) {
                    goto LABEL_160;
                  }
                }
                else
                {
                  operations_research::sat::ConstraintProto::clear_constraint(v53);
                  *(_DWORD *)(v53 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 27;
                  uint64_t v137 = *(void *)(v53 + 8);
                  uint64_t v138 = (google::protobuf::Arena *)(v137 & 0xFFFFFFFFFFFFFFFELL);
                  if (v137) {
                    uint64_t v138 = *(google::protobuf::Arena **)v138;
                  }
                  uint64_t v131 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v138);
                  *(void *)(v53 + 48) = v131;
                  uint64_t v132 = (int *)*((void *)v131 + 4);
                  if (!v132)
                  {
LABEL_160:
                    int v134 = *((_DWORD *)v131 + 7);
LABEL_162:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v131 + 4, v134 + 1);
                    uint64_t v132 = (int *)*((void *)v131 + 4);
                    int v134 = *v132;
                    goto LABEL_163;
                  }
                }
                uint64_t v133 = *((int *)v131 + 6);
                int v134 = *v132;
                if ((int)v133 < *v132)
                {
                  *((_DWORD *)v131 + 6) = v133 + 1;
                  std::string::size_type v135 = *(const operations_research::sat::LinearExpressionProto **)&v132[2 * v133 + 2];
                  uint64_t v136 = &operations_research::sat::_LinearArgumentProto_default_instance_;
                  if (*((_DWORD *)v1233 + 15) != 28) {
                    goto LABEL_165;
                  }
LABEL_164:
                  uint64_t v136 = (void *)*((void *)v1233 + 6);
                  goto LABEL_165;
                }
                if (v134 == *((_DWORD *)v131 + 7)) {
                  goto LABEL_162;
                }
LABEL_163:
                *uint64_t v132 = v134 + 1;
                google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*((google::protobuf::Arena **)v131 + 2));
                std::string::size_type v135 = v139;
                uint64_t v140 = *((void *)v131 + 4);
                uint64_t v141 = *((int *)v131 + 6);
                *((_DWORD *)v131 + 6) = v141 + 1;
                *(void *)(v140 + 8 * v141 + 8) = v139;
                uint64_t v136 = &operations_research::sat::_LinearArgumentProto_default_instance_;
                if (*((_DWORD *)v1233 + 15) == 28) {
                  goto LABEL_164;
                }
LABEL_165:
                operations_research::sat::SetToNegatedLinearExpression(*(operations_research::sat **)(v136[4] + 8 * v129++ + 8), v135, v128);
                unint64_t v130 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
                if (*((_DWORD *)v1233 + 15) == 28) {
                  goto LABEL_150;
                }
              }
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v53);
            *(_DWORD *)(v53 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 27;
            uint64_t v123 = *(void *)(v53 + 8);
            uint64_t v124 = (google::protobuf::Arena *)(v123 & 0xFFFFFFFFFFFFFFFELL);
            if (v123) {
              uint64_t v124 = *(google::protobuf::Arena **)v124;
            }
            unint64_t v121 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v124);
            *(void *)(v53 + 48) = v121;
            unint64_t v122 = (const operations_research::sat::LinearExpressionProto *)*((void *)v121 + 5);
            if (v122) {
              goto LABEL_149;
            }
          }
          uint64_t v125 = *((void *)v121 + 1);
          BOOL v126 = (google::protobuf::Arena *)(v125 & 0xFFFFFFFFFFFFFFFELL);
          if (v125) {
            BOOL v126 = *(google::protobuf::Arena **)v126;
          }
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v126);
          unint64_t v122 = v127;
          *((void *)v121 + 5) = v127;
          goto LABEL_149;
        default:
          goto LABEL_1510;
      }
      break;
    }
  }
  operations_research::sat::PresolveContext::InitializeNewDomains((operations_research::sat::PresolveContext *)v3, v6);
  if (*(int *)(*(void *)(v3 + 48) + 24) >= 1)
  {
    v1174 = 0;
    do
    {
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v3, v1174, v1258);
      uint64_t v1175 = *(void *)(*(void *)(*(void *)(v3 + 48) + 32) + 8 * (void)v1174 + 8);
      *(_DWORD *)(v1175 + 16) = 0;
      v1176 = (unsigned int *)(v1175 + 16);
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v1175 + 16), v1258[0] >> 1);
      uint64_t v1177 = v1258[0] & 1;
      if (v1258[0]) {
        v1178 = (unint64_t *)v1258[1];
      }
      else {
        v1178 = &v1258[1];
      }
      if (v1258[0] >= 2)
      {
        v1179 = &v1178[2 * (v1258[0] >> 1)];
        unsigned int v1180 = *(_DWORD *)(v1175 + 16);
        do
        {
          unint64_t v1181 = *v1178;
          int v1182 = *(_DWORD *)(v1175 + 20);
          unsigned int v1183 = v1180 + 1;
          if (v1180 == v1182)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v1176, v1180 + 1);
            int v1182 = *(_DWORD *)(v1175 + 20);
          }
          uint64_t v1184 = *(void *)(v1175 + 24);
          *(void *)(v1184 + 8 * v118google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v1181;
          *(_DWORD *)(v1175 + 16) = v1183;
          unint64_t v1185 = v1178[1];
          v1180 += 2;
          if (v1183 == v1182)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v1176, v1180);
            uint64_t v1184 = *(void *)(v1175 + 24);
          }
          *(void *)(v1184 + 8 * v1183) = v1185;
          unsigned int *v1176 = v1180;
          v1178 += 2;
        }
        while (v1178 != v1179);
        uint64_t v1177 = v1258[0] & 1;
      }
      if (v1177) {
        operator delete((void *)v1258[1]);
      }
      ++v1174;
    }
    while ((uint64_t)v1174 < *(int *)(*(void *)(v3 + 48) + 24));
  }
}

void sub_23CC04CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_23CC04CE0()
{
}

void sub_23CC04CE8()
{
}

void sub_23CC04CF0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::ExpandPositiveTable(operations_research::sat::_anonymous_namespace_ *this, operations_research::sat::ConstraintProto *a2, operations_research::sat::PresolveContext *a3)
{
  uint64_t v430 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 15) != 16)
  {
    uint64_t v5 = &operations_research::sat::_TableConstraintProto_default_instance_;
    __n128 v6 = (const void *)qword_26AEE1958;
    uint64_t v7 = (absl::lts_2020_02_25::numbers_internal *)dword_26AEE1950;
    uint64_t v415 = 0;
    uint64_t v416 = 0;
    unint64_t v417 = 0;
    if (dword_26AEE1950) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v380 = 0;
    unsigned int v398 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 6);
  __n128 v6 = (const void *)v5[3];
  uint64_t v7 = (absl::lts_2020_02_25::numbers_internal *)*((int *)v5 + 4);
  uint64_t v415 = 0;
  uint64_t v416 = 0;
  unint64_t v417 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v415 = operator new(4 * (void)v7);
  unint64_t v417 = (char *)v415 + 4 * (void)v7;
  unsigned int v398 = v415;
  memcpy(v415, v6, 4 * (void)v7);
  uint64_t v380 = v417;
  uint64_t v416 = v417;
  uint64_t v7 = (absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)v5 + 4);
LABEL_7:
  uint64_t v8 = (absl::lts_2020_02_25::numbers_internal *)(*((_DWORD *)v5 + 10) / (int)v7);
  std::vector<std::vector<long long>>::vector(&v413, (int)v8);
  unint64_t v382 = v8;
  uint64_t v383 = v7;
  BOOL v9 = (int)v8 < 1 || (int)v7 < 1;
  int v381 = this;
  unint64_t v402 = a2;
  if (!v9)
  {
    int v27 = 0;
    int v28 = 0;
    uint64_t v385 = v5;
    do
    {
      uint64_t v29 = v28;
      v28 += (int)v383;
      int v389 = v28;
      *(void *)unsigned int v393 = v27;
      do
      {
        while (1)
        {
          uint64_t v30 = (char *)v413 + 24 * (void)v27;
          uint64_t v31 = *(void *)(v5[6] + 8 * v29);
          char v33 = (uint64_t *)(v30 + 8);
          uint64_t v32 = (char *)*((void *)v30 + 1);
          unint64_t v34 = *((void *)v30 + 2);
          if ((unint64_t)v32 >= v34) {
            break;
          }
          *(void *)uint64_t v32 = v31;
          ++v29;
          uint64_t *v33 = (uint64_t)(v32 + 8);
          if (v28 == v29) {
            goto LABEL_29;
          }
        }
        uint64_t v35 = *(char **)v30;
        uint64_t v36 = (uint64_t)&v32[-*(void *)v30];
        uint64_t v37 = v36 >> 3;
        unint64_t v38 = (v36 >> 3) + 1;
        if (v38 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v34 - (void)v35;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (!v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = (void *)(8 * v37);
          *(void *)(8 * v37) = v31;
          uint64_t v44 = 8 * v37 + 8;
          if (v32 == v35) {
            goto LABEL_50;
          }
LABEL_44:
          unint64_t v45 = v32 - 8 - v35;
          if (v45 < 0x58) {
            goto LABEL_582;
          }
          if ((unint64_t)(v32 - &v42[v36]) < 0x20) {
            goto LABEL_582;
          }
          uint64_t v46 = (v45 >> 3) + 1;
          uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v48 = &v32[-v47];
          uint64_t v43 = (void *)((char *)v43 - v47);
          uint64_t v49 = &v42[8 * v37 - 16];
          uint64_t v50 = v32 - 16;
          uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *uint64_t v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 4;
          }
          while (v51);
          uint64_t v32 = v48;
          if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_582:
            do
            {
              uint64_t v53 = *((void *)v32 - 1);
              v32 -= 8;
              *--uint64_t v43 = v53;
            }
            while (v32 != v35);
          }
          goto LABEL_50;
        }
        if (v40 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v41 = v40;
        uint64_t v42 = operator new(8 * v40);
        unint64_t v40 = v41;
        uint64_t v43 = &v42[8 * v37];
        *uint64_t v43 = v31;
        uint64_t v44 = (uint64_t)(v43 + 1);
        if (v32 != v35) {
          goto LABEL_44;
        }
LABEL_50:
        *(void *)uint64_t v30 = v43;
        uint64_t *v33 = v44;
        *((void *)v30 + 2) = &v42[8 * v40];
        if (v35) {
          operator delete(v35);
        }
        uint64_t v5 = v385;
        int v28 = v389;
        int v27 = *(absl::lts_2020_02_25::numbers_internal **)v393;
        ++v29;
        uint64_t *v33 = v44;
      }
      while (v389 != v29);
LABEL_29:
      int v27 = (absl::lts_2020_02_25::numbers_internal *)((char *)v27 + 1);
    }
    while (v27 != v8);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v411, (int)v383);
  if ((int)v8 < 1)
  {
    int v392 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    int v392 = 0;
    do
    {
      if ((int)v383 < 1)
      {
LABEL_14:
        int8x16_t v11 = (char *)v413 + 24 * (void)v10;
        uint64_t v12 = (char *)v413 + 24 * v392;
        long long v13 = *(_OWORD *)v11;
        *(_OWORD *)int8x16_t v11 = *(_OWORD *)v12;
        *(_OWORD *)uint64_t v12 = v13;
        uint64_t v14 = *((void *)v11 + 2);
        *((void *)v11 + 2) = *((void *)v12 + 2);
        *((void *)v12 + 2) = v14;
        ++v392;
      }
      else
      {
        uint64_t v15 = 0;
        while (operations_research::sat::PresolveContext::DomainContains(v402, v398[v15], *(void *)(*((void *)v413 + 3 * (void)v10) + 8 * v15)))
        {
          if (v383 == ++v15)
          {
            uint64_t v16 = 0;
            do
            {
              uint64_t v20 = 0;
              unint64_t v22 = (char *)v411 + 48 * v16;
              uint64_t v23 = *((void *)v413 + 3 * (void)v10);
              uint64_t v24 = *(void *)(v23 + 8 * v16);
              unint64_t v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                       * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                        + v24));
              unint64_t v21 = (v25 >> 7) ^ (*v22 >> 12);
              uint64_t v26 = v22[3];
              while (1)
              {
                unint64_t v17 = v21 & v26;
                uint64_t v18 = *(void *)(*v22 + v17);
                unint64_t v19 = ((v18 ^ (0x101010101010101 * (v25 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101 * (v25 & 0x7F))) & 0x8080808080808080;
                if (v19) {
                  break;
                }
LABEL_24:
                if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
                {
                  *(void *)(v22[1]
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v411 + 6 * v16, v25)) = *(void *)(v23 + 8 * v16);
                  goto LABEL_27;
                }
                v20 += 8;
                unint64_t v21 = v20 + v17;
              }
              while (*(void *)(v22[1] + 8 * ((v17 + (__clz(__rbit64(v19)) >> 3)) & v26)) != v24)
              {
                v19 &= v19 - 1;
                if (!v19) {
                  goto LABEL_24;
                }
              }
LABEL_27:
              ++v16;
            }
            while (v16 != v383);
            goto LABEL_14;
          }
        }
      }
      uint64_t v10 = (absl::lts_2020_02_25::numbers_internal *)((char *)v10 + 1);
    }
    while (v10 != v382);
  }
  unint64_t v54 = v414;
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v414 - (unsigned char *)v413) >> 3);
  if (v392 <= v55)
  {
    unint64_t v56 = v381;
    uint64_t v57 = (uint64_t)v402;
    if (v392 >= v55)
    {
      int64_t v58 = v414 - (unsigned char *)v413;
      if (v414 == v413) {
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v68 = (char *)v413 + 24 * v392;
      if (v414 != v68)
      {
        uint64_t v69 = v414;
        do
        {
          int v71 = (void *)*((void *)v69 - 3);
          v69 -= 24;
          BOOL v70 = v71;
          if (v71)
          {
            *((void *)v54 - 2) = v70;
            operator delete(v70);
          }
          unint64_t v54 = v69;
        }
        while (v69 != v68);
      }
      uint64_t v414 = v68;
      int64_t v58 = v68 - (unsigned char *)v413;
      if (v68 == v413) {
        goto LABEL_80;
      }
    }
LABEL_57:
    *(void *)uint64_t v394 = v58;
    int v59 = v383 - 1;
    if ((int)v383 < 1)
    {
      int v61 = 0;
    }
    else
    {
      uint64_t v60 = 0;
      int v61 = 0;
      do
      {
        BOOL v62 = (char **)((char *)v411 + 48 * v60);
        uint64_t v63 = (uint64_t *)v62[1];
        uint64_t v64 = *v62;
        if (**v62 <= -2)
        {
          do
          {
            unint64_t v65 = (__clz(__rbit64(((*v64 >> 7) & ~*v64 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v64 = (void *)((char *)v64 + v65);
            v63 += v65;
          }
          while (*(char *)v64 < -1);
        }
        char v66 = (const char *)v398[v60];
        std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(__p, v64, v63, &v62[3][(void)*v62]);
        operations_research::Domain::FromValues((int64_t **)__p, v427);
        if ((operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v57, v66, (const operations_research::Domain *)v427, 0) & 1) == 0)
        {
          uint64_t v205 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v425, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1101);
          unint64_t v206 = (void *)google::LogMessage::stream(v205);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)"Check failed: context->IntersectDomainWith( vars[var_index], Domain::FromValues({values_per_var[var_index].begin(), values_per_var[var_index].end()})) ", 151);
          goto LABEL_300;
        }
        if (v427[0]) {
          operator delete((void *)v427[1]);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, (const char *)v398[v60], v427);
        unint64_t v67 = operations_research::Domain::Size((operations_research::Domain *)v427);
        if (v427[0]) {
          operator delete((void *)v427[1]);
        }
        if (v67 == 1) {
          ++v61;
        }
        ++v60;
      }
      while (v60 != v383);
    }
    if (v61 == v59)
    {
      v427[0] = (unint64_t)operator new(0x20uLL);
      *(_OWORD *)&v427[1] = xmmword_23CE7FBE0;
      strcpy((char *)v427[0], "table: one variable not fixed");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
LABEL_255:
      if (SHIBYTE(v427[2]) < 0) {
        operator delete((void *)v427[0]);
      }
      operations_research::sat::ConstraintProto::Clear(v56);
      goto LABEL_258;
    }
    if (v61 == v383)
    {
      v427[0] = (unint64_t)operator new(0x20uLL);
      *(_OWORD *)&v427[1] = xmmword_23CE7E7C0;
      strcpy((char *)v427[0], "table: all variables fixed");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
      goto LABEL_255;
    }
    if (v383 == 2)
    {
      v427[0] = (v380 - (unsigned char *)v415) >> 2;
      LODWORD(v422) = 2;
      if (v380 - (unsigned char *)v415 != 8) {
        google::MakeCheckOpString<unsigned long,int>((int)v427, (int)&v422, "vars.size() == 2");
      }
      unsigned int v72 = *(_DWORD *)v415;
      std::string::size_type v73 = (const char *)*((unsigned int *)v415 + 1);
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, (const char *)*(unsigned int *)v415, v427);
      if (operations_research::Domain::Size((operations_research::Domain *)v427) == 1)
      {
        BOOL v74 = 1;
        if (v427[0]) {
          goto LABEL_93;
        }
LABEL_104:
        if (v74) {
          goto LABEL_254;
        }
LABEL_105:
        *((void *)&v425 + 1) = 0;
        v426[0] = 0;
        *(void *)&long long v425 = (char *)&v425 + 8;
        uint64_t v423 = 0;
        uint64_t v424 = 0;
        uint64_t v422 = (char *)&v423;
        unint64_t v80 = (uint64_t **)v413;
        *(void *)uint64_t v395 = v414;
        if (v413 != v414)
        {
          unsigned int v387 = v72;
          int v384 = (int)v73;
          while (1)
          {
            uint64_t v82 = **v80;
            uint64_t v83 = (*v80)[1];
            if (!operations_research::sat::PresolveContext::DomainContains(v402, v72, v82))
            {
              uint64_t v376 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v427, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1001);
              unsigned int v377 = (void *)google::LogMessage::stream(v376);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v377, (uint64_t)"Check failed: context->DomainContains(left_var, left_value) ", 60);
              goto LABEL_563;
            }
            if (!operations_research::sat::PresolveContext::DomainContains(v402, v73, v83))
            {
              int v378 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v427, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1002);
              uint64_t v379 = (void *)google::LogMessage::stream(v378);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)"Check failed: context->DomainContains(right_var, right_value) ", 62);
LABEL_563:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v427);
            }
            signed int VarValueEncoding = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v402, v72, v82);
            signed int v85 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v402, (int)v73, v83);
            unint64_t v86 = (uint64_t *)*((void *)&v425 + 1);
            uint64_t v87 = (uint64_t **)&v425 + 1;
            uint64_t v88 = (uint64_t **)&v425 + 1;
            if (*((void *)&v425 + 1))
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v88 = (uint64_t **)v86;
                  signed int v89 = *((_DWORD *)v86 + 8);
                  if (VarValueEncoding >= v89) {
                    break;
                  }
                  unint64_t v86 = *v88;
                  uint64_t v87 = v88;
                  if (!*v88) {
                    goto LABEL_118;
                  }
                }
                if (v89 >= VarValueEncoding) {
                  break;
                }
                unint64_t v86 = v88[1];
                if (!v86)
                {
                  uint64_t v87 = v88 + 1;
                  goto LABEL_118;
                }
              }
              uint64_t v90 = v88;
              uint64_t v93 = (signed int *)v88[6];
              unint64_t v92 = (unint64_t)v88[7];
              if ((unint64_t)v93 >= v92)
              {
LABEL_123:
                unint64_t v95 = (signed int *)v90[5];
                uint64_t v96 = v93 - v95;
                unint64_t v97 = v96 + 1;
                if ((unint64_t)(v96 + 1) >> 62) {
                  goto LABEL_575;
                }
                uint64_t v98 = v92 - (void)v95;
                if (v98 >> 1 > v97) {
                  unint64_t v97 = v98 >> 1;
                }
                if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v99 = v97;
                }
                if (v99)
                {
                  if (v99 >> 62) {
                    goto LABEL_578;
                  }
                  unint64_t v100 = operator new(4 * v99);
                  unint64_t v101 = (signed int *)&v100[4 * v96];
                  signed int *v101 = v85;
                  uint64_t v94 = (uint64_t)(v101 + 1);
                  if (v93 == v95) {
                    goto LABEL_140;
                  }
LABEL_134:
                  unint64_t v102 = (char *)(v93 - 1) - (char *)v95;
                  if (v102 < 0x2C) {
                    goto LABEL_583;
                  }
                  if ((unint64_t)((char *)v95 - v100) < 0x20) {
                    goto LABEL_583;
                  }
                  uint64_t v103 = (v102 >> 2) + 1;
                  uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                  unint64_t v105 = &v93[v104 / 0xFFFFFFFFFFFFFFFCLL];
                  unint64_t v101 = (signed int *)((char *)v101 - v104);
                  std::string::size_type v106 = &v100[4 * v96 - 16];
                  uint64_t v107 = v93 - 4;
                  uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v109 = *(_OWORD *)v107;
                    *(v106 - 1) = *((_OWORD *)v107 - 1);
                    *std::string::size_type v106 = v109;
                    v106 -= 2;
                    v107 -= 8;
                    v108 -= 8;
                  }
                  while (v108);
                  uint64_t v93 = v105;
                  if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_583:
                    do
                    {
                      signed int v110 = *--v93;
                      *--unint64_t v101 = v110;
                    }
                    while (v93 != v95);
                  }
                }
                else
                {
                  unint64_t v100 = 0;
                  unint64_t v101 = (signed int *)(4 * v96);
                  *(_DWORD *)(4 * v96) = v85;
                  uint64_t v94 = 4 * v96 + 4;
                  if (v93 != v95) {
                    goto LABEL_134;
                  }
                }
LABEL_140:
                v90[5] = v101;
                v90[6] = v94;
                v90[7] = &v100[4 * v99];
                if (v95) {
                  operator delete(v95);
                }
                goto LABEL_142;
              }
            }
            else
            {
LABEL_118:
              uint64_t v90 = operator new(0x40uLL);
              *((_DWORD *)v90 + 8) = VarValueEncoding;
              v90[6] = 0;
              v90[7] = 0;
              v90[5] = 0;
              void *v90 = 0;
              v90[1] = 0;
              v90[2] = v88;
              google::protobuf::Arena *v87 = v90;
              uint64_t v91 = v90;
              if (*(void *)v425)
              {
                *(void *)&long long v425 = *(void *)v425;
                uint64_t v91 = *v87;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v425 + 1), v91);
              ++v426[0];
              uint64_t v93 = (signed int *)v90[6];
              unint64_t v92 = v90[7];
              if ((unint64_t)v93 >= v92) {
                goto LABEL_123;
              }
            }
            *uint64_t v93 = v85;
            uint64_t v94 = (uint64_t)(v93 + 1);
LABEL_142:
            v90[6] = v94;
            uint64_t v111 = v423;
            std::string::size_type v112 = &v423;
LABEL_144:
            uint64_t v113 = v112;
            if (!v111) {
              goto LABEL_149;
            }
            do
            {
              std::string::size_type v112 = (uint64_t *)v111;
              signed int v114 = *(_DWORD *)(v111 + 32);
              if (v85 < v114)
              {
                uint64_t v111 = *v112;
                goto LABEL_144;
              }
              if (v114 >= v85)
              {
                uint64_t v115 = v112;
                uint64_t v118 = (signed int *)v112[6];
                unint64_t v117 = v112[7];
                if ((unint64_t)v118 >= v117) {
                  goto LABEL_154;
                }
LABEL_107:
                signed int *v118 = VarValueEncoding;
                uint64_t v81 = (uint64_t)(v118 + 1);
                goto LABEL_108;
              }
              uint64_t v111 = v112[1];
            }
            while (v111);
            uint64_t v113 = v112 + 1;
LABEL_149:
            uint64_t v115 = operator new(0x40uLL);
            v115[8] = v85;
            *((void *)v115 + 6) = 0;
            *((void *)v115 + 7) = 0;
            *((void *)v115 + 5) = 0;
            *(void *)uint64_t v115 = 0;
            *((void *)v115 + 1) = 0;
            *((void *)v115 + 2) = v112;
            *uint64_t v113 = (uint64_t)v115;
            int v116 = (uint64_t *)v115;
            if (*(void *)v422)
            {
              uint64_t v422 = *(char **)v422;
              int v116 = (uint64_t *)*v113;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v423, v116);
            ++v424;
            uint64_t v118 = (signed int *)*((void *)v115 + 6);
            unint64_t v117 = *((void *)v115 + 7);
            if ((unint64_t)v118 < v117) {
              goto LABEL_107;
            }
LABEL_154:
            std::string::size_type v119 = (signed int *)*((void *)v115 + 5);
            uint64_t v120 = v118 - v119;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62) {
LABEL_575:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v122 = v117 - (void)v119;
            if (v122 >> 1 > v121) {
              unint64_t v121 = v122 >> 1;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v121;
            }
            if (!v123)
            {
              uint64_t v124 = 0;
              uint64_t v125 = (signed int *)(4 * v120);
              *(_DWORD *)(4 * v12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = VarValueEncoding;
              uint64_t v81 = 4 * v120 + 4;
              if (v118 != v119) {
                goto LABEL_165;
              }
              goto LABEL_171;
            }
            if (v123 >> 62) {
LABEL_578:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v124 = operator new(4 * v123);
            uint64_t v125 = (signed int *)&v124[4 * v120];
            signed int *v125 = VarValueEncoding;
            uint64_t v81 = (uint64_t)(v125 + 1);
            if (v118 == v119) {
              goto LABEL_171;
            }
LABEL_165:
            unint64_t v126 = (char *)(v118 - 1) - (char *)v119;
            if (v126 < 0x2C) {
              goto LABEL_584;
            }
            if ((unint64_t)((char *)v119 - v124) < 0x20) {
              goto LABEL_584;
            }
            uint64_t v127 = (v126 >> 2) + 1;
            uint64_t v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v129 = &v118[v128 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v125 = (signed int *)((char *)v125 - v128);
            unint64_t v130 = &v124[4 * v120 - 16];
            uint64_t v131 = v118 - 4;
            uint64_t v132 = v127 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v133 = *(_OWORD *)v131;
              *(v130 - 1) = *((_OWORD *)v131 - 1);
              *unint64_t v130 = v133;
              v130 -= 2;
              v131 -= 8;
              v132 -= 8;
            }
            while (v132);
            uint64_t v118 = v129;
            if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_584:
              do
              {
                signed int v134 = *--v118;
                *--uint64_t v125 = v134;
              }
              while (v118 != v119);
            }
LABEL_171:
            *((void *)v115 + 5) = v125;
            *((void *)v115 + 6) = v81;
            *((void *)v115 + 7) = &v124[4 * v123];
            if (v119) {
              operator delete(v119);
            }
LABEL_108:
            unsigned int v72 = v387;
            LODWORD(v73) = v384;
            *((void *)v115 + 6) = v81;
            v80 += 3;
            if (v80 == *(uint64_t ***)v395)
            {
              unint64_t v173 = (char *)v425;
              goto LABEL_247;
            }
          }
        }
        unint64_t v173 = (char *)&v425 + 8;
LABEL_247:
        LODWORD(v407) = 0;
        LODWORD(v406.__r_.__value_.__l.__data_) = 0;
        LODWORD(v403) = 0;
        uint64_t v57 = (uint64_t)v402;
        v427[0] = (unint64_t)v402;
        v427[1] = (unint64_t)&v406;
        v427[2] = (unint64_t)&v403;
        *(void *)&long long v428 = &v407;
        unint64_t v56 = v381;
        if (v173 != (char *)&v425 + 8)
        {
          do
          {
            unint64_t v184 = (char *)*((void *)v173 + 1);
            if (v184)
            {
              do
              {
                uint64_t v185 = v184;
                unint64_t v184 = *(char **)v184;
              }
              while (v184);
            }
            else
            {
              do
              {
                uint64_t v185 = (char *)*((void *)v173 + 2);
                BOOL v186 = *(void *)v185 == (void)v173;
                unint64_t v173 = v185;
              }
              while (!v186);
            }
            unint64_t v173 = v185;
          }
          while (v185 != (char *)&v425 + 8);
        }
        int v174 = (uint64_t *)v422;
        if (v422 != (char *)&v423)
        {
          do
          {
            unint64_t v187 = (uint64_t *)v174[1];
            if (v187)
            {
              do
              {
                unint64_t v188 = (uint64_t **)v187;
                unint64_t v187 = (uint64_t *)*v187;
              }
              while (v187);
            }
            else
            {
              do
              {
                unint64_t v188 = (uint64_t **)v174[2];
                BOOL v186 = *v188 == v174;
                int v174 = (uint64_t *)v188;
              }
              while (!v186);
            }
            int v174 = (uint64_t *)v188;
          }
          while (v188 != (uint64_t **)&v423);
        }
        if (*off_26AECFE28[0] > 1
          && (off_26AECFE28[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFE28, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v419, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1043);
          uint64_t v175 = (void *)google::LogMessage::stream((google::LogMessage *)&v419);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"Table: 2 variables, ", 20);
          unint64_t v176 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)" tuples encoded using ", 22);
          uint64_t v177 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" clauses, including ", 20);
          int v178 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)" large clauses, ", 16);
          v179 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)" implications", 13);
          google::LogMessage::~LogMessage((google::LogMessage *)&v419);
        }
        std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v422, (void *)v423);
        std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v425, *((void **)&v425 + 1));
LABEL_254:
        v427[0] = (unint64_t)operator new(0x38uLL);
        *(_OWORD *)&v427[1] = xmmword_23CE7FEB0;
        strcpy((char *)v427[0], "table: expanded positive constraint with two variables");
        operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
        goto LABEL_255;
      }
      operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v57, v73, (unint64_t *)&v425);
      BOOL v74 = operations_research::Domain::Size((operations_research::Domain *)&v425) == 1;
      if (v425)
      {
        operator delete(*((void **)&v425 + 1));
        if ((v427[0] & 1) == 0) {
          goto LABEL_104;
        }
      }
      else if ((v427[0] & 1) == 0)
      {
        goto LABEL_104;
      }
LABEL_93:
      operator delete((void *)v427[1]);
      if (v74) {
        goto LABEL_254;
      }
      goto LABEL_105;
    }
    *(_OWORD *)&v427[1] = 0u;
    long long v428 = 0u;
    v427[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v429 = 0;
    uint64_t v75 = (char *)v413;
    unint64_t v76 = v414;
    if (v413 == v414)
    {
      unint64_t v79 = 0;
      int v386 = 0;
    }
    else
    {
      do
      {
        *(void *)&long long v425 = *(void *)v75;
        *((void *)&v425 + 1) = v59;
        unint64_t v77 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>((uint64_t *)v427, (uint64_t)&v425);
        if (v78) {
          *(_OWORD *)(v427[1] + 16 * v77) = v425;
        }
        v75 += 24;
      }
      while (v75 != v76);
      int v386 = v427[2];
      unint64_t v79 = v427[2];
      if ((void)v428)
      {
        operator delete((void *)v427[0]);
        v427[0] = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        uint64_t v429 = 0;
        v427[2] = 0;
        *(void *)&long long v428 = 0;
        v427[1] = 0;
      }
    }
    if (*((void *)&v428 + 1)) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v428 + 1));
    }
    uint64_t v399 = (v383 - 1);
    int v407 = 0;
    unint64_t v408 = 0;
    uint64_t v409 = 0;
    if ((int)v383 >= 1)
    {
      unsigned int v390 = v79;
      std::string::size_type v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      while (1)
      {
        while (1)
        {
          uint64_t v139 = *((void *)v411 + 6 * v138 + 2);
          if (v137 >= v136) {
            break;
          }
          *(void *)uint64_t v137 = v139;
          v137 += 8;
          unint64_t v408 = v137;
          if (++v138 == v383) {
            goto LABEL_206;
          }
        }
        uint64_t v140 = (v137 - v135) >> 3;
        unint64_t v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v136 - v135) >> 2 > v141) {
          unint64_t v141 = (v136 - v135) >> 2;
        }
        unint64_t v142 = (unint64_t)(v136 - v135) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v141;
        if (v142)
        {
          if (v142 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v143 = operator new(8 * v142);
          uint64_t v144 = &v143[8 * v140];
          *(void *)uint64_t v144 = v139;
          uint64_t v145 = (uint64_t)(v144 + 8);
          if (v137 == v135)
          {
LABEL_197:
            unint64_t v56 = v381;
            uint64_t v57 = (uint64_t)v402;
            uint64_t v136 = &v143[8 * v142];
            int v407 = v144;
            unint64_t v408 = (char *)v145;
            uint64_t v409 = v136;
            if (!v135) {
              goto LABEL_194;
            }
LABEL_193:
            operator delete(v135);
            goto LABEL_194;
          }
        }
        else
        {
          uint64_t v143 = 0;
          uint64_t v144 = (char *)(8 * v140);
          *(void *)(8 * v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v139;
          uint64_t v145 = 8 * v140 + 8;
          if (v137 == v135) {
            goto LABEL_197;
          }
        }
        unint64_t v146 = v137 - 8 - v135;
        if (v146 < 0x168
          || &v143[v137 - v135 - 8 - (v146 & 0xFFFFFFFFFFFFFFF8)] > &v143[v137 - v135 - 8]
          || &v137[-(v146 & 0xFFFFFFFFFFFFFFF8) - 8] > v137 - 8
          || (unint64_t)(v135 - v143) < 0x20)
        {
          break;
        }
        uint64_t v149 = (v146 >> 3) + 1;
        uint64_t v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v147 = &v137[-v150];
        v144 -= v150;
        uint64_t v151 = &v143[8 * v140 - 16];
        unsigned int v152 = v137 - 16;
        uint64_t v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v56 = v381;
        uint64_t v57 = (uint64_t)v402;
        do
        {
          long long v154 = *(_OWORD *)v152;
          *(v151 - 1) = *((_OWORD *)v152 - 1);
          _OWORD *v151 = v154;
          v151 -= 2;
          v152 -= 32;
          v153 -= 4;
        }
        while (v153);
        if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_191;
        }
LABEL_192:
        uint64_t v136 = &v143[8 * v142];
        int v407 = v144;
        unint64_t v408 = (char *)v145;
        uint64_t v409 = v136;
        if (v135) {
          goto LABEL_193;
        }
LABEL_194:
        std::string::size_type v135 = v144;
        uint64_t v137 = (char *)v145;
        unint64_t v408 = (char *)v145;
        if (++v138 == v383)
        {
LABEL_206:
          uint64_t v155 = v407;
          unint64_t v79 = v390;
          goto LABEL_208;
        }
      }
      unsigned int v147 = v137;
      unint64_t v56 = v381;
      uint64_t v57 = (uint64_t)v402;
      do
      {
LABEL_191:
        uint64_t v148 = *((void *)v147 - 1);
        v147 -= 8;
        *((void *)v144 - 1) = v148;
        v144 -= 8;
      }
      while (v147 != v135);
      goto LABEL_192;
    }
    uint64_t v137 = 0;
    uint64_t v155 = 0;
LABEL_208:
    operations_research::sat::CompressTuples((uint64_t)v155, (v137 - v155) >> 3, 0x8000000000000000, (uint64_t)&v413);
    uint64_t v157 = (v414 - (unsigned char *)v413) >> 3;
    unint64_t v158 = (absl::lts_2020_02_25::numbers_internal *)(0xAAAAAAAAAAAAAAABLL * v157);
    if (-1431655765 * v157 == 1)
    {
      HIBYTE(v427[2]) = 16;
      strcpy((char *)v427, "table: one tuple");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
      if (SHIBYTE(v427[2]) < 0) {
        operator delete((void *)v427[0]);
      }
      operations_research::sat::ConstraintProto::Clear(v56);
LABEL_557:
      if (v155)
      {
        unint64_t v408 = v155;
        operator delete(v155);
      }
      goto LABEL_258;
    }
    uint64_t v159 = (absl::lts_2020_02_25::numbers_internal *)(-1431655765 * (*(void *)v394 >> 3));
    if (v79 == v159)
    {
      std::string::basic_string[abi:ne180100]<0>(v427, "TODO table: last value implied by previous values");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
      if (SHIBYTE(v427[2]) < 0) {
        operator delete((void *)v427[0]);
      }
    }
    if (*off_26AECFE18[0] >= 2
      && (off_26AECFE18[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFE18, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
    {
      if ((int)v383 < 2)
      {
        uint64_t v162 = 1;
      }
      else
      {
        uint64_t v160 = (uint64_t *)((char *)v411 + 16);
        uint64_t v161 = 1;
        do
        {
          uint64_t v164 = *v160;
          v160 += 6;
          unint64_t v163 = v164;
          if (v164 >= 0) {
            unint64_t v165 = v163;
          }
          else {
            unint64_t v165 = -(uint64_t)v163;
          }
          int v166 = 63 - __clz(v165);
          if (v163) {
            int v167 = v166;
          }
          else {
            int v167 = 0;
          }
          if (v161 >= 0) {
            unint64_t v168 = v161;
          }
          else {
            unint64_t v168 = -v161;
          }
          int v169 = 63 - __clz(v168);
          if (!v161) {
            int v169 = 0;
          }
          int v170 = v167 + v169;
          if (v170 <= 61)
          {
            uint64_t v162 = v163 * v161;
          }
          else
          {
            uint64_t v162 = 0;
            if (v161 && v163)
            {
              uint64_t v162 = ((v163 ^ v161) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              unint64_t v171 = v165 * v168;
              if (v170 <= 0x3E && v171 < v162)
              {
                if (v162 >= 0) {
                  uint64_t v162 = v165 * v168;
                }
                else {
                  uint64_t v162 = -(uint64_t)v171;
                }
              }
            }
          }
          uint64_t v161 = v162;
          --v399;
        }
        while (v399);
      }
      v427[0] = (unint64_t)"Table: ";
      v427[1] = 7;
      uint64_t v195 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v383, v426, v156);
      *(void *)&long long v425 = v426;
      *((void *)&v425 + 1) = v195 - (unsigned char *)v426;
      uint64_t v422 = " variables, original tuples = ";
      uint64_t v423 = 30;
      uint64_t v197 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v382, v421, v196);
      uint64_t v419 = v421;
      uint64_t v420 = v197 - (unsigned char *)v421;
      absl::lts_2020_02_25::StrCat((uint64_t)v427, (uint64_t)&v425, (uint64_t)&v422, (uint64_t)&v419, &v406);
      if (v382 != v159)
      {
        v427[0] = (unint64_t)", valid tuples = ";
        v427[1] = 17;
        uint64_t v199 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v159, v426, v198);
        *(void *)&long long v425 = v426;
        *((void *)&v425 + 1) = v199 - (unsigned char *)v426;
        absl::lts_2020_02_25::StrAppend(&v406, (uint64_t)v427, (uint64_t)&v425);
      }
      if (v79 == v159)
      {
        if (v162 <= v386)
        {
          v427[0] = (unint64_t)", full prefix = true";
          v427[1] = 20;
          absl::lts_2020_02_25::StrAppend((uint64_t)&v406, (uint64_t)v427);
        }
        else
        {
          v427[0] = (unint64_t)", partial prefix = ";
          v427[1] = 19;
          uint64_t v200 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v159, v426, v198);
          *(void *)&long long v425 = v426;
          *((void *)&v425 + 1) = v200 - (unsigned char *)v426;
          uint64_t v422 = "/";
          uint64_t v423 = 1;
          v202 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v162, v421, v201);
          uint64_t v419 = v421;
          uint64_t v420 = v202 - (unsigned char *)v421;
          absl::lts_2020_02_25::StrAppend(&v406, (uint64_t)v427, (uint64_t)&v425, (uint64_t)&v422, (uint64_t)&v419);
        }
      }
      else
      {
        v427[0] = (unint64_t)", num prefix tuples = ";
        v427[1] = 22;
        uint64_t v204 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v79, v426, v198);
        *(void *)&long long v425 = v426;
        *((void *)&v425 + 1) = v204 - (unsigned char *)v426;
        absl::lts_2020_02_25::StrAppend(&v406, (uint64_t)v427, (uint64_t)&v425);
      }
      if (v158 != v159)
      {
        v427[0] = (unint64_t)", compressed tuples = ";
        v427[1] = 22;
        uint64_t v207 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v158, v426, v203);
        *(void *)&long long v425 = v426;
        *((void *)&v425 + 1) = v207 - (unsigned char *)v426;
        absl::lts_2020_02_25::StrAppend(&v406, (uint64_t)v427, (uint64_t)&v425);
      }
      if (*off_26AECFE20[0] >= 2
        && (off_26AECFE20[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFE20, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
      {
        std::string::size_type v208 = google::LogMessage::LogMessage((google::LogMessage *)v427, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 1195);
        int32x4_t v209 = (void *)google::LogMessage::stream(v208);
        if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v210 = &v406;
        }
        else {
          uint64_t v210 = (std::string *)v406.__r_.__value_.__r.__words[0];
        }
        if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v406.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v406.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)v210, size);
        google::LogMessage::~LogMessage((google::LogMessage *)v427);
      }
      if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v406.__r_.__value_.__l.__data_);
      }
    }
    if (v158 == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v427, "TODO table: two tuples");
      operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
      if (SHIBYTE(v427[2]) < 0) {
        operator delete((void *)v427[0]);
      }
    }
    uint64_t v422 = 0;
    uint64_t v423 = 0;
    uint64_t v424 = 0;
    if ((void)v158 << 32)
    {
      if ((((void)v158 << 32) & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int32x4_t v212 = (char *)operator new((4 * (void)v158) & 0x3FFFFFFFFLL);
      uint64_t v422 = v212;
      uint64_t v424 = &v212[4 * (int)v158];
      bzero(v212, (4 * (void)v158) & 0x3FFFFFFFFLL);
      uint64_t v423 = (uint64_t)&v212[(4 * (void)v158) & 0x3FFFFFFFFLL];
    }
    uint64_t v213 = *(void *)(v57 + 48);
    int64x2_t v214 = *(int **)(v213 + 56);
    if (v214)
    {
      uint64_t v215 = *(int *)(v213 + 48);
      int v216 = *v214;
      if ((int)v215 < *v214)
      {
        *(_DWORD *)(v213 + 48) = v215 + 1;
        unint64_t v217 = *(void *)&v214[2 * v215 + 2];
        goto LABEL_329;
      }
      if (v216 != *(_DWORD *)(v213 + 52))
      {
LABEL_328:
        *int64x2_t v214 = v216 + 1;
        unint64_t v217 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v213 + 40));
        uint64_t v218 = *(void *)(v213 + 56);
        uint64_t v219 = *(int *)(v213 + 48);
        *(_DWORD *)(v213 + 48) = v219 + 1;
        *(void *)(v218 + 8 * v219 + 8) = v217;
LABEL_329:
        if (*(_DWORD *)(v217 + 60) == 3)
        {
          unint64_t v220 = *(void *)(v217 + 48);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v217);
          *(_DWORD *)(v217 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
          uint64_t v221 = *(void *)(v217 + 8);
          uint64_t v222 = (google::protobuf::Arena *)(v221 & 0xFFFFFFFFFFFFFFFELL);
          if (v221) {
            uint64_t v222 = *(google::protobuf::Arena **)v222;
          }
          unint64_t v220 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v222);
          *(void *)(v217 + 48) = v220;
        }
        if (*(unsigned char *)(v57 + 64))
        {
          unint64_t v223 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(v57 + 48));
          unint64_t v224 = operations_research::sat::ConstraintProto::mutable_at_most_one(v223);
          if ((int)v158 < 1) {
            goto LABEL_346;
          }
        }
        else
        {
          unint64_t v224 = 0;
          if ((int)v158 < 1) {
            goto LABEL_346;
          }
        }
        uint64_t v225 = 0;
        uint64_t v226 = 4 * v158;
        do
        {
          int v227 = operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)v57);
          *(_DWORD *)&v422[v225] = v227;
          uint64_t v228 = *(unsigned int *)(v220 + 16);
          if (v228 == *(_DWORD *)(v220 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v220 + 16), v228 + 1);
          }
          *(_DWORD *)(*(void *)(v220 + 24) + 4 * v228) = v227;
          *(_DWORD *)(v220 + 16) = v228 + 1;
          if (v224)
          {
            int v229 = *(_DWORD *)&v422[v225];
            uint64_t v230 = *(unsigned int *)(v224 + 16);
            if (v230 == *(_DWORD *)(v224 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v224 + 16), v230 + 1);
            }
            *(_DWORD *)(*(void *)(v224 + 24) + 4 * v23google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v229;
            *(_DWORD *)(v224 + 16) = v230 + 1;
          }
          v225 += 4;
        }
        while (v226 != v225);
LABEL_346:
        uint64_t v419 = 0;
        uint64_t v420 = 0;
        v421[0] = 0;
        memset(&v406, 0, sizeof(v406));
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        v405 = 0;
        if ((int)v383 < 1)
        {
LABEL_546:
          v427[0] = (unint64_t)operator new(0x28uLL);
          *(_OWORD *)&v427[1] = xmmword_23CE7ECE0;
          strcpy((char *)v427[0], "table: expanded positive constraint");
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v402, (uint64_t)v427);
          if (SHIBYTE(v427[2]) < 0) {
            operator delete((void *)v427[0]);
          }
          operations_research::sat::ConstraintProto::Clear(v381);
          if (v403) {
            operator delete(v403);
          }
          if (v406.__r_.__value_.__r.__words[0]) {
            operator delete(v406.__r_.__value_.__l.__data_);
          }
          if (v419) {
            operator delete(v419);
          }
          if (v422) {
            operator delete(v422);
          }
          uint64_t v155 = v407;
          goto LABEL_557;
        }
        uint64_t v231 = 0;
LABEL_349:
        if (*((void *)v411 + 6 * v231 + 2) == 1) {
          goto LABEL_348;
        }
        uint64_t v232 = (char *)v419;
        uint64_t v420 = (uint64_t)v419;
        uint64_t v233 = (char *)v406.__r_.__value_.__r.__words[0];
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        uint64_t v234 = (char *)v403;
        uint64_t v404 = (int *)v403;
        unint64_t v235 = v422;
        if (v423 == (void)v422) {
          goto LABEL_348;
        }
        uint64_t v236 = 0;
        uint64_t v396 = v422;
        unint64_t v400 = (v423 - (uint64_t)v422) >> 2;
        uint64_t v391 = v231;
        while (1)
        {
          while (1)
          {
            uint64_t v237 = *(void *)(*((void *)v413 + 3 * v236) + 8 * v231);
            int v238 = *(_DWORD *)&v235[4 * v236];
            if (v237 != 0x8000000000000000) {
              break;
            }
            if (v234 < v405)
            {
              *(_DWORD *)uint64_t v234 = v238;
              v234 += 4;
              uint64_t v404 = (int *)v234;
              if (v400 <= ++v236) {
                goto LABEL_438;
              }
            }
            else
            {
              unint64_t v239 = (char *)v403;
              int64_t v240 = v234 - (unsigned char *)v403;
              uint64_t v241 = (v234 - (unsigned char *)v403) >> 2;
              unint64_t v242 = v241 + 1;
              if ((unint64_t)(v241 + 1) >> 62) {
                goto LABEL_570;
              }
              uint64_t v243 = v405 - (unsigned char *)v403;
              if ((v405 - (unsigned char *)v403) >> 1 > v242) {
                unint64_t v242 = v243 >> 1;
              }
              if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v244 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v244 = v242;
              }
              int v388 = v233;
              if (v244)
              {
                if (v244 >> 62) {
                  goto LABEL_569;
                }
                unint64_t v245 = operator new(4 * v244);
                uint64_t v246 = &v245[4 * v241];
                *uint64_t v246 = v238;
                uint64_t v247 = (uint64_t)(v246 + 1);
                if (v234 == v239)
                {
LABEL_406:
                  uint64_t v231 = v391;
                  uint64_t v403 = v246;
                  v405 = &v245[4 * v244];
                  if (!v239) {
                    goto LABEL_369;
                  }
LABEL_368:
                  operator delete(v239);
                  goto LABEL_369;
                }
              }
              else
              {
                unint64_t v245 = 0;
                uint64_t v246 = (_DWORD *)(4 * v241);
                *(_DWORD *)(4 * v241) = v238;
                uint64_t v247 = 4 * v241 + 4;
                if (v234 == v239) {
                  goto LABEL_406;
                }
              }
              unint64_t v248 = v234 - 4 - v239;
              if (v248 < 0xBC
                || &v245[v240 - 4 - (v248 & 0xFFFFFFFFFFFFFFFCLL)] > &v245[v240 - 4]
                || &v234[-(v248 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v234 - 4
                || (unint64_t)(v234 - v245 - v240) < 0x20)
              {
                unint64_t v249 = v234;
                uint64_t v231 = v391;
                do
                {
LABEL_366:
                  int v250 = *((_DWORD *)v249 - 1);
                  v249 -= 4;
                  *--uint64_t v246 = v250;
                }
                while (v249 != v239);
                goto LABEL_367;
              }
              uint64_t v284 = (v248 >> 2) + 1;
              uint64_t v285 = 4 * (v284 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v249 = &v234[-v285];
              uint64_t v246 = (_DWORD *)((char *)v246 - v285);
              uint64_t v286 = &v245[4 * v241 - 16];
              unint64_t v287 = (long long *)(v234 - 16);
              uint64_t v288 = v284 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v231 = v391;
              do
              {
                long long v289 = *v287;
                *(v286 - 1) = *(v287 - 1);
                _OWORD *v286 = v289;
                v286 -= 2;
                v287 -= 2;
                v288 -= 8;
              }
              while (v288);
              if (v284 != (v284 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_366;
              }
LABEL_367:
              uint64_t v403 = v246;
              v405 = &v245[4 * v244];
              if (v239) {
                goto LABEL_368;
              }
LABEL_369:
              uint64_t v233 = v388;
              uint64_t v404 = (int *)v247;
              uint64_t v234 = (char *)v247;
              if (v400 <= ++v236) {
                goto LABEL_438;
              }
            }
          }
          if ((unint64_t)v232 < v421[0])
          {
            *(_DWORD *)uint64_t v232 = v238;
            uint64_t v251 = (uint64_t)(v232 + 4);
            goto LABEL_387;
          }
          int v252 = (char *)v419;
          int64_t v253 = v232 - (unsigned char *)v419;
          uint64_t v254 = (v232 - (unsigned char *)v419) >> 2;
          unint64_t v255 = v254 + 1;
          if ((unint64_t)(v254 + 1) >> 62) {
LABEL_570:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v256 = v421[0] - (void)v419;
          if ((uint64_t)(v421[0] - (void)v419) >> 1 > v255) {
            unint64_t v255 = v256 >> 1;
          }
          if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v257 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v257 = v255;
          }
          if (v257)
          {
            if (v257 >> 62) {
              goto LABEL_569;
            }
            uint64_t v258 = v233;
            uint64_t v259 = (char *)operator new(4 * v257);
            uint64_t v260 = v232;
            uint64_t v233 = v258;
            uint64_t v261 = &v259[4 * v254];
            *(_DWORD *)uint64_t v261 = v238;
            uint64_t v251 = (uint64_t)(v261 + 4);
            if (v260 != v252)
            {
LABEL_382:
              uint64_t v262 = v260;
              unint64_t v263 = v260 - 4;
              unint64_t v264 = v260 - 4 - v252;
              if (v264 < 0xBC
                || &v259[v253 - 4 - (v264 & 0xFFFFFFFFFFFFFFFCLL)] > &v259[v253 - 4]
                || &v263[-(v264 & 0xFFFFFFFFFFFFFFFCLL)] > v263
                || (unint64_t)(v263 - v259 - v253 + 4) < 0x20)
              {
                unint64_t v265 = v262;
                uint64_t v231 = v391;
              }
              else
              {
                uint64_t v290 = (v264 >> 2) + 1;
                uint64_t v291 = 4 * (v290 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v265 = &v262[-v291];
                v261 -= v291;
                uint64_t v292 = &v259[4 * v254 - 16];
                uint64_t v293 = v262 - 16;
                uint64_t v294 = v290 & 0x7FFFFFFFFFFFFFF8;
                uint64_t v231 = v391;
                do
                {
                  long long v295 = *(_OWORD *)v293;
                  *((_OWORD *)v292 - 1) = *((_OWORD *)v293 - 1);
                  *(_OWORD *)uint64_t v292 = v295;
                  v292 -= 32;
                  v293 -= 32;
                  v294 -= 8;
                }
                while (v294);
                if (v290 == (v290 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_385:
                  uint64_t v419 = v261;
                  v421[0] = &v259[4 * v257];
                  if (!v252) {
                    goto LABEL_387;
                  }
LABEL_386:
                  unint64_t v267 = v233;
                  operator delete(v252);
                  uint64_t v233 = v267;
                  goto LABEL_387;
                }
              }
              do
              {
                int v266 = *((_DWORD *)v265 - 1);
                v265 -= 4;
                *((_DWORD *)v261 - 1) = v266;
                v261 -= 4;
              }
              while (v265 != v252);
              goto LABEL_385;
            }
          }
          else
          {
            uint64_t v260 = v232;
            uint64_t v259 = 0;
            uint64_t v261 = (char *)(4 * v254);
            *(_DWORD *)(4 * v254) = v238;
            uint64_t v251 = 4 * v254 + 4;
            if (v260 != v252) {
              goto LABEL_382;
            }
          }
          uint64_t v231 = v391;
          uint64_t v419 = v261;
          v421[0] = &v259[4 * v257];
          if (v252) {
            goto LABEL_386;
          }
LABEL_387:
          uint64_t v420 = v251;
          if ((unint64_t)v233 < v406.__r_.__value_.__r.__words[2])
          {
            int v268 = (char *)v251;
            *(void *)uint64_t v233 = v237;
            std::string::size_type v269 = (std::string::size_type)(v233 + 8);
            goto LABEL_403;
          }
          uint64_t v270 = (char *)v406.__r_.__value_.__r.__words[0];
          uint64_t v271 = &v233[-v406.__r_.__value_.__r.__words[0]];
          uint64_t v272 = (uint64_t)&v233[-v406.__r_.__value_.__r.__words[0]] >> 3;
          unint64_t v273 = v272 + 1;
          if ((unint64_t)(v272 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v274 = v231;
          unint64_t v275 = v234;
          int64_t v276 = v406.__r_.__value_.__r.__words[2] - v406.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v406.__r_.__value_.__r.__words[2] - v406.__r_.__value_.__r.__words[0]) >> 2 > v273) {
            unint64_t v273 = v276 >> 2;
          }
          if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v277 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v277 = v273;
          }
          if (v277)
          {
            if (v277 >> 61) {
LABEL_569:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            unint64_t v278 = v233;
            char v279 = operator new(8 * v277);
            int v268 = (char *)v251;
            uint64_t v274 = v391;
            uint64_t v233 = v278;
            unint64_t v280 = &v279[8 * v272];
            void *v280 = v237;
            std::string::size_type v269 = (std::string::size_type)(v280 + 1);
            if (v278 == v270)
            {
LABEL_412:
              uint64_t v234 = v275;
              uint64_t v231 = v274;
              v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v280;
              v406.__r_.__value_.__r.__words[2] = (std::string::size_type)&v279[8 * v277];
              if (!v270) {
                goto LABEL_403;
              }
LABEL_402:
              operator delete(v270);
              goto LABEL_403;
            }
          }
          else
          {
            int v268 = (char *)v251;
            char v279 = 0;
            unint64_t v280 = (void *)(8 * v272);
            *(void *)(8 * v272) = v237;
            std::string::size_type v269 = 8 * v272 + 8;
            if (v233 == v270) {
              goto LABEL_412;
            }
          }
          unint64_t v281 = v233 - 8 - v270;
          uint64_t v234 = v275;
          if (v281 < 0x168)
          {
            std::string::size_type v282 = v233;
            uint64_t v231 = v274;
            goto LABEL_400;
          }
          uint64_t v231 = v274;
          if (&v271[(void)v279 - 8 - (v281 & 0xFFFFFFFFFFFFFFF8)] > &v271[(void)v279 - 8])
          {
            std::string::size_type v282 = v233;
            do
            {
LABEL_400:
              uint64_t v283 = *((void *)v282 - 1);
              v282 -= 8;
              *--unint64_t v280 = v283;
            }
            while (v282 != v270);
            goto LABEL_401;
          }
          if (&v233[-(v281 & 0xFFFFFFFFFFFFFFF8) - 8] > v233 - 8)
          {
            std::string::size_type v282 = v233;
            goto LABEL_400;
          }
          if ((unint64_t)(v233 - v279 - (void)v271) < 0x20)
          {
            std::string::size_type v282 = v233;
            goto LABEL_400;
          }
          uint64_t v296 = (v281 >> 3) + 1;
          uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
          std::string::size_type v282 = &v233[-v297];
          unint64_t v280 = (void *)((char *)v280 - v297);
          uint64_t v298 = &v279[8 * v272 - 16];
          unsigned int v299 = v233 - 16;
          uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            *uint64_t v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          if (v296 != (v296 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_400;
          }
LABEL_401:
          v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v280;
          v406.__r_.__value_.__r.__words[2] = (std::string::size_type)&v279[8 * v277];
          if (v270) {
            goto LABEL_402;
          }
LABEL_403:
          v406.__r_.__value_.__l.__size_ = v269;
          uint64_t v233 = (char *)v269;
          uint64_t v232 = v268;
          unint64_t v235 = v396;
          if (v400 <= ++v236)
          {
LABEL_438:
            uint64_t v302 = v419;
            if (v419 != v232)
            {
              unsigned int v397 = *((_DWORD *)v415 + v231);
              if (*off_26AECFE30[0] >= 2
                && (off_26AECFE30[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFE30, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_expand.cc", (const char *)2)))
              {
                uint64_t v303 = google::LogMessage::LogMessage((google::LogMessage *)&v425, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 934);
                uint64_t v304 = (void *)google::LogMessage::stream(v303);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"Process var(", 12);
                uint64_t v305 = (void *)std::ostream::operator<<();
                unint64_t v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)") with domain ", 14);
                operations_research::sat::PresolveContext::DomainOf(v402, (const char *)v397, v427);
                uint64_t v307 = operations_research::operator<<(v306, v427);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)" and ", 5);
                unint64_t v308 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)" active tuples, and ", 20);
                uint64_t v309 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)" any tuples", 11);
                if (v427[0]) {
                  operator delete((void *)v427[1]);
                }
                google::LogMessage::~LogMessage((google::LogMessage *)&v425);
              }
              v427[0] = (v232 - v302) >> 2;
              std::string::size_type v310 = v406.__r_.__value_.__r.__words[0];
              v418[0] = (uint64_t)(v406.__r_.__value_.__l.__size_ - v406.__r_.__value_.__r.__words[0]) >> 3;
              if (v427[0] != v418[0]) {
                google::MakeCheckOpString<unsigned long,unsigned long>((int)v427, (int)v418, "tuple_literals.size() == values.size()");
              }
              memset(v427, 0, sizeof(v427));
              if (v406.__r_.__value_.__l.__size_ != v406.__r_.__value_.__r.__words[0])
              {
                unint64_t v311 = 0;
                unint64_t v312 = 0;
                unint64_t v313 = 0;
                unint64_t v314 = 0;
                while (1)
                {
                  while (1)
                  {
                    uint64_t v315 = *(void *)(v310 + 8 * v314);
                    if (!operations_research::sat::PresolveContext::DomainContains(v402, v397, v315))
                    {
                      int v374 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v425, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 943);
                      uint64_t v375 = (void *)google::LogMessage::stream(v374);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v375, (uint64_t)"Check failed: context->DomainContains(variable, value) ", 55);
LABEL_300:
                      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v425);
                    }
                    unint64_t v316 = v419;
                    if (v313 >= v312) {
                      break;
                    }
                    *(void *)unint64_t v313 = v315;
                    *(_DWORD *)(v313 + 8) = v316[v314];
                    v313 += 16;
                    v427[1] = v313;
                    ++v314;
                    std::string::size_type v310 = v406.__r_.__value_.__r.__words[0];
                    if (v314 >= (uint64_t)(v406.__r_.__value_.__l.__size_ - v406.__r_.__value_.__r.__words[0]) >> 3) {
                      goto LABEL_467;
                    }
                  }
                  uint64_t v317 = (uint64_t)(v313 - (void)v311) >> 4;
                  unint64_t v318 = v317 + 1;
                  if ((unint64_t)(v317 + 1) >> 60) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v312 - (void)v311) >> 3 > v318) {
                    unint64_t v318 = (uint64_t)(v312 - (void)v311) >> 3;
                  }
                  if (v312 - (unint64_t)v311 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v319 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v319 = v318;
                  }
                  if (v319 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v320 = (char *)operator new(16 * v319);
                  uint64_t v321 = &v320[16 * v317];
                  *(void *)uint64_t v321 = v315;
                  *((_DWORD *)v321 + 2) = v316[v314];
                  if ((void *)v313 == v311)
                  {
                    unint64_t v323 = (unint64_t)&v320[16 * v317];
                    unint64_t v312 = (unint64_t)&v320[16 * v319];
                    unint64_t v313 = (unint64_t)(v321 + 16);
                    v427[0] = v323;
                    v427[1] = (unint64_t)(v321 + 16);
                    v427[2] = v312;
                    if (!v311) {
                      goto LABEL_463;
                    }
                  }
                  else
                  {
                    uint64_t v322 = &v320[16 * v317];
                    do
                    {
                      unint64_t v323 = (unint64_t)(v322 - 16);
                      *((_OWORD *)v322 - 1) = *(_OWORD *)(v313 - 16);
                      v313 -= 16;
                      v322 -= 16;
                    }
                    while ((void *)v313 != v311);
                    unint64_t v312 = (unint64_t)&v320[16 * v319];
                    unint64_t v313 = (unint64_t)(v321 + 16);
                    v427[0] = v323;
                    v427[1] = (unint64_t)(v321 + 16);
                    v427[2] = v312;
                    if (!v311) {
                      goto LABEL_463;
                    }
                  }
                  operator delete(v311);
LABEL_463:
                  unint64_t v311 = (void *)v323;
                  v427[1] = v313;
                  ++v314;
                  std::string::size_type v310 = v406.__r_.__value_.__r.__words[0];
                  if (v314 >= (uint64_t)(v406.__r_.__value_.__l.__size_ - v406.__r_.__value_.__r.__words[0]) >> 3)
                  {
LABEL_467:
                    uint64_t v324 = v427[0];
                    goto LABEL_469;
                  }
                }
              }
              unint64_t v313 = 0;
              uint64_t v324 = 0;
LABEL_469:
              unint64_t v325 = 126 - 2 * __clz((uint64_t)(v313 - v324) >> 4);
              long long v425 = 0uLL;
              v426[0] = 0;
              if (v313 == v324) {
                uint64_t v326 = 0;
              }
              else {
                uint64_t v326 = v325;
              }
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v324, (uint64_t *)v313, (uint64_t)v418, v326, 1);
              uint64_t v328 = (void *)v427[0];
              unint64_t v327 = v427[1];
              if (v427[1] != v427[0])
              {
                uint64_t v329 = 0;
                int v330 = 0;
LABEL_476:
                uint64_t v332 = (int *)v425;
                *((void *)&v425 + 1) = v425;
                uint64_t v333 = v328[2 * v329];
                uint64_t v334 = v330;
                unint64_t v401 = v327;
                unint64_t v331 = (uint64_t)(v327 - (void)v328) >> 4;
                if (v331 <= v330)
                {
LABEL_513:
                  uint64_t v353 = v332;
                  if (v403 == v404)
                  {
                    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v418, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 958);
                    uint64_t v373 = (void *)google::LogMessage::stream((google::LogMessage *)v418);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)"Check failed: !selected.empty() || !tuples_with_any.empty() ", 60);
                    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v418);
                  }
                  char v354 = 1;
LABEL_516:
                  int v355 = operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(v402, v397, v333);
                  uint64_t v356 = *((void *)v402 + 6);
                  uint64_t v357 = *(int **)(v356 + 56);
                  if (v357)
                  {
                    uint64_t v358 = *(int *)(v356 + 48);
                    int v359 = *v357;
                    if ((int)v358 < *v357)
                    {
                      *(_DWORD *)(v356 + 48) = v358 + 1;
                      unint64_t v360 = *(void *)&v357[2 * v358 + 2];
                      if (*(_DWORD *)(v360 + 60) != 3) {
                        goto LABEL_519;
                      }
LABEL_527:
                      unint64_t v363 = *(void *)(v360 + 48);
                      if ((v354 & 1) == 0) {
                        goto LABEL_528;
                      }
                      goto LABEL_531;
                    }
                    if (v359 == *(_DWORD *)(v356 + 52))
                    {
LABEL_525:
                      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v356 + 40), v359 + 1);
                      uint64_t v357 = *(int **)(v356 + 56);
                      int v359 = *v357;
                    }
                    *uint64_t v357 = v359 + 1;
                    unint64_t v360 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v356 + 40));
                    uint64_t v364 = *(void *)(v356 + 56);
                    uint64_t v365 = *(int *)(v356 + 48);
                    *(_DWORD *)(v356 + 48) = v365 + 1;
                    *(void *)(v364 + 8 * v365 + 8) = v360;
                    if (*(_DWORD *)(v360 + 60) == 3) {
                      goto LABEL_527;
                    }
LABEL_519:
                    operations_research::sat::ConstraintProto::clear_constraint(v360);
                    *(_DWORD *)(v360 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
                    uint64_t v361 = *(void *)(v360 + 8);
                    int v362 = (google::protobuf::Arena *)(v361 & 0xFFFFFFFFFFFFFFFELL);
                    if (v361) {
                      int v362 = *(google::protobuf::Arena **)v362;
                    }
                    unint64_t v363 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v362);
                    *(void *)(v360 + 48) = v363;
                    if ((v354 & 1) == 0)
                    {
                      do
                      {
LABEL_528:
                        int v366 = *v353;
                        uint64_t v367 = *(unsigned int *)(v363 + 16);
                        if (v367 == *(_DWORD *)(v363 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v363 + 16), v367 + 1);
                        }
                        *(_DWORD *)(*(void *)(v363 + 24) + 4 * v367) = v366;
                        *(_DWORD *)(v363 + 16) = v367 + 1;
                        operations_research::sat::PresolveContext::AddImplication(v402, v366, v355);
                        ++v353;
                      }
                      while (v353 != v332);
                    }
LABEL_531:
                    uint64_t v368 = (int *)v403;
                    uint64_t v369 = v404;
                    if (v403 == v404)
                    {
                      unsigned int v372 = *(_DWORD *)(v363 + 16);
                    }
                    else
                    {
                      unsigned int v370 = *(_DWORD *)(v363 + 16);
                      do
                      {
                        int v371 = *v368;
                        unsigned int v372 = v370 + 1;
                        if (v370 == *(_DWORD *)(v363 + 20)) {
                          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v363 + 16), v370 + 1);
                        }
                        *(_DWORD *)(*(void *)(v363 + 24) + 4 * v37google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v371;
                        *(_DWORD *)(v363 + 16) = v372;
                        ++v368;
                        ++v370;
                      }
                      while (v368 != v369);
                    }
                    if (v372 == *(_DWORD *)(v363 + 20)) {
                      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v363 + 16), v372 + 1);
                    }
                    *(_DWORD *)(*(void *)(v363 + 24) + 4 * v372) = ~v355;
                    *(_DWORD *)(v363 + 16) = v372 + 1;
                    uint64_t v328 = (void *)v427[0];
                    unint64_t v401 = v427[1];
                    unint64_t v331 = (uint64_t)(v427[1] - v427[0]) >> 4;
                    goto LABEL_475;
                  }
                  int v359 = *(_DWORD *)(v356 + 52);
                  goto LABEL_525;
                }
                while (1)
                {
                  while (1)
                  {
                    if (v328[2 * v334] != v333)
                    {
LABEL_510:
                      int v330 = v334;
                      uint64_t v353 = (int *)v425;
                      if ((int *)v425 == v332) {
                        goto LABEL_513;
                      }
                      char v354 = 0;
                      if ((int *)((char *)v332 - v425) != (int *)4 || v403 != v404) {
                        goto LABEL_516;
                      }
                      operations_research::sat::PresolveContext::InsertVarValueEncoding(v402, (const char *)*(unsigned int *)v425, v397, v333);
LABEL_475:
                      uint64_t v329 = v330;
                      unint64_t v327 = v401;
                      if (v331 <= v330) {
                        goto LABEL_541;
                      }
                      goto LABEL_476;
                    }
                    unint64_t v335 = (int *)&v328[2 * v334 + 1];
                    if ((unint64_t)v332 >= v426[0]) {
                      break;
                    }
                    *v332++ = *v335;
                    *((void *)&v425 + 1) = v332;
                    if (++v334 == v331) {
                      goto LABEL_509;
                    }
                  }
                  uint64_t v336 = (int *)v425;
                  uint64_t v337 = (uint64_t)((uint64_t)v332 - v425) >> 2;
                  unint64_t v338 = v337 + 1;
                  if ((unint64_t)(v337 + 1) >> 62) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v339 = v426[0] - v425;
                  if ((uint64_t)(v426[0] - v425) >> 1 > v338) {
                    unint64_t v338 = v339 >> 1;
                  }
                  if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v340 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v340 = v338;
                  }
                  if (v340)
                  {
                    if (v340 >> 62) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v341 = operator new(4 * v340);
                    uint64_t v342 = (int *)&v341[4 * v337];
                    int *v342 = *v335;
                    uint64_t v343 = (uint64_t)(v342 + 1);
                    if (v332 == v336) {
                      goto LABEL_495;
                    }
                  }
                  else
                  {
                    uint64_t v341 = 0;
                    uint64_t v342 = (int *)(4 * v337);
                    *(_DWORD *)(4 * v337) = *v335;
                    uint64_t v343 = 4 * v337 + 4;
                    if (v332 == v336) {
                      goto LABEL_495;
                    }
                  }
                  unint64_t v344 = (char *)(v332 - 1) - (char *)v336;
                  if (v344 >= 0xBC)
                  {
                    if (&v341[(char *)v332 - (char *)v336 - 4 - (v344 & 0xFFFFFFFFFFFFFFFCLL)] > &v341[(char *)v332 - (char *)v336 - 4])
                    {
                      uint64_t v345 = v332;
                    }
                    else if ((int *)((char *)v332 - (v344 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v332 - 1)
                    {
                      uint64_t v345 = v332;
                    }
                    else if ((unint64_t)((char *)v336 - v341) >= 0x20)
                    {
                      uint64_t v347 = (v344 >> 2) + 1;
                      uint64_t v348 = 4 * (v347 & 0x7FFFFFFFFFFFFFF8);
                      uint64_t v345 = &v332[v348 / 0xFFFFFFFFFFFFFFFCLL];
                      uint64_t v342 = (int *)((char *)v342 - v348);
                      int v349 = &v341[4 * v337 - 16];
                      BOOL v350 = v332 - 4;
                      uint64_t v351 = v347 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v352 = *(_OWORD *)v350;
                        *(v349 - 1) = *((_OWORD *)v350 - 1);
                        *int v349 = v352;
                        v349 -= 2;
                        v350 -= 8;
                        v351 -= 8;
                      }
                      while (v351);
                      if (v347 == (v347 & 0x7FFFFFFFFFFFFFF8)) {
                        goto LABEL_495;
                      }
                    }
                    else
                    {
                      uint64_t v345 = v332;
                    }
                  }
                  else
                  {
                    uint64_t v345 = v332;
                  }
                  do
                  {
                    int v346 = *--v345;
                    *--uint64_t v342 = v346;
                  }
                  while (v345 != v336);
LABEL_495:
                  *(void *)&long long v425 = v342;
                  v426[0] = &v341[4 * v340];
                  if (v336) {
                    operator delete(v336);
                  }
                  uint64_t v332 = (int *)v343;
                  *((void *)&v425 + 1) = v343;
                  if (++v334 == v331)
                  {
LABEL_509:
                    LODWORD(v334) = v331;
                    goto LABEL_510;
                  }
                }
              }
              uint64_t v328 = (void *)v427[1];
LABEL_541:
              if ((void)v425) {
                operator delete((void *)v425);
              }
              uint64_t v231 = v391;
              if (v328)
              {
                v427[1] = (unint64_t)v328;
                operator delete(v328);
              }
            }
LABEL_348:
            if (++v231 == v383) {
              goto LABEL_546;
            }
            goto LABEL_349;
          }
        }
      }
    }
    else
    {
      int v216 = *(_DWORD *)(v213 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v213 + 40), v216 + 1);
    int64x2_t v214 = *(int **)(v213 + 56);
    int v216 = *v214;
    goto LABEL_328;
  }
  std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v413, v392 - v55);
  unint64_t v56 = v381;
  uint64_t v57 = (uint64_t)v402;
  int64_t v58 = v414 - (unsigned char *)v413;
  if (v414 != v413) {
    goto LABEL_57;
  }
LABEL_80:
  HIBYTE(v427[2]) = 12;
  strcpy((char *)v427, "table: empty");
  operations_research::sat::PresolveContext::UpdateRuleStats(v57, (uint64_t)v427);
  if (SHIBYTE(v427[2]) < 0) {
    operator delete((void *)v427[0]);
  }
  HIBYTE(v427[2]) = 0;
  LOBYTE(v427[0]) = 0;
  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v57, (uint64_t)v427);
  if (SHIBYTE(v427[2]) < 0) {
    operator delete((void *)v427[0]);
  }
LABEL_258:
  unint64_t v180 = (void **)v411;
  if (v411)
  {
    int v181 = v412;
    uint64_t v182 = v411;
    if (v412 != v411)
    {
      do
      {
        if (*(v181 - 3))
        {
          operator delete(*(v181 - 6));
          *(v181 - 1) = 0;
          *(v181 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v181 - 5) = 0;
          *(v181 - 4) = 0;
          *(v181 - 3) = 0;
        }
        uint64_t v183 = *(v181 - 2);
        if (v183) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v183);
        }
        v181 -= 6;
      }
      while (v181 != v180);
      uint64_t v182 = v411;
    }
    uint64_t v412 = v180;
    operator delete(v182);
  }
  unint64_t v189 = (char *)v413;
  if (v413)
  {
    uint64_t v190 = v414;
    unint64_t v191 = v413;
    if (v414 != v413)
    {
      uint64_t v192 = v414;
      do
      {
        uint64_t v194 = (void *)*((void *)v192 - 3);
        v192 -= 24;
        uint64_t v193 = v194;
        if (v194)
        {
          *((void *)v190 - 2) = v193;
          operator delete(v193);
        }
        uint64_t v190 = v192;
      }
      while (v192 != v189);
      unint64_t v191 = v413;
    }
    uint64_t v414 = v189;
    operator delete(v191);
  }
  if (v415) {
    operator delete(v415);
  }
}

void sub_23CC07F68()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_23CC07F70()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_23CC07F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v47 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v48 = a44;
      if (!a44) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v47 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v47);
  uint64_t v48 = a44;
  if (!a44)
  {
LABEL_4:
    uint64_t v49 = *(void **)(v45 - 256);
    if (!v49) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  a45 = (uint64_t)v48;
  operator delete(v48);
  uint64_t v49 = *(void **)(v45 - 256);
  if (!v49)
  {
LABEL_6:
    if (a27) {
      operator delete(a27);
    }
    std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a33);
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a36);
    if (a39)
    {
      a40 = (uint64_t)a39;
      operator delete(a39);
    }
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v49);
  goto LABEL_6;
}

uint64_t operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(uint64_t a1, uint64_t a2)
{
  if (*operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__[0] >= 1
    && (operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(std::string const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/presolve_context.h", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.h", 145);
    unint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v10);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"INFEASIBLE: ", 12);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    google::LogMessage::~LogMessage((google::LogMessage *)v10);
  }
  *(unsigned char *)(a1 + 504) = 1;
  return 0;
}

void sub_23CC08420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::anonymous namespace'::ExpandReservoir(operations_research::sat::ConstraintProto *,operations_research::sat::PresolveContext *)::$_1::operator()(operations_research::sat::PresolveContext ***a1, int a2, int a3, int a4, const char *a5, const char *a6)
{
  uint64_t v12 = *((void *)**a1 + 6);
  long long v13 = *(int **)(v12 + 56);
  if (!v13)
  {
    int v15 = *(_DWORD *)(v12 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v12 + 40), v15 + 1);
    long long v13 = *(int **)(v12 + 56);
    int v15 = *v13;
LABEL_8:
    *long long v13 = v15 + 1;
    unint64_t v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v12 + 40));
    uint64_t v20 = *(void *)(v12 + 56);
    uint64_t v21 = *(int *)(v12 + 48);
    *(_DWORD *)(v12 + 48) = v21 + 1;
    *(void *)(v20 + 8 * v21 + 8) = v16;
    uint64_t v18 = *(unsigned int *)(v16 + 16);
    unint64_t v17 = (unsigned int *)(v16 + 16);
    int v19 = v18 + 1;
    if (v18 != *(_DWORD *)(v16 + 20)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v14 = *(int *)(v12 + 48);
  int v15 = *v13;
  if ((int)v14 >= *v13)
  {
    if (v15 != *(_DWORD *)(v12 + 52)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(_DWORD *)(v12 + 48) = v14 + 1;
  unint64_t v16 = *(void *)&v13[2 * v14 + 2];
  uint64_t v18 = *(unsigned int *)(v16 + 16);
  unint64_t v17 = (unsigned int *)(v16 + 16);
  int v19 = v18 + 1;
  if (v18 == *(_DWORD *)(v16 + 20)) {
LABEL_9:
  }
    google::protobuf::RepeatedField<int>::Reserve(v17, v19);
LABEL_10:
  *(_DWORD *)(*(void *)(v16 + 24) + 4 * v18) = a2;
  *(_DWORD *)(v16 + 16) = v19;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v22 = *(void *)(v16 + 48);
    uint64_t v24 = *(unsigned int *)(v22 + 16);
    uint64_t v23 = (unsigned int *)(v22 + 16);
    int v25 = v24 + 1;
    if (v24 != *(_DWORD *)(v22 + 20)) {
      goto LABEL_17;
    }
LABEL_16:
    google::protobuf::RepeatedField<int>::Reserve(v23, v25);
    goto LABEL_17;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v26 = *(void *)(v16 + 8);
  int v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
  if (v26) {
    int v27 = *(google::protobuf::Arena **)v27;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v27);
  uint64_t v22 = v28;
  *(void *)(v16 + 48) = v28;
  uint64_t v24 = *(unsigned int *)(v28 + 16);
  int v29 = *(_DWORD *)(v28 + 20);
  uint64_t v23 = (unsigned int *)(v28 + 16);
  int v25 = v24 + 1;
  if (v24 == v29) {
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(*(void *)(v22 + 24) + 4 * v24) = a3;
  *(_DWORD *)(v22 + 16) = v25;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v30 = *(void *)(v16 + 48);
    uint64_t v32 = *(unsigned int *)(v30 + 16);
    uint64_t v31 = (unsigned int *)(v30 + 16);
    int v33 = v32 + 1;
    if (v32 != *(_DWORD *)(v30 + 20)) {
      goto LABEL_24;
    }
LABEL_23:
    google::protobuf::RepeatedField<int>::Reserve(v31, v33);
    goto LABEL_24;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v34 = *(void *)(v16 + 8);
  uint64_t v35 = (google::protobuf::Arena *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if (v34) {
    uint64_t v35 = *(google::protobuf::Arena **)v35;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v35);
  uint64_t v30 = v36;
  *(void *)(v16 + 48) = v36;
  uint64_t v32 = *(unsigned int *)(v36 + 16);
  int v37 = *(_DWORD *)(v36 + 20);
  uint64_t v31 = (unsigned int *)(v36 + 16);
  int v33 = v32 + 1;
  if (v32 == v37) {
    goto LABEL_23;
  }
LABEL_24:
  *(_DWORD *)(*(void *)(v30 + 24) + 4 * v32) = a4;
  *(_DWORD *)(v30 + 16) = v33;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v38 = *(void *)(v16 + 48);
    uint64_t v40 = *(unsigned int *)(v38 + 40);
    uint64_t v39 = (unsigned int *)(v38 + 40);
    int v41 = v40 + 1;
    if (v40 != *(_DWORD *)(v38 + 44)) {
      goto LABEL_31;
    }
LABEL_30:
    google::protobuf::RepeatedField<long long>::Reserve(v39, v41);
    goto LABEL_31;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v42 = *(void *)(v16 + 8);
  uint64_t v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
  if (v42) {
    uint64_t v43 = *(google::protobuf::Arena **)v43;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v43);
  uint64_t v38 = v44;
  *(void *)(v16 + 48) = v44;
  uint64_t v40 = *(unsigned int *)(v44 + 40);
  int v45 = *(_DWORD *)(v44 + 44);
  uint64_t v39 = (unsigned int *)(v44 + 40);
  int v41 = v40 + 1;
  if (v40 == v45) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(*(void *)(v38 + 48) + 8 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -1;
  *(_DWORD *)(v38 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v41;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v46 = *(void *)(v16 + 48);
    uint64_t v48 = *(unsigned int *)(v46 + 40);
    uint64_t v47 = (unsigned int *)(v46 + 40);
    int v49 = v48 + 1;
    if (v48 != *(_DWORD *)(v46 + 44)) {
      goto LABEL_38;
    }
LABEL_37:
    google::protobuf::RepeatedField<long long>::Reserve(v47, v49);
    goto LABEL_38;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v50 = *(void *)(v16 + 8);
  uint64_t v51 = (google::protobuf::Arena *)(v50 & 0xFFFFFFFFFFFFFFFELL);
  if (v50) {
    uint64_t v51 = *(google::protobuf::Arena **)v51;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v51);
  uint64_t v46 = v52;
  *(void *)(v16 + 48) = v52;
  uint64_t v48 = *(unsigned int *)(v52 + 40);
  int v53 = *(_DWORD *)(v52 + 44);
  uint64_t v47 = (unsigned int *)(v52 + 40);
  int v49 = v48 + 1;
  if (v48 == v53) {
    goto LABEL_37;
  }
LABEL_38:
  *(void *)(*(void *)(v46 + 48) + 8 * v48) = 1;
  *(_DWORD *)(v46 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v49;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v54 = *(void *)(v16 + 48);
    uint64_t v56 = *(unsigned int *)(v54 + 64);
    unint64_t v55 = (unsigned int *)(v54 + 64);
    int v57 = v56 + 1;
    if (v56 != *(_DWORD *)(v54 + 68)) {
      goto LABEL_45;
    }
LABEL_44:
    google::protobuf::RepeatedField<long long>::Reserve(v55, v57);
    goto LABEL_45;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v58 = *(void *)(v16 + 8);
  int v59 = (google::protobuf::Arena *)(v58 & 0xFFFFFFFFFFFFFFFELL);
  if (v58) {
    int v59 = *(google::protobuf::Arena **)v59;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v59);
  uint64_t v54 = v60;
  *(void *)(v16 + 48) = v60;
  uint64_t v56 = *(unsigned int *)(v60 + 64);
  int v61 = *(_DWORD *)(v60 + 68);
  unint64_t v55 = (unsigned int *)(v60 + 64);
  int v57 = v56 + 1;
  if (v56 == v61) {
    goto LABEL_44;
  }
LABEL_45:
  *(void *)(*(void *)(v54 + 72) + 8 * v56) = 0;
  *(_DWORD *)(v54 + 64) = v57;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    uint64_t v62 = *(void *)(v16 + 48);
    uint64_t v64 = *(unsigned int *)(v62 + 64);
    uint64_t v63 = (unsigned int *)(v62 + 64);
    int v65 = v64 + 1;
    if (v64 != *(_DWORD *)(v62 + 68)) {
      goto LABEL_52;
    }
LABEL_51:
    google::protobuf::RepeatedField<long long>::Reserve(v63, v65);
    goto LABEL_52;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v66 = *(void *)(v16 + 8);
  unint64_t v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
  if (v66) {
    unint64_t v67 = *(google::protobuf::Arena **)v67;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v67);
  uint64_t v62 = v68;
  *(void *)(v16 + 48) = v68;
  uint64_t v64 = *(unsigned int *)(v68 + 64);
  int v69 = *(_DWORD *)(v68 + 68);
  uint64_t v63 = (unsigned int *)(v68 + 64);
  int v65 = v64 + 1;
  if (v64 == v69) {
    goto LABEL_51;
  }
LABEL_52:
  *(void *)(*(void *)(v62 + 72) + 8 * v64) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v62 + 64) = v65;
  if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a5))
  {
    if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a6)) {
      goto LABEL_54;
    }
  }
  else
  {
    operations_research::sat::PresolveContext::AddImplication(**a1, a2, (int)a5);
    if (operations_research::sat::PresolveContext::LiteralIsTrue(**a1, a6))
    {
LABEL_54:
      uint64_t v70 = *((void *)**a1 + 6);
      int v71 = *(int **)(v70 + 56);
      if (v71) {
        goto LABEL_55;
      }
LABEL_63:
      int v73 = *(_DWORD *)(v70 + 52);
LABEL_65:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v70 + 40), v73 + 1);
      int v71 = *(int **)(v70 + 56);
      int v73 = *v71;
      goto LABEL_66;
    }
  }
  operations_research::sat::PresolveContext::AddImplication(**a1, a2, (int)a6);
  uint64_t v70 = *((void *)**a1 + 6);
  int v71 = *(int **)(v70 + 56);
  if (!v71) {
    goto LABEL_63;
  }
LABEL_55:
  uint64_t v72 = *(int *)(v70 + 48);
  int v73 = *v71;
  if ((int)v72 < *v71)
  {
    *(_DWORD *)(v70 + 48) = v72 + 1;
    unint64_t v74 = *(void *)&v71[2 * v72 + 2];
    if (*(_DWORD *)(v74 + 60) != 12) {
      goto LABEL_57;
    }
LABEL_67:
    uint64_t v78 = *(void *)(v74 + 48);
    uint64_t v81 = *(unsigned int *)(v78 + 16);
    unint64_t v79 = (unsigned int *)(v78 + 16);
    int v82 = v81 + 1;
    if (v81 != *(_DWORD *)(v78 + 20)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v73 == *(_DWORD *)(v70 + 52)) {
    goto LABEL_65;
  }
LABEL_66:
  *int v71 = v73 + 1;
  unint64_t v74 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v70 + 40));
  uint64_t v83 = *(void *)(v70 + 56);
  uint64_t v84 = *(int *)(v70 + 48);
  *(_DWORD *)(v70 + 48) = v84 + 1;
  *(void *)(v83 + 8 * v84 + 8) = v74;
  if (*(_DWORD *)(v74 + 60) == 12) {
    goto LABEL_67;
  }
LABEL_57:
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v75 = *(void *)(v74 + 8);
  unint64_t v76 = (google::protobuf::Arena *)(v75 & 0xFFFFFFFFFFFFFFFELL);
  if (v75) {
    unint64_t v76 = *(google::protobuf::Arena **)v76;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v76);
  uint64_t v78 = v77;
  *(void *)(v74 + 48) = v77;
  uint64_t v81 = *(unsigned int *)(v77 + 16);
  int v80 = *(_DWORD *)(v77 + 20);
  unint64_t v79 = (unsigned int *)(v77 + 16);
  int v82 = v81 + 1;
  if (v81 == v80) {
LABEL_68:
  }
    google::protobuf::RepeatedField<int>::Reserve(v79, v82);
LABEL_69:
  *(_DWORD *)(*(void *)(v78 + 24) + 4 * v81) = a3;
  *(_DWORD *)(v78 + 16) = v82;
  if (*(_DWORD *)(v74 + 60) == 12)
  {
    uint64_t v85 = *(void *)(v74 + 48);
    uint64_t v87 = *(unsigned int *)(v85 + 16);
    unint64_t v86 = (unsigned int *)(v85 + 16);
    int v88 = v87 + 1;
    if (v87 != *(_DWORD *)(v85 + 20)) {
      goto LABEL_76;
    }
LABEL_75:
    google::protobuf::RepeatedField<int>::Reserve(v86, v88);
    goto LABEL_76;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v89 = *(void *)(v74 + 8);
  uint64_t v90 = (google::protobuf::Arena *)(v89 & 0xFFFFFFFFFFFFFFFELL);
  if (v89) {
    uint64_t v90 = *(google::protobuf::Arena **)v90;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v90);
  uint64_t v85 = v91;
  *(void *)(v74 + 48) = v91;
  uint64_t v87 = *(unsigned int *)(v91 + 16);
  int v92 = *(_DWORD *)(v91 + 20);
  unint64_t v86 = (unsigned int *)(v91 + 16);
  int v88 = v87 + 1;
  if (v87 == v92) {
    goto LABEL_75;
  }
LABEL_76:
  *(_DWORD *)(*(void *)(v85 + 24) + 4 * v87) = a4;
  *(_DWORD *)(v85 + 16) = v88;
  if (*(_DWORD *)(v74 + 60) == 12)
  {
    uint64_t v93 = *(void *)(v74 + 48);
    uint64_t v95 = *(unsigned int *)(v93 + 40);
    uint64_t v94 = (unsigned int *)(v93 + 40);
    int v96 = v95 + 1;
    if (v95 != *(_DWORD *)(v93 + 44)) {
      goto LABEL_83;
    }
LABEL_82:
    google::protobuf::RepeatedField<long long>::Reserve(v94, v96);
    goto LABEL_83;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v97 = *(void *)(v74 + 8);
  uint64_t v98 = (google::protobuf::Arena *)(v97 & 0xFFFFFFFFFFFFFFFELL);
  if (v97) {
    uint64_t v98 = *(google::protobuf::Arena **)v98;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v98);
  uint64_t v93 = v99;
  *(void *)(v74 + 48) = v99;
  uint64_t v95 = *(unsigned int *)(v99 + 40);
  int v100 = *(_DWORD *)(v99 + 44);
  uint64_t v94 = (unsigned int *)(v99 + 40);
  int v96 = v95 + 1;
  if (v95 == v100) {
    goto LABEL_82;
  }
LABEL_83:
  *(void *)(*(void *)(v93 + 48) + 8 * v95) = -1;
  *(_DWORD *)(v93 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v96;
  if (*(_DWORD *)(v74 + 60) == 12)
  {
    uint64_t v101 = *(void *)(v74 + 48);
    uint64_t v103 = *(unsigned int *)(v101 + 40);
    unint64_t v102 = (unsigned int *)(v101 + 40);
    int v104 = v103 + 1;
    if (v103 != *(_DWORD *)(v101 + 44)) {
      goto LABEL_90;
    }
LABEL_89:
    google::protobuf::RepeatedField<long long>::Reserve(v102, v104);
    goto LABEL_90;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v105 = *(void *)(v74 + 8);
  std::string::size_type v106 = (google::protobuf::Arena *)(v105 & 0xFFFFFFFFFFFFFFFELL);
  if (v105) {
    std::string::size_type v106 = *(google::protobuf::Arena **)v106;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v106);
  uint64_t v101 = v107;
  *(void *)(v74 + 48) = v107;
  uint64_t v103 = *(unsigned int *)(v107 + 40);
  int v108 = *(_DWORD *)(v107 + 44);
  unint64_t v102 = (unsigned int *)(v107 + 40);
  int v104 = v103 + 1;
  if (v103 == v108) {
    goto LABEL_89;
  }
LABEL_90:
  *(void *)(*(void *)(v101 + 48) + 8 * v103) = 1;
  *(_DWORD *)(v101 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v104;
  if (*(_DWORD *)(v74 + 60) == 12)
  {
    uint64_t v109 = *(void *)(v74 + 48);
    uint64_t v111 = *(unsigned int *)(v109 + 64);
    signed int v110 = (unsigned int *)(v109 + 64);
    int v112 = v111 + 1;
    if (v111 != *(_DWORD *)(v109 + 68)) {
      goto LABEL_97;
    }
LABEL_96:
    google::protobuf::RepeatedField<long long>::Reserve(v110, v112);
    goto LABEL_97;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v113 = *(void *)(v74 + 8);
  signed int v114 = (google::protobuf::Arena *)(v113 & 0xFFFFFFFFFFFFFFFELL);
  if (v113) {
    signed int v114 = *(google::protobuf::Arena **)v114;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v114);
  uint64_t v109 = v115;
  *(void *)(v74 + 48) = v115;
  uint64_t v111 = *(unsigned int *)(v115 + 64);
  int v116 = *(_DWORD *)(v115 + 68);
  signed int v110 = (unsigned int *)(v115 + 64);
  int v112 = v111 + 1;
  if (v111 == v116) {
    goto LABEL_96;
  }
LABEL_97:
  *(void *)(*(void *)(v109 + 72) + 8 * v111) = 0x8000000000000000;
  *(_DWORD *)(v109 + 64) = v112;
  if (*(_DWORD *)(v74 + 60) == 12)
  {
    uint64_t v117 = *(void *)(v74 + 48);
    uint64_t v119 = *(unsigned int *)(v117 + 64);
    uint64_t v118 = (unsigned int *)(v117 + 64);
    int v120 = v119 + 1;
    if (v119 != *(_DWORD *)(v117 + 68)) {
      goto LABEL_104;
    }
LABEL_103:
    google::protobuf::RepeatedField<long long>::Reserve(v118, v120);
    goto LABEL_104;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v74);
  *(_DWORD *)(v74 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v121 = *(void *)(v74 + 8);
  uint64_t v122 = (google::protobuf::Arena *)(v121 & 0xFFFFFFFFFFFFFFFELL);
  if (v121) {
    uint64_t v122 = *(google::protobuf::Arena **)v122;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v122);
  uint64_t v117 = v123;
  *(void *)(v74 + 48) = v123;
  uint64_t v119 = *(unsigned int *)(v123 + 64);
  int v124 = *(_DWORD *)(v123 + 68);
  uint64_t v118 = (unsigned int *)(v123 + 64);
  int v120 = v119 + 1;
  if (v119 == v124) {
    goto LABEL_103;
  }
LABEL_104:
  *(void *)(*(void *)(v117 + 72) + 8 * v119) = -1;
  *(_DWORD *)(v117 + 64) = v120;
  uint64_t v125 = *(unsigned int *)(v74 + 16);
  unsigned int v126 = v125 + 1;
  if (v125 == *(_DWORD *)(v74 + 20)) {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v74 + 16), v125 + 1);
  }
  uint64_t v127 = *(void *)(v74 + 24);
  *(_DWORD *)(v127 + 4 * v125) = ~a2;
  *(_DWORD *)(v74 + 16) = v126;
  unsigned int v128 = v125 + 2;
  if (v126 == *(_DWORD *)(v74 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v74 + 16), v125 + 2);
    uint64_t v127 = *(void *)(v74 + 24);
  }
  *(_DWORD *)(v127 + 4 * v126) = a5;
  *(_DWORD *)(v74 + 16) = v128;
  if (v128 == *(_DWORD *)(v74 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v74 + 16), v125 + 3);
    uint64_t v127 = *(void *)(v74 + 24);
  }
  *(_DWORD *)(v127 + 4 * v128) = a6;
  *(_DWORD *)(v74 + 16) = v125 + 3;
}

unint64_t operations_research::sat::CpModelProto::add_constraints(operations_research::sat::CpModelProto *this)
{
  uint64_t v2 = (int *)*((void *)this + 7);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 13);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v4 + 1);
    uint64_t v2 = (int *)*((void *)this + 7);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 12);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 12) = v3 + 1;
    return *(void *)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 13)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)this
                                                                                                  + 5));
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *((int *)this + 12);
  *((_DWORD *)this + 12) = v7 + 1;
  *(void *)(v6 + 8 * v7 + 8) = result;
  return result;
}

_DWORD *gtl::FindOrDieNoPrint<absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v10 = a1[3];
  uint64_t v11 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    uint64_t v12 = v9 & v10;
    uint64_t v13 = *(void *)(v7 + v12);
    unint64_t v14 = ((v13 ^ v11) - 0x101010101010101) & ~(v13 ^ v11) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_8:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_12;
    }
    v2 += 8;
    unint64_t v9 = v2 + v12;
  }
  while (1)
  {
    unint64_t v15 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v10;
    unint64_t v16 = (_DWORD *)(v8 + 12 * v15);
    if (*v16 == v3 && v16[1] == v4) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_8;
    }
  }
  if (v15 == v10)
  {
LABEL_12:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 200);
    int v19 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Map key not found", 17);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  return v16 + 2;
}

void sub_23CC08EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,int,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    uint64_t v13 = (int *)(a1[1] + 12 * v12);
    int v15 = *v13;
    int v14 = v13[1];
    if (v15 == v3 && v14 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  unint64_t v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v27 = a1[4];
    if (!v27) {
      return;
    }
LABEL_21:
    *((void *)v27 + 4) = v14 >> 3;
    *((void *)v27 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v20 = &v5[12 * (void)v13];
      unint64_t v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v20)))
          + *((unsigned int *)v20 + 1);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      uint64_t v23 = *a1;
      uint64_t v24 = a1[3];
      unint64_t v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v25 = (v15 + v25) & (unint64_t)v24;
          unint64_t v26 = *(void *)&v23[v25] & (~*(void *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      char v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = *(void *)v20;
      uint64_t v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v20 + 2);
      *(void *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v27 = a1[4];
  if (v27) {
    goto LABEL_21;
  }
}

void operations_research::sat::anonymous namespace'::ExpandIntProdWithBoolean(operations_research::sat::_anonymous_namespace_ *this, int a2, int a3, uint64_t a4, operations_research::sat::PresolveContext *a5)
{
  int v8 = (int)this;
  uint64_t v9 = *(void *)(a4 + 48);
  uint64_t v10 = *(int **)(v9 + 56);
  if (!v10)
  {
    int v12 = *(_DWORD *)(v9 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v9 + 40), v12 + 1);
    uint64_t v10 = *(int **)(v9 + 56);
    int v12 = *v10;
LABEL_8:
    *uint64_t v10 = v12 + 1;
    unint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v9 + 40));
    uint64_t v17 = *(void *)(v9 + 56);
    uint64_t v18 = *(int *)(v9 + 48);
    *(_DWORD *)(v9 + 48) = v18 + 1;
    *(void *)(v17 + 8 * v18 + 8) = v13;
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    unint64_t v14 = (unsigned int *)(v13 + 16);
    int v16 = v15 + 1;
    if (v15 != *(_DWORD *)(v13 + 20)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v11 = *(int *)(v9 + 48);
  int v12 = *v10;
  if ((int)v11 >= *v10)
  {
    if (v12 != *(_DWORD *)(v9 + 52)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(_DWORD *)(v9 + 48) = v11 + 1;
  unint64_t v13 = *(void *)&v10[2 * v11 + 2];
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  unint64_t v14 = (unsigned int *)(v13 + 16);
  int v16 = v15 + 1;
  if (v15 == *(_DWORD *)(v13 + 20)) {
LABEL_9:
  }
    google::protobuf::RepeatedField<int>::Reserve(v14, v16);
LABEL_10:
  *(_DWORD *)(*(void *)(v13 + 24) + 4 * v15) = v8;
  *(_DWORD *)(v13 + 16) = v16;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v19 = *(void *)(v13 + 48);
    uint64_t v21 = *(unsigned int *)(v19 + 16);
    uint64_t v20 = (unsigned int *)(v19 + 16);
    int v22 = v21 + 1;
    if (v21 != *(_DWORD *)(v19 + 20)) {
      goto LABEL_17;
    }
LABEL_16:
    google::protobuf::RepeatedField<int>::Reserve(v20, v22);
    goto LABEL_17;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v23 = *(void *)(v13 + 8);
  uint64_t v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
  if (v23) {
    uint64_t v24 = *(google::protobuf::Arena **)v24;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v24);
  uint64_t v19 = v25;
  *(void *)(v13 + 48) = v25;
  uint64_t v21 = *(unsigned int *)(v25 + 16);
  int v26 = *(_DWORD *)(v25 + 20);
  uint64_t v20 = (unsigned int *)(v25 + 16);
  int v22 = v21 + 1;
  if (v21 == v26) {
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(*(void *)(v19 + 24) + 4 * v21) = a2;
  *(_DWORD *)(v19 + 16) = v22;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v27 = *(void *)(v13 + 48);
    uint64_t v29 = *(unsigned int *)(v27 + 40);
    uint64_t v28 = (unsigned int *)(v27 + 40);
    int v30 = v29 + 1;
    if (v29 != *(_DWORD *)(v27 + 44)) {
      goto LABEL_24;
    }
LABEL_23:
    google::protobuf::RepeatedField<long long>::Reserve(v28, v30);
    goto LABEL_24;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v31 = *(void *)(v13 + 8);
  uint64_t v32 = (google::protobuf::Arena *)(v31 & 0xFFFFFFFFFFFFFFFELL);
  if (v31) {
    uint64_t v32 = *(google::protobuf::Arena **)v32;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v32);
  uint64_t v27 = v33;
  *(void *)(v13 + 48) = v33;
  uint64_t v29 = *(unsigned int *)(v33 + 40);
  int v34 = *(_DWORD *)(v33 + 44);
  uint64_t v28 = (unsigned int *)(v33 + 40);
  int v30 = v29 + 1;
  if (v29 == v34) {
    goto LABEL_23;
  }
LABEL_24:
  *(void *)(*(void *)(v27 + 48) + 8 * v29) = 1;
  *(_DWORD *)(v27 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v30;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v35 = *(void *)(v13 + 48);
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    uint64_t v36 = (unsigned int *)(v35 + 16);
    int v38 = v37 + 1;
    if (v37 != *(_DWORD *)(v35 + 20)) {
      goto LABEL_31;
    }
LABEL_30:
    google::protobuf::RepeatedField<int>::Reserve(v36, v38);
    goto LABEL_31;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v39 = *(void *)(v13 + 8);
  uint64_t v40 = (google::protobuf::Arena *)(v39 & 0xFFFFFFFFFFFFFFFELL);
  if (v39) {
    uint64_t v40 = *(google::protobuf::Arena **)v40;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v40);
  uint64_t v35 = v41;
  *(void *)(v13 + 48) = v41;
  uint64_t v37 = *(unsigned int *)(v41 + 16);
  int v42 = *(_DWORD *)(v41 + 20);
  uint64_t v36 = (unsigned int *)(v41 + 16);
  int v38 = v37 + 1;
  if (v37 == v42) {
    goto LABEL_30;
  }
LABEL_31:
  *(_DWORD *)(*(void *)(v35 + 24) + 4 * v37) = a3;
  *(_DWORD *)(v35 + 16) = v38;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v43 = *(void *)(v13 + 48);
    uint64_t v45 = *(unsigned int *)(v43 + 40);
    uint64_t v44 = (unsigned int *)(v43 + 40);
    int v46 = v45 + 1;
    if (v45 != *(_DWORD *)(v43 + 44)) {
      goto LABEL_38;
    }
LABEL_37:
    google::protobuf::RepeatedField<long long>::Reserve(v44, v46);
    goto LABEL_38;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v47 = *(void *)(v13 + 8);
  uint64_t v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
  if (v47) {
    uint64_t v48 = *(google::protobuf::Arena **)v48;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v48);
  uint64_t v43 = v49;
  *(void *)(v13 + 48) = v49;
  uint64_t v45 = *(unsigned int *)(v49 + 40);
  int v50 = *(_DWORD *)(v49 + 44);
  uint64_t v44 = (unsigned int *)(v49 + 40);
  int v46 = v45 + 1;
  if (v45 == v50) {
    goto LABEL_37;
  }
LABEL_38:
  *(void *)(*(void *)(v43 + 48) + 8 * v45) = -1;
  *(_DWORD *)(v43 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v46;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v51 = *(void *)(v13 + 48);
    uint64_t v53 = *(unsigned int *)(v51 + 64);
    uint64_t v52 = (unsigned int *)(v51 + 64);
    int v54 = v53 + 1;
    if (v53 != *(_DWORD *)(v51 + 68)) {
      goto LABEL_45;
    }
LABEL_44:
    google::protobuf::RepeatedField<long long>::Reserve(v52, v54);
    goto LABEL_45;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v55 = *(void *)(v13 + 8);
  uint64_t v56 = (google::protobuf::Arena *)(v55 & 0xFFFFFFFFFFFFFFFELL);
  if (v55) {
    uint64_t v56 = *(google::protobuf::Arena **)v56;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v56);
  uint64_t v51 = v57;
  *(void *)(v13 + 48) = v57;
  uint64_t v53 = *(unsigned int *)(v57 + 64);
  int v58 = *(_DWORD *)(v57 + 68);
  uint64_t v52 = (unsigned int *)(v57 + 64);
  int v54 = v53 + 1;
  if (v53 == v58) {
    goto LABEL_44;
  }
LABEL_45:
  *(void *)(*(void *)(v51 + 72) + 8 * v53) = 0;
  *(_DWORD *)(v51 + 64) = v54;
  if (*(_DWORD *)(v13 + 60) == 12)
  {
    uint64_t v59 = *(void *)(v13 + 48);
    uint64_t v61 = *(unsigned int *)(v59 + 64);
    uint64_t v60 = (unsigned int *)(v59 + 64);
    int v62 = v61 + 1;
    if (v61 != *(_DWORD *)(v59 + 68)) {
      goto LABEL_52;
    }
LABEL_51:
    google::protobuf::RepeatedField<long long>::Reserve(v60, v62);
    goto LABEL_52;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v13);
  *(_DWORD *)(v13 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v63 = *(void *)(v13 + 8);
  uint64_t v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
  if (v63) {
    uint64_t v64 = *(google::protobuf::Arena **)v64;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v64);
  uint64_t v59 = v65;
  *(void *)(v13 + 48) = v65;
  uint64_t v61 = *(unsigned int *)(v65 + 64);
  int v66 = *(_DWORD *)(v65 + 68);
  uint64_t v60 = (unsigned int *)(v65 + 64);
  int v62 = v61 + 1;
  if (v61 == v66) {
    goto LABEL_51;
  }
LABEL_52:
  *(void *)(*(void *)(v59 + 72) + 8 * v61) = 0;
  *(_DWORD *)(v59 + 64) = v62;
  uint64_t v67 = *(void *)(a4 + 48);
  uint64_t v68 = *(int **)(v67 + 56);
  if (!v68)
  {
    int v70 = *(_DWORD *)(v67 + 52);
LABEL_58:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v67 + 40), v70 + 1);
    uint64_t v68 = *(int **)(v67 + 56);
    int v70 = *v68;
LABEL_59:
    *uint64_t v68 = v70 + 1;
    unint64_t v71 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v67 + 40));
    uint64_t v76 = *(void *)(v67 + 56);
    uint64_t v77 = *(int *)(v67 + 48);
    *(_DWORD *)(v67 + 48) = v77 + 1;
    *(void *)(v76 + 8 * v77 + 8) = v71;
    int v72 = ~v8;
    uint64_t v74 = *(unsigned int *)(v71 + 16);
    int v73 = (unsigned int *)(v71 + 16);
    int v75 = v74 + 1;
    if (v74 != *(_DWORD *)(v71 + 20)) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v69 = *(int *)(v67 + 48);
  int v70 = *v68;
  if ((int)v69 >= *v68)
  {
    if (v70 != *(_DWORD *)(v67 + 52)) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  *(_DWORD *)(v67 + 48) = v69 + 1;
  unint64_t v71 = *(void *)&v68[2 * v69 + 2];
  int v72 = ~v8;
  uint64_t v74 = *(unsigned int *)(v71 + 16);
  int v73 = (unsigned int *)(v71 + 16);
  int v75 = v74 + 1;
  if (v74 == *(_DWORD *)(v71 + 20)) {
LABEL_60:
  }
    google::protobuf::RepeatedField<int>::Reserve(v73, v75);
LABEL_61:
  *(_DWORD *)(*(void *)(v71 + 24) + 4 * v74) = v72;
  *(_DWORD *)(v71 + 16) = v75;
  if (*(_DWORD *)(v71 + 60) == 12)
  {
    uint64_t v78 = *(void *)(v71 + 48);
    uint64_t v80 = *(unsigned int *)(v78 + 16);
    unint64_t v79 = (unsigned int *)(v78 + 16);
    int v81 = v80 + 1;
    if (v80 != *(_DWORD *)(v78 + 20)) {
      goto LABEL_68;
    }
LABEL_67:
    google::protobuf::RepeatedField<int>::Reserve(v79, v81);
    goto LABEL_68;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v71);
  *(_DWORD *)(v71 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v82 = *(void *)(v71 + 8);
  uint64_t v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
  if (v82) {
    uint64_t v83 = *(google::protobuf::Arena **)v83;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v83);
  uint64_t v78 = v84;
  *(void *)(v71 + 48) = v84;
  uint64_t v80 = *(unsigned int *)(v84 + 16);
  int v85 = *(_DWORD *)(v84 + 20);
  unint64_t v79 = (unsigned int *)(v84 + 16);
  int v81 = v80 + 1;
  if (v80 == v85) {
    goto LABEL_67;
  }
LABEL_68:
  *(_DWORD *)(*(void *)(v78 + 24) + 4 * v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a3;
  *(_DWORD *)(v78 + 16) = v81;
  if (*(_DWORD *)(v71 + 60) == 12)
  {
    uint64_t v86 = *(void *)(v71 + 48);
    uint64_t v88 = *(unsigned int *)(v86 + 40);
    uint64_t v87 = (unsigned int *)(v86 + 40);
    int v89 = v88 + 1;
    if (v88 != *(_DWORD *)(v86 + 44)) {
      goto LABEL_75;
    }
LABEL_74:
    google::protobuf::RepeatedField<long long>::Reserve(v87, v89);
    goto LABEL_75;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v71);
  *(_DWORD *)(v71 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v90 = *(void *)(v71 + 8);
  uint64_t v91 = (google::protobuf::Arena *)(v90 & 0xFFFFFFFFFFFFFFFELL);
  if (v90) {
    uint64_t v91 = *(google::protobuf::Arena **)v91;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v91);
  uint64_t v86 = v92;
  *(void *)(v71 + 48) = v92;
  uint64_t v88 = *(unsigned int *)(v92 + 40);
  int v93 = *(_DWORD *)(v92 + 44);
  uint64_t v87 = (unsigned int *)(v92 + 40);
  int v89 = v88 + 1;
  if (v88 == v93) {
    goto LABEL_74;
  }
LABEL_75:
  *(void *)(*(void *)(v86 + 48) + 8 * v88) = 1;
  *(_DWORD *)(v86 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v89;
  if (*(_DWORD *)(v71 + 60) == 12)
  {
    uint64_t v94 = *(void *)(v71 + 48);
    uint64_t v96 = *(unsigned int *)(v94 + 64);
    uint64_t v95 = (unsigned int *)(v94 + 64);
    int v97 = v96 + 1;
    if (v96 != *(_DWORD *)(v94 + 68)) {
      goto LABEL_82;
    }
LABEL_81:
    google::protobuf::RepeatedField<long long>::Reserve(v95, v97);
    goto LABEL_82;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v71);
  *(_DWORD *)(v71 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v98 = *(void *)(v71 + 8);
  uint64_t v99 = (google::protobuf::Arena *)(v98 & 0xFFFFFFFFFFFFFFFELL);
  if (v98) {
    uint64_t v99 = *(google::protobuf::Arena **)v99;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v99);
  uint64_t v94 = v100;
  *(void *)(v71 + 48) = v100;
  uint64_t v96 = *(unsigned int *)(v100 + 64);
  int v101 = *(_DWORD *)(v100 + 68);
  uint64_t v95 = (unsigned int *)(v100 + 64);
  int v97 = v96 + 1;
  if (v96 == v101) {
    goto LABEL_81;
  }
LABEL_82:
  *(void *)(*(void *)(v94 + 72) + 8 * v96) = 0;
  *(_DWORD *)(v94 + 64) = v97;
  if (*(_DWORD *)(v71 + 60) == 12)
  {
    uint64_t v102 = *(void *)(v71 + 48);
    uint64_t v104 = *(unsigned int *)(v102 + 64);
    uint64_t v103 = (unsigned int *)(v102 + 64);
    int v105 = v104 + 1;
    if (v104 != *(_DWORD *)(v102 + 68)) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v71);
  *(_DWORD *)(v71 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
  uint64_t v106 = *(void *)(v71 + 8);
  uint64_t v107 = (google::protobuf::Arena *)(v106 & 0xFFFFFFFFFFFFFFFELL);
  if (v106) {
    uint64_t v107 = *(google::protobuf::Arena **)v107;
  }
  google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v107);
  uint64_t v102 = v108;
  *(void *)(v71 + 48) = v108;
  uint64_t v104 = *(unsigned int *)(v108 + 64);
  int v109 = *(_DWORD *)(v108 + 68);
  uint64_t v103 = (unsigned int *)(v108 + 64);
  int v105 = v104 + 1;
  if (v104 == v109) {
LABEL_88:
  }
    google::protobuf::RepeatedField<long long>::Reserve(v103, v105);
LABEL_89:
  *(void *)(*(void *)(v102 + 72) + 8 * v104) = 0;
  *(_DWORD *)(v102 + 64) = v105;
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v4 + v9);
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(void *)(v5 + 16 * v12) == *a2) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    unint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)v16);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  return v5 + 16 * v12 + 8;
}

void sub_23CC09BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v4 + v9);
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(void *)(v5 + 16 * v12) == *a2) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    unint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)v16);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  return v5 + 16 * v12 + 8;
}

void sub_23CC09D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::BoolArgumentProto *,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::BoolArgumentProto *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::BoolArgumentProto *>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      uint64_t v20 = *a1;
      uint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t operations_research::sat::anonymous namespace'::ExpandInverse(operations_research::sat::ConstraintProto *,operations_research::sat::PresolveContext *)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 8) < 1) {
    return 1;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  while (1)
  {
    *(void *)(*(void *)(v5 + 16) + 8) = **(void **)(v5 + 16);
    operations_research::sat::PresolveContext::DomainOf(*(operations_research::sat::PresolveContext **)v5, (const char *)*(unsigned int *)(*(void *)(v4 + 8) + 4 * v6), &v56);
    unint64_t v7 = (v56 & 1) != 0 ? v57 : &v57;
    if (v56 >= 2) {
      break;
    }
LABEL_51:
    if (v56) {
      operator delete(v57);
    }
    if (++v6 >= *(int *)(v5 + 8)) {
      return 1;
    }
  }
  int v8 = 0;
  uint64_t v47 = &v7[2 * (v56 >> 1)];
  do
  {
    uint64_t v9 = *v7;
    uint64_t v49 = v7;
    if (*v7 <= v7[1])
    {
      while (1)
      {
        while (1)
        {
          operations_research::sat::PresolveContext::DomainOf(*(operations_research::sat::PresolveContext **)v5, (const char *)*(unsigned int *)(*(void *)(v3 + 8) + 4 * (int)v9), &v54);
          BOOL v11 = operations_research::Domain::Contains((operations_research::Domain *)&v54, v6);
          if (v54) {
            operator delete(__p);
          }
          if (v11) {
            break;
          }
          int v8 = 1;
          BOOL v10 = v9++ < v7[1];
          if (!v10) {
            goto LABEL_9;
          }
        }
        uint64_t v12 = *(void *)(v5 + 16);
        unint64_t v14 = *(char **)(v12 + 8);
        unint64_t v13 = *(void *)(v12 + 16);
        if ((unint64_t)v14 >= v13) {
          break;
        }
        *(void *)unint64_t v14 = v9;
        uint64_t v15 = (uint64_t)(v14 + 8);
LABEL_40:
        *(void *)(v12 + 8) = v15;
        BOOL v10 = v9++ < v7[1];
        if (!v10) {
          goto LABEL_9;
        }
      }
      int v50 = v8;
      uint64_t v16 = v5;
      uint64_t v17 = v6;
      uint64_t v18 = *(char **)v12;
      uint64_t v19 = (uint64_t)&v14[-*(void *)v12];
      uint64_t v20 = v19 >> 3;
      unint64_t v21 = (v19 >> 3) + 1;
      if (v21 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v13 - (void)v18;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v24 = operator new(8 * v23);
        uint64_t v25 = &v24[8 * v20];
        *uint64_t v25 = v9;
        uint64_t v15 = (uint64_t)(v25 + 1);
        if (v14 != v18) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (void *)(8 * v20);
        *(void *)(8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v9;
        uint64_t v15 = 8 * v20 + 8;
        if (v14 != v18)
        {
LABEL_28:
          unint64_t v26 = v14 - 8 - v18;
          if (v26 >= 0x58)
          {
            unint64_t v27 = v14 - &v24[v19];
            uint64_t v6 = v17;
            uint64_t v5 = v16;
            if (v27 >= 0x20)
            {
              uint64_t v28 = (v26 >> 3) + 1;
              uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
              int v30 = &v14[-v29];
              uint64_t v25 = (void *)((char *)v25 - v29);
              uint64_t v31 = &v24[8 * v20 - 16];
              uint64_t v32 = v14 - 16;
              uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v34 = *(_OWORD *)v32;
                *(v31 - 1) = *((_OWORD *)v32 - 1);
                *uint64_t v31 = v34;
                v31 -= 2;
                v32 -= 32;
                v33 -= 4;
              }
              while (v33);
              unint64_t v14 = v30;
              if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_37;
              }
            }
          }
          else
          {
            uint64_t v6 = v17;
            uint64_t v5 = v16;
          }
          do
          {
            uint64_t v35 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v25 = v35;
          }
          while (v14 != v18);
LABEL_37:
          *(void *)uint64_t v12 = v25;
          *(void *)(v12 + 8) = v15;
          *(void *)(v12 + 16) = &v24[8 * v23];
          if (v18) {
            operator delete(v18);
          }
          uint64_t v3 = a3;
          unint64_t v7 = v49;
          int v8 = v50;
          goto LABEL_40;
        }
      }
      uint64_t v6 = v17;
      uint64_t v5 = v16;
      goto LABEL_37;
    }
LABEL_9:
    v7 += 2;
  }
  while (v7 != v47);
  uint64_t v4 = a2;
  if ((v8 & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v36 = *(operations_research::sat::PresolveContext **)v5;
  uint64_t v37 = (const char *)*(unsigned int *)(*(void *)(a2 + 8) + 4 * v6);
  uint64_t v38 = *(void *)(v5 + 16);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  uint64_t v40 = *(unsigned char **)v38;
  uint64_t v39 = *(unsigned char **)(v38 + 8);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v51 = operator new(v39 - v40);
    uint64_t v52 = v51;
    int v42 = (char *)v51 + 8 * (v41 >> 3);
    uint64_t v53 = v42;
    memcpy(v51, v40, v41);
    uint64_t v52 = v42;
  }
  operations_research::Domain::FromValues((int64_t **)&v51, &v54);
  char v43 = operations_research::sat::PresolveContext::IntersectDomainWith(v36, v37, (const operations_research::Domain *)&v54, 0);
  if (v54) {
    operator delete(__p);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v43) {
    goto LABEL_51;
  }
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v54, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 391);
    uint64_t v45 = (void *)google::LogMessage::stream((google::LogMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Empty domain for a variable in ExpandInverse()", 46);
    google::LogMessage::~LogMessage((google::LogMessage *)&v54);
  }
  if (v56) {
    operator delete(v57);
  }
  return 0;
}

void sub_23CC0A56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *__p)
{
  if (a22) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(void *)uint64_t v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((void *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23CC0A6A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        uint64_t v6 = *(v4 - 2);
        if (v6) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        }
        v4 -= 6;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::LinkLiteralsAndValues(uint64_t *a1, uint64_t *a2, uint64_t *a3, operations_research::sat::PresolveContext *a4)
{
  uint64_t v74 = (uint64_t **)((a1[1] - *a1) >> 2);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v77 = (v5 - *a2) >> 3;
  if (v74 != (uint64_t **)v77) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v74, (int)&v77, "value_literals.size() == values.size()");
  }
  int v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = &v75;
  if (v5 == v6) {
    goto LABEL_76;
  }
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = 0;
    uint64_t v77 = 0;
    uint64_t v9 = *(void *)(v6 + 8 * v7);
    uint64_t v77 = v9;
    unint64_t v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v9)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v9));
    unint64_t v11 = (v10 >> 7) ^ ((unint64_t)*a3 >> 12);
    uint64_t v12 = a3[3];
    uint64_t v13 = 0x101010101010101 * (v10 & 0x7F);
    while (1)
    {
      unint64_t v14 = v11 & v12;
      uint64_t v15 = *(void *)(*a3 + v14);
      unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
      if (v16) {
        break;
      }
LABEL_8:
      if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_45;
      }
      v8 += 8;
      unint64_t v11 = v8 + v14;
    }
    while (1)
    {
      unint64_t v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
      if (*(void *)(a3[1] + 16 * v17) == v9) {
        break;
      }
      v16 &= v16 - 1;
      if (!v16) {
        goto LABEL_8;
      }
    }
    if (v17 == v12)
    {
LABEL_45:
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v73, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_expand.cc", 641);
      int v46 = (void *)google::LogMessage::stream((google::LogMessage *)v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: target_encoding.contains(v) ", 42);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v73);
    }
    int v18 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>>(a3, &v77);
    uint64_t v19 = v75;
    uint64_t v20 = &v75;
LABEL_13:
    unint64_t v21 = v20;
    if (v19)
    {
      while (1)
      {
        uint64_t v20 = (uint64_t **)v19;
        int v22 = *((_DWORD *)v19 + 8);
        if (v18 < v22)
        {
          uint64_t v19 = *v20;
          goto LABEL_13;
        }
        if (v22 >= v18) {
          break;
        }
        uint64_t v19 = v20[1];
        if (!v19)
        {
          unint64_t v21 = v20 + 1;
          goto LABEL_18;
        }
      }
      unint64_t v23 = v20;
      uint64_t v25 = *a1;
      unint64_t v27 = (char *)v23[6];
      unint64_t v26 = v23[7];
      if ((unint64_t)v27 < v26)
      {
LABEL_21:
        *(_DWORD *)unint64_t v27 = *(_DWORD *)(v25 + 4 * v7);
        uint64_t v28 = (uint64_t)(v27 + 4);
        goto LABEL_42;
      }
    }
    else
    {
LABEL_18:
      unint64_t v23 = operator new(0x40uLL);
      *((_DWORD *)v23 + 8) = v18;
      v23[6] = 0;
      v23[7] = 0;
      v23[5] = 0;
      *unint64_t v23 = 0;
      v23[1] = 0;
      v23[2] = v20;
      char *v21 = v23;
      uint64_t v24 = v23;
      if (*v74)
      {
        uint64_t v74 = (uint64_t **)*v74;
        uint64_t v24 = *v21;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v75, v24);
      ++v76;
      uint64_t v25 = *a1;
      unint64_t v27 = (char *)v23[6];
      unint64_t v26 = v23[7];
      if ((unint64_t)v27 < v26) {
        goto LABEL_21;
      }
    }
    uint64_t v29 = (char *)v23[5];
    uint64_t v30 = (v27 - v29) >> 2;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v26 - (void)v29;
    if (v32 >> 1 > v31) {
      unint64_t v31 = v32 >> 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v34 = operator new(4 * v33);
      uint64_t v35 = &v34[4 * v30];
      _DWORD *v35 = *(_DWORD *)(v25 + 4 * v7);
      uint64_t v28 = (uint64_t)(v35 + 1);
      if (v27 == v29) {
        goto LABEL_40;
      }
LABEL_34:
      unint64_t v36 = v27 - 4 - v29;
      if (v36 < 0x2C) {
        goto LABEL_82;
      }
      if ((unint64_t)(v29 - v34) < 0x20) {
        goto LABEL_82;
      }
      uint64_t v37 = (v36 >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v39 = &v27[-v38];
      uint64_t v35 = (_DWORD *)((char *)v35 - v38);
      uint64_t v40 = &v34[4 * v30 - 16];
      int64_t v41 = v27 - 16;
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *uint64_t v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      unint64_t v27 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_82:
        do
        {
          int v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--uint64_t v35 = v44;
        }
        while (v27 != v29);
      }
      goto LABEL_40;
    }
    long long v34 = 0;
    uint64_t v35 = (_DWORD *)(4 * v30);
    *(_DWORD *)(4 * v3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *(_DWORD *)(v25 + 4 * v7);
    uint64_t v28 = 4 * v30 + 4;
    if (v27 != v29) {
      goto LABEL_34;
    }
LABEL_40:
    v23[5] = v35;
    v23[6] = v28;
    v23[7] = &v34[4 * v33];
    if (v29) {
      operator delete(v29);
    }
LABEL_42:
    v23[6] = v28;
    ++v7;
    uint64_t v6 = *a2;
  }
  while (v7 < (a2[1] - *a2) >> 3);
  uint64_t v45 = v74;
  if (v74 != &v75)
  {
    while (1)
    {
      int v47 = *((_DWORD *)v45 + 8);
      uint64_t v48 = (char *)v45[5];
      uint64_t v49 = ((char *)v45[6] - v48) >> 2;
      if (v49 != 1) {
        break;
      }
      operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)a4, (const char *)*((unsigned int *)v45 + 8), (const char *)*(unsigned int *)v48);
LABEL_52:
      int v50 = v45[1];
      if (v50)
      {
        do
        {
          uint64_t v51 = (uint64_t **)v50;
          int v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          uint64_t v51 = (uint64_t **)v45[2];
          BOOL v52 = *v51 == (uint64_t *)v45;
          uint64_t v45 = v51;
        }
        while (!v52);
      }
      uint64_t v45 = v51;
      if (v51 == &v75) {
        goto LABEL_76;
      }
    }
    if (!v49)
    {
      if ((operations_research::sat::PresolveContext::SetLiteralToFalse(a4, *((_DWORD *)v45 + 8)) & 1) == 0) {
        goto LABEL_76;
      }
      goto LABEL_52;
    }
    uint64_t v53 = *((void *)a4 + 6);
    unint64_t v54 = *(int **)(v53 + 56);
    if (v54)
    {
      uint64_t v55 = *(int *)(v53 + 48);
      int v56 = *v54;
      if ((int)v55 < *v54)
      {
        *(_DWORD *)(v53 + 48) = v55 + 1;
        unint64_t v57 = *(void *)&v54[2 * v55 + 2];
        if (*(_DWORD *)(v57 + 60) != 3) {
          goto LABEL_61;
        }
LABEL_69:
        unint64_t v60 = *(void *)(v57 + 48);
        uint64_t v61 = *(unsigned int *)(v60 + 16);
        int v62 = (unsigned int *)(v60 + 16);
        int v63 = v61 + 1;
        if (v61 == *(_DWORD *)(v60 + 20)) {
          goto LABEL_70;
        }
        goto LABEL_71;
      }
      if (v56 == *(_DWORD *)(v53 + 52))
      {
LABEL_67:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v53 + 40), v56 + 1);
        unint64_t v54 = *(int **)(v53 + 56);
        int v56 = *v54;
      }
      *unint64_t v54 = v56 + 1;
      unint64_t v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v53 + 40));
      uint64_t v64 = *(void *)(v53 + 56);
      uint64_t v65 = *(int *)(v53 + 48);
      *(_DWORD *)(v53 + 48) = v65 + 1;
      *(void *)(v64 + 8 * v65 + 8) = v57;
      if (*(_DWORD *)(v57 + 60) == 3) {
        goto LABEL_69;
      }
LABEL_61:
      operations_research::sat::ConstraintProto::clear_constraint(v57);
      *(_DWORD *)(v57 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
      uint64_t v58 = *(void *)(v57 + 8);
      uint64_t v59 = (google::protobuf::Arena *)(v58 & 0xFFFFFFFFFFFFFFFELL);
      if (v58) {
        uint64_t v59 = *(google::protobuf::Arena **)v59;
      }
      unint64_t v60 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v59);
      *(void *)(v57 + 48) = v60;
      uint64_t v61 = *(unsigned int *)(v60 + 16);
      int v62 = (unsigned int *)(v60 + 16);
      int v63 = v61 + 1;
      if (v61 == *(_DWORD *)(v60 + 20)) {
LABEL_70:
      }
        google::protobuf::RepeatedField<int>::Reserve(v62, v63);
LABEL_71:
      *(_DWORD *)(*(void *)(v60 + 24) + 4 * v61) = ~v47;
      *(_DWORD *)(v60 + 16) = v63;
      int v66 = (int *)v45[5];
      for (unint64_t i = (int *)v45[6]; v66 != i; ++v66)
      {
        int v68 = *v66;
        uint64_t v69 = *(unsigned int *)(v60 + 16);
        if (v69 == *(_DWORD *)(v60 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve(v62, v69 + 1);
        }
        *(_DWORD *)(*(void *)(v60 + 24) + 4 * v69) = v68;
        *(_DWORD *)(v60 + 16) = v69 + 1;
        operations_research::sat::PresolveContext::AddImplication(a4, v68, v47);
      }
      goto LABEL_52;
    }
    int v56 = *(_DWORD *)(v53 + 52);
    goto LABEL_67;
  }
LABEL_76:
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v74, v75);
}

void sub_23CC0AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC0AD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_23CC0AD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_23CC0AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_23CC0ADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_23CC0ADC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_23CC0ADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC0ADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void **std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 3))
        {
          operator delete(*(v3 - 6));
          *(v3 - 1) = 0;
          *(v3 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v3 - 5) = 0;
          *(v3 - 4) = 0;
          *(v3 - 3) = 0;
        }
        uint64_t v5 = *(v3 - 2);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
        v3 -= 6;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::raw_hash_set<long long const*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v7 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  if (a4)
  {
    unint64_t v8 = __clz(a4);
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> v8;
    if (v8 == 61) {
      unint64_t v10 = 6;
    }
    else {
      unint64_t v10 = (0xFFFFFFFFFFFFFFFFLL >> v8) - (0x1FFFFFFFFFFFFFFFuLL >> v8);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v10;
    *(void *)(a1 + 24) = v9;
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v12 = (char *)operator new(v11 + 8 * v9);
    uint64_t v13 = &v12[v11];
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = &v12[v11];
    memset(v12, 128, v9 + 8);
    v12[v9] = -1;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v10;
    if (v5 == a3) {
      return a1;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (a2 == a3) {
      return a1;
    }
  }
  do
  {
    uint64_t v17 = 0;
    unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v5)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *v5));
    unint64_t v18 = (v20 >> 7) ^ (*(void *)a1 >> 12);
    uint64_t v21 = *(void *)(a1 + 24);
    while (1)
    {
      unint64_t v14 = v18 & v21;
      uint64_t v15 = *(void *)(*(void *)a1 + v14);
      unint64_t v16 = ((v15 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                          * (v20 & 0x7F))) & 0x8080808080808080;
      if (v16) {
        break;
      }
LABEL_12:
      if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v19 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)a1, v20);
        uint64_t v13 = *v7;
        *(void *)&(*v7)[8 * v19] = *v5;
        goto LABEL_15;
      }
      v17 += 8;
      unint64_t v18 = v17 + v14;
    }
    while (*(void *)&v13[8 * ((v14 + (__clz(__rbit64(v16)) >> 3)) & v21)] != *v5)
    {
      v16 &= v16 - 1;
      if (!v16) {
        goto LABEL_12;
      }
    }
LABEL_15:
    ++v5;
  }
  while (v5 != a3);
  return a1;
}

void sub_23CC0B060(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0B074(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void *std::vector<std::vector<long long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23CC0B190(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::vector<int>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<long long const>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t operations_research::sat::ConstraintProto::mutable_at_most_one(operations_research::sat::ConstraintProto *this)
{
  if (*((_DWORD *)this + 15) == 26) {
    return *((void *)this + 6);
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 26;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (v3) {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  }
  else {
    unint64_t result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  }
  *((void *)this + 6) = result;
  return result;
}

void *std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(void *a1, void *a2, uint64_t *a3, void *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    unint64_t v7 = a2;
    unint64_t v8 = 0;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = v8;
      int v11 = *((char *)v9 + 1);
      unint64_t v9 = (void *)((char *)v9 + 1);
      if (v11 <= -2)
      {
        do
          unint64_t v9 = (void *)((char *)v9 + ((__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
        while (*(char *)v9 < -1);
      }
      ++v8;
    }
    while (v9 != a4);
    if (v10 >= 0x1FFFFFFFFFFFFFFFLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = operator new(8 * v8);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v8];
    do
    {
      uint64_t v13 = *a3++;
      *uint64_t v12 = v13;
      LODWORD(v13) = *((char *)v7 + 1);
      unint64_t v7 = (void *)((char *)v7 + 1);
      if ((int)v13 <= -2)
      {
        do
        {
          unint64_t v14 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v7 = (void *)((char *)v7 + v14);
          a3 += v14;
        }
        while (*(char *)v7 < -1);
      }
      ++v12;
    }
    while (v7 != a4);
    a1[1] = v12;
  }
  return a1;
}

void sub_23CC0B3C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::AddSizeTwoTable(std::vector<int> const&,std::vector<std::vector<long long>> const&,std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>> const&,operations_research::sat::PresolveContext *)::$_0::operator()(uint64_t a1, int a2, int **a3, int a4)
{
  uint64_t v5 = (char *)a3[1] - (char *)*a3;
  if (a4 == v5 >> 2) {
    return;
  }
  unint64_t v8 = *(operations_research::sat::PresolveContext **)a1;
  if (v5 == 4)
  {
    operations_research::sat::PresolveContext::AddImplication(v8, a2, **a3);
    unint64_t v9 = (_DWORD **)(a1 + 24);
LABEL_27:
    ++**v9;
    return;
  }
  uint64_t v11 = *((void *)v8 + 6);
  uint64_t v12 = *(int **)(v11 + 56);
  if (!v12)
  {
    int v14 = *(_DWORD *)(v11 + 52);
LABEL_16:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 40), v14 + 1);
    uint64_t v12 = *(int **)(v11 + 56);
    int v14 = *v12;
    goto LABEL_17;
  }
  uint64_t v13 = *(int *)(v11 + 48);
  int v14 = *v12;
  if ((int)v13 < *v12)
  {
    *(_DWORD *)(v11 + 48) = v13 + 1;
    unint64_t v15 = *(void *)&v12[2 * v13 + 2];
    int v28 = a2;
    if (*(_DWORD *)(v15 + 60) != 3) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
  if (v14 == *(_DWORD *)(v11 + 52)) {
    goto LABEL_16;
  }
LABEL_17:
  *uint64_t v12 = v14 + 1;
  unint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v11 + 40));
  uint64_t v25 = *(void *)(v11 + 56);
  uint64_t v26 = *(int *)(v11 + 48);
  *(_DWORD *)(v11 + 48) = v26 + 1;
  *(void *)(v25 + 8 * v26 + 8) = v15;
  int v28 = a2;
  if (*(_DWORD *)(v15 + 60) != 3)
  {
LABEL_7:
    operations_research::sat::ConstraintProto::clear_constraint(v15);
    *(_DWORD *)(v15 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 3;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v17 = (google::protobuf::Arena *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if (v16) {
      uint64_t v17 = *(google::protobuf::Arena **)v17;
    }
    unint64_t v18 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v17);
    *(void *)(v15 + 48) = v18;
    unint64_t v19 = *a3;
    unint64_t v20 = a3[1];
    uint64_t v21 = (unsigned int *)(v18 + 16);
    if (*a3 != v20) {
      goto LABEL_10;
    }
LABEL_19:
    unsigned int v24 = *v21;
    goto LABEL_20;
  }
LABEL_18:
  unint64_t v18 = *(void *)(v15 + 48);
  unint64_t v19 = *a3;
  unint64_t v20 = a3[1];
  uint64_t v21 = (unsigned int *)(v18 + 16);
  if (*a3 == v20) {
    goto LABEL_19;
  }
LABEL_10:
  unsigned int v22 = *(_DWORD *)(v18 + 16);
  do
  {
    int v23 = *v19;
    unsigned int v24 = v22 + 1;
    if (v22 == *(_DWORD *)(v18 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve(v21, v22 + 1);
    }
    *(_DWORD *)(*(void *)(v18 + 24) + 4 * v22) = v23;
    *(_DWORD *)(v18 + 16) = v24;
    ++v19;
    ++v22;
  }
  while (v19 != v20);
LABEL_20:
  if (v24 == *(_DWORD *)(v18 + 20)) {
    google::protobuf::RepeatedField<int>::Reserve(v21, v24 + 1);
  }
  *(_DWORD *)(*(void *)(v18 + 24) + 4 * v24) = ~v28;
  *(_DWORD *)(v18 + 16) = v24 + 1;
  ++**(_DWORD **)(a1 + 8);
  if (a4 >= 0) {
    int v27 = a4;
  }
  else {
    int v27 = a4 + 1;
  }
  if ((uint64_t)v27 >> 1 < (unint64_t)(a3[1] - *a3))
  {
    unint64_t v9 = (_DWORD **)(a1 + 16);
    goto LABEL_27;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)a2, 8 * v4);
  uint64_t v6 = 0;
  unint64_t v7 = ((((unint64_t)v5 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((void)v5 + v4));
  uint64_t v8 = *a1;
  unint64_t v9 = (v7 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v10 = a1[3];
  uint64_t v11 = 0x101010101010101 * (v7 & 0x7F);
  uint64_t v12 = *(absl::lts_2020_02_25::hash_internal **)a2;
  size_t v13 = 8 * *(void *)(a2 + 8);
  while (1)
  {
    unint64_t v14 = v9 & v10;
    uint64_t v15 = *(void *)(v8 + (v9 & v10));
    unint64_t v16 = ((v15 ^ v11) - 0x101010101010101) & ~(v15 ^ v11) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_7:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert(a1, v7);
    }
    v6 += 8;
    unint64_t v9 = v6 + v14;
  }
  uint64_t v17 = a1[1];
  uint64_t v22 = v11;
  uint64_t v23 = v6;
  uint64_t v21 = v17;
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v10;
    unint64_t v19 = v17 + 16 * v18;
    if (v13 == 8 * *(void *)(v19 + 8) && !memcmp(*(const void **)v19, v12, v13)) {
      return v18;
    }
    v16 &= v16 - 1;
    uint64_t v11 = v22;
    uint64_t v6 = v23;
    uint64_t v17 = v21;
    if (!v16) {
      goto LABEL_7;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v26 = a1[4];
    if (!v26) {
      return;
    }
LABEL_21:
    *((void *)v26 + 4) = v14 >> 3;
    *((void *)v26 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[16 * (void)v13];
      uint64_t v19 = *((void *)v18 + 1);
      unint64_t v20 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v18, 8 * v19);
      unint64_t v21 = ((((unint64_t)v20 + v19) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((void)v20 + v19));
      uint64_t v22 = *a1;
      uint64_t v23 = a1[3];
      unint64_t v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v24 = (v15 + v24) & (unint64_t)v23;
          unint64_t v25 = *(void *)&v22[v24] & (~*(void *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      unint64_t v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      char v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v26 = a1[4];
  if (v26) {
    goto LABEL_21;
  }
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  unint64_t v1 = result;
  unint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *((void *)result + 3);
  uint64_t v4 = *(void *)result + v3;
  if (v4 + 1 != *(void *)result)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)result;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      int8x16_t *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  if (!*((void *)result + 3))
  {
    unint64_t v15 = 0;
    *((void *)result + 5) = -*((void *)result + 2);
    uint64_t v32 = *((void *)result + 4);
    if (!v32) {
      return result;
    }
LABEL_26:
    *(void *)(v32 + 32) = v15 >> 3;
    *(void *)(v32 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)v1 + v14) == 254)
    {
      uint64_t v20 = *((void *)v1 + 1) + 16 * v14;
      uint64_t v21 = *(void *)(v20 + 8);
      unint64_t result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v20, 8 * v21);
      unint64_t v22 = ((((unint64_t)result + v21) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((void)result + v21));
      uint64_t v23 = *(void *)v1;
      uint64_t v24 = *((void *)v1 + 3);
      unint64_t v25 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
      unint64_t v26 = *(void *)(*(void *)v1 + v25) & (~*(void *)(*(void *)v1 + v25) << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v24;
          unint64_t v26 = *(void *)(v23 + v17) & (~*(void *)(v23 + v17) << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v26)) >> 3)) & v24;
      v15 += v16;
      if ((((v18 - v25) ^ (v14 - v25)) & v24) > 7)
      {
        int v27 = *(unsigned __int8 *)(v23 + v18);
        char v28 = v22 & 0x7F;
        *(unsigned char *)(v23 + v18) = v28;
        *(unsigned char *)((*((void *)v1 + 3) & (v18 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v28;
        uint64_t v29 = *((void *)v1 + 1);
        if (v27 == 128)
        {
          *(_OWORD *)(v29 + 16 * v18) = *(_OWORD *)(v29 + 16 * v14);
          *(unsigned char *)(*(void *)v1 + v14) = 0x80;
          *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = 0x80;
        }
        else
        {
          long long v30 = *(_OWORD *)(v29 + 16 * v14);
          *(_OWORD *)(v29 + 16 * v14) = *(_OWORD *)(v29 + 16 * v18);
          *(_OWORD *)(*((void *)v1 + 1) + 16 * v18) = v30;
          --v14;
        }
      }
      else
      {
        char v19 = v22 & 0x7F;
        *(unsigned char *)(v23 + v14) = v19;
        *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v19;
      }
    }
    ++v14;
  }
  while (v14 != *((void *)v1 + 3));
  uint64_t v31 = v14 - (v14 >> 3);
  if (v14 == 7) {
    uint64_t v31 = 6;
  }
  *((void *)v1 + 5) = v31 - *((void *)v1 + 2);
  uint64_t v32 = *((void *)v1 + 4);
  if (v32) {
    goto LABEL_26;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 2;
  uint64_t v67 = a2 - 6;
  int v68 = a2 - 4;
  unint64_t v12 = v10;
  uint64_t v69 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (uint64_t)a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *(a2 - 2);
          uint64_t v28 = *(void *)v10;
          if (v27 >= *(void *)v10)
          {
            if (v28 < v27) {
              return result;
            }
            int v30 = *((_DWORD *)a2 - 2);
            int v29 = *(_DWORD *)(v10 + 8);
            if (v30 >= v29) {
              return result;
            }
          }
          else
          {
            int v29 = *(_DWORD *)(v10 + 8);
            int v30 = *((_DWORD *)a2 - 2);
          }
          *(void *)uint64_t v10 = v27;
          *(a2 - 2) = v28;
          *(_DWORD *)(v10 + 8) = v30;
          *((_DWORD *)a2 - 2) = v29;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, (uint64_t *)(v10 + 16), v11);
        case 4uLL:
          unint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, (uint64_t *)(v10 + 16), (uint64_t *)(v10 + 32));
          uint64_t v31 = *(a2 - 2);
          uint64_t v32 = *(void *)(v10 + 32);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              return result;
            }
            int v34 = *((_DWORD *)a2 - 2);
            int v33 = *(_DWORD *)(v10 + 40);
            if (v34 >= v33) {
              return result;
            }
          }
          else
          {
            int v33 = *(_DWORD *)(v10 + 40);
            int v34 = *((_DWORD *)a2 - 2);
          }
          *(void *)(v10 + 32) = v31;
          *(a2 - 2) = v32;
          *(_DWORD *)(v10 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v34;
          *((_DWORD *)a2 - 2) = v33;
          uint64_t v35 = *(void *)(v10 + 32);
          uint64_t v36 = *(void *)(v10 + 16);
          if (v35 >= v36)
          {
            if (v36 < v35) {
              return result;
            }
            int v38 = *(_DWORD *)(v10 + 40);
            int v37 = *(_DWORD *)(v10 + 24);
            if (v38 >= v37) {
              return result;
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 24);
            int v38 = *(_DWORD *)(v10 + 40);
          }
          *(void *)(v10 + 16) = v35;
          *(void *)(v10 + 32) = v36;
          *(_DWORD *)(v10 + 24) = v38;
          *(_DWORD *)(v10 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v37;
          uint64_t v39 = *(void *)v10;
          if (v35 >= *(void *)v10)
          {
            if (v39 < v35) {
              return result;
            }
            int v40 = *(_DWORD *)(v10 + 8);
            if (v38 >= v40) {
              return result;
            }
          }
          else
          {
            int v40 = *(_DWORD *)(v10 + 8);
          }
          *(void *)uint64_t v10 = v35;
          *(void *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 8) = v38;
          *(_DWORD *)(v10 + 24) = v40;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if ((uint64_t *)v10 != a2)
      {
        unint64_t v56 = (v15 - 2) >> 1;
        unint64_t v57 = v56 + 1;
        uint64_t v58 = (uint64_t *)(v10 + 16 * v56);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v10, a3, v14 >> 4, v58);
          v58 -= 2;
          --v57;
        }
        while (v57);
        unint64_t v59 = (unint64_t)v14 >> 4;
        do
        {
          unint64_t result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,int> *>((uint64_t *)v10, (uint64_t)a2, a3, v59);
          a2 -= 2;
        }
        while (v59-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = (uint64_t *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v18, (uint64_t *)v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, v18, v11);
      uint64_t v19 = a5;
      uint64_t v20 = v11;
      uint64_t v21 = v10 + 16 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v10 + 16), (uint64_t *)(v21 - 16), v68);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v10 + 32), (uint64_t *)(v10 + 16 + 16 * v17), v67);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v21 - 16), v18, (uint64_t *)(v10 + 16 + 16 * v17));
      uint64_t v22 = *(void *)v10;
      *(void *)uint64_t v10 = *v18;
      uint64_t *v18 = v22;
      LODWORD(v22) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v21 + 8);
      *(_DWORD *)(v21 + 8) = v22;
      uint64_t v11 = v20;
      a5 = v19;
      a2 = v69;
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v23 = *(void *)(v10 - 16);
    if (v23 >= *(void *)v10 && (*(void *)v10 < v23 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 8)))
    {
      unint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>((uint64_t *)v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>((uint64_t *)v10, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v10, v24);
    unint64_t v12 = v24 + 16;
    unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v24 + 16, (uint64_t)a2);
    if (result)
    {
      a4 = -v16;
      a2 = (uint64_t *)v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      unint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 16;
      goto LABEL_20;
    }
  }
  int64_t v41 = (uint64_t *)(v10 + 16);
  BOOL v43 = (uint64_t *)v10 == a2 || v41 == a2;
  if (a5)
  {
    if (v43) {
      return result;
    }
    uint64_t v44 = 0;
    uint64_t v45 = v10;
LABEL_50:
    uint64_t v46 = v45;
    uint64_t v45 = (uint64_t)v41;
    uint64_t v47 = *(void *)(v46 + 16);
    uint64_t v48 = *(void *)v46;
    if (v47 >= *(void *)v46)
    {
      if (v48 < v47) {
        goto LABEL_49;
      }
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
      if (v49 >= v50) {
        goto LABEL_49;
      }
    }
    else
    {
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
    }
    *(void *)(v46 + 16) = v48;
    *(_DWORD *)(v45 + 8) = v50;
    uint64_t v51 = v10;
    if (v46 == v10) {
      goto LABEL_48;
    }
    uint64_t v52 = v44;
    while (1)
    {
      uint64_t v55 = *(void *)(v10 + v52 - 16);
      if (v47 >= v55)
      {
        if (v55 < v47)
        {
          uint64_t v51 = v10 + v52;
          goto LABEL_48;
        }
        int v53 = *(_DWORD *)(v10 + v52 - 8);
        if (v49 >= v53)
        {
          uint64_t v51 = v46;
LABEL_48:
          *(void *)uint64_t v51 = v47;
          *(_DWORD *)(v51 + 8) = v49;
LABEL_49:
          int64_t v41 = (uint64_t *)(v45 + 16);
          v44 += 16;
          if ((uint64_t *)(v45 + 16) == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v53 = *(_DWORD *)(v10 + v52 - 8);
      }
      v46 -= 16;
      uint64_t v54 = v10 + v52;
      *(void *)uint64_t v54 = v55;
      *(_DWORD *)(v54 + 8) = v53;
      v52 -= 16;
      if (!v52)
      {
        uint64_t v51 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v43)
  {
    for (uint64_t i = v10 + 8; ; i += 16)
    {
      uint64_t v62 = v10;
      uint64_t v10 = (uint64_t)v41;
      uint64_t v63 = *(void *)(v62 + 16);
      uint64_t v64 = *(void *)v62;
      if (v63 < *(void *)v62) {
        break;
      }
      if (v64 >= v63)
      {
        int v65 = *(_DWORD *)(v62 + 24);
        if (v65 < *(_DWORD *)(v62 + 8)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      int64_t v41 = (uint64_t *)(v10 + 16);
      if ((uint64_t *)(v10 + 16) == a2) {
        return result;
      }
    }
    int v65 = *(_DWORD *)(v62 + 24);
LABEL_84:
    for (uint64_t j = i; ; j -= 16)
    {
      *(void *)(j + 8) = v64;
      *(_DWORD *)(j + 16) = *(_DWORD *)j;
      uint64_t v64 = *(void *)(j - 24);
      if (v63 >= v64 && (v64 < v63 || v65 >= *(_DWORD *)(j - 16))) {
        break;
      }
    }
    *(void *)(j - 8) = v63;
    *(_DWORD *)uint64_t j = v65;
    goto LABEL_79;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
  {
    uint64_t v5 = *a3;
    if (*a3 < v3)
    {
      int v6 = *((_DWORD *)a3 + 2);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      int v16 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v6;
      *((_DWORD *)a3 + 2) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      int v6 = *((_DWORD *)a3 + 2);
      int v10 = *((_DWORD *)a2 + 2);
      if (v6 < v10) {
        goto LABEL_16;
      }
    }
    else
    {
      int v10 = *((_DWORD *)a2 + 2);
    }
    *a1 = v3;
    *a2 = v4;
    int v17 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v10;
    *((_DWORD *)a2 + 2) = v17;
    uint64_t v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      int v19 = *((_DWORD *)a3 + 2);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      int v19 = *((_DWORD *)a3 + 2);
    }
    *a2 = v18;
    *a3 = v4;
    *((_DWORD *)a2 + 2) = v19;
    uint64_t result = 2;
    *((_DWORD *)a3 + 2) = v17;
    return result;
  }
  uint64_t v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7) {
      return 0;
    }
    int v9 = *((_DWORD *)a3 + 2);
    int v8 = *((_DWORD *)a2 + 2);
    if (v9 >= v8) {
      return 0;
    }
  }
  else
  {
    int v8 = *((_DWORD *)a2 + 2);
    int v9 = *((_DWORD *)a3 + 2);
  }
  *a2 = v7;
  *a3 = v3;
  *((_DWORD *)a2 + 2) = v9;
  *((_DWORD *)a3 + 2) = v8;
  uint64_t v11 = *a2;
  uint64_t v12 = *a1;
  if (*a2 < *a1)
  {
    int v13 = *((_DWORD *)a1 + 2);
    int v14 = *((_DWORD *)a2 + 2);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *((_DWORD *)a1 + 2) = v14;
    uint64_t result = 2;
    *((_DWORD *)a2 + 2) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    int v14 = *((_DWORD *)a2 + 2);
    int v13 = *((_DWORD *)a1 + 2);
    if (v14 < v13) {
      goto LABEL_14;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)a2 - 2)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((_DWORD *)i + 2)); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      uint64_t v7 = i[2];
      i += 2;
      uint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_DWORD *)i + 2)));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)a2 + 2); a2 -= 2)
    {
      uint64_t v8 = *(a2 - 2);
      uint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    uint64_t v9 = *i;
    uint64_t v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      uint64_t v11 = i[2];
      i += 2;
      uint64_t v9 = v11;
      int v12 = *((_DWORD *)i - 2);
      *((_DWORD *)i - 2) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_DWORD *)i + 2)))
      {
        uint64_t v13 = i[2];
        i += 2;
        uint64_t v9 = v13;
      }
      do
      {
        do
        {
          uint64_t v14 = *(a2 - 2);
          a2 -= 2;
          uint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_DWORD *)a2 + 2));
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 2);
  }
  *(i - 2) = v2;
  *((_DWORD *)i - 2) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<long long,int> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || SLODWORD(a1[v2 + 3]) >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      uint64_t v8 = *(void *)(a2 - 16);
      a2 -= 16;
      uint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        uint64_t v10 = *(void *)(a2 - 16);
        a2 -= 16;
        uint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = v6;
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    unint64_t v13 = v6;
    unint64_t v14 = a2;
    do
    {
      *(void *)unint64_t v13 = v12;
      *(void *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          uint64_t v16 = *(void *)(v13 + 16);
          v13 += 16;
          uint64_t v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        uint64_t v17 = *(void *)(v14 - 16);
        v14 -= 16;
        uint64_t v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((uint64_t *)(v13 - 16) != a1)
  {
    *a1 = *(void *)(v13 - 16);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 - 8);
  }
  *(void *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v19 = *(void *)(a2 - 16);
      uint64_t v20 = *(void *)a1;
      if (v19 < *(void *)a1)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(void *)a1 = v19;
        *(void *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v22 = *(_DWORD *)(a2 - 8);
        int v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v23 = *(void *)(a2 - 16);
      uint64_t v24 = *(void *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v26 = *(_DWORD *)(a2 - 8);
        int v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a2 - 8);
      }
      *(void *)(a1 + 32) = v23;
      *(void *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v30 = *(_DWORD *)(a1 + 40);
        int v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 24);
        int v30 = *(_DWORD *)(a1 + 40);
      }
      *(void *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v29;
      uint64_t v31 = *(void *)a1;
      if (v27 < *(void *)a1)
      {
        int v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(void *)a1 = v27;
        *(void *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        int v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t *)(a2 - 16));
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        uint64_t v11 = *(void *)v7;
        uint64_t v12 = *(void *)v6;
        if (*(void *)v7 >= *(void *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
        }
        *(void *)uint64_t v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          uint64_t v18 = *(void *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            int v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(void *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(void *)uint64_t v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v11 = *(void *)a4;
  uint64_t v12 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    int v14 = *(_DWORD *)(a4 + 8);
    int v13 = *(_DWORD *)(a3 + 8);
    if (v14 >= v13) {
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a3 + 8);
    int v14 = *(_DWORD *)(a4 + 8);
  }
  *(void *)a3 = v11;
  *(void *)a4 = v12;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  uint64_t v15 = *(void *)a3;
  uint64_t v16 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v18 = *(_DWORD *)(a3 + 8);
    int v17 = *(_DWORD *)(a2 + 8);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 8);
    int v18 = *(_DWORD *)(a3 + 8);
  }
  *(void *)a2 = v15;
  *(void *)a3 = v16;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  uint64_t v19 = *(void *)a2;
  uint64_t v20 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    int v21 = *(_DWORD *)(a1 + 8);
    int v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(void *)a1 = v19;
    *(void *)a2 = v20;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    int v22 = *(_DWORD *)(a2 + 8);
    int v21 = *(_DWORD *)(a1 + 8);
    if (v22 < v21) {
      goto LABEL_7;
    }
  }
LABEL_16:
  uint64_t v23 = *a5;
  uint64_t v24 = *(void *)a4;
  if (*a5 >= *(void *)a4)
  {
    if (v24 < v23) {
      return result;
    }
    int v26 = *((_DWORD *)a5 + 2);
    int v25 = *(_DWORD *)(a4 + 8);
    if (v26 >= v25) {
      return result;
    }
  }
  else
  {
    int v25 = *(_DWORD *)(a4 + 8);
    int v26 = *((_DWORD *)a5 + 2);
  }
  *(void *)a4 = v23;
  *a5 = v24;
  *(_DWORD *)(a4 + 8) = v26;
  *((_DWORD *)a5 + 2) = v25;
  uint64_t v27 = *(void *)a4;
  uint64_t v28 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v28 < v27) {
      return result;
    }
    int v30 = *(_DWORD *)(a4 + 8);
    int v29 = *(_DWORD *)(a3 + 8);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a3 + 8);
    int v30 = *(_DWORD *)(a4 + 8);
  }
  *(void *)a3 = v27;
  *(void *)a4 = v28;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  uint64_t v31 = *(void *)a3;
  uint64_t v32 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v32 < v31) {
      return result;
    }
    int v34 = *(_DWORD *)(a3 + 8);
    int v33 = *(_DWORD *)(a2 + 8);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(_DWORD *)(a3 + 8);
  }
  *(void *)a2 = v31;
  *(void *)a3 = v32;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  uint64_t v35 = *(void *)a2;
  uint64_t v36 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    int v37 = *(_DWORD *)(a1 + 8);
    int v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(void *)a1 = v35;
    *(void *)a2 = v36;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    int v38 = *(_DWORD *)(a2 + 8);
    int v37 = *(_DWORD *)(a1 + 8);
    if (v38 < v37) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 16 * v7 + 8) < *((_DWORD *)v8 + 6))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v11 = *v8;
      uint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          int v14 = *((_DWORD *)v8 + 2);
          int v13 = *((_DWORD *)a4 + 2);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v13 = *((_DWORD *)a4 + 2);
          int v14 = *((_DWORD *)v8 + 2);
        }
        *a4 = v11;
        *((_DWORD *)a4 + 2) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = (uint64_t *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              uint64_t v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(_DWORD *)(result + 16 * v7 + 8) < *((_DWORD *)v15 + 6))
              {
                v15 += 2;
                uint64_t v7 = v17;
              }
            }
            uint64_t v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            int v20 = *((_DWORD *)v15 + 2);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            uint64_t *v8 = v19;
            *((_DWORD *)v8 + 2) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *uint64_t v15 = v12;
        *((_DWORD *)v15 + 2) = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<long long,int> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    int v6 = *((_DWORD *)result + 2);
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        uint64_t v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && SLODWORD(v8[2 * v9 + 1]) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      uint64_t *v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 16))
    {
      *uint64_t v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *uint64_t v7 = *(void *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(void *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[2 * (v14 >> 1)];
      uint64_t v17 = *v16;
      uint64_t v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        int v20 = result[2 * v15 + 1];
        int v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19) {
          return result;
        }
      }
      else
      {
        int v19 = *((_DWORD *)v7 + 2);
        int v20 = *((_DWORD *)v16 + 2);
      }
      *uint64_t v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          int v21 = &result[2 * v15];
          uint64_t v24 = *v21;
          if (*v21 < v18)
          {
            int v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v18 < v24) {
              break;
            }
            int v22 = result[2 * v15 + 1];
            if (v22 >= v19) {
              break;
            }
          }
          *uint64_t v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          uint64_t v16 = &result[2 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      int v21 = v16;
LABEL_19:
      uint64_t *v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

operations_research::sat::NeighborhoodGeneratorHelper *operations_research::sat::NeighborhoodGeneratorHelper::NeighborhoodGeneratorHelper(operations_research::sat::NeighborhoodGeneratorHelper *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::SatParameters *a3, operations_research::sat::SharedResponseManager *a4, operations_research::SharedTimeLimit *a5, operations_research::sat::SharedBoundsManager *a6)
{
  *(void *)((char *)this + 39) = 0;
  *(void *)((char *)this + 31) = 0;
  *((unsigned char *)this + 47) = 0;
  *(void *)this = &unk_26F0BF4D0;
  *((void *)this + 1) = 0;
  *((void *)this + 6) = a3;
  *((void *)this + 7) = a2;
  *((void *)this + 9) = a5;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = a6;
  *((void *)this + 11) = a4;
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104), 0);
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  if (!*((void *)this + 11))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 43);
    uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: shared_response_ != nullptr ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  uint64_t v8 = (operations_research::sat::SharedBoundsManager *)*((void *)this + 10);
  if (v8) {
    *((_DWORD *)this + 16) = operations_research::sat::SharedBoundsManager::RegisterNewId(v8, v7);
  }
  uint64_t v9 = (operations_research::sat::NeighborhoodGeneratorHelper *)*((void *)this + 7);
  if ((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104) != v9) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>((uint64_t)this + 120, (uint64_t)v9 + 16);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(this);
  (*(void (**)(operations_research::sat::NeighborhoodGeneratorHelper *))(*(void *)this + 32))(this);
  return this;
}

void sub_23CC0D1D8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v2;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(int *)(*((void *)this + 7) + 24);
  std::string __p = 0;
  int v167 = 0;
  uint64_t v168 = 0;
  uint64_t v156 = (void *)((char *)this + 304);
  std::vector<std::vector<int>>::assign((uint64_t)this + 304, v2, (char **)&__p);
  if (__p)
  {
    int v167 = (int *)__p;
    operator delete(__p);
  }
  unint64_t v3 = *(int *)(*((void *)v1 + 7) + 48);
  std::string __p = 0;
  int v167 = 0;
  uint64_t v168 = 0;
  uint64_t v155 = (void *)((char *)v1 + 280);
  std::vector<std::vector<int>>::assign((uint64_t)v1 + 280, v3, (char **)&__p);
  if (__p)
  {
    int v167 = (int *)__p;
    operator delete(__p);
  }
  uint64_t v4 = *((void *)v1 + 7);
  unint64_t v158 = v1;
  if (*(int *)(v4 + 48) < 1) {
    goto LABEL_65;
  }
  uint64_t v5 = 0;
  while (2)
  {
    operations_research::sat::UsedVariables(*(operations_research::sat **)(*(void *)(v4 + 56) + 8 * v5 + 8), &__p);
    int v6 = (int *)__p;
    uint64_t v159 = v167;
    if (__p == v167) {
      goto LABEL_63;
    }
    uint64_t v162 = v5;
    do
    {
      int v7 = *v6;
      uint64_t v8 = *(void *)(*((void *)v1 + 17) + 8 * *v6 + 8);
      if (*(_DWORD *)(v8 + 16) == 2 && **(void **)(v8 + 24) == *(void *)(*(void *)(v8 + 24) + 8)) {
        goto LABEL_10;
      }
      uint64_t v9 = *v156 + 24 * v7;
      uint64_t v11 = (uint64_t *)(v9 + 8);
      uint64_t v10 = *(char **)(v9 + 8);
      unint64_t v12 = *(void *)(v9 + 16);
      if ((unint64_t)v10 < v12)
      {
        *(_DWORD *)uint64_t v10 = v5;
        uint64_t v13 = (uint64_t)(v10 + 4);
        goto LABEL_35;
      }
      unint64_t v14 = *(char **)v9;
      uint64_t v15 = (uint64_t)&v10[-*(void *)v9];
      uint64_t v16 = v15 >> 2;
      unint64_t v17 = (v15 >> 2) + 1;
      if (v17 >> 62) {
        goto LABEL_175;
      }
      uint64_t v18 = v12 - (void)v14;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          goto LABEL_176;
        }
        unint64_t v20 = v19;
        int v21 = operator new(4 * v19);
        unint64_t v19 = v20;
        int v22 = &v21[4 * v16];
        _DWORD *v22 = v162;
        uint64_t v13 = (uint64_t)(v22 + 1);
        if (v10 == v14)
        {
LABEL_27:
          uint64_t v5 = v162;
          goto LABEL_33;
        }
      }
      else
      {
        int v21 = 0;
        int v22 = (_DWORD *)(4 * v16);
        *(_DWORD *)(4 * v16) = v162;
        uint64_t v13 = 4 * v16 + 4;
        if (v10 == v14) {
          goto LABEL_27;
        }
      }
      unint64_t v23 = v10 - 4 - v14;
      if (v23 < 0x2C)
      {
        uint64_t v5 = v162;
        do
        {
LABEL_32:
          int v32 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--int v22 = v32;
        }
        while (v10 != v14);
        goto LABEL_33;
      }
      unint64_t v24 = v10 - &v21[v15];
      uint64_t v5 = v162;
      if (v24 < 0x20) {
        goto LABEL_32;
      }
      uint64_t v25 = (v23 >> 2) + 1;
      uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v27 = &v10[-v26];
      int v22 = (_DWORD *)((char *)v22 - v26);
      uint64_t v28 = &v21[4 * v16 - 16];
      int v29 = v10 - 16;
      uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        _OWORD *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 8;
      }
      while (v30);
      uint64_t v10 = v27;
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_32;
      }
LABEL_33:
      *(void *)uint64_t v9 = v22;
      *uint64_t v11 = v13;
      *(void *)(v9 + 16) = &v21[4 * v19];
      if (v14) {
        operator delete(v14);
      }
LABEL_35:
      *uint64_t v11 = v13;
      uint64_t v33 = *v155 + 24 * v5;
      uint64_t v35 = (uint64_t *)(v33 + 8);
      int v34 = *(char **)(v33 + 8);
      unint64_t v36 = *(void *)(v33 + 16);
      if ((unint64_t)v34 >= v36)
      {
        int v37 = *(char **)v33;
        uint64_t v38 = (uint64_t)&v34[-*(void *)v33];
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
LABEL_175:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v41 = v36 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
LABEL_176:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v43 = v42;
          uint64_t v44 = operator new(4 * v42);
          unint64_t v42 = v43;
          uint64_t v45 = (int *)&v44[4 * v39];
          *uint64_t v45 = v7;
          uint64_t v46 = (uint64_t)(v45 + 1);
          if (v34 != v37)
          {
LABEL_47:
            unint64_t v47 = v34 - 4 - v37;
            if (v47 >= 0x2C)
            {
              unint64_t v48 = v34 - &v44[v38];
              uint64_t v5 = v162;
              if (v48 >= 0x20)
              {
                uint64_t v49 = (v47 >> 2) + 1;
                uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v51 = &v34[-v50];
                uint64_t v45 = (int *)((char *)v45 - v50);
                uint64_t v52 = &v44[4 * v39 - 16];
                int v53 = v34 - 16;
                uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v55 = *(_OWORD *)v53;
                  *(v52 - 1) = *((_OWORD *)v53 - 1);
                  *uint64_t v52 = v55;
                  v52 -= 2;
                  v53 -= 32;
                  v54 -= 8;
                }
                while (v54);
                int v34 = v51;
                if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_56:
                  *(void *)uint64_t v33 = v45;
                  uint64_t *v35 = v46;
                  *(void *)(v33 + 16) = &v44[4 * v42];
                  if (v37) {
                    operator delete(v37);
                  }
                  uint64_t v1 = v158;
                  uint64_t *v35 = v46;
                  v165[0] = v7;
                  int v169 = 0;
                  if (v7 < 0) {
LABEL_61:
                  }
                    google::MakeCheckOpString<int,int>((int)v165, (int)&v169, "var >= 0");
                  goto LABEL_59;
                }
              }
            }
            else
            {
              uint64_t v5 = v162;
            }
            do
            {
              int v56 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *--uint64_t v45 = v56;
            }
            while (v34 != v37);
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v44 = 0;
          uint64_t v45 = (int *)(4 * v39);
          *(_DWORD *)(4 * v39) = v7;
          uint64_t v46 = 4 * v39 + 4;
          if (v34 != v37) {
            goto LABEL_47;
          }
        }
        uint64_t v5 = v162;
        goto LABEL_56;
      }
      *(_DWORD *)int v34 = v7;
      uint64_t v1 = v158;
      uint64_t *v35 = (uint64_t)(v34 + 4);
      v165[0] = v7;
      int v169 = 0;
      if (v7 < 0) {
        goto LABEL_61;
      }
LABEL_59:
      int v57 = *(_DWORD *)(*((void *)v1 + 7) + 24);
      v165[0] = v7;
      int v169 = v57;
      if (v7 >= v57) {
        google::MakeCheckOpString<int,int>((int)v165, (int)&v169, "var < model_proto_.variables_size()");
      }
LABEL_10:
      ++v6;
    }
    while (v6 != v159);
    int v6 = (int *)__p;
LABEL_63:
    if (v6)
    {
      int v167 = v6;
      operator delete(v6);
    }
    ++v5;
    uint64_t v4 = *((void *)v1 + 7);
    if (v5 < *(int *)(v4 + 48)) {
      continue;
    }
    break;
  }
LABEL_65:
  uint64_t v59 = *((void *)v1 + 32);
  uint64_t v58 = *((void *)v1 + 33);
  if (v58 != v59)
  {
    uint64_t v60 = *((void *)v1 + 33);
    do
    {
      uint64_t v62 = *(void **)(v60 - 24);
      v60 -= 24;
      uint64_t v61 = v62;
      if (v62)
      {
        *(void *)(v58 - 16) = v61;
        operator delete(v61);
      }
      uint64_t v58 = v60;
    }
    while (v60 != v59);
    uint64_t v4 = *((void *)v1 + 7);
  }
  *((void *)v1 + 33) = v59;
  uint64_t v63 = *(unsigned int *)(v4 + 48);
  if ((int)v63 >= 1)
  {
    uint64_t v64 = 0;
    int v65 = (void *)((char *)v1 + 256);
    uint64_t v160 = (void *)((char *)v1 + 256);
    uint64_t v163 = *(unsigned int *)(v4 + 48);
    while (1)
    {
      while (1)
      {
        unint64_t v66 = *(int *)(*(void *)(*(void *)(*((void *)v1 + 7) + 56) + 8 * v64 + 8) + 60);
        uint64_t v68 = *((void *)v1 + 32);
        uint64_t v67 = *((void *)v1 + 33);
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v68) >> 3);
        if (v69 <= v66)
        {
          unint64_t v70 = (int)v66 + 1;
          if (v70 <= v69)
          {
            if (v70 < v69)
            {
              uint64_t v71 = v68 + 24 * (int)v70;
              if (v67 != v71)
              {
                uint64_t v72 = *((void *)v1 + 33);
                do
                {
                  uint64_t v74 = *(void **)(v72 - 24);
                  v72 -= 24;
                  int v73 = v74;
                  if (v74)
                  {
                    *(void *)(v67 - 16) = v73;
                    operator delete(v73);
                  }
                  uint64_t v67 = v72;
                }
                while (v72 != v71);
              }
              *((void *)v1 + 33) = v71;
            }
          }
          else
          {
            std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v65, v70 - v69);
          }
        }
        uint64_t v75 = *v65 + 24 * (int)v66;
        uint64_t v77 = (uint64_t *)(v75 + 8);
        uint64_t v76 = *(char **)(v75 + 8);
        unint64_t v78 = *(void *)(v75 + 16);
        if ((unint64_t)v76 >= v78) {
          break;
        }
        *(_DWORD *)uint64_t v76 = v64;
        uint64_t *v77 = (uint64_t)(v76 + 4);
        if (++v64 == v63) {
          goto LABEL_105;
        }
      }
      unint64_t v79 = *(char **)v75;
      uint64_t v80 = (uint64_t)&v76[-*(void *)v75];
      uint64_t v81 = v80 >> 2;
      unint64_t v82 = (v80 >> 2) + 1;
      if (v82 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v83 = v78 - (void)v79;
      if (v83 >> 1 > v82) {
        unint64_t v82 = v83 >> 1;
      }
      unint64_t v84 = (unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v82;
      if (v84) {
        break;
      }
      int v85 = 0;
      uint64_t v86 = (_DWORD *)(4 * v81);
      *(_DWORD *)(4 * v81) = v64;
      uint64_t v87 = 4 * v81 + 4;
      if (v76 != v79) {
        goto LABEL_96;
      }
LABEL_102:
      *(void *)uint64_t v75 = v86;
      uint64_t *v77 = v87;
      *(void *)(v75 + 16) = &v85[4 * v84];
      if (v79) {
        operator delete(v79);
      }
      uint64_t v1 = v158;
      int v65 = v160;
      uint64_t v63 = v163;
      uint64_t *v77 = v87;
      if (++v64 == v163)
      {
LABEL_105:
        uint64_t v4 = *((void *)v1 + 7);
        goto LABEL_106;
      }
    }
    if (v84 >> 62) {
LABEL_178:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    int v85 = operator new(4 * v84);
    uint64_t v86 = &v85[4 * v81];
    *uint64_t v86 = v64;
    uint64_t v87 = (uint64_t)(v86 + 1);
    if (v76 == v79) {
      goto LABEL_102;
    }
LABEL_96:
    unint64_t v88 = v76 - 4 - v79;
    if (v88 < 0x2C) {
      goto LABEL_182;
    }
    if ((unint64_t)(v76 - &v85[v80]) < 0x20) {
      goto LABEL_182;
    }
    uint64_t v89 = (v88 >> 2) + 1;
    uint64_t v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v91 = &v76[-v90];
    uint64_t v86 = (_DWORD *)((char *)v86 - v90);
    uint64_t v92 = &v85[4 * v81 - 16];
    int v93 = v76 - 16;
    uint64_t v94 = v89 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v95 = *(_OWORD *)v93;
      *(v92 - 1) = *((_OWORD *)v93 - 1);
      _OWORD *v92 = v95;
      v92 -= 2;
      v93 -= 32;
      v94 -= 8;
    }
    while (v94);
    uint64_t v76 = v91;
    if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_182:
      do
      {
        int v96 = *((_DWORD *)v76 - 1);
        v76 -= 4;
        *--uint64_t v86 = v96;
      }
      while (v76 != v79);
    }
    goto LABEL_102;
  }
LABEL_106:
  uint64_t v164 = (void **)((char *)v1 + 352);
  *((void *)v1 + 45) = *((void *)v1 + 44);
  int v97 = (void *)((char *)v1 + 328);
  unint64_t v98 = *(int *)(v4 + 24);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::assign((char **)v1 + 41, v98, &__p);
  uint64_t v99 = *((void *)v1 + 7);
  if (!*(unsigned char *)(*((void *)v1 + 6) + 148))
  {
LABEL_146:
    if (*(int *)(v99 + 24) < 1) {
      return;
    }
    unint64_t v132 = 0;
    while (1)
    {
      uint64_t v134 = *(void *)(*((void *)v1 + 17) + 8 * v132 + 8);
      if (*(_DWORD *)(v134 + 16) == 2 && **(void **)(v134 + 24) == *(void *)(*(void *)(v134 + 24) + 8)) {
        goto LABEL_150;
      }
      uint64_t v136 = (char *)*((void *)v1 + 45);
      unint64_t v135 = *((void *)v1 + 46);
      if ((unint64_t)v136 >= v135) {
        break;
      }
      *(_DWORD *)uint64_t v136 = v132;
      uint64_t v133 = (uint64_t)(v136 + 4);
LABEL_149:
      *((void *)v1 + 45) = v133;
      *(void *)(*((void *)v1 + 41) + ((v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v132;
LABEL_150:
      if ((uint64_t)++v132 >= *(int *)(v99 + 24)) {
        return;
      }
    }
    uint64_t v137 = (char *)*v164;
    uint64_t v138 = v136 - (unsigned char *)*v164;
    uint64_t v139 = v138 >> 2;
    unint64_t v140 = (v138 >> 2) + 1;
    if (v140 >> 62) {
      goto LABEL_177;
    }
    uint64_t v141 = v135 - (void)v137;
    if (v141 >> 1 > v140) {
      unint64_t v140 = v141 >> 1;
    }
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v142 = v140;
    }
    if (v142)
    {
      if (v142 >> 62) {
        goto LABEL_178;
      }
      uint64_t v143 = operator new(4 * v142);
      uint64_t v144 = &v143[4 * v139];
      *uint64_t v144 = v132;
      uint64_t v133 = (uint64_t)(v144 + 1);
      if (v136 != v137) {
        goto LABEL_163;
      }
    }
    else
    {
      uint64_t v143 = 0;
      uint64_t v144 = (_DWORD *)(4 * v139);
      *(_DWORD *)(4 * v139) = v132;
      uint64_t v133 = 4 * v139 + 4;
      if (v136 != v137)
      {
LABEL_163:
        unint64_t v145 = v136 - 4 - v137;
        if (v145 >= 0x2C)
        {
          unint64_t v146 = v136 - &v143[v138];
          uint64_t v1 = v158;
          if (v146 >= 0x20)
          {
            uint64_t v147 = (v145 >> 2) + 1;
            uint64_t v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v149 = &v136[-v148];
            uint64_t v144 = (_DWORD *)((char *)v144 - v148);
            uint64_t v150 = &v143[4 * v139 - 16];
            uint64_t v151 = v136 - 16;
            uint64_t v152 = v147 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *uint64_t v150 = v153;
              v150 -= 2;
              v151 -= 32;
              v152 -= 8;
            }
            while (v152);
            uint64_t v136 = v149;
            if (v147 == (v147 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_172;
            }
          }
        }
        else
        {
          uint64_t v1 = v158;
        }
        do
        {
          int v154 = *((_DWORD *)v136 - 1);
          v136 -= 4;
          *--uint64_t v144 = v154;
        }
        while (v136 != v137);
LABEL_172:
        *((void *)v1 + 44) = v144;
        *((void *)v1 + 45) = v133;
        *((void *)v1 + 46) = &v143[4 * v142];
        if (v137)
        {
          operator delete(v137);
          uint64_t v99 = *((void *)v1 + 7);
        }
        goto LABEL_149;
      }
    }
    uint64_t v1 = v158;
    goto LABEL_172;
  }
  uint64_t v100 = *(void *)(v99 + 80);
  int v101 = (void *)(v100 + 8);
  if (!v100) {
    int v101 = 0;
  }
  uint64_t v102 = *(int *)(v99 + 72);
  if (v102)
  {
    uint64_t v157 = &v101[v102];
    while (1)
    {
      uint64_t v161 = v101;
      uint64_t v103 = *v101;
      uint64_t v104 = *(int *)(v103 + 16);
      if (v104) {
        break;
      }
LABEL_111:
      int v101 = v161 + 1;
      if (v161 + 1 == v157) {
        goto LABEL_144;
      }
    }
    int v105 = *(int **)(v103 + 24);
    uint64_t v106 = &v105[v104];
    while (2)
    {
      if (~*v105 <= *v105) {
        int v108 = *v105;
      }
      else {
        int v108 = ~*v105;
      }
      unint64_t v109 = (unint64_t)v108 >> 6;
      uint64_t v110 = *(void *)(*v97 + 8 * v109);
      if (((1 << v108) & v110) != 0) {
        goto LABEL_116;
      }
      uint64_t v111 = *(void *)(*((void *)v1 + 17) + 8 * v108 + 8);
      if (*(_DWORD *)(v111 + 16) == 2 && **(void **)(v111 + 24) == *(void *)(*(void *)(v111 + 24) + 8)) {
        goto LABEL_116;
      }
      *(void *)(*v97 + 8 * v109) = (1 << v108) | v110;
      uint64_t v113 = (int *)*((void *)v1 + 45);
      unint64_t v112 = *((void *)v1 + 46);
      if ((unint64_t)v113 < v112)
      {
        *uint64_t v113 = v108;
        uint64_t v107 = (uint64_t)(v113 + 1);
        goto LABEL_115;
      }
      signed int v114 = (int *)*v164;
      uint64_t v115 = (char *)v113 - (unsigned char *)*v164;
      uint64_t v116 = v115 >> 2;
      unint64_t v117 = (v115 >> 2) + 1;
      if (v117 >> 62) {
LABEL_177:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v118 = v112 - (void)v114;
      if (v118 >> 1 > v117) {
        unint64_t v117 = v118 >> 1;
      }
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v119 = v117;
      }
      if (v119)
      {
        if (v119 >> 62) {
          goto LABEL_178;
        }
        int v120 = operator new(4 * v119);
        uint64_t v121 = (int *)&v120[4 * v116];
        int *v121 = v108;
        uint64_t v107 = (uint64_t)(v121 + 1);
        if (v113 == v114)
        {
LABEL_141:
          uint64_t v131 = &v120[4 * v119];
          uint64_t v1 = v158;
          *((void *)v158 + 44) = v121;
          *((void *)v158 + 45) = v107;
          *((void *)v158 + 46) = v131;
          if (v114) {
            operator delete(v114);
          }
LABEL_115:
          *((void *)v1 + 45) = v107;
LABEL_116:
          if (++v105 == v106) {
            goto LABEL_111;
          }
          continue;
        }
      }
      else
      {
        int v120 = 0;
        uint64_t v121 = (int *)(4 * v116);
        *(_DWORD *)(4 * v116) = v108;
        uint64_t v107 = 4 * v116 + 4;
        if (v113 == v114) {
          goto LABEL_141;
        }
      }
      break;
    }
    unint64_t v122 = (char *)(v113 - 1) - (char *)v114;
    if (v122 < 0x2C) {
      goto LABEL_183;
    }
    if ((unint64_t)((char *)v113 - &v120[v115]) < 0x20) {
      goto LABEL_183;
    }
    uint64_t v123 = (v122 >> 2) + 1;
    uint64_t v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v125 = &v113[v124 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v121 = (int *)((char *)v121 - v124);
    unsigned int v126 = &v120[4 * v116 - 16];
    uint64_t v127 = v113 - 4;
    uint64_t v128 = v123 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v129 = *(_OWORD *)v127;
      *(v126 - 1) = *((_OWORD *)v127 - 1);
      _OWORD *v126 = v129;
      v126 -= 2;
      v127 -= 8;
      v128 -= 8;
    }
    while (v128);
    uint64_t v113 = v125;
    if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_183:
      do
      {
        int v130 = *--v113;
        *--uint64_t v121 = v130;
      }
      while (v113 != v114);
    }
    goto LABEL_141;
  }
LABEL_144:
  if (*((void *)v1 + 44) == *((void *)v1 + 45))
  {
    uint64_t v99 = *((void *)v1 + 7);
    goto LABEL_146;
  }
}

void sub_23CC0DDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC0DDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC0DDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NeighborhoodGeneratorHelper::Synchronize(operations_research::sat::NeighborhoodGeneratorHelper *this, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 248);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 248), a2);
  uint64_t v11 = (void *)*((void *)this + 10);
  if (v11)
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    int v56 = 0;
    int v57 = 0;
    uint64_t v58 = 0;
    int v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    operations_research::sat::SharedBoundsManager::GetChangedBounds(v11, (absl::lts_2020_02_25::Mutex *)*((unsigned int *)this + 16), &v59, &v56, &v53);
    uint64_t v13 = v59;
    if (v60 != v59)
    {
      unint64_t v14 = 0;
      unint64_t v47 = v3;
      while (1)
      {
        uint64_t v15 = v13[v14];
        uint64_t v16 = *((void *)v56 + v14);
        uint64_t v17 = *((void *)v53 + v14);
        if (*_MergedGlobals_5[0] >= 3
          && (_MergedGlobals_5[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)_MergedGlobals_5, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_lns.cc", (const char *)3))&& *off_26AECFE40[0] >= 3&& (off_26AECFE40[0] != &google::kLogSiteUninitialized|| google::InitVLOG3__((google *)off_26AECFE40, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_lns.cc", (const char *)3)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 71);
          uint64_t v18 = (void *)google::LogMessage::stream((google::LogMessage *)v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Variable: ", 10);
          unint64_t v19 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" old domain: [", 14);
          unint64_t v20 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
          int v21 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] new domain: [", 15);
          int v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
          unint64_t v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v52);
        }
        uint64_t v24 = *(void *)(*((void *)this + 17) + 8 * v15 + 8);
        operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v24 + 24), *(int *)(v24 + 16), v52, v12);
        operations_research::Domain::Domain(__p, v16, v17);
        operations_research::Domain::IntersectionWith(v52, (const operations_research::Domain *)__p, &v50);
        if (__p[0]) {
          operator delete(*(void **)&__p[8]);
        }
        BOOL IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)&v50);
        BOOL v26 = IsEmpty;
        if (IsEmpty)
        {
          uint64_t v27 = *((void *)this + 11);
          char v49 = 16;
          strcpy(__p, "LNS base problem");
          operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(v27, (absl::lts_2020_02_25::Mutex *)__p);
          if (v49 < 0)
          {
            operator delete(*(void **)__p);
            uint64_t v28 = (unsigned __int8 **)*((void *)this + 9);
            if (!v28) {
              goto LABEL_29;
            }
LABEL_28:
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v28, v4);
            atomic_store(1u, v28[3]);
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v28, v39, v40, v41, v42, v43, v44, v45);
            goto LABEL_29;
          }
          uint64_t v28 = (unsigned __int8 **)*((void *)this + 9);
          if (v28) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v29 = *(void *)(*((void *)this + 17) + 8 * v15 + 8);
          *(_DWORD *)(v29 + 16) = 0;
          uint64_t v30 = (unsigned int *)(v29 + 16);
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v29 + 16), v50 >> 1);
          if (v50) {
            long long v31 = (uint64_t *)v51;
          }
          else {
            long long v31 = (uint64_t *)&v51;
          }
          if (v50 >= 2)
          {
            int v32 = &v31[2 * (v50 >> 1)];
            unsigned int v33 = *(_DWORD *)(v29 + 16);
            do
            {
              uint64_t v34 = *v31;
              int v35 = *(_DWORD *)(v29 + 20);
              unsigned int v36 = v33 + 1;
              if (v33 == v35)
              {
                google::protobuf::RepeatedField<long long>::Reserve(v30, v33 + 1);
                int v35 = *(_DWORD *)(v29 + 20);
              }
              uint64_t v37 = *(void *)(v29 + 24);
              *(void *)(v37 + 8 * v33) = v34;
              *(_DWORD *)(v29 + 16) = v36;
              uint64_t v38 = v31[1];
              v33 += 2;
              if (v36 == v35)
              {
                google::protobuf::RepeatedField<long long>::Reserve(v30, v33);
                uint64_t v37 = *(void *)(v29 + 24);
              }
              *(void *)(v37 + 8 * v36) = v38;
              unsigned int *v30 = v33;
              v31 += 2;
            }
            while (v31 != v32);
          }
        }
LABEL_29:
        if (v50)
        {
          operator delete(v51);
          if ((v52[0] & 1) == 0)
          {
LABEL_31:
            if (v26) {
              goto LABEL_45;
            }
            goto LABEL_35;
          }
        }
        else if ((v52[0] & 1) == 0)
        {
          goto LABEL_31;
        }
        operator delete((void *)v52[1]);
        if (v26)
        {
LABEL_45:
          if (v53)
          {
            uint64_t v54 = v53;
            operator delete(v53);
          }
          uint64_t v46 = v56;
          unint64_t v3 = v47;
          if (v56) {
            goto LABEL_41;
          }
          goto LABEL_42;
        }
LABEL_35:
        ++v14;
        uint64_t v13 = v59;
        if (v14 >= v60 - v59)
        {
          unint64_t v3 = v47;
          if (v59 != v60) {
            operations_research::sat::NeighborhoodGeneratorHelper::RecomputeHelperData(this);
          }
          break;
        }
      }
    }
    if (v53)
    {
      uint64_t v54 = v53;
      operator delete(v53);
    }
    uint64_t v46 = v56;
    if (v56)
    {
LABEL_41:
      int v57 = v46;
      operator delete(v46);
    }
LABEL_42:
    if (v59)
    {
      uint64_t v60 = v59;
      operator delete(v59);
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_23CC0E260(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, absl::lts_2020_02_25 **a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v30 = a27;
    if (!a27)
    {
LABEL_3:
      long long v31 = *(void **)(v28 - 112);
      if (!v31) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v30 = a27;
    if (!a27) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  long long v31 = *(void **)(v28 - 112);
  if (!v31)
  {
LABEL_5:
    absl::lts_2020_02_25::Mutex::Unlock(a9, a2, a3, a4, a5, a6, a7, a8);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(void *)(v28 - 104) = v31;
  operator delete(v31);
  goto LABEL_5;
}

void std::vector<std::vector<int>>::assign(uint64_t a1, unint64_t a2, char **a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - *(void *)a1) >> 3) >= a2)
  {
    unint64_t v13 = (*(void *)(a1 + 8) - (void)v7) / 24;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (*(void *)(a1 + 8) - (void)v7) / 24;
    }
    for (; v14; --v14)
    {
      if (v7 != a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v7, *a3, a3[1], (a3[1] - *a3) >> 2);
      }
      v7 += 3;
    }
    if (a2 <= v13)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)a1 + 24 * a2;
      if (v23 != v24)
      {
        uint64_t v25 = *(void *)(a1 + 8);
        do
        {
          uint64_t v27 = *(void **)(v25 - 24);
          v25 -= 24;
          BOOL v26 = v27;
          if (v27)
          {
            *(void *)(v23 - 16) = v26;
            operator delete(v26);
          }
          uint64_t v23 = v25;
        }
        while (v25 != v24);
      }
      *(void *)(a1 + 8) = v24;
    }
    else
    {
      uint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = &v15[3 * (a2 - v13)];
      uint64_t v17 = -24 * v13 + 24 * a2;
      do
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        unint64_t v20 = *a3;
        unint64_t v19 = a3[1];
        int64_t v21 = v19 - *a3;
        if (v19 != *a3)
        {
          if (v21 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          int v22 = (char *)operator new(v19 - *a3);
          *uint64_t v15 = v22;
          v15[1] = v22;
          uint64_t v18 = &v22[4 * (v21 >> 2)];
          v15[2] = v18;
          memcpy(v22, v20, v21);
          v15[1] = v18;
        }
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      *(void *)(a1 + 8) = v16;
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = *(char ***)(a1 + 8);
      uint64_t v9 = *(char ***)a1;
      if (v8 != v7)
      {
        uint64_t v10 = *(char ***)(a1 + 8);
        do
        {
          __n128 v12 = *(v10 - 3);
          v10 -= 3;
          uint64_t v11 = v12;
          if (v12)
          {
            *(v8 - 2) = v11;
            operator delete(v11);
          }
          uint64_t v8 = v10;
        }
        while (v10 != v7);
        uint64_t v9 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v7;
      operator delete(v9);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_45;
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= a2) {
      uint64_t v29 = a2;
    }
    unint64_t v30 = v28 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v29;
    if (v30 > 0xAAAAAAAAAAAAAAALL) {
LABEL_45:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v31 = 3 * v30;
    int v32 = operator new(24 * v30);
    unsigned int v33 = v32;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = v32;
    *(void *)(a1 + 16) = &v32[v31];
    uint64_t v34 = *a3;
    int64_t v35 = a3[1] - *a3;
    if (v35)
    {
      if (v35 < 0)
      {
        *int v32 = 0;
        v32[1] = 0;
        v32[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = 24 * a2;
      uint64_t v37 = v32;
      do
      {
        *uint64_t v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        uint64_t v38 = (char *)operator new(v35);
        *uint64_t v37 = v38;
        v37[1] = v38;
        uint64_t v39 = &v38[4 * (v35 >> 2)];
        v37[2] = v39;
        memcpy(v38, v34, v35);
        v37[1] = v39;
        v37 += 3;
        v36 -= 24;
      }
      while (v36);
    }
    else
    {
      bzero(v32, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    *(void *)(a1 + 8) = &v33[3 * a2];
  }
}

void sub_23CC0E658(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23CC0E678(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23CC0E680(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23CC0E6A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void operations_research::sat::Neighborhood::~Neighborhood(void **this)
{
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(this + 1));
  }
  else
  {
    operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(this + 1));
  }
}

void operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = 0;
  uint64_t v8 = a4 + 8;
  uint64_t v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
  *(void *)(a4 + 152) = 0;
  *(unsigned char *)(a4 + 183) = 0;
  *(unsigned char *)(a4 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(_WORD *)a4 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(a1 + 56));
  if (v8 != a1 + 104) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, a1 + 120);
  }
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if (v10)
  {
    if (*v11) {
      goto LABEL_7;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  __n128 v12 = *(operations_research::sat::PartialVariableAssignment **)(a4 + 136);
  if (v12)
  {
    operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v12);
    MEMORY[0x23ECF2BC0]();
  }
LABEL_7:
  *(void *)(a4 + 136) = 0;
  LODWORD(v13) = *(_DWORD *)(a4 + 32);
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      uint64_t v15 = *(void *)(a4 + 136);
      if (v15)
      {
        uint64_t v17 = *(unsigned int *)(v15 + 16);
        uint64_t v16 = (unsigned int *)(v15 + 16);
        int v18 = v17 + 1;
        if (v17 == *(_DWORD *)(v15 + 20)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(a4 + 16);
        uint64_t v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = *(google::protobuf::Arena **)v24;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v24);
        uint64_t v15 = v25;
        *(void *)(a4 + 136) = v25;
        uint64_t v17 = *(unsigned int *)(v25 + 16);
        int v26 = *(_DWORD *)(v25 + 20);
        uint64_t v16 = (unsigned int *)(v25 + 16);
        int v18 = v17 + 1;
        if (v17 == v26)
        {
LABEL_12:
          google::protobuf::RepeatedField<int>::Reserve(v16, v18);
          uint64_t v19 = *(void *)(a4 + 136);
          *(_DWORD *)(*(void *)(v15 + 24) + 4 * v17) = i;
          *(_DWORD *)(v15 + 16) = v18;
          uint64_t v15 = v19;
          if (!v19)
          {
            uint64_t v20 = *(void *)(a4 + 16);
            int64_t v21 = (google::protobuf::Arena *)(v20 & 0xFFFFFFFFFFFFFFFELL);
            if (v20) {
              int64_t v21 = *(google::protobuf::Arena **)v21;
            }
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v21);
            uint64_t v15 = v22;
            *(void *)(a4 + 136) = v22;
          }
          goto LABEL_20;
        }
      }
      *(_DWORD *)(*(void *)(v15 + 24) + 4 * v17) = i;
      *(_DWORD *)(v15 + 16) = v18;
LABEL_20:
      uint64_t v27 = *(void *)(*(void *)(a2 + 24) + 8 * i);
      uint64_t v28 = *(unsigned int *)(v15 + 40);
      if (v28 == *(_DWORD *)(v15 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v28 + 1);
      }
      *(void *)(*(void *)(v15 + 48) + 8 * v28) = v27;
      *(_DWORD *)(v15 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v28 + 1;
      uint64_t v13 = *(int *)(a4 + 32);
    }
  }
  uint64_t v29 = *a3;
  unint64_t v30 = a3[1];
  BOOL v31 = *a3 == v30;
  *(unsigned char *)(a4 + 1) = *a3 != v30;
  if (!v31)
  {
    int v40 = *(_DWORD *)(a2 + 16);
    int v41 = v13;
    if (v40 != v13) {
      google::MakeCheckOpString<int,int>((int)&v40, (int)&v41, "initial_solution.solution_size() == neighborhood.cp_model.variables_size()");
    }
    for (; v29 != v30; ++v29)
    {
      uint64_t v32 = *v29;
      uint64_t v33 = *(void *)(*(void *)(a4 + 40) + 8 * v32 + 8);
      *(_DWORD *)(v33 + 16) = 0;
      uint64_t v34 = *(void *)(a2 + 24);
      uint64_t v35 = *(void *)(v34 + 8 * v32);
      int v36 = *(_DWORD *)(v33 + 20);
      if (v36)
      {
        uint64_t v37 = v33;
      }
      else
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 16), 1);
        uint64_t v37 = *(void *)(*(void *)(a4 + 40) + 8 * v32 + 8);
        uint64_t v34 = *(void *)(a2 + 24);
        int v36 = *(_DWORD *)(v37 + 20);
      }
      **(void **)(v33 + 24) = v35;
      *(_DWORD *)(v33 + 16) = 1;
      uint64_t v38 = *(void *)(v34 + 8 * v32);
      uint64_t v39 = *(unsigned int *)(v37 + 16);
      if (v39 == v36) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v37 + 16), v39 + 1);
      }
      *(void *)(*(void *)(v37 + 24) + 8 * v39) = v38;
      *(_DWORD *)(v37 + 16) = v39 + 1;
    }
  }
}

void sub_23CC0E9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC0E9F4(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0EA08(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0EA1C(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0EA30(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0EA44(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = 0;
  uint64_t v6 = a3 + 8;
  uint64_t v7 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a3 + 8), 0);
  *(void *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 183) = 0;
  *(unsigned char *)(a3 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(_WORD *)a3 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v7, *(const operations_research::sat::CpModelProto **)(a1 + 56));
  if (v6 != a1 + 104) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a3 + 24, a1 + 120);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v9 != v8)
  {
    *(unsigned char *)(a3 + 1) = 0;
    do
      operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(void *)(a3 + 64) + 8 * *v9++ + 8));
    while (v9 != v8);
  }
}

void sub_23CC0EB00(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void sub_23CC0EB14(_Unwind_Exception *a1)
{
  operations_research::sat::Neighborhood::~Neighborhood(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(void *a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = *(int *)(a1[7] + 24);
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v44 = 0;
  if (!v8)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = a3[1];
    if (*a3 == v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if ((v8 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = (v8 - 1) >> 6;
  uint64_t v10 = operator new(8 * (v9 + 1));
  uint64_t v11 = v10;
  unint64_t v45 = v8;
  unint64_t v46 = v9 + 1;
  uint64_t v44 = v10;
  if (v8 >= 0x41) {
    unint64_t v12 = (v8 - 1) >> 6;
  }
  else {
    unint64_t v12 = 0;
  }
  v10[v12] = 0;
  if (v8 >= 0x40) {
    bzero(v10, 8 * (v8 >> 6));
  }
  if ((v8 & 0x3F) != 0) {
    v11[v8 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 & 0x3F));
  }
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
LABEL_13:
      unint64_t v15 = *v13++;
      *(void *)((char *)v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    }
    while (v13 != v14);
  }
LABEL_14:
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v17 = (int *)a1[44];
  uint64_t v16 = (int *)a1[45];
  if (v17 != v16)
  {
    uint64_t v38 = a4;
    uint64_t v39 = a2;
    int v40 = (int *)a1[45];
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = v42;
    while (1)
    {
      unint64_t v22 = *v17;
      if (((*(void *)((char *)v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      {
        if (v18 >= v19)
        {
          uint64_t v23 = (v18 - (char *)v20) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
          {
            uint64_t v42 = v21;
            uint64_t v43 = v19;
            int v41 = v20;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v19 - (char *)v20) >> 1 > v24) {
            unint64_t v24 = (v19 - (char *)v20) >> 1;
          }
          if ((unint64_t)(v19 - (char *)v20) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            if (v25 >> 62)
            {
              uint64_t v42 = v21;
              uint64_t v43 = v19;
              int v41 = v20;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v26 = operator new(4 * v25);
            uint64_t v27 = (int *)&v26[4 * v23];
            *uint64_t v27 = v22;
            uint64_t v21 = (uint64_t)(v27 + 1);
            if (v18 == (char *)v20) {
              goto LABEL_34;
            }
LABEL_31:
            unint64_t v28 = v18 - 4 - (char *)v20;
            if (v28 < 0xBC)
            {
              uint64_t v29 = (int *)v18;
              goto LABEL_33;
            }
            if (&v26[v18 - (char *)v20 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v18 - (char *)v20 - 4])
            {
              uint64_t v29 = (int *)v18;
              goto LABEL_33;
            }
            if (&v18[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4)
            {
              uint64_t v29 = (int *)v18;
              goto LABEL_33;
            }
            if ((unint64_t)((char *)v20 - v26) < 0x20)
            {
              uint64_t v29 = (int *)v18;
              goto LABEL_33;
            }
            uint64_t v32 = (v28 >> 2) + 1;
            uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v29 = (int *)&v18[-v33];
            uint64_t v27 = (int *)((char *)v27 - v33);
            uint64_t v34 = &v26[4 * v23 - 16];
            uint64_t v35 = v18 - 16;
            uint64_t v36 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              _OWORD *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 8;
            }
            while (v36);
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_33:
                int v30 = *--v29;
                *--uint64_t v27 = v30;
              }
              while (v29 != v20);
            }
          }
          else
          {
            int v26 = 0;
            uint64_t v27 = (int *)(4 * v23);
            *(_DWORD *)(4 * v23) = v22;
            uint64_t v21 = 4 * v23 + 4;
            if (v18 != (char *)v20) {
              goto LABEL_31;
            }
          }
LABEL_34:
          uint64_t v19 = &v26[4 * v25];
          if (v20)
          {
            BOOL v31 = (char *)v21;
            operator delete(v20);
            uint64_t v21 = (uint64_t)v31;
            int v18 = v31;
          }
          else
          {
            int v18 = (char *)v21;
          }
          uint64_t v20 = v27;
          uint64_t v16 = v40;
          goto LABEL_17;
        }
        *(_DWORD *)int v18 = v22;
        v18 += 4;
        uint64_t v21 = (uint64_t)v18;
      }
LABEL_17:
      if (++v17 == v16)
      {
        uint64_t v42 = v21;
        uint64_t v43 = v19;
        a2 = v39;
        a4 = v38;
        goto LABEL_50;
      }
    }
  }
  uint64_t v20 = 0;
LABEL_50:
  int v41 = v20;
  operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables((uint64_t)a1, a2, &v41, a4);
  if (v20) {
    operator delete(v20);
  }
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_23CC0EEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (v17)
  {
    operator delete(v17);
    uint64_t v16 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::NeighborhoodGenerator::ReadyToGenerate(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 88);
  unint64_t v3 = (absl::lts_2020_02_25 **)(v2 + 312);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 312), a2);
  uint64_t v6 = v2 + 352;
  uint64_t v5 = *(void *)(v2 + 352);
  uint64_t v4 = *(void *)(v6 + 8);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v7, v8, v9, v10, v11, v12, v13);
  return (int)(-858993459 * ((unint64_t)(v4 - v5) >> 3)) > 0;
}

double operations_research::sat::NeighborhoodGenerator::GetUCBScore(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)((char *)this + 40);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40), a2);
  uint64_t v12 = *((void *)this + 12);
  if (v12 >= 11)
  {
    double v14 = *((double *)this + 16);
    long double v15 = log((double)(uint64_t)a2);
    double v13 = sqrt((v15 + v15) / (double)v12) + v14;
  }
  else
  {
    double v13 = INFINITY;
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
  return v13;
}

void operations_research::sat::NeighborhoodGenerator::Synchronize(operations_research::sat::NeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 40);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40), a2);
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = (char *)*((void *)this + 7);
  unint64_t v6 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-v4] >> 4));
  if (v5 == (char *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(v4, v5, (uint64_t)&v42, v7, 1);
  uint64_t v15 = *((void *)this + 6);
  uint64_t v16 = *((void *)this + 7);
  if (v15 == v16)
  {
    int v18 = 0;
    goto LABEL_30;
  }
  int v17 = 0;
  int v18 = 0;
  do
  {
    (*(void (**)(operations_research::sat::NeighborhoodGenerator *, uint64_t))(*(void *)this + 40))(this, v15);
    ++*((void *)this + 12);
    if ((*(_DWORD *)(v15 + 8) - 3) > 1)
    {
      ++v18;
    }
    else
    {
      ++*((void *)this + 13);
      ++v17;
    }
    if ((*(unsigned int (**)(operations_research::sat::NeighborhoodGenerator *))(*(void *)this + 32))(this))
    {
      uint64_t v21 = *(void *)(v15 + 64);
      unint64_t v20 = *(void *)(v15 + 72);
    }
    else
    {
      unint64_t v20 = *(void *)(v15 + 40);
      uint64_t v21 = *(void *)(v15 + 56);
    }
    uint64_t v22 = v20 - v21;
    uint64_t v23 = ((v20 - v21) ^ v20) & (v21 ^ v20);
    uint64_t v24 = (v20 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (v23 >= 0) {
      uint64_t v24 = v22;
    }
    if (v24 <= 0) {
      uint64_t v25 = *((void *)this + 14) + 1;
    }
    else {
      uint64_t v25 = 0;
    }
    *((void *)this + 14) = v25;
    double v26 = *(double *)(v15 + 32);
    double v27 = fmax((double)v24, 0.0) / (v26 + 1.0);
    uint64_t v28 = *((void *)this + 12);
    double v29 = *((double *)this + 16);
    if (v28 > 100) {
      double v19 = v27 * 0.1 + v29 * 0.9;
    }
    else {
      double v19 = v29 + (v27 - v29) / (double)v28;
    }
    *((double *)this + 15) = v26 + *((double *)this + 15);
    *((double *)this + 16) = v19;
    v15 += 80;
  }
  while (v15 != v16);
  int v30 = v18 - v17;
  if (v18 == v17)
  {
LABEL_30:
    *((void *)this + 10) += 2 * v18;
    if (*((uint64_t *)this + 14) < 51) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v18 < v17)
  {
    uint64_t v31 = *((void *)this + 10);
    double v32 = *((double *)this + 9);
    int v33 = v17 - v18;
    do
    {
      uint64_t v34 = v31 + 1;
      double v35 = 1.0 / sqrt((double)(v31 + 2)) + 1.0;
      double v36 = 1.0 - (1.0 - v32) / v35;
      double v32 = v32 * v35;
      if (v32 >= v36) {
        double v32 = v36;
      }
      ++v31;
      --v33;
    }
    while (v33);
    *((double *)this + 9) = v32;
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v34 + 2 * v18;
    if (*((uint64_t *)this + 14) < 51) {
      goto LABEL_32;
    }
LABEL_31:
    *((void *)this + 14) = 0;
    *((double *)this + 11) = fmin(*((double *)this + 11) * 1.02, 60.0);
    goto LABEL_32;
  }
  uint64_t v37 = *((void *)this + 10);
  if (v17 < v18)
  {
    double v38 = *((double *)this + 9);
    do
    {
      uint64_t v39 = v37 + 2;
      ++v37;
      double v40 = 1.0 / sqrt((double)v39) + 1.0;
      double v41 = v38 / v40;
      double v38 = 1.0 - (1.0 - v38) * v40;
      if (v41 >= v38) {
        double v38 = v41;
      }
      --v30;
    }
    while (v30);
    *((double *)this + 9) = v38;
  }
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v37 + 2 * v17;
  if (*((uint64_t *)this + 14) >= 51) {
    goto LABEL_31;
  }
LABEL_32:
  *((void *)this + 7) = *((void *)this + 6);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v8, v9, v10, v11, v12, v13, v14);
}

void sub_23CC0F31C(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SimpleNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = *(void *)(a1 + 32);
  memset(&v22, 0, sizeof(v22));
  uint64_t v12 = *(unsigned char **)(v10 + 352);
  uint64_t v11 = *(unsigned char **)(v10 + 360);
  int64_t v13 = v11 - v12;
  if (v11 == v12)
  {
    begistd::string::size_type n = 0;
    int64_t v16 = 0;
  }
  else
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    begistd::string::size_type n = (int *)operator new(v11 - v12);
    uint64_t v15 = &begin[v13 >> 2];
    v22.__begin_ = begin;
    v22.__end_cap_.__value_ = v15;
    memcpy(begin, v12, v13);
    v22.__end_ = v15;
    int64_t v16 = 4 * (v13 >> 2);
    if (v16 >= 5)
    {
      long long v24 = xmmword_23CE812D0;
      if (v15 - 1 > begin)
      {
        uint64_t v17 = ((unint64_t)v16 >> 2) - 1;
        do
        {
          v23[0] = 0;
          v23[1] = v17;
          uint64_t v18 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, a3, v23);
          if (v18)
          {
            int v19 = *begin;
            *begistd::string::size_type n = begin[v18];
            begin[v18] = v19;
          }
          ++begin;
          --v17;
        }
        while (begin < v15 - 1);
        begistd::string::size_type n = v22.__begin_;
        int64_t v16 = (char *)v22.__end_ - (char *)v22.__begin_;
      }
    }
  }
  unint64_t v20 = v16 >> 2;
  signed int v21 = llround((1.0 - a5) * (double)(unint64_t)(v16 >> 2));
  if (v21 <= v20)
  {
    if (v21 < v20) {
      v22.__end_ = &begin[v21];
    }
  }
  else
  {
    std::vector<int>::__append(&v22, v21 - v20);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::FixGivenVariables(*(void *)(a1 + 32), a2, &v22.__begin_, a4);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_23CC0F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::VariableGraphNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = (*(void *)(v6 + 360) - *(void *)(v6 + 352)) >> 2;
  int v8 = vcvtpd_s64_f64((double)(int)v7 * a5);
  if (v8 == v7)
  {
    *(_WORD *)a4 = 0;
    uint64_t v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
    *(void *)(a4 + 152) = 0;
    *(unsigned char *)(a4 + 183) = 0;
    *(unsigned char *)(a4 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(_WORD *)a4 = 1;
    operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(v6 + 56));
    if (a4 + 8 != v6 + 104) {
      google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, v6 + 120);
    }
    return;
  }
  unint64_t v11 = *(int *)(*(void *)(v6 + 56) + 24);
  LODWORD(v171) = v8;
  LODWORD(v168) = 0;
  if (v8 < 1) {
    google::MakeCheckOpString<int,int>((int)&v171, (int)&v168, "target_size > 0");
  }
  uint64_t v168 = 0;
  unint64_t v169 = 0;
  unint64_t v170 = 0;
  if (v11)
  {
    if ((v11 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = (v11 - 1) >> 6;
    int64_t v13 = operator new(8 * (v12 + 1));
    unint64_t v169 = v11;
    unint64_t v170 = v12 + 1;
    uint64_t v168 = v13;
    if (v11 >= 0x41) {
      unint64_t v14 = (v11 - 1) >> 6;
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v13;
    v13[v14] = 0;
    if (v11 >= 0x40) {
      bzero(v13, 8 * (v11 >> 6));
    }
    if ((v11 & 0x3F) != 0) {
      v15[v11 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 & 0x3F));
    }
    int64_t v16 = v15;
  }
  else
  {
    int64_t v16 = 0;
  }
  unint64_t v165 = 0;
  int v166 = 0;
  int v167 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v17 = *(void *)(a1 + 32);
  unint64_t v158 = v16;
  if ((int)v7 < 1)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    int v18 = 0;
  }
  else
  {
    LODWORD(__p) = 0;
    HIDWORD(__p) = v7 - 1;
    uint64_t v171 = (uint64_t)__p;
    int v18 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, a3, (int *)&v171);
    unint64_t v20 = v163;
    unint64_t v19 = (unint64_t)v164;
  }
  unint64_t v21 = *(int *)(*(void *)(v17 + 352) + 4 * v18);
  *(void *)((char *)v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
  if ((unint64_t)v20 < v19)
  {
    *(_DWORD *)unint64_t v20 = v21;
    uint64_t v22 = (uint64_t)(v20 + 4);
    goto LABEL_36;
  }
  uint64_t v23 = (char *)v162;
  int64_t v24 = v20 - (unsigned char *)v162;
  uint64_t v25 = (v20 - (unsigned char *)v162) >> 2;
  unint64_t v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 62) {
    goto LABEL_197;
  }
  uint64_t v27 = v19 - (void)v162;
  if (v27 >> 1 > v26) {
    unint64_t v26 = v27 >> 1;
  }
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v26;
  }
  if (v28)
  {
    if (v28 >> 62) {
      goto LABEL_196;
    }
    double v29 = operator new(4 * v28);
    int v30 = &v29[4 * v25];
    uint64_t v31 = &v29[4 * v28];
    _DWORD *v30 = v21;
    uint64_t v22 = (uint64_t)(v30 + 1);
    int64_t v32 = v20 - v23;
    if (v20 != v23)
    {
LABEL_30:
      unint64_t v33 = v32 - 4;
      if (v33 >= 0x2C && (unint64_t)(v20 - v29 - v24) >= 0x20)
      {
        uint64_t v143 = (v33 >> 2) + 1;
        uint64_t v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v34 = &v20[-v144];
        int v30 = (_DWORD *)((char *)v30 - v144);
        unint64_t v145 = &v29[4 * v25 - 16];
        unint64_t v146 = v20 - 16;
        uint64_t v147 = v143 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          _OWORD *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 8;
        }
        while (v147);
        int64_t v16 = v158;
        if (v143 == (v143 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          uint64_t v162 = v30;
          uint64_t v163 = (char *)v22;
          uint64_t v164 = v31;
          if (!v23) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v34 = v20;
        int64_t v16 = v158;
      }
      do
      {
        int v35 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--int v30 = v35;
      }
      while (v34 != v23);
      goto LABEL_34;
    }
  }
  else
  {
    double v29 = 0;
    int v30 = (_DWORD *)(4 * v25);
    uint64_t v31 = 0;
    *(_DWORD *)(4 * v25) = v21;
    uint64_t v22 = 4 * v25 + 4;
    int64_t v32 = v20 - v23;
    if (v20 != v23) {
      goto LABEL_30;
    }
  }
  int64_t v16 = v158;
  uint64_t v162 = v30;
  uint64_t v163 = (char *)v22;
  uint64_t v164 = v31;
  if (v23) {
LABEL_35:
  }
    operator delete(v23);
LABEL_36:
  uint64_t v163 = (char *)v22;
  double v36 = v166;
  uint64_t v149 = a2;
  uint64_t v150 = a4;
  if (v166 >= v167)
  {
    double v38 = (char *)v165;
    int64_t v39 = v166 - (unsigned char *)v165;
    uint64_t v40 = (v166 - (unsigned char *)v165) >> 2;
    unint64_t v41 = v40 + 1;
    if (!((unint64_t)(v40 + 1) >> 62))
    {
      uint64_t v42 = v167 - (unsigned char *)v165;
      if ((v167 - (unsigned char *)v165) >> 1 > v41) {
        unint64_t v41 = v42 >> 1;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (!v43)
      {
        uint64_t v44 = 0;
        unint64_t v45 = (char *)(4 * v40);
        unint64_t v46 = 0;
        *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v21;
        uint64_t v47 = 4 * v40 + 4;
        int64_t v48 = v36 - v38;
        if (v36 == v38) {
          goto LABEL_59;
        }
LABEL_53:
        unint64_t v49 = v48 - 4;
        if (v49 < 0x2C) {
          goto LABEL_200;
        }
        if ((unint64_t)(v36 - v44 - v39) < 0x20) {
          goto LABEL_200;
        }
        uint64_t v50 = (v49 >> 2) + 1;
        uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v52 = &v36[-v51];
        v45 -= v51;
        int v53 = &v44[4 * v40 - 16];
        uint64_t v54 = v36 - 16;
        uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v56 = *(_OWORD *)v54;
          *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
          *(_OWORD *)int v53 = v56;
          v53 -= 32;
          v54 -= 32;
          v55 -= 8;
        }
        while (v55);
        double v36 = v52;
        if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_200:
          do
          {
            int v57 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v45 - 1) = v57;
            v45 -= 4;
          }
          while (v36 != v38);
        }
LABEL_59:
        unint64_t v165 = v45;
        int v166 = (char *)v47;
        int v167 = v46;
        if (v38) {
          operator delete(v38);
        }
        int64_t v16 = v158;
        int v166 = (char *)v47;
        std::string __p = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        uint64_t v37 = (int *)v162;
        if (v163 == v162) {
          goto LABEL_177;
        }
LABEL_62:
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v154 = v8;
        uint64_t v155 = 0;
        int64x2_t v152 = vdupq_n_s64(2uLL);
        while (1)
        {
          uint64_t v60 = v155;
          uint64_t v160 = v155;
          uint64_t v153 = v59;
          uint64_t v61 = *(void *)(*(void *)(a1 + 32) + 304) + 24 * v37[v59];
          uint64_t v63 = *(int **)v61;
          uint64_t v62 = *(int **)(v61 + 8);
          uint64_t v156 = v62;
          while (v63 != v62)
          {
            uint64_t v64 = *(void *)(*(void *)(a1 + 32) + 280) + 24 * *v63;
            unint64_t v66 = *(int **)v64;
            int v65 = *(int **)(v64 + 8);
            while (v66 != v65)
            {
              unint64_t v68 = *v66;
              uint64_t v69 = v16[v68 >> 6];
              if (((1 << v68) & v69) == 0)
              {
                v16[v68 >> 6] = (1 << v68) | v69;
                if (v60 < v58)
                {
                  *(_DWORD *)uint64_t v60 = v68;
                  uint64_t v67 = (uint64_t)(v60 + 4);
                  goto LABEL_68;
                }
                unint64_t v70 = (char *)__p;
                int64_t v71 = v60 - (unsigned char *)__p;
                uint64_t v72 = (v60 - (unsigned char *)__p) >> 2;
                unint64_t v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if ((v58 - (unsigned char *)__p) >> 1 > v73) {
                  unint64_t v73 = (v58 - (unsigned char *)__p) >> 1;
                }
                if ((unint64_t)(v58 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v74 = v73;
                }
                if (v74)
                {
                  if (v74 >> 62) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v75 = operator new(4 * v74);
                  uint64_t v76 = &v75[4 * v72];
                  *uint64_t v76 = v68;
                  uint64_t v67 = (uint64_t)(v76 + 1);
                  if (v60 != v70)
                  {
LABEL_82:
                    unint64_t v77 = v60 - 4 - v70;
                    if (v77 < 0xBC
                      || &v75[v71 - 4 - (v77 & 0xFFFFFFFFFFFFFFFCLL)] > &v75[v71 - 4]
                      || &v60[-(v77 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v60 - 4
                      || (unint64_t)(v60 - &v75[v71]) < 0x20)
                    {
                      unint64_t v78 = v60;
                    }
                    else
                    {
                      uint64_t v80 = (v77 >> 2) + 1;
                      uint64_t v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
                      unint64_t v78 = &v60[-v81];
                      uint64_t v76 = (_DWORD *)((char *)v76 - v81);
                      unint64_t v82 = &v75[4 * v72 - 16];
                      uint64_t v83 = v60 - 16;
                      uint64_t v84 = v80 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v85 = *(_OWORD *)v83;
                        *(v82 - 1) = *((_OWORD *)v83 - 1);
                        *unint64_t v82 = v85;
                        v82 -= 2;
                        v83 -= 32;
                        v84 -= 8;
                      }
                      while (v84);
                      if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_85:
                        uint64_t v58 = &v75[4 * v74];
                        std::string __p = v76;
                        uint64_t v161 = v58;
                        if (!v70) {
                          goto LABEL_68;
                        }
LABEL_89:
                        operator delete(v70);
LABEL_68:
                        uint64_t v160 = (char *)v67;
                        uint64_t v60 = (char *)v67;
                        int64_t v16 = v158;
                        goto LABEL_69;
                      }
                    }
                    do
                    {
                      int v79 = *((_DWORD *)v78 - 1);
                      v78 -= 4;
                      *--uint64_t v76 = v79;
                    }
                    while (v78 != v70);
                    goto LABEL_85;
                  }
                }
                else
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = (_DWORD *)(4 * v72);
                  *(_DWORD *)(4 * v72) = v68;
                  uint64_t v67 = 4 * v72 + 4;
                  if (v60 != v70) {
                    goto LABEL_82;
                  }
                }
                uint64_t v58 = &v75[4 * v74];
                std::string __p = v76;
                uint64_t v161 = v58;
                if (v70) {
                  goto LABEL_89;
                }
                goto LABEL_68;
              }
LABEL_69:
              ++v66;
            }
            ++v63;
            uint64_t v62 = v156;
          }
          uint64_t v155 = (char *)__p;
          if (v60 - (unsigned char *)__p >= 5 && v60 - 4 > __p)
          {
            unint64_t v86 = (unint64_t)(v60 - (unsigned char *)__p) >> 2;
            uint64_t v87 = (int *)__p;
            while (v86 == 1)
            {
LABEL_100:
              ++v87;
              --v86;
              if (v87 >= (int *)v60 - 1) {
                goto LABEL_127;
              }
            }
            if (!v86)
            {
              uint64_t v171 = a3;
              long long v172 = xmmword_23CE812E0;
              int64x2_t v173 = v152;
              long long v174 = xmmword_23CE812F0;
              uint64_t v175 = -1;
              unint64_t v97 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v171);
              goto LABEL_125;
            }
            unint64_t v88 = __clz(v86);
            if (((v86 << v88) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              uint64_t v89 = 64;
            }
            else {
              uint64_t v89 = 63;
            }
            unsigned __int8 v90 = v89 - v88;
            uint64_t v171 = a3;
            *(void *)&long long v172 = v89 - v88;
            unint64_t v91 = (v89 - v88) >> 5;
            if ((v90 & 0x1F) != 0) {
              unint64_t v92 = v91 + 1;
            }
            else {
              unint64_t v92 = v91;
            }
            unint64_t v93 = v90 / v92;
            *((void *)&v172 + 1) = v93;
            v173.i64[0] = v92;
            unint64_t v94 = (-1 << (v90 / v92)) & 0x100000000;
            if (v93 >= 0x40) {
              unint64_t v94 = 0;
            }
            *(void *)&long long v174 = v94;
            if ((v94 ^ 0x100000000) > v94 / v92)
            {
              unint64_t v93 = v90 / ++v92;
              *((void *)&v172 + 1) = v93;
              v173.i64[0] = v92;
              if (v93 > 0x3F)
              {
                v173.i64[1] = v92 - (v90 % v92);
                *(void *)&long long v174 = 0;
                LODWORD(v93) = 64;
                goto LABEL_122;
              }
              *(void *)&long long v174 = (-1 << (v90 / v92)) & 0x100000000;
            }
            v173.i64[1] = v92 - v90 % v92;
            if (v93 < 0x3F)
            {
              *((void *)&v174 + 1) = 0x80000000uLL >> v93 << (v93 + 1);
              unsigned int v95 = 0xFFFFFFFF >> -(char)v93;
              if (!v93) {
                unsigned int v95 = 0;
              }
              LODWORD(v175) = v95;
              if (v93 >= 0x1F) {
                unsigned int v96 = -1;
              }
              else {
                unsigned int v96 = 0xFFFFFFFF >> ~(_BYTE)v93;
              }
              goto LABEL_123;
            }
LABEL_122:
            *((void *)&v174 + 1) = 0;
            int v98 = -(int)v93;
            unsigned int v96 = -1;
            LODWORD(v175) = 0xFFFFFFFF >> v98;
LABEL_123:
            HIDWORD(v175) = v96;
            do
              unint64_t v97 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v171);
            while (v97 >= v86);
LABEL_125:
            if (v97)
            {
              int v99 = *v87;
              int *v87 = v87[v97];
              v87[v97] = v99;
            }
            goto LABEL_100;
          }
LABEL_127:
          uint64_t v100 = v155;
          if (v155 != v60) {
            break;
          }
LABEL_128:
          int64_t v16 = v158;
          if (v154 > (v166 - (unsigned char *)v165) >> 2)
          {
            uint64_t v59 = v153 + 1;
            uint64_t v37 = (int *)v162;
            if (v153 + 1 < (unint64_t)((v163 - (unsigned char *)v162) >> 2)) {
              continue;
            }
          }
          goto LABEL_177;
        }
        while (1)
        {
          if (v154 <= (v166 - (unsigned char *)v165) >> 2) {
            goto LABEL_128;
          }
          int v102 = *(_DWORD *)v100;
          uint64_t v103 = v163;
          if (v163 < v164)
          {
            *(_DWORD *)uint64_t v163 = v102;
            uint64_t v104 = (uint64_t)(v103 + 4);
            goto LABEL_156;
          }
          int v105 = (char *)v162;
          int64_t v106 = v163 - (unsigned char *)v162;
          uint64_t v107 = (v163 - (unsigned char *)v162) >> 2;
          unint64_t v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 62) {
            goto LABEL_194;
          }
          uint64_t v109 = v164 - (unsigned char *)v162;
          if ((v164 - (unsigned char *)v162) >> 1 > v108) {
            unint64_t v108 = v109 >> 1;
          }
          unint64_t v110 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v108;
          if (v110) {
            break;
          }
          unint64_t v112 = 0;
          uint64_t v113 = (char *)(4 * v107);
          *(_DWORD *)(4 * v107) = v102;
          uint64_t v104 = 4 * v107 + 4;
          if (v103 != v105) {
            goto LABEL_148;
          }
LABEL_154:
          uint64_t v162 = v113;
          uint64_t v163 = (char *)v104;
          uint64_t v164 = &v112[4 * v110];
          if (v105)
          {
            int v123 = v102;
            operator delete(v105);
            int v102 = v123;
          }
LABEL_156:
          uint64_t v163 = (char *)v104;
          if (((*(void *)(*(void *)(*(void *)(a1 + 32) + 328)
                           + (((unint64_t)v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102) & 1) == 0)
            goto LABEL_133;
          uint64_t v124 = v166;
          if (v166 >= v167)
          {
            uint64_t v125 = (char *)v165;
            int64_t v126 = v166 - (unsigned char *)v165;
            uint64_t v127 = (v166 - (unsigned char *)v165) >> 2;
            unint64_t v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62) {
LABEL_194:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v129 = v167 - (unsigned char *)v165;
            if ((v167 - (unsigned char *)v165) >> 1 > v128) {
              unint64_t v128 = v129 >> 1;
            }
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v128;
            }
            if (v130)
            {
              if (v130 >> 62) {
LABEL_193:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              int v131 = v102;
              unint64_t v132 = (char *)operator new(4 * v130);
              uint64_t v133 = &v132[4 * v127];
              *(_DWORD *)uint64_t v133 = v131;
              uint64_t v101 = (uint64_t)(v133 + 4);
              if (v124 == v125) {
                goto LABEL_175;
              }
LABEL_169:
              unint64_t v134 = v124 - 4 - v125;
              if (v134 < 0x2C) {
                goto LABEL_201;
              }
              if ((unint64_t)(v124 - &v132[v126]) < 0x20) {
                goto LABEL_201;
              }
              uint64_t v135 = (v134 >> 2) + 1;
              uint64_t v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v137 = &v124[-v136];
              v133 -= v136;
              uint64_t v138 = &v132[4 * v127 - 16];
              uint64_t v139 = v124 - 16;
              uint64_t v140 = v135 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v141 = *(_OWORD *)v139;
                *((_OWORD *)v138 - 1) = *((_OWORD *)v139 - 1);
                *(_OWORD *)uint64_t v138 = v141;
                v138 -= 32;
                v139 -= 32;
                v140 -= 8;
              }
              while (v140);
              uint64_t v124 = v137;
              if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_201:
                do
                {
                  int v142 = *((_DWORD *)v124 - 1);
                  v124 -= 4;
                  *((_DWORD *)v133 - 1) = v142;
                  v133 -= 4;
                }
                while (v124 != v125);
              }
            }
            else
            {
              unint64_t v132 = 0;
              uint64_t v133 = (char *)(4 * v127);
              *(_DWORD *)(4 * v127) = v102;
              uint64_t v101 = 4 * v127 + 4;
              if (v124 != v125) {
                goto LABEL_169;
              }
            }
LABEL_175:
            unint64_t v165 = v133;
            int v166 = (char *)v101;
            int v167 = &v132[4 * v130];
            if (v125) {
              operator delete(v125);
            }
            goto LABEL_132;
          }
          *(_DWORD *)int v166 = v102;
          uint64_t v101 = (uint64_t)(v124 + 4);
LABEL_132:
          int v166 = (char *)v101;
LABEL_133:
          v100 += 4;
          if (v100 == v60) {
            goto LABEL_128;
          }
        }
        if (v110 >> 62) {
          goto LABEL_193;
        }
        int v111 = *(_DWORD *)v100;
        unint64_t v112 = (char *)operator new(4 * v110);
        int v102 = v111;
        uint64_t v113 = &v112[4 * v107];
        *(_DWORD *)uint64_t v113 = v111;
        uint64_t v104 = (uint64_t)(v113 + 4);
        if (v103 == v105) {
          goto LABEL_154;
        }
LABEL_148:
        unint64_t v114 = v103 - 4 - v105;
        if (v114 < 0x2C) {
          goto LABEL_202;
        }
        if ((unint64_t)(v103 - &v112[v106]) < 0x20) {
          goto LABEL_202;
        }
        uint64_t v115 = (v114 >> 2) + 1;
        uint64_t v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v117 = &v103[-v116];
        v113 -= v116;
        uint64_t v118 = &v112[4 * v107 - 16];
        unint64_t v119 = v103 - 16;
        uint64_t v120 = v115 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v121 = *(_OWORD *)v119;
          *((_OWORD *)v118 - 1) = *((_OWORD *)v119 - 1);
          *(_OWORD *)uint64_t v118 = v121;
          v118 -= 32;
          v119 -= 32;
          v120 -= 8;
        }
        while (v120);
        uint64_t v103 = v117;
        if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_202:
          do
          {
            int v122 = *((_DWORD *)v103 - 1);
            v103 -= 4;
            *((_DWORD *)v113 - 1) = v122;
            v113 -= 4;
          }
          while (v103 != v105);
        }
        goto LABEL_154;
      }
      if (!(v43 >> 62))
      {
        uint64_t v44 = (char *)operator new(4 * v43);
        unint64_t v45 = &v44[4 * v40];
        unint64_t v46 = &v44[4 * v43];
        *(_DWORD *)unint64_t v45 = v21;
        uint64_t v47 = (uint64_t)(v45 + 4);
        int64_t v48 = v36 - v38;
        if (v36 == v38) {
          goto LABEL_59;
        }
        goto LABEL_53;
      }
LABEL_196:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_197:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)int v166 = v21;
  int v166 = v36 + 4;
  std::string __p = 0;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  uint64_t v37 = (int *)v162;
  if (v163 != v162) {
    goto LABEL_62;
  }
LABEL_177:
  operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(*(void **)(a1 + 32), v149, (int **)&v165, v150);
  if (__p) {
    operator delete(__p);
  }
  if (v162)
  {
    uint64_t v163 = (char *)v162;
    operator delete(v162);
  }
  if (v165)
  {
    int v166 = (char *)v165;
    operator delete(v165);
  }
  if (v16) {
    operator delete(v16);
  }
}

void sub_23CC10164()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_23CC1016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v33 = a27;
    if (!a27)
    {
LABEL_3:
      uint64_t v34 = a30;
      if (!a30) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v33 = a27;
    if (!a27) {
      goto LABEL_3;
    }
  }
  operator delete(v33);
  uint64_t v34 = a30;
  if (!a30)
  {
LABEL_4:
    if (!v31) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v34);
  if (!v31) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConstraintGraphNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 288) - *(void *)(v6 + 280)) >> 3);
  if (v126)
  {
    uint64_t v7 = (*(void *)(v6 + 360) - *(void *)(v6 + 352)) >> 2;
    int v8 = vcvtpd_s64_f64((double)(int)v7 * a5);
    if (v8 != v7)
    {
      unint64_t v10 = *(int *)(*(void *)(v6 + 56) + 24);
      LODWORD(v151) = v8;
      LODWORD(v146) = 0;
      if (v8 < 1) {
        google::MakeCheckOpString<int,int>((int)&v151, (int)&v146, "target_size > 0");
      }
      int v11 = v126;
      unint64_t v146 = 0;
      unint64_t v147 = 0;
      unint64_t v148 = 0;
      if (v10)
      {
        if ((v10 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = (v10 - 1) >> 6;
        int64_t v13 = operator new(8 * (v12 + 1));
        unint64_t v147 = v10;
        unint64_t v148 = v12 + 1;
        unint64_t v146 = v13;
        if (v10 >= 0x41) {
          unint64_t v14 = (v10 - 1) >> 6;
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v15 = (char *)v13;
        v13[v14] = 0;
        if (v10 >= 0x40) {
          bzero(v13, 8 * (v10 >> 6));
        }
        int v11 = v126;
        if ((v10 & 0x3F) != 0) {
          *(void *)&v15[8 * (v10 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v10 & 0x3F));
        }
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        unint64_t v16 = v126 << 32;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        unint64_t v142 = 0;
        if (!(v126 << 32))
        {
LABEL_20:
          uint64_t v137 = 0;
          uint64_t v138 = 0;
          uint64_t v139 = 0;
          uint64_t v123 = a2;
          uint64_t v124 = a4;
          if (v11 <= 0)
          {
            int64_t v24 = 0;
            int v19 = 0;
            unint64_t v21 = 0;
            unint64_t v20 = 0;
            int64_t v25 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 1;
          }
          else
          {
            LODWORD(__p) = 0;
            HIDWORD(__p) = v11 - 1;
            uint64_t v151 = __p;
            int v18 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, a3, (int *)&v151);
            int v19 = v18;
            unint64_t v21 = v138;
            unint64_t v20 = v139;
            if (v138 < v139)
            {
              *(_DWORD *)uint64_t v138 = v18;
              uint64_t v22 = (uint64_t)(v21 + 4);
              uint64_t v23 = a1;
LABEL_38:
              uint64_t v37 = v15;
              uint64_t v138 = (char *)v22;
              *(void *)((char *)v140 + (((unint64_t)*(int *)(v22 - 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v22 - 4);
              std::string __p = 0;
              uint64_t v135 = 0;
              uint64_t v136 = 0;
              double v38 = 0;
              int v131 = 0;
              unint64_t v129 = v8;
              int64x2_t v127 = vdupq_n_s64(2uLL);
              uint64_t v133 = v15;
              while (1)
              {
                int64_t v39 = (char *)v137;
                uint64_t v40 = v138;
                if (v137 == v138)
                {
LABEL_137:
                  operations_research::sat::NeighborhoodGeneratorHelper::RelaxGivenVariables(*(void **)(v23 + 32), v123, (int **)&v143, v124);
                  if (__p)
                  {
                    uint64_t v135 = (int *)__p;
                    operator delete(__p);
                  }
                  if (v137)
                  {
                    uint64_t v138 = (char *)v137;
                    operator delete(v137);
                  }
                  if (v140) {
                    operator delete(v140);
                  }
                  if (v143) {
                    operator delete(v143);
                  }
                  if (v37) {
                    operator delete(v37);
                  }
                  return;
                }
                unint64_t v41 = (unint64_t)(v138 - (unsigned char *)v137) >> 2;
                BOOL v42 = __OFSUB__(v41, 1);
                int v43 = v41 - 1;
                if (v43 < 0 != v42)
                {
                  int v45 = 0;
                  uint64_t v44 = (void *)a3;
                }
                else
                {
                  LODWORD(v149) = 0;
                  HIDWORD(v149) = v43;
                  uint64_t v151 = v149;
                  uint64_t v44 = (void *)a3;
                  int v45 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v149, a3, (int *)&v151);
                  int64_t v39 = (char *)v137;
                  uint64_t v40 = v138;
                }
                uint64_t v46 = 4 * v45;
                int v47 = *(_DWORD *)&v39[v46];
                int v49 = *((_DWORD *)v40 - 1);
                int64_t v48 = (int *)(v40 - 4);
                *(_DWORD *)&v39[v46] = v49;
                int *v48 = v47;
                uint64_t v138 = (char *)v48;
                int v150 = v126;
                LODWORD(v151) = v47;
                if (v47 >= (int)v126) {
                  google::MakeCheckOpString<int,int>((int)&v151, (int)&v150, "contraint_index < num_constraints");
                }
                uint64_t v50 = *(void *)(*(void *)(v23 + 32) + 280);
                uint64_t v51 = (char **)(v50 + 24 * v47);
                if (&__p != (void **)v51)
                {
                  uint64_t v52 = *(char **)(v50 + 24 * v47 + 8);
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&__p, *v51, v52, (v52 - *v51) >> 2);
                }
                uint64_t v54 = (int *)__p;
                int v53 = v135;
                if ((char *)v135 - (unsigned char *)__p < 5 || (uint64_t v55 = v135 - 1, v135 - 1 <= __p))
                {
                  if (__p == v135) {
                    goto LABEL_39;
                  }
LABEL_77:
                  unint64_t v130 = v53;
                  while (2)
                  {
                    int v69 = *v54;
                    int v70 = *v54;
                    unint64_t v71 = (unint64_t)*v54 >> 6;
                    uint64_t v72 = 1 << *v54;
                    uint64_t v73 = *(void *)&v37[8 * v71];
                    if ((v72 & v73) != 0) {
                      goto LABEL_79;
                    }
                    uint64_t v74 = 8 * v71;
                    *(void *)&v37[v74] = v72 | v73;
                    double v38 = v144;
                    if ((*(void *)(*(void *)(*(void *)(v23 + 32) + 328) + v74) & v72) == 0) {
                      goto LABEL_105;
                    }
                    if (v144 < v131)
                    {
                      *(_DWORD *)uint64_t v144 = v69;
                      uint64_t v75 = (uint64_t)(v38 + 4);
                      goto LABEL_104;
                    }
                    uint64_t v76 = (char *)v143;
                    int64_t v77 = v144 - (unsigned char *)v143;
                    uint64_t v78 = (v144 - (unsigned char *)v143) >> 2;
                    unint64_t v79 = v78 + 1;
                    if ((unint64_t)(v78 + 1) >> 62) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    if ((v131 - (unsigned char *)v143) >> 1 > v79) {
                      unint64_t v79 = (v131 - (unsigned char *)v143) >> 1;
                    }
                    if ((unint64_t)(v131 - (unsigned char *)v143) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v80 = v79;
                    }
                    if (v80)
                    {
                      if (v80 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      uint64_t v81 = (char *)operator new(4 * v80);
                      int v53 = v130;
                      unint64_t v82 = &v81[4 * v78];
                      *(_DWORD *)unint64_t v82 = v69;
                      uint64_t v75 = (uint64_t)(v82 + 4);
                      if (v38 != v76)
                      {
LABEL_93:
                        unint64_t v83 = v38 - 4 - v76;
                        if (v83 < 0x2C)
                        {
                          uint64_t v23 = a1;
                          goto LABEL_101;
                        }
                        int v53 = v130;
                        unint64_t v84 = v38 - &v81[v77];
                        uint64_t v23 = a1;
                        if (v84 < 0x20) {
                          goto LABEL_167;
                        }
                        uint64_t v85 = (v83 >> 2) + 1;
                        uint64_t v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
                        uint64_t v87 = &v38[-v86];
                        v82 -= v86;
                        unint64_t v88 = &v81[4 * v78 - 16];
                        uint64_t v89 = v38 - 16;
                        uint64_t v90 = v85 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v91 = *(_OWORD *)v89;
                          *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
                          *(_OWORD *)unint64_t v88 = v91;
                          v88 -= 32;
                          v89 -= 32;
                          v90 -= 8;
                        }
                        while (v90);
                        double v38 = v87;
                        int v53 = v130;
                        if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_167:
                          do
                          {
LABEL_101:
                            int v92 = *((_DWORD *)v38 - 1);
                            v38 -= 4;
                            *((_DWORD *)v82 - 1) = v92;
                            v82 -= 4;
                          }
                          while (v38 != v76);
                        }
LABEL_102:
                        uint64_t v143 = v82;
                        int v131 = &v81[4 * v80];
                        unint64_t v145 = v131;
                        if (v76)
                        {
                          operator delete(v76);
                          int v53 = v130;
                        }
LABEL_104:
                        uint64_t v144 = (char *)v75;
                        double v38 = (char *)v75;
                        uint64_t v37 = v133;
LABEL_105:
                        if (v129 == (v38 - (unsigned char *)v143) >> 2) {
                          goto LABEL_39;
                        }
                        unint64_t v132 = v54;
                        uint64_t v93 = *(void *)(*(void *)(v23 + 32) + 304) + 24 * v70;
                        unint64_t v94 = *(int **)v93;
                        unsigned int v95 = *(int **)(v93 + 8);
                        if (*(int **)v93 == v95)
                        {
LABEL_79:
                          if (++v54 == v53) {
                            goto LABEL_39;
                          }
                          continue;
                        }
                        while (2)
                        {
                          unint64_t v97 = *v94;
                          uint64_t v98 = *((void *)v140 + (v97 >> 6));
                          if (((1 << v97) & v98) == 0)
                          {
                            *((void *)v140 + (v97 >> 6)) = (1 << v97) | v98;
                            int v99 = v138;
                            if (v138 < v139)
                            {
                              *(_DWORD *)uint64_t v138 = v97;
                              uint64_t v96 = (uint64_t)(v99 + 4);
                            }
                            else
                            {
                              uint64_t v100 = (char *)v137;
                              int64_t v101 = v138 - (unsigned char *)v137;
                              uint64_t v102 = (v138 - (unsigned char *)v137) >> 2;
                              unint64_t v103 = v102 + 1;
                              if ((unint64_t)(v102 + 1) >> 62) {
                                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                              }
                              uint64_t v104 = v139 - (unsigned char *)v137;
                              if ((v139 - (unsigned char *)v137) >> 1 > v103) {
                                unint64_t v103 = v104 >> 1;
                              }
                              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v105 = v103;
                              }
                              if (v105)
                              {
                                if (v105 >> 62) {
                                  std::__throw_bad_array_new_length[abi:ne180100]();
                                }
                                int64_t v106 = (char *)operator new(4 * v105);
                                uint64_t v107 = &v106[4 * v102];
                                *(_DWORD *)uint64_t v107 = v97;
                                uint64_t v96 = (uint64_t)(v107 + 4);
                                if (v99 != v100)
                                {
LABEL_122:
                                  unint64_t v108 = v99 - 4 - v100;
                                  if (v108 < 0x2C) {
                                    goto LABEL_168;
                                  }
                                  if ((unint64_t)(v99 - &v106[v101]) < 0x20) {
                                    goto LABEL_168;
                                  }
                                  uint64_t v109 = (v108 >> 2) + 1;
                                  uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                                  int v111 = &v99[-v110];
                                  v107 -= v110;
                                  unint64_t v112 = &v106[4 * v102 - 16];
                                  uint64_t v113 = v99 - 16;
                                  uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    long long v115 = *(_OWORD *)v113;
                                    *((_OWORD *)v112 - 1) = *((_OWORD *)v113 - 1);
                                    *(_OWORD *)unint64_t v112 = v115;
                                    v112 -= 32;
                                    v113 -= 32;
                                    v114 -= 8;
                                  }
                                  while (v114);
                                  int v99 = v111;
                                  if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
                                  {
LABEL_168:
                                    do
                                    {
                                      int v116 = *((_DWORD *)v99 - 1);
                                      v99 -= 4;
                                      *((_DWORD *)v107 - 1) = v116;
                                      v107 -= 4;
                                    }
                                    while (v99 != v100);
                                  }
                                }
                              }
                              else
                              {
                                int64_t v106 = 0;
                                uint64_t v107 = (char *)(4 * v102);
                                *(_DWORD *)(4 * v102) = v97;
                                uint64_t v96 = 4 * v102 + 4;
                                if (v99 != v100) {
                                  goto LABEL_122;
                                }
                              }
                              uint64_t v137 = v107;
                              uint64_t v138 = (char *)v96;
                              uint64_t v139 = &v106[4 * v105];
                              if (v100) {
                                operator delete(v100);
                              }
                              uint64_t v37 = v133;
                            }
                            uint64_t v138 = (char *)v96;
                          }
                          if (++v94 == v95)
                          {
                            uint64_t v23 = a1;
                            uint64_t v54 = v132;
                            int v53 = v130;
                            goto LABEL_79;
                          }
                          continue;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v81 = 0;
                      unint64_t v82 = (char *)(4 * v78);
                      *(_DWORD *)(4 * v78) = v69;
                      uint64_t v75 = 4 * v78 + 4;
                      if (v38 != v76) {
                        goto LABEL_93;
                      }
                    }
                    break;
                  }
                  uint64_t v23 = a1;
                  goto LABEL_102;
                }
                unint64_t v56 = (unint64_t)((char *)v135 - (unsigned char *)__p) >> 2;
                do
                {
                  if (v56 == 1) {
                    goto LABEL_50;
                  }
                  if (!v56)
                  {
                    uint64_t v151 = v44;
                    long long v152 = xmmword_23CE812E0;
                    int64x2_t v153 = v127;
                    long long v154 = xmmword_23CE812F0;
                    uint64_t v155 = -1;
                    unint64_t v66 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t *)&v151);
                    goto LABEL_74;
                  }
                  unint64_t v57 = __clz(v56);
                  uint64_t v58 = 63;
                  if (((v56 << v57) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
                    uint64_t v58 = 64;
                  }
                  unsigned __int8 v59 = v58 - v57;
                  uint64_t v151 = v44;
                  *(void *)&long long v152 = v58 - v57;
                  unint64_t v60 = (v58 - v57) >> 5;
                  if ((v59 & 0x1F) != 0) {
                    unint64_t v61 = v60 + 1;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  unint64_t v62 = v59 / v61;
                  *((void *)&v152 + 1) = v62;
                  v153.i64[0] = v61;
                  unint64_t v63 = (-1 << (v59 / v61)) & 0x100000000;
                  if (v62 >= 0x40) {
                    unint64_t v63 = 0;
                  }
                  *(void *)&long long v154 = v63;
                  if ((v63 ^ 0x100000000) > v63 / v61)
                  {
                    unint64_t v62 = v59 / ++v61;
                    *((void *)&v152 + 1) = v62;
                    v153.i64[0] = v61;
                    if (v62 > 0x3F)
                    {
                      v153.i64[1] = v61 - (v59 % v61);
                      *(void *)&long long v154 = 0;
                      LODWORD(v62) = 64;
                      goto LABEL_71;
                    }
                    *(void *)&long long v154 = (-1 << (v59 / v61)) & 0x100000000;
                  }
                  v153.i64[1] = v61 - v59 % v61;
                  if (v62 < 0x3F)
                  {
                    *((void *)&v154 + 1) = 0x80000000uLL >> v62 << (v62 + 1);
                    unsigned int v64 = 0xFFFFFFFF >> -(char)v62;
                    if (!v62) {
                      unsigned int v64 = 0;
                    }
                    LODWORD(v155) = v64;
                    if (v62 >= 0x1F) {
                      unsigned int v65 = -1;
                    }
                    else {
                      unsigned int v65 = 0xFFFFFFFF >> ~(_BYTE)v62;
                    }
                    goto LABEL_72;
                  }
LABEL_71:
                  *((void *)&v154 + 1) = 0;
                  int v67 = -(int)v62;
                  unsigned int v65 = -1;
                  LODWORD(v155) = 0xFFFFFFFF >> v67;
LABEL_72:
                  HIDWORD(v155) = v65;
                  do
                    unint64_t v66 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t *)&v151);
                  while (v66 >= v56);
LABEL_74:
                  if (v66)
                  {
                    int v68 = *v54;
                    *uint64_t v54 = v54[v66];
                    v54[v66] = v68;
                  }
LABEL_50:
                  ++v54;
                  --v56;
                }
                while (v54 < v55);
                uint64_t v54 = (int *)__p;
                int v53 = v135;
                if (__p != v135) {
                  goto LABEL_77;
                }
LABEL_39:
                if (v129 <= (v38 - (unsigned char *)v143) >> 2) {
                  goto LABEL_137;
                }
              }
            }
            int64_t v24 = (char *)v137;
            int64_t v25 = v138 - (unsigned char *)v137;
            uint64_t v26 = (v138 - (unsigned char *)v137) >> 2;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
          }
          uint64_t v28 = v20 - v24;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            if (v29 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v30 = (char *)operator new(4 * v29);
            uint64_t v31 = &v30[4 * v26];
            int64_t v32 = &v30[4 * v29];
            *(_DWORD *)uint64_t v31 = v19;
            uint64_t v22 = (uint64_t)(v31 + 4);
            int64_t v33 = v21 - v24;
            if (v21 != v24)
            {
LABEL_32:
              unint64_t v34 = v33 - 4;
              if (v34 >= 0x2C && (unint64_t)(v21 - v30 - v25) >= 0x20)
              {
                uint64_t v117 = (v34 >> 2) + 1;
                uint64_t v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
                int v35 = &v21[-v118];
                v31 -= v118;
                unint64_t v119 = &v30[4 * v26 - 16];
                uint64_t v120 = v21 - 16;
                uint64_t v121 = v117 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v122 = *(_OWORD *)v120;
                  *((_OWORD *)v119 - 1) = *((_OWORD *)v120 - 1);
                  *(_OWORD *)unint64_t v119 = v122;
                  v119 -= 32;
                  v120 -= 32;
                  v121 -= 8;
                }
                while (v121);
                uint64_t v23 = a1;
                if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_36:
                  uint64_t v137 = v31;
                  uint64_t v138 = (char *)v22;
                  uint64_t v139 = v32;
                  if (!v24) {
                    goto LABEL_38;
                  }
LABEL_37:
                  operator delete(v24);
                  goto LABEL_38;
                }
              }
              else
              {
                int v35 = v21;
                uint64_t v23 = a1;
              }
              do
              {
                int v36 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v31 - 1) = v36;
                v31 -= 4;
              }
              while (v35 != v24);
              goto LABEL_36;
            }
          }
          else
          {
            int v30 = 0;
            uint64_t v31 = (char *)(4 * v26);
            int64_t v32 = 0;
            *(_DWORD *)(4 * v26) = v19;
            uint64_t v22 = 4 * v26 + 4;
            int64_t v33 = v21 - v24;
            if (v21 != v24) {
              goto LABEL_32;
            }
          }
          uint64_t v23 = a1;
          uint64_t v137 = v31;
          uint64_t v138 = (char *)v22;
          uint64_t v139 = v32;
          if (!v24) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        unint64_t v145 = 0;
        unint64_t v16 = v126 << 32;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        unint64_t v142 = 0;
        if (!(v126 << 32)) {
          goto LABEL_20;
        }
      }
      if ((v16 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v140 = operator new(8 * (((unint64_t)(v11 - 1) >> 6) + 1));
      uint64_t v141 = 0;
      unint64_t v142 = ((unint64_t)(v11 - 1) >> 6) + 1;
      std::vector<BOOL>::__construct_at_end[abi:ne180100](&v140, v11, 0);
      goto LABEL_20;
    }
  }
  *(_WORD *)a4 = 0;
  uint64_t v17 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a4 + 8), 0);
  *(void *)(a4 + 152) = 0;
  *(unsigned char *)(a4 + 183) = 0;
  *(unsigned char *)(a4 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(_WORD *)a4 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v17, *(const operations_research::sat::CpModelProto **)(v6 + 56));
  if (a4 + 8 != v6 + 104) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a4 + 24, v6 + 120);
  }
}

void sub_23CC10D3C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_23CC10D44()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 152));
}

void sub_23CC10D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
  {
    operator delete(__p);
    int v36 = a28;
    if (!a28)
    {
LABEL_3:
      uint64_t v37 = a31;
      if (!a31) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v36 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  operator delete(v36);
  uint64_t v37 = a31;
  if (!a31)
  {
LABEL_4:
    double v38 = a34;
    if (!a34) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v37);
  double v38 = a34;
  if (!a34)
  {
LABEL_5:
    if (!a24) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v38);
  if (!a24) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a24);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(int *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_WORD *)a5 = 0;
  uint64_t v9 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a5 + 8), 0);
  *(void *)(a5 + 152) = 0;
  *(unsigned char *)(a5 + 183) = 0;
  *(unsigned char *)(a5 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(_WORD *)a5 = 1;
  int v111 = v9;
  operations_research::sat::CpModelProto::CopyFrom(v9, *(const operations_research::sat::CpModelProto **)(a4 + 56));
  if (v111 != (operations_research::sat::CpModelProto *)(a4 + 104)) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a5 + 24, a4 + 120);
  }
  uint64_t v10 = *(void *)(a4 + 256);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 264) - v10) >> 3) < 0x14) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (uint64_t)(*(void *)(v10 + 464) - *(void *)(v10 + 456)) >> 2;
  }
  *(unsigned char *)(a5 + 1) = a2 < v11;
  std::set<int>::set[abi:ne180100]<int const*>(&v123, a1, &a1[a2]);
  unint64_t v12 = *(void **)(a4 + 256);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 264) - (void)v12) >> 3);
  if (v13 >= 0x14)
  {
    unint64_t v14 = (int *)v12[57];
    uint64_t v15 = (int *)v12[58];
    if (v15 != v14)
    {
      uint64_t v113 = a4;
      do
      {
        int v16 = *v14;
        for (uint64_t i = v124; i; uint64_t i = (uint64_t *)*i)
        {
          int v30 = *((_DWORD *)i + 7);
          if (v16 >= v30)
          {
            if (v30 >= v16) {
              goto LABEL_10;
            }
            ++i;
          }
        }
        uint64_t v18 = *(void *)(*(void *)(a5 + 64) + 8 * v16 + 8);
        int v19 = *(_DWORD *)(v18 + 16);
        if (v19)
        {
          LODWORD(v12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *(_DWORD *)(v18 + 16);
          LODWORD(v119) = 1;
          if (v19 != 1) {
            google::MakeCheckOpString<int,int>((int)&v120, (int)&v119, "interval_ct.enforcement_literal().size() == 1");
          }
          int v20 = **(_DWORD **)(v18 + 24);
          if (~v20 <= v20) {
            int v21 = **(_DWORD **)(v18 + 24);
          }
          else {
            int v21 = ~v20;
          }
          uint64_t v22 = 8 * v21;
          uint64_t v23 = *(unsigned int *)(*(void *)(a3 + 24) + v22);
          uint64_t v24 = *(void *)(*(void *)(a5 + 40) + v22 + 8);
          *(_DWORD *)(v24 + 16) = 0;
          int v25 = *(_DWORD *)(v24 + 20);
          uint64_t v26 = v24;
          if (!v25)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 16), 1);
            uint64_t v26 = *(void *)(*(void *)(a5 + 40) + 8 * v21 + 8);
            int v25 = *(_DWORD *)(v26 + 20);
          }
          **(void **)(v24 + 24) = (int)v23;
          *(_DWORD *)(v24 + 16) = 1;
          uint64_t v27 = *(unsigned int *)(v26 + 16);
          if (v27 == v25) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 16), v27 + 1);
          }
          *(void *)(*(void *)(v26 + 24) + 8 * v27) = (int)v23;
          *(_DWORD *)(v26 + 16) = v27 + 1;
          if (v20 >= 0 != (v23 != 0))
          {
            uint64_t v28 = v124;
            unint64_t v29 = &v124;
LABEL_28:
            uint64_t v31 = v29;
            if (v28)
            {
              do
              {
                unint64_t v29 = (uint64_t **)v28;
                int v32 = *((_DWORD *)v28 + 7);
                if (v16 < v32)
                {
                  uint64_t v28 = *v29;
                  goto LABEL_28;
                }
                if (v32 >= v16) {
                  goto LABEL_10;
                }
                uint64_t v28 = v29[1];
              }
              while (v28);
              uint64_t v31 = v29 + 1;
            }
            int64_t v33 = operator new(0x20uLL);
            v33[7] = v16;
            *(void *)int64_t v33 = 0;
            *((void *)v33 + 1) = 0;
            *((void *)v33 + 2) = v29;
            *uint64_t v31 = (uint64_t *)v33;
            if (*v123)
            {
              uint64_t v123 = (void *)*v123;
              int64_t v33 = *v31;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v124, (uint64_t *)v33);
            ++v125;
          }
        }
LABEL_10:
        ++v14;
      }
      while (v14 != v15);
      unint64_t v12 = *(void **)(v113 + 256);
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v113 + 264) - (void)v12) >> 3);
    }
    if (v13 >= 0x15)
    {
      unint64_t v112 = (int *)v12[61];
      if (v112 != (int *)v12[60])
      {
        unint64_t v34 = (int *)v12[60];
        long long v115 = (unsigned int *)(a5 + 48);
        while (1)
        {
          uint64_t v114 = v34;
          uint64_t v35 = *v34;
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          long long v122 = 0;
          uint64_t v36 = *(void *)(*(void *)(a5 + 64) + 8 * v35 + 8);
          uint64_t v37 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
          if (*(_DWORD *)(v36 + 60) == 20) {
            uint64_t v37 = *(uint64_t **)(v36 + 48);
          }
          uint64_t v38 = *((int *)v37 + 4);
          if (v38)
          {
            int64_t v39 = 0;
            uint64_t v40 = (int *)v37[3];
            unint64_t v41 = &v40[v38];
            while (1)
            {
              int v43 = *v40;
              for (uint64_t j = v124; j; uint64_t j = (uint64_t *)*j)
              {
                int v50 = *((_DWORD *)j + 7);
                if (v43 >= v50)
                {
                  if (v50 >= v43) {
                    goto LABEL_47;
                  }
                  ++j;
                }
              }
              uint64_t v45 = *(void *)(*(void *)(a5 + 64) + 8 * v43 + 8);
              if (*(_DWORD *)(v45 + 60) == 19)
              {
                uint64_t v46 = *(void *)(v45 + 48);
                uint64_t v47 = *(void *)(a3 + 24);
                if (!*(void *)(v47 + 8 * *(int *)(v46 + 24))) {
                  goto LABEL_47;
                }
                uint64_t v48 = *(void *)(v47 + 8 * *(int *)(v46 + 16));
                int v49 = v122;
                if (v39 >= v122)
                {
LABEL_60:
                  uint64_t v52 = v120;
                  uint64_t v53 = (v39 - v120) >> 4;
                  unint64_t v54 = v53 + 1;
                  if ((unint64_t)(v53 + 1) >> 60) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v55 = v49 - v120;
                  if (v55 >> 3 > v54) {
                    unint64_t v54 = v55 >> 3;
                  }
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v56 = v54;
                  }
                  if (v56)
                  {
                    if (v56 >> 60) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    unint64_t v57 = (char *)operator new(16 * v56);
                    uint64_t v58 = (uint64_t)&v57[16 * v53];
                    *(void *)uint64_t v58 = v48;
                    *(_DWORD *)(v58 + 8) = v43;
                    uint64_t v59 = v58;
                    if (v39 == v52) {
                      goto LABEL_73;
                    }
                    do
                    {
LABEL_71:
                      *(_OWORD *)(v59 - 16) = *((_OWORD *)v39 - 1);
                      v59 -= 16;
                      v39 -= 16;
                    }
                    while (v39 != v52);
                    int64_t v39 = v120;
                  }
                  else
                  {
                    unint64_t v57 = 0;
                    uint64_t v58 = 16 * v53;
                    *(void *)uint64_t v58 = v48;
                    *(_DWORD *)(v58 + 8) = v43;
                    uint64_t v59 = 16 * v53;
                    if (v39 != v52) {
                      goto LABEL_71;
                    }
                  }
LABEL_73:
                  BOOL v42 = (char *)(v58 + 16);
                  uint64_t v120 = (char *)v59;
                  uint64_t v121 = v58 + 16;
                  long long v122 = &v57[16 * v56];
                  if (v39) {
                    operator delete(v39);
                  }
                  goto LABEL_46;
                }
              }
              else
              {
                uint64_t v51 = *(void *)(a3 + 24);
                if (!*(void *)(v51 + 8 * (int)qword_26AEE1BE0)) {
                  goto LABEL_47;
                }
                uint64_t v48 = *(void *)(v51 + 8 * dword_26AEE1BD8);
                int v49 = v122;
                if (v39 >= v122) {
                  goto LABEL_60;
                }
              }
              *(void *)int64_t v39 = v48;
              *((_DWORD *)v39 + 2) = v43;
              BOOL v42 = v39 + 16;
LABEL_46:
              uint64_t v121 = (uint64_t)v42;
              int64_t v39 = v42;
LABEL_47:
              if (++v40 == v41)
              {
                uint64_t v60 = (uint64_t)v120;
                goto LABEL_77;
              }
            }
          }
          int64_t v39 = 0;
          uint64_t v60 = 0;
LABEL_77:
          unint64_t v61 = 126 - 2 * __clz((uint64_t)&v39[-v60] >> 4);
          uint64_t v62 = v39 == (char *)v60 ? 0 : v61;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>(v60, (uint64_t *)v39, (uint64_t)v117, v62, 1);
          unint64_t v63 = v120;
          if ((unint64_t)(v121 - (void)v120) >= 0x11) {
            break;
          }
LABEL_110:
          if (v63) {
            operator delete(v63);
          }
          unint64_t v34 = v114 + 1;
          if (v114 + 1 == v112) {
            goto LABEL_112;
          }
        }
        uint64_t v64 = 0;
        unint64_t v65 = 1;
        while (1)
        {
          unint64_t v66 = *(int **)(a5 + 64);
          uint64_t v67 = *(void *)&v66[2 * *(int *)&v63[v64 + 8] + 2];
          int v68 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v67 + 60) == 19) {
            int v68 = *(uint64_t **)(v67 + 48);
          }
          uint64_t v69 = *(void *)&v66[2 * *(int *)&v63[v64 + 24] + 2];
          int v70 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v69 + 60) == 19) {
            int v70 = *(uint64_t **)(v69 + 48);
          }
          int v71 = *((_DWORD *)v68 + 5);
          uint64_t v72 = *(void *)(a3 + 24);
          uint64_t v73 = *((int *)v70 + 4);
          v117[0] = *(void *)(v72 + 8 * v71);
          uint64_t v118 = *(void *)(v72 + 8 * v73);
          if (v117[0] > v118) {
            google::MakeCheckOpString<long long,long long>((int)v117, (int)&v118, "initial_solution.solution(before_var) <= initial_solution.solution(after_var)");
          }
          uint64_t v74 = *(int *)(a5 + 56);
          int v75 = *v66;
          if ((int)v74 >= *v66)
          {
            if (v75 == *(_DWORD *)(a5 + 60))
            {
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v115, v75 + 1);
              unint64_t v66 = *(int **)(a5 + 64);
              int v75 = *v66;
            }
            *unint64_t v66 = v75 + 1;
            unint64_t v76 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v115);
            uint64_t v85 = *(void *)(a5 + 64);
            uint64_t v86 = *(int *)(a5 + 56);
            *(_DWORD *)(a5 + 56) = v86 + 1;
            *(void *)(v85 + 8 * v86 + 8) = v76;
            if (*(_DWORD *)(v76 + 60) != 12)
            {
LABEL_90:
              operations_research::sat::ConstraintProto::clear_constraint(v76);
              *(_DWORD *)(v76 + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 12;
              uint64_t v77 = *(void *)(v76 + 8);
              uint64_t v78 = (google::protobuf::Arena *)(v77 & 0xFFFFFFFFFFFFFFFELL);
              if (v77) {
                uint64_t v78 = *(google::protobuf::Arena **)v78;
              }
              google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v78);
              uint64_t v80 = v79;
              *(void *)(v76 + 48) = v79;
              uint64_t v83 = *(unsigned int *)(v79 + 64);
              int v81 = *(_DWORD *)(v79 + 68);
              unint64_t v82 = (unsigned int *)(v79 + 64);
              unsigned int v84 = v83 + 1;
              if (v83 != v81) {
                goto LABEL_99;
              }
LABEL_98:
              google::protobuf::RepeatedField<long long>::Reserve(v82, v84);
              int v81 = *(_DWORD *)(v80 + 68);
              goto LABEL_99;
            }
          }
          else
          {
            *(_DWORD *)(a5 + 56) = v74 + 1;
            unint64_t v76 = *(void *)&v66[2 * v74 + 2];
            if (*(_DWORD *)(v76 + 60) != 12) {
              goto LABEL_90;
            }
          }
          uint64_t v80 = *(void *)(v76 + 48);
          uint64_t v83 = *(unsigned int *)(v80 + 64);
          int v81 = *(_DWORD *)(v80 + 68);
          unint64_t v82 = (unsigned int *)(v80 + 64);
          unsigned int v84 = v83 + 1;
          if (v83 == v81) {
            goto LABEL_98;
          }
LABEL_99:
          uint64_t v87 = *(void *)(v80 + 72);
          *(void *)(v87 + 8 * v83) = 0x8000000000000000;
          *(_DWORD *)(v80 + 64) = v84;
          int v88 = v83 + 2;
          if (v84 == v81)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v82, v88);
            uint64_t v87 = *(void *)(v80 + 72);
          }
          *(void *)(v87 + 8 * v84) = 0;
          uint64_t v89 = *(unsigned int *)(v80 + 16);
          *(_DWORD *)(v80 + 64) = v88;
          unsigned int v90 = v89 + 1;
          if (v89 == *(_DWORD *)(v80 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v80 + 16), v89 + 1);
          }
          *(_DWORD *)(*(void *)(v80 + 24) + 4 * v89) = v71;
          uint64_t v91 = *(unsigned int *)(v80 + 40);
          *(_DWORD *)(v80 + 16) = v90;
          if (v91 == *(_DWORD *)(v80 + 44))
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v80 + 40), v91 + 1);
            unsigned int v90 = *(_DWORD *)(v80 + 16);
          }
          *(void *)(*(void *)(v80 + 48) + 8 * v91) = 1;
          *(_DWORD *)(v80 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v91 + 1;
          if (v90 == *(_DWORD *)(v80 + 20)) {
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v80 + 16), v90 + 1);
          }
          *(_DWORD *)(*(void *)(v80 + 24) + 4 * v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v73;
          *(_DWORD *)(v80 + 16) = v90 + 1;
          uint64_t v92 = *(unsigned int *)(v80 + 40);
          if (v92 == *(_DWORD *)(v80 + 44)) {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v80 + 40), v92 + 1);
          }
          *(void *)(*(void *)(v80 + 48) + 8 * v92) = -1;
          *(_DWORD *)(v80 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v92 + 1;
          ++v65;
          unint64_t v63 = v120;
          v64 += 16;
          if (v65 >= (v121 - (uint64_t)v120) >> 4) {
            goto LABEL_110;
          }
        }
      }
    }
  }
LABEL_112:
  uint64_t v93 = *(void *)(a5 + 16);
  unint64_t v94 = (void *)(v93 & 0xFFFFFFFFFFFFFFFELL);
  if (v93)
  {
    if (*v94) {
      goto LABEL_116;
    }
  }
  else if (v94)
  {
    goto LABEL_116;
  }
  unsigned int v95 = *(operations_research::sat::PartialVariableAssignment **)(a5 + 136);
  if (v95)
  {
    operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v95);
    MEMORY[0x23ECF2BC0]();
  }
LABEL_116:
  *(void *)(a5 + 136) = 0;
  if (*(int *)(a5 + 32) >= 1)
  {
    for (uint64_t k = 0; k < *(int *)(a5 + 32); ++k)
    {
      uint64_t v97 = *(void *)(a5 + 136);
      if (v97)
      {
        uint64_t v99 = *(unsigned int *)(v97 + 16);
        uint64_t v98 = (unsigned int *)(v97 + 16);
        int v100 = v99 + 1;
        if (v99 == *(_DWORD *)(v97 + 20)) {
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v105 = *(void *)(a5 + 16);
        int64_t v106 = (google::protobuf::Arena *)(v105 & 0xFFFFFFFFFFFFFFFELL);
        if (v105) {
          int64_t v106 = *(google::protobuf::Arena **)v106;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v106);
        uint64_t v97 = v107;
        *(void *)(a5 + 136) = v107;
        uint64_t v99 = *(unsigned int *)(v107 + 16);
        int v108 = *(_DWORD *)(v107 + 20);
        uint64_t v98 = (unsigned int *)(v107 + 16);
        int v100 = v99 + 1;
        if (v99 == v108)
        {
LABEL_121:
          google::protobuf::RepeatedField<int>::Reserve(v98, v100);
          uint64_t v101 = *(void *)(a5 + 136);
          *(_DWORD *)(*(void *)(v97 + 24) + 4 * v99) = k;
          *(_DWORD *)(v97 + 16) = v100;
          uint64_t v97 = v101;
          if (!v101)
          {
            uint64_t v102 = *(void *)(a5 + 16);
            unint64_t v103 = (google::protobuf::Arena *)(v102 & 0xFFFFFFFFFFFFFFFELL);
            if (v102) {
              unint64_t v103 = *(google::protobuf::Arena **)v103;
            }
            google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::PartialVariableAssignment>(v103);
            uint64_t v97 = v104;
            *(void *)(a5 + 136) = v104;
          }
          goto LABEL_129;
        }
      }
      *(_DWORD *)(*(void *)(v97 + 24) + 4 * v99) = k;
      *(_DWORD *)(v97 + 16) = v100;
LABEL_129:
      uint64_t v109 = *(void *)(*(void *)(a3 + 24) + 8 * k);
      uint64_t v110 = *(unsigned int *)(v97 + 40);
      if (v110 == *(_DWORD *)(v97 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v97 + 40), v110 + 1);
      }
      *(void *)(*(void *)(v97 + 48) + 8 * v11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v109;
      *(_DWORD *)(v97 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v110 + 1;
    }
  }
  *(unsigned char *)a5 = 1;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v123, v124);
}

void sub_23CC1181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC11824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, operations_research::sat::CpModelProto *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,void *a23)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a22, a23);
  if (*(char *)(v23 + 183) < 0) {
    operator delete(*(void **)(v23 + 160));
  }
  operations_research::sat::CpModelProto::~CpModelProto(a10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SchedulingNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 256);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 32) + 264) - v10) >> 3) <= 0x13)
  {
    end = 0;
    begistd::string::size_type n = 0;
    memset(&v22, 0, sizeof(v22));
    int64_t v16 = 0;
  }
  else
  {
    unint64_t v12 = *(unsigned char **)(v10 + 456);
    unint64_t v11 = *(unsigned char **)(v10 + 464);
    memset(&v22, 0, sizeof(v22));
    int64_t v13 = v11 - v12;
    if (v11 == v12)
    {
      end = 0;
      begistd::string::size_type n = 0;
      int64_t v16 = 0;
    }
    else
    {
      if (v13 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      begistd::string::size_type n = (int *)operator new(v11 - v12);
      end = &begin[v13 >> 2];
      v22.__begin_ = begin;
      v22.__end_cap_.__value_ = end;
      memcpy(begin, v12, v13);
      v22.__end_ = end;
      int64_t v16 = 4 * (v13 >> 2);
      if (v16 >= 5)
      {
        long long v24 = xmmword_23CE812D0;
        if (end - 1 > begin)
        {
          uint64_t v17 = ((unint64_t)v16 >> 2) - 1;
          do
          {
            v23[0] = 0;
            v23[1] = v17;
            uint64_t v18 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, a3, v23);
            if (v18)
            {
              int v19 = *begin;
              *begistd::string::size_type n = begin[v18];
              begin[v18] = v19;
            }
            ++begin;
            --v17;
          }
          while (begin < end - 1);
          begistd::string::size_type n = v22.__begin_;
          end = v22.__end_;
          int64_t v16 = (char *)v22.__end_ - (char *)v22.__begin_;
        }
      }
    }
  }
  unint64_t v20 = v16 >> 2;
  signed int v21 = llround((double)(unint64_t)(v16 >> 2) * a5);
  if (v21 <= v20)
  {
    if (v21 < v20)
    {
      end = &begin[v21];
      v22.__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(&v22, v21 - v20);
    begistd::string::size_type n = v22.__begin_;
    end = v22.__end_;
  }
  operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(begin, end - begin, a2, *(void *)(a1 + 32), a4);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
}

void sub_23CC11A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v7 = a1;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 256);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 32) + 264) - v10) >> 3);
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  if (v11 >= 0x14)
  {
    unint64_t v12 = *(int **)(v10 + 456);
    int64_t v13 = *(int **)(v10 + 464);
    if (v13 != v12)
    {
      int v8 = 0;
      unint64_t v14 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        while (1)
        {
          uint64_t v15 = *v12;
          uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(v7 + 32) + 56) + 56) + 8 * v15 + 8);
          uint64_t v17 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v16 + 60) == 19) {
            uint64_t v17 = *(uint64_t **)(v16 + 48);
          }
          uint64_t v18 = *(void *)(*(void *)(a2 + 24) + 8 * *((int *)v17 + 4));
          if (v8 >= v14) {
            break;
          }
          *(void *)int v8 = v18;
          *((_DWORD *)v8 + 2) = v15;
          v8 += 16;
          uint64_t v62 = v8;
          if (++v12 == v13) {
            goto LABEL_27;
          }
        }
        uint64_t v19 = (v8 - v9) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v14 - v9) >> 3 > v20) {
          unint64_t v20 = (v14 - v9) >> 3;
        }
        if ((unint64_t)(v14 - v9) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::vector<int> v22 = (char *)operator new(16 * v21);
          uint64_t v23 = (uint64_t)&v22[16 * v19];
          *(void *)uint64_t v23 = v18;
          *(_DWORD *)(v23 + 8) = v15;
          if (v8 == v9)
          {
LABEL_24:
            int v25 = (char *)v23;
            unint64_t v14 = &v22[16 * v21];
            int v8 = (char *)(v23 + 16);
            unint64_t v61 = (char *)v23;
            unint64_t v63 = v14;
            uint64_t v7 = a1;
            if (!v9) {
              goto LABEL_21;
            }
            goto LABEL_20;
          }
        }
        else
        {
          std::vector<int> v22 = 0;
          uint64_t v23 = 16 * v19;
          *(void *)uint64_t v23 = v18;
          *(_DWORD *)(v23 + 8) = v15;
          if (v8 == v9) {
            goto LABEL_24;
          }
        }
        uint64_t v24 = v23;
        do
        {
          int v25 = (char *)(v24 - 16);
          *(_OWORD *)(v24 - 16) = *((_OWORD *)v8 - 1);
          v8 -= 16;
          v24 -= 16;
        }
        while (v8 != v9);
        unint64_t v14 = &v22[16 * v21];
        int v8 = (char *)(v23 + 16);
        unint64_t v61 = v25;
        unint64_t v63 = v14;
        uint64_t v7 = a1;
        if (!v9) {
          goto LABEL_21;
        }
LABEL_20:
        operator delete(v9);
LABEL_21:
        uint64_t v9 = v25;
        uint64_t v62 = v8;
        if (++v12 == v13) {
          goto LABEL_27;
        }
      }
    }
    int v8 = 0;
    uint64_t v9 = 0;
  }
LABEL_27:
  unint64_t v26 = 126 - 2 * __clz((v8 - v9) >> 4);
  if (v8 == v9) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v26;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *,false>((uint64_t)v9, (uint64_t *)v8, (uint64_t)&v57, v27, 1);
  uint64_t v28 = v61;
  uint64_t v29 = (v62 - v61) >> 4;
  signed int v30 = vcvtmd_s64_f64((double)(unint64_t)v29 * a5);
  v60[0] = 0;
  v60[1] = ~v30 + v29;
  signed int v31 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v60, a3, v60);
  int v32 = 0;
  int64_t v33 = 0;
  unint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (v31 < v30)
  {
    uint64_t v55 = a2;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    int v32 = 0;
    uint64_t v36 = v31;
    while (1)
    {
      while (1)
      {
        uint64_t v37 = &v28[16 * v36 + 8];
        if (v32 >= v35) {
          break;
        }
        *(_DWORD *)int v32 = *(_DWORD *)v37;
        v32 += 4;
        uint64_t v58 = v32;
        if (++v36 == v30) {
          goto LABEL_62;
        }
      }
      uint64_t v38 = (v32 - v34) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v35 - v34) >> 1 > v39) {
        unint64_t v39 = (v35 - v34) >> 1;
      }
      if ((unint64_t)(v35 - v34) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40)
      {
        if (v40 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v41 = operator new(4 * v40);
        BOOL v42 = (int *)&v41[4 * v38];
        *BOOL v42 = *(_DWORD *)v37;
        uint64_t v43 = (uint64_t)(v42 + 1);
        if (v32 == v34) {
          goto LABEL_48;
        }
      }
      else
      {
        unint64_t v41 = 0;
        BOOL v42 = (int *)(4 * v38);
        *(_DWORD *)(4 * v38) = *(_DWORD *)v37;
        uint64_t v43 = 4 * v38 + 4;
        if (v32 == v34) {
          goto LABEL_48;
        }
      }
      unint64_t v44 = v32 - 4 - v34;
      if (v44 >= 0xBC)
      {
        if (&v41[v32 - v34 - 4 - (v44 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v32 - v34 - 4])
        {
          uint64_t v45 = v32;
        }
        else if (&v32[-(v44 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
        {
          uint64_t v45 = v32;
        }
        else if ((unint64_t)(v34 - v41) >= 0x20)
        {
          uint64_t v47 = (v44 >> 2) + 1;
          uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v45 = &v32[-v48];
          BOOL v42 = (int *)((char *)v42 - v48);
          int v49 = &v41[4 * v38 - 16];
          int v50 = v32 - 16;
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *int v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v45 = v32;
        }
      }
      else
      {
        uint64_t v45 = v32;
      }
      do
      {
        int v46 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--BOOL v42 = v46;
      }
      while (v45 != v34);
LABEL_48:
      uint64_t v35 = &v41[4 * v40];
      unint64_t v57 = v42;
      uint64_t v58 = (char *)v43;
      uint64_t v59 = v35;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v34 = (char *)v42;
      int v32 = (char *)v43;
      uint64_t v58 = (char *)v43;
      if (++v36 == v30)
      {
LABEL_62:
        uint64_t v7 = a1;
        int64_t v33 = v57;
        a2 = v55;
        break;
      }
    }
  }
  operations_research::sat::GenerateSchedulingNeighborhoodForRelaxation(v33, (v32 - (char *)v33) >> 2, a2, *(void *)(v7 + 32), a4);
  if (v33) {
    operator delete(v33);
  }
  if (v28) {
    operator delete(v28);
  }
}

void sub_23CC11F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::RelaxationInducedNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::RelaxationInducedNeighborhoodGenerator *this, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (operations_research::sat::SharedIncompleteSolutionManager *)*((void *)this + 20);
  if (v3)
  {
    return operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(v3, a2);
  }
  else
  {
    uint64_t v5 = *((void *)this + 17);
    if (v5)
    {
      uint64_t v6 = (absl::lts_2020_02_25 **)(v5 + 312);
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v5 + 312), a2);
      uint64_t v9 = v5 + 352;
      uint64_t v7 = *(void *)(v5 + 352);
      uint64_t v8 = *(void *)(v9 + 8);
      absl::lts_2020_02_25::Mutex::Unlock(v6, v10, v11, v12, v13, v14, v15, v16);
      if (!(-858993459 * ((unint64_t)(v8 - v7) >> 3))) {
        return 0;
      }
    }
    uint64_t v17 = *((void *)this + 19);
    if (v17)
    {
      uint64_t v18 = (absl::lts_2020_02_25 **)(v17 + 8);
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v17 + 8), a2);
      uint64_t v21 = v17 + 48;
      uint64_t v19 = *(void *)(v17 + 48);
      uint64_t v20 = *(void *)(v21 + 8);
      absl::lts_2020_02_25::Mutex::Unlock(v18, v22, v23, v24, v25, v26, v27, v28);
      if ((int)(-858993459 * ((unint64_t)(v20 - v19) >> 3)) > 0) {
        return 1;
      }
    }
    uint64_t v29 = *((void *)this + 18);
    if (v29
      && (signed int v30 = (absl::lts_2020_02_25 **)(v29 + 8),
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v29 + 8), a2),
          uint64_t v33 = v29 + 48,
          uint64_t v31 = *(void *)(v29 + 48),
          uint64_t v32 = *(void *)(v33 + 8),
          absl::lts_2020_02_25::Mutex::Unlock(v30, v34, v35, v36, v37, v38, v39, v40),
          (int)(-858993459 * ((unint64_t)(v32 - v31) >> 3)) > 0))
    {
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

void operations_research::sat::RelaxationInducedNeighborhoodGenerator::Generate(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = *(void *)(a1 + 32);
  *(_WORD *)a3 = 0;
  uint64_t v7 = (operations_research::sat::CpModelProto *)(a3 + 8);
  uint64_t v8 = operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a3 + 8), 0);
  *(void *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  unint64_t v82 = (void **)(a3 + 160);
  *(unsigned char *)(a3 + 183) = 0;
  *(_WORD *)a3 = 1;
  operations_research::sat::CpModelProto::CopyFrom(v8, *(const operations_research::sat::CpModelProto **)(v6 + 56));
  if (v7 != (operations_research::sat::CpModelProto *)(v6 + 104)) {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a3 + 24, v6 + 120);
  }
  *(unsigned char *)a3 = 0;
  uint64_t v10 = *(void *)(v4 + 152);
  uint64_t v80 = v7;
  if (v10)
  {
    uint64_t v11 = (absl::lts_2020_02_25 **)(v10 + 8);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v10 + 8), v9);
    uint64_t v14 = v10 + 48;
    uint64_t v12 = *(void *)(v10 + 48);
    uint64_t v13 = *(void *)(v14 + 8);
    absl::lts_2020_02_25::Mutex::Unlock(v11, v15, v16, v17, v18, v19, v20, v21);
    BOOL v22 = (int)(-858993459 * ((unint64_t)(v13 - v12) >> 3)) > 0;
    uint64_t v23 = *(void *)(v4 + 144);
    if (!v23) {
      goto LABEL_5;
    }
  }
  else
  {
    BOOL v22 = 0;
    uint64_t v23 = *(void *)(v4 + 144);
    if (!v23)
    {
LABEL_5:
      uint64_t v24 = *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160);
      if (v24) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  uint64_t v26 = (absl::lts_2020_02_25 **)(v23 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v23 + 8), v9);
  uint64_t v28 = v23 + 48;
  uint64_t v23 = *(void *)(v23 + 48);
  uint64_t v27 = *(void *)(v28 + 8);
  absl::lts_2020_02_25::Mutex::Unlock(v26, v29, v30, v31, v32, v33, v34, v35);
  LODWORD(v23) = (int)(-858993459 * ((unint64_t)(v27 - v23) >> 3)) > 0;
  uint64_t v24 = *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160);
  if (v24)
  {
LABEL_6:
    HasNewSolutiostd::string::size_type n = operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(v24, v9);
    if ((v22 | v23)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  HasNewSolutiostd::string::size_type n = 0;
  if ((v22 | v23)) {
    goto LABEL_12;
  }
LABEL_11:
  if (!HasNewSolution) {
    return;
  }
LABEL_12:
  __n128 v94 = 0u;
  memset(v93, 0, sizeof(v93));
  if ((v22 & v23) == 1)
  {
    uint64_t v36 = a2[312];
    unint64_t v37 = (v36 + 1) % 0x270uLL;
    uint64_t v38 = 4 * v36;
    uint64_t v39 = 4 * v37;
    LODWORD(v36) = *((_DWORD *)a2 + (v36 + 397) % 0x270uLL) ^ ((*((_DWORD *)a2 + v37) & 0x7FFFFFFE | *((_DWORD *)a2 + v36) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a2 + v37) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)((char *)a2 + v38) = v36;
    LODWORD(v36) = ((v36 ^ (v36 >> 11)) << 7) & 0x9D2C5680 ^ v36 ^ (v36 >> 11);
    double v40 = (double)((v36 << 15) & 0xEFC60000 ^ v36 ^ (((v36 << 15) & 0xEFC60000 ^ v36) >> 18));
    if (v37 == 623) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v37 + 1;
    }
    uint64_t v42 = 397;
    if (v37 >= 0xE3) {
      uint64_t v42 = -227;
    }
    unsigned int v43 = *((_DWORD *)a2 + v42 + v37) ^ ((*((_DWORD *)a2 + v41) & 0x7FFFFFFE | *((_DWORD *)a2 + v37) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a2 + v41) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)((char *)a2 + v39) = v43;
    unsigned int v44 = ((v43 ^ (v43 >> 11)) << 7) & 0x9D2C5680 ^ v43 ^ (v43 >> 11);
    a2[312] = v41;
    if ((v40 + (double)((v44 << 15) & 0xEFC60000 ^ v44 ^ (((v44 << 15) & 0xEFC60000 ^ v44) >> 18)) * 4294967300.0)
       * 5.42101086e-20
       + 0.0 >= 0.5)
      goto LABEL_19;
LABEL_24:
    operations_research::sat::GetRINSNeighborhood(*(absl::lts_2020_02_25 ***)(v4 + 136), 0, *(absl::lts_2020_02_25 ***)(v4 + 152), *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160), (absl::lts_2020_02_25::Mutex *)a2, (uint64_t *)&v89);
    uint64_t v45 = (int *)v89;
    *(void *)&v93[0] = v89;
    unsigned int v84 = (int *)__p[0];
    *(_OWORD *)((char *)v93 + 8) = *(_OWORD *)__p;
    int v46 = v91;
    *((void *)&v93[1] + 1) = v91;
    __n128 v81 = v92;
    __n128 v94 = v92;
    if (HasNewSolution) {
      uint64_t v47 = "incomplete";
    }
    else {
      uint64_t v47 = "lp";
    }
    goto LABEL_27;
  }
  if (v22) {
    goto LABEL_24;
  }
LABEL_19:
  if (((v23 | HasNewSolution) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_lns.cc", 659);
    uint64_t v77 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: relaxation_solution_available || incomplete_solution_available ", 77);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v89);
  }
  operations_research::sat::GetRINSNeighborhood(*(absl::lts_2020_02_25 ***)(v4 + 136), *(void **)(v4 + 144), 0, *(operations_research::sat::SharedIncompleteSolutionManager **)(v4 + 160), (absl::lts_2020_02_25::Mutex *)a2, (uint64_t *)&v89);
  uint64_t v45 = (int *)v89;
  *(void *)&v93[0] = v89;
  unsigned int v84 = (int *)__p[0];
  *(_OWORD *)((char *)v93 + 8) = *(_OWORD *)__p;
  int v46 = v91;
  *((void *)&v93[1] + 1) = v91;
  __n128 v81 = v92;
  __n128 v94 = v92;
  if (HasNewSolution) {
    uint64_t v47 = "incomplete";
  }
  else {
    uint64_t v47 = "relaxation";
  }
LABEL_27:
  MEMORY[0x23ECF27D0](v82, v47);
  uint64_t v48 = v84;
  __n128 v49 = v81;
  int v50 = (int *)v81.n128_u64[0];
  if (v45 != v84)
  {
    char v85 = 0;
    while (1)
    {
      unint64_t v51 = *v45;
      if ((int)v51 >= *(_DWORD *)(a3 + 32)
        || ((*(void *)(*(void *)(*(void *)(v4 + 32) + 328) + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
      {
        goto LABEL_30;
      }
      uint64_t v52 = *((void *)v45 + 1);
      uint64_t v53 = *(void *)(*(void *)(a3 + 40) + 8 * v51 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v53 + 24), *(int *)(v53 + 16), &v89, v49);
      BOOL v54 = operations_research::Domain::Contains((operations_research::Domain *)&v89, v52);
      if (!v54) {
        break;
      }
      uint64_t v55 = *(void *)(*(void *)(a3 + 40) + 8 * v51 + 8);
      *(_DWORD *)(v55 + 16) = 0;
      int v56 = *(_DWORD *)(v55 + 20);
      uint64_t v57 = v55;
      if (!v56)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v55 + 16), 1);
        uint64_t v57 = *(void *)(*(void *)(a3 + 40) + 8 * v51 + 8);
        int v56 = *(_DWORD *)(v57 + 20);
      }
      **(void **)(v55 + 24) = v52;
      *(_DWORD *)(v55 + 16) = 1;
      uint64_t v58 = *(unsigned int *)(v57 + 16);
      if (v58 == v56) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 16), v58 + 1);
      }
      *(void *)(*(void *)(v57 + 24) + 8 * v58) = v52;
      *(_DWORD *)(v57 + 16) = v58 + 1;
      *(unsigned char *)(a3 + 1) = 1;
      if (v89) {
        goto LABEL_41;
      }
LABEL_29:
      if (!v54)
      {
        int v46 = (int *)*((void *)&v93[1] + 1);
LABEL_76:
        if (v46)
        {
          v94.n128_u64[0] = (unint64_t)v46;
          operator delete(v46);
        }
        if (*(void *)&v93[0]) {
          operator delete(*(void **)&v93[0]);
        }
        if ((v85 & 1) == 0)
        {
          if (*(char *)(a3 + 183) < 0) {
            operator delete(*v82);
          }
          operations_research::sat::CpModelProto::~CpModelProto(v80);
        }
        return;
      }
LABEL_30:
      v45 += 4;
      if (v45 == v48)
      {
        int v46 = (int *)*((void *)&v93[1] + 1);
        int v50 = (int *)v94.n128_u64[0];
        if (*((void *)&v93[1] + 1) == v94.n128_u64[0])
        {
LABEL_71:
          *(unsigned char *)a3 = 1;
          if (v46) {
            goto LABEL_72;
          }
          goto LABEL_73;
        }
LABEL_46:
        uint64_t v59 = v46;
        uint64_t v83 = v4;
        uint64_t v78 = v50;
        uint64_t v79 = v46;
        while (2)
        {
          unint64_t v60 = *v59;
          if ((int)v60 < *(_DWORD *)(a3 + 32)
            && ((*(void *)(*(void *)(*(void *)(v4 + 32) + 328) + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
          {
            uint64_t v61 = *((void *)v59 + 1);
            uint64_t v62 = *((void *)v59 + 2);
            uint64_t v63 = *(void *)(*(void *)(a3 + 40) + 8 * v60 + 8);
            operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v63 + 24), *(int *)(v63 + 16), &v89, v49);
            operations_research::Domain::Domain(v86, v61, v62);
            operations_research::Domain::IntersectionWith(&v89, (const operations_research::Domain *)v86, &v87);
            if (v89) {
              operator delete(__p[0]);
            }
            unint64_t v89 = v87;
            *(_OWORD *)std::string __p = v88;
            unint64_t v87 = 0;
            if ((uint64_t)v86[0]) {
              operator delete(v86[1]);
            }
            BOOL IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)&v89);
            unint64_t v65 = v89;
            if (IsEmpty)
            {
              char v85 = 1;
              uint64_t v4 = v83;
              if (v89) {
                goto LABEL_70;
              }
            }
            else
            {
              uint64_t v66 = *(void *)(*(void *)(a3 + 40) + 8 * v60 + 8);
              *(_DWORD *)(v66 + 16) = 0;
              uint64_t v67 = (unsigned int *)(v66 + 16);
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v66 + 16), v65 >> 1);
              char v68 = v89;
              if (v89) {
                uint64_t v69 = (void **)__p[0];
              }
              else {
                uint64_t v69 = __p;
              }
              if (v89 >= 2)
              {
                int v70 = &v69[2 * (v89 >> 1)];
                unsigned int v71 = *(_DWORD *)(v66 + 16);
                do
                {
                  uint64_t v72 = *v69;
                  int v73 = *(_DWORD *)(v66 + 20);
                  unsigned int v74 = v71 + 1;
                  if (v71 == v73)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v67, v71 + 1);
                    int v73 = *(_DWORD *)(v66 + 20);
                  }
                  uint64_t v75 = *(void *)(v66 + 24);
                  *(void *)(v75 + 8 * v71) = v72;
                  *(_DWORD *)(v66 + 16) = v74;
                  unint64_t v76 = v69[1];
                  v71 += 2;
                  if (v74 == v73)
                  {
                    google::protobuf::RepeatedField<long long>::Reserve(v67, v71);
                    uint64_t v75 = *(void *)(v66 + 24);
                  }
                  *(void *)(v75 + 8 * v74) = v76;
                  unsigned int *v67 = v71;
                  v69 += 2;
                }
                while (v69 != v70);
                char v68 = v89;
                int v50 = v78;
                int v46 = v79;
              }
              *(unsigned char *)(a3 + 1) = 1;
              uint64_t v4 = v83;
              if (v68) {
LABEL_70:
              }
                operator delete(__p[0]);
            }
            if (IsEmpty) {
              goto LABEL_76;
            }
          }
          v59 += 6;
          if (v59 == v50) {
            goto LABEL_71;
          }
          continue;
        }
      }
    }
    char v85 = 1;
    if ((v89 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_41:
    operator delete(__p[0]);
    goto LABEL_29;
  }
  if (v46 != (int *)v81.n128_u64[0])
  {
    char v85 = 0;
    goto LABEL_46;
  }
  int v46 = (int *)v81.n128_u64[0];
  if (v81.n128_u64[0])
  {
LABEL_72:
    v94.n128_u64[0] = (unint64_t)v46;
    operator delete(v46);
  }
LABEL_73:
  if (*(void *)&v93[0]) {
    operator delete(*(void **)&v93[0]);
  }
}

void sub_23CC12874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)(v27 - 144));
  operations_research::sat::Neighborhood::~Neighborhood(v26);
  _Unwind_Resume(a1);
}

void operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v6 = *(int *)(*(void *)(*(void *)(a1 + 32) + 56) + 48);
  if (v6)
  {
    if ((v6 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(4 * v6);
    uint64_t v8 = 0;
    uint64_t v9 = &v7[4 * v6];
    int v56 = v7;
    uint64_t v57 = v7;
    uint64_t v58 = v9;
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    while (1)
    {
      if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 56) + 56) + 8 * v8 + 8) + 60) == 19) {
        goto LABEL_6;
      }
      if (v7 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v7 = v8;
      uint64_t v12 = (uint64_t)(v7 + 4);
LABEL_5:
      uint64_t v57 = (unsigned char *)v12;
      uint64_t v7 = (char *)v12;
LABEL_6:
      if (++v8 == v10) {
        goto LABEL_37;
      }
    }
    uint64_t v13 = (v7 - v11) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v11) >> 1 > v14) {
      unint64_t v14 = (v9 - v11) >> 1;
    }
    if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = operator new(4 * v15);
      uint64_t v17 = &v16[4 * v13];
      *uint64_t v17 = v8;
      uint64_t v12 = (uint64_t)(v17 + 1);
      if (v7 == v11) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (_DWORD *)(4 * v13);
      *(_DWORD *)(4 * v13) = v8;
      uint64_t v12 = 4 * v13 + 4;
      if (v7 == v11) {
        goto LABEL_23;
      }
    }
    unint64_t v18 = v7 - 4 - v11;
    if (v18 >= 0xBC)
    {
      if (&v16[v7 - v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v11 - 4])
      {
        uint64_t v19 = v7;
      }
      else if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        uint64_t v19 = v7;
      }
      else if ((unint64_t)(v11 - v16) >= 0x20)
      {
        uint64_t v21 = (v18 >> 2) + 1;
        uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v19 = &v7[-v22];
        uint64_t v17 = (_DWORD *)((char *)v17 - v22);
        uint64_t v23 = &v16[4 * v13 - 16];
        uint64_t v24 = (long long *)(v7 - 16);
        uint64_t v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *uint64_t v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v19 = v7;
      }
    }
    else
    {
      uint64_t v19 = v7;
    }
    do
    {
      int v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--uint64_t v17 = v20;
    }
    while (v19 != v11);
LABEL_23:
    uint64_t v9 = &v16[4 * v15];
    int v56 = v17;
    uint64_t v58 = v9;
    if (v11) {
      operator delete(v11);
    }
    uint64_t v11 = (char *)v17;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  uint64_t v7 = 0;
LABEL_37:
  uint64_t v27 = (v7 - v11) >> 2;
  if ((int)v27 < 1)
  {
    int v28 = 0;
  }
  else
  {
    LODWORD(v59) = 0;
    HIDWORD(v59) = v27 - 1;
    std::string __p = v59;
    int v28 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v59, a2, (int *)&__p);
  }
  signed int v29 = llround((1.0 - a4) * (double)(unint64_t)v27);
  std::string __p = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  if (v29)
  {
    unint64_t v30 = v29;
    if (v29 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = (char *)operator new(4 * v29);
    unint64_t v32 = 0;
    std::string __p = v31;
    uint64_t v54 = (uint64_t)v31;
    uint64_t v55 = &v31[4 * v30];
    uint64_t v33 = v56;
    uint64_t v34 = v31;
    do
    {
      if (v34 < v55)
      {
        *(_DWORD *)uint64_t v34 = v33[v28];
        uint64_t v35 = (uint64_t)(v34 + 4);
        goto LABEL_44;
      }
      unint64_t v36 = v32 + 1;
      if ((v32 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v55 - v31;
      if ((v55 - v31) >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v39 = operator new(4 * v38);
        double v40 = &v39[4 * v32];
        *double v40 = v33[v28];
        uint64_t v35 = (uint64_t)(v40 + 1);
        if (v34 == v31) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v39 = 0;
        double v40 = (_DWORD *)(4 * v32);
        *(_DWORD *)(4 * v32) = v33[v28];
        uint64_t v35 = 4 * v32 + 4;
        if (v34 == v31) {
          goto LABEL_63;
        }
      }
      unint64_t v41 = v34 - 4 - v31;
      if (v41 >= 0xBC)
      {
        uint64_t v44 = 4 * v32;
        if (&v39[4 * v32 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[4 * v32 - 4])
        {
          uint64_t v42 = v34;
        }
        else if (&v34[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
        {
          uint64_t v42 = v34;
        }
        else if ((unint64_t)(v34 - &v39[v44]) >= 0x20)
        {
          uint64_t v45 = (v41 >> 2) + 1;
          uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v42 = &v34[-v46];
          double v40 = (_DWORD *)((char *)v40 - v46);
          uint64_t v47 = &v39[v44 - 16];
          uint64_t v48 = v34 - 16;
          uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            _OWORD *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v42 = v34;
        }
      }
      else
      {
        uint64_t v42 = v34;
      }
      do
      {
        int v43 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *--double v40 = v43;
      }
      while (v42 != v31);
LABEL_63:
      std::string __p = v40;
      uint64_t v54 = v35;
      uint64_t v55 = &v39[4 * v38];
      if (v31)
      {
        operator delete(v31);
        uint64_t v33 = v56;
        uint64_t v31 = (char *)__p;
      }
      else
      {
        uint64_t v31 = (char *)v40;
      }
LABEL_44:
      uint64_t v54 = v35;
      if (v28 + 1 == (v57 - (unsigned char *)v33) >> 2) {
        int v28 = 0;
      }
      else {
        ++v28;
      }
      unint64_t v32 = (v35 - (uint64_t)v31) >> 2;
      uint64_t v34 = (char *)v35;
    }
    while (v32 < v30);
  }
  operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(*(void *)(a1 + 32), (int **)&__p, a3);
  if (__p)
  {
    uint64_t v54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
}

void sub_23CC12E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::WeightedRandomRelaxationNeighborhoodGenerator(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26F0BF548;
  uint64_t v5 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3FE0000000000000;
  *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(a1 + 88) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v7 = (void **)(a1 + 136);
  *(void *)a1 = &unk_26F0BF508;
  *(void *)(a1 + 168) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_DWORD *)(a1 + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v8 = *(int *)(*(void *)(a2 + 56) + 48);
  if (v8)
  {
    if ((v8 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
    uint64_t v10 = 0;
    *(void *)(a1 + 136) = v9;
    *(void *)(a1 + 144) = v9;
    uint64_t v11 = v8;
    *(void *)(a1 + 152) = &v9[8 * v8];
    while (1)
    {
      switch(*(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 56) + 56) + 8 * v10 + 8) + 60))
      {
        case 0:
        case 0x13:
          unint64_t v36 = *(void *)(a1 + 152);
          if ((unint64_t)v9 < v36)
          {
            *(void *)uint64_t v9 = 0;
            uint64_t v23 = (uint64_t)(v9 + 8);
LABEL_101:
            *(void *)(a1 + 144) = v23;
            goto LABEL_68;
          }
          int v43 = (char *)*v7;
          uint64_t v44 = v9 - (unsigned char *)*v7;
          uint64_t v45 = v44 >> 3;
          unint64_t v46 = (v44 >> 3) + 1;
          if (v46 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v47 = v36 - (void)v43;
          if (v47 >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            if (v48 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v49 = operator new(8 * v48);
            long long v50 = &v49[8 * v45];
            *long long v50 = 0;
            uint64_t v23 = (uint64_t)(v50 + 1);
            if (v9 == v43) {
              goto LABEL_99;
            }
LABEL_96:
            unint64_t v57 = v9 - 8 - v43;
            if (v57 < 0x168)
            {
              uint64_t v58 = v9;
              goto LABEL_98;
            }
            if (&v49[v44 - 8 - (v57 & 0xFFFFFFFFFFFFFFF8)] > &v49[v44 - 8])
            {
              uint64_t v58 = v9;
              goto LABEL_98;
            }
            if (&v9[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              uint64_t v58 = v9;
              goto LABEL_98;
            }
            if ((unint64_t)(v9 - v49 - v44) < 0x20)
            {
              uint64_t v58 = v9;
              goto LABEL_98;
            }
            uint64_t v72 = (v57 >> 3) + 1;
            uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v58 = &v9[-v73];
            long long v50 = (void *)((char *)v50 - v73);
            unsigned int v74 = &v49[8 * v45 - 16];
            uint64_t v75 = v9 - 16;
            uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v77 = *(_OWORD *)v75;
              *(v74 - 1) = *((_OWORD *)v75 - 1);
              _OWORD *v74 = v77;
              v74 -= 2;
              v75 -= 32;
              v76 -= 4;
            }
            while (v76);
            if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v59 = *((void *)v58 - 1);
                v58 -= 8;
                *--long long v50 = v59;
              }
              while (v58 != v43);
            }
          }
          else
          {
            uint64_t v49 = 0;
            long long v50 = (void *)(8 * v45);
            *(void *)(8 * v45) = 0;
            uint64_t v23 = 8 * v45 + 8;
            if (v9 != v43) {
              goto LABEL_96;
            }
          }
LABEL_99:
          *(void *)(a1 + 136) = v50;
          *(void *)(a1 + 144) = v23;
          *(void *)(a1 + 152) = &v49[8 * v48];
          if (v43) {
            operator delete(v43);
          }
          goto LABEL_101;
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0x14:
        case 0x15:
        case 0x1B:
        case 0x1C:
          unint64_t v12 = *(void *)(a1 + 152);
          if ((unint64_t)v9 < v12)
          {
            uint64_t v13 = 0x4000000000000000;
            goto LABEL_24;
          }
          unint64_t v15 = (char *)*v7;
          uint64_t v16 = v9 - (unsigned char *)*v7;
          uint64_t v17 = v16 >> 3;
          unint64_t v18 = (v16 >> 3) + 1;
          if (v18 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v12 - (void)v15;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (!v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = (void *)(8 * v17);
            *(void *)(8 * v17) = 0x4000000000000000;
            uint64_t v23 = 8 * v17 + 8;
            if (v9 == v15) {
              goto LABEL_65;
            }
LABEL_46:
            unint64_t v33 = v9 - 8 - v15;
            if (v33 < 0x168)
            {
              uint64_t v34 = v9;
              goto LABEL_48;
            }
            if (&v21[v16 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v21[v16 - 8])
            {
              uint64_t v34 = v9;
              do
              {
LABEL_48:
                uint64_t v35 = *((void *)v34 - 1);
                v34 -= 8;
                *--uint64_t v22 = v35;
              }
              while (v34 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              uint64_t v34 = v9;
              goto LABEL_48;
            }
            if ((unint64_t)(v9 - &v21[v16]) < 0x20)
            {
              uint64_t v34 = v9;
              goto LABEL_48;
            }
            uint64_t v51 = (v33 >> 3) + 1;
            uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v34 = &v9[-v52];
            uint64_t v22 = (void *)((char *)v22 - v52);
            uint64_t v53 = &v21[8 * v17 - 16];
            uint64_t v54 = v9 - 16;
            uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *uint64_t v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_48;
            }
            goto LABEL_65;
          }
          if (v20 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * v20);
          uint64_t v22 = &v21[8 * v17];
          void *v22 = 0x4000000000000000;
          uint64_t v23 = (uint64_t)(v22 + 1);
          if (v9 != v15) {
            goto LABEL_46;
          }
          goto LABEL_65;
        case 0xC:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x1A:
          unint64_t v24 = *(void *)(a1 + 152);
          if ((unint64_t)v9 < v24)
          {
            uint64_t v13 = 0x3FF0000000000000;
            goto LABEL_24;
          }
          unint64_t v15 = (char *)*v7;
          uint64_t v29 = v9 - (unsigned char *)*v7;
          uint64_t v30 = v29 >> 3;
          unint64_t v31 = (v29 >> 3) + 1;
          if (v31 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = v24 - (void)v15;
          if (v32 >> 2 > v31) {
            unint64_t v31 = v32 >> 2;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v31;
          }
          if (!v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = (void *)(8 * v30);
            *(void *)(8 * v3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0x3FF0000000000000;
            uint64_t v23 = 8 * v30 + 8;
            if (v9 == v15) {
              goto LABEL_65;
            }
LABEL_62:
            unint64_t v40 = v9 - 8 - v15;
            if (v40 < 0x168)
            {
              unint64_t v41 = v9;
              goto LABEL_64;
            }
            if (&v21[v29 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v21[v29 - 8])
            {
              unint64_t v41 = v9;
              do
              {
LABEL_64:
                uint64_t v42 = *((void *)v41 - 1);
                v41 -= 8;
                *--uint64_t v22 = v42;
              }
              while (v41 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              unint64_t v41 = v9;
              goto LABEL_64;
            }
            if ((unint64_t)(v9 - &v21[v29]) < 0x20)
            {
              unint64_t v41 = v9;
              goto LABEL_64;
            }
            uint64_t v66 = (v40 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v41 = &v9[-v67];
            uint64_t v22 = (void *)((char *)v22 - v67);
            char v68 = &v21[8 * v30 - 16];
            uint64_t v69 = v9 - 16;
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *(_OWORD *)v69;
              *(v68 - 1) = *((_OWORD *)v69 - 1);
              *char v68 = v71;
              v68 -= 2;
              v69 -= 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_64;
            }
            goto LABEL_65;
          }
          if (v20 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * v20);
          uint64_t v22 = &v21[8 * v30];
          void *v22 = 0x3FF0000000000000;
          uint64_t v23 = (uint64_t)(v22 + 1);
          if (v9 != v15) {
            goto LABEL_62;
          }
LABEL_65:
          *(void *)(a1 + 136) = v22;
          *(void *)(a1 + 144) = v23;
          *(void *)(a1 + 152) = &v21[8 * v20];
          if (v15) {
            operator delete(v15);
          }
LABEL_67:
          *(void *)(a1 + 144) = v23;
          ++*(_DWORD *)(a1 + 160);
LABEL_68:
          uint64_t v9 = (char *)v23;
LABEL_69:
          if (++v10 == v11) {
            return a1;
          }
          break;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x16:
        case 0x17:
        case 0x19:
          unint64_t v14 = *(void *)(a1 + 152);
          if ((unint64_t)v9 < v14)
          {
            uint64_t v13 = 0x4008000000000000;
LABEL_24:
            *(void *)uint64_t v9 = v13;
            uint64_t v23 = (uint64_t)(v9 + 8);
            goto LABEL_67;
          }
          unint64_t v15 = (char *)*v7;
          uint64_t v25 = v9 - (unsigned char *)*v7;
          uint64_t v26 = v25 >> 3;
          unint64_t v27 = (v25 >> 3) + 1;
          if (v27 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v14 - (void)v15;
          if (v28 >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v27;
          }
          if (!v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = (void *)(8 * v26);
            *(void *)(8 * v26) = 0x4008000000000000;
            uint64_t v23 = 8 * v26 + 8;
            if (v9 == v15) {
              goto LABEL_65;
            }
LABEL_57:
            unint64_t v37 = v9 - 8 - v15;
            if (v37 < 0x168)
            {
              unint64_t v38 = v9;
              goto LABEL_59;
            }
            if (&v21[v25 - 8 - (v37 & 0xFFFFFFFFFFFFFFF8)] > &v21[v25 - 8])
            {
              unint64_t v38 = v9;
              do
              {
LABEL_59:
                uint64_t v39 = *((void *)v38 - 1);
                v38 -= 8;
                *--uint64_t v22 = v39;
              }
              while (v38 != v15);
              goto LABEL_65;
            }
            if (&v9[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
            {
              unint64_t v38 = v9;
              goto LABEL_59;
            }
            if ((unint64_t)(v9 - &v21[v25]) < 0x20)
            {
              unint64_t v38 = v9;
              goto LABEL_59;
            }
            uint64_t v60 = (v37 >> 3) + 1;
            uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v38 = &v9[-v61];
            uint64_t v22 = (void *)((char *)v22 - v61);
            uint64_t v62 = &v21[8 * v26 - 16];
            uint64_t v63 = v9 - 16;
            uint64_t v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *uint64_t v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 4;
            }
            while (v64);
            if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_59;
            }
            goto LABEL_65;
          }
          if (v20 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * v20);
          uint64_t v22 = &v21[8 * v26];
          void *v22 = 0x4008000000000000;
          uint64_t v23 = (uint64_t)(v22 + 1);
          if (v9 != v15) {
            goto LABEL_57;
          }
          goto LABEL_65;
        default:
          goto LABEL_69;
      }
    }
  }
  return a1;
}

void sub_23CC1365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  absl::lts_2020_02_25::flat_hash_map<long long,std::vector<int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::~flat_hash_map(a10);
  uint64_t v13 = *v11;
  if (*v11)
  {
    *((void *)v10 + 18) = v13;
    operator delete(v13);
  }
  operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(v10);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,std::vector<int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        uint64_t v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(void *)(v6 + 16) = v7;
          operator delete(v7);
          uint64_t v2 = *(void *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v5 = 0;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  }
  return a1;
}

void operations_research::sat::NeighborhoodGenerator::~NeighborhoodGenerator(operations_research::sat::NeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::NeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::AdditionalProcessingOnSynchronize(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v6 = (uint64_t *)(a1 + 168);
  uint64_t v7 = absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>>((uint64_t *)(a1 + 168), (uint64_t *)a2);
  if (v4 <= v5)
  {
    if (*(_DWORD *)(a2 + 8) == 4 && v4 != v5)
    {
      unint64_t v18 = *(int **)v7;
      uint64_t v19 = *(int **)(v7 + 8);
      if (*(int **)v7 != v19)
      {
        uint64_t v20 = *(void *)(a1 + 136);
        do
        {
          uint64_t v21 = *v18;
          double v22 = *(double *)(v20 + 8 * v21);
          if (v22 > 0.5) {
            *(double *)(v20 + 8 * v21) = v22 + -0.5;
          }
          ++v18;
        }
        while (v18 != v19);
      }
    }
  }
  else
  {
    uint64_t v8 = *(int **)v7;
    uint64_t v9 = *(int **)(v7 + 8);
    if (*(int **)v7 != v9)
    {
      uint64_t v10 = *(void *)(a1 + 136);
      do
      {
        uint64_t v11 = *v8++;
        uint64_t v12 = 8 * v11;
        double v13 = *(double *)(v10 + 8 * v11);
        double v14 = v13 + 10.0;
        BOOL v15 = v13 > 90.0;
        double v16 = 100.0;
        if (!v15) {
          double v16 = v14;
        }
        *(double *)(v10 + v12) = v16;
      }
      while (v8 != v9);
    }
  }

  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::erase<long long>(v6, (void *)a2);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v7 = *a1;
  unint64_t v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v9 = a1[3];
  while (1)
  {
    unint64_t v10 = v8 & v9;
    uint64_t v11 = *(void *)(v7 + v10);
    unint64_t v12 = ((v11 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_6:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v14 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(a1, v6);
      BOOL v15 = (uint64_t *)(a1[1] + 32 * v14);
      *BOOL v15 = *a2;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      uint64_t v13 = a1[1];
      return v13 + 32 * v14 + 8;
    }
    v4 += 8;
    unint64_t v8 = v4 + v10;
  }
  uint64_t v13 = a1[1];
  while (1)
  {
    unint64_t v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
    if (*(void *)(v13 + 32 * v14) == v5) {
      return v13 + 32 * v14 + 8;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_6;
    }
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::erase<long long>(uint64_t *a1, void *a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v5 = *a1;
  unint64_t v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v5 + v9);
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_6:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v3 += 8;
    unint64_t v6 = v3 + v9;
  }
  uint64_t v12 = a1[1];
  while (1)
  {
    unint64_t v13 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(void *)(v12 + 32 * v13) == *a2) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  if (v13 == v7) {
    return 0;
  }
  uint64_t v15 = v12 + 32 * v13;
  double v16 = (void *)(v5 + v13);
  uint64_t v17 = *(void **)(v15 + 8);
  if (v17)
  {
    *(void *)(v15 + 16) = v17;
    operator delete(v17);
    uint64_t v5 = *a1;
    uint64_t v7 = a1[3];
  }
  --a1[2];
  uint64_t v18 = (uint64_t)v16 - v5 - 8;
  unint64_t v19 = *v16 & (~*v16 << 6) & 0x8080808080808080;
  unint64_t v20 = *(void *)(v5 + (v18 & v7)) & (~*(void *)(v5 + (v18 & v7)) << 6) & 0x8080808080808080;
  if (v20) {
    BOOL v21 = v19 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21)
  {
    uint64_t v25 = 0;
    char v22 = -2;
  }
  else
  {
    unsigned int v23 = (__clz(v20) >> 3) + (__clz(__rbit64(v19)) >> 3);
    BOOL v24 = v23 >= 8;
    uint64_t v25 = v23 < 8;
    if (v24) {
      char v22 = -2;
    }
    else {
      char v22 = 0x80;
    }
  }
  *(unsigned char *)double v16 = v22;
  *(unsigned char *)((a1[3] & v18) + (a1[3] & 7) + *a1 + 1) = v22;
  uint64_t v26 = a1[4];
  a1[5] += v25;
  if (!v26) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::Generate(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  int v6 = *(_DWORD *)(a1 + 160);
  uint64_t v80 = 0;
  __n128 v81 = 0;
  unint64_t v82 = 0;
  long long v77 = 0;
  unint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v7 != v8)
  {
    uint64_t v10 = a1;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = v78;
    HIDWORD(v4) = 0;
    while (1)
    {
      double v16 = *(double *)(v8 + 8 * v12);
      if (v16 <= 0.0) {
        goto LABEL_5;
      }
      uint64_t v17 = *(void *)(a2 + 2496);
      unint64_t v18 = (v17 + 1) % 0x270uLL;
      uint64_t v19 = 4 * v17;
      uint64_t v20 = 4 * v18;
      LODWORD(v17) = *(_DWORD *)(a2 + 4 * ((v17 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v18) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v17) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v18) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v19) = v17;
      LODWORD(v17) = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
      double v21 = (double)((v17 << 15) & 0xEFC60000 ^ v17 ^ (((v17 << 15) & 0xEFC60000 ^ v17) >> 18));
      if (v18 == 623) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v18 + 1;
      }
      uint64_t v23 = 397;
      if (v18 >= 0xE3) {
        uint64_t v23 = -227;
      }
      unsigned int v24 = *(_DWORD *)(a2 + 4 * (v23 + v18)) ^ ((*(_DWORD *)(a2 + 4 * v22) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v18) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v22) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v24;
      unsigned int v25 = ((v24 ^ (v24 >> 11)) << 7) & 0x9D2C5680 ^ v24 ^ (v24 >> 11);
      *(void *)(a2 + 2496) = v22;
      double v26 = pow((v21 + (double)((v25 << 15) & 0xEFC60000 ^ v25 ^ (((v25 << 15) & 0xEFC60000 ^ v25) >> 18)) * 4294967300.0)* 5.42101086e-20+ 0.0, 1.0 / v16);
      double v27 = v26;
      if (v11 >= (unint64_t)v13) {
        break;
      }
      *(double *)unint64_t v11 = v26;
      *(_DWORD *)(v11 + 8) = v12;
      unint64_t v15 = v11 + 16;
LABEL_4:
      uint64_t v8 = *(void *)(v10 + 136);
      uint64_t v7 = *(void *)(v10 + 144);
      unint64_t v11 = v15;
LABEL_5:
      if (++v12 >= (unint64_t)((v7 - v8) >> 3))
      {
        unint64_t v78 = v15;
        uint64_t v79 = v13;
        goto LABEL_32;
      }
    }
    uint64_t v28 = (uint64_t)(v11 - (void)v14) >> 4;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
    {
      unint64_t v78 = v15;
      uint64_t v79 = v13;
      long long v77 = v14;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v13 - v14) >> 3 > v29) {
      unint64_t v29 = (v13 - v14) >> 3;
    }
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30)
    {
      if (v30 >> 60)
      {
        unint64_t v78 = v15;
        uint64_t v79 = v13;
        long long v77 = v14;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v31 = (char *)operator new(16 * v30);
      uint64_t v32 = (uint64_t)&v31[16 * v28];
      *(double *)uint64_t v32 = v27;
      *(_DWORD *)(v32 + 8) = v12;
      if ((char *)v11 != v14)
      {
LABEL_22:
        uint64_t v33 = v32;
        do
        {
          uint64_t v34 = (char *)(v33 - 16);
          *(_OWORD *)(v33 - 16) = *(_OWORD *)(v11 - 16);
          v11 -= 16;
          v33 -= 16;
        }
        while ((char *)v11 != v14);
        unint64_t v13 = &v31[16 * v30];
        unint64_t v15 = v32 + 16;
        if (!v14) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v14);
LABEL_26:
        unint64_t v14 = v34;
        uint64_t v10 = a1;
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = 16 * v28;
      *(double *)uint64_t v32 = v26;
      *(_DWORD *)(v32 + 8) = v12;
      if ((char *)v11 != v14) {
        goto LABEL_22;
      }
    }
    uint64_t v34 = (char *)v32;
    unint64_t v13 = &v31[16 * v30];
    unint64_t v15 = v32 + 16;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  unint64_t v11 = 0;
  unint64_t v14 = 0;
LABEL_32:
  unint64_t v35 = 126 - 2 * __clz((uint64_t)(v11 - (void)v14) >> 4);
  long long v77 = v14;
  if ((char *)v11 == v14) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(v11, v11, (uint64_t)v14, (unint64_t)v14, (uint64_t)&v73, v36, 1);
  LODWORD(v4) = llround((1.0 - a4) * (double)v6);
  if ((int)v4 >= 1)
  {
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v42 = (int *)&v14[16 * v40 + 8];
        if (v39 >= v38) {
          break;
        }
        *(_DWORD *)uint64_t v39 = *v42;
        v39 += 4;
        uint64_t v41 = (uint64_t)v39;
        __n128 v81 = v39;
        if (++v40 == v4) {
          goto LABEL_68;
        }
      }
      uint64_t v43 = (v39 - (char *)v37) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v38 - (char *)v37) >> 1 > v44) {
        unint64_t v44 = (v38 - (char *)v37) >> 1;
      }
      if ((unint64_t)(v38 - (char *)v37) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45)
      {
        if (v45 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v46 = operator new(4 * v45);
        uint64_t v47 = (int *)&v46[4 * v43];
        int *v47 = *v42;
        uint64_t v41 = (uint64_t)(v47 + 1);
        if (v39 == (char *)v37) {
          goto LABEL_53;
        }
      }
      else
      {
        unint64_t v46 = 0;
        uint64_t v47 = (int *)(4 * v43);
        *(_DWORD *)(4 * v43) = *v42;
        uint64_t v41 = 4 * v43 + 4;
        if (v39 == (char *)v37) {
          goto LABEL_53;
        }
      }
      unint64_t v48 = v39 - 4 - (char *)v37;
      if (v48 >= 0xBC)
      {
        if (&v46[v39 - (char *)v37 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v46[v39 - (char *)v37 - 4])
        {
          uint64_t v49 = v39;
        }
        else if (&v39[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v39 - 4)
        {
          uint64_t v49 = v39;
        }
        else if ((unint64_t)((char *)v37 - v46) >= 0x20)
        {
          uint64_t v51 = (v48 >> 2) + 1;
          uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v49 = &v39[-v52];
          uint64_t v47 = (int *)((char *)v47 - v52);
          uint64_t v53 = &v46[4 * v43 - 16];
          uint64_t v54 = v39 - 16;
          uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *uint64_t v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 8;
          }
          while (v55);
          if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v49 = v39;
        }
      }
      else
      {
        uint64_t v49 = v39;
      }
      do
      {
        int v50 = *((_DWORD *)v49 - 1);
        v49 -= 4;
        *--uint64_t v47 = v50;
      }
      while (v49 != (char *)v37);
LABEL_53:
      unint64_t v38 = &v46[4 * v45];
      uint64_t v80 = v47;
      __n128 v81 = (char *)v41;
      unint64_t v82 = v38;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v37 = v47;
      __n128 v81 = (char *)v41;
      ++v40;
      uint64_t v39 = (char *)v41;
      if (v40 == v4) {
        goto LABEL_68;
      }
    }
  }
  uint64_t v41 = 0;
LABEL_68:
  operations_research::sat::NeighborhoodGeneratorHelper::RemoveMarkedConstraints(*(void *)(a1 + 32), &v80, a3);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 40), v57);
  uint64_t v58 = *(void *)(a1 + 216);
  *(void *)(a3 + 152) = v58;
  *(void *)(a1 + 216) = v58 + 1;
  uint64_t v73 = v58;
  std::string __p = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v59 = v80;
  int64_t v60 = v41 - (void)v80;
  if (v60)
  {
    if (v60 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v61 = (char *)operator new(v60);
    uint64_t v62 = &v61[4 * (v60 >> 2)];
    std::string __p = v61;
    uint64_t v76 = v62;
    memcpy(v61, v59, v60);
    uint64_t v75 = v62;
  }
  uint64_t v83 = (uint64_t *)(a1 + 168);
  unsigned int v84 = &v73;
  p_p = &__p;
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::EmplaceDecomposable::operator()<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<std::vector<int>&&>>(&v83, &v73, &v84, (uint64_t *)&p_p, (uint64_t)v72);
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(a1 + 40), v63, v64, v65, v66, v67, v68, v69);
  if (v77) {
    operator delete(v77);
  }
  if (v59) {
    operator delete(v59);
  }
}

void sub_23CC14274(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v24, a2, a3, a4, a5, a6, a7, a8);
  operations_research::sat::Neighborhood::~Neighborhood(a10);
  if (v23)
  {
    operator delete(v23);
    double v26 = a22;
    if (!a22) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    double v26 = a22;
    if (!a22) {
      goto LABEL_5;
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::NeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::NeighborhoodGenerator *this)
{
  return 0;
}

void operations_research::sat::SimpleNeighborhoodGenerator::~SimpleNeighborhoodGenerator(operations_research::sat::SimpleNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SimpleNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SimpleNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::VariableGraphNeighborhoodGenerator::~VariableGraphNeighborhoodGenerator(operations_research::sat::VariableGraphNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::VariableGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::VariableGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::ConstraintGraphNeighborhoodGenerator::~ConstraintGraphNeighborhoodGenerator(operations_research::sat::ConstraintGraphNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConstraintGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConstraintGraphNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::SchedulingNeighborhoodGenerator::~SchedulingNeighborhoodGenerator(operations_research::sat::SchedulingNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator::~SchedulingTimeWindowNeighborhoodGenerator(operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SchedulingTimeWindowNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::RelaxationInducedNeighborhoodGenerator::~RelaxationInducedNeighborhoodGenerator(operations_research::sat::RelaxationInducedNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::RelaxationInducedNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::RelaxationInducedNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::~ConsecutiveConstraintsRelaxationNeighborhoodGenerator(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F0BF548;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

uint64_t operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::ConsecutiveConstraintsRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

void operations_research::sat::NeighborhoodGeneratorHelper::~NeighborhoodGeneratorHelper(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  operations_research::sat::NeighborhoodGeneratorHelper::~NeighborhoodGeneratorHelper(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;

  *(void *)this = &unk_26F0BF4D0;
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 38);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 39);
    int v6 = (void *)*((void *)this + 38);
    if (v5 != v4)
    {
      uint64_t v7 = *((void *)this + 39);
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      int v6 = (void *)*((void *)this + 38);
    }
    *((void *)this + 39) = v4;
    operator delete(v6);
  }
  uint64_t v10 = *((void *)this + 35);
  if (v10)
  {
    unint64_t v11 = *((void *)this + 36);
    uint64_t v12 = (void *)*((void *)this + 35);
    if (v11 != v10)
    {
      unint64_t v13 = *((void *)this + 36);
      do
      {
        unint64_t v15 = *(void **)(v13 - 24);
        v13 -= 24;
        unint64_t v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        unint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v10;
    operator delete(v12);
  }
  double v16 = *((void *)this + 32);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 33);
    unint64_t v18 = (void *)*((void *)this + 32);
    if (v17 != v16)
    {
      uint64_t v19 = *((void *)this + 33);
      do
      {
        double v21 = *(void **)(v19 - 24);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      unint64_t v18 = (void *)*((void *)this + 32);
    }
    *((void *)this + 33) = v16;
    operator delete(v18);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 248));
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::NeighborhoodGeneratorHelper *)((char *)this + 104));
  *(void *)this = &unk_26F0BF840;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t operations_research::sat::NeighborhoodGeneratorHelper::TaskIsAvailable(operations_research::sat::NeighborhoodGeneratorHelper *this)
{
  return 0;
}

void operations_research::sat::NeighborhoodGeneratorHelper::GenerateTask(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::~WeightedRandomRelaxationNeighborhoodGenerator(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::~WeightedRandomRelaxationNeighborhoodGenerator(this);

  JUMPOUT(0x23ECF2BC0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_26F0BF508;
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)((char *)this + 176);
    do
    {
      if ((*(char *)(*((void *)this + 21) + v4) & 0x80000000) == 0)
      {
        int v6 = *v5 + v3;
        uint64_t v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(void *)(v6 + 16) = v7;
          operator delete(v7);
          uint64_t v2 = *((void *)this + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*((void **)this + 21));
    *((void *)this + 21) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 26) = 0;
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    void *v5 = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 25);
  if (v8) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 17);
  if (v9)
  {
    *((void *)this + 18) = v9;
    operator delete(v9);
  }
  *(void *)this = &unk_26F0BF548;
  uint64_t v10 = (void *)*((void *)this + 6);
  if (v10)
  {
    *((void *)this + 7) = v10;
    operator delete(v10);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *)((char *)this + 40));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::ReadyToGenerate(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

uint64_t operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::IsRelaxationGenerator(operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator *this)
{
  return 1;
}

void google::MakeCheckOpString<long long,long long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC14B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = (operations_research::sat::IntegerVariableProto **)(*(void *)(a1 + 16) + 8);
      do
      {
        int v6 = *v5++;
        operations_research::sat::IntegerVariableProto::Clear(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(a1 + 8) = 0;
    }
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, *(_DWORD *)(a2 + 8));
      uint64_t v10 = v9;
      uint64_t v11 = **(int **)(a1 + 16);
      uint64_t v12 = *(int *)(a1 + 8);
      int v13 = v11 - v12;
      if ((int)v11 - (int)v12 >= v7) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = v13;
      }
      if ((int)v14 >= 1)
      {
        unint64_t v15 = (operations_research::sat::IntegerVariableProto **)(v8 + 8);
        double v16 = (operations_research::sat::IntegerVariableProto **)v9;
        do
        {
          unint64_t v18 = *v15++;
          uint64_t v17 = v18;
          uint64_t v19 = *v16++;
          google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v17, v19);
          --v14;
        }
        while (v14);
      }
      if (v13 < v7)
      {
        uint64_t v20 = *(google::protobuf::Arena **)a1;
        int v21 = v12 + v7 - v11;
        uint64_t v22 = 8 * v11 - 8 * v12;
        uint64_t v23 = (operations_research::sat::IntegerVariableProto **)((char *)v10 + v22);
        unsigned int v24 = (operations_research::sat::IntegerVariableProto **)(v22 + v8 + 8);
        do
        {
          unsigned int v25 = *v24++;
          double v26 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(v20);
          google::protobuf::internal::GenericTypeHandler<operations_research::sat::IntegerVariableProto>::Merge(v25, v26);
          *v23++ = v26;
          --v21;
        }
        while (v21);
      }
      int v27 = *(_DWORD *)(a1 + 8) + v7;
      *(_DWORD *)(a1 + 8) = v27;
      uint64_t v28 = *(int **)(a1 + 16);
      if (*v28 < v27) {
        int *v28 = v27;
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 80;
    if (result + 80 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = v2;
        int v7 = *(_DWORD *)(v6 + 88);
        int v8 = *(_DWORD *)(v6 + 8);
        if (v7 >= v8)
        {
          if (v8 < v7) {
            goto LABEL_6;
          }
          double v9 = *(double *)(v6 + 96);
          double v10 = *(double *)(v6 + 16);
          if (v9 >= v10)
          {
            if (v10 < v9) {
              goto LABEL_6;
            }
            double v11 = *(double *)(v6 + 104);
            double v12 = *(double *)(v6 + 24);
            if (v11 >= v12)
            {
              if (v12 < v11) {
                goto LABEL_6;
              }
              double v13 = *(double *)(v6 + 112);
              double v14 = *(double *)(v6 + 32);
              if (v13 >= v14)
              {
                if (v14 < v13) {
                  goto LABEL_6;
                }
                uint64_t v15 = *(void *)(v6 + 120);
                uint64_t v16 = *(void *)(v6 + 40);
                if (v15 >= v16)
                {
                  if (v16 < v15) {
                    goto LABEL_6;
                  }
                  uint64_t v17 = *(void *)(v6 + 128);
                  uint64_t v18 = *(void *)(v6 + 48);
                  if (v17 >= v18)
                  {
                    if (v18 < v17) {
                      goto LABEL_6;
                    }
                    uint64_t v19 = *(void *)(v6 + 136);
                    uint64_t v20 = *(void *)(v6 + 56);
                    if (v19 >= v20)
                    {
                      if (v20 < v19) {
                        goto LABEL_6;
                      }
                      uint64_t v21 = *(void *)(v6 + 144);
                      uint64_t v22 = *(void *)(v6 + 64);
                      if (v21 >= v22)
                      {
                        if (v22 < v21) {
                          goto LABEL_6;
                        }
                        uint64_t v23 = *(void *)(v6 + 152);
                        uint64_t v24 = *(void *)(v6 + 72);
                        if (v23 >= v24 && (v24 < v23 || *(void *)v4 >= *(void *)v6)) {
                          goto LABEL_6;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          double v9 = *(double *)(v6 + 96);
        }
        uint64_t v25 = *(void *)(v6 + 80);
        int v26 = *(_DWORD *)(v6 + 92);
        double v27 = *(double *)(v6 + 104);
        double v28 = *(double *)(v6 + 112);
        uint64_t v29 = *(void *)(v6 + 120);
        uint64_t v30 = *(void *)(v6 + 128);
        uint64_t v31 = *(void *)(v6 + 136);
        uint64_t v32 = *(void *)(v6 + 144);
        uint64_t v33 = *(void *)(v6 + 152);
        long long v34 = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v4 + 48) = v34;
        *(_OWORD *)(v4 + 64) = *(_OWORD *)(v6 + 64);
        long long v35 = *(_OWORD *)(v6 + 16);
        uint64_t v5 = result;
        *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
        *(_OWORD *)(v4 + 16) = v35;
        if (v6 == result) {
          goto LABEL_5;
        }
        uint64_t v36 = v3;
        while (1)
        {
          uint64_t v39 = (double *)(result + v36);
          uint64_t v40 = (_OWORD *)(result + v36 - 80);
          int v41 = *(_DWORD *)(result + v36 - 72);
          if (v7 >= v41)
          {
            if (v41 < v7) {
              goto LABEL_50;
            }
            double v42 = *(v39 - 8);
            if (v9 >= v42)
            {
              if (v42 < v9) {
                goto LABEL_50;
              }
              double v43 = *(v39 - 7);
              if (v27 >= v43)
              {
                if (v43 < v27) {
                  goto LABEL_50;
                }
                double v44 = *(v39 - 6);
                if (v28 >= v44)
                {
                  if (v44 < v28) {
                    goto LABEL_50;
                  }
                  uint64_t v45 = *((void *)v39 - 5);
                  if (v29 >= v45)
                  {
                    if (v45 < v29) {
                      goto LABEL_50;
                    }
                    uint64_t v46 = *((void *)v39 - 4);
                    if (v30 >= v46)
                    {
                      if (v46 < v30) {
                        goto LABEL_50;
                      }
                      uint64_t v47 = *((void *)v39 - 3);
                      if (v31 >= v47)
                      {
                        if (v47 < v31) {
                          goto LABEL_50;
                        }
                        uint64_t v48 = *((void *)v39 - 2);
                        if (v32 >= v48)
                        {
                          if (v48 < v32) {
                            goto LABEL_50;
                          }
                          uint64_t v49 = *((void *)v39 - 1);
                          if (v33 >= v49) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_29:
          v6 -= 80;
          long long v37 = *(_OWORD *)(result + v36 - 32);
          *((_OWORD *)v39 + 2) = *(_OWORD *)(result + v36 - 48);
          *((_OWORD *)v39 + 3) = v37;
          *((_OWORD *)v39 + 4) = *(_OWORD *)(result + v36 - 16);
          long long v38 = *(_OWORD *)(result + v36 - 64);
          *(_OWORD *)uint64_t v39 = *v40;
          *((_OWORD *)v39 + 1) = v38;
          v36 -= 80;
          if (!v36)
          {
            uint64_t v5 = result;
            goto LABEL_5;
          }
        }
        if (v49 >= v33) {
          break;
        }
LABEL_50:
        uint64_t v5 = v6;
LABEL_5:
        *(void *)uint64_t v5 = v25;
        *(_DWORD *)(v5 + 8) = v7;
        *(_DWORD *)(v5 + 12) = v26;
        *(double *)(v5 + 16) = v9;
        *(double *)(v5 + 24) = v27;
        *(double *)(v5 + 32) = v28;
        *(void *)(v5 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v29;
        *(void *)(v5 + 48) = v30;
        *(void *)(v5 + 56) = v31;
        *(void *)(v5 + 64) = v32;
        *(void *)(v5 + 72) = v33;
LABEL_6:
        uint64_t v2 = v4 + 80;
        v3 += 80;
        if (v4 + 80 == a2) {
          return result;
        }
      }
      if (v25 >= *(void *)v40)
      {
        uint64_t v5 = result + v36;
        goto LABEL_5;
      }
      goto LABEL_29;
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(void *result, void *a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 10 == a2) {
        return result;
      }
      uint64_t v2 = result;
      result += 10;
      int v3 = *((_DWORD *)v2 + 22);
      int v4 = *((_DWORD *)v2 + 2);
      if (v3 >= v4)
      {
        if (v4 >= v3)
        {
          double v5 = *((double *)v2 + 12);
          double v27 = *((double *)v2 + 2);
          if (v5 < v27) {
            goto LABEL_7;
          }
          if (v27 >= v5)
          {
            double v28 = *((double *)v2 + 13);
            double v29 = *((double *)v2 + 3);
            if (v28 < v29) {
              goto LABEL_7;
            }
            if (v29 >= v28)
            {
              double v30 = *((double *)v2 + 14);
              double v31 = *((double *)v2 + 4);
              if (v30 < v31) {
                goto LABEL_7;
              }
              if (v31 >= v30)
              {
                uint64_t v32 = v2[15];
                uint64_t v33 = v2[5];
                if (v32 < v33) {
                  goto LABEL_7;
                }
                if (v33 >= v32)
                {
                  uint64_t v34 = v2[16];
                  uint64_t v35 = v2[6];
                  if (v34 < v35) {
                    goto LABEL_7;
                  }
                  if (v35 >= v34)
                  {
                    uint64_t v36 = v2[17];
                    uint64_t v37 = v2[7];
                    if (v36 < v37) {
                      goto LABEL_7;
                    }
                    if (v37 >= v36)
                    {
                      uint64_t v38 = v2[18];
                      uint64_t v39 = v2[8];
                      if (v38 < v39) {
                        goto LABEL_7;
                      }
                      if (v39 >= v38)
                      {
                        uint64_t v40 = v2[19];
                        uint64_t v41 = v2[9];
                        if (v40 < v41 || v41 >= v40 && *result < *v2) {
                          goto LABEL_7;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        double v5 = *((double *)v2 + 12);
LABEL_7:
        uint64_t v6 = *result;
        int v7 = *((_DWORD *)v2 + 23);
        double v8 = *((double *)v2 + 13);
        double v9 = *((double *)v2 + 14);
        uint64_t v10 = v2[15];
        uint64_t v11 = v2[16];
        uint64_t v12 = v2[17];
        uint64_t v13 = v2[18];
        double v14 = result;
        uint64_t v15 = v2[19];
        while (1)
        {
          long long v16 = *(v14 - 2);
          v14[2] = *(v14 - 3);
          v14[3] = v16;
          v14[4] = *(v14 - 1);
          long long v17 = *(v14 - 4);
          *double v14 = *(v14 - 5);
          v14[1] = v17;
          int v18 = *((_DWORD *)v14 - 38);
          if (v3 >= v18)
          {
            if (v18 < v3) {
              break;
            }
            double v19 = *((double *)v14 - 18);
            if (v5 >= v19)
            {
              if (v19 < v5) {
                break;
              }
              double v20 = *((double *)v14 - 17);
              if (v8 >= v20)
              {
                if (v20 < v8) {
                  break;
                }
                double v21 = *((double *)v14 - 16);
                if (v9 >= v21)
                {
                  if (v21 < v9) {
                    break;
                  }
                  uint64_t v22 = *((void *)v14 - 15);
                  if (v10 >= v22)
                  {
                    if (v22 < v10) {
                      break;
                    }
                    uint64_t v23 = *((void *)v14 - 14);
                    if (v11 >= v23)
                    {
                      if (v23 < v11) {
                        break;
                      }
                      uint64_t v24 = *((void *)v14 - 13);
                      if (v12 >= v24)
                      {
                        if (v24 < v12) {
                          break;
                        }
                        uint64_t v25 = *((void *)v14 - 12);
                        if (v13 >= v25)
                        {
                          if (v25 < v13) {
                            break;
                          }
                          uint64_t v26 = *((void *)v14 - 11);
                          if (v15 >= v26 && (v26 < v15 || v6 >= *((void *)v14 - 20))) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v14 -= 5;
        }
        *((void *)v14 - 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v6;
        *((_DWORD *)v14 - 18) = v3;
        *((_DWORD *)v14 - 17) = v7;
        *((double *)v14 - 8) = v5;
        *((double *)v14 - 7) = v8;
        *((double *)v14 - 6) = v9;
        *((void *)v14 - 5) = v10;
        *((void *)v14 - 4) = v11;
        *((void *)v14 - 3) = v12;
        *((void *)v14 - 2) = v13;
        *((void *)v14 - 1) = v15;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(long long *a1, long long *a2, long long *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  int v4 = *((_DWORD *)a1 + 2);
  if (v3 < v4) {
    goto LABEL_2;
  }
  if (v4 < v3) {
    goto LABEL_7;
  }
  double v24 = *((double *)a2 + 2);
  double v25 = *((double *)a1 + 2);
  if (v24 < v25) {
    goto LABEL_2;
  }
  if (v25 < v24) {
    goto LABEL_7;
  }
  double v26 = *((double *)a2 + 3);
  double v27 = *((double *)a1 + 3);
  if (v26 < v27) {
    goto LABEL_2;
  }
  if (v27 < v26) {
    goto LABEL_7;
  }
  double v28 = *((double *)a2 + 4);
  double v29 = *((double *)a1 + 4);
  if (v28 < v29) {
    goto LABEL_2;
  }
  if (v29 < v28) {
    goto LABEL_7;
  }
  uint64_t v30 = *((void *)a2 + 5);
  uint64_t v31 = *((void *)a1 + 5);
  if (v30 < v31) {
    goto LABEL_2;
  }
  if (v31 < v30) {
    goto LABEL_7;
  }
  uint64_t v32 = *((void *)a2 + 6);
  uint64_t v33 = *((void *)a1 + 6);
  if (v32 < v33
    || v33 >= v32
    && ((uint64_t v34 = *((void *)a2 + 7), v35 = *((void *)a1 + 7), v34 < v35)
     || v35 >= v34
     && ((v36 = *((void *)a2 + 8), uint64_t v37 = *((void *)a1 + 8), v36 < v37)
      || v37 >= v36
      && ((uint64_t v38 = *((void *)a2 + 9), v39 = *((void *)a1 + 9), v38 < v39)
       || v39 >= v38 && *(void *)a2 < *(void *)a1))))
  {
LABEL_2:
    int v5 = *((_DWORD *)a3 + 2);
    if (v5 < v3) {
      goto LABEL_31;
    }
    if (v3 >= v5)
    {
      double v40 = *((double *)a3 + 2);
      double v41 = *((double *)a2 + 2);
      if (v40 < v41) {
        goto LABEL_31;
      }
      if (v41 >= v40)
      {
        double v47 = *((double *)a3 + 3);
        double v48 = *((double *)a2 + 3);
        if (v47 < v48) {
          goto LABEL_31;
        }
        if (v48 >= v47)
        {
          double v49 = *((double *)a3 + 4);
          double v50 = *((double *)a2 + 4);
          if (v49 < v50) {
            goto LABEL_31;
          }
          if (v50 >= v49)
          {
            uint64_t v51 = *((void *)a3 + 5);
            uint64_t v52 = *((void *)a2 + 5);
            if (v51 < v52) {
              goto LABEL_31;
            }
            if (v52 >= v51)
            {
              uint64_t v53 = *((void *)a3 + 6);
              uint64_t v54 = *((void *)a2 + 6);
              if (v53 < v54
                || v54 >= v53
                && ((uint64_t v55 = *((void *)a3 + 7), v56 = *((void *)a2 + 7), v55 < v56)
                 || v56 >= v55
                 && ((uint64_t v57 = *((void *)a3 + 8), v58 = *((void *)a2 + 8), v57 < v58)
                  || v58 >= v57
                  && ((uint64_t v59 = *((void *)a3 + 9), v60 = *((void *)a2 + 9), v59 < v60)
                   || v60 >= v59 && *(void *)a3 < *(void *)a2))))
              {
LABEL_31:
                long long v121 = a1[2];
                long long v126 = a1[3];
                long long v131 = a1[4];
                long long v111 = *a1;
                long long v116 = a1[1];
                *a1 = *a3;
                long long v42 = a3[4];
                long long v44 = a3[1];
                long long v43 = a3[2];
                a1[3] = a3[3];
                a1[4] = v42;
                a1[1] = v44;
                a1[2] = v43;
                a3[3] = v126;
                a3[4] = v131;
                a3[2] = v121;
                uint64_t result = 1;
                *a3 = v111;
                a3[1] = v116;
                return result;
              }
            }
          }
        }
      }
    }
    long long v117 = a1[2];
    long long v122 = a1[3];
    long long v127 = a1[4];
    long long v107 = *a1;
    long long v112 = a1[1];
    *a1 = *a2;
    long long v6 = a2[4];
    long long v8 = a2[1];
    long long v7 = a2[2];
    a1[3] = a2[3];
    a1[4] = v6;
    a1[1] = v8;
    a1[2] = v7;
    a2[3] = v122;
    a2[4] = v127;
    *a2 = v107;
    a2[1] = v112;
    a2[2] = v117;
    int v9 = *((_DWORD *)a3 + 2);
    int v10 = *((_DWORD *)a2 + 2);
    if (v9 < v10) {
      goto LABEL_5;
    }
    if (v10 < v9) {
      return 1;
    }
    double v61 = *((double *)a3 + 2);
    double v62 = *((double *)a2 + 2);
    if (v61 < v62) {
      goto LABEL_5;
    }
    if (v62 < v61) {
      return 1;
    }
    double v67 = *((double *)a3 + 3);
    double v68 = *((double *)a2 + 3);
    if (v67 < v68) {
      goto LABEL_5;
    }
    if (v68 < v67) {
      return 1;
    }
    double v73 = *((double *)a3 + 4);
    double v74 = *((double *)a2 + 4);
    if (v73 < v74) {
      goto LABEL_5;
    }
    if (v74 < v73) {
      return 1;
    }
    uint64_t v79 = *((void *)a3 + 5);
    uint64_t v80 = *((void *)a2 + 5);
    if (v79 < v80) {
      goto LABEL_5;
    }
    if (v80 < v79) {
      return 1;
    }
    uint64_t v85 = *((void *)a3 + 6);
    uint64_t v86 = *((void *)a2 + 6);
    if (v85 < v86) {
      goto LABEL_5;
    }
    if (v86 < v85) {
      return 1;
    }
    uint64_t v91 = *((void *)a3 + 7);
    uint64_t v92 = *((void *)a2 + 7);
    if (v91 < v92) {
      goto LABEL_5;
    }
    if (v92 < v91) {
      return 1;
    }
    uint64_t v97 = *((void *)a3 + 8);
    uint64_t v98 = *((void *)a2 + 8);
    if (v97 < v98) {
      goto LABEL_5;
    }
    if (v98 < v97) {
      return 1;
    }
    uint64_t v103 = *((void *)a3 + 9);
    uint64_t v104 = *((void *)a2 + 9);
    if (v103 < v104) {
      goto LABEL_5;
    }
    if (v104 < v103) {
      return 1;
    }
    if (*(void *)a3 < *(void *)a2)
    {
LABEL_5:
      long long v118 = a2[2];
      long long v123 = a2[3];
      long long v128 = a2[4];
      long long v108 = *a2;
      long long v113 = a2[1];
      *a2 = *a3;
      long long v11 = a3[4];
      long long v13 = a3[1];
      long long v12 = a3[2];
      a2[3] = a3[3];
      a2[4] = v11;
      a2[1] = v13;
      a2[2] = v12;
      a3[3] = v123;
      a3[4] = v128;
      a3[2] = v118;
      uint64_t result = 2;
      *a3 = v108;
      a3[1] = v113;
      return result;
    }
    return 1;
  }
  else
  {
LABEL_7:
    int v15 = *((_DWORD *)a3 + 2);
    if (v15 < v3) {
      goto LABEL_8;
    }
    if (v3 < v15) {
      return 0;
    }
    double v45 = *((double *)a3 + 2);
    double v46 = *((double *)a2 + 2);
    if (v45 < v46) {
      goto LABEL_8;
    }
    if (v46 < v45) {
      return 0;
    }
    double v65 = *((double *)a3 + 3);
    double v66 = *((double *)a2 + 3);
    if (v65 < v66) {
      goto LABEL_8;
    }
    if (v66 < v65) {
      return 0;
    }
    double v71 = *((double *)a3 + 4);
    double v72 = *((double *)a2 + 4);
    if (v71 < v72) {
      goto LABEL_8;
    }
    if (v72 < v71) {
      return 0;
    }
    uint64_t v77 = *((void *)a3 + 5);
    uint64_t v78 = *((void *)a2 + 5);
    if (v77 < v78) {
      goto LABEL_8;
    }
    if (v78 < v77) {
      return 0;
    }
    uint64_t v83 = *((void *)a3 + 6);
    uint64_t v84 = *((void *)a2 + 6);
    if (v83 < v84) {
      goto LABEL_8;
    }
    if (v84 < v83) {
      return 0;
    }
    uint64_t v89 = *((void *)a3 + 7);
    uint64_t v90 = *((void *)a2 + 7);
    if (v89 < v90) {
      goto LABEL_8;
    }
    if (v90 < v89) {
      return 0;
    }
    uint64_t v95 = *((void *)a3 + 8);
    uint64_t v96 = *((void *)a2 + 8);
    if (v95 < v96) {
      goto LABEL_8;
    }
    if (v96 < v95) {
      return 0;
    }
    uint64_t v101 = *((void *)a3 + 9);
    uint64_t v102 = *((void *)a2 + 9);
    if (v101 < v102) {
      goto LABEL_8;
    }
    if (v102 < v101) {
      return 0;
    }
    if (*(void *)a3 < *(void *)a2)
    {
LABEL_8:
      long long v119 = a2[2];
      long long v124 = a2[3];
      long long v129 = a2[4];
      long long v109 = *a2;
      long long v114 = a2[1];
      *a2 = *a3;
      long long v16 = a3[4];
      long long v18 = a3[1];
      long long v17 = a3[2];
      a2[3] = a3[3];
      a2[4] = v16;
      a2[1] = v18;
      a2[2] = v17;
      a3[3] = v124;
      a3[4] = v129;
      *a3 = v109;
      a3[1] = v114;
      a3[2] = v119;
      int v19 = *((_DWORD *)a2 + 2);
      int v20 = *((_DWORD *)a1 + 2);
      if (v19 < v20)
      {
LABEL_9:
        long long v120 = a1[2];
        long long v125 = a1[3];
        long long v130 = a1[4];
        long long v110 = *a1;
        long long v115 = a1[1];
        *a1 = *a2;
        long long v21 = a2[4];
        long long v23 = a2[1];
        long long v22 = a2[2];
        a1[3] = a2[3];
        a1[4] = v21;
        a1[1] = v23;
        a1[2] = v22;
        a2[3] = v125;
        a2[4] = v130;
        uint64_t result = 2;
        *a2 = v110;
        a2[1] = v115;
        a2[2] = v120;
        return result;
      }
      if (v20 >= v19)
      {
        double v63 = *((double *)a2 + 2);
        double v64 = *((double *)a1 + 2);
        if (v63 < v64) {
          goto LABEL_9;
        }
        if (v64 >= v63)
        {
          double v69 = *((double *)a2 + 3);
          double v70 = *((double *)a1 + 3);
          if (v69 < v70) {
            goto LABEL_9;
          }
          if (v70 >= v69)
          {
            double v75 = *((double *)a2 + 4);
            double v76 = *((double *)a1 + 4);
            if (v75 < v76) {
              goto LABEL_9;
            }
            if (v76 >= v75)
            {
              uint64_t v81 = *((void *)a2 + 5);
              uint64_t v82 = *((void *)a1 + 5);
              if (v81 < v82) {
                goto LABEL_9;
              }
              if (v82 >= v81)
              {
                uint64_t v87 = *((void *)a2 + 6);
                uint64_t v88 = *((void *)a1 + 6);
                if (v87 < v88) {
                  goto LABEL_9;
                }
                if (v88 >= v87)
                {
                  uint64_t v93 = *((void *)a2 + 7);
                  uint64_t v94 = *((void *)a1 + 7);
                  if (v93 < v94) {
                    goto LABEL_9;
                  }
                  if (v94 >= v93)
                  {
                    uint64_t v99 = *((void *)a2 + 8);
                    uint64_t v100 = *((void *)a1 + 8);
                    if (v99 < v100) {
                      goto LABEL_9;
                    }
                    if (v100 >= v99)
                    {
                      uint64_t v105 = *((void *)a2 + 9);
                      uint64_t v106 = *((void *)a1 + 9);
                      if (v105 < v106) {
                        goto LABEL_9;
                      }
                      if (v106 >= v105)
                      {
                        if (*(void *)a2 < *(void *)a1) {
                          goto LABEL_9;
                        }
                        return 1;
                      }
                      else
                      {
                        return 1;
                      }
                    }
                    else
                    {
                      return 1;
                    }
                  }
                  else
                  {
                    return 1;
                  }
                }
                else
                {
                  return 1;
                }
              }
              else
              {
                return 1;
              }
            }
            else
            {
              return 1;
            }
          }
          else
          {
            return 1;
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>(long long *a1, unint64_t a2)
{
  double v2 = *(double *)a1;
  uint64_t v3 = *((void *)a1 + 1);
  double v4 = *((double *)a1 + 2);
  double v5 = *((double *)a1 + 3);
  double v6 = *((double *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v9 = *((void *)a1 + 7);
  uint64_t v10 = *((void *)a1 + 8);
  uint64_t v11 = *((void *)a1 + 9);
  int v12 = *(_DWORD *)(a2 - 72);
  if ((int)v3 < v12) {
    goto LABEL_20;
  }
  if (v12 >= (int)v3)
  {
    double v13 = *(double *)(a2 - 64);
    if (v4 < v13
      || v13 >= v4
      && ((double v14 = *(double *)(a2 - 56), v5 < v14)
       || v14 >= v5
       && ((double v15 = *(double *)(a2 - 48), v6 < v15)
        || v15 >= v6
        && ((uint64_t v16 = *(void *)(a2 - 40), v7 < v16)
         || v16 >= v7
         && ((uint64_t v17 = *(void *)(a2 - 32), v8 < v17)
          || v17 >= v8
          && ((uint64_t v18 = *(void *)(a2 - 24), v9 < v18)
           || v18 >= v9
           && ((uint64_t v19 = *(void *)(a2 - 16), v10 < v19)
            || v19 >= v10
            && ((uint64_t v20 = *(void *)(a2 - 8), v11 < v20) || v20 >= v11 && *(uint64_t *)&v2 < *(void *)(a2 - 80)))))))))
    {
LABEL_20:
      uint64_t i = a1 + 5;
      int v22 = *((_DWORD *)a1 + 22);
      if ((int)v3 < v22) {
        goto LABEL_66;
      }
      long long v23 = (uint64_t *)(a1 + 6);
      while (1)
      {
        if (v22 >= (int)v3)
        {
          if (v4 < *(double *)v23) {
            goto LABEL_66;
          }
          if (*(double *)v23 >= v4)
          {
            double v24 = *((double *)v23 + 1);
            if (v5 < v24) {
              goto LABEL_66;
            }
            if (v24 >= v5)
            {
              double v25 = *((double *)v23 + 2);
              if (v6 < v25) {
                goto LABEL_66;
              }
              if (v25 >= v6)
              {
                uint64_t v26 = v23[3];
                if (v7 < v26) {
                  goto LABEL_66;
                }
                if (v26 >= v7)
                {
                  uint64_t v27 = v23[4];
                  if (v8 < v27) {
                    goto LABEL_66;
                  }
                  if (v27 >= v8)
                  {
                    uint64_t v28 = v23[5];
                    if (v9 < v28) {
                      goto LABEL_66;
                    }
                    if (v28 >= v9)
                    {
                      uint64_t v29 = v23[6];
                      if (v10 < v29) {
                        goto LABEL_66;
                      }
                      if (v29 >= v10)
                      {
                        uint64_t v30 = v23[7];
                        if (v11 < v30)
                        {
LABEL_65:
                          uint64_t i = (long long *)(v23 - 2);
                          goto LABEL_66;
                        }
                        if (v30 >= v11 && *(uint64_t *)&v2 < *(v23 - 2)) {
                          goto LABEL_66;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        i += 5;
        int v22 = *((_DWORD *)v23 + 18);
        v23 += 10;
        if ((int)v3 < v22) {
          goto LABEL_65;
        }
      }
    }
  }
  for (uint64_t i = a1 + 5; (unint64_t)i < a2; i += 5)
  {
    int v31 = *((_DWORD *)i + 2);
    if ((int)v3 < v31) {
      break;
    }
    if (v31 >= (int)v3)
    {
      double v32 = *((double *)i + 2);
      if (v4 < v32) {
        break;
      }
      if (v32 >= v4)
      {
        double v33 = *((double *)i + 3);
        if (v5 < v33) {
          break;
        }
        if (v33 >= v5)
        {
          double v34 = *((double *)i + 4);
          if (v6 < v34) {
            break;
          }
          if (v34 >= v6)
          {
            uint64_t v35 = *((void *)i + 5);
            if (v7 < v35) {
              break;
            }
            if (v35 >= v7)
            {
              uint64_t v36 = *((void *)i + 6);
              if (v8 < v36) {
                break;
              }
              if (v36 >= v8)
              {
                uint64_t v37 = *((void *)i + 7);
                if (v9 < v37) {
                  break;
                }
                if (v37 >= v9)
                {
                  uint64_t v38 = *((void *)i + 8);
                  if (v10 < v38) {
                    break;
                  }
                  if (v38 >= v10)
                  {
                    uint64_t v39 = *((void *)i + 9);
                    if (v11 < v39 || v39 >= v11 && *(uint64_t *)&v2 < *(void *)i) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_66:
  if ((unint64_t)i < a2)
  {
    for (unint64_t j = a2 - 152; ; j -= 80)
    {
      if ((int)v3 >= v12)
      {
        if (v12 < (int)v3) {
          break;
        }
        double v42 = *(double *)(j + 88);
        if (v4 >= v42)
        {
          if (v42 < v4) {
            break;
          }
          double v43 = *(double *)(j + 96);
          if (v5 >= v43)
          {
            if (v43 < v5) {
              break;
            }
            double v44 = *(double *)(j + 104);
            if (v6 >= v44)
            {
              if (v44 < v6) {
                break;
              }
              uint64_t v45 = *(void *)(j + 112);
              if (v7 >= v45)
              {
                if (v45 < v7) {
                  break;
                }
                uint64_t v46 = *(void *)(j + 120);
                if (v8 >= v46)
                {
                  if (v46 < v8) {
                    break;
                  }
                  uint64_t v47 = *(void *)(j + 128);
                  if (v9 >= v47)
                  {
                    if (v47 < v9) {
                      break;
                    }
                    uint64_t v48 = *(void *)(j + 136);
                    if (v10 >= v48)
                    {
                      if (v48 < v10) {
                        break;
                      }
                      uint64_t v49 = *(void *)(j + 144);
                      if (v11 >= v49 && (v49 < v11 || *(uint64_t *)&v2 >= *(void *)(j + 72))) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      int v41 = *(_DWORD *)j;
      int v12 = v41;
    }
    a2 = j + 72;
  }
  while ((unint64_t)i < a2)
  {
    long long v76 = *i;
    long long v79 = i[3];
    long long v80 = i[4];
    long long v77 = i[1];
    long long v78 = i[2];
    long long v50 = *(_OWORD *)(a2 + 64);
    long long v52 = *(_OWORD *)(a2 + 16);
    long long v51 = *(_OWORD *)(a2 + 32);
    i[3] = *(_OWORD *)(a2 + 48);
    i[4] = v50;
    i[1] = v52;
    i[2] = v51;
    *uint64_t i = *(_OWORD *)a2;
    *(_OWORD *)(a2 + 48) = v79;
    *(_OWORD *)(a2 + 64) = v80;
    *(_OWORD *)(a2 + 16) = v77;
    *(_OWORD *)(a2 + 32) = v78;
    *(_OWORD *)a2 = v76;
    uint64_t v53 = i + 5;
    int v54 = *((_DWORD *)i + 22);
    if ((int)v3 >= v54)
    {
      uint64_t v55 = i + 6;
      while (1)
      {
        if (v54 >= (int)v3)
        {
          if (v4 < *(double *)v55)
          {
            uint64_t i = v53;
            goto LABEL_120;
          }
          if (*(double *)v55 >= v4)
          {
            double v56 = *((double *)v55 + 1);
            if (v5 < v56)
            {
              uint64_t i = v53;
              goto LABEL_120;
            }
            if (v56 >= v5)
            {
              double v57 = *((double *)v55 + 2);
              if (v6 < v57)
              {
                uint64_t i = v53;
                goto LABEL_120;
              }
              if (v57 >= v6)
              {
                uint64_t v58 = *((void *)v55 + 3);
                if (v7 < v58)
                {
                  uint64_t i = v53;
                  goto LABEL_120;
                }
                if (v58 >= v7)
                {
                  uint64_t v59 = *((void *)v55 + 4);
                  if (v8 < v59)
                  {
                    uint64_t i = v53;
                    goto LABEL_120;
                  }
                  if (v59 >= v8)
                  {
                    uint64_t v60 = *((void *)v55 + 5);
                    if (v9 < v60)
                    {
                      uint64_t i = v53;
                      goto LABEL_120;
                    }
                    if (v60 >= v9)
                    {
                      uint64_t v61 = *((void *)v55 + 6);
                      if (v10 < v61)
                      {
                        uint64_t i = v53;
                        goto LABEL_120;
                      }
                      if (v61 >= v10)
                      {
                        uint64_t v62 = *((void *)v55 + 7);
                        if (v11 < v62)
                        {
                          uint64_t i = v53;
                          goto LABEL_120;
                        }
                        if (v62 >= v11 && *(uint64_t *)&v2 < *((void *)v55 - 2))
                        {
LABEL_111:
                          uint64_t i = v55 - 1;
                          goto LABEL_120;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v53 += 5;
        int v54 = *((_DWORD *)v55 + 18);
        v55 += 5;
        if ((int)v3 < v54) {
          goto LABEL_111;
        }
      }
    }
    i += 5;
    while (1)
    {
      do
      {
LABEL_120:
        a2 -= 80;
        int v63 = *(_DWORD *)(a2 + 8);
      }
      while ((int)v3 < v63);
      if (v63 < (int)v3) {
        break;
      }
      double v64 = *(double *)(a2 + 16);
      if (v4 >= v64)
      {
        if (v64 < v4) {
          break;
        }
        double v65 = *(double *)(a2 + 24);
        if (v5 >= v65)
        {
          if (v65 < v5) {
            break;
          }
          double v66 = *(double *)(a2 + 32);
          if (v6 >= v66)
          {
            if (v66 < v6) {
              break;
            }
            uint64_t v67 = *(void *)(a2 + 40);
            if (v7 >= v67)
            {
              if (v67 < v7) {
                break;
              }
              uint64_t v68 = *(void *)(a2 + 48);
              if (v8 >= v68)
              {
                if (v68 < v8) {
                  break;
                }
                uint64_t v69 = *(void *)(a2 + 56);
                if (v9 >= v69)
                {
                  if (v69 < v9) {
                    break;
                  }
                  uint64_t v70 = *(void *)(a2 + 64);
                  if (v10 >= v70)
                  {
                    if (v70 < v10) {
                      break;
                    }
                    uint64_t v71 = *(void *)(a2 + 72);
                    if (v11 >= v71 && (v71 < v11 || *(uint64_t *)&v2 >= *(void *)a2)) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (i - 5 != a1)
  {
    *a1 = *(i - 5);
    long long v72 = *(i - 4);
    long long v73 = *(i - 3);
    long long v74 = *(i - 1);
    a1[3] = *(i - 2);
    a1[4] = v74;
    a1[1] = v72;
    a1[2] = v73;
  }
  *((double *)i - 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v2;
  *((void *)i - 9) = v3;
  *((double *)i - 8) = v4;
  *((double *)i - 7) = v5;
  *((double *)i - 6) = v6;
  *((void *)i - 5) = v7;
  *((void *)i - 4) = v8;
  *((void *)i - 3) = v9;
  *((void *)i - 2) = v10;
  *((void *)i - 1) = v11;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = a1[4];
  uint64_t v8 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *((void *)a1 + 9);
  while (1)
  {
    double v13 = (uint64_t *)&a1[v2];
    int v14 = LODWORD(a1[v2 + 11]);
    if (v14 >= (int)v4)
    {
      if ((int)v4 < v14) {
        break;
      }
      double v15 = *((double *)v13 + 12);
      if (v15 >= v5)
      {
        if (v5 < v15) {
          break;
        }
        double v16 = *((double *)v13 + 13);
        if (v16 >= v6)
        {
          if (v6 < v16) {
            break;
          }
          double v17 = *((double *)v13 + 14);
          if (v17 >= v7)
          {
            if (v7 < v17) {
              break;
            }
            uint64_t v18 = v13[15];
            if (v18 >= v8)
            {
              if (v8 < v18) {
                break;
              }
              uint64_t v19 = v13[16];
              if (v19 >= v9)
              {
                if (v9 < v19) {
                  break;
                }
                uint64_t v20 = v13[17];
                if (v20 >= v10)
                {
                  if (v10 < v20) {
                    break;
                  }
                  uint64_t v21 = v13[18];
                  if (v21 >= v11)
                  {
                    if (v11 < v21) {
                      break;
                    }
                    uint64_t v22 = v13[19];
                    if (v22 >= v12 && (v12 < v22 || v13[10] >= *(uint64_t *)&v3)) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v2 += 10;
  }
  unint64_t v23 = (unint64_t)&a1[v2 + 10];
  if (v2 * 8)
  {
    double v24 = a2 - 10;
    int v25 = *((_DWORD *)a2 - 18);
    if (v25 >= (int)v4)
    {
      uint64_t v26 = a2 - 8;
      while (1)
      {
        if ((int)v4 >= v25)
        {
          if (*v26 < v5) {
            break;
          }
          if (v5 >= *v26)
          {
            double v27 = v26[1];
            if (v27 < v6) {
              break;
            }
            if (v6 >= v27)
            {
              double v28 = v26[2];
              if (v28 < v7) {
                break;
              }
              if (v7 >= v28)
              {
                uint64_t v29 = *((void *)v26 + 3);
                if (v29 < v8) {
                  break;
                }
                if (v8 >= v29)
                {
                  uint64_t v30 = *((void *)v26 + 4);
                  if (v30 < v9) {
                    break;
                  }
                  if (v9 >= v30)
                  {
                    uint64_t v31 = *((void *)v26 + 5);
                    if (v31 < v10) {
                      break;
                    }
                    if (v10 >= v31)
                    {
                      uint64_t v32 = *((void *)v26 + 6);
                      if (v32 < v11) {
                        break;
                      }
                      if (v11 >= v32)
                      {
                        uint64_t v33 = *((void *)v26 + 7);
                        if (v33 < v12) {
                          goto LABEL_68;
                        }
                        if (v12 >= v33 && *((void *)v26 - 2) < *(uint64_t *)&v3) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v24 -= 10;
        int v25 = *((_DWORD *)v26 - 22);
        v26 -= 10;
        if (v25 < (int)v4) {
          goto LABEL_68;
        }
      }
    }
  }
  else
  {
    if (v23 >= (unint64_t)a2)
    {
LABEL_115:
      double v24 = a2;
      unint64_t v42 = v23;
      if (v23 >= (unint64_t)a2) {
        goto LABEL_116;
      }
      goto LABEL_70;
    }
    double v24 = a2 - 10;
    int v34 = *((_DWORD *)a2 - 18);
    if (v34 >= (int)v4)
    {
      uint64_t v26 = a2 - 8;
      while (1)
      {
        a2 = v26 - 2;
        if ((int)v4 >= v34)
        {
          if (*v26 < v5) {
            break;
          }
          if (v5 >= *v26)
          {
            double v35 = v26[1];
            if (v35 < v6) {
              break;
            }
            if (v6 >= v35)
            {
              double v36 = v26[2];
              if (v36 < v7) {
                break;
              }
              if (v7 >= v36)
              {
                uint64_t v37 = *((void *)v26 + 3);
                if (v37 < v8) {
                  break;
                }
                if (v8 >= v37)
                {
                  uint64_t v38 = *((void *)v26 + 4);
                  if (v38 < v9) {
                    break;
                  }
                  if (v9 >= v38)
                  {
                    uint64_t v39 = *((void *)v26 + 5);
                    if (v39 < v10) {
                      break;
                    }
                    if (v10 >= v39)
                    {
                      uint64_t v40 = *((void *)v26 + 6);
                      if (v40 < v11) {
                        break;
                      }
                      if (v11 >= v40)
                      {
                        uint64_t v41 = *((void *)v26 + 7);
                        if (v41 < v12) {
                          goto LABEL_115;
                        }
                        if (v12 >= v41 && *(void *)a2 < *(uint64_t *)&v3) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v23 >= (unint64_t)a2) {
          break;
        }
        v24 -= 10;
        int v34 = *((_DWORD *)v26 - 22);
        v26 -= 10;
        if (v34 < (int)v4)
        {
LABEL_68:
          double v24 = v26 - 2;
          break;
        }
      }
    }
  }
  unint64_t v42 = v23;
  if (v23 >= (unint64_t)v24) {
    goto LABEL_116;
  }
LABEL_70:
  double v43 = v24;
  do
  {
    long long v70 = *(_OWORD *)v42;
    long long v73 = *(_OWORD *)(v42 + 48);
    long long v74 = *(_OWORD *)(v42 + 64);
    long long v71 = *(_OWORD *)(v42 + 16);
    long long v72 = *(_OWORD *)(v42 + 32);
    long long v45 = *((_OWORD *)v43 + 4);
    long long v47 = *((_OWORD *)v43 + 1);
    long long v46 = *((_OWORD *)v43 + 2);
    *(_OWORD *)(v42 + 48) = *((_OWORD *)v43 + 3);
    *(_OWORD *)(v42 + 64) = v45;
    *(_OWORD *)(v42 + 16) = v47;
    *(_OWORD *)(v42 + 32) = v46;
    *(_OWORD *)unint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v43 + 3) = v73;
    *((_OWORD *)v43 + 4) = v74;
    *((_OWORD *)v43 + 1) = v71;
    *((_OWORD *)v43 + 2) = v72;
    *(_OWORD *)double v43 = v70;
    while (1)
    {
      do
      {
        v42 += 80;
        int v48 = *(_DWORD *)(v42 + 8);
      }
      while (v48 < (int)v4);
      if ((int)v4 < v48) {
        break;
      }
      double v49 = *(double *)(v42 + 16);
      if (v49 >= v5)
      {
        if (v5 < v49) {
          break;
        }
        double v50 = *(double *)(v42 + 24);
        if (v50 >= v6)
        {
          if (v6 < v50) {
            break;
          }
          double v51 = *(double *)(v42 + 32);
          if (v51 >= v7)
          {
            if (v7 < v51) {
              break;
            }
            uint64_t v52 = *(void *)(v42 + 40);
            if (v52 >= v8)
            {
              if (v8 < v52) {
                break;
              }
              uint64_t v53 = *(void *)(v42 + 48);
              if (v53 >= v9)
              {
                if (v9 < v53) {
                  break;
                }
                uint64_t v54 = *(void *)(v42 + 56);
                if (v54 >= v10)
                {
                  if (v10 < v54) {
                    break;
                  }
                  uint64_t v55 = *(void *)(v42 + 64);
                  if (v55 >= v11)
                  {
                    if (v11 < v55) {
                      break;
                    }
                    uint64_t v56 = *(void *)(v42 + 72);
                    if (v56 >= v12 && (v12 < v56 || *(void *)v42 >= *(uint64_t *)&v3)) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    double v44 = v43 - 10;
    int v57 = *((_DWORD *)v43 - 18);
    if (v57 >= (int)v4)
    {
      uint64_t v58 = v43 - 8;
      do
      {
        if ((int)v4 >= v57)
        {
          if (*v58 < v5) {
            goto LABEL_72;
          }
          if (v5 >= *v58)
          {
            double v59 = v58[1];
            if (v59 < v6) {
              goto LABEL_72;
            }
            if (v6 >= v59)
            {
              double v60 = v58[2];
              if (v60 < v7) {
                goto LABEL_72;
              }
              if (v7 >= v60)
              {
                uint64_t v61 = *((void *)v58 + 3);
                if (v61 < v8) {
                  goto LABEL_72;
                }
                if (v8 >= v61)
                {
                  uint64_t v62 = *((void *)v58 + 4);
                  if (v62 < v9) {
                    goto LABEL_72;
                  }
                  if (v9 >= v62)
                  {
                    uint64_t v63 = *((void *)v58 + 5);
                    if (v63 < v10) {
                      goto LABEL_72;
                    }
                    if (v10 >= v63)
                    {
                      uint64_t v64 = *((void *)v58 + 6);
                      if (v64 < v11) {
                        goto LABEL_72;
                      }
                      if (v11 >= v64)
                      {
                        uint64_t v65 = *((void *)v58 + 7);
                        if (v65 < v12) {
                          goto LABEL_72;
                        }
                        if (v12 >= v65 && *((void *)v58 - 2) < *(uint64_t *)&v3) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v44 -= 10;
        int v57 = *((_DWORD *)v58 - 22);
        v58 -= 10;
      }
      while (v57 >= (int)v4);
      double v44 = v58 - 2;
    }
LABEL_72:
    double v43 = v44;
  }
  while (v42 < (unint64_t)v44);
LABEL_116:
  if ((double *)(v42 - 80) != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v42 - 80);
    long long v66 = *(_OWORD *)(v42 - 64);
    long long v67 = *(_OWORD *)(v42 - 48);
    long long v68 = *(_OWORD *)(v42 - 16);
    *((_OWORD *)a1 + 3) = *(_OWORD *)(v42 - 32);
    *((_OWORD *)a1 + 4) = v68;
    *((_OWORD *)a1 + 1) = v66;
    *((_OWORD *)a1 + 2) = v67;
  }
  *(double *)(v42 - 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v3;
  *(void *)(v42 - 72) = v4;
  *(double *)(v42 - 64) = v5;
  *(double *)(v42 - 56) = v6;
  *(double *)(v42 - 48) = v7;
  *(void *)(v42 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v8;
  *(void *)(v42 - 32) = v9;
  *(void *)(v42 - 24) = v10;
  *(void *)(v42 - 16) = v11;
  *(void *)(v42 - 8) = v12;
  return v42 - 80;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v55 = (long long *)(a2 - 80);
      int v56 = *(_DWORD *)(a2 - 72);
      int v57 = *(_DWORD *)(a1 + 8);
      if (v56 < v57) {
        goto LABEL_56;
      }
      if (v57 >= v56)
      {
        double v61 = *(double *)(a2 - 64);
        double v62 = *(double *)(a1 + 16);
        if (v61 < v62) {
          goto LABEL_56;
        }
        if (v62 >= v61)
        {
          double v63 = *(double *)(a2 - 56);
          double v64 = *(double *)(a1 + 24);
          if (v63 < v64) {
            goto LABEL_56;
          }
          if (v64 >= v63)
          {
            double v65 = *(double *)(a2 - 48);
            double v66 = *(double *)(a1 + 32);
            if (v65 < v66) {
              goto LABEL_56;
            }
            if (v66 >= v65)
            {
              uint64_t v67 = *(void *)(a2 - 40);
              uint64_t v68 = *(void *)(a1 + 40);
              if (v67 < v68) {
                goto LABEL_56;
              }
              if (v68 >= v67)
              {
                uint64_t v69 = *(void *)(a2 - 32);
                uint64_t v70 = *(void *)(a1 + 48);
                if (v69 < v70
                  || v70 >= v69
                  && ((uint64_t v71 = *(void *)(a2 - 24), v72 = *(void *)(a1 + 56), v71 < v72)
                   || v72 >= v71
                   && ((uint64_t v73 = *(void *)(a2 - 16), v74 = *(void *)(a1 + 64), v73 < v74)
                    || v74 >= v73
                    && ((uint64_t v75 = *(void *)(a2 - 8), v76 = *(void *)(a1 + 72), v75 < v76)
                     || v76 >= v75 && *(void *)v55 < *(void *)a1))))
                {
LABEL_56:
                  long long v79 = *(_OWORD *)(a1 + 32);
                  long long v80 = *(_OWORD *)(a1 + 48);
                  long long v81 = *(_OWORD *)(a1 + 64);
                  long long v77 = *(_OWORD *)a1;
                  long long v78 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)a1 = *v55;
                  long long v58 = *(_OWORD *)(a2 - 16);
                  long long v60 = *(_OWORD *)(a2 - 64);
                  long long v59 = *(_OWORD *)(a2 - 48);
                  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
                  *(_OWORD *)(a1 + 64) = v58;
                  *(_OWORD *)(a1 + 16) = v60;
                  *(_OWORD *)(a1 + 32) = v59;
                  *(_OWORD *)(a2 - 32) = v80;
                  *(_OWORD *)(a2 - 16) = v81;
                  *uint64_t v55 = v77;
                  *(_OWORD *)(a2 - 64) = v78;
                  *(_OWORD *)(a2 - 48) = v79;
                }
              }
            }
          }
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)a1, (long long *)(a1 + 80), (long long *)(a2 - 80));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      uint64_t v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)a1, (long long *)(a1 + 80), (long long *)(a1 + 160));
      uint64_t v7 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    int v11 = *(_DWORD *)(v7 + 8);
    int v12 = *(_DWORD *)(v6 + 8);
    if (v11 >= v12)
    {
      if (v12 < v11) {
        goto LABEL_8;
      }
      double v13 = *(double *)(v7 + 16);
      double v14 = *(double *)(v6 + 16);
      if (v13 >= v14)
      {
        if (v14 < v13) {
          goto LABEL_8;
        }
        double v15 = *(double *)(v7 + 24);
        double v16 = *(double *)(v6 + 24);
        if (v15 >= v16)
        {
          if (v16 < v15) {
            goto LABEL_8;
          }
          double v43 = *(double *)(v7 + 32);
          double v44 = *(double *)(v6 + 32);
          if (v43 >= v44)
          {
            if (v44 < v43) {
              goto LABEL_8;
            }
            uint64_t v45 = *(void *)(v7 + 40);
            uint64_t v46 = *(void *)(v6 + 40);
            if (v45 >= v46)
            {
              if (v46 < v45) {
                goto LABEL_8;
              }
              uint64_t v47 = *(void *)(v7 + 48);
              uint64_t v48 = *(void *)(v6 + 48);
              if (v47 >= v48)
              {
                if (v48 < v47) {
                  goto LABEL_8;
                }
                uint64_t v49 = *(void *)(v7 + 56);
                uint64_t v50 = *(void *)(v6 + 56);
                if (v49 >= v50)
                {
                  if (v50 < v49) {
                    goto LABEL_8;
                  }
                  uint64_t v51 = *(void *)(v7 + 64);
                  uint64_t v52 = *(void *)(v6 + 64);
                  if (v51 >= v52)
                  {
                    if (v52 < v51) {
                      goto LABEL_8;
                    }
                    uint64_t v53 = *(void *)(v7 + 72);
                    uint64_t v54 = *(void *)(v6 + 72);
                    if (v53 >= v54 && (v54 < v53 || *(void *)v7 >= *(void *)v6)) {
                      goto LABEL_8;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      double v13 = *(double *)(v7 + 16);
    }
    uint64_t v17 = *(void *)v7;
    int v18 = *(_DWORD *)(v7 + 12);
    double v19 = *(double *)(v7 + 24);
    double v20 = *(double *)(v7 + 32);
    uint64_t v21 = *(void *)(v7 + 40);
    uint64_t v22 = *(void *)(v7 + 48);
    uint64_t v23 = *(void *)(v7 + 56);
    uint64_t v24 = *(void *)(v7 + 64);
    uint64_t v25 = *(void *)(v7 + 72);
    long long v26 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 + 48) = v26;
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v6 + 64);
    long long v27 = *(_OWORD *)(v6 + 16);
    uint64_t v10 = a1;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v27;
    if (v6 == a1) {
      goto LABEL_7;
    }
    uint64_t v28 = v8;
    while (1)
    {
      uint64_t v32 = a1 + v28;
      uint64_t v33 = (_OWORD *)(a1 + v28 + 80);
      int v34 = *(_DWORD *)(a1 + v28 + 88);
      if (v11 >= v34)
      {
        if (v34 < v11) {
          goto LABEL_38;
        }
        double v35 = *(double *)(v32 + 96);
        if (v13 >= v35)
        {
          if (v35 < v13) {
            goto LABEL_38;
          }
          double v36 = *(double *)(v32 + 104);
          if (v19 >= v36)
          {
            if (v36 < v19) {
              goto LABEL_38;
            }
            double v37 = *(double *)(v32 + 112);
            if (v20 >= v37)
            {
              if (v37 < v20) {
                goto LABEL_38;
              }
              uint64_t v38 = *(void *)(v32 + 120);
              if (v21 >= v38)
              {
                if (v38 < v21) {
                  goto LABEL_38;
                }
                uint64_t v39 = *(void *)(v32 + 128);
                if (v22 >= v39)
                {
                  if (v39 < v22) {
                    goto LABEL_38;
                  }
                  uint64_t v40 = *(void *)(v32 + 136);
                  if (v23 >= v40)
                  {
                    if (v40 < v23) {
                      goto LABEL_38;
                    }
                    uint64_t v41 = *(void *)(v32 + 144);
                    if (v24 >= v41)
                    {
                      if (v41 < v24) {
                        goto LABEL_38;
                      }
                      uint64_t v42 = *(void *)(v32 + 152);
                      if (v25 >= v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_17:
      uint64_t v29 = (_OWORD *)(v32 + 160);
      v6 -= 80;
      long long v30 = *(_OWORD *)(a1 + v28 + 128);
      v29[2] = *(_OWORD *)(a1 + v28 + 112);
      v29[3] = v30;
      v29[4] = *(_OWORD *)(a1 + v28 + 144);
      long long v31 = *(_OWORD *)(a1 + v28 + 96);
      *uint64_t v29 = *v33;
      v29[1] = v31;
      v28 -= 80;
      if (v28 == -160)
      {
        uint64_t v10 = a1;
        goto LABEL_7;
      }
    }
    if (v42 >= v25)
    {
      if (v17 >= *(void *)v33)
      {
        uint64_t v10 = a1 + v28 + 160;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
LABEL_38:
    uint64_t v10 = v6;
LABEL_7:
    *(void *)uint64_t v10 = v17;
    *(_DWORD *)(v10 + 8) = v11;
    *(_DWORD *)(v10 + 12) = v18;
    *(double *)(v10 + 16) = v13;
    *(double *)(v10 + 24) = v19;
    *(double *)(v10 + 32) = v20;
    *(void *)(v10 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v21;
    *(void *)(v10 + 48) = v22;
    *(void *)(v10 + 56) = v23;
    *(void *)(v10 + 64) = v24;
    ++v9;
    *(void *)(v10 + 72) = v25;
    if (v9 == 8) {
      return v7 + 80 == a2;
    }
LABEL_8:
    uint64_t v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)a1, (long long *)a2, (long long *)a3);
  int v9 = *(_DWORD *)(a4 + 8);
  int v10 = *(_DWORD *)(a3 + 8);
  if (v9 < v10) {
    goto LABEL_59;
  }
  if (v10 >= v9)
  {
    double v40 = *(double *)(a4 + 16);
    double v41 = *(double *)(a3 + 16);
    if (v40 < v41) {
      goto LABEL_59;
    }
    if (v41 >= v40)
    {
      double v42 = *(double *)(a4 + 24);
      double v43 = *(double *)(a3 + 24);
      if (v42 < v43) {
        goto LABEL_59;
      }
      if (v43 >= v42)
      {
        double v44 = *(double *)(a4 + 32);
        double v45 = *(double *)(a3 + 32);
        if (v44 < v45) {
          goto LABEL_59;
        }
        if (v45 >= v44)
        {
          uint64_t v46 = *(void *)(a4 + 40);
          uint64_t v47 = *(void *)(a3 + 40);
          if (v46 < v47) {
            goto LABEL_59;
          }
          if (v47 >= v46)
          {
            uint64_t v48 = *(void *)(a4 + 48);
            uint64_t v49 = *(void *)(a3 + 48);
            if (v48 < v49
              || v49 >= v48
              && ((uint64_t v50 = *(void *)(a4 + 56), v51 = *(void *)(a3 + 56), v50 < v51)
               || v51 >= v50
               && ((uint64_t v52 = *(void *)(a4 + 64), v53 = *(void *)(a3 + 64), v52 < v53)
                || v53 >= v52
                && ((uint64_t v54 = *(void *)(a4 + 72), v55 = *(void *)(a3 + 72), v54 < v55)
                 || v55 >= v54 && *(void *)a4 < *(void *)a3))))
            {
LABEL_59:
              long long v78 = *(_OWORD *)(a3 + 32);
              long long v81 = *(_OWORD *)(a3 + 48);
              long long v84 = *(_OWORD *)(a3 + 64);
              long long v72 = *(_OWORD *)a3;
              long long v75 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a3 = *(_OWORD *)a4;
              long long v11 = *(_OWORD *)(a4 + 64);
              long long v13 = *(_OWORD *)(a4 + 16);
              long long v12 = *(_OWORD *)(a4 + 32);
              *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
              *(_OWORD *)(a3 + 64) = v11;
              *(_OWORD *)(a3 + 16) = v13;
              *(_OWORD *)(a3 + 32) = v12;
              *(_OWORD *)(a4 + 48) = v81;
              *(_OWORD *)(a4 + 64) = v84;
              *(_OWORD *)a4 = v72;
              *(_OWORD *)(a4 + 16) = v75;
              *(_OWORD *)(a4 + 32) = v78;
              int v14 = *(_DWORD *)(a3 + 8);
              int v15 = *(_DWORD *)(a2 + 8);
              if (v14 < v15) {
                goto LABEL_3;
              }
              if (v15 >= v14)
              {
                double v56 = *(double *)(a3 + 16);
                double v57 = *(double *)(a2 + 16);
                if (v56 < v57) {
                  goto LABEL_3;
                }
                if (v57 >= v56)
                {
                  double v58 = *(double *)(a3 + 24);
                  double v59 = *(double *)(a2 + 24);
                  if (v58 < v59) {
                    goto LABEL_3;
                  }
                  if (v59 >= v58)
                  {
                    double v60 = *(double *)(a3 + 32);
                    double v61 = *(double *)(a2 + 32);
                    if (v60 < v61) {
                      goto LABEL_3;
                    }
                    if (v61 >= v60)
                    {
                      uint64_t v62 = *(void *)(a3 + 40);
                      uint64_t v63 = *(void *)(a2 + 40);
                      if (v62 < v63) {
                        goto LABEL_3;
                      }
                      if (v63 >= v62)
                      {
                        uint64_t v64 = *(void *)(a3 + 48);
                        uint64_t v65 = *(void *)(a2 + 48);
                        if (v64 < v65
                          || v65 >= v64
                          && ((uint64_t v66 = *(void *)(a3 + 56), v67 = *(void *)(a2 + 56), v66 < v67)
                           || v67 >= v66
                           && ((uint64_t v68 = *(void *)(a3 + 64), v69 = *(void *)(a2 + 64), v68 < v69)
                            || v69 >= v68
                            && ((v70 = *(void *)(a3 + 72), uint64_t v71 = *(void *)(a2 + 72), v70 < v71)
                             || v71 >= v70 && *(void *)a3 < *(void *)a2))))
                        {
LABEL_3:
                          long long v79 = *(_OWORD *)(a2 + 32);
                          long long v82 = *(_OWORD *)(a2 + 48);
                          long long v85 = *(_OWORD *)(a2 + 64);
                          long long v73 = *(_OWORD *)a2;
                          long long v76 = *(_OWORD *)(a2 + 16);
                          *(_OWORD *)a2 = *(_OWORD *)a3;
                          long long v16 = *(_OWORD *)(a3 + 64);
                          long long v18 = *(_OWORD *)(a3 + 16);
                          long long v17 = *(_OWORD *)(a3 + 32);
                          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
                          *(_OWORD *)(a2 + 64) = v16;
                          *(_OWORD *)(a2 + 16) = v18;
                          *(_OWORD *)(a2 + 32) = v17;
                          *(_OWORD *)(a3 + 48) = v82;
                          *(_OWORD *)(a3 + 64) = v85;
                          *(_OWORD *)a3 = v73;
                          *(_OWORD *)(a3 + 16) = v76;
                          *(_OWORD *)(a3 + 32) = v79;
                          int v19 = *(_DWORD *)(a2 + 8);
                          int v20 = *(_DWORD *)(a1 + 8);
                          if (v19 < v20) {
                            goto LABEL_22;
                          }
                          if (v20 >= v19)
                          {
                            double v21 = *(double *)(a2 + 16);
                            double v22 = *(double *)(a1 + 16);
                            if (v21 < v22) {
                              goto LABEL_22;
                            }
                            if (v22 >= v21)
                            {
                              double v23 = *(double *)(a2 + 24);
                              double v24 = *(double *)(a1 + 24);
                              if (v23 < v24) {
                                goto LABEL_22;
                              }
                              if (v24 >= v23)
                              {
                                double v25 = *(double *)(a2 + 32);
                                double v26 = *(double *)(a1 + 32);
                                if (v25 < v26) {
                                  goto LABEL_22;
                                }
                                if (v26 >= v25)
                                {
                                  uint64_t v27 = *(void *)(a2 + 40);
                                  uint64_t v28 = *(void *)(a1 + 40);
                                  if (v27 < v28) {
                                    goto LABEL_22;
                                  }
                                  if (v28 >= v27)
                                  {
                                    uint64_t v29 = *(void *)(a2 + 48);
                                    uint64_t v30 = *(void *)(a1 + 48);
                                    if (v29 < v30
                                      || v30 >= v29
                                      && ((uint64_t v31 = *(void *)(a2 + 56), v32 = *(void *)(a1 + 56), v31 < v32)
                                       || v32 >= v31
                                       && ((uint64_t v33 = *(void *)(a2 + 64), v34 = *(void *)(a1 + 64), v33 < v34)
                                        || v34 >= v33
                                        && ((uint64_t v35 = *(void *)(a2 + 72), v36 = *(void *)(a1 + 72), v35 < v36)
                                         || v36 >= v35 && *(void *)a2 < *(void *)a1))))
                                    {
LABEL_22:
                                      long long v80 = *(_OWORD *)(a1 + 32);
                                      long long v83 = *(_OWORD *)(a1 + 48);
                                      long long v86 = *(_OWORD *)(a1 + 64);
                                      long long v74 = *(_OWORD *)a1;
                                      long long v77 = *(_OWORD *)(a1 + 16);
                                      *(_OWORD *)a1 = *(_OWORD *)a2;
                                      long long v37 = *(_OWORD *)(a2 + 64);
                                      long long v39 = *(_OWORD *)(a2 + 16);
                                      long long v38 = *(_OWORD *)(a2 + 32);
                                      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
                                      *(_OWORD *)(a1 + 64) = v37;
                                      *(_OWORD *)(a1 + 16) = v39;
                                      *(_OWORD *)(a1 + 32) = v38;
                                      *(_OWORD *)(a2 + 48) = v83;
                                      *(_OWORD *)(a2 + 64) = v86;
                                      *(_OWORD *)a2 = v74;
                                      *(_OWORD *)(a2 + 16) = v77;
                                      *(_OWORD *)(a2 + 32) = v80;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a2, a3, a4);
  int v11 = *(_DWORD *)(a5 + 8);
  int v12 = *(_DWORD *)(a4 + 8);
  if (v11 < v12) {
    goto LABEL_60;
  }
  if (v12 >= v11)
  {
    double v13 = *(double *)(a5 + 16);
    double v14 = *(double *)(a4 + 16);
    if (v13 < v14) {
      goto LABEL_60;
    }
    if (v14 >= v13)
    {
      double v15 = *(double *)(a5 + 24);
      double v16 = *(double *)(a4 + 24);
      if (v15 < v16) {
        goto LABEL_60;
      }
      if (v16 >= v15)
      {
        double v17 = *(double *)(a5 + 32);
        double v18 = *(double *)(a4 + 32);
        if (v17 < v18) {
          goto LABEL_60;
        }
        if (v18 >= v17)
        {
          uint64_t v19 = *(void *)(a5 + 40);
          uint64_t v20 = *(void *)(a4 + 40);
          if (v19 < v20) {
            goto LABEL_60;
          }
          if (v20 >= v19)
          {
            uint64_t v21 = *(void *)(a5 + 48);
            uint64_t v22 = *(void *)(a4 + 48);
            if (v21 < v22
              || v22 >= v21
              && ((uint64_t v23 = *(void *)(a5 + 56), v24 = *(void *)(a4 + 56), v23 < v24)
               || v24 >= v23
               && ((uint64_t v25 = *(void *)(a5 + 64), v26 = *(void *)(a4 + 64), v25 < v26)
                || v26 >= v25
                && ((uint64_t v27 = *(void *)(a5 + 72), v28 = *(void *)(a4 + 72), v27 < v28)
                 || v28 >= v27 && *(void *)a5 < *(void *)a4))))
            {
LABEL_60:
              long long v103 = *(_OWORD *)(a4 + 32);
              long long v107 = *(_OWORD *)(a4 + 48);
              long long v111 = *(_OWORD *)(a4 + 64);
              long long v95 = *(_OWORD *)a4;
              long long v99 = *(_OWORD *)(a4 + 16);
              *(_OWORD *)a4 = *(_OWORD *)a5;
              long long v29 = *(_OWORD *)(a5 + 64);
              long long v31 = *(_OWORD *)(a5 + 16);
              long long v30 = *(_OWORD *)(a5 + 32);
              *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
              *(_OWORD *)(a4 + 64) = v29;
              *(_OWORD *)(a4 + 16) = v31;
              *(_OWORD *)(a4 + 32) = v30;
              *(_OWORD *)(a5 + 48) = v107;
              *(_OWORD *)(a5 + 64) = v111;
              *(_OWORD *)a5 = v95;
              *(_OWORD *)(a5 + 16) = v99;
              *(_OWORD *)(a5 + 32) = v103;
              int v32 = *(_DWORD *)(a4 + 8);
              int v33 = *(_DWORD *)(a3 + 8);
              if (v32 < v33) {
                goto LABEL_83;
              }
              if (v33 >= v32)
              {
                double v47 = *(double *)(a4 + 16);
                double v48 = *(double *)(a3 + 16);
                if (v47 < v48) {
                  goto LABEL_83;
                }
                if (v48 >= v47)
                {
                  double v49 = *(double *)(a4 + 24);
                  double v50 = *(double *)(a3 + 24);
                  if (v49 < v50) {
                    goto LABEL_83;
                  }
                  if (v50 >= v49)
                  {
                    double v51 = *(double *)(a4 + 32);
                    double v52 = *(double *)(a3 + 32);
                    if (v51 < v52) {
                      goto LABEL_83;
                    }
                    if (v52 >= v51)
                    {
                      uint64_t v53 = *(void *)(a4 + 40);
                      uint64_t v54 = *(void *)(a3 + 40);
                      if (v53 < v54) {
                        goto LABEL_83;
                      }
                      if (v54 >= v53)
                      {
                        uint64_t v55 = *(void *)(a4 + 48);
                        uint64_t v56 = *(void *)(a3 + 48);
                        if (v55 < v56
                          || v56 >= v55
                          && ((uint64_t v57 = *(void *)(a4 + 56), v58 = *(void *)(a3 + 56), v57 < v58)
                           || v58 >= v57
                           && ((uint64_t v59 = *(void *)(a4 + 64), v60 = *(void *)(a3 + 64), v59 < v60)
                            || v60 >= v59
                            && ((v61 = *(void *)(a4 + 72), uint64_t v62 = *(void *)(a3 + 72), v61 < v62)
                             || v62 >= v61 && *(void *)a4 < *(void *)a3))))
                        {
LABEL_83:
                          long long v104 = *(_OWORD *)(a3 + 32);
                          long long v108 = *(_OWORD *)(a3 + 48);
                          long long v112 = *(_OWORD *)(a3 + 64);
                          long long v96 = *(_OWORD *)a3;
                          long long v100 = *(_OWORD *)(a3 + 16);
                          *(_OWORD *)a3 = *(_OWORD *)a4;
                          long long v34 = *(_OWORD *)(a4 + 64);
                          long long v36 = *(_OWORD *)(a4 + 16);
                          long long v35 = *(_OWORD *)(a4 + 32);
                          *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
                          *(_OWORD *)(a3 + 64) = v34;
                          *(_OWORD *)(a3 + 16) = v36;
                          *(_OWORD *)(a3 + 32) = v35;
                          *(_OWORD *)(a4 + 48) = v108;
                          *(_OWORD *)(a4 + 64) = v112;
                          *(_OWORD *)a4 = v96;
                          *(_OWORD *)(a4 + 16) = v100;
                          *(_OWORD *)(a4 + 32) = v104;
                          int v37 = *(_DWORD *)(a3 + 8);
                          int v38 = *(_DWORD *)(a2 + 8);
                          if (v37 < v38) {
                            goto LABEL_22;
                          }
                          if (v38 >= v37)
                          {
                            double v63 = *(double *)(a3 + 16);
                            double v64 = *(double *)(a2 + 16);
                            if (v63 < v64) {
                              goto LABEL_22;
                            }
                            if (v64 >= v63)
                            {
                              double v65 = *(double *)(a3 + 24);
                              double v66 = *(double *)(a2 + 24);
                              if (v65 < v66) {
                                goto LABEL_22;
                              }
                              if (v66 >= v65)
                              {
                                double v67 = *(double *)(a3 + 32);
                                double v68 = *(double *)(a2 + 32);
                                if (v67 < v68) {
                                  goto LABEL_22;
                                }
                                if (v68 >= v67)
                                {
                                  uint64_t v69 = *(void *)(a3 + 40);
                                  uint64_t v70 = *(void *)(a2 + 40);
                                  if (v69 < v70) {
                                    goto LABEL_22;
                                  }
                                  if (v70 >= v69)
                                  {
                                    uint64_t v71 = *(void *)(a3 + 48);
                                    uint64_t v72 = *(void *)(a2 + 48);
                                    if (v71 < v72
                                      || v72 >= v71
                                      && ((uint64_t v73 = *(void *)(a3 + 56), v74 = *(void *)(a2 + 56), v73 < v74)
                                       || v74 >= v73
                                       && ((uint64_t v75 = *(void *)(a3 + 64), v76 = *(void *)(a2 + 64), v75 < v76)
                                        || v76 >= v75
                                        && ((v77 = *(void *)(a3 + 72), uint64_t v78 = *(void *)(a2 + 72), v77 < v78)
                                         || v78 >= v77 && *(void *)a3 < *(void *)a2))))
                                    {
LABEL_22:
                                      long long v105 = *(_OWORD *)(a2 + 32);
                                      long long v109 = *(_OWORD *)(a2 + 48);
                                      long long v113 = *(_OWORD *)(a2 + 64);
                                      long long v97 = *(_OWORD *)a2;
                                      long long v101 = *(_OWORD *)(a2 + 16);
                                      *(_OWORD *)a2 = *(_OWORD *)a3;
                                      long long v39 = *(_OWORD *)(a3 + 64);
                                      long long v41 = *(_OWORD *)(a3 + 16);
                                      long long v40 = *(_OWORD *)(a3 + 32);
                                      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
                                      *(_OWORD *)(a2 + 64) = v39;
                                      *(_OWORD *)(a2 + 16) = v41;
                                      *(_OWORD *)(a2 + 32) = v40;
                                      *(_OWORD *)(a3 + 48) = v109;
                                      *(_OWORD *)(a3 + 64) = v113;
                                      *(_OWORD *)a3 = v97;
                                      *(_OWORD *)(a3 + 16) = v101;
                                      *(_OWORD *)(a3 + 32) = v105;
                                      int v42 = *(_DWORD *)(a2 + 8);
                                      int v43 = *(_DWORD *)(a1 + 8);
                                      if (v42 < v43) {
                                        goto LABEL_23;
                                      }
                                      if (v43 >= v42)
                                      {
                                        double v79 = *(double *)(a2 + 16);
                                        double v80 = *(double *)(a1 + 16);
                                        if (v79 < v80) {
                                          goto LABEL_23;
                                        }
                                        if (v80 >= v79)
                                        {
                                          double v81 = *(double *)(a2 + 24);
                                          double v82 = *(double *)(a1 + 24);
                                          if (v81 < v82) {
                                            goto LABEL_23;
                                          }
                                          if (v82 >= v81)
                                          {
                                            double v83 = *(double *)(a2 + 32);
                                            double v84 = *(double *)(a1 + 32);
                                            if (v83 < v84) {
                                              goto LABEL_23;
                                            }
                                            if (v84 >= v83)
                                            {
                                              uint64_t v85 = *(void *)(a2 + 40);
                                              uint64_t v86 = *(void *)(a1 + 40);
                                              if (v85 < v86) {
                                                goto LABEL_23;
                                              }
                                              if (v86 >= v85)
                                              {
                                                uint64_t v87 = *(void *)(a2 + 48);
                                                uint64_t v88 = *(void *)(a1 + 48);
                                                if (v87 < v88
                                                  || v88 >= v87
                                                  && ((uint64_t v89 = *(void *)(a2 + 56), v90 = *(void *)(a1 + 56), v89 < v90)
                                                   || v90 >= v89
                                                   && ((uint64_t v91 = *(void *)(a2 + 64), v92 = *(void *)(a1 + 64),
                                                                                    v91 < v92)
                                                    || v92 >= v91
                                                    && ((uint64_t v93 = *(void *)(a2 + 72),
                                                         uint64_t v94 = *(void *)(a1 + 72),
                                                         v93 < v94)
                                                     || v94 >= v93 && *(void *)a2 < *(void *)a1))))
                                                {
LABEL_23:
                                                  long long v106 = *(_OWORD *)(a1 + 32);
                                                  long long v110 = *(_OWORD *)(a1 + 48);
                                                  long long v114 = *(_OWORD *)(a1 + 64);
                                                  long long v98 = *(_OWORD *)a1;
                                                  long long v102 = *(_OWORD *)(a1 + 16);
                                                  *(_OWORD *)a1 = *(_OWORD *)a2;
                                                  long long v44 = *(_OWORD *)(a2 + 64);
                                                  long long v46 = *(_OWORD *)(a2 + 16);
                                                  long long v45 = *(_OWORD *)(a2 + 32);
                                                  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
                                                  *(_OWORD *)(a1 + 64) = v44;
                                                  *(_OWORD *)(a1 + 16) = v46;
                                                  *(_OWORD *)(a1 + 32) = v45;
                                                  *(_OWORD *)(a2 + 48) = v110;
                                                  *(_OWORD *)(a2 + 64) = v114;
                                                  *(_OWORD *)a2 = v98;
                                                  *(_OWORD *)(a2 + 16) = v102;
                                                  *(_OWORD *)(a2 + 32) = v106;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 4)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 4)) | 1;
      uint64_t v6 = (_OWORD *)(result + 80 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 4) + 2) < a3)
      {
        uint64_t v7 = result + 80 * v5;
        int v8 = *(_DWORD *)(v7 + 8);
        int v9 = *((_DWORD *)v6 + 22);
        if (v8 < v9) {
          goto LABEL_23;
        }
        if (v9 >= v8)
        {
          double v10 = *(double *)(v7 + 16);
          double v11 = *((double *)v6 + 12);
          if (v10 < v11) {
            goto LABEL_23;
          }
          if (v11 >= v10)
          {
            double v12 = *(double *)(v7 + 24);
            double v13 = *((double *)v6 + 13);
            if (v12 < v13) {
              goto LABEL_23;
            }
            if (v13 >= v12)
            {
              double v14 = *(double *)(v7 + 32);
              double v15 = *((double *)v6 + 14);
              if (v14 < v15) {
                goto LABEL_23;
              }
              if (v15 >= v14)
              {
                uint64_t v16 = *(void *)(v7 + 40);
                uint64_t v17 = *((void *)v6 + 15);
                if (v16 < v17) {
                  goto LABEL_23;
                }
                if (v17 >= v16)
                {
                  uint64_t v18 = *(void *)(v7 + 48);
                  uint64_t v19 = *((void *)v6 + 16);
                  if (v18 < v19
                    || v19 >= v18
                    && ((uint64_t v20 = *(void *)(v7 + 56), v21 = *((void *)v6 + 17), v20 < v21)
                     || v21 >= v20
                     && ((v22 = *(void *)(v7 + 64), uint64_t v23 = *((void *)v6 + 18), v22 < v23)
                      || v23 >= v22
                      && ((v24 = *(void *)(v7 + 72), uint64_t v25 = *((void *)v6 + 19), v24 < v25)
                       || v25 >= v24 && *(void *)v6 < *((void *)v6 + 10)))))
                  {
LABEL_23:
                    v6 += 5;
                    int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 4) + 2;
                  }
                }
              }
            }
          }
        }
      }
      int v26 = *((_DWORD *)v6 + 2);
      int v27 = *((_DWORD *)a4 + 2);
      if (v26 >= v27)
      {
        double v28 = *((double *)a4 + 2);
        if (v27 >= v26)
        {
          double v30 = *((double *)v6 + 2);
          if (v30 < v28) {
            return result;
          }
          double v29 = *((double *)a4 + 3);
          if (v28 >= v30)
          {
            double v31 = *((double *)v6 + 3);
            if (v31 < v29) {
              return result;
            }
            if (v29 >= v31)
            {
              double v32 = *((double *)v6 + 4);
              double v33 = *((double *)a4 + 4);
              if (v32 < v33) {
                return result;
              }
              if (v33 >= v32)
              {
                uint64_t v34 = *((void *)v6 + 5);
                uint64_t v35 = a4[5];
                if (v34 < v35) {
                  return result;
                }
                if (v35 >= v34)
                {
                  uint64_t v36 = *((void *)v6 + 6);
                  uint64_t v37 = a4[6];
                  if (v36 < v37) {
                    return result;
                  }
                  if (v37 >= v36)
                  {
                    uint64_t v38 = *((void *)v6 + 7);
                    uint64_t v39 = a4[7];
                    if (v38 < v39) {
                      return result;
                    }
                    if (v39 >= v38)
                    {
                      uint64_t v40 = *((void *)v6 + 8);
                      uint64_t v41 = a4[8];
                      if (v40 < v41) {
                        return result;
                      }
                      if (v41 >= v40)
                      {
                        uint64_t v42 = *((void *)v6 + 9);
                        uint64_t v43 = a4[9];
                        if (v42 < v43 || v43 >= v42 && *(void *)v6 < *a4) {
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          double v29 = *((double *)a4 + 3);
        }
        uint64_t v44 = *a4;
        int v45 = *((_DWORD *)a4 + 3);
        double v46 = *((double *)a4 + 4);
        uint64_t v47 = a4[5];
        uint64_t v48 = a4[6];
        uint64_t v49 = a4[7];
        uint64_t v50 = a4[8];
        uint64_t v51 = a4[9];
        *(_OWORD *)a4 = *v6;
        long long v52 = v6[4];
        long long v54 = v6[1];
        long long v53 = v6[2];
        *((_OWORD *)a4 + 3) = v6[3];
        *((_OWORD *)a4 + 4) = v52;
        *((_OWORD *)a4 + 1) = v54;
        *((_OWORD *)a4 + 2) = v53;
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v58 = v6;
            uint64_t v59 = 2 * v5;
            int64_t v5 = (2 * v5) | 1;
            uint64_t v6 = (_OWORD *)(result + 80 * v5);
            int64_t v60 = v59 + 2;
            if (v60 < a3)
            {
              uint64_t v61 = result + 80 * v5;
              int v62 = *(_DWORD *)(v61 + 8);
              int v63 = *((_DWORD *)v6 + 22);
              if (v62 < v63) {
                goto LABEL_49;
              }
              if (v63 >= v62)
              {
                double v73 = *(double *)(v61 + 16);
                double v74 = *((double *)v6 + 12);
                if (v73 < v74) {
                  goto LABEL_49;
                }
                if (v74 >= v73)
                {
                  double v75 = *(double *)(v61 + 24);
                  double v76 = *((double *)v6 + 13);
                  if (v75 < v76) {
                    goto LABEL_49;
                  }
                  if (v76 >= v75)
                  {
                    double v77 = *(double *)(v61 + 32);
                    double v78 = *((double *)v6 + 14);
                    if (v77 < v78) {
                      goto LABEL_49;
                    }
                    if (v78 >= v77)
                    {
                      uint64_t v79 = *(void *)(v61 + 40);
                      uint64_t v80 = *((void *)v6 + 15);
                      if (v79 < v80) {
                        goto LABEL_49;
                      }
                      if (v80 >= v79)
                      {
                        uint64_t v81 = *(void *)(v61 + 48);
                        uint64_t v82 = *((void *)v6 + 16);
                        if (v81 < v82
                          || v82 >= v81
                          && ((uint64_t v83 = *(void *)(v61 + 56), v84 = *((void *)v6 + 17), v83 < v84)
                           || v84 >= v83
                           && ((v85 = *(void *)(v61 + 64), uint64_t v86 = *((void *)v6 + 18), v85 < v86)
                            || v86 >= v85
                            && ((v87 = *(void *)(v61 + 72), uint64_t v88 = *((void *)v6 + 19), v87 < v88)
                             || v88 >= v87 && *(void *)v6 < *((void *)v6 + 10)))))
                        {
LABEL_49:
                          v6 += 5;
                          int64_t v5 = v60;
                        }
                      }
                    }
                  }
                }
              }
            }
            int v64 = *((_DWORD *)v6 + 2);
            if (v64 < v27) {
              break;
            }
            if (v27 >= v64)
            {
              double v65 = *((double *)v6 + 2);
              if (v65 < v28) {
                break;
              }
              if (v28 >= v65)
              {
                double v66 = *((double *)v6 + 3);
                if (v66 < v29) {
                  break;
                }
                if (v29 >= v66)
                {
                  double v67 = *((double *)v6 + 4);
                  if (v67 < v46) {
                    break;
                  }
                  if (v46 >= v67)
                  {
                    uint64_t v68 = *((void *)v6 + 5);
                    if (v68 < v47) {
                      break;
                    }
                    if (v47 >= v68)
                    {
                      uint64_t v69 = *((void *)v6 + 6);
                      if (v69 < v48) {
                        break;
                      }
                      if (v48 >= v69)
                      {
                        uint64_t v70 = *((void *)v6 + 7);
                        if (v70 < v49) {
                          break;
                        }
                        if (v49 >= v70)
                        {
                          uint64_t v71 = *((void *)v6 + 8);
                          if (v71 < v50) {
                            break;
                          }
                          if (v50 >= v71)
                          {
                            uint64_t v72 = *((void *)v6 + 9);
                            if (v72 < v51 || v51 >= v72 && *(void *)v6 < v44) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            *uint64_t v58 = *v6;
            long long v55 = v6[1];
            long long v56 = v6[2];
            long long v57 = v6[4];
            v58[3] = v6[3];
            v58[4] = v57;
            v58[1] = v55;
            v58[2] = v56;
            if (v4 < v5) {
              goto LABEL_90;
            }
          }
          uint64_t v6 = v58;
        }
LABEL_90:
        *(void *)uint64_t v6 = v44;
        *((_DWORD *)v6 + 2) = v27;
        *((_DWORD *)v6 + 3) = v45;
        *((double *)v6 + 2) = v28;
        *((double *)v6 + 3) = v29;
        *((double *)v6 + 4) = v46;
        *((void *)v6 + 5) = v47;
        *((void *)v6 + 6) = v48;
        *((void *)v6 + 7) = v49;
        *((void *)v6 + 8) = v50;
        *((void *)v6 + 9) = v51;
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v9 = a1;
    uint64_t v10 = v3 + 1;
    a1 += 80 * (v3 + 1);
    uint64_t v11 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v12 = v11 + 2;
    if (v12 < a3)
    {
      uint64_t v13 = v9 + 80 * v10;
      int v14 = *(_DWORD *)(v13 + 8);
      int v15 = *(_DWORD *)(a1 + 88);
      if (v14 < v15) {
        goto LABEL_4;
      }
      if (v15 >= v14)
      {
        double v16 = *(double *)(v13 + 16);
        double v17 = *(double *)(a1 + 96);
        if (v16 < v17) {
          goto LABEL_4;
        }
        if (v17 >= v16)
        {
          double v18 = *(double *)(v13 + 24);
          double v19 = *(double *)(a1 + 104);
          if (v18 < v19) {
            goto LABEL_4;
          }
          if (v19 >= v18)
          {
            double v20 = *(double *)(v13 + 32);
            double v21 = *(double *)(a1 + 112);
            if (v20 < v21) {
              goto LABEL_4;
            }
            if (v21 >= v20)
            {
              uint64_t v22 = *(void *)(v13 + 40);
              uint64_t v23 = *(void *)(a1 + 120);
              if (v22 < v23) {
                goto LABEL_4;
              }
              if (v23 >= v22)
              {
                uint64_t v24 = *(void *)(v13 + 48);
                uint64_t v25 = *(void *)(a1 + 128);
                if (v24 < v25
                  || v25 >= v24
                  && ((uint64_t v26 = *(void *)(v13 + 56), v27 = *(void *)(a1 + 136), v26 < v27)
                   || v27 >= v26
                   && ((v28 = *(void *)(v13 + 64), uint64_t v29 = *(void *)(a1 + 144), v28 < v29)
                    || v29 >= v28
                    && ((v30 = *(void *)(v13 + 72), uint64_t v31 = *(void *)(a1 + 152), v30 < v31)
                     || v31 >= v30 && *(void *)a1 < *(void *)(a1 + 80)))))
                {
LABEL_4:
                  a1 += 80;
                  uint64_t v3 = v12;
                }
              }
            }
          }
        }
      }
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
    __n128 result = *(__n128 *)(a1 + 16);
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v9 + 64) = v8;
    *(__n128 *)(v9 + 16) = result;
    *(_OWORD *)(v9 + 32) = v7;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 80 * (v4 >> 1));
    long long v7 = (void *)(a2 - 80);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *(_DWORD *)(a2 - 72);
    if (v8 >= v9)
    {
      if (v9 < v8) {
        return result;
      }
      double v11 = *((double *)v6 + 2);
      double v10 = *(double *)(a2 - 64);
      if (v11 >= v10)
      {
        if (v10 < v11) {
          return result;
        }
        double v12 = *((double *)v6 + 3);
        double v13 = *(double *)(a2 - 56);
        if (v12 >= v13)
        {
          if (v13 < v12) {
            return result;
          }
          double v14 = *((double *)v6 + 4);
          double v15 = *(double *)(a2 - 48);
          if (v14 >= v15)
          {
            if (v15 < v14) {
              return result;
            }
            uint64_t v16 = *((void *)v6 + 5);
            uint64_t v17 = *(void *)(a2 - 40);
            if (v16 >= v17)
            {
              if (v17 < v16) {
                return result;
              }
              uint64_t v18 = *((void *)v6 + 6);
              uint64_t v19 = *(void *)(a2 - 32);
              if (v18 >= v19)
              {
                if (v19 < v18) {
                  return result;
                }
                uint64_t v20 = *((void *)v6 + 7);
                uint64_t v21 = *(void *)(a2 - 24);
                if (v20 >= v21)
                {
                  if (v21 < v20) {
                    return result;
                  }
                  uint64_t v22 = *((void *)v6 + 8);
                  uint64_t v23 = *(void *)(a2 - 16);
                  if (v22 >= v23)
                  {
                    if (v23 < v22) {
                      return result;
                    }
                    uint64_t v24 = *((void *)v6 + 9);
                    uint64_t v25 = *(void *)(a2 - 8);
                    if (v24 >= v25 && (v25 < v24 || *(void *)v6 >= *v7)) {
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      double v10 = *(double *)(a2 - 64);
    }
    uint64_t v26 = *(void *)(a2 - 80);
    int v27 = *(_DWORD *)(a2 - 68);
    double v28 = *(double *)(a2 - 56);
    double v29 = *(double *)(a2 - 48);
    uint64_t v30 = *(void *)(a2 - 40);
    uint64_t v31 = *(void *)(a2 - 32);
    uint64_t v32 = *(void *)(a2 - 24);
    uint64_t v33 = *(void *)(a2 - 16);
    uint64_t v34 = *(void *)(a2 - 8);
    *(_OWORD *)long long v7 = *v6;
    long long v35 = v6[4];
    long long v37 = v6[1];
    long long v36 = v6[2];
    *(_OWORD *)(a2 - 32) = v6[3];
    *(_OWORD *)(a2 - 16) = v35;
    *(_OWORD *)(a2 - 64) = v37;
    *(_OWORD *)(a2 - 48) = v36;
    if (v4 >= 2)
    {
      while (1)
      {
        uint64_t v41 = v6;
        unint64_t v42 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 80 * v5);
        int v43 = *((_DWORD *)v6 + 2);
        if (v43 >= v9)
        {
          if (v9 < v43) {
            break;
          }
          double v44 = *((double *)v6 + 2);
          if (v44 >= v10)
          {
            if (v10 < v44) {
              break;
            }
            double v45 = *((double *)v6 + 3);
            if (v45 >= v28)
            {
              if (v28 < v45) {
                break;
              }
              double v46 = *((double *)v6 + 4);
              if (v46 >= v29)
              {
                if (v29 < v46) {
                  break;
                }
                uint64_t v47 = *((void *)v6 + 5);
                if (v47 >= v30)
                {
                  if (v30 < v47) {
                    break;
                  }
                  uint64_t v48 = *((void *)v6 + 6);
                  if (v48 >= v31)
                  {
                    if (v31 < v48) {
                      break;
                    }
                    uint64_t v49 = *((void *)v6 + 7);
                    if (v49 >= v32)
                    {
                      if (v32 < v49) {
                        break;
                      }
                      uint64_t v50 = *((void *)v6 + 8);
                      if (v50 >= v33)
                      {
                        if (v33 < v50) {
                          break;
                        }
                        uint64_t v51 = *((void *)v6 + 9);
                        if (v51 >= v34 && (v34 < v51 || *(void *)v6 >= v26)) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *uint64_t v41 = *v6;
        long long v38 = v6[1];
        long long v39 = v6[2];
        long long v40 = v6[4];
        v41[3] = v6[3];
        v41[4] = v40;
        v41[1] = v38;
        v41[2] = v39;
        if (v42 <= 1) {
          goto LABEL_45;
        }
      }
      uint64_t v6 = v41;
    }
LABEL_45:
    *(void *)uint64_t v6 = v26;
    *((_DWORD *)v6 + 2) = v9;
    *((_DWORD *)v6 + 3) = v27;
    *((double *)v6 + 2) = v10;
    *((double *)v6 + 3) = v28;
    *((double *)v6 + 4) = v29;
    *((void *)v6 + 5) = v30;
    *((void *)v6 + 6) = v31;
    *((void *)v6 + 7) = v32;
    *((void *)v6 + 8) = v33;
    *((void *)v6 + 9) = v34;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  unsigned int v4 = a3[1];
  uint64_t v5 = *(void *)(a2 + 2496);
  unint64_t v6 = (v5 + 1) % 0x270uLL;
  uint64_t v7 = 4 * v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 4 * ((v5 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + v7) = v5;
  *(void *)(a2 + 2496) = v6;
  LODWORD(v5) = ((v5 ^ (v5 >> 11)) << 7) & 0x9D2C5680 ^ v5 ^ (v5 >> 11);
  unsigned int v8 = (v5 << 15) & 0xEFC60000 ^ v5 ^ (((v5 << 15) & 0xEFC60000 ^ v5) >> 18);
  unsigned int v9 = v4 + 1;
  if (((v4 + 1) & v4) == 0) {
    return (v8 & v4) + v3;
  }
  unint64_t v10 = v8 * (unint64_t)v9;
  if (v9 <= v10) {
    return (HIDWORD(v10) + v3);
  }
  unsigned int v12 = ~v4 % v9;
  if (v12 <= v10) {
    return (HIDWORD(v10) + v3);
  }
  do
  {
    uint64_t v13 = 4 * v6;
    unint64_t v14 = v6 + 397;
    if (v6 == 623) {
      unint64_t v6 = 0;
    }
    else {
      ++v6;
    }
    unsigned int v15 = *(_DWORD *)(a2 + 4 * (v14 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + v13) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
    int v16 = v15 ^ (v15 >> 11);
    *(_DWORD *)(a2 + v13) = v15;
    unint64_t v17 = v9
        * (unint64_t)((((v16 << 7) & 0x9D2C5680 ^ v16) << 15) & 0xEFC60000 ^ (v16 << 7) & 0x9D2C5680 ^ v16 ^ (((((v16 << 7) & 0x9D2C5680 ^ v16) << 15) & 0xEFC60000 ^ (v16 << 7) & 0x9D2C5680 ^ v16) >> 18));
  }
  while (v12 > v17);
  *(void *)(a2 + 2496) = v6;
  return (HIDWORD(v17) + v3);
}

void **std::set<int>::set[abi:ne180100]<int const*>(void **a1, int *a2, int *a3)
{
  a1[1] = 0;
  unsigned int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      uint64_t v7 = std::__tree<int>::__find_equal<int>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        unsigned int v8 = operator new(0x20uLL);
        v8[7] = *v6;
        unsigned int v9 = v13;
        *(void *)unsigned int v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = v9;
        *uint64_t v7 = (uint64_t)v8;
        unint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          unsigned int v8 = (_DWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_23CC18760(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unsigned int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unsigned int v9 = (uint64_t *)*a2;
      do
      {
        unint64_t v10 = v9;
        unsigned int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        unint64_t v14 = v10;
      }
      while (v15);
    }
    int v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          int v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      unsigned int v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        unsigned int v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t *)v22;
            int v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unsigned int v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unsigned int v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v14 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v19 = &v5[32 * (void)v13];
      unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v19));
      uint64_t v21 = *a1;
      uint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v23 = (v15 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      char v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = &a1[1][32 * v16];
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((void *)v18 + 3) = *((void *)v19 + 3);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v40 = *(void *)(result + 32);
    if (!v40) {
      return result;
    }
LABEL_26:
    *(void *)(v40 + 32) = v15 >> 3;
    *(void *)(v40 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      uint64_t v19 = 32 * v14;
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(void *)(*(void *)(result + 8) + 32 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      uint64_t v23 = 0;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v18->i64 + v22) & (~*(uint64_t *)((char *)v18->i64 + v22) << 7) & 0x8080808080808080;
      if (v24)
      {
        unint64_t v16 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        unint64_t v16 = ((v21 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v23 += 8;
          unint64_t v16 = (v23 + v16) & v13;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v17 = (v16 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v23;
      if ((((v17 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v25 = v18->u8[v17];
        v18->i8[v17] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v17 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v26 = *(void *)(result + 8);
        if (v25 == 128)
        {
          int v27 = (void *)(v26 + 32 * v17);
          uint64_t v28 = v26 + 32 * v14;
          *int v27 = *(void *)v28;
          v27[1] = 0;
          v27[2] = 0;
          v27[3] = 0;
          *(_OWORD *)(v27 + 1) = *(_OWORD *)(v28 + 8);
          v27[3] = *(void *)(v28 + 24);
          *(void *)(v28 + 16) = 0;
          *(void *)(v28 + 24) = 0;
          *(void *)(v28 + 8) = 0;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          double v29 = (uint64_t *)(v26 + v19);
          uint64_t v30 = *v29;
          uint64_t v31 = v29[3];
          long long v32 = *(_OWORD *)(v29 + 1);
          v29[2] = 0;
          v29[3] = 0;
          v29[1] = 0;
          uint64_t v33 = *(void *)(result + 8);
          uint64_t v34 = (void *)(v33 + v19);
          uint64_t v35 = v33 + 32 * v17;
          void *v34 = *(void *)v35;
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = 0;
          *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 8);
          v34[3] = *(void *)(v35 + 24);
          *(void *)(v35 + 16) = 0;
          *(void *)(v35 + 24) = 0;
          *(void *)(v35 + 8) = 0;
          uint64_t v36 = *(void *)(result + 8) + 32 * v17;
          *(void *)uint64_t v36 = v30;
          *(_OWORD *)(v36 + 8) = v32;
          *(void *)(v36 + 24) = v31;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v37 = v14 - (v14 >> 3);
  BOOL v38 = v14 == 7;
  uint64_t v39 = 6;
  if (!v38) {
    uint64_t v39 = v37;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v39 - *(void *)(result + 16);
  uint64_t v40 = *(void *)(result + 32);
  if (v40) {
    goto LABEL_26;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
LABEL_3:
  uint64_t v16 = a2 - a4;
  unint64_t v17 = (uint64_t)(a2 - a4) >> 4;
  if (!(!v8 & v7))
  {
    switch(v17)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        goto LABEL_39;
      case 3uLL:
        goto LABEL_42;
      case 4uLL:
        goto LABEL_43;
      case 5uLL:
        goto LABEL_49;
      default:
        goto LABEL_104;
    }
  }
  if (v16 < 384) {
    goto LABEL_58;
  }
  if (!a6)
  {
LABEL_50:
    if (a2 != a4) {
      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, a4, a3, a4, a5);
    }
    return;
  }
  unint64_t v18 = v17 >> 1;
  uint64_t v19 = a2 - 16 * (v17 >> 1);
  uint64_t v20 = a4 + 16;
  uint64_t v88 = a3;
  if ((unint64_t)v16 > 0x800)
  {
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16 * (v17 >> 1), a2 - 16 * (v17 >> 1), v20, a4 + 16);
    uint64_t v21 = a2 + 16 * (1 - v18);
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16, a2 - 16, v21, v21, a4 + 32, a4 + 32);
    uint64_t v22 = a2 + 16 * ~v18;
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 32, a2 - 32, v22, v22, a4 + 48, a4 + 48);
    uint64_t v23 = v21;
    uint64_t v24 = v21;
    a3 = v88;
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v23, v24, v19, v19, v22, v22);
    uint64_t v25 = *(void *)(a2 - 16);
    *(void *)(a2 - 16) = *(void *)(v19 - 16);
    *(void *)(v19 - 16) = v25;
    int v26 = *(_DWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 8) = *(_DWORD *)(v19 - 8);
    *(_DWORD *)(v19 - 8) = v26;
    uint64_t v27 = a6 - 1;
    if (a7) {
      goto LABEL_15;
    }
  }
  else
  {
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16 * (v17 >> 1), a2 - 16 * (v17 >> 1), a1, a2, v20, a4 + 16);
    uint64_t v27 = a6 - 1;
    if (a7)
    {
LABEL_15:
      a6 = v27;
      goto LABEL_16;
    }
  }
  double v28 = *(double *)(a2 - 16);
  if (*(double *)a2 < v28 || v28 >= *(double *)a2 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 8)) {
    goto LABEL_15;
  }
  std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a1, a2, a3, a4);
  a1 = v34;
  a2 = v35;
  for (uint64_t i = 2 - a6; ; ++i)
  {
    uint64_t v39 = a2 - a4;
    unint64_t v40 = (uint64_t)(a2 - a4) >> 4;
    if (!(!v33 & v32))
    {
      switch(v40)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
LABEL_39:
          double v51 = *(double *)a4;
          double v52 = *(double *)(a2 - 16);
          if (*(double *)a4 < v52)
          {
            int v53 = *(_DWORD *)(a2 - 8);
            int v54 = *(_DWORD *)(a4 + 8);
LABEL_41:
            *(double *)(a2 - 16) = v51;
            *(double *)a4 = v52;
            *(_DWORD *)(a2 - 8) = v54;
            *(_DWORD *)(a4 + 8) = v53;
            return;
          }
          if (v52 >= v51)
          {
            int v54 = *(_DWORD *)(a4 + 8);
            int v53 = *(_DWORD *)(a2 - 8);
            if (v54 < v53) {
              goto LABEL_41;
            }
          }
          return;
        case 3uLL:
LABEL_42:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a3, a4 + 16);
          return;
        case 4uLL:
LABEL_43:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
          double v55 = *(double *)a4;
          double v56 = *(double *)(a2 - 48);
          if (*(double *)a4 >= v56)
          {
            if (v56 < v55) {
              return;
            }
            int v58 = *(_DWORD *)(a4 + 8);
            int v57 = *(_DWORD *)(a2 - 40);
            if (v58 >= v57) {
              return;
            }
          }
          else
          {
            int v57 = *(_DWORD *)(a2 - 40);
            int v58 = *(_DWORD *)(a4 + 8);
          }
          *(double *)(a2 - 48) = v55;
          *(double *)a4 = v56;
          *(_DWORD *)(a2 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v58;
          *(_DWORD *)(a4 + 8) = v57;
          double v59 = *(double *)(a2 - 48);
          double v60 = *(double *)(a2 - 32);
          if (v59 >= v60)
          {
            if (v60 < v59) {
              return;
            }
            int v62 = *(_DWORD *)(a2 - 40);
            int v61 = *(_DWORD *)(a2 - 24);
            if (v62 >= v61) {
              return;
            }
          }
          else
          {
            int v61 = *(_DWORD *)(a2 - 24);
            int v62 = *(_DWORD *)(a2 - 40);
          }
          *(double *)(a2 - 32) = v59;
          *(double *)(a2 - 48) = v60;
          *(_DWORD *)(a2 - 24) = v62;
          *(_DWORD *)(a2 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v61;
          double v63 = *(double *)(a2 - 16);
          if (v59 < v63)
          {
            int v64 = *(_DWORD *)(a2 - 8);
LABEL_102:
            *(double *)(a2 - 16) = v59;
            *(double *)(a2 - 32) = v63;
            *(_DWORD *)(a2 - 8) = v62;
            *(_DWORD *)(a2 - 24) = v64;
            return;
          }
          if (v63 >= v59)
          {
            int v64 = *(_DWORD *)(a2 - 8);
            if (v62 < v64) {
              goto LABEL_102;
            }
          }
          break;
        case 5uLL:
LABEL_49:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, a4 + 16);
          return;
        default:
LABEL_104:
          JUMPOUT(0);
      }
      return;
    }
    if (v39 <= 383) {
      break;
    }
    if (i == 1) {
      goto LABEL_50;
    }
    unint64_t v41 = v40 >> 1;
    uint64_t v42 = a2 - 16 * (v40 >> 1);
    if ((unint64_t)v39 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16 * (v40 >> 1), a2 - 16 * (v40 >> 1), a4 + 16, a4 + 16);
      uint64_t v43 = a2 + 16 * (1 - v41);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16, a2 - 16, v43, v43, a4 + 32, a4 + 32);
      uint64_t v44 = a2 + 16 * ~v41;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 32, a2 - 32, v44, v44, a4 + 48, a4 + 48);
      uint64_t v45 = v43;
      uint64_t v46 = v43;
      a3 = v88;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v45, v46, v42, v42, v44, v44);
      uint64_t v47 = *(void *)(a2 - 16);
      *(void *)(a2 - 16) = *(void *)(v42 - 16);
      *(void *)(v42 - 16) = v47;
      int v48 = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = *(_DWORD *)(v42 - 8);
      *(_DWORD *)(v42 - 8) = v48;
      double v49 = *(double *)a2;
      double v50 = *(double *)(a2 - 16);
      if (*(double *)a2 < v50) {
        goto LABEL_36;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a2 - 16 * (v40 >> 1), a2 - 16 * (v40 >> 1), a1, a2, a4 + 16, a4 + 16);
      double v49 = *(double *)a2;
      double v50 = *(double *)(a2 - 16);
      if (*(double *)a2 < v50)
      {
LABEL_36:
        a7 = 0;
        a6 = -i;
LABEL_16:
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a2, (double *)a4, (uint64_t)&v89);
        uint64_t v29 = v89;
        uint64_t v30 = v90;
        if (!v91) {
          goto LABEL_2;
        }
        char v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, v89, v90);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(v30 - 16, v30 - 16, v88, a4))
        {
          if (v31)
          {
            a1 = v29;
            a2 = v30 - 16;
            a3 = v88;
            goto LABEL_3;
          }
LABEL_2:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,false>(a1, a2, v29, v30, a5, a6, a7 & 1);
          a7 = 0;
          a2 = v30 - 16;
          a1 = v29;
          a3 = v88;
          goto LABEL_3;
        }
        a3 = v29;
        a4 = v30;
        if (v31) {
          return;
        }
        goto LABEL_3;
      }
    }
    if (v50 >= v49 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 8)) {
      goto LABEL_36;
    }
    std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(a1, a2, a3, a4);
    a1 = v37;
    a2 = v38;
  }
  a7 = 0;
LABEL_58:
  uint64_t v65 = a2 - 16;
  BOOL v67 = a2 == a4 || v65 == a4;
  if (a7)
  {
    if (v67) {
      return;
    }
    uint64_t v68 = 0;
    uint64_t v69 = a2 - 16;
LABEL_69:
    uint64_t v70 = v65 + 16;
    double v71 = *(double *)v65;
    double v72 = *(double *)(v69 - 16);
    v69 -= 16;
    double v73 = v72;
    if (v72 >= *(double *)v65)
    {
      if (v71 < v73) {
        goto LABEL_68;
      }
      int v74 = *(_DWORD *)(v65 - 8);
      int v75 = *(_DWORD *)(v65 + 8);
      if (v74 >= v75) {
        goto LABEL_68;
      }
    }
    else
    {
      int v74 = *(_DWORD *)(v65 - 8);
      int v75 = *(_DWORD *)(v65 + 8);
    }
    *(double *)(v65 - 16) = v71;
    *(_DWORD *)(v65 - 8) = v75;
    uint64_t v76 = a2;
    if (v70 == a2) {
      goto LABEL_67;
    }
    uint64_t v77 = v68;
    uint64_t v76 = v70;
    while (1)
    {
      double v80 = *(double *)(a2 + v77);
      if (v73 >= v80)
      {
        if (v80 < v73)
        {
          uint64_t v76 = a2 + v77;
LABEL_67:
          *(double *)(v76 - 16) = v73;
          *(_DWORD *)(v76 - 8) = v74;
LABEL_68:
          v68 -= 16;
          uint64_t v65 = v69;
          if (v69 == a4) {
            return;
          }
          goto LABEL_69;
        }
        int v78 = *(_DWORD *)(a2 + v77 + 8);
        if (v74 >= v78) {
          goto LABEL_67;
        }
      }
      else
      {
        int v78 = *(_DWORD *)(a2 + v77 + 8);
      }
      v76 += 16;
      uint64_t v79 = a2 + v77;
      *(double *)(v79 - 16) = v80;
      *(_DWORD *)(v79 - 8) = v78;
      v77 += 16;
      if (!v77)
      {
        uint64_t v76 = a2;
        goto LABEL_67;
      }
    }
  }
  if (!v67)
  {
    uint64_t v81 = a2 - 8;
    uint64_t v82 = a2 - 16;
    while (1)
    {
      double v83 = *(double *)(v82 - 16);
      v82 -= 16;
      double v84 = v83;
      double v85 = *(double *)v65;
      if (v83 < *(double *)v65) {
        break;
      }
      if (v85 >= v84)
      {
        int v86 = *(_DWORD *)(v65 - 8);
        if (v86 < *(_DWORD *)(v65 + 8)) {
          goto LABEL_91;
        }
      }
LABEL_86:
      v81 -= 16;
      uint64_t v65 = v82;
      if (v82 == a4) {
        return;
      }
    }
    int v86 = *(_DWORD *)(v65 - 8);
LABEL_91:
    for (uint64_t j = v81; ; j += 16)
    {
      *(double *)(j - 24) = v85;
      *(_DWORD *)(j - 16) = *(_DWORD *)j;
      double v85 = *(double *)(j + 8);
      if (v84 >= v85 && (v85 < v84 || v86 >= *(_DWORD *)(j + 16))) {
        break;
      }
    }
    *(double *)(j - 8) = v84;
    *(_DWORD *)uint64_t j = v86;
    goto LABEL_86;
  }
}

  uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 2);
  if (!(!v8 & v7))
  {
    switch(v16)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        goto LABEL_39;
      case 3uLL:
        goto LABEL_42;
      case 4uLL:
        goto LABEL_43;
      case 5uLL:
        goto LABEL_49;
      default:
        goto LABEL_104;
    }
  }
  if (a2 - a4 < 288) {
    goto LABEL_58;
  }
  if (!a6)
  {
LABEL_50:
    if (a2 != a4) {
      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, a4, a3, a4, a5);
    }
    return;
  }
  unint64_t v17 = v16 >> 1;
  unint64_t v18 = a2 - 12 * (v16 >> 1);
  uint64_t v19 = a4 + 12;
  double v84 = a3;
  if (v16 > 0x80)
  {
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12 * (v16 >> 1), a2 - 12 * (v16 >> 1), v19, a4 + 12);
    uint64_t v20 = a2 - 12 * v17 + 12;
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12, a2 - 12, v20, v20, a4 + 24, a4 + 24);
    uint64_t v21 = a2 + 12 * ~v17;
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 24, a2 - 24, v21, v21, a4 + 36, a4 + 36);
    uint64_t v22 = v20;
    uint64_t v23 = v20;
    a3 = v84;
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(v22, v23, v18, v18, v21, v21);
    uint64_t v24 = *(void *)(a2 - 12);
    *(void *)(a2 - 12) = *(void *)(v18 - 12);
    *(void *)(v18 - 12) = v24;
    LODWORD(v24) = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(v18 - 4);
    *(_DWORD *)(v18 - 4) = v24;
    uint64_t v25 = a6 - 1;
    if (a7) {
      goto LABEL_15;
    }
  }
  else
  {
    std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12 * (v16 >> 1), a2 - 12 * (v16 >> 1), a1, a2, v19, a4 + 12);
    uint64_t v25 = a6 - 1;
    if (a7)
    {
LABEL_15:
      a6 = v25;
      goto LABEL_16;
    }
  }
  int v26 = *(void *)(a2 - 12);
  if (*(void *)a2 < v26 || v26 >= *(void *)a2 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 4)) {
    goto LABEL_15;
  }
  std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a1, a2, a3, (uint64_t *)a4);
  a1 = v32;
  a2 = v33;
  for (uint64_t i = 2 - a6; ; ++i)
  {
    uint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 2);
    if (!(!v31 & v30))
    {
      switch(v37)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
LABEL_39:
          uint64_t v47 = *(void *)a4;
          int v48 = *(void *)(a2 - 12);
          if (*(void *)a4 < v48)
          {
            double v49 = *(_DWORD *)(a2 - 4);
            double v50 = *(_DWORD *)(a4 + 8);
LABEL_41:
            *(void *)(a2 - 12) = v47;
            *(void *)a4 = v48;
            *(_DWORD *)(a2 - 4) = v50;
            *(_DWORD *)(a4 + 8) = v49;
            return;
          }
          if (v48 >= v47)
          {
            double v50 = *(_DWORD *)(a4 + 8);
            double v49 = *(_DWORD *)(a2 - 4);
            if (v50 < v49) {
              goto LABEL_41;
            }
          }
          return;
        case 3uLL:
LABEL_42:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a3, a4 + 12);
          return;
        case 4uLL:
LABEL_43:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
          double v51 = *(void *)a4;
          double v52 = *(void *)(a2 - 36);
          if (*(void *)a4 >= v52)
          {
            if (v52 < v51) {
              return;
            }
            int v54 = *(_DWORD *)(a4 + 8);
            int v53 = *(_DWORD *)(a2 - 28);
            if (v54 >= v53) {
              return;
            }
          }
          else
          {
            int v53 = *(_DWORD *)(a2 - 28);
            int v54 = *(_DWORD *)(a4 + 8);
          }
          *(void *)(a2 - 36) = v51;
          *(void *)a4 = v52;
          *(_DWORD *)(a2 - 28) = v54;
          *(_DWORD *)(a4 + 8) = v53;
          double v55 = *(void *)(a2 - 36);
          double v56 = *(void *)(a2 - 24);
          if (v55 >= v56)
          {
            if (v56 < v55) {
              return;
            }
            int v58 = *(_DWORD *)(a2 - 28);
            int v57 = *(_DWORD *)(a2 - 16);
            if (v58 >= v57) {
              return;
            }
          }
          else
          {
            int v57 = *(_DWORD *)(a2 - 16);
            int v58 = *(_DWORD *)(a2 - 28);
          }
          *(void *)(a2 - 24) = v55;
          *(void *)(a2 - 36) = v56;
          *(_DWORD *)(a2 - 16) = v58;
          *(_DWORD *)(a2 - 28) = v57;
          double v59 = *(void *)(a2 - 12);
          if (v55 < v59)
          {
            double v60 = *(_DWORD *)(a2 - 4);
LABEL_102:
            *(void *)(a2 - 12) = v55;
            *(void *)(a2 - 24) = v59;
            *(_DWORD *)(a2 - 4) = v58;
            *(_DWORD *)(a2 - 16) = v60;
            return;
          }
          if (v59 >= v55)
          {
            double v60 = *(_DWORD *)(a2 - 4);
            if (v58 < v60) {
              goto LABEL_102;
            }
          }
          break;
        case 5uLL:
LABEL_49:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24, a2 - 36, a2 - 36, a3, a4 + 12);
          return;
        default:
LABEL_104:
          JUMPOUT(0);
      }
      return;
    }
    if (a2 - a4 <= 287) {
      break;
    }
    if (i == 1) {
      goto LABEL_50;
    }
    uint64_t v38 = v37 >> 1;
    uint64_t v39 = a2 - 12 * (v37 >> 1);
    if (v37 >= 0x81)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12 * (v37 >> 1), a2 - 12 * (v37 >> 1), a4 + 12, a4 + 12);
      unint64_t v40 = a2 - 12 * v38 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12, a2 - 12, v40, v40, a4 + 24, a4 + 24);
      unint64_t v41 = a2 + 12 * ~v38;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 24, a2 - 24, v41, v41, a4 + 36, a4 + 36);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      a3 = v84;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(v42, v43, v39, v39, v41, v41);
      uint64_t v44 = *(void *)(a2 - 12);
      *(void *)(a2 - 12) = *(void *)(v39 - 12);
      *(void *)(v39 - 12) = v44;
      LODWORD(v44) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = *(_DWORD *)(v39 - 4);
      *(_DWORD *)(v39 - 4) = v44;
      uint64_t v45 = *(void *)a2;
      uint64_t v46 = *(void *)(a2 - 12);
      if (*(void *)a2 < v46) {
        goto LABEL_36;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a2 - 12 * (v37 >> 1), a2 - 12 * (v37 >> 1), a1, a2, a4 + 12, a4 + 12);
      uint64_t v45 = *(void *)a2;
      uint64_t v46 = *(void *)(a2 - 12);
      if (*(void *)a2 < v46)
      {
LABEL_36:
        a7 = 0;
        a6 = -i;
LABEL_16:
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a2, (void *)a4, (uint64_t)&v85);
        uint64_t v27 = v85;
        double v28 = v86;
        if (!v87) {
          goto LABEL_2;
        }
        uint64_t v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, v85, v86);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>((uint64_t)v28 - 12, (uint64_t)v28 - 12, v84, (uint64_t *)a4))
        {
          if (v29)
          {
            a1 = v27;
            a2 = (uint64_t)v28 - 12;
            a3 = v84;
            goto LABEL_3;
          }
LABEL_2:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(a1, a2, v27, v28, a5, a6, a7 & 1);
          a7 = 0;
          a2 = (uint64_t)v28 - 12;
          a1 = v27;
          a3 = v84;
          goto LABEL_3;
        }
        a3 = v27;
        a4 = (uint64_t)v28;
        if (v29) {
          return;
        }
        goto LABEL_3;
      }
    }
    if (v46 >= v45 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a2 - 4)) {
      goto LABEL_36;
    }
    std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(a1, a2, a3, (uint64_t *)a4);
    a1 = v35;
    a2 = v36;
  }
  a7 = 0;
LABEL_58:
  int v61 = a2 - 12;
  double v63 = a2 == a4 || v61 == a4;
  if (a7)
  {
    if (v63) {
      return;
    }
    int v64 = 0;
    uint64_t v65 = a2 - 12;
LABEL_70:
    BOOL v67 = v61 + 12;
    uint64_t v68 = *(void *)v61;
    uint64_t v70 = *(void *)(v65 - 12);
    v65 -= 12;
    uint64_t v69 = v70;
    if (v70 >= *(void *)v61)
    {
      if (v68 < v69) {
        goto LABEL_69;
      }
      double v71 = *(_DWORD *)(v61 - 4);
      double v72 = *(_DWORD *)(v61 + 8);
      if (v71 >= v72) {
        goto LABEL_69;
      }
    }
    else
    {
      double v71 = *(_DWORD *)(v61 - 4);
      double v72 = *(_DWORD *)(v61 + 8);
    }
    *(void *)(v61 - 12) = v68;
    *(_DWORD *)(v61 - 4) = v72;
    double v66 = a2;
    if (v67 == a2) {
      goto LABEL_68;
    }
    double v73 = v64;
    double v66 = v67;
    while (1)
    {
      uint64_t v76 = *(void *)(a2 + v73);
      if (v69 >= v76)
      {
        if (v76 < v69)
        {
          double v66 = a2 + v73;
LABEL_68:
          *(void *)(v66 - 12) = v69;
          *(_DWORD *)(v66 - 4) = v71;
LABEL_69:
          v64 -= 12;
          int v61 = v65;
          if (v65 == a4) {
            return;
          }
          goto LABEL_70;
        }
        int v74 = *(_DWORD *)(a2 + v73 + 8);
        if (v71 >= v74) {
          goto LABEL_68;
        }
      }
      else
      {
        int v74 = *(_DWORD *)(a2 + v73 + 8);
      }
      v66 += 12;
      int v75 = a2 + v73;
      *(void *)(v75 - 12) = v76;
      *(_DWORD *)(v75 - 4) = v74;
      v73 += 12;
      if (!v73)
      {
        double v66 = a2;
        goto LABEL_68;
      }
    }
  }
  if (!v63)
  {
    uint64_t v77 = a2 - 4;
    int v78 = a2 - 12;
    while (1)
    {
      double v80 = *(void *)(v78 - 12);
      v78 -= 12;
      uint64_t v79 = v80;
      uint64_t v81 = *(void *)v61;
      if (v80 < *(void *)v61) {
        break;
      }
      if (v81 >= v79)
      {
        uint64_t v82 = *(_DWORD *)(v61 - 4);
        if (v82 < *(_DWORD *)(v61 + 8)) {
          goto LABEL_91;
        }
      }
LABEL_86:
      v77 -= 12;
      int v61 = v78;
      if (v78 == a4) {
        return;
      }
    }
    uint64_t v82 = *(_DWORD *)(v61 - 4);
LABEL_91:
    for (uint64_t j = v77; ; j += 12)
    {
      *(void *)(j - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v81;
      *(_DWORD *)(j - 12) = *(_DWORD *)j;
      uint64_t v81 = *(void *)(j + 4);
      if (v79 >= v81 && (v81 < v79 || v82 >= *(_DWORD *)(j + 12))) {
        break;
      }
    }
    *(void *)(j - 8) = v79;
    *(_DWORD *)uint64_t j = v82;
    goto LABEL_86;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6 = *(double *)(a4 - 16);
  double v7 = *(double *)(a2 - 16);
  if (v6 < v7 || v7 >= v6 && *(_DWORD *)(a4 - 8) < *(_DWORD *)(a2 - 8))
  {
    double v8 = *(double *)(a6 - 16);
    if (v8 < v6)
    {
      int v9 = *(_DWORD *)(a6 - 8);
LABEL_16:
      *(double *)(a2 - 16) = v8;
      *(double *)(a6 - 16) = v7;
      int v19 = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v9;
      *(_DWORD *)(a6 - 8) = v19;
      return 1;
    }
    if (v6 >= v8)
    {
      int v9 = *(_DWORD *)(a6 - 8);
      int v13 = *(_DWORD *)(a4 - 8);
      if (v9 < v13) {
        goto LABEL_16;
      }
    }
    else
    {
      int v13 = *(_DWORD *)(a4 - 8);
    }
    *(double *)(a2 - 16) = v6;
    *(double *)(a4 - 16) = v7;
    int v20 = *(_DWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 8) = v13;
    *(_DWORD *)(a4 - 8) = v20;
    double v21 = *(double *)(a6 - 16);
    if (v21 >= v7)
    {
      if (v7 < v21) {
        return 1;
      }
      int v22 = *(_DWORD *)(a6 - 8);
      if (v22 >= v20) {
        return 1;
      }
    }
    else
    {
      int v22 = *(_DWORD *)(a6 - 8);
    }
    *(double *)(a4 - 16) = v21;
    *(double *)(a6 - 16) = v7;
    *(_DWORD *)(a4 - 8) = v22;
    uint64_t result = 2;
    *(_DWORD *)(a6 - 8) = v20;
    return result;
  }
  double v10 = *(double *)(a6 - 16);
  if (v10 >= v6)
  {
    if (v6 < v10) {
      return 0;
    }
    int v12 = *(_DWORD *)(a6 - 8);
    int v11 = *(_DWORD *)(a4 - 8);
    if (v12 >= v11) {
      return 0;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a4 - 8);
    int v12 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v10;
  *(double *)(a6 - 16) = v6;
  *(_DWORD *)(a4 - 8) = v12;
  *(_DWORD *)(a6 - 8) = v11;
  double v14 = *(double *)(a4 - 16);
  double v15 = *(double *)(a2 - 16);
  if (v14 < v15)
  {
    int v16 = *(_DWORD *)(a2 - 8);
    int v17 = *(_DWORD *)(a4 - 8);
LABEL_14:
    *(double *)(a2 - 16) = v14;
    *(double *)(a4 - 16) = v15;
    *(_DWORD *)(a2 - 8) = v17;
    uint64_t result = 2;
    *(_DWORD *)(a4 - 8) = v16;
    return result;
  }
  if (v15 >= v14)
  {
    int v17 = *(_DWORD *)(a4 - 8);
    int v16 = *(_DWORD *)(a2 - 8);
    if (v17 < v16) {
      goto LABEL_14;
    }
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 - 16;
  double v5 = *(double *)(a2 - 16);
  int v6 = *(_DWORD *)(a2 - 8);
  double v7 = *(double *)a4;
  if (v5 >= *(double *)a4 && (v7 < v5 || v6 >= *(_DWORD *)(a4 + 8)))
  {
    while (v4 > a4)
    {
      double v19 = *(double *)(v4 - 16);
      if (v5 < v19 || v19 >= v5 && v6 < *(_DWORD *)(v4 - 8)) {
        break;
      }
      v4 -= 16;
    }
  }
  else
  {
    double v8 = *(double *)(a2 - 32);
    if (v5 >= v8)
    {
      uint64_t v9 = a2 - 48;
      do
      {
        if (v8 >= v5 && v6 < *(_DWORD *)(v9 + 24)) {
          break;
        }
        double v10 = *(double *)v9;
        v9 -= 16;
        double v8 = v10;
      }
      while (v5 >= v10);
      unint64_t v4 = v9 + 32;
    }
  }
  if (v4 > a4)
  {
    for (a4 += 16; v5 < v7 || v7 >= v5 && v6 < *(_DWORD *)(a4 - 8); a4 += 16)
    {
      double v11 = *(double *)a4;
      double v7 = v11;
    }
  }
  if (a4 >= v4)
  {
    unint64_t v12 = v4;
  }
  else
  {
    unint64_t v12 = v4;
    do
    {
      uint64_t v13 = *(void *)(v12 - 16);
      v12 -= 16;
      *(void *)unint64_t v12 = *(void *)(a4 - 16);
      *(void *)(a4 - 16) = v13;
      int v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(a4 - 8);
      *(_DWORD *)(a4 - 8) = v14;
      double v15 = *(double *)(v12 - 16);
      if (v5 >= v15)
      {
        unint64_t v16 = v4 - 48;
        do
        {
          if (v15 >= v5 && v6 < *(_DWORD *)(v16 + 24)) {
            break;
          }
          double v17 = *(double *)v16;
          v16 -= 16;
          double v15 = v17;
        }
        while (v5 >= v17);
        unint64_t v12 = v16 + 32;
      }
      do
      {
        do
        {
          a4 += 16;
          double v18 = *(double *)(a4 - 16);
        }
        while (v5 < v18);
      }
      while (v18 >= v5 && v6 < *(_DWORD *)(a4 - 8));
      unint64_t v4 = v12;
    }
    while (a4 < v12);
  }
  if (v12 + 16 != a2)
  {
    *(void *)(a2 - 16) = *(void *)v12;
    *(_DWORD *)(a2 - 8) = *(_DWORD *)(v12 + 8);
  }
  *(double *)unint64_t v12 = v5;
  *(_DWORD *)(v12 + 8) = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::__less<void,void> &>(uint64_t a1@<X1>, double *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  double v4 = *(double *)(a1 - 16);
  int v5 = *(_DWORD *)(a1 - 8);
  while (1)
  {
    double v6 = *(double *)(a1 + v3 - 32);
    if (v6 >= v4 && (v4 < v6 || *(_DWORD *)(a1 + v3 - 24) >= v5)) {
      break;
    }
    v3 -= 16;
  }
  unint64_t v7 = a1 + v3 - 16;
  if (v3)
  {
    do
    {
      double v8 = *a2;
      a2 += 2;
      double v9 = v8;
    }
    while (v8 >= v4 && (v4 < v9 || *((_DWORD *)a2 - 2) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      double v10 = *a2;
      a2 += 2;
      double v11 = v10;
      if (v10 < v4) {
        break;
      }
      if (v4 < v11)
      {
        if ((unint64_t)a2 >= v7) {
          break;
        }
      }
      else if (*((_DWORD *)a2 - 2) < v5 || (unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  unint64_t v13 = a1 + v3 - 16;
  if ((unint64_t)a2 < v7)
  {
    int v14 = a2;
    do
    {
      uint64_t v15 = *(void *)(v13 - 16);
      v13 -= 16;
      *(double *)unint64_t v13 = *(v14 - 2);
      *((void *)v14 - 2) = v15;
      int v16 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v14 - 2);
      *((_DWORD *)v14 - 2) = v16;
      while (1)
      {
        double v17 = *(double *)(v13 - 16);
        if (v17 >= v4 && (v4 < v17 || *(_DWORD *)(v13 - 8) >= v5)) {
          break;
        }
        v13 -= 16;
      }
      do
      {
        double v18 = *v14;
        v14 += 2;
        double v19 = v18;
      }
      while (v18 >= v4 && (v4 < v19 || *((_DWORD *)v14 - 2) >= v5));
    }
    while ((unint64_t)v14 < v13);
  }
  unint64_t v20 = v13 + 16;
  if (v13 + 16 != a1)
  {
    *(void *)(a1 - 16) = *(void *)v13;
    *(_DWORD *)(a1 - 8) = *(_DWORD *)(v13 + 8);
  }
  *(double *)unint64_t v13 = v4;
  *(_DWORD *)(v13 + 8) = v5;
  *(void *)a3 = v20;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch((a2 - a4) >> 4)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      double v21 = *(double *)a4;
      double v22 = *(double *)(a2 - 16);
      if (*(double *)a4 < v22)
      {
        int v23 = *(_DWORD *)(a2 - 8);
        int v24 = *(_DWORD *)(a4 + 8);
LABEL_23:
        *(double *)(a2 - 16) = v21;
        *(double *)a4 = v22;
        *(_DWORD *)(a2 - 8) = v24;
        *(_DWORD *)(a4 + 8) = v23;
        return 1;
      }
      if (v22 < v21) {
        return 1;
      }
      int v24 = *(_DWORD *)(a4 + 8);
      int v23 = *(_DWORD *)(a2 - 8);
      if (v24 < v23) {
        goto LABEL_23;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a3, a4 + 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      double v25 = *(double *)a4;
      double v26 = *(double *)(a2 - 48);
      if (*(double *)a4 >= v26)
      {
        if (v26 < v25) {
          return 1;
        }
        int v28 = *(_DWORD *)(a4 + 8);
        int v27 = *(_DWORD *)(a2 - 40);
        if (v28 >= v27) {
          return 1;
        }
      }
      else
      {
        int v27 = *(_DWORD *)(a2 - 40);
        int v28 = *(_DWORD *)(a4 + 8);
      }
      *(double *)(a2 - 48) = v25;
      *(double *)a4 = v26;
      *(_DWORD *)(a2 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v28;
      *(_DWORD *)(a4 + 8) = v27;
      double v29 = *(double *)(a2 - 48);
      double v30 = *(double *)(a2 - 32);
      if (v29 >= v30)
      {
        if (v30 < v29) {
          return 1;
        }
        int v32 = *(_DWORD *)(a2 - 40);
        int v31 = *(_DWORD *)(a2 - 24);
        if (v32 >= v31) {
          return 1;
        }
      }
      else
      {
        int v31 = *(_DWORD *)(a2 - 24);
        int v32 = *(_DWORD *)(a2 - 40);
      }
      *(double *)(a2 - 32) = v29;
      *(double *)(a2 - 48) = v30;
      *(_DWORD *)(a2 - 24) = v32;
      *(_DWORD *)(a2 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v31;
      double v33 = *(double *)(a2 - 16);
      if (v29 < v33)
      {
        int v34 = *(_DWORD *)(a2 - 8);
LABEL_31:
        *(double *)(a2 - 16) = v29;
        *(double *)(a2 - 32) = v33;
        *(_DWORD *)(a2 - 8) = v32;
        *(_DWORD *)(a2 - 24) = v34;
        return 1;
      }
      if (v33 >= v29)
      {
        int v34 = *(_DWORD *)(a2 - 8);
        if (v32 < v34) {
          goto LABEL_31;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, a4 + 16);
      return 1;
    default:
      uint64_t v7 = a2 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      uint64_t v9 = a2 - 48;
      if (a2 - 48 == a4) {
        goto LABEL_34;
      }
      uint64_t v8 = 0;
      int v10 = 0;
      uint64_t v11 = a2 - 48;
      while (2)
      {
        double v12 = *(double *)(v11 - 16);
        v11 -= 16;
        double v13 = v12;
        double v14 = *(double *)(v7 - 16);
        if (v12 >= v14)
        {
          if (v14 < v13) {
            goto LABEL_7;
          }
          int v15 = *(_DWORD *)(v9 - 8);
          int v16 = *(_DWORD *)(v7 - 8);
          if (v15 >= v16) {
            goto LABEL_7;
          }
        }
        else
        {
          int v15 = *(_DWORD *)(v9 - 8);
          int v16 = *(_DWORD *)(v7 - 8);
        }
        *(double *)(v9 - 16) = v14;
        *(_DWORD *)(v9 - 8) = v16;
        if (v7 == a2)
        {
LABEL_5:
          uint64_t v7 = a2;
          goto LABEL_6;
        }
        uint64_t v17 = v8;
        while (2)
        {
          double v20 = *(double *)(a2 + v17 - 32);
          if (v13 < v20)
          {
            int v18 = *(_DWORD *)(a2 + v17 - 24);
LABEL_13:
            v7 += 16;
            uint64_t v19 = a2 + v17;
            *(double *)(v19 - 48) = v20;
            *(_DWORD *)(v19 - 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v18;
            v17 += 16;
            if (v17 == 32) {
              goto LABEL_5;
            }
            continue;
          }
          break;
        }
        if (v20 < v13) {
          goto LABEL_6;
        }
        int v18 = *(_DWORD *)(a2 + v17 - 24);
        if (v15 < v18) {
          goto LABEL_13;
        }
        uint64_t v7 = a2 + v17 - 32;
LABEL_6:
        *(double *)(v7 - 16) = v13;
        *(_DWORD *)(v7 - 8) = v15;
        if (++v10 == 8)
        {
          int v35 = 0;
          LODWORD(v8) = v11 == a4;
        }
        else
        {
LABEL_7:
          v8 -= 16;
          uint64_t v7 = v9;
          uint64_t v9 = v11;
          if (v11 != a4) {
            continue;
          }
LABEL_34:
          int v35 = 1;
        }
        return (v35 | v8) & 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, a4, a5, a6);
  double v15 = *(double *)(a8 - 16);
  double v16 = *(double *)(a6 - 16);
  if (v15 >= v16)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v18 = *(_DWORD *)(a8 - 8);
    int v17 = *(_DWORD *)(a6 - 8);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a6 - 8);
    int v18 = *(_DWORD *)(a8 - 8);
  }
  *(double *)(a6 - 16) = v15;
  *(double *)(a8 - 16) = v16;
  *(_DWORD *)(a6 - 8) = v18;
  *(_DWORD *)(a8 - 8) = v17;
  double v19 = *(double *)(a6 - 16);
  double v20 = *(double *)(a4 - 16);
  if (v19 >= v20)
  {
    if (v20 < v19) {
      goto LABEL_16;
    }
    int v22 = *(_DWORD *)(a6 - 8);
    int v21 = *(_DWORD *)(a4 - 8);
    if (v22 >= v21) {
      goto LABEL_16;
    }
  }
  else
  {
    int v21 = *(_DWORD *)(a4 - 8);
    int v22 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v19;
  *(double *)(a6 - 16) = v20;
  *(_DWORD *)(a4 - 8) = v22;
  *(_DWORD *)(a6 - 8) = v21;
  double v23 = *(double *)(a4 - 16);
  double v24 = *(double *)(a2 - 16);
  if (v23 < v24)
  {
    int v25 = *(_DWORD *)(a2 - 8);
    int v26 = *(_DWORD *)(a4 - 8);
LABEL_7:
    *(double *)(a2 - 16) = v23;
    *(double *)(a4 - 16) = v24;
    *(_DWORD *)(a2 - 8) = v26;
    *(_DWORD *)(a4 - 8) = v25;
    goto LABEL_16;
  }
  if (v24 >= v23)
  {
    int v26 = *(_DWORD *)(a4 - 8);
    int v25 = *(_DWORD *)(a2 - 8);
    if (v26 < v25) {
      goto LABEL_7;
    }
  }
LABEL_16:
  double v27 = *(double *)(a10 - 16);
  double v28 = *(double *)(a8 - 16);
  if (v27 >= v28)
  {
    if (v28 < v27) {
      return result;
    }
    int v30 = *(_DWORD *)(a10 - 8);
    int v29 = *(_DWORD *)(a8 - 8);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a8 - 8);
    int v30 = *(_DWORD *)(a10 - 8);
  }
  *(double *)(a8 - 16) = v27;
  *(double *)(a10 - 16) = v28;
  *(_DWORD *)(a8 - 8) = v30;
  *(_DWORD *)(a10 - 8) = v29;
  double v31 = *(double *)(a8 - 16);
  double v32 = *(double *)(a6 - 16);
  if (v31 >= v32)
  {
    if (v32 < v31) {
      return result;
    }
    int v34 = *(_DWORD *)(a8 - 8);
    int v33 = *(_DWORD *)(a6 - 8);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a6 - 8);
    int v34 = *(_DWORD *)(a8 - 8);
  }
  *(double *)(a6 - 16) = v31;
  *(double *)(a8 - 16) = v32;
  *(_DWORD *)(a6 - 8) = v34;
  *(_DWORD *)(a8 - 8) = v33;
  double v35 = *(double *)(a6 - 16);
  double v36 = *(double *)(a4 - 16);
  if (v35 >= v36)
  {
    if (v36 < v35) {
      return result;
    }
    int v38 = *(_DWORD *)(a6 - 8);
    int v37 = *(_DWORD *)(a4 - 8);
    if (v38 >= v37) {
      return result;
    }
  }
  else
  {
    int v37 = *(_DWORD *)(a4 - 8);
    int v38 = *(_DWORD *)(a6 - 8);
  }
  *(double *)(a4 - 16) = v35;
  *(double *)(a6 - 16) = v36;
  *(_DWORD *)(a4 - 8) = v38;
  *(_DWORD *)(a6 - 8) = v37;
  double v39 = *(double *)(a4 - 16);
  double v40 = *(double *)(a2 - 16);
  if (v39 < v40)
  {
    int v41 = *(_DWORD *)(a2 - 8);
    int v42 = *(_DWORD *)(a4 - 8);
LABEL_24:
    *(double *)(a2 - 16) = v39;
    *(double *)(a4 - 16) = v40;
    *(_DWORD *)(a2 - 8) = v42;
    *(_DWORD *)(a4 - 8) = v41;
    return result;
  }
  if (v40 >= v39)
  {
    int v42 = *(_DWORD *)(a4 - 8);
    int v41 = *(_DWORD *)(a2 - 8);
    if (v42 < v41) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2 - a4;
  if (a2 == a4) {
    return a5;
  }
  uint64_t v10 = a4;
  if (v8 >= 17)
  {
    unint64_t v14 = (unint64_t)((v8 >> 4) - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = a2 - 16 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a7, v8 >> 4, v16, v16);
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    uint64_t v17 = v10;
    uint64_t v18 = v10;
    do
    {
      double v21 = *(double *)(v18 - 16);
      v18 -= 16;
      double v22 = v21;
      double v23 = *(double *)(a2 - 16);
      if (v21 < v23)
      {
        int v19 = *(_DWORD *)(v17 - 8);
        int v20 = *(_DWORD *)(a2 - 8);
      }
      else
      {
        if (v23 < v22) {
          goto LABEL_9;
        }
        int v19 = *(_DWORD *)(v17 - 8);
        int v20 = *(_DWORD *)(a2 - 8);
        if (v19 >= v20) {
          goto LABEL_9;
        }
      }
      *(double *)(v17 - 16) = v23;
      *(double *)(a2 - 16) = v22;
      *(_DWORD *)(v17 - 8) = v20;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a7, v8 >> 4, a1, a2);
LABEL_9:
      uint64_t v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 17)
  {
    unint64_t v24 = (unint64_t)v8 >> 4;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(a1, a2, a3, v10, a7, v24);
      v10 += 16;
    }
    while (v24-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v6 = a2 - a6;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 4)
    {
      uint64_t v8 = v6 >> 3;
      uint64_t v9 = (v6 >> 3) | 1;
      uint64_t v10 = a2 - 16 * v9;
      uint64_t v11 = v8 + 2;
      if (v11 < a4)
      {
        double v12 = *(double *)(v10 - 16);
        double v13 = *(double *)(v10 - 32);
        if (v12 < v13 || v13 >= v12 && *(_DWORD *)(v10 - 8) < *(_DWORD *)(v10 - 24))
        {
          v10 -= 16;
          uint64_t v9 = v11;
        }
      }
      double v14 = *(double *)(v10 - 16);
      double v15 = *(double *)(a6 - 16);
      if (v14 >= v15)
      {
        if (v15 >= v14)
        {
          int v17 = *(_DWORD *)(v10 - 8);
          int v16 = *(_DWORD *)(a6 - 8);
          if (v17 < v16) {
            return;
          }
        }
        else
        {
          int v16 = *(_DWORD *)(a6 - 8);
          int v17 = *(_DWORD *)(v10 - 8);
        }
        *(double *)(a6 - 16) = v14;
        *(_DWORD *)(a6 - 8) = v17;
        if (v7 >= v9)
        {
          while (1)
          {
            uint64_t v19 = 2 * v9;
            uint64_t v9 = (2 * v9) | 1;
            uint64_t v18 = a2 - 16 * v9;
            uint64_t v20 = v19 + 2;
            if (v20 < a4)
            {
              double v21 = *(double *)(v18 - 16);
              double v22 = *(double *)(v18 - 32);
              if (v21 < v22 || v22 >= v21 && *(_DWORD *)(v18 - 8) < *(_DWORD *)(v18 - 24))
              {
                v18 -= 16;
                uint64_t v9 = v20;
              }
            }
            double v23 = *(double *)(v18 - 16);
            if (v23 < v15) {
              break;
            }
            int v24 = *(_DWORD *)(v18 - 8);
            if (v15 >= v23 && v24 < v16) {
              break;
            }
            *(double *)(v10 - 16) = v23;
            *(_DWORD *)(v10 - 8) = v24;
            uint64_t v10 = v18;
            if (v7 < v9) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v18 = v10;
LABEL_14:
        *(double *)(v18 - 16) = v15;
        *(_DWORD *)(v18 - 8) = v16;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<double,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 - 16);
    int v8 = *(_DWORD *)(a2 - 8);
    uint64_t v9 = a2;
    do
    {
      uint64_t v10 = v9;
      v9 += 16 * ~v6;
      uint64_t v11 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v12 = v11 + 2;
      if (v12 < a6)
      {
        double v13 = *(double *)(v9 - 16);
        double v14 = *(double *)(v9 - 32);
        if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v9 - 8) < *(_DWORD *)(v9 - 24))
        {
          v9 -= 16;
          uint64_t v6 = v12;
        }
      }
      *(void *)(v10 - 16) = *(void *)(v9 - 16);
      *(_DWORD *)(v10 - 8) = *(_DWORD *)(v9 - 8);
    }
    while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
    if (v9 == a4 + 16)
    {
      *(void *)(v9 - 16) = v7;
      *(_DWORD *)(v9 - 8) = v8;
      return;
    }
    double v15 = (double *)(v9 - 16);
    *(void *)(v9 - 16) = *(void *)a4;
    *(_DWORD *)(v9 - 8) = *(_DWORD *)(a4 + 8);
    *(void *)a4 = v7;
    *(_DWORD *)(a4 + 8) = v8;
    uint64_t v16 = a2 - (v9 - 16);
    if (v16 >= 17)
    {
      unint64_t v17 = ((unint64_t)v16 >> 4) - 2;
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = a2 - 16 * (v17 >> 1);
      double v20 = *(double *)(v19 - 16);
      double v21 = *v15;
      if (v20 >= *v15)
      {
        if (v21 < v20) {
          return;
        }
        int v23 = *(_DWORD *)(v19 - 8);
        int v22 = *(_DWORD *)(v9 - 8);
        if (v23 >= v22) {
          return;
        }
      }
      else
      {
        int v22 = *(_DWORD *)(v9 - 8);
        int v23 = *(_DWORD *)(v19 - 8);
      }
      *(double *)(v9 - 16) = v20;
      *(_DWORD *)(v9 - 8) = v23;
      if (v17 >= 2)
      {
        while (1)
        {
          unint64_t v26 = v18 - 1;
          unint64_t v18 = (v18 - 1) >> 1;
          uint64_t v24 = a2 - 16 * v18;
          double v27 = *(double *)(v24 - 16);
          if (v27 < v21)
          {
            int v25 = *(_DWORD *)(v24 - 8);
          }
          else
          {
            if (v21 < v27) {
              break;
            }
            int v25 = *(_DWORD *)(v24 - 8);
            if (v25 >= v22) {
              break;
            }
          }
          *(double *)(v19 - 16) = v27;
          *(_DWORD *)(v19 - 8) = v25;
          uint64_t v19 = a2 - 16 * v18;
          if (v26 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v24 = v19;
LABEL_19:
      *(double *)(v24 - 16) = v21;
      *(_DWORD *)(v24 - 8) = v22;
    }
  }
}

uint64_t *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::EmplaceDecomposable::operator()<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<std::vector<int>&&>>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = 0;
  uint64_t result = *a1;
  uint64_t v11 = *a2;
  unint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2));
  uint64_t v13 = *result;
  unint64_t v14 = (v12 >> 7) ^ ((unint64_t)*result >> 12);
  uint64_t v15 = result[3];
  while (1)
  {
    unint64_t v16 = v14 & v15;
    uint64_t v17 = *(void *)(v13 + (v14 & v15));
    unint64_t v18 = ((v17 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                        * (v12 & 0x7F))) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_6:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
    {
      uint64_t result = (uint64_t *)absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::prepare_insert(result, v12);
      unint64_t v20 = (unint64_t)result;
      int v22 = (void *)((*a1)[1] + 32 * (void)result);
      uint64_t v23 = *a4;
      uint64_t v24 = **a3;
      v22[2] = 0;
      v22[3] = 0;
      void *v22 = v24;
      v22[1] = 0;
      *(_OWORD *)(v22 + 1) = *(_OWORD *)v23;
      v22[3] = *(void *)(v23 + 16);
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)uint64_t v23 = 0;
      uint64_t v13 = **a1;
      uint64_t v19 = (*a1)[1];
      char v21 = 1;
      goto LABEL_10;
    }
    v9 += 8;
    unint64_t v14 = v9 + v16;
  }
  uint64_t v19 = result[1];
  while (1)
  {
    unint64_t v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v15;
    if (*(void *)(v19 + 32 * v20) == v11) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_6;
    }
  }
  char v21 = 0;
LABEL_10:
  *(void *)a5 = v13 + v20;
  *(void *)(a5 + 8) = v19 + 32 * v20;
  *(unsigned char *)(a5 + 16) = v21;
  return result;
}

void operations_research::sat::CpModelMapping::CreateVariables(std::vector<int> *this, const operations_research::sat::CpModelProto *a2, char a3, operations_research::sat::Model *a4)
{
  double v4 = a4;
  uint64_t v6 = a2;
  uint64_t v241 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v8 = *((int *)a2 + 6);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a4);
  v222[0] = *(_DWORD *)(v9 + 16);
  LODWORD(__p[0]) = 0;
  char v210 = a3;
  if (v222[0]) {
    google::MakeCheckOpString<int,int>((int)v222, (int)__p, "sat_solver->NumVariables() == 0");
  }
  *(void *)uint64_t v222 = 0;
  v223[0] = 0;
  v223[1] = 0;
  memset(__p, 0, 24);
  begiunint64_t n = this[2].__begin_;
  uint64_t v11 = this + 2;
  unint64_t v12 = this[2].__end_ - begin;
  if (v8 <= v12)
  {
    if (v8 < v12) {
      this[2].__end_ = &begin[v8];
    }
  }
  else
  {
    std::vector<int>::__append(this + 2, v8 - v12, &operations_research::sat::kNoBooleanVariable);
  }
  __x[0] = -1;
  std::vector<int>::pointer v13 = this[3].__begin_;
  unint64_t v14 = this + 3;
  unint64_t v15 = this[3].__end_ - v13;
  if (v8 <= v15)
  {
    if (v8 < v15) {
      this[3].__end_ = &v13[v8];
    }
  }
  else
  {
    std::vector<int>::__append(this + 3, v8 - v15, __x);
  }
  int32x4_t v212 = (operations_research::sat::SatSolver *)v9;
  uint64_t v16 = v8;
  uint64_t v208 = v8;
  uint64_t v209 = (uint64_t)v4;
  uint64_t v215 = this;
  int v216 = v6;
  __unint64_t n = v8;
  uint64_t v207 = this + 2;
  if ((int)v8 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v205 = this + 3;
    while (1)
    {
      uint64_t v23 = *(void *)(*((void *)v6 + 4) + 8 * v20 + 8);
      if (*(_DWORD *)(v23 + 16) != 2) {
        goto LABEL_15;
      }
      uint64_t v24 = *(uint64_t **)(v23 + 24);
      uint64_t v25 = *v24;
      if (*v24 < 0) {
        goto LABEL_15;
      }
      uint64_t v26 = v24[1];
      if (v26 > 1) {
        goto LABEL_15;
      }
      v11->__begin_[v20] = v21;
      v14->__begin_[v21] = v20;
      if (!v26) {
        break;
      }
      if (v25 == 1)
      {
        if (v19 < v18)
        {
          *(_DWORD *)uint64_t v19 = v21;
          double v27 = v19 + 4;
LABEL_50:
          __p[1] = v27;
          uint64_t v19 = (char *)v27;
          goto LABEL_14;
        }
        uint64_t v38 = (v19 - v17) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
LABEL_271:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v18 - v17) >> 1 > v39) {
          unint64_t v39 = (v18 - v17) >> 1;
        }
        if ((unint64_t)(v18 - v17) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40)
        {
          if (v40 >> 62) {
LABEL_270:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          int v41 = operator new(4 * v40);
          int v42 = (int *)&v41[4 * v38];
          *int v42 = v21;
          double v27 = v42 + 1;
          if (v19 != v17)
          {
LABEL_44:
            unint64_t v43 = v19 - 4 - v17;
            if (v43 < 0xBC
              || &v41[v19 - v17 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v19 - v17 - 4]
              || &v19[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4
              || (unint64_t)(v17 - v41) < 0x20)
            {
              uint64_t v44 = v19;
              uint64_t v6 = v216;
            }
            else
            {
              uint64_t v56 = (v43 >> 2) + 1;
              uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v44 = &v19[-v57];
              int v42 = (int *)((char *)v42 - v57);
              int v58 = &v41[4 * v38 - 16];
              double v59 = v19 - 16;
              uint64_t v60 = v56 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v6 = v216;
              do
              {
                long long v61 = *(_OWORD *)v59;
                *(v58 - 1) = *((_OWORD *)v59 - 1);
                *int v58 = v61;
                v58 -= 2;
                v59 -= 32;
                v60 -= 8;
              }
              while (v60);
              if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_47:
                unint64_t v18 = &v41[4 * v40];
                __p[0] = v42;
                __p[1] = v27;
                __p[2] = v18;
                if (v17) {
                  goto LABEL_48;
                }
                goto LABEL_49;
              }
            }
            do
            {
              int v45 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *--int v42 = v45;
            }
            while (v44 != v17);
            goto LABEL_47;
          }
        }
        else
        {
          int v41 = 0;
          int v42 = (int *)(4 * v38);
          *(_DWORD *)(4 * v38) = v21;
          double v27 = (void *)(4 * v38 + 4);
          if (v19 != v17) {
            goto LABEL_44;
          }
        }
        uint64_t v6 = v216;
        unint64_t v18 = &v41[4 * v40];
        __p[0] = v42;
        __p[1] = v27;
        __p[2] = v18;
        if (v17)
        {
LABEL_48:
          uint64_t v46 = v18;
          operator delete(v17);
          unint64_t v18 = v46;
        }
LABEL_49:
        uint64_t v17 = (char *)v42;
        uint64_t v16 = v208;
        double v4 = (operations_research::sat::Model *)v209;
        unint64_t v14 = v205;
        goto LABEL_50;
      }
LABEL_14:
      ++v21;
LABEL_15:
      if (++v20 == v16) {
        goto LABEL_72;
      }
    }
    double v28 = (char *)v223[0];
    if (v223[0] < v223[1])
    {
      *(_DWORD *)v223[0] = v21;
      int v22 = v28 + 4;
      double v4 = (operations_research::sat::Model *)v209;
LABEL_13:
      v223[0] = v22;
      uint64_t v11 = v207;
      goto LABEL_14;
    }
    int v29 = *(char **)v222;
    int v30 = (char *)v223[0] - *(void *)v222;
    uint64_t v31 = ((uint64_t)v223[0] - *(void *)v222) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      goto LABEL_271;
    }
    uint64_t v33 = (uint64_t)v223[1] - *(void *)v222;
    if (((uint64_t)v223[1] - *(void *)v222) >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v204 = v18;
    if (v34)
    {
      if (v34 >> 62) {
        goto LABEL_270;
      }
      double v35 = operator new(4 * v34);
      double v36 = (int *)((char *)v35 + 4 * v31);
      *double v36 = v21;
      int v22 = v36 + 1;
      if (v28 != v29) {
        goto LABEL_33;
      }
    }
    else
    {
      double v35 = 0;
      double v36 = (int *)(4 * v31);
      *(_DWORD *)(4 * v31) = v21;
      int v22 = (void *)(4 * v31 + 4);
      if (v28 != v29)
      {
LABEL_33:
        unint64_t v37 = v28 - 4 - v29;
        if (v37 >= 0x2C)
        {
          unint64_t v47 = v28 - &v30[(void)v35];
          uint64_t v6 = v216;
          if (v47 >= 0x20)
          {
            uint64_t v48 = (v37 >> 2) + 1;
            uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
            double v50 = &v28[-v49];
            double v36 = (int *)((char *)v36 - v49);
            double v51 = (char *)v35 + 4 * v31 - 16;
            double v52 = v28 - 16;
            uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v54 = *(_OWORD *)v52;
              *(v51 - 1) = *((_OWORD *)v52 - 1);
              *double v51 = v54;
              v51 -= 2;
              v52 -= 32;
              v53 -= 8;
            }
            while (v53);
            double v28 = v50;
            if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_61;
            }
          }
        }
        else
        {
          uint64_t v6 = v216;
        }
        do
        {
          int v55 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *--double v36 = v55;
        }
        while (v28 != v29);
LABEL_61:
        *(void *)uint64_t v222 = v36;
        v223[1] = (char *)v35 + 4 * v34;
        if (v29) {
          operator delete(v29);
        }
        uint64_t v16 = v208;
        double v4 = (operations_research::sat::Model *)v209;
        unint64_t v18 = v204;
        unint64_t v14 = v205;
        goto LABEL_13;
      }
    }
    uint64_t v6 = v216;
    goto LABEL_61;
  }
  uint64_t v19 = 0;
  int v21 = 0;
LABEL_72:
  operations_research::sat::SatSolver::SetNumVariables(v212, v21);
  double v63 = __p[0];
  if (__p[0] != v19)
  {
    int v64 = (char *)__p[0];
    do
    {
      __x[0] = 2 * *(_DWORD *)v64;
      int v238 = (void (**)(void **))&unk_26F0BD480;
      v239[0] = __x;
      v239[1] = (int *)1;
      int64_t v240 = (void **)&v238;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v239, (uint64_t)v4);
      if (v240 == (void **)&v238)
      {
        v238[4]((void **)&v238);
      }
      else if (v240)
      {
        (*((void (**)(void))*v240 + 5))();
      }
      v64 += 4;
    }
    while (v64 != v19);
  }
  double v66 = *(char **)v222;
  uint64_t v65 = (char *)v223[0];
  if (*(void **)v222 != v223[0])
  {
    BOOL v67 = *(char **)v222;
    do
    {
      __x[0] = (2 * *(_DWORD *)v67) | 1;
      unint64_t v235 = (void (**)(void **))&unk_26F0BD480;
      v236[0] = __x;
      v236[1] = (int *)1;
      uint64_t v237 = (void **)&v235;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v236, (uint64_t)v4);
      if (v237 == (void **)&v235)
      {
        v235[4]((void **)&v235);
      }
      else if (v237)
      {
        (*((void (**)(void))*v237 + 5))();
      }
      v67 += 4;
    }
    while (v67 != v65);
  }
  uint64_t v68 = v216;
  if (v63) {
    operator delete(v63);
  }
  uint64_t v69 = v215;
  if (v66) {
    operator delete(v66);
  }
  memset(&v226, 0, sizeof(v226));
  uint64_t v70 = v207;
  if (v210)
  {
    std::vector<int>::size_type v71 = __n;
    if (v208)
    {
      std::vector<int>::__append(&v226, __n);
      if ((int)v208 >= 1)
      {
        std::vector<int>::pointer v72 = v226.__begin_;
        if (__n < 8)
        {
          for (uint64_t i = 0; i != v208; ++i)
LABEL_201:
            v72[i] = i;
          goto LABEL_202;
        }
        uint64_t i = v208 & 0x7FFFFFF8;
        int32x4_t v138 = (int32x4_t)xmmword_23CE7EC40;
        uint64_t v139 = (int32x4_t *)(v226.__begin_ + 4);
        v140.i64[0] = 0x400000004;
        v140.i64[1] = 0x400000004;
        v141.i64[0] = 0x800000008;
        v141.i64[1] = 0x800000008;
        uint64_t v142 = v208 & 0xFFFFFFF8;
        do
        {
          v139[-1] = v138;
          int32x4_t *v139 = vaddq_s32(v138, v140);
          int32x4_t v138 = vaddq_s32(v138, v141);
          v139 += 2;
          v142 -= 8;
        }
        while (v142);
        if (i != v208) {
          goto LABEL_201;
        }
      }
    }
  }
  else
  {
    *(void *)uint64_t v222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_OWORD *)unint64_t v223 = 0u;
    long long v224 = 0u;
    uint64_t v225 = 0;
    memset(__p, 0, sizeof(__p));
    if (*((int *)v216 + 12) < 1)
    {
      int v75 = 0;
      int v74 = 0;
    }
    else
    {
      int v74 = 0;
      int v75 = 0;
      uint64_t v76 = 0;
      do
      {
        operations_research::sat::GetReferencesUsedByConstraint(*(operations_research::sat **)(*((void *)v68 + 7) + 8 * v76 + 8), (uint64_t)__x);
        if (v75) {
          operator delete(v75);
        }
        int v75 = *(int **)__x;
        __p[0] = *(void **)__x;
        uint64_t v213 = (int *)v218;
        *(_OWORD *)&__p[1] = v218;
        long long v218 = 0uLL;
        *(void *)__x = 0;
        if (v74)
        {
          operator delete(v74);
          uint64_t v77 = *(int **)__x;
        }
        else
        {
          uint64_t v77 = 0;
        }
        int32x4_t v211 = (void *)v219;
        *(_OWORD *)&__p[3] = v219;
        __p[5] = v220;
        unint64_t v220 = 0;
        long long v219 = 0uLL;
        if (v77)
        {
          *(void *)&long long v218 = v77;
          operator delete(v77);
        }
        for (uint64_t j = v75; j != v213; ++j)
        {
          uint64_t v82 = 0;
          if (~*j <= *j) {
            int v85 = *j;
          }
          else {
            int v85 = ~*j;
          }
          unint64_t v86 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v85)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v85));
          for (unint64_t k = (v86 >> 7) ^ (*(void *)v222 >> 12); ; unint64_t k = v82 + v79)
          {
            unint64_t v79 = k & v224;
            uint64_t v80 = *(void *)(*(void *)v222 + v79);
            unint64_t v81 = ((v80 ^ (0x101010101010101 * (v86 & 0x7F))) - 0x101010101010101) & ~(v80 ^ (0x101010101010101
                                                                                                * (v86 & 0x7F))) & 0x8080808080808080;
            if (v81) {
              break;
            }
LABEL_110:
            if ((v80 & (~v80 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v84 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v222, v86);
              *((_DWORD *)v223[0] + v84) = v85;
              goto LABEL_113;
            }
            v82 += 8;
          }
          while (*((_DWORD *)v223[0] + ((v79 + (__clz(__rbit64(v81)) >> 3)) & v224)) != v85)
          {
            v81 &= v81 - 1;
            if (!v81) {
              goto LABEL_110;
            }
          }
LABEL_113:
          ;
        }
        ++v76;
        uint64_t v68 = v216;
        int v74 = v211;
      }
      while (v76 < *((int *)v216 + 12));
    }
    uint64_t v87 = *((void *)v68 + 15);
    if (v68 != (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
      && v87 != 0)
    {
      uint64_t v89 = *(int *)(v87 + 16);
      if (v89)
      {
        uint64_t v90 = *(int **)(v87 + 24);
        char v91 = &v90[v89];
        do
        {
          uint64_t v95 = 0;
          if (~*v90 <= *v90) {
            int v98 = *v90;
          }
          else {
            int v98 = ~*v90;
          }
          unint64_t v99 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v98)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v98));
          for (unint64_t m = (v99 >> 7) ^ (*(void *)v222 >> 12); ; unint64_t m = v95 + v92)
          {
            unint64_t v92 = m & v224;
            uint64_t v93 = *(void *)(*(void *)v222 + v92);
            unint64_t v94 = ((v93 ^ (0x101010101010101 * (v99 & 0x7F))) - 0x101010101010101) & ~(v93 ^ (0x101010101010101
                                                                                                * (v99 & 0x7F))) & 0x8080808080808080;
            if (v94) {
              break;
            }
LABEL_128:
            if ((v93 & (~v93 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v97 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v222, v99);
              *((_DWORD *)v223[0] + v97) = v98;
              goto LABEL_131;
            }
            v95 += 8;
          }
          while (*((_DWORD *)v223[0] + ((v92 + (__clz(__rbit64(v94)) >> 3)) & v224)) != v98)
          {
            v94 &= v94 - 1;
            if (!v94) {
              goto LABEL_128;
            }
          }
LABEL_131:
          ++v90;
        }
        while (v90 != v91);
      }
    }
    int64x2_t v214 = v74;
    uint64_t v100 = *((void *)v216 + 10);
    if (v100) {
      uint64_t v101 = v100 + 8;
    }
    else {
      uint64_t v101 = 0;
    }
    uint64_t v102 = *((int *)v216 + 18);
    if (v102)
    {
      uint64_t v103 = v101 + 8 * v102;
      do
      {
        uint64_t v104 = *(int *)(*(void *)v101 + 16);
        if (v104)
        {
          long long v105 = *(int **)(*(void *)v101 + 24);
          long long v106 = &v105[v104];
          do
          {
            uint64_t v110 = 0;
            if (~*v105 <= *v105) {
              int v113 = *v105;
            }
            else {
              int v113 = ~*v105;
            }
            unint64_t v114 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v113)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v113));
            for (unint64_t n = (v114 >> 7) ^ (*(void *)v222 >> 12); ; unint64_t n = v110 + v107)
            {
              unint64_t v107 = n & v224;
              uint64_t v108 = *(void *)(*(void *)v222 + v107);
              unint64_t v109 = ((v108 ^ (0x101010101010101 * (v114 & 0x7F))) - 0x101010101010101) & ~(v108 ^ (0x101010101010101 * (v114 & 0x7F))) & 0x8080808080808080;
              if (v109) {
                break;
              }
LABEL_147:
              if ((v108 & (~v108 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v112 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v222, v114);
                *((_DWORD *)v223[0] + v112) = v113;
                goto LABEL_150;
              }
              v110 += 8;
            }
            while (*((_DWORD *)v223[0] + ((v107 + (__clz(__rbit64(v109)) >> 3)) & v224)) != v113)
            {
              v109 &= v109 - 1;
              if (!v109) {
                goto LABEL_147;
              }
            }
LABEL_150:
            ++v105;
          }
          while (v105 != v106);
        }
        v101 += 8;
      }
      while (v101 != v103);
    }
    uint64_t v68 = v216;
    if ((int)v208 >= 1)
    {
      for (iuint64_t i = 0; ii != v208; ++ii)
      {
        if (v207->__begin_[ii] == -1)
        {
          uint64_t v119 = 0;
          unint64_t v122 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + ii)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + ii));
          for (juint64_t j = (*(void *)v222 >> 12) ^ (v122 >> 7); ; juint64_t j = v119 + v116)
          {
            unint64_t v116 = jj & v224;
            uint64_t v117 = *(void *)(*(void *)v222 + v116);
            unint64_t v118 = ((v117 ^ (0x101010101010101 * (v122 & 0x7F))) - 0x101010101010101) & ~(v117 ^ (0x101010101010101 * (v122 & 0x7F))) & 0x8080808080808080;
            if (v118) {
              break;
            }
LABEL_160:
            if ((v117 & (~v117 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v121 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v222, v122);
              *((_DWORD *)v223[0] + v121) = ii;
              goto LABEL_164;
            }
            v119 += 8;
          }
          while (ii != *((_DWORD *)v223[0] + ((v116 + (__clz(__rbit64(v118)) >> 3)) & v224)))
          {
            v118 &= v118 - 1;
            if (!v118) {
              goto LABEL_160;
            }
          }
        }
LABEL_164:
        ;
      }
    }
    long long v123 = (int *)v223[0];
    long long v124 = *(char **)v222;
    if ((char)**(unsigned char **)v222 <= -2)
    {
      do
      {
        unint64_t v125 = (__clz(__rbit64(((*(void *)v124 >> 7) & ~*(void *)v124 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v124 += v125;
        v123 += v125;
      }
      while (*v124 < -1);
    }
    long long v126 = (void *)(*(void *)v222 + v224);
    if (v124 == (char *)(*(void *)v222 + v224))
    {
      size_t v127 = 0;
    }
    else
    {
      size_t v127 = 0;
      long long v128 = v124;
      do
      {
        int v129 = *((char *)v128 + 1);
        long long v128 = (void *)((char *)v128 + 1);
        if (v129 <= -2)
        {
          do
            long long v128 = (void *)((char *)v128
                            + ((__clz(__rbit64(((*v128 >> 7) & ~*v128 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
          while (*(char *)v128 < -1);
        }
        ++v127;
      }
      while (v128 != v126);
    }
    std::vector<int>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator>((uint64_t)&v226, v124, v123, v126, v62, v127);
    std::__sort<std::__less<int,int> &,int *>();
    std::vector<int>::pointer end = v226.__end_;
    if (v226.__begin_ != v226.__end_)
    {
      std::vector<int>::pointer v131 = v226.__begin_ + 1;
      while (v131 != v226.__end_)
      {
        int v132 = *(v131 - 1);
        int v133 = *v131++;
        if (v132 == v133)
        {
          std::vector<int>::pointer v134 = v131 - 2;
          while (v131 != end)
          {
            int v135 = v132;
            int v132 = *v131;
            if (v135 != *v131)
            {
              v134[1] = v132;
              ++v134;
            }
            ++v131;
          }
          uint64_t v136 = v134 + 1;
          uint64_t v137 = (char *)((char *)end - (char *)(v134 + 1));
          if (end != v134 + 1)
          {
            if (end != (std::vector<int>::pointer)&v137[(void)v136]) {
              memmove(v134 + 1, &v137[(void)v136], 0);
            }
            v226.__end_ = v136;
          }
          break;
        }
      }
    }
    if (v214) {
      operator delete(v214);
    }
    uint64_t v69 = v215;
    uint64_t v70 = v207;
    if (v75) {
      operator delete(v75);
    }
    if ((void)v224)
    {
      operator delete(*(void **)v222);
      *(void *)uint64_t v222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v225 = 0;
      v223[1] = 0;
      *(void *)&long long v224 = 0;
      v223[0] = 0;
    }
    std::vector<int>::size_type v71 = __n;
    if (*((void *)&v224 + 1)) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v224 + 1));
    }
  }
LABEL_202:
  unint64_t v143 = v69->__end_ - v69->__begin_;
  if (v71 <= v143)
  {
    if (v71 < v143) {
      v69->__end_ = &v69->__begin_[v71];
    }
  }
  else
  {
    std::vector<int>::__append(v69, v71 - v143, &operations_research::sat::kNoIntegerVariable);
  }
  uint64_t v144 = (operations_research::sat::IntegerTrail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v209);
  operations_research::sat::IntegerTrail::ReserveSpaceForNumVariables(v144, (unint64_t)((char *)v226.__end_ - (char *)v226.__begin_) >> 2);
  std::vector<int>::pointer v146 = v226.__begin_;
  std::vector<int>::pointer v147 = v226.__end_;
  unint64_t v148 = ((char *)v226.__end_ - (char *)v226.__begin_) >> 1;
  v222[0] = -1;
  std::vector<int>::pointer v149 = v69[4].__begin_;
  unint64_t v150 = v69[4].__end_ - v149;
  if (v148 <= v150)
  {
    if (v148 >= v150)
    {
      if (v226.__begin_ == v226.__end_) {
        goto LABEL_213;
      }
    }
    else
    {
      v69[4].__end_ = &v149[v148];
      if (v146 == v147) {
        goto LABEL_213;
      }
    }
  }
  else
  {
    std::vector<int>::__append(v69 + 4, v148 - v150, v222);
    std::vector<int>::pointer v146 = v226.__begin_;
    std::vector<int>::pointer v147 = v226.__end_;
    if (v226.__begin_ == v226.__end_) {
      goto LABEL_213;
    }
  }
  do
  {
    int v156 = *v146;
    uint64_t v157 = *(void *)(*((void *)v68 + 4) + 8 * *v146 + 8);
    operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v157 + 24), *(int *)(v157 + 16), (unint64_t *)v222, v145);
    int v158 = operations_research::sat::IntegerTrail::AddIntegerVariable(v144, (long long **)v222);
    std::vector<int>::pointer v159 = v69->__begin_;
    v69->__begin_[v156] = v158;
    if (v222[0])
    {
      operator delete(v223[0]);
      std::vector<int>::pointer v159 = v69->__begin_;
    }
    v69[4].__begin_[v159[v156]] = v156;
    ++v146;
    uint64_t v68 = v216;
  }
  while (v146 != v147);
LABEL_213:
  uint64_t v151 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v209);
  if ((int)v208 >= 1)
  {
    uint64_t v152 = v151;
    for (kunint64_t k = 0; kk != v208; ++kk)
    {
      int v154 = v69->__begin_[kk];
      if (v154 != -1)
      {
        int v155 = v70->__begin_[kk];
        if (v155 != -1) {
          operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v152, (const char *)(2 * v155), v154, 1);
        }
      }
    }
  }
  std::vector<int>::pointer v160 = v69[1].__begin_;
  uint64_t v161 = v69 + 1;
  int v162 = *((_DWORD *)v68 + 12);
  unint64_t v163 = v69[1].__end_ - v160;
  if (v162 <= v163)
  {
    if (v162 < v163) {
      v69[1].__end_ = &v160[v162];
    }
  }
  else
  {
    std::vector<int>::__append(v69 + 1, v162 - v163, operations_research::sat::kNoIntervalVariable);
    int v162 = *((_DWORD *)v68 + 12);
  }
  if (v162 >= 1)
  {
    uint64_t v164 = 0;
    while (1)
    {
      uint64_t v170 = *(void *)(*((void *)v68 + 7) + 8 * v164 + 8);
      if (*(_DWORD *)(v170 + 60) == 19) {
        break;
      }
LABEL_250:
      if (++v164 >= *((int *)v68 + 12)) {
        goto LABEL_266;
      }
    }
    if (*(_DWORD *)(v170 + 16))
    {
      int v171 = **(_DWORD **)(v170 + 24);
      if (~v171 <= v171) {
        int v172 = **(_DWORD **)(v170 + 24);
      }
      else {
        int v172 = ~v171;
      }
      HIDWORD(v174) = v215[2].__begin_[v172];
      LODWORD(v174) = **(_DWORD **)(v170 + 24);
      uint64_t v173 = (v174 >> 31);
      uint64_t v175 = *(_DWORD **)(v170 + 48);
      int v176 = v175[4];
      int v177 = v175[5];
      if (~v176 <= v176) {
        int v178 = v175[4];
      }
      else {
        int v178 = ~v176;
      }
      std::vector<int>::pointer v179 = v215->__begin_;
      uint64_t v180 = v215->__begin_[v178] ^ (v176 >> 31);
      if (~v177 <= v177) {
        int v181 = v175[5];
      }
      else {
        int v181 = ~v177;
      }
      uint64_t v182 = v179[v181] ^ (v177 >> 31);
      int v183 = v175[6];
      if (~v183 <= v183) {
        int v184 = v183;
      }
      else {
        int v184 = ~v183;
      }
      uint64_t v185 = v179[v184] ^ (v183 >> 31);
      uint64_t v231 = (void (**)(void **))&unk_26F0BF878;
      uint64_t v232 = v180 | (v182 << 32);
      uint64_t v233 = v185 | (v173 << 32);
      uint64_t v234 = (void **)&v231;
      BOOL v186 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(v209);
      v161->__begin_[v164] = operations_research::sat::IntervalsRepository::CreateInterval(v186, v232, SHIDWORD(v232), v233, 0, SHIDWORD(v233));
      unint64_t v187 = v234;
      if (v234 == (void **)&v231)
      {
        v231[4]((void **)&v231);
        goto LABEL_265;
      }
    }
    else
    {
      unint64_t v188 = *(_DWORD **)(v170 + 48);
      int v189 = v188[4];
      int v190 = v188[5];
      if (~v189 <= v189) {
        int v191 = v188[4];
      }
      else {
        int v191 = ~v189;
      }
      std::vector<int>::pointer v192 = v215->__begin_;
      uint64_t v193 = v215->__begin_[v191] ^ (v189 >> 31);
      if (~v190 <= v190) {
        int v194 = v188[5];
      }
      else {
        int v194 = ~v190;
      }
      uint64_t v195 = v192[v194] ^ (v190 >> 31);
      int v196 = v188[6];
      if (~v196 <= v196) {
        int v197 = v196;
      }
      else {
        int v197 = ~v196;
      }
      int v198 = v192[v197];
      int v227 = (void (**)(void **))&unk_26F0BF978;
      uint64_t v228 = v193 | (v195 << 32);
      unsigned int v229 = v198 ^ (v196 >> 31);
      uint64_t v230 = (void **)&v227;
      uint64_t v199 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(v209);
      v161->__begin_[v164] = operations_research::sat::IntervalsRepository::CreateInterval(v199, v228, SHIDWORD(v228), v229, 0, -1);
      unint64_t v187 = v230;
      if (v230 == (void **)&v227)
      {
        v227[4]((void **)&v227);
        goto LABEL_265;
      }
    }
    if (v187) {
      (*((void (**)(void **))*v187 + 5))(v187);
    }
LABEL_265:
    uint64_t v168 = 0;
    unint64_t v200 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v170)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v170)))
         + v170;
    unint64_t v201 = ((v200 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v200);
    std::vector<int>::pointer v202 = v215[5].__begin_;
    unint64_t v169 = ((unint64_t)v202 >> 12) ^ (v201 >> 7);
    std::vector<int>::pointer v203 = v215[6].__begin_;
    while (1)
    {
      unint64_t v165 = v169 & (unint64_t)v203;
      uint64_t v166 = *(void *)((char *)v202 + v165);
      unint64_t v167 = ((v166 ^ (0x101010101010101 * (v201 & 0x7F))) - 0x101010101010101) & ~(v166 ^ (0x101010101010101
                                                                                              * (v201 & 0x7F))) & 0x8080808080808080;
      if (v167) {
        break;
      }
LABEL_231:
      if ((v166 & (~v166 << 6) & 0x8080808080808080) != 0)
      {
        *(void *)&v215[5].__end_[2
                                 * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)&v215[5], v201)] = v170;
        goto LABEL_250;
      }
      v168 += 8;
      unint64_t v169 = v168 + v165;
    }
    while (*(void *)&v215[5].__end_[2 * ((v165 + (__clz(__rbit64(v167)) >> 3)) & (unint64_t)v203)] != v170)
    {
      v167 &= v167 - 1;
      if (!v167) {
        goto LABEL_231;
      }
    }
    goto LABEL_250;
  }
LABEL_266:
  if (v226.__begin_)
  {
    v226.__end_ = v226.__begin_;
    operator delete(v226.__begin_);
  }
}

void sub_23CC1B9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_23CC1B9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(operations_research::sat::Model *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelMapping *this, unint64_t a2, operations_research::sat::Model *a3)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  if (!*(unsigned char *)(v9 + 496))
  {
    uint64_t v300 = a3;
    long long v301 = (unsigned int *)v7;
    uint64_t v10 = *(int *)(a2 + 24);
    unint64_t v318 = 0;
    unint64_t v319 = 0;
    uint64_t v317 = 0;
    uint64_t v297 = v9;
    if (v10)
    {
      if ((v10 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 24 * v10;
      uint64_t v317 = (char *)operator new(24 * v10);
      unint64_t v319 = &v317[v11];
      size_t v12 = 24 * ((v11 - 24) / 0x18uLL) + 24;
      bzero(v317, v12);
      unint64_t v318 = &v317[v12];
    }
    uint64_t v290 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)v300);
    uint64_t v14 = *(void *)(a2 + 56);
    if (v14) {
      unint64_t v15 = v14 + 8;
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = *(int *)(a2 + 48);
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      uint64_t v293 = 0;
      uint64_t v296 = (const operations_research::sat::CpModelProto *)a2;
      uint64_t v288 = (uint64_t *)((char *)this + 216);
      unint64_t v19 = v15 + 8 * v16;
      uint64_t v298 = v8;
      unint64_t v303 = v19;
      while (1)
      {
        unint64_t v3 = *(void *)v15;
        if (*(_DWORD *)(*(void *)v15 + 60) != 12) {
          goto LABEL_10;
        }
        if (*(_DWORD *)(v3 + 16) != 1) {
          goto LABEL_10;
        }
        uint64_t v20 = *(void *)(v3 + 48);
        if (*(_DWORD *)(v20 + 16) != 1) {
          goto LABEL_10;
        }
        int v21 = **(_DWORD **)(v3 + 24);
        if (~v21 <= v21) {
          int v22 = **(_DWORD **)(v3 + 24);
        }
        else {
          int v22 = ~v21;
        }
        unsigned int v23 = *(_DWORD *)(*((void *)this + 6) + 4 * v22);
        int v24 = **(_DWORD **)(v20 + 24);
        if (~v24 <= v24) {
          int v25 = **(_DWORD **)(v20 + 24);
        }
        else {
          int v25 = ~v24;
        }
        int v316 = v25;
        uint64_t v26 = *(void *)(*(void *)(a2 + 32) + 8 * v25 + 8);
        operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v26 + 24), *(int *)(v26 + 16), &v313, v13);
        double v28 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (*(_DWORD *)(v3 + 60) == 12) {
          double v28 = *(uint64_t **)(v3 + 48);
        }
        operations_research::Domain::FromFlatSpanOfIntervals(v28[9], *((int *)v28 + 16), (unint64_t *)v307, v27);
        int v29 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (*(_DWORD *)(v3 + 60) == 12) {
          int v29 = *(uint64_t **)(v3 + 48);
        }
        uint64_t v30 = *(void *)v29[6];
        if (v24 >= 0) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = -v30;
        }
        operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)v307, v31, (unint64_t *)&v312);
        if (v307[0]) {
          operator delete(*(void **)&v307[8]);
        }
        int v33 = __PAIR64__(v23, v21) >> 31;
        if ((v312 & 0x1FFFFFFFELL) == 2)
        {
          uint64_t v34 = operations_research::Domain::Max((operations_research::Domain *)&v312, v32);
          if (v34 >= operations_research::Domain::Max((operations_research::Domain *)&v313, v35))
          {
            uint64_t v37 = operations_research::Domain::Min((operations_research::Domain *)&v312, v36);
            if (v37 > operations_research::Domain::Min((operations_research::Domain *)&v313, v38))
            {
              unsigned int v39 = v316;
              if (~v316 <= v316) {
                int v40 = v316;
              }
              else {
                int v40 = ~v316;
              }
              int v41 = *(_DWORD *)(*(void *)this + 4 * v40);
              unint64_t v42 = operations_research::Domain::Min((operations_research::Domain *)&v312, v36);
              *(_DWORD *)uint64_t v307 = v41 ^ (v39 >> 31);
              *(void *)&v307[4] = v42;
              unint64_t v43 = *(void *)v307;
              unint64_t v44 = HIDWORD(v42);
              if (v18 < (unint64_t)v293)
              {
                *(void *)unint64_t v18 = v3;
                *(_DWORD *)(v18 + 8) = v33;
                *(void *)(v18 + 12) = v43;
                *(_DWORD *)(v18 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = HIDWORD(v42);
                v18 += 24;
                uint64_t v8 = v298;
LABEL_70:
                unint64_t v286 = v286 & 0xFFFFFFFF00000000 | *(unsigned int *)(v18 - 4);
                operations_research::sat::ImpliedBounds::Add(v290, v33, *(void *)(v18 - 12), *(_DWORD *)(v18 - 4));
                goto LABEL_83;
              }
              unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v17) >> 3) + 1;
              if (v58 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v293 - v17) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v293 - v17) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v293 - v17) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59)
              {
                unint64_t v302 = *(void *)v307;
                if (v59 > 0xAAAAAAAAAAAAAAALL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v60 = v59;
                long long v61 = (char *)operator new(24 * v59);
                unint64_t v43 = v302;
                unint64_t v59 = v60;
              }
              else
              {
                long long v61 = 0;
              }
              double v66 = &v61[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
              *(void *)double v66 = v3;
              *((_DWORD *)v66 + 2) = v33;
              *(void *)(v66 + 12) = v43;
              *((_DWORD *)v66 + 5) = v44;
              if ((char *)v18 == v17)
              {
                uint64_t v69 = &v61[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
                uint64_t v8 = v298;
                uint64_t v293 = &v61[24 * v59];
                unint64_t v18 = (unint64_t)(v66 + 24);
                if (v17) {
                  goto LABEL_68;
                }
              }
              else
              {
                BOOL v67 = &v61[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
                uint64_t v8 = v298;
                do
                {
                  long long v68 = *(_OWORD *)(v18 - 24);
                  uint64_t v69 = v67 - 24;
                  *((void *)v67 - 1) = *(void *)(v18 - 8);
                  *(_OWORD *)(v67 - 24) = v68;
                  v18 -= 24;
                  v67 -= 24;
                }
                while ((char *)v18 != v17);
                uint64_t v293 = &v61[24 * v59];
                unint64_t v18 = (unint64_t)(v66 + 24);
                if (v17) {
LABEL_68:
                }
                  operator delete(v17);
              }
              uint64_t v17 = v69;
              goto LABEL_70;
            }
          }
          uint64_t v45 = operations_research::Domain::Min((operations_research::Domain *)&v312, v36);
          if (v45 <= operations_research::Domain::Min((operations_research::Domain *)&v313, v46))
          {
            uint64_t v48 = operations_research::Domain::Max((operations_research::Domain *)&v312, v47);
            if (v48 < operations_research::Domain::Max((operations_research::Domain *)&v313, v49))
            {
              int v51 = v316;
              unsigned int v52 = ~v316;
              if (~v316 > v316) {
                int v51 = ~v316;
              }
              int v53 = *(_DWORD *)(*(void *)this + 4 * v51);
              uint64_t v54 = operations_research::Domain::Max((operations_research::Domain *)&v312, v50);
              unint64_t v55 = 0x7FFFFFFFFFFFFFFFLL;
              if (v54 >= (uint64_t)0x8000000000000002) {
                unint64_t v55 = -v54;
              }
              *(_DWORD *)uint64_t v307 = v53 ^ (v52 >> 31);
              *(void *)&v307[4] = v55;
              unint64_t v56 = *(void *)v307;
              unint64_t v57 = HIDWORD(v55);
              if (v18 >= (unint64_t)v293)
              {
                unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v17) >> 3) + 1;
                if (v62 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v293 - v17) >> 3) > v62) {
                  unint64_t v62 = 0x5555555555555556 * ((v293 - v17) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v293 - v17) >> 3) >= 0x555555555555555) {
                  unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v63 = v62;
                }
                if (v63)
                {
                  unint64_t v302 = *(void *)v307;
                  if (v63 > 0xAAAAAAAAAAAAAAALL) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v64 = v63;
                  uint64_t v65 = (char *)operator new(24 * v63);
                  unint64_t v56 = v302;
                  unint64_t v63 = v64;
                }
                else
                {
                  uint64_t v65 = 0;
                }
                uint64_t v70 = &v65[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
                *(void *)uint64_t v70 = v3;
                *((_DWORD *)v70 + 2) = v33;
                *(void *)(v70 + 12) = v56;
                *((_DWORD *)v70 + 5) = v57;
                if ((char *)v18 == v17)
                {
                  double v73 = &v65[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
                  uint64_t v8 = v298;
                }
                else
                {
                  std::vector<int>::size_type v71 = &v65[8 * ((uint64_t)(v18 - (void)v17) >> 3)];
                  uint64_t v8 = v298;
                  do
                  {
                    long long v72 = *(_OWORD *)(v18 - 24);
                    double v73 = v71 - 24;
                    *((void *)v71 - 1) = *(void *)(v18 - 8);
                    *(_OWORD *)(v71 - 24) = v72;
                    v18 -= 24;
                    v71 -= 24;
                  }
                  while ((char *)v18 != v17);
                }
                uint64_t v293 = &v65[24 * v63];
                unint64_t v18 = (unint64_t)(v70 + 24);
                if (v17) {
                  operator delete(v17);
                }
                uint64_t v17 = v73;
              }
              else
              {
                *(void *)unint64_t v18 = v3;
                *(_DWORD *)(v18 + 8) = v33;
                *(void *)(v18 + 12) = v56;
                *(_DWORD *)(v18 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = HIDWORD(v55);
                v18 += 24;
                uint64_t v8 = v298;
              }
              unint64_t v281 = v281 & 0xFFFFFFFF00000000 | *(unsigned int *)(v18 - 4);
              operations_research::sat::ImpliedBounds::Add(v290, v33, *(void *)(v18 - 12), *(_DWORD *)(v18 - 4));
            }
          }
        }
LABEL_83:
        operations_research::Domain::IntersectionWith(&v313, (const operations_research::Domain *)&v312, &v310);
        if (!operations_research::Domain::IsEmpty((operations_research::Domain *)&v310))
        {
          uint64_t v75 = operations_research::Domain::Min((operations_research::Domain *)&v310, v74);
          if (v75 == operations_research::Domain::Max((operations_research::Domain *)&v310, v76))
          {
            unint64_t v302 = v18;
            uint64_t v283 = v17;
            int v78 = v316;
            unint64_t v79 = v317;
            uint64_t v80 = operations_research::Domain::Min((operations_research::Domain *)&v310, v77);
            uint64_t v82 = v80;
            double v83 = &v79[24 * v78];
            unint64_t v86 = (unint64_t *)*((void *)v83 + 1);
            int v85 = v83 + 8;
            unint64_t v84 = v86;
            uint64_t v88 = v85 + 1;
            unint64_t v87 = v85[1];
            if ((unint64_t)v86 >= v87)
            {
              uint64_t v90 = (unint64_t **)&v79[24 * v78];
              char v91 = *v90;
              uint64_t v92 = ((char *)v84 - (char *)*v90) >> 5;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 59) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v94 = v87 - (void)v91;
              if (v94 >> 4 > v93) {
                unint64_t v93 = v94 >> 4;
              }
              unint64_t v95 = (unint64_t)v94 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v93;
              if (v95)
              {
                unint64_t v278 = v90;
                if (v95 >> 59) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v96 = v95;
                unint64_t v97 = (char *)operator new(32 * v95);
                uint64_t v88 = v85 + 1;
                uint64_t v90 = v278;
                unint64_t v95 = v96;
              }
              else
              {
                unint64_t v97 = 0;
              }
              int v98 = &v97[32 * v92];
              *(void *)int v98 = v3;
              *((_DWORD *)v98 + 2) = v33;
              *((void *)v98 + 2) = v82;
              v98[24] = 1;
              unint64_t v99 = (unint64_t *)v98;
              if (v84 == v91)
              {
                uint64_t v17 = v283;
                a2 = (unint64_t)v296;
              }
              else
              {
                uint64_t v17 = v283;
                a2 = (unint64_t)v296;
                do
                {
                  long long v100 = *((_OWORD *)v84 - 2);
                  *(_OWORD *)((char *)v99 - 23) = *(_OWORD *)((char *)v84 - 23);
                  *((_OWORD *)v99 - 2) = v100;
                  v99 -= 4;
                  v84 -= 4;
                }
                while (v84 != v91);
                unint64_t v84 = *v90;
              }
              int *v90 = v99;
              uint64_t v89 = v98 + 32;
              void *v85 = v98 + 32;
              *uint64_t v88 = &v97[32 * v95];
              unint64_t v18 = v302;
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              unint64_t *v84 = v3;
              *((_DWORD *)v84 + 2) = v33;
              v84[2] = v80;
              uint64_t v89 = v84 + 4;
              *((unsigned char *)v84 + 24) = 1;
              unint64_t v18 = v302;
              a2 = (unint64_t)v296;
            }
            void *v85 = v89;
            uint64_t v101 = operations_research::Domain::Min((operations_research::Domain *)&v310, v81);
            uint64_t v8 = v298;
            if (operations_research::Domain::Contains((operations_research::Domain *)&v313, v101))
            {
              absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>(v288, &v316, (uint64_t)v307);
              uint64_t v102 = *(uint64_t **)&v307[8];
              uint64_t v104 = operations_research::Domain::Min((operations_research::Domain *)&v310, v103);
              uint64_t v105 = 0;
              unint64_t v106 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v104)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v104));
              unint64_t v107 = v102[1];
              unint64_t v108 = (v107 >> 12) ^ (v106 >> 7);
              uint64_t v109 = v102[4];
              while (1)
              {
                unint64_t v110 = v108 & v109;
                uint64_t v111 = *(void *)(v107 + v110);
                unint64_t v112 = ((v111 ^ (0x101010101010101 * (v106 & 0x7F))) - 0x101010101010101) & ~(v111 ^ (0x101010101010101 * (v106 & 0x7F))) & 0x8080808080808080;
                if (v112) {
                  break;
                }
LABEL_109:
                if ((v111 & (~v111 << 6) & 0x8080808080808080) != 0)
                {
                  *(void *)(v102[2]
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(v102 + 1, v106)) = v104;
                  goto LABEL_112;
                }
                v105 += 8;
                unint64_t v108 = v105 + v110;
              }
              while (*(void *)(v102[2] + 8 * ((v110 + (__clz(__rbit64(v112)) >> 3)) & v109)) != v104)
              {
                v112 &= v112 - 1;
                if (!v112) {
                  goto LABEL_109;
                }
              }
            }
          }
        }
LABEL_112:
        if (v310) {
          operator delete(v311);
        }
        operations_research::Domain::Complement((operations_research::Domain *)&v312, (unint64_t *)v307);
        operations_research::Domain::IntersectionWith(&v313, (const operations_research::Domain *)v307, &v310);
        if (v307[0]) {
          operator delete(*(void **)&v307[8]);
        }
        if (!operations_research::Domain::IsEmpty((operations_research::Domain *)&v310))
        {
          uint64_t v114 = operations_research::Domain::Min((operations_research::Domain *)&v310, v113);
          if (v114 == operations_research::Domain::Max((operations_research::Domain *)&v310, v115))
          {
            unint64_t v302 = v18;
            uint64_t v284 = v17;
            int v117 = v316;
            unint64_t v118 = v317;
            uint64_t v119 = operations_research::Domain::Min((operations_research::Domain *)&v310, v116);
            uint64_t v121 = v119;
            unint64_t v122 = &v118[24 * v117];
            unint64_t v125 = (unint64_t *)*((void *)v122 + 1);
            long long v124 = v122 + 8;
            long long v123 = v125;
            size_t v127 = v124 + 1;
            unint64_t v126 = v124[1];
            if ((unint64_t)v125 >= v126)
            {
              int v129 = (unint64_t **)&v118[24 * v117];
              long long v130 = *v129;
              uint64_t v131 = ((char *)v123 - (char *)*v129) >> 5;
              unint64_t v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 59) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v133 = v126 - (void)v130;
              if (v133 >> 4 > v132) {
                unint64_t v132 = v133 >> 4;
              }
              unint64_t v134 = (unint64_t)v133 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v132;
              if (v134)
              {
                char v279 = v129;
                if (v134 >> 59) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v135 = v134;
                uint64_t v136 = (char *)operator new(32 * v134);
                size_t v127 = v124 + 1;
                int v129 = v279;
                unint64_t v134 = v135;
              }
              else
              {
                uint64_t v136 = 0;
              }
              uint64_t v137 = &v136[32 * v131];
              *(void *)uint64_t v137 = v3;
              *((_DWORD *)v137 + 2) = v33;
              *((void *)v137 + 2) = v121;
              v137[24] = 0;
              int32x4_t v138 = (unint64_t *)v137;
              if (v123 == v130)
              {
                uint64_t v17 = v284;
                a2 = (unint64_t)v296;
              }
              else
              {
                uint64_t v17 = v284;
                a2 = (unint64_t)v296;
                do
                {
                  long long v139 = *((_OWORD *)v123 - 2);
                  *(_OWORD *)((char *)v138 - 23) = *(_OWORD *)((char *)v123 - 23);
                  *((_OWORD *)v138 - 2) = v139;
                  v138 -= 4;
                  v123 -= 4;
                }
                while (v123 != v130);
                long long v123 = *v129;
              }
              signed int *v129 = v138;
              long long v128 = v137 + 32;
              void *v124 = v137 + 32;
              void *v127 = &v136[32 * v134];
              unint64_t v18 = v302;
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              *long long v123 = v3;
              *((_DWORD *)v123 + 2) = v33;
              v123[2] = v119;
              long long v128 = v123 + 4;
              *((unsigned char *)v123 + 24) = 0;
              unint64_t v18 = v302;
              a2 = (unint64_t)v296;
            }
            void *v124 = v128;
            uint64_t v140 = operations_research::Domain::Min((operations_research::Domain *)&v310, v120);
            uint64_t v8 = v298;
            if (operations_research::Domain::Contains((operations_research::Domain *)&v313, v140))
            {
              absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>(v288, &v316, (uint64_t)v307);
              int32x4_t v141 = *(uint64_t **)&v307[8];
              uint64_t v143 = operations_research::Domain::Min((operations_research::Domain *)&v310, v142);
              uint64_t v144 = 0;
              unint64_t v145 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v143)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v143));
              unint64_t v146 = v141[1];
              unint64_t v147 = (v146 >> 12) ^ (v145 >> 7);
              uint64_t v148 = v141[4];
              while (1)
              {
                unint64_t v149 = v147 & v148;
                uint64_t v150 = *(void *)(v146 + v149);
                unint64_t v151 = ((v150 ^ (0x101010101010101 * (v145 & 0x7F))) - 0x101010101010101) & ~(v150 ^ (0x101010101010101 * (v145 & 0x7F))) & 0x8080808080808080;
                if (v151) {
                  break;
                }
LABEL_142:
                if ((v150 & (~v150 << 6) & 0x8080808080808080) != 0)
                {
                  *(void *)(v141[2]
                            + 8
                            * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(v141 + 1, v145)) = v143;
                  goto LABEL_145;
                }
                v144 += 8;
                unint64_t v147 = v144 + v149;
              }
              while (*(void *)(v141[2] + 8 * ((v149 + (__clz(__rbit64(v151)) >> 3)) & v148)) != v143)
              {
                v151 &= v151 - 1;
                if (!v151) {
                  goto LABEL_142;
                }
              }
            }
          }
        }
LABEL_145:
        if (v310)
        {
          operator delete(v311);
          unint64_t v19 = v303;
          if ((v312 & 1) == 0)
          {
LABEL_147:
            if (v313) {
              goto LABEL_151;
            }
            goto LABEL_10;
          }
        }
        else
        {
          unint64_t v19 = v303;
          if ((v312 & 1) == 0) {
            goto LABEL_147;
          }
        }
        operator delete(*((void **)&v312 + 1));
        if (v313) {
LABEL_151:
        }
          operator delete(*(void **)v314);
LABEL_10:
        v15 += 8;
        if (v15 == v19) {
          goto LABEL_153;
        }
      }
    }
    unint64_t v18 = 0;
    uint64_t v17 = 0;
LABEL_153:
    unint64_t v152 = (uint64_t)(v18 - (void)v17) / 24;
    unint64_t v153 = 126 - 2 * __clz(v152);
    if ((char *)v18 == v17) {
      uint64_t v154 = 0;
    }
    else {
      uint64_t v154 = v153;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>((unint64_t)v17, v18, v154, 1);
    uint64_t v285 = v17;
    if (v152 >= 2)
    {
      int v294 = 0;
      uint64_t v304 = (uint64_t *)((char *)this + 120);
      unint64_t v155 = v152 - 1;
      unint64_t v3 = (unint64_t)(v17 + 24);
      do
      {
        if (*(_DWORD *)(v3 - 16) == (*(_DWORD *)(v3 + 8) ^ 1))
        {
          int v156 = *(_DWORD *)(v3 - 4);
          *(void *)uint64_t v307 = *(void *)(v3 - 12);
          *(_DWORD *)&v307[8] = v156;
          uint64_t v157 = *(void *)(v8 + 40);
          if (*(uint64_t *)&v307[4] > *(void *)(v157 + 12 * *(int *)v307))
          {
            int v158 = *(_DWORD *)(v3 - 4);
            *(void *)uint64_t v307 = *(void *)(v3 - 12);
            *(_DWORD *)&v307[8] = v158;
            if (*(uint64_t *)&v307[4] <= -*(void *)(v157 + 12 * (*(_DWORD *)v307 ^ 1)))
            {
              int v159 = *(_DWORD *)(v3 + 20);
              *(void *)uint64_t v307 = *(void *)(v3 + 12);
              *(_DWORD *)&v307[8] = v159;
              if (*(uint64_t *)&v307[4] > *(void *)(v157 + 12 * *(int *)v307))
              {
                int v160 = *(_DWORD *)(v3 + 20);
                *(void *)uint64_t v307 = *(void *)(v3 + 12);
                *(_DWORD *)&v307[8] = v160;
                if (*(uint64_t *)&v307[4] <= -*(void *)(v157 + 12 * (*(_DWORD *)v307 ^ 1)))
                {
                  unint64_t v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 - 4);
                  operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)v301, *(const char **)(v3 - 12), v15, (uint64_t)v307);
                  a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 + 20);
                  operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)v301, *(const char **)(v3 + 12), a2, (uint64_t)&v313);
                  *(void *)&long long v312 = *(void *)&v314[4];
                  DWORD2(v312) = v315;
                  if (*(_DWORD *)v307 == *(_DWORD *)&v314[4] && *(void *)&v307[4] == *(void *)((char *)&v312 + 4))
                  {
                    unint64_t v302 = v302 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3 - 4);
                    operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v301, (const char *)*(unsigned int *)(v3 - 16), *(const char **)(v3 - 12), *(_DWORD *)(v3 - 4));
                    unint64_t v161 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v304, (uint64_t *)(v3 - 24));
                    if (v162) {
                      *(void *)(*((void *)this + 16) + 8 * v161) = *(void *)(v3 - 24);
                    }
                    unint64_t v163 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v304, (uint64_t *)v3);
                    ++v294;
                    if (v164) {
                      *(void *)(*((void *)this + 16) + 8 * v163) = *(void *)v3;
                    }
                  }
                }
              }
            }
          }
        }
        v3 += 24;
        --v155;
      }
      while (v155);
    }
    if ((char *)v18 != v17)
    {
      int v305 = 0;
      unint64_t v165 = (unsigned int *)v17;
      while (2)
      {
        unint64_t v171 = v18;
        uint64_t v172 = 0;
        uint64_t v173 = *(void *)v165;
        uint64_t v174 = v165[2];
        unint64_t v175 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v165)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + *(void *)v165)))
             + *(void *)v165;
        unint64_t v176 = ((v175 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v175);
        unint64_t v177 = *((void *)this + 15);
        unint64_t v178 = v176 >> 7;
        unint64_t v179 = (v176 >> 7) ^ (v177 >> 12);
        uint64_t v180 = *((void *)this + 18);
        uint64_t v181 = 0x101010101010101 * (v176 & 0x7F);
        while (1)
        {
          unint64_t v182 = v179 & v180;
          uint64_t v183 = *(void *)(v177 + v182);
          unint64_t v184 = ((v183 ^ v181) - 0x101010101010101) & ~(v183 ^ v181) & 0x8080808080808080;
          if (v184) {
            break;
          }
LABEL_182:
          if ((v183 & (~v183 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_185;
          }
          v172 += 8;
          unint64_t v179 = v172 + v182;
        }
        while (1)
        {
          unint64_t v185 = (v182 + (__clz(__rbit64(v184)) >> 3)) & v180;
          if (*(void *)(*((void *)this + 16) + 8 * v185) == v173) {
            break;
          }
          v184 &= v184 - 1;
          if (!v184) {
            goto LABEL_182;
          }
        }
        if (v185 != v180)
        {
          unint64_t v18 = v171;
          goto LABEL_191;
        }
LABEL_185:
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v165[5];
        unint64_t AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v301, *(const char **)(v165 + 3), v3);
        uint64_t v326 = (void (**)(void **))&unk_26F0BF9F8;
        unint64_t v327 = v174 | (AssociatedLiteral << 32);
        uint64_t v328 = (void **)&v326;
        uint64_t v187 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v300);
        operations_research::sat::SatSolver::AddBinaryClause(v187, v327 ^ 1, SHIDWORD(v327));
        if (v328 == (void **)&v326)
        {
          v326[4]((void **)&v326);
          if (*(unsigned char *)(v297 + 496)) {
            goto LABEL_295;
          }
        }
        else
        {
          if (v328) {
            (*((void (**)(void))*v328 + 5))();
          }
          if (*(unsigned char *)(v297 + 496)) {
            goto LABEL_295;
          }
        }
        uint64_t v188 = 0;
        ++v305;
        unint64_t v189 = *((void *)this + 15);
        unint64_t v190 = v178 ^ (v189 >> 12);
        uint64_t v191 = *((void *)this + 18);
        while (1)
        {
          unint64_t v192 = v190 & v191;
          uint64_t v193 = *(void *)(v189 + v192);
          unint64_t v194 = ((v193 ^ v181) - 0x101010101010101) & ~(v193 ^ v181) & 0x8080808080808080;
          if (v194) {
            break;
          }
LABEL_198:
          if ((v193 & (~v193 << 6) & 0x8080808080808080) != 0)
          {
            *(void *)(*((void *)this + 16)
                      + 8
                      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 15, v176)) = v173;
            goto LABEL_201;
          }
          v188 += 8;
          unint64_t v190 = v188 + v192;
        }
        while (*(void *)(*((void *)this + 16) + 8 * ((v192 + (__clz(__rbit64(v194)) >> 3)) & v191)) != v173)
        {
          v194 &= v194 - 1;
          if (!v194) {
            goto LABEL_198;
          }
        }
LABEL_201:
        uint64_t v169 = 0;
        unint64_t v195 = *((void *)this + 21);
        unint64_t v170 = v178 ^ (v195 >> 12);
        uint64_t v196 = *((void *)this + 24);
        unint64_t v18 = v171;
        while (1)
        {
          unint64_t v166 = v170 & v196;
          uint64_t v167 = *(void *)(v195 + v166);
          unint64_t v168 = ((v167 ^ v181) - 0x101010101010101) & ~(v167 ^ v181) & 0x8080808080808080;
          if (v168) {
            break;
          }
LABEL_175:
          if ((v167 & (~v167 << 6) & 0x8080808080808080) != 0)
          {
            *(void *)(*((void *)this + 22)
                      + 8
                      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 21, v176)) = v173;
            goto LABEL_191;
          }
          v169 += 8;
          unint64_t v170 = v169 + v166;
        }
        while (*(void *)(*((void *)this + 22) + 8 * ((v166 + (__clz(__rbit64(v168)) >> 3)) & v196)) != v173)
        {
          v168 &= v168 - 1;
          if (!v168) {
            goto LABEL_175;
          }
        }
LABEL_191:
        v165 += 6;
        if (v165 != (unsigned int *)v18) {
          continue;
        }
        break;
      }
      if (*_MergedGlobals_6[0] >= 1
        && (_MergedGlobals_6[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)_MergedGlobals_6, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 423);
        google::LogMessage::stream((google::LogMessage *)v307);
        int v197 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" literals associated to VAR >= value, and ", 42);
        int v198 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)" half-associations.", 19);
        google::LogMessage::~LogMessage((google::LogMessage *)v307);
      }
    }
    long long v289 = v317;
    if (v318 != v317)
    {
      uint64_t v199 = 0;
      uint64_t v276 = 0;
      int v306 = 0;
      int v295 = 0;
      int v200 = 0;
      unsigned int v299 = (uint64_t *)((char *)this + 120);
      unint64_t v201 = (v318 - v317) / 24;
      if (v201 <= 1) {
        unint64_t v201 = 1;
      }
      unint64_t v287 = v201;
      do
      {
        std::vector<int>::pointer v202 = (unint64_t *)&v289[24 * v199];
        unint64_t v203 = v202[1];
        unint64_t v204 = 126 - 2 * __clz((uint64_t)(v203 - *v202) >> 5);
        if (v203 == *v202) {
          uint64_t v205 = 0;
        }
        else {
          uint64_t v205 = v204;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(*v202, v203, v205, 1);
        unint64_t v207 = *v202;
        unint64_t v206 = v202[1];
        if (*v202 != v206)
        {
          *(void *)uint64_t v307 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_OWORD *)&v307[8] = 0u;
          long long v308 = 0u;
          uint64_t v309 = 0;
          unint64_t v208 = *v202;
          unint64_t v209 = v202[1];
          if (v209 - *v202 >= 0x21)
          {
            unint64_t v291 = v206;
            uint64_t v210 = 0;
            unint64_t v211 = 1;
            do
            {
              unint64_t v218 = v208 + 32 * v210;
              uint64_t v219 = *(void *)(v218 + 16);
              unint64_t v220 = v208 + 32 * v211;
              if (v219 == *(void *)(v220 + 16))
              {
                uint64_t v221 = *(unsigned int *)(v220 + 8);
                if (*(_DWORD *)(v218 + 8) == (v221 ^ 1)
                  && *(unsigned char *)(v208 + 32 * v210 + 24)
                  && !*(unsigned char *)(v208 + 32 * v211 + 24))
                {
                  operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v301, (const char *)(v221 ^ 1), *(_DWORD *)(*(void *)this + 4 * v199), v219);
                  uint64_t v222 = (uint64_t *)(*v202 + 32 * v210);
                  unint64_t v223 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v299, v222);
                  if (v224) {
                    *(void *)(*((void *)this + 16) + 8 * v223) = *v222;
                  }
                  uint64_t v225 = (uint64_t *)(*v202 + 32 * v211);
                  unint64_t v226 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(v299, v225);
                  if (v227) {
                    *(void *)(*((void *)this + 16) + 8 * v226) = *v225;
                  }
                  uint64_t v215 = 0;
                  unint64_t v208 = *v202;
                  uint64_t v228 = *v202 + 32 * v210;
                  uint64_t v231 = *(void *)(v228 + 16);
                  uint64_t v230 = (void *)(v228 + 16);
                  uint64_t v229 = v231;
                  ++v295;
                  unint64_t v232 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v231)
                         * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                            * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                             + v231));
                  for (unint64_t i = (v232 >> 7) ^ (*(void *)v307 >> 12); ; unint64_t i = v215 + v212)
                  {
                    unint64_t v212 = i & v308;
                    uint64_t v213 = *(void *)(*(void *)v307 + v212);
                    unint64_t v214 = ((v213 ^ (0x101010101010101 * (v232 & 0x7F))) - 0x101010101010101) & ~(v213 ^ (0x101010101010101 * (v232 & 0x7F))) & 0x8080808080808080;
                    if (v214) {
                      break;
                    }
LABEL_221:
                    if ((v213 & (~v213 << 6) & 0x8080808080808080) != 0)
                    {
                      unint64_t v217 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v307, v232);
                      *(void *)(*(void *)&v307[8] + 8 * v217) = *v230;
                      unint64_t v208 = *v202;
                      goto LABEL_228;
                    }
                    v215 += 8;
                  }
                  while (*(void *)(*(void *)&v307[8] + 8 * ((v212 + (__clz(__rbit64(v214)) >> 3)) & v308)) != v229)
                  {
                    v214 &= v214 - 1;
                    if (!v214) {
                      goto LABEL_221;
                    }
                  }
                }
              }
LABEL_228:
              ++v210;
              ++v211;
              unint64_t v209 = v202[1];
            }
            while (v211 < (uint64_t)(v209 - v208) >> 5);
            unint64_t v206 = v291;
          }
          int v233 = *(unsigned __int8 *)(v297 + 496);
          if (!*(unsigned char *)(v297 + 496))
          {
            int v277 = *(unsigned __int8 *)(v297 + 496);
            unint64_t v292 = v206;
            unint64_t v280 = v207;
            int v282 = v200;
            while (v208 != v209)
            {
              uint64_t v239 = 0;
              uint64_t v240 = *(void *)v208;
              uint64_t v241 = *(unsigned int *)(v208 + 8);
              int v242 = *(unsigned __int8 *)(v208 + 24);
              unint64_t v243 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v208)
                      * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                         * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                          + *(void *)v208)))
                   + *(void *)v208;
              unint64_t v244 = ((v243 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v243);
              unint64_t v245 = *((void *)this + 15);
              unint64_t v246 = v244 >> 7;
              unint64_t v247 = (v244 >> 7) ^ (v245 >> 12);
              uint64_t v248 = *((void *)this + 18);
              uint64_t v249 = 0x101010101010101 * (v244 & 0x7F);
              while (1)
              {
                unint64_t v250 = v247 & v248;
                uint64_t v251 = *(void *)(v245 + v250);
                unint64_t v252 = ((v251 ^ v249) - 0x101010101010101) & ~(v251 ^ v249) & 0x8080808080808080;
                if (v252) {
                  break;
                }
LABEL_255:
                if ((v251 & (~v251 << 6) & 0x8080808080808080) != 0) {
                  goto LABEL_258;
                }
                v239 += 8;
                unint64_t v247 = v239 + v250;
              }
              while (1)
              {
                unint64_t v253 = (v250 + (__clz(__rbit64(v252)) >> 3)) & v248;
                if (*(void *)(*((void *)this + 16) + 8 * v253) == v240) {
                  break;
                }
                v252 &= v252 - 1;
                if (!v252) {
                  goto LABEL_255;
                }
              }
              if (v253 == v248)
              {
LABEL_258:
                unint64_t LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality((uint64_t)v301, *(_DWORD *)(*(void *)this + 4 * v199), *(void *)(v208 + 16));
                if (v242)
                {
                  unint64_t v323 = (void (**)(void **))&unk_26F0BF9F8;
                  unint64_t v324 = v241 | (LiteralAssociatedToEquality << 32);
                  unint64_t v325 = (void **)&v323;
                  uint64_t v255 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v300);
                  operations_research::sat::SatSolver::AddBinaryClause(v255, v324 ^ 1, SHIDWORD(v324));
                  uint64_t v256 = v325;
                  if (v325 == (void **)&v323)
                  {
                    v323[4]((void **)&v323);
                    goto LABEL_265;
                  }
LABEL_262:
                  if (v256) {
                    (*((void (**)(void **))*v256 + 5))(v256);
                  }
                }
                else
                {
                  unint64_t v320 = (void (**)(void **))&unk_26F0BF9F8;
                  unint64_t v321 = v241 | ((unint64_t)(LiteralAssociatedToEquality ^ 1) << 32);
                  uint64_t v322 = (void **)&v320;
                  uint64_t v257 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v300);
                  operations_research::sat::SatSolver::AddBinaryClause(v257, v321 ^ 1, SHIDWORD(v321));
                  uint64_t v256 = v322;
                  if (v322 != (void **)&v320) {
                    goto LABEL_262;
                  }
                  v320[4]((void **)&v320);
                }
LABEL_265:
                uint64_t v258 = 0;
                ++v306;
                unint64_t v259 = *((void *)this + 15);
                unint64_t v260 = v246 ^ (v259 >> 12);
                uint64_t v261 = *((void *)this + 18);
                while (1)
                {
                  unint64_t v262 = v260 & v261;
                  uint64_t v263 = *(void *)(v259 + v262);
                  unint64_t v264 = ((v263 ^ v249) - 0x101010101010101) & ~(v263 ^ v249) & 0x8080808080808080;
                  if (v264) {
                    break;
                  }
LABEL_269:
                  if ((v263 & (~v263 << 6) & 0x8080808080808080) != 0)
                  {
                    *(void *)(*((void *)this + 16)
                              + 8
                              * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(v299, v244)) = v240;
                    goto LABEL_272;
                  }
                  v258 += 8;
                  unint64_t v260 = v258 + v262;
                }
                while (*(void *)(*((void *)this + 16) + 8 * ((v262 + (__clz(__rbit64(v264)) >> 3)) & v261)) != v240)
                {
                  v264 &= v264 - 1;
                  if (!v264) {
                    goto LABEL_269;
                  }
                }
LABEL_272:
                uint64_t v237 = 0;
                unint64_t v265 = *((void *)this + 21);
                unint64_t v238 = v246 ^ (v265 >> 12);
                uint64_t v266 = *((void *)this + 24);
                while (1)
                {
                  unint64_t v234 = v238 & v266;
                  uint64_t v235 = *(void *)(v265 + v234);
                  unint64_t v236 = ((v235 ^ v249) - 0x101010101010101) & ~(v235 ^ v249) & 0x8080808080808080;
                  if (v236) {
                    break;
                  }
LABEL_246:
                  if ((v235 & (~v235 << 6) & 0x8080808080808080) != 0)
                  {
                    *(void *)(*((void *)this + 22)
                              + 8
                              * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert((uint64_t *)this + 21, v244)) = v240;
                    goto LABEL_249;
                  }
                  v237 += 8;
                  unint64_t v238 = v237 + v234;
                }
                while (*(void *)(*((void *)this + 22) + 8 * ((v234 + (__clz(__rbit64(v236)) >> 3)) & v266)) != v240)
                {
                  v236 &= v236 - 1;
                  if (!v236) {
                    goto LABEL_246;
                  }
                }
              }
LABEL_249:
              v208 += 32;
            }
            if (*off_26AECFE50[0] <= 0)
            {
              int v200 = v282;
              unint64_t v207 = v280;
              unint64_t v206 = v292;
              int v233 = v277;
            }
            else
            {
              int v200 = v282;
              unint64_t v207 = v280;
              unint64_t v206 = v292;
              int v233 = v277;
              if (off_26AECFE50[0] != &google::kLogSiteUninitialized
                || google::InitVLOG3__((google *)off_26AECFE50, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1))
              {
                if (operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v301, *(_DWORD *)(*(void *)this + 4 * v199)))
                {
                  LODWORD(v276) = v276 + 1;
                }
                else
                {
                  ++HIDWORD(v276);
                }
              }
            }
          }
          if ((void)v308)
          {
            operator delete(*(void **)v307);
            *(void *)uint64_t v307 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            uint64_t v309 = 0;
            *(void *)&v307[16] = 0;
            *(void *)&long long v308 = 0;
            *(void *)&v307[8] = 0;
          }
          if (*((void *)&v308 + 1)) {
            absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v308 + 1));
          }
          if (v233) {
            goto LABEL_295;
          }
          v200 += (v206 - v207) >> 5;
        }
        ++v199;
      }
      while (v199 != v287);
      if (v200 >= 1
        && *off_26AECFE58[0] >= 1
        && (off_26AECFE58[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFE58, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 495);
        google::LogMessage::stream((google::LogMessage *)v307);
        unint64_t v267 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)" literals associated to VAR == value, and ", 42);
        int v268 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)" half-associations.", 19);
        google::LogMessage::~LogMessage((google::LogMessage *)v307);
      }
      if ((int)v276 >= 1
        && *off_26AECFE60[0] >= 1
        && (off_26AECFE60[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFE60, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 499);
        std::string::size_type v269 = (void *)google::LogMessage::stream((google::LogMessage *)v307);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)"num_fully_encoded_variables: ", 29);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v307);
      }
      if (SHIDWORD(v276) >= 1
        && *off_26AECFE68[0] >= 1
        && (off_26AECFE68[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFE68, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 502);
        uint64_t v270 = (void *)google::LogMessage::stream((google::LogMessage *)v307);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v270, (uint64_t)"num_partially_encoded_variables: ", 33);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v307);
      }
    }
LABEL_295:
    if (v285) {
      operator delete(v285);
    }
    uint64_t v271 = v317;
    if (v317)
    {
      uint64_t v272 = v318;
      if (v318 != v317)
      {
        unint64_t v273 = v318;
        do
        {
          unint64_t v275 = (void *)*((void *)v273 - 3);
          v273 -= 24;
          uint64_t v274 = v275;
          if (v275)
          {
            *((void *)v272 - 2) = v274;
            operator delete(v274);
          }
          uint64_t v272 = v273;
        }
        while (v273 != v271);
      }
      operator delete(v271);
    }
  }
}

void sub_23CC1D6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34,char a35,void *a36,uint64_t a37,char a38,void *a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d) {
      int v5 = v1;
    }
    else {
      int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    unint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::ImpliedBounds>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::ImpliedBounds>();
  }
  return v2[5];
}

void operations_research::sat::CpModelMapping::PropagateEncodingFromEquivalenceRelations(operations_research::sat::CpModelMapping *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v60 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  uint64_t v59 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  uint64_t v7 = *((void *)a2 + 7);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((int *)a2 + 12);
  if (!v9) {
    return;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  size_t v12 = &v62;
  __n128 v13 = &v8[v9];
  do
  {
    uint64_t v14 = *v8;
    if (!*(_DWORD *)(*v8 + 16) && *(_DWORD *)(v14 + 60) == 12)
    {
      uint64_t v15 = *(void *)(v14 + 48);
      if (*(_DWORD *)(v15 + 16) == 2 && *(_DWORD *)(v15 + 64) == 2)
      {
        uint64_t v16 = *(uint64_t **)(v15 + 72);
        uint64_t v17 = *v16;
        if (*v16 == v16[1])
        {
          unint64_t v18 = *(int **)(v15 + 24);
          int v19 = *v18;
          int v20 = v18[1];
          int v21 = ~v19 <= v19 ? v19 : ~v19;
          int v22 = ~v20 <= v20 ? v20 : ~v20;
          unsigned int v23 = *(uint64_t **)(v15 + 48);
          uint64_t v25 = *v23;
          uint64_t v24 = v23[1];
          uint64_t v26 = v25 >= 0 ? v25 : -v25;
          uint64_t v27 = v24 >= 0 ? v24 : -v24;
          BOOL v28 = !v25 || v24 == 0;
          if (!v28)
          {
            uint64_t v54 = this;
            uint64_t v55 = v11;
            int v29 = *(_DWORD *)(*(void *)this + 4 * v22) ^ (v20 >> 31);
            signed int v30 = *(_DWORD *)(*(void *)this + 4 * v21) ^ (v19 >> 31) ^ ((unint64_t)v25 >> 63);
            int v56 = v30;
            int v57 = v29 ^ ((unint64_t)v24 >> 63);
            uint64_t v31 = v60[4];
            if (v30 >= (int)(-1431655765 * ((unint64_t)(v60[5] - v31) >> 3)))
            {
              *size_t v12 = 0;
              v12[1] = 0;
              int v33 = v12;
              long long v61 = (char *)v12;
            }
            else
            {
              *size_t v12 = 0;
              v12[1] = 0;
              long long v61 = (char *)v12;
              std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v61, *(void **)(v31 + 24 * v30), (void *)(v31 + 24 * v30 + 8));
              unint64_t v32 = v61;
              int v33 = v12;
              if (v61 != (char *)v12)
              {
                do
                {
                  uint64_t v34 = (const char *)*((unsigned int *)v32 + 9);
                  if ((v17 - *(void *)(v32 + 28) * v26) / v27
                     - ((v17 - *(void *)(v32 + 28) * v26) / v27 * v27 > v17 - *(void *)(v32 + 28) * v26) >= (uint64_t)0x8000000000000002)
                    uint64_t v35 = ((v17 - *(void *)(v32 + 28) * v26) / v27 * v27 > v17 - *(void *)(v32 + 28) * v26)
                        - (v17 - *(void *)(v32 + 28) * v26) / v27;
                  else {
                    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  LODWORD(v63[0]) = v57 ^ 1;
                  *(const char **)((char *)v63 + 4) = (const char *)v35;
                  unint64_t v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v35);
                  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v60, v34, v63[0], v3);
                  double v36 = (char *)*((void *)v32 + 1);
                  if (v36)
                  {
                    do
                    {
                      uint64_t v37 = v36;
                      double v36 = *(char **)v36;
                    }
                    while (v36);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v37 = (char *)*((void *)v32 + 2);
                      BOOL v28 = *(void *)v37 == (void)v32;
                      unint64_t v32 = v37;
                    }
                    while (!v28);
                  }
                  ++v10;
                  unint64_t v32 = v37;
                }
                while (v37 != (char *)v12);
              }
            }
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v61, v62);
            uint64_t v38 = v60[4];
            unint64_t v58 = v33;
            if (v57 >= (int)(-1431655765 * ((unint64_t)(v60[5] - v38) >> 3)))
            {
              _OWORD *v33 = 0;
              v33[1] = 0;
              long long v61 = (char *)v33;
            }
            else
            {
              _OWORD *v33 = 0;
              v33[1] = 0;
              long long v61 = (char *)v33;
              std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v61, *(void **)(v38 + 24 * v57), (void *)(v38 + 24 * v57 + 8));
              unsigned int v39 = v61;
              if (v61 != (char *)v33)
              {
                uint64_t v11 = v55;
                do
                {
                  int v40 = (const char *)*((unsigned int *)v39 + 9);
                  if ((v17 - *(void *)(v39 + 28) * v27) / v26
                     - ((v17 - *(void *)(v39 + 28) * v27) / v26 * v26 > v17 - *(void *)(v39 + 28) * v27) >= (uint64_t)0x8000000000000002)
                    uint64_t v41 = ((v17 - *(void *)(v39 + 28) * v27) / v26 * v26 > v17 - *(void *)(v39 + 28) * v27)
                        - (v17 - *(void *)(v39 + 28) * v27) / v26;
                  else {
                    uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  LODWORD(v63[0]) = v56 ^ 1;
                  *(const char **)((char *)v63 + 4) = (const char *)v41;
                  unint64_t v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v41);
                  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)v60, v40, v63[0], v3);
                  unint64_t v42 = (char *)*((void *)v39 + 1);
                  if (v42)
                  {
                    do
                    {
                      unint64_t v43 = v42;
                      unint64_t v42 = *(char **)v42;
                    }
                    while (v42);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v43 = (char *)*((void *)v39 + 2);
                      BOOL v28 = *(void *)v43 == (void)v39;
                      unsigned int v39 = v43;
                    }
                    while (!v28);
                  }
                  ++v10;
                  unsigned int v39 = v43;
                }
                while (v43 != (char *)v58);
LABEL_58:
                std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v61, v62);
                operations_research::sat::IntegerEncoder::PartialDomainEncoding(v60, v56, &v61);
                uint64_t v45 = v61;
                unint64_t v44 = v62;
                if (v61 == v62)
                {
                  if (!v61) {
                    goto LABEL_61;
                  }
                }
                else
                {
                  do
                  {
                    uint64_t v48 = (const char *)*((unsigned int *)v45 + 2);
                    uint64_t v49 = v17 - *(void *)v45 * v26;
                    if (v49 % v27)
                    {
                      operations_research::sat::SatSolver::AddUnitClause(v59, v48 ^ 1);
                      ++v11;
                    }
                    else
                    {
                      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v60, v48, v57, v49 / v27);
                      ++v10;
                    }
                    v45 += 12;
                  }
                  while (v45 != v44);
                  uint64_t v45 = v61;
                  if (!v61)
                  {
LABEL_61:
                    operations_research::sat::IntegerEncoder::PartialDomainEncoding(v60, v57, &v61);
                    uint64_t v46 = v61;
                    unint64_t v47 = v62;
                    if (v61 == v62)
                    {
                      size_t v12 = v58;
                      if (!v61) {
                        goto LABEL_6;
                      }
                    }
                    else
                    {
                      do
                      {
                        double v50 = (const char *)*((unsigned int *)v46 + 2);
                        uint64_t v51 = v17 - *(void *)v46 * v27;
                        if (v51 % v26)
                        {
                          operations_research::sat::SatSolver::AddUnitClause(v59, v50 ^ 1);
                          ++v11;
                        }
                        else
                        {
                          operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue((uint64_t)v60, v50, v56, v51 / v26);
                          ++v10;
                        }
                        v46 += 12;
                      }
                      while (v46 != v47);
                      uint64_t v46 = v61;
                      size_t v12 = v58;
                      if (!v61) {
                        goto LABEL_6;
                      }
                    }
                    unint64_t v62 = v46;
                    operator delete(v46);
LABEL_6:
                    this = v54;
                    goto LABEL_7;
                  }
                }
                unint64_t v62 = v45;
                operator delete(v45);
                goto LABEL_61;
              }
            }
            uint64_t v11 = v55;
            goto LABEL_58;
          }
        }
      }
    }
LABEL_7:
    ++v8;
  }
  while (v8 != v13);
  if (v10 > 0
    && *off_26AECFE70[0] >= 1
    && (off_26AECFE70[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFE70, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 581);
    unsigned int v52 = (void *)google::LogMessage::stream((google::LogMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Num associations from equivalences = ", 37);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
  if (v11 >= 1
    && *off_26AECFE78[0] >= 1
    && (off_26AECFE78[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFE78, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 584);
    int v53 = (void *)google::LogMessage::stream((google::LogMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Num literals set to false from equivalences = ", 46);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
}

void sub_23CC1DFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_23CC1DFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC1E010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CC1E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_23CC1E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_23CC1E054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelMapping *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  if (*(unsigned char *)(v6 + 502) && !*(unsigned char *)(v6 + 129))
  {
    unint64_t v7 = *((int *)a2 + 6);
    unint64_t v95 = 0;
    unint64_t v96 = 0;
    unint64_t v97 = 0;
    if (v7)
    {
      if ((v7 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (v7 - 1) >> 6;
      uint64_t v9 = operator new(8 * (v8 + 1));
      uint64_t v10 = v9;
      unint64_t v96 = v7;
      unint64_t v97 = v8 + 1;
      unint64_t v95 = v9;
      if (v7 >= 0x41) {
        unint64_t v11 = (v7 - 1) >> 6;
      }
      else {
        unint64_t v11 = 0;
      }
      v9[v11] = 0;
      if (v7 >= 0x40) {
        bzero(v9, 8 * (v7 >> 6));
      }
      if ((v7 & 0x3F) != 0) {
        v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = *((void *)a2 + 15);
    BOOL v13 = a2 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
       || v12 == 0;
    if (!v13)
    {
      uint64_t v14 = *(int *)(v12 + 16);
      if (v14)
      {
        uint64_t v15 = *(int **)(v12 + 24);
        uint64_t v16 = 4 * v14;
        do
        {
          int v18 = *v15++;
          int v17 = v18;
          if (~v18 > v18) {
            int v17 = ~v17;
          }
          *(void *)((char *)v10 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          v16 -= 4;
        }
        while (v16);
      }
    }
    unint64_t v86 = this;
    std::vector<std::vector<int>>::vector(&__p, v7);
    char v91 = 0;
    uint64_t v92 = 0;
    uint64_t v90 = &v91;
    if (*((int *)a2 + 12) >= 1)
    {
      uint64_t v19 = 0;
      unint64_t v87 = a2;
      while (1)
      {
        uint64_t v20 = *(void *)(*((void *)a2 + 7) + 8 * v19 + 8);
        if (!*(_DWORD *)(v20 + 16)) {
          break;
        }
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v90, v91);
        char v91 = 0;
        uint64_t v92 = 0;
        uint64_t v90 = &v91;
        uint64_t v21 = *(int *)(v20 + 16);
        if (v21)
        {
          int v22 = *(int **)(v20 + 24);
          unsigned int v23 = &v22[v21];
          while (1)
          {
            uint64_t v24 = v91;
            uint64_t v25 = &v91;
            if (v90 != &v91)
            {
              uint64_t v26 = v91;
              uint64_t v27 = &v91;
              if (v91)
              {
                do
                {
                  uint64_t v25 = (uint64_t **)v26;
                  uint64_t v26 = (uint64_t *)v26[1];
                }
                while (v26);
              }
              else
              {
                do
                {
                  uint64_t v25 = (uint64_t **)v27[2];
                  BOOL v13 = *v25 == (uint64_t *)v27;
                  uint64_t v27 = v25;
                }
                while (v13);
              }
              int v28 = *v22;
              if (*((_DWORD *)v25 + 7) >= *v22) {
                break;
              }
            }
            if (v91) {
              int v29 = v25;
            }
            else {
              int v29 = &v91;
            }
            signed int v30 = &v90;
            if (v91)
            {
              signed int v30 = (uint64_t ***)v25;
              uint64_t v31 = v25 + 1;
            }
            else
            {
              uint64_t v31 = &v91;
            }
            if (!v30[1]) {
              goto LABEL_52;
            }
LABEL_30:
            if (++v22 == v23) {
              goto LABEL_54;
            }
          }
          uint64_t v31 = &v91;
          int v29 = &v91;
          if (v91)
          {
            while (1)
            {
              while (1)
              {
                int v29 = (uint64_t **)v24;
                int v32 = *((_DWORD *)v24 + 7);
                if (v28 >= v32) {
                  break;
                }
                uint64_t v24 = *v29;
                uint64_t v31 = v29;
                if (!*v29) {
                  goto LABEL_52;
                }
              }
              if (v32 >= v28) {
                goto LABEL_30;
              }
              uint64_t v24 = v29[1];
              if (!v24)
              {
                uint64_t v31 = v29 + 1;
                break;
              }
            }
          }
LABEL_52:
          int v33 = operator new(0x20uLL);
          v33[7] = *v22;
          *(void *)int v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = v29;
          *uint64_t v31 = (uint64_t *)v33;
          if (*v90)
          {
            uint64_t v90 = (uint64_t **)*v90;
            int v33 = *v31;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v91, (uint64_t *)v33);
          ++v92;
          goto LABEL_30;
        }
LABEL_54:
        operations_research::sat::UsedVariables((operations_research::sat *)v20, &v88);
        uint64_t v35 = v88;
        uint64_t v34 = v89;
        if (v88 != v89)
        {
          double v36 = v95;
          do
          {
            unint64_t v37 = *v35;
            unint64_t v38 = v37 >> 6;
            uint64_t v39 = 1 << v37;
            int v40 = (std::vector<int> *)((char *)__p + 24 * (int)v37);
            if (((1 << v37) & v36[v37 >> 6]) != 0)
            {
              begiunint64_t n = v40->__begin_;
              unint64_t v42 = (char *)__p + 24 * (int)v37;
              uint64_t v45 = (int *)*((void *)v42 + 1);
              unint64_t v43 = v42 + 8;
              unint64_t v44 = v45;
              if (v40->__begin_ == v45 || (uint64_t v46 = v91) == 0)
              {
                int v47 = 0;
              }
              else
              {
                int v47 = 0;
                std::vector<int>::pointer v48 = v40->__begin_;
                do
                {
                  int v49 = *v48;
                  double v50 = &v91;
                  uint64_t v51 = v46;
                  do
                  {
                    unsigned int v52 = v51;
                    int v53 = v50;
                    int v54 = *((_DWORD *)v51 + 7);
                    if (v54 >= v49) {
                      double v50 = (uint64_t **)v51;
                    }
                    else {
                      ++v51;
                    }
                    uint64_t v51 = (uint64_t *)*v51;
                  }
                  while (v51);
                  if (v50 != &v91)
                  {
                    if (v54 < v49) {
                      unsigned int v52 = v53;
                    }
                    if (v49 >= v52[7]) {
                      begin[v47++] = v49;
                    }
                  }
                  ++v48;
                }
                while (v48 != v44);
              }
              unint64_t v55 = v44 - begin;
              if (v47 <= v55)
              {
                if (v47 < v55) {
                  *unint64_t v43 = &begin[v47];
                }
              }
              else
              {
                std::vector<int>::__append(v40, v47 - v55);
              }
            }
            else
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v40, *(char **)(v20 + 24), (char *)(*(void *)(v20 + 24) + 4 * *(int *)(v20 + 16)), *(int *)(v20 + 16));
            }
            v36[v38] |= v39;
            ++v35;
          }
          while (v35 != v34);
          a2 = v87;
          uint64_t v35 = v88;
        }
        if (v35)
        {
          uint64_t v89 = v35;
          int v56 = v35;
LABEL_24:
          operator delete(v56);
        }
LABEL_25:
        if (++v19 >= *((int *)a2 + 12)) {
          goto LABEL_86;
        }
      }
      operations_research::sat::UsedVariables(*(operations_research::sat **)(*((void *)a2 + 7) + 8 * v19 + 8), &v88);
      int v56 = v88;
      int v57 = v89;
      if (v88 != v89)
      {
        unint64_t v58 = (char *)v95;
        uint64_t v59 = __p;
        unint64_t v60 = v88;
        do
        {
          unint64_t v61 = *v60++;
          *(void *)&v58[(v61 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v61;
          v59[3 * (int)v61 + 1] = v59[3 * (int)v61];
        }
        while (v60 != v57);
      }
      if (!v56) {
        goto LABEL_25;
      }
      uint64_t v89 = v56;
      goto LABEL_24;
    }
LABEL_86:
    uint64_t v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
    if ((int)v7 >= 1)
    {
      uint64_t v63 = 0;
      int v64 = 0;
      uint64_t v65 = (int **)((char *)__p + 8);
      uint64_t v66 = *((void *)a2 + 4) + 8;
      do
      {
        uint64_t v67 = *(void *)(v66 + 8 * v63);
        long long v68 = *(void **)(v67 + 24);
        uint64_t v69 = v68[*(int *)(v67 + 16) - 1];
        if (*v68 != v69 && (*v68 || v69 != 1))
        {
          std::vector<int>::size_type v71 = *(v65 - 1);
          if (v71 != *v65)
          {
            ++v64;
            uint64_t v72 = *(int *)(*(void *)v86 + 4 * v63);
            int v73 = *v71;
            if (~v73 <= v73) {
              int v74 = v73;
            }
            else {
              int v74 = ~v73;
            }
            HIDWORD(v75) = *(_DWORD *)(*((void *)v86 + 6) + 4 * v74);
            LODWORD(v75) = v73;
            int v76 = (v75 >> 31) ^ 1;
            uint64_t v77 = *(void *)(v62 + 408);
            *(_DWORD *)(v77 + 4 * v72) = v76;
            *(_DWORD *)(v77 + 4 * (v72 ^ 1)) = v76;
          }
        }
        ++v63;
        v65 += 3;
      }
      while (v7 != v63);
    }
    if (*operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ > 1
      && (operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::CpModelMapping::DetectOptionalVariables(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v88, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 660);
      int v78 = (void *)google::LogMessage::stream((google::LogMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Auto-detected ", 14);
      unint64_t v79 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" optional variables.", 20);
      google::LogMessage::~LogMessage((google::LogMessage *)&v88);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v90, v91);
    uint64_t v80 = (char *)__p;
    if (__p)
    {
      unint64_t v81 = v94;
      uint64_t v82 = __p;
      if (v94 != __p)
      {
        double v83 = v94;
        do
        {
          int v85 = (void *)*((void *)v83 - 3);
          v83 -= 24;
          unint64_t v84 = v85;
          if (v85)
          {
            *((void *)v81 - 2) = v84;
            operator delete(v84);
          }
          unint64_t v81 = v83;
        }
        while (v83 != v80);
        uint64_t v82 = __p;
      }
      uint64_t v94 = v80;
      operator delete(v82);
    }
    if (v95) {
      operator delete(v95);
    }
  }
}

void sub_23CC1E6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d) {
      int v5 = v1;
    }
    else {
      int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    unint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CC1E8D8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C4095D8551FLL);
  _Unwind_Resume(a1);
}

void operations_research::sat::FullEncodingFixedPointComputer::ComputeFixedPoint(char **this)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((unsigned int *)*this + 12);
  uint64_t v3 = *((unsigned int *)*this + 6);
  LOBYTE(v94) = 0;
  uint64_t v90 = this + 15;
  std::vector<BOOL>::assign(this + 15, (int)v2, &v94);
  LOBYTE(v94) = 0;
  std::vector<BOOL>::assign(this + 18, (int)v2, &v94);
  if ((int)v2 >= 1)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      while (1)
      {
        int v5 = operations_research::sat::FullEncodingFixedPointComputer::ProcessConstraint((operations_research::sat::FullEncodingFixedPointComputer *)this, i);
        uint64_t v6 = this[15];
        unint64_t v7 = i >> 6;
        uint64_t v8 = 1 << i;
        if (v5) {
          break;
        }
        *(void *)&v6[8 * v7] &= ~v8;
        if (v2 == ++i) {
          goto LABEL_6;
        }
      }
      *(void *)&v6[8 * v7] |= v8;
    }
  }
LABEL_6:
  if ((int)v3 < 1) {
    goto LABEL_60;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  do
  {
    int v11 = *(_DWORD *)(*(void *)this[3] + 4 * v9);
    if (v11 != -1
      && *(void *)(*((void *)this[5] + 5) + 12 * v11) + *(void *)(*((void *)this[5] + 5) + 12 * (v11 ^ 1))
      && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)this[4], *(_DWORD *)(*(void *)this[3] + 4 * v9)))
    {
      uint64_t v13 = *(void *)(*((void *)*this + 4) + 8 * v9 + 8);
      operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(v13 + 24), *(int *)(v13 + 16), (unint64_t *)&v94, v12);
      unint64_t v15 = operations_research::Domain::Size((operations_research::Domain *)&v94);
      if ((uint64_t)v15 < 3)
      {
LABEL_51:
        if ((v94 & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = this[3];
        unint64_t v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v9)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v9));
        unint64_t v19 = *((void *)v17 + 27);
        unint64_t v87 = v18 >> 7;
        unint64_t v20 = (v18 >> 7) ^ (v19 >> 12);
        uint64_t v21 = *((void *)v17 + 30);
        uint64_t v22 = 0x101010101010101 * (v18 & 0x7F);
        int v89 = v10;
        while (1)
        {
          uint64_t v23 = v20 & v21;
          uint64_t v24 = *(void *)(v19 + v23);
          unint64_t v25 = ((v24 ^ v22) - 0x101010101010101) & ~(v24 ^ v22) & 0x8080808080808080;
          if (v25) {
            break;
          }
LABEL_17:
          if ((v24 & (~v24 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v26 = *((void *)v17 + 30);
            goto LABEL_20;
          }
          v16 += 8;
          unint64_t v20 = v16 + v23;
        }
        while (1)
        {
          unint64_t v26 = (v23 + (__clz(__rbit64(v25)) >> 3)) & v21;
          uint64_t v14 = (_DWORD *)(*((void *)v17 + 28) + 56 * v26);
          if (v9 == *v14) {
            break;
          }
          v25 &= v25 - 1;
          if (!v25) {
            goto LABEL_17;
          }
        }
LABEL_20:
        uint64_t v88 = v22;
        uint64_t v27 = (char **)(v17 + 264);
        if (v26 != v21) {
          uint64_t v27 = (char **)(v14 + 2);
        }
        int v28 = v27[1];
        int v29 = *v27;
        if (**v27 <= -2)
        {
          do
          {
            unint64_t v30 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            int v29 = (void *)((char *)v29 + v30);
            v28 += 8 * v30;
          }
          while (*(char *)v29 < -1);
        }
        uint64_t v31 = &v27[3][(void)*v27];
        if (v29 == (void *)v31)
        {
          int64_t v32 = 0;
        }
        else
        {
          int64_t v32 = 0;
          do
          {
            uint64_t v33 = *(int *)v28;
            if (v33 > operations_research::Domain::Min((operations_research::Domain *)&v94, (const char *)v22)
              && v33 < operations_research::Domain::Max((operations_research::Domain *)&v94, (const char *)v22))
            {
              v32 += operations_research::Domain::Contains((operations_research::Domain *)&v94, v33);
            }
            int v34 = *((char *)v29 + 1);
            int v29 = (void *)((char *)v29 + 1);
            v28 += 8;
            if (v34 <= -2)
            {
              do
              {
                unint64_t v35 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                int v29 = (void *)((char *)v29 + v35);
                v28 += 8 * v35;
              }
              while (*(char *)v29 < -1);
            }
          }
          while (v29 != (void *)v31);
        }
        uint64_t v36 = 0;
        unint64_t v37 = (unint64_t)this[21];
        unint64_t v38 = v87 ^ (v37 >> 12);
        uint64_t v39 = this[24];
        int v10 = v89;
        while (1)
        {
          unint64_t v40 = v38 & (unint64_t)v39;
          uint64_t v41 = *(void *)(v37 + v40);
          unint64_t v42 = ((v41 ^ v88) - 0x101010101010101) & ~(v41 ^ v88) & 0x8080808080808080;
          if (v42) {
            break;
          }
LABEL_38:
          if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_41;
          }
          v36 += 8;
          unint64_t v38 = v36 + v40;
        }
        while (1)
        {
          unint64_t v43 = (v40 + (__clz(__rbit64(v42)) >> 3)) & (unint64_t)v39;
          uint64_t v44 = (uint64_t)&this[22][56 * v43];
          if (v9 == *(_DWORD *)v44) {
            break;
          }
          v42 &= v42 - 1;
          if (!v42) {
            goto LABEL_38;
          }
        }
        if ((char *)v43 == v39)
        {
LABEL_41:
          int64_t v45 = 0;
          int64_t v46 = v15 >> 1;
          if (v32 >= (uint64_t)(v15 >> 1)) {
            goto LABEL_46;
          }
        }
        else
        {
          int64_t v45 = *(void *)(v44 + 24);
          int64_t v46 = v15 >> 1;
          if (v32 >= (uint64_t)(v15 >> 1)) {
            goto LABEL_46;
          }
        }
        if ((uint64_t)v15 <= 15 && v45 >= v46)
        {
LABEL_46:
          if (*off_26AECFE80[0] >= 3
            && (off_26AECFE80[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_26AECFE80, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 803);
            google::LogMessage::stream((google::LogMessage *)v91);
            google::protobuf::Message::ShortDebugString(&__p);
          }
          operations_research::sat::FullEncodingFixedPointComputer::FullyEncode((operations_research::sat::FullEncodingFixedPointComputer *)this, v9);
          int v10 = v89 + 1;
          goto LABEL_51;
        }
        if ((v94 & 1) == 0) {
          goto LABEL_8;
        }
      }
      operator delete(v95);
    }
LABEL_8:
    ++v9;
  }
  while (v9 != v3);
  if (v10 >= 1
    && *off_26AECFE88[0] > 1
    && (off_26AECFE88[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFE88, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v94, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 813);
    google::LogMessage::stream((google::LogMessage *)&v94);
    int v47 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" variables fully encoded after model introspection.", 51);
    google::LogMessage::~LogMessage((google::LogMessage *)&v94);
  }
LABEL_60:
  std::vector<int>::pointer v48 = this[12];
  if (this[13] != v48)
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    int v51 = -1;
    do
    {
      if (*(void *)&v48[v49] != *(void *)&v48[v49 + 8])
      {
        unsigned int v52 = v51 <= (int)v50 ? v50 : v51;
        signed int v53 = *(_DWORD *)(*(void *)this[3] + 4 * v52);
        if (!(*(void *)(*((void *)this[5] + 5) + 12 * v53)
             + *(void *)(*((void *)this[5] + 5) + 12 * (v53 ^ 1)))
          || operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)this[4], v53))
        {
          operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v50);
        }
      }
      ++v50;
      std::vector<int>::pointer v48 = this[12];
      v49 += 24;
      --v51;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((this[13] - v48) >> 3) > v50);
  }
  int v54 = this[9];
  unint64_t v55 = this[10];
  while (v54 != v55)
  {
    int v56 = *((_DWORD *)v55 - 1);
    v55 -= 4;
    this[10] = v55;
    uint64_t v57 = (uint64_t)&this[12][24 * v56];
    unint64_t v58 = *(int **)v57;
    uint64_t v59 = *(int **)(v57 + 8);
    if (*(int **)v57 != v59)
    {
      unint64_t v60 = *v90;
      do
      {
        unint64_t v63 = *v58;
        unint64_t v64 = v63 >> 6;
        uint64_t v65 = 1 << v63;
        if (((1 << v63) & *(void *)&v60[8 * (v63 >> 6)]) == 0)
        {
          uint64_t v66 = *(void *)(*((void *)*this + 7) + 8 * v63 + 8);
          int v67 = *v58;
          switch(*(_DWORD *)(v66 + 60))
          {
            case 0xC:
              operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear((uint64_t)this, v67);
              goto LABEL_78;
            case 0xE:
              int v68 = operations_research::sat::FullEncodingFixedPointComputer::ProcessElement((operations_research::sat::FullEncodingFixedPointComputer *)this, v67);
              unint64_t v60 = this[15];
              unint64_t v61 = (uint64_t *)&v60[8 * v64];
              if (v68) {
                goto LABEL_79;
              }
              uint64_t v62 = *v61 & ~v65;
              break;
            case 0x10:
              uint64_t v69 = *(void *)(v66 + 48);
              if (!*(unsigned char *)(v69 + 60))
              {
                uint64_t v70 = *(int *)(v69 + 16);
                if (v70)
                {
                  std::vector<int>::size_type v71 = *(int **)(v69 + 24);
                  uint64_t v72 = 4 * v70;
                  do
                  {
                    if (~*v71 <= *v71) {
                      int v82 = *v71;
                    }
                    else {
                      int v82 = ~*v71;
                    }
                    if (~v82 <= v82) {
                      int v83 = v82;
                    }
                    else {
                      int v83 = ~v82;
                    }
                    if (v82 != -1)
                    {
                      int v84 = *(_DWORD *)(*(void *)this[3] + 4 * v83) ^ (v82 >> 31);
                      if (*(void *)(*((void *)this[5] + 5) + 12 * v84)
                         + *(void *)(*((void *)this[5] + 5) + 12 * (v84 ^ 1)))
                      {
                        uint64_t v85 = (uint64_t)this[2];
                        uint64_t v94 = (void (**)(void **))&unk_26F0BD370;
                        LODWORD(v95) = v84;
                        unint64_t v96 = (unint64_t *)&v94;
                        unint64_t v86 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v85);
                        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v86, (signed int)v95))operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v86, (signed int)v95); {
                        operations_research::sat::IntegerEncoder::FullDomainEncoding(v86, (signed int)v95, (char **)&__p);
                        }
                        if (__p)
                        {
                          unint64_t v93 = __p;
                          operator delete(__p);
                        }
                        if (v96 == (unint64_t *)&v94)
                        {
                          v94[4]((void **)&v94);
                        }
                        else if (v96)
                        {
                          (*(void (**)(void))(*v96 + 40))();
                        }
                      }
                      operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v82);
                    }
                    ++v71;
                    v72 -= 4;
                  }
                  while (v72);
                }
              }
              goto LABEL_78;
            case 0x11:
              uint64_t v73 = *(void *)(v66 + 48);
              uint64_t v74 = *(int *)(v73 + 112);
              if (v74)
              {
                unint64_t v75 = *(int **)(v73 + 120);
                uint64_t v76 = 4 * v74;
                do
                {
                  if (~*v75 <= *v75) {
                    int v77 = *v75;
                  }
                  else {
                    int v77 = ~*v75;
                  }
                  if (~v77 <= v77) {
                    int v78 = v77;
                  }
                  else {
                    int v78 = ~v77;
                  }
                  if (v77 != -1)
                  {
                    int v79 = *(_DWORD *)(*(void *)this[3] + 4 * v78) ^ (v77 >> 31);
                    if (*(void *)(*((void *)this[5] + 5) + 12 * v79)
                       + *(void *)(*((void *)this[5] + 5) + 12 * (v79 ^ 1)))
                    {
                      uint64_t v80 = (uint64_t)this[2];
                      uint64_t v94 = (void (**)(void **))&unk_26F0BD370;
                      LODWORD(v95) = v79;
                      unint64_t v96 = (unint64_t *)&v94;
                      unint64_t v81 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v80);
                      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v81, (signed int)v95))operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v81, (signed int)v95); {
                      operations_research::sat::IntegerEncoder::FullDomainEncoding(v81, (signed int)v95, (char **)&__p);
                      }
                      if (__p)
                      {
                        unint64_t v93 = __p;
                        operator delete(__p);
                      }
                      if (v96 == (unint64_t *)&v94)
                      {
                        v94[4]((void **)&v94);
                      }
                      else if (v96)
                      {
                        (*(void (**)(void))(*v96 + 40))();
                      }
                    }
                    operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue((operations_research::sat::FullEncodingFixedPointComputer *)this, v77);
                  }
                  ++v75;
                  v76 -= 4;
                }
                while (v76);
              }
              goto LABEL_78;
            default:
LABEL_78:
              unint64_t v60 = *v90;
              unint64_t v61 = (uint64_t *)&(*v90)[8 * v64];
LABEL_79:
              uint64_t v62 = *v61 | v65;
              break;
          }
          *unint64_t v61 = v62;
        }
        ++v58;
      }
      while (v58 != v59);
      int v54 = this[9];
      unint64_t v55 = this[10];
    }
  }
}

void sub_23CC1F38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *__p)
{
  if (a23)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC1F41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessConstraint(operations_research::sat::FullEncodingFixedPointComputer *a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 56) + 8 * a2 + 8);
  switch(*(_DWORD *)(v2 + 60))
  {
    case 0xC:
      operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear((uint64_t)a1, a2);
      return 1;
    case 0xE:
      return operations_research::sat::FullEncodingFixedPointComputer::ProcessElement(a1, a2);
    case 0x10:
      uint64_t v5 = *(void *)(v2 + 48);
      if (!*(unsigned char *)(v5 + 60))
      {
        uint64_t v11 = *(int *)(v5 + 16);
        if (v11)
        {
          __n128 v12 = *(int **)(v5 + 24);
          uint64_t v13 = 4 * v11;
          do
          {
            int v14 = *v12++;
            operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(a1, v14);
            v13 -= 4;
          }
          while (v13);
        }
      }
      return 1;
    case 0x11:
      uint64_t v6 = *(void *)(v2 + 48);
      uint64_t v7 = *(int *)(v6 + 112);
      if (v7)
      {
        uint64_t v8 = *(int **)(v6 + 120);
        uint64_t v9 = 4 * v7;
        do
        {
          int v10 = *v8++;
          operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(a1, v10);
          v9 -= 4;
        }
        while (v9);
      }
      return 1;
    default:
      return 1;
  }
}

void operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (~a2 <= a2) {
    int v2 = a2;
  }
  else {
    int v2 = ~a2;
  }
  if (~v2 <= v2) {
    int v3 = v2;
  }
  else {
    int v3 = ~v2;
  }
  if (v2 != -1)
  {
    int v5 = *(_DWORD *)(**((void **)this + 3) + 4 * v3) ^ (v2 >> 31);
    if (*(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * v5)
       + *(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * (v5 ^ 1)))
    {
      uint64_t v6 = *((void *)this + 2);
      uint64_t v9 = (void (**)(void **))&unk_26F0BD370;
      signed int v10 = v5;
      uint64_t v11 = (void **)&v9;
      uint64_t v7 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v6);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v7, v10)) {
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v7, v10);
      }
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v7, v10, (char **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v11 == (void **)&v9)
      {
        v9[4]((void **)&v9);
      }
      else if (v11)
      {
        (*((void (**)(void))*v11 + 5))();
      }
    }
    operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue(this, v2);
  }
}

void sub_23CC1F710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::FullEncodingFixedPointComputer::AddVariableToPropagationQueue(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  if (~a2 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = ~a2;
  }
  BOOL v4 = (void *)((char *)this + 48);
  if (*((void *)this + 7) <= (unint64_t)v3)
  {
    unint64_t v5 = v3 + 1;
    uint64_t v8 = *((void *)this + 12);
    uint64_t v7 = *((void *)this + 13);
    uint64_t v6 = (char *)this + 96;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
    if (v5 <= v9)
    {
      if (v5 < v9)
      {
        uint64_t v10 = v8 + 24 * (int)v5;
        if (v7 != v10)
        {
          uint64_t v11 = *((void *)this + 13);
          do
          {
            uint64_t v13 = *(void **)(v11 - 24);
            v11 -= 24;
            uint64_t v12 = v13;
            if (v13)
            {
              *(void *)(v7 - 16) = v12;
              operator delete(v12);
            }
            uint64_t v7 = v11;
          }
          while (v11 != v10);
        }
        *((void *)this + 13) = v10;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v6, v5 - v9);
    }
    std::vector<BOOL>::resize((uint64_t)v4, v3 + 1, 0);
  }
  uint64_t v14 = *(void *)(*v4 + 8 * ((unint64_t)v3 >> 6));
  if ((v14 & (1 << v3)) == 0)
  {
    *(void *)(*v4 + 8 * ((unint64_t)v3 >> 6)) = v14 | (1 << v3);
    uint64_t v16 = (int *)*((void *)this + 10);
    unint64_t v15 = *((void *)this + 11);
    if ((unint64_t)v16 < v15)
    {
      *uint64_t v16 = v3;
      uint64_t v17 = (uint64_t)(v16 + 1);
LABEL_37:
      *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v17;
      return;
    }
    unint64_t v18 = (int *)*((void *)this + 9);
    uint64_t v19 = v16 - v18;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v15 - (void)v18;
    if (v21 >> 1 > v20) {
      unint64_t v20 = v21 >> 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(4 * v22);
      uint64_t v24 = (int *)&v23[4 * v19];
      unint64_t v25 = &v23[4 * v22];
      int *v24 = v3;
      uint64_t v17 = (uint64_t)(v24 + 1);
      int64_t v26 = (char *)v16 - (char *)v18;
      if (v16 == v18) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (int *)(4 * v19);
      unint64_t v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      uint64_t v17 = 4 * v19 + 4;
      int64_t v26 = (char *)v16 - (char *)v18;
      if (v16 == v18)
      {
LABEL_35:
        *((void *)this + 9) = v24;
        *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v17;
        *((void *)this + 11) = v25;
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_37;
      }
    }
    unint64_t v27 = v26 - 4;
    if (v27 < 0x2C) {
      goto LABEL_42;
    }
    if ((unint64_t)((char *)v18 - v23) < 0x20) {
      goto LABEL_42;
    }
    uint64_t v28 = (v27 >> 2) + 1;
    uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v30 = &v16[v29 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v24 = (int *)((char *)v24 - v29);
    uint64_t v31 = &v23[4 * v19 - 16];
    int64_t v32 = v16 - 4;
    uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *uint64_t v31 = v34;
      v31 -= 2;
      v32 -= 8;
      v33 -= 8;
    }
    while (v33);
    uint64_t v16 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        int v35 = *--v16;
        *--uint64_t v24 = v35;
      }
      while (v16 != v18);
    }
    goto LABEL_35;
  }
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessElement(operations_research::sat::FullEncodingFixedPointComputer *this, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)this + 56) + 8 * a2 + 8);
  if (*(_DWORD *)(v4 + 60) == 14)
  {
    operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, *(_DWORD *)(*(void *)(v4 + 48) + 36));
    int v5 = *(_DWORD *)(v4 + 60);
    if (v5 != 14) {
      goto LABEL_3;
    }
LABEL_6:
    int v6 = *(_DWORD *)(*(void *)(v4 + 48) + 40);
    if (v6 == -1) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, dword_26AEE1B7C);
  int v5 = *(_DWORD *)(v4 + 60);
  if (v5 == 14) {
    goto LABEL_6;
  }
LABEL_3:
  int v6 = dword_26AEE1B80;
  if (dword_26AEE1B80 == -1) {
    goto LABEL_14;
  }
LABEL_7:
  if (~v6 <= v6) {
    int v7 = v6;
  }
  else {
    int v7 = ~v6;
  }
  signed int v8 = *(_DWORD *)(**((void **)this + 3) + 4 * v7) ^ (v6 >> 31);
  if (!(*(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * v8)
       + *(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * (v8 ^ 1))))
    return 1;
  BOOL IsFullyEncoded = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((void *)this + 4), v8);
  int v5 = *(_DWORD *)(v4 + 60);
  if (!IsFullyEncoded)
  {
LABEL_14:
    if (v5 == 14) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  if (v5 == 14)
  {
    uint64_t v10 = *(uint64_t **)(v4 + 48);
    uint64_t v11 = *((int *)v10 + 4);
    if (!v11) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    uint64_t v11 = dword_26AEE1B68;
    if (!dword_26AEE1B68) {
      goto LABEL_14;
    }
  }
  uint64_t v14 = (int *)v10[3];
  uint64_t v15 = 4 * v11;
  do
  {
    int v16 = *v14++;
    operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, v16);
    v15 -= 4;
  }
  while (v15);
  if (*(_DWORD *)(v4 + 60) == 14)
  {
LABEL_15:
    uint64_t v12 = *(uint64_t **)(v4 + 48);
    uint64_t v13 = *((int *)v12 + 4);
    if (!v13) {
      goto LABEL_35;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v12 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  uint64_t v13 = dword_26AEE1B68;
  if (!dword_26AEE1B68)
  {
LABEL_35:
    if (v6 == -1
      || (~v6 <= v6 ? (int v24 = v6) : (int v24 = ~v6),
          (signed int v25 = *(_DWORD *)(**((void **)this + 3) + 4 * v24) ^ (v6 >> 31),
           *(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * v25)
         + *(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * (v25 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((void *)this + 4), v25)))
    {
      operations_research::sat::FullEncodingFixedPointComputer::FullyEncode(this, v6);
    }
    return 1;
  }
LABEL_22:
  uint64_t v17 = (int *)v12[3];
  uint64_t v18 = 4 * v13;
  while (1)
  {
    int v19 = *v17;
    if (*v17 != v6)
    {
      if (v19 == -1) {
        break;
      }
      int v20 = ~v19 <= v19 ? *v17 : ~v19;
      signed int v21 = *(_DWORD *)(**((void **)this + 3) + 4 * v20) ^ (v19 >> 31);
      if (*(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * v21)
         + *(void *)(*(void *)(*((void *)this + 5) + 40) + 12 * (v21 ^ 1)))
      {
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*((void *)this + 4), v21)) {
          break;
        }
      }
    }
    ++v17;
    v18 -= 4;
    if (!v18) {
      goto LABEL_35;
    }
  }
  if (((*(void *)(*((void *)this + 18) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    return 0;
  }
  if (*(_DWORD *)(v4 + 60) == 14)
  {
    unint64_t v22 = *(uint64_t **)(v4 + 48);
    uint64_t v23 = *((int *)v22 + 4);
    if (!v23) {
      goto LABEL_46;
    }
LABEL_44:
    unint64_t v27 = (int *)v22[3];
    uint64_t v28 = 4 * v23;
    do
    {
      int v29 = *v27++;
      operations_research::sat::FullEncodingFixedPointComputer::Register((uint64_t)this, a2, v29);
      v28 -= 4;
    }
    while (v28);
    goto LABEL_46;
  }
  unint64_t v22 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  uint64_t v23 = dword_26AEE1B68;
  if (dword_26AEE1B68) {
    goto LABEL_44;
  }
LABEL_46:
  operations_research::sat::FullEncodingFixedPointComputer::Register((uint64_t)this, a2, v6);
  return 0;
}

uint64_t operations_research::sat::FullEncodingFixedPointComputer::ProcessLinear(uint64_t a1, int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 420))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 56) + 8 * a2 + 8);
    int v4 = *(_DWORD *)(v3 + 60);
    if (v4 == 12)
    {
      int v5 = *(uint64_t **)(v3 + 48);
      if (*((_DWORD *)v5 + 4) != 2) {
        return 1;
      }
    }
    else
    {
      int v5 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (dword_26AEE19E8 != 2) {
        return 1;
      }
    }
    if (*((_DWORD *)v5 + 16) != 2 || *(void *)v5[9] != *(void *)(v5[9] + 8))
    {
      if (v4 == 12)
      {
      }
      {
        return 1;
      }
      int v4 = *(_DWORD *)(v3 + 60);
    }
    if (v4 == 12) {
      int v6 = *(uint64_t **)(v3 + 48);
    }
    else {
      int v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    int v7 = (int *)v6[3];
    int v8 = *v7;
    int v9 = v7[1];
    int v34 = v9;
    int v35 = v8;
    if (v8 == -1
      || (~v8 <= v8 ? (int v10 = v8) : (int v10 = ~v8),
          (signed int v11 = *(_DWORD *)(**(void **)(a1 + 24) + 4 * v10) ^ (v8 >> 31),
           *(void *)(*(void *)(*(void *)(a1 + 40) + 40) + 12 * v11)
         + *(void *)(*(void *)(*(void *)(a1 + 40) + 40) + 12 * (v11 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*(void *)(a1 + 32), v11)))
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>((uint64_t *)(a1 + 168), &v35, (uint64_t)v36);
      uint64_t v12 = 0;
      uint64_t v13 = v37;
      unint64_t v14 = v37[1];
      unint64_t v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v9)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v9));
      unint64_t v16 = (v15 >> 7) ^ (v14 >> 12);
      uint64_t v17 = v37[4];
      while (1)
      {
        unint64_t v18 = v16 & v17;
        uint64_t v19 = *(void *)(v14 + v18);
        unint64_t v20 = ((v19 ^ (0x101010101010101 * (v15 & 0x7F))) - 0x101010101010101) & ~(v19 ^ (0x101010101010101
                                                                                            * (v15 & 0x7F))) & 0x8080808080808080;
        if (v20) {
          break;
        }
LABEL_26:
        if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v13[2]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v37 + 1, v15)) = v9;
          goto LABEL_29;
        }
        v12 += 8;
        unint64_t v16 = v12 + v18;
      }
      while (*(_DWORD *)(v37[2] + 4 * ((v18 + (__clz(__rbit64(v20)) >> 3)) & v17)) != v9)
      {
        v20 &= v20 - 1;
        if (!v20) {
          goto LABEL_26;
        }
      }
    }
LABEL_29:
    if (v9 == -1
      || (~v9 <= v9 ? (int v21 = v9) : (int v21 = ~v9),
          (signed int v22 = *(_DWORD *)(**(void **)(a1 + 24) + 4 * v21) ^ (v9 >> 31),
           *(void *)(*(void *)(*(void *)(a1 + 40) + 40) + 12 * v22)
         + *(void *)(*(void *)(*(void *)(a1 + 40) + 40) + 12 * (v22 ^ 1)))
       && !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(*(void *)(a1 + 32), v22)))
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>((uint64_t *)(a1 + 168), &v34, (uint64_t)v36);
      uint64_t v23 = 0;
      int v24 = v37;
      unint64_t v25 = v37[1];
      unint64_t v26 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v35)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v35));
      unint64_t v27 = (v26 >> 7) ^ (v25 >> 12);
      uint64_t v28 = v37[4];
      while (1)
      {
        unint64_t v29 = v27 & v28;
        uint64_t v30 = *(void *)(v25 + v29);
        unint64_t v31 = ((v30 ^ (0x101010101010101 * (v26 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                            * (v26 & 0x7F))) & 0x8080808080808080;
        if (v31) {
          break;
        }
LABEL_39:
        if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v37 + 1, v26);
          *(_DWORD *)(v24[2] + 4 * v32) = v35;
          return 1;
        }
        v23 += 8;
        unint64_t v27 = v23 + v29;
      }
      while (*(_DWORD *)(v37[2] + 4 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v28)) != v35)
      {
        v31 &= v31 - 1;
        if (!v31) {
          goto LABEL_39;
        }
      }
    }
  }
  return 1;
}

void operations_research::sat::FullEncodingFixedPointComputer::Register(uint64_t a1, int a2, int a3)
{
  if (~a3 <= a3) {
    int v5 = a3;
  }
  else {
    int v5 = ~a3;
  }
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v6 = a1 + 96;
  uint64_t v7 = v8;
  *(void *)(*(void *)(v6 + 48) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  uint64_t v9 = *(void *)(v6 + 8);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3);
  int v11 = v5;
  if (v10 <= v5)
  {
    unint64_t v12 = v5 + 1;
    if (v12 <= v10)
    {
      if (v12 < v10)
      {
        uint64_t v13 = v7 + 24 * (int)v12;
        if (v9 != v13)
        {
          uint64_t v14 = *(void *)(v6 + 8);
          do
          {
            unint64_t v16 = *(void **)(v14 - 24);
            v14 -= 24;
            unint64_t v15 = v16;
            if (v16)
            {
              *(void *)(v9 - 16) = v15;
              operator delete(v15);
            }
            uint64_t v9 = v14;
          }
          while (v14 != v13);
        }
        *(void *)(a1 + 104) = v13;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v6, v12 - v10);
    }
    std::vector<BOOL>::resize(a1 + 48, v11 + 1, 0);
    uint64_t v7 = *(void *)(a1 + 96);
  }
  uint64_t v17 = v7 + 24 * v11;
  unint64_t v18 = (uint64_t *)(v17 + 8);
  uint64_t v19 = *(char **)(v17 + 8);
  unint64_t v20 = *(void *)(v17 + 16);
  if ((unint64_t)v19 < v20)
  {
    *(_DWORD *)uint64_t v19 = a2;
    uint64_t v21 = (uint64_t)(v19 + 4);
    goto LABEL_36;
  }
  signed int v22 = *(char **)v17;
  uint64_t v23 = (uint64_t)&v19[-*(void *)v17];
  uint64_t v24 = v23 >> 2;
  unint64_t v25 = (v23 >> 2) + 1;
  if (v25 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = v20 - (void)v22;
  if (v26 >> 1 > v25) {
    unint64_t v25 = v26 >> 1;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v27)
  {
    if (v27 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v28 = operator new(4 * v27);
    unint64_t v29 = &v28[4 * v24];
    uint64_t v30 = &v28[4 * v27];
    *unint64_t v29 = a2;
    uint64_t v21 = (uint64_t)(v29 + 1);
    int64_t v31 = v19 - v22;
    if (v19 == v22) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  uint64_t v28 = 0;
  unint64_t v29 = (_DWORD *)(4 * v24);
  uint64_t v30 = 0;
  *(_DWORD *)(4 * v24) = a2;
  uint64_t v21 = 4 * v24 + 4;
  int64_t v31 = v19 - v22;
  if (v19 != v22)
  {
LABEL_28:
    unint64_t v32 = v31 - 4;
    if (v32 < 0x2C) {
      goto LABEL_41;
    }
    if ((unint64_t)(v19 - v28 - v23) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v33 = (v32 >> 2) + 1;
    uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    int v35 = &v19[-v34];
    unint64_t v29 = (_DWORD *)((char *)v29 - v34);
    uint64_t v36 = &v28[4 * v24 - 16];
    unint64_t v37 = v19 - 16;
    uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *uint64_t v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    uint64_t v19 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        int v40 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--unint64_t v29 = v40;
      }
      while (v19 != v22);
    }
  }
LABEL_34:
  *(void *)uint64_t v17 = v29;
  uint64_t *v18 = v21;
  *(void *)(v17 + 16) = v30;
  if (v22) {
    operator delete(v22);
  }
LABEL_36:
  uint64_t *v18 = v21;
}

BOOL operations_research::sat::anonymous namespace'::ConstraintIsNEq(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 < 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(uint64_t **)(a1 + 48);
    unint64_t v12 = *(_DWORD **)(a1 + 24);
    uint64_t v13 = *a2;
    uint64_t v14 = *(void *)(a3 + 40);
    do
    {
      uint64_t v16 = *v11++;
      uint64_t v15 = v16;
      LODWORD(v16) = *v12++;
      unsigned int v17 = v16;
      if (~v16 <= (int)v16) {
        int v18 = v17;
      }
      else {
        int v18 = ~v17;
      }
      int v19 = *(_DWORD *)(v13 + 4 * v18) ^ (v17 >> 31);
      uint64_t v20 = *(void *)(v14 + 12 * v19);
      uint64_t v21 = *(void *)(v14 + 12 * (v19 ^ 1));
      if (v15 < 0) {
        uint64_t v22 = -v21;
      }
      else {
        uint64_t v22 = v20;
      }
      if (v15 >= 0) {
        uint64_t v20 = -v21;
      }
      v9 += v22 * v15;
      v10 += v15 * v20;
      --v6;
    }
    while (v6);
  }
  operations_research::Domain::Domain(v31, v9, v10);
  operations_research::Domain::FromFlatSpanOfIntervals(*(void *)(a1 + 72), *(int *)(a1 + 64), v29, v23);
  operations_research::Domain::Complement((operations_research::Domain *)v29, v30);
  operations_research::Domain::IntersectionWith(v31, (const operations_research::Domain *)v30, v32);
  if (v30[0])
  {
    operator delete((void *)v30[1]);
    if ((v29[0] & 1) == 0)
    {
LABEL_16:
      if (((uint64_t)v31[0] & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else if ((v29[0] & 1) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v29[1]);
  if ((uint64_t)v31[0]) {
LABEL_17:
  }
    operator delete(v31[1]);
LABEL_18:
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)v32))
  {
    BOOL v25 = 0;
  }
  else
  {
    uint64_t v26 = operations_research::Domain::Min((operations_research::Domain *)v32, v24);
    unint64_t v27 = operations_research::Domain::Size((operations_research::Domain *)v32);
    BOOL v25 = v27 == 1;
    if (a4 && v27 == 1)
    {
      *a4 = v26;
      BOOL v25 = 1;
    }
  }
  if (v32[0]) {
    operator delete((void *)v32[1]);
  }
  return v25;
}

void sub_23CC203E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, char a12, void *__p, uint64_t a14, char a15, void *a16)
{
  if (*(unsigned char *)(v16 - 56)) {
    operator delete(*(void **)(v16 - 48));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::MaybeFullyEncodeMoreVariables(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::Model *a3)
{
  v4[0] = (char *)this;
  v4[1] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  v4[2] = (char *)a2;
  v4[3] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  v4[4] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  v4[5] = (char *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  uint64_t v13 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  operations_research::sat::FullEncodingFixedPointComputer::ComputeFixedPoint(v4);
  operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer((operations_research::sat::FullEncodingFixedPointComputer *)v4);
}

void sub_23CC2050C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer((operations_research::sat::FullEncodingFixedPointComputer *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadBoolOrConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  uint64_t v6 = v5;
  if (*((_DWORD *)this + 15) == 3) {
    long long v7 = (uint64_t *)*((void *)this + 6);
  }
  else {
    long long v7 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v7 + 4, (char **)&__p);
  uint64_t v8 = *((int *)this + 4);
  uint64_t v34 = a2;
  if (v8)
  {
    long long v9 = (int *)*((void *)this + 3);
    long long v10 = &v9[v8];
    long long v11 = v36;
    while (1)
    {
      int v13 = *v9;
      int v14 = ~*v9 <= *v9 ? *v9 : ~v13;
      int v15 = (__PAIR64__(*(_DWORD *)(*(void *)(v6 + 48) + 4 * v14), v13) >> 31) ^ 1;
      if (v11 >= v37) {
        break;
      }
      *(_DWORD *)long long v11 = v15;
      uint64_t v12 = (uint64_t)(v11 + 4);
LABEL_7:
      uint64_t v36 = (char *)v12;
      ++v9;
      long long v11 = (char *)v12;
      if (v9 == v10) {
        goto LABEL_39;
      }
    }
    uint64_t v16 = (char *)__p;
    int64_t v17 = v11 - (unsigned char *)__p;
    uint64_t v18 = (v11 - (unsigned char *)__p) >> 2;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v37 - (unsigned char *)__p;
    if ((v37 - (unsigned char *)__p) >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(4 * v21);
      __n128 v23 = &v22[4 * v18];
      *__n128 v23 = v15;
      uint64_t v12 = (uint64_t)(v23 + 1);
      if (v11 == v16) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v22 = 0;
      __n128 v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v15;
      uint64_t v12 = 4 * v18 + 4;
      if (v11 == v16) {
        goto LABEL_26;
      }
    }
    unint64_t v24 = v11 - 4 - v16;
    if (v24 >= 0xBC)
    {
      if (&v22[v17 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
      {
        BOOL v25 = v11;
      }
      else if (&v11[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
      {
        BOOL v25 = v11;
      }
      else if ((unint64_t)(v11 - v22 - v17) >= 0x20)
      {
        uint64_t v27 = (v24 >> 2) + 1;
        uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
        BOOL v25 = &v11[-v28];
        __n128 v23 = (_DWORD *)((char *)v23 - v28);
        unint64_t v29 = &v22[4 * v18 - 16];
        uint64_t v30 = v11 - 16;
        uint64_t v31 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *unint64_t v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_26:
          std::string __p = v23;
          uint64_t v36 = (char *)v12;
          unint64_t v37 = &v22[4 * v21];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v25 = v11;
      }
    }
    else
    {
      BOOL v25 = v11;
    }
    do
    {
      int v26 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *--__n128 v23 = v26;
    }
    while (v25 != v16);
    goto LABEL_26;
  }
  uint64_t v12 = (uint64_t)v36;
LABEL_39:
  uint64_t v38 = (void (**)(void **))&unk_26F0BD480;
  v39[0] = (int *)__p;
  v39[1] = (int *)((v12 - (uint64_t)__p) >> 2);
  int v40 = (void **)&v38;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v39, (uint64_t)v34);
  if (v40 == (void **)&v38)
  {
    v38[4]((void **)&v38);
    uint64_t v33 = (char *)__p;
    if (__p)
    {
LABEL_43:
      uint64_t v36 = v33;
      operator delete(v33);
    }
  }
  else
  {
    if (v40) {
      (*((void (**)(void))*v40 + 5))();
    }
    uint64_t v33 = (char *)__p;
    if (__p) {
      goto LABEL_43;
    }
  }
}

void sub_23CC20850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  int v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      int v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

uint64_t operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>@<X0>(uint64_t result@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    long long v7 = 0;
    uint64_t v8 = (int *)*((void *)a2 + 1);
    long long v9 = &v8[v4];
    uint64_t v28 = v9;
    uint64_t v29 = result;
    while (1)
    {
      while (1)
      {
        int v10 = *v8;
        int v11 = ~*v8 <= *v8 ? *v8 : ~v10;
        int v12 = __PAIR64__(*(_DWORD *)(*(void *)(result + 48) + 4 * v11), v10) >> 31;
        if (v7 >= v6) {
          break;
        }
        *(_DWORD *)long long v7 = v12;
        v7 += 4;
        a3[1] = v7;
        if (++v8 == v9) {
          return result;
        }
      }
      uint64_t v13 = (v7 - v5) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v6 - v5) >> 1 > v14) {
        unint64_t v14 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = operator new(4 * v15);
        int64_t v17 = &v16[4 * v13];
        *(_DWORD *)int64_t v17 = v12;
        uint64_t v18 = (uint64_t)(v17 + 4);
        if (v7 == v5) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v16 = 0;
        int64_t v17 = (char *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        uint64_t v18 = 4 * v13 + 4;
        if (v7 == v5) {
          goto LABEL_22;
        }
      }
      unint64_t v19 = v7 - 4 - v5;
      if (v19 < 0xBC)
      {
        uint64_t v20 = v7;
        goto LABEL_21;
      }
      if (&v16[v7 - v5 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v5 - 4]) {
        break;
      }
      if (&v7[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        uint64_t v20 = v7;
        goto LABEL_21;
      }
      if ((unint64_t)(v5 - v16) < 0x20)
      {
        uint64_t v20 = v7;
        goto LABEL_21;
      }
      uint64_t v22 = (v19 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v20 = &v7[-v23];
      v17 -= v23;
      unint64_t v24 = &v16[4 * v13 - 16];
      BOOL v25 = v7 - 16;
      uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        _OWORD *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v6 = &v16[4 * v15];
      *a3 = v17;
      a3[1] = (char *)v18;
      a3[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v17;
      long long v9 = v28;
      uint64_t result = v29;
      a3[1] = (char *)v18;
      ++v8;
      long long v7 = (char *)v18;
      if (v8 == v28) {
        return result;
      }
    }
    uint64_t v20 = v7;
    do
    {
LABEL_21:
      int v21 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v17 - 1) = v21;
      v17 -= 4;
    }
    while (v20 != v5);
    goto LABEL_22;
  }
  return result;
}

void sub_23CC20C94(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadBoolAndConstraint(uint64_t **this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v3 = a2;
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  std::string __p = 0;
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v6 = *((int *)this + 4);
  if (v6)
  {
    unint64_t v55 = v3;
    int v56 = (operations_research::sat *)this;
    long long v7 = 0;
    uint64_t v8 = 0;
    long long v9 = 0;
    int v10 = (int *)this[3];
    int v11 = &v10[v6];
    uint64_t v12 = (uint64_t)v61;
    uint64_t v57 = v11;
    while (1)
    {
      while (1)
      {
        int v13 = *v10;
        int v14 = ~*v10 <= *v10 ? *v10 : ~v13;
        int v15 = (__PAIR64__(*(_DWORD *)(*(void *)(v5 + 48) + 4 * v14), v13) >> 31) ^ 1;
        if (v7 >= v8) {
          break;
        }
        *(_DWORD *)long long v7 = v15;
        v7 += 4;
        uint64_t v12 = (uint64_t)v7;
        if (++v10 == v11) {
          goto LABEL_36;
        }
      }
      uint64_t v16 = (v7 - v9) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
      {
        unint64_t v61 = (char *)v12;
        uint64_t v62 = v8;
        std::string __p = v9;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v8 - v9) >> 1 > v17) {
        unint64_t v17 = (v8 - v9) >> 1;
      }
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 62)
        {
          unint64_t v61 = (char *)v12;
          uint64_t v62 = v8;
          std::string __p = v9;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v19 = v18;
        uint64_t v20 = operator new(4 * v18);
        unint64_t v18 = v19;
        int v21 = &v20[4 * v16];
        *(_DWORD *)int v21 = v15;
        uint64_t v12 = (uint64_t)(v21 + 4);
        if (v7 == v9) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v20 = 0;
        int v21 = (char *)(4 * v16);
        *(_DWORD *)(4 * v16) = v15;
        uint64_t v12 = 4 * v16 + 4;
        if (v7 == v9) {
          goto LABEL_22;
        }
      }
      unint64_t v22 = v7 - 4 - v9;
      if (v22 >= 0xBC)
      {
        if (&v20[v7 - v9 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v7 - v9 - 4])
        {
          uint64_t v23 = v7;
        }
        else if (&v7[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          uint64_t v23 = v7;
        }
        else if ((unint64_t)(v9 - v20) >= 0x20)
        {
          uint64_t v25 = (v22 >> 2) + 1;
          uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v23 = &v7[-v26];
          v21 -= v26;
          long long v27 = &v20[4 * v16 - 16];
          uint64_t v28 = v7 - 16;
          uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *long long v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 8;
          }
          while (v29);
          if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v23 = v7;
        }
      }
      else
      {
        uint64_t v23 = v7;
      }
      do
      {
        int v24 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v21 - 1) = v24;
        v21 -= 4;
      }
      while (v23 != v9);
LABEL_22:
      uint64_t v8 = &v20[4 * v18];
      if (v9) {
        operator delete(v9);
      }
      long long v9 = v21;
      int v11 = v57;
      ++v10;
      long long v7 = (char *)v12;
      if (v10 == v57)
      {
LABEL_36:
        unint64_t v61 = (char *)v12;
        uint64_t v62 = v8;
        unint64_t v3 = v55;
        this = (uint64_t **)v56;
        goto LABEL_38;
      }
    }
  }
  long long v9 = 0;
LABEL_38:
  std::string __p = v9;
  uint64_t v31 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
  if (*((_DWORD *)this + 15) == 4) {
    long long v32 = this[6];
  }
  else {
    long long v32 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v32 + 4, &v58);
  uint64_t v33 = v58;
  uint64_t v34 = v59;
  if (v58 != v59)
  {
    int v35 = v61;
    while (1)
    {
      int v36 = *(_DWORD *)v33;
      if (v35 >= v62) {
        break;
      }
      *(_DWORD *)int v35 = v36;
      uint64_t v37 = (uint64_t)(v35 + 4);
LABEL_66:
      unint64_t v61 = (char *)v37;
      operations_research::sat::SatSolver::AddProblemClause(v31, (int *)__p, (v37 - (uint64_t)__p) >> 2);
      int v35 = v61 - 4;
      v61 -= 4;
      v33 += 4;
      if (v33 == v34)
      {
        uint64_t v33 = v58;
        goto LABEL_68;
      }
    }
    uint64_t v38 = (char *)__p;
    int64_t v39 = v35 - (unsigned char *)__p;
    uint64_t v40 = (v35 - (unsigned char *)__p) >> 2;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v42 = v62 - (unsigned char *)__p;
    if ((v62 - (unsigned char *)__p) >> 1 > v41) {
      unint64_t v41 = v42 >> 1;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      if (v43 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v44 = operator new(4 * v43);
      int64_t v45 = &v44[4 * v40];
      *int64_t v45 = v36;
      uint64_t v37 = (uint64_t)(v45 + 1);
      if (v35 == v38) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v44 = 0;
      int64_t v45 = (_DWORD *)(4 * v40);
      *(_DWORD *)(4 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v36;
      uint64_t v37 = 4 * v40 + 4;
      if (v35 == v38) {
        goto LABEL_64;
      }
    }
    unint64_t v46 = v35 - 4 - v38;
    if (v46 >= 0x2C)
    {
      if ((unint64_t)(v35 - v44 - v39) >= 0x20)
      {
        uint64_t v48 = (v46 >> 2) + 1;
        uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        int v47 = &v35[-v49];
        int64_t v45 = (_DWORD *)((char *)v45 - v49);
        unint64_t v50 = &v44[4 * v40 - 16];
        int v51 = v35 - 16;
        uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *unint64_t v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_64:
          std::string __p = v45;
          unint64_t v61 = (char *)v37;
          uint64_t v62 = &v44[4 * v43];
          if (v38) {
            operator delete(v38);
          }
          goto LABEL_66;
        }
      }
      else
      {
        int v47 = v35;
      }
    }
    else
    {
      int v47 = v35;
    }
    do
    {
      int v54 = *((_DWORD *)v47 - 1);
      v47 -= 4;
      *--int64_t v45 = v54;
    }
    while (v47 != v38);
    goto LABEL_64;
  }
LABEL_68:
  if (v33)
  {
    uint64_t v59 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    unint64_t v61 = (char *)__p;
    operator delete(__p);
  }
}

void sub_23CC21108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadAtMostOneConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 971);
    uint64_t v8 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: !HasEnforcementLiteral(ct) ", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Not supported.", 14);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  if (*((_DWORD *)this + 15) == 26) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)__p);
  operations_research::sat::AtMostOneConstraint((uint64_t)__p, (uint64_t)v12);
  int v11 = a2;
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v13 + 48))(v13, &v11);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
    long long v7 = __p[0];
    if (__p[0])
    {
LABEL_10:
      __p[1] = v7;
      operator delete(v7);
    }
  }
  else
  {
    if (v13) {
      (*(void (**)(void))(*v13 + 40))();
    }
    long long v7 = __p[0];
    if (__p[0]) {
      goto LABEL_10;
    }
  }
}

void sub_23CC212F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadBoolXorConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v21, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 977);
    unint64_t v17 = (void *)google::LogMessage::stream((google::LogMessage *)&v21);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: !HasEnforcementLiteral(ct) ", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Not supported.", 14);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v21);
  }
  if (*((_DWORD *)this + 15) == 5) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)&__p);
  int v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v7 = __p;
  int64_t v8 = v20 - (unsigned char *)__p;
  if (v20 == __p)
  {
    int v10 = 0;
    long long v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long v9 = (const operations_research::sat::ConstraintProto *)operator new(v20 - (unsigned char *)__p);
    int v10 = (char *)v9 + 4 * (v8 >> 2);
    int v21 = v9;
    uint64_t v23 = v10;
    memcpy(v9, v7, v8);
    unint64_t v22 = v10;
  }
  char v24 = 1;
  uint64_t v26 = 0;
  int v11 = operator new(0x28uLL);
  uint64_t v12 = (void (**)(void *, const operations_research::sat::ConstraintProto **))&unk_26F0BFA78;
  *int v11 = &unk_26F0BFA78;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  int64_t v13 = v10 - (char *)v9;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v13);
    v11[1] = v14;
    int v15 = &v14[4 * (v13 >> 2)];
    v11[3] = v15;
    memcpy(v14, v9, v13);
    v11[2] = v15;
  }
  *((unsigned char *)v11 + 32) = 1;
  uint64_t v26 = v11;
  if (v9)
  {
    operator delete(v9);
    int v11 = v26;
    int v21 = a2;
    if (!v26) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v12 = (void (**)(void *, const operations_research::sat::ConstraintProto **))*v26;
  }
  else
  {
    int v21 = a2;
  }
  v12[6](v11, &v21);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
    uint64_t v16 = __p;
    if (__p)
    {
LABEL_20:
      uint64_t v20 = v16;
      operator delete(v16);
    }
  }
  else
  {
    if (v26) {
      (*(void (**)(void))(*v26 + 40))();
    }
    uint64_t v16 = __p;
    if (__p) {
      goto LABEL_20;
    }
  }
}

void sub_23CC215E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadLinearConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v206 = *MEMORY[0x263EF8340];
  uint64_t v167 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  unint64_t v165 = a2;
  if (*((_DWORD *)this + 15) == 12)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
    if (!*((_DWORD *)v6 + 4))
    {
LABEL_49:
      operations_research::Domain::FromFlatSpanOfIntervals(v6[9], *((int *)v6 + 16), (unint64_t *)&v181, v5);
      if (operations_research::Domain::Contains((operations_research::Domain *)&v181, 0)) {
        goto LABEL_96;
      }
      uint64_t v43 = *((int *)this + 4);
      if (v43)
      {
        uint64_t v44 = 0;
        int64_t v45 = 0;
        unint64_t v46 = 0;
        std::string __p = 0;
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        int v47 = (int *)*((void *)this + 3);
        uint64_t v48 = &v47[v43];
        while (1)
        {
          while (1)
          {
            int v49 = *v47;
            int v50 = ~*v47 <= *v47 ? *v47 : ~v49;
            int v51 = (__PAIR64__(*(_DWORD *)(v167[6] + 4 * v50), v49) >> 31) ^ 1;
            if (v46 >= v45) {
              break;
            }
            *(_DWORD *)unint64_t v46 = v51;
            v46 += 4;
            uint64_t v179 = (uint64_t)v46;
            if (++v47 == v48) {
              goto LABEL_85;
            }
          }
          uint64_t v52 = (v46 - v44) >> 2;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v45 - v44) >> 1 > v53) {
            unint64_t v53 = (v45 - v44) >> 1;
          }
          if ((unint64_t)(v45 - v44) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54)
          {
            if (v54 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v55 = operator new(4 * v54);
            int v56 = &v55[4 * v52];
            *int v56 = v51;
            uint64_t v57 = (uint64_t)(v56 + 1);
            if (v46 == v44) {
              goto LABEL_71;
            }
          }
          else
          {
            unint64_t v55 = 0;
            int v56 = (_DWORD *)(4 * v52);
            *(_DWORD *)(4 * v52) = v51;
            uint64_t v57 = 4 * v52 + 4;
            if (v46 == v44) {
              goto LABEL_71;
            }
          }
          unint64_t v58 = v46 - 4 - v44;
          if (v58 >= 0xBC)
          {
            if (&v55[v46 - v44 - 4 - (v58 & 0xFFFFFFFFFFFFFFFCLL)] > &v55[v46 - v44 - 4])
            {
              uint64_t v59 = v46;
            }
            else if (&v46[-(v58 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4)
            {
              uint64_t v59 = v46;
            }
            else if ((unint64_t)(v44 - v55) >= 0x20)
            {
              uint64_t v61 = (v58 >> 2) + 1;
              uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v59 = &v46[-v62];
              int v56 = (_DWORD *)((char *)v56 - v62);
              unint64_t v63 = &v55[4 * v52 - 16];
              unint64_t v64 = v46 - 16;
              uint64_t v65 = v61 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v66 = *(_OWORD *)v64;
                *(v63 - 1) = *((_OWORD *)v64 - 1);
                *unint64_t v63 = v66;
                v63 -= 2;
                v64 -= 32;
                v65 -= 8;
              }
              while (v65);
              if (v61 == (v61 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_71;
              }
            }
            else
            {
              uint64_t v59 = v46;
            }
          }
          else
          {
            uint64_t v59 = v46;
          }
          do
          {
            int v60 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *--int v56 = v60;
          }
          while (v59 != v44);
LABEL_71:
          int64_t v45 = &v55[4 * v54];
          std::string __p = v56;
          uint64_t v179 = v57;
          uint64_t v180 = v45;
          if (v44) {
            operator delete(v44);
          }
          uint64_t v44 = (char *)v56;
          unint64_t v46 = (char *)v57;
          uint64_t v179 = v57;
          if (++v47 == v48)
          {
LABEL_85:
            unint64_t v203 = (void (**)(void **))&unk_26F0BD480;
            v204[0] = (int *)__p;
            v204[1] = (int *)((v46 - (unsigned char *)__p) >> 2);
            uint64_t v205 = (void **)&v203;
            operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v204, (uint64_t)a2);
            if (v205 == (void **)&v203)
            {
              v203[4]((void **)&v203);
            }
            else if (v205)
            {
              (*((void (**)(void))*v205 + 5))();
            }
            if (__p) {
              operator delete(__p);
            }
            goto LABEL_96;
          }
        }
      }
      if (*off_26AECFE90[0] >= 1
        && (off_26AECFE90[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AECFE90, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v175, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1068);
        int v67 = (void *)google::LogMessage::stream((google::LogMessage *)&v175);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Trivially UNSAT constraint: ", 28);
        google::protobuf::Message::DebugString(&__p);
      }
      *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2) + 496) = 1;
LABEL_96:
      if (v181)
      {
        int v68 = v182;
LABEL_293:
        operator delete(v68);
        return;
      }
      return;
    }
  }
  else if (!dword_26AEE19E8)
  {
    uint64_t v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    goto LABEL_49;
  }
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 12) {
    int64_t v8 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int64_t v8 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v167, (int *)v8 + 4, (int **)&v181);
  int v9 = *((_DWORD *)this + 15);
  if (v9 == 12) {
    int v10 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  uint64_t v11 = *((int *)v10 + 10);
  uint64_t v12 = (const void *)v10[6];
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  std::string __p = 0;
  if (v11)
  {
    if ((v11 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v13 = (char *)operator new(8 * v11);
    std::string __p = v13;
    uint64_t v180 = &v13[8 * v11];
    memcpy(v13, v12, 8 * v11);
    uint64_t v179 = (uint64_t)v180;
    uint64_t v14 = (int *)v181;
    uint64_t v15 = (unsigned char *)v182 - (unsigned char *)v181;
    uint64_t v16 = v165;
    if (v182 != v181) {
      goto LABEL_14;
    }
LABEL_32:
    uint64_t v19 = 0;
    unint64_t v18 = 0;
    unint64_t v168 = 0;
    BOOL v22 = 1;
    goto LABEL_33;
  }
  int64_t v13 = 0;
  uint64_t v14 = (int *)v181;
  uint64_t v15 = (unsigned char *)v182 - (unsigned char *)v181;
  uint64_t v16 = v165;
  if (v182 == v181) {
    goto LABEL_32;
  }
LABEL_14:
  uint64_t v17 = 0;
  unint64_t v168 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = v15 >> 2;
  uint64_t v21 = *(void *)(v7 + 40);
  if (v20 <= 1) {
    unint64_t v20 = 1;
  }
  LOBYTE(v22) = 1;
  do
  {
    if (v22)
    {
      int v23 = *(_DWORD *)(v10[3] + 4 * v17);
      if (~v23 > v23) {
        int v23 = ~v23;
      }
      BOOL v22 = *(_DWORD *)(v167[6] + 4 * v23) != -1;
    }
    else
    {
      BOOL v22 = 0;
    }
    int v24 = v14[v17];
    uint64_t v25 = *(void *)(v21 + 12 * v24);
    uint64_t v26 = *(void *)(v21 + 12 * (v24 ^ 1));
    uint64_t v27 = *(void *)&v13[8 * v17];
    if (v19 <= 1 - v25 - v26) {
      uint64_t v19 = 1 - v25 - v26;
    }
    uint64_t v28 = v27 * v25;
    uint64_t v29 = v26 * v27;
    uint64_t v30 = -(v26 * v27);
    if (v30 < v28) {
      uint64_t v31 = -v29;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v168 = (const operations_research::sat::ConstraintProto *)((char *)v168 + v31);
    if (v28 <= v30) {
      uint64_t v32 = -v29;
    }
    else {
      uint64_t v32 = v28;
    }
    unint64_t v18 = (const operations_research::sat::ConstraintProto *)((char *)v18 + v32);
    ++v17;
  }
  while (v20 != v17);
LABEL_33:
  if (*((_DWORD *)v10 + 4) == 2)
  {
    uint64_t v33 = *(void *)(v7 + 40);
    if (*(void *)(v33 + 12 * *v14) + *(void *)(v33 + 12 * (*v14 ^ 1)))
    {
      if (*(void *)(v33 + 12 * v14[1]) + *(void *)(v33 + 12 * (v14[1] ^ 1)) && v19 <= 15)
      {
        uint64_t v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v16);
        uint64_t v36 = (uint64_t)v16;
        uint64_t v37 = v35;
        uint64_t v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v36);
        if (*(int *)(v37 + 420) <= 0)
        {
          uint64_t v16 = v165;
        }
        else
        {
          uint64_t v39 = v38;
          int v40 = *((_DWORD *)this + 15);
          if (v40 == 12) {
            unint64_t v41 = (uint64_t *)*((void *)this + 6);
          }
          else {
            unint64_t v41 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          }
          if (*((_DWORD *)v41 + 16) == 2 && *(void *)v41[9] == *(void *)(v41[9] + 8))
          {
            uint64_t v42 = v40 == 12
                ? *(const operations_research::sat::ConstraintProto ***)(*((void *)this + 6) + 72)
                : (const operations_research::sat::ConstraintProto **)qword_26AEE1A20;
            uint64_t v69 = *v42;
            if (v168 != v69
              && v18 != v69
              && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v38, *(_DWORD *)v181)
              && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v39, *((_DWORD *)v181 + 1)))
            {
              if (*off_26AECFE98[0] >= 3
                && (off_26AECFE98[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFE98, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)&v170, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1108);
                uint64_t v70 = (void *)google::LogMessage::stream((google::LogMessage *)&v170);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Load AC version of ", 19);
                google::protobuf::Message::DebugString(&v175);
              }
              operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v167, (int *)this + 4, v174);
              if (*((_DWORD *)this + 15) == 12) {
                std::vector<int>::size_type v71 = (uint64_t *)*((void *)this + 6);
              }
              else {
                std::vector<int>::size_type v71 = &operations_research::sat::_LinearConstraintProto_default_instance_;
              }
              uint64_t v72 = v174[0];
              if (!v174[0]) {
                goto LABEL_289;
              }
              v174[1] = v174[0];
              goto LABEL_288;
            }
          }
          int v73 = *(_DWORD *)(v37 + 420);
          uint64_t v183 = 0;
          uint64_t v16 = v165;
          if (v73 >= 1)
          {
            uint64_t v74 = *((_DWORD *)this + 15) == 12
                ? (uint64_t *)*((void *)this + 6)
                : &operations_research::sat::_LinearConstraintProto_default_instance_;
            {
              BOOL v75 = v168 == v183 || v18 == v183;
              if (!v75
                && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v39, *(_DWORD *)v181)
                && operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v39, *((_DWORD *)v181 + 1)))
              {
                if (*off_26AECFEA0[0] >= 3
                  && (off_26AECFEA0[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_26AECFEA0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)3)))
                {
                  google::LogMessage::LogMessage((google::LogMessage *)&v170, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1124);
                  uint64_t v76 = (void *)google::LogMessage::stream((google::LogMessage *)&v170);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Load NAC version of ", 20);
                  google::protobuf::Message::DebugString(&v175);
                }
                operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v167, (int *)this + 4, v173);
                uint64_t v72 = v173[0];
                if (!v173[0]) {
                  goto LABEL_289;
                }
                v173[1] = v173[0];
LABEL_288:
                operator delete(v72);
                goto LABEL_289;
              }
            }
          }
        }
        int v9 = *((_DWORD *)this + 15);
      }
    }
  }
  char v164 = this;
  if (v9 != 12)
  {
    int v77 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (qword_26AEE1A18 != 2) {
      goto LABEL_133;
    }
    goto LABEL_192;
  }
  int v77 = (uint64_t *)*((void *)this + 6);
  if (*((_DWORD *)v77 + 16) == 2)
  {
LABEL_192:
    uint64_t v114 = (uint64_t *)v77[9];
    uint64_t v116 = *v114;
    uint64_t v115 = v114[1];
    if ((uint64_t)v168 >= v116) {
      uint64_t v117 = 0x8000000000000000;
    }
    else {
      uint64_t v117 = v116;
    }
    if ((uint64_t)v18 <= v115) {
      uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v118 = v115;
    }
    if (*((_DWORD *)this + 4))
    {
      operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v167, (int *)this + 4, (char **)&v175);
      if (v117 != 0x8000000000000000)
      {
        operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((uint64_t)&v175, (char **)&v181, (uint64_t)&__p, v117, (uint64_t)v195);
        unint64_t v170 = v16;
        if (!v196) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, void **))(*v196 + 48))(v196, &v170);
        if (v196 == v195)
        {
          (*(void (**)(void *))(v195[0] + 32))(v195);
          if (v118 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_286;
          }
          goto LABEL_205;
        }
        if (v196) {
          (*(void (**)(void))(*v196 + 40))();
        }
      }
      if (v118 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_286;
      }
LABEL_205:
      operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((uint64_t)&v175, (char **)&v181, (uint64_t **)&__p, v118, (uint64_t)v193);
      unint64_t v170 = v16;
      if (!v194) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*((void (**)(void **, void **))*v194 + 6))(v194, &v170);
      uint64_t v119 = v194;
      if (v194 != v193) {
        goto LABEL_272;
      }
      (*(void (**)(void *))(v193[0] + 32))(v193);
LABEL_286:
      uint64_t v72 = (char *)v175;
      if (!v175) {
        goto LABEL_289;
      }
      goto LABEL_287;
    }
    if (!v22)
    {
      if (v117 != 0x8000000000000000)
      {
        operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&v181, (uint64_t)&__p, v117, v199);
        unint64_t v175 = v16;
        if (!v200) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, void **))(*v200 + 48))(v200, &v175);
        if (v200 == v199)
        {
          (*(void (**)(void *))(v199[0] + 32))(v199);
        }
        else if (v200)
        {
          (*(void (**)(void))(*v200 + 40))();
        }
      }
      if (v118 != 0x7FFFFFFFFFFFFFFFLL)
      {
        operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v181, (uint64_t **)&__p, v118, v197);
        unint64_t v175 = v16;
        if (!v198) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, void **))(*v198 + 48))(v198, &v175);
        if (v198 == v197)
        {
          (*(void (**)(void *))(v197[0] + 32))(v197);
        }
        else if (v198)
        {
          (*(void (**)(void))(*v198 + 40))();
        }
      }
      goto LABEL_289;
    }
    uint64_t v169 = v118;
    unint64_t v175 = 0;
    unint64_t v176 = 0;
    unint64_t v177 = 0;
    if (v182 == v181)
    {
LABEL_282:
      std::vector<int>::pointer v202 = 0;
      char v162 = operator new(0x20uLL);
      *(void *)char v162 = &unk_26F0BFBB0;
      *((void *)v162 + 1) = v117;
      *((void *)v162 + 2) = v169;
      *((void *)v162 + 3) = &v175;
      std::vector<int>::pointer v202 = (void **)v162;
      uint64_t v163 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v165);
      operations_research::sat::SatSolver::AddLinearConstraint(v163, 1, *((void *)v162 + 1), 1, *((void *)v162 + 2), *((void ***)v162 + 3));
      uint64_t v119 = v202;
      if (v202 != v201) {
        goto LABEL_272;
      }
      (*(void (**)(void *))(v201[0] + 32))(v201);
      uint64_t v72 = (char *)v175;
      if (!v175) {
        goto LABEL_289;
      }
LABEL_287:
      unint64_t v176 = (int *)v72;
      goto LABEL_288;
    }
    unint64_t v145 = 0;
    unint64_t v146 = 0;
    while (1)
    {
      uint64_t v148 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)this + 15) == 12) {
        uint64_t v148 = (uint64_t *)*((void *)this + 6);
      }
      int v149 = *(_DWORD *)(v148[3] + 4 * v146);
      int v150 = ~v149 <= v149 ? v149 : ~v149;
      int v151 = __PAIR64__(*(_DWORD *)(v167[6] + 4 * v150), v149) >> 31;
      uint64_t v152 = *((void *)__p + v146);
      if (v145 >= v177) {
        break;
      }
      *(_DWORD *)unint64_t v145 = v151;
      *(void *)(v145 + 4) = v152;
      unint64_t v147 = (int *)(v145 + 12);
LABEL_246:
      unint64_t v176 = v147;
      ++v146;
      unint64_t v145 = (char *)v147;
      if (v146 >= ((unsigned char *)v182 - (unsigned char *)v181) >> 2) {
        goto LABEL_282;
      }
    }
    unint64_t v153 = (char *)v175;
    unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((v145 - (unsigned char *)v175) >> 2);
    unint64_t v155 = v154 + 1;
    if (v154 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v177 - (unsigned char *)v175) >> 2) > v155) {
      unint64_t v155 = 0x5555555555555556 * ((v177 - (unsigned char *)v175) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v177 - (unsigned char *)v175) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v156 = 0x1555555555555555;
    }
    else {
      unint64_t v156 = v155;
    }
    if (v156)
    {
      if (v156 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v157 = (char *)operator new(12 * v156);
      uint64_t v158 = (uint64_t)&v157[4 * ((v145 - (unsigned char *)v175) >> 2)];
      *(_DWORD *)uint64_t v158 = v151;
      *(void *)(v158 + 4) = v152;
      uint64_t v159 = (uint64_t)&v157[12 * v154];
      if (v145 == v153)
      {
LABEL_267:
        unint64_t v147 = (int *)(v158 + 12);
        unint64_t v175 = (void *)v159;
        unint64_t v176 = (int *)(v158 + 12);
        unint64_t v177 = &v157[12 * v156];
        if (!v145)
        {
LABEL_269:
          this = v164;
          goto LABEL_246;
        }
LABEL_268:
        operator delete(v145);
        goto LABEL_269;
      }
    }
    else
    {
      uint64_t v157 = 0;
      uint64_t v158 = 4 * ((v145 - (unsigned char *)v175) >> 2);
      *(_DWORD *)uint64_t v158 = v151;
      *(void *)(v158 + 4) = v152;
      uint64_t v159 = 12 * v154;
      if (v145 == v153) {
        goto LABEL_267;
      }
    }
    do
    {
      uint64_t v160 = *(void *)(v145 - 12);
      v145 -= 12;
      int v161 = *((_DWORD *)v145 + 2);
      *(void *)(v159 - 12) = v160;
      v159 -= 12;
      *(_DWORD *)(v159 + 8) = v161;
    }
    while (v145 != v153);
    unint64_t v145 = (char *)v175;
    unint64_t v147 = (int *)(v158 + 12);
    unint64_t v175 = (void *)v159;
    unint64_t v176 = (int *)(v158 + 12);
    unint64_t v177 = &v157[12 * v156];
    if (!v145) {
      goto LABEL_269;
    }
    goto LABEL_268;
  }
LABEL_133:
  uint64_t v78 = 0;
  unint64_t v175 = 0;
  unint64_t v176 = 0;
  unint64_t v177 = 0;
  unint64_t v166 = v18;
  while (v9 == 12)
  {
    uint64_t v79 = *((void *)this + 6);
    if (v78 >= *(int *)(v79 + 64)) {
      goto LABEL_208;
    }
    uint64_t v80 = (uint64_t *)(v79 + 72);
LABEL_140:
    uint64_t v81 = *v80;
    uint64_t v82 = *(void *)(v81 + 8 * v78);
    uint64_t v83 = *(void *)(v81 + ((8 * v78) | 8));
    if ((uint64_t)v168 >= v82) {
      uint64_t v84 = 0x8000000000000000;
    }
    else {
      uint64_t v84 = v82;
    }
    if ((uint64_t)v18 <= v83) {
      uint64_t v85 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v85 = v83;
    }
    v191[0] = &unk_26F0BFC30;
    unint64_t v192 = v191;
    unint64_t v86 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v16);
    int v87 = *((_DWORD *)v86 + 4);
    operations_research::sat::SatSolver::SetNumVariables(v86, v87 + 1);
    if (v192 == v191)
    {
      (*(void (**)(void *))(v191[0] + 32))(v191);
      int v88 = 2 * v87;
      uint64_t v90 = v176;
      int v89 = v177;
      if (v176 >= (int *)v177) {
        goto LABEL_153;
      }
    }
    else
    {
      if (v192) {
        (*(void (**)(void))(*v192 + 40))();
      }
      int v88 = 2 * v87;
      uint64_t v90 = v176;
      int v89 = v177;
      if (v176 >= (int *)v177)
      {
LABEL_153:
        char v91 = (int *)v175;
        int64_t v92 = (char *)v90 - (unsigned char *)v175;
        uint64_t v93 = ((char *)v90 - (unsigned char *)v175) >> 2;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v95 = v89 - (unsigned char *)v175;
        if (v95 >> 1 > v94) {
          unint64_t v94 = v95 >> 1;
        }
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          if (v96 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v97 = operator new(4 * v96);
          uint64_t v98 = v78;
          unint64_t v99 = (int *)&v97[4 * v93];
          int *v99 = v88;
          uint64_t v100 = (uint64_t)(v99 + 1);
          if (v90 != v91)
          {
LABEL_162:
            unint64_t v101 = (char *)(v90 - 1) - (char *)v91;
            if (v101 < 0x2C) {
              goto LABEL_319;
            }
            if ((unint64_t)((char *)v90 - &v97[v92]) < 0x20) {
              goto LABEL_319;
            }
            uint64_t v102 = (v101 >> 2) + 1;
            uint64_t v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v104 = &v90[v103 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v99 = (int *)((char *)v99 - v103);
            uint64_t v105 = &v97[4 * v93 - 16];
            unint64_t v106 = v90 - 4;
            uint64_t v107 = v102 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v108 = *(_OWORD *)v106;
              *(v105 - 1) = *((_OWORD *)v106 - 1);
              *uint64_t v105 = v108;
              v105 -= 2;
              v106 -= 8;
              v107 -= 8;
            }
            while (v107);
            uint64_t v90 = v104;
            if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_319:
              do
              {
                int v109 = *--v90;
                *--unint64_t v99 = v109;
              }
              while (v90 != v91);
            }
          }
        }
        else
        {
          uint64_t v98 = v78;
          uint64_t v97 = 0;
          unint64_t v99 = (int *)(4 * v93);
          *(_DWORD *)(4 * v93) = v88;
          uint64_t v100 = 4 * v93 + 4;
          if (v90 != v91) {
            goto LABEL_162;
          }
        }
        unint64_t v175 = v99;
        unint64_t v176 = (int *)v100;
        unint64_t v177 = &v97[4 * v96];
        if (v91) {
          operator delete(v91);
        }
        this = v164;
        uint64_t v16 = v165;
        unint64_t v176 = (int *)v100;
        uint64_t v78 = v98;
        unint64_t v18 = v166;
        if (v84 == 0x8000000000000000) {
          goto LABEL_180;
        }
        goto LABEL_174;
      }
    }
    int *v90 = v88;
    unint64_t v176 = v90 + 1;
    unint64_t v18 = v166;
    if (v84 == 0x8000000000000000) {
      goto LABEL_180;
    }
LABEL_174:
    unint64_t v110 = operator new(4uLL);
    unint64_t v170 = v110;
    _DWORD *v110 = v88;
    unint64_t v171 = v110 + 1;
    uint64_t v172 = v110 + 1;
    operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((uint64_t)&v170, (char **)&v181, (uint64_t)&__p, v84, (uint64_t)v189);
    uint64_t v183 = v16;
    if (!v190) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v190 + 48))(v190, &v183);
    if (v190 == v189)
    {
      (*(void (**)(void *))(v189[0] + 32))(v189);
      uint64_t v111 = v170;
      if (v170) {
        goto LABEL_179;
      }
    }
    else
    {
      if (v190) {
        (*(void (**)(void))(*v190 + 40))();
      }
      uint64_t v111 = v170;
      if (v170)
      {
LABEL_179:
        unint64_t v171 = v111;
        operator delete(v111);
      }
    }
LABEL_180:
    if (v85 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_134;
    }
    unint64_t v112 = operator new(4uLL);
    unint64_t v170 = v112;
    _DWORD *v112 = v88;
    unint64_t v171 = v112 + 1;
    uint64_t v172 = v112 + 1;
    operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((uint64_t)&v170, (char **)&v181, (uint64_t **)&__p, v85, (uint64_t)v187);
    uint64_t v183 = v16;
    if (!v188) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v188 + 48))(v188, &v183);
    if (v188 == v187)
    {
      (*(void (**)(void *))(v187[0] + 32))(v187);
      int v113 = v170;
      if (!v170) {
        goto LABEL_134;
      }
LABEL_190:
      unint64_t v171 = v113;
      operator delete(v113);
      goto LABEL_134;
    }
    if (v188) {
      (*(void (**)(void))(*v188 + 40))();
    }
    int v113 = v170;
    if (v170) {
      goto LABEL_190;
    }
LABEL_134:
    v78 += 2;
    int v9 = *((_DWORD *)this + 15);
  }
  if (v78 < (int)qword_26AEE1A18)
  {
    uint64_t v80 = &qword_26AEE1A20;
    goto LABEL_140;
  }
LABEL_208:
  uint64_t v120 = *((int *)this + 4);
  uint64_t v121 = (char *)v176;
  if (v120)
  {
    unint64_t v122 = (int *)*((void *)this + 3);
    long long v123 = &v122[v120];
    while (1)
    {
      int v125 = *v122;
      int v126 = ~*v122 <= *v122 ? *v122 : ~v125;
      int v127 = (__PAIR64__(*(_DWORD *)(v167[6] + 4 * v126), v125) >> 31) ^ 1;
      if (v121 >= v177) {
        break;
      }
      *(_DWORD *)uint64_t v121 = v127;
      uint64_t v124 = (uint64_t)(v121 + 4);
LABEL_211:
      unint64_t v176 = (int *)v124;
      ++v122;
      uint64_t v121 = (char *)v124;
      if (v122 == v123) {
        goto LABEL_271;
      }
    }
    long long v128 = (char *)v175;
    int64_t v129 = v121 - (unsigned char *)v175;
    uint64_t v130 = (v121 - (unsigned char *)v175) >> 2;
    unint64_t v131 = v130 + 1;
    if ((unint64_t)(v130 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v132 = v177 - (unsigned char *)v175;
    if ((v177 - (unsigned char *)v175) >> 1 > v131) {
      unint64_t v131 = v132 >> 1;
    }
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v133 = v131;
    }
    if (v133)
    {
      if (v133 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v134 = operator new(4 * v133);
      unint64_t v135 = &v134[4 * v130];
      *unint64_t v135 = v127;
      uint64_t v124 = (uint64_t)(v135 + 1);
      if (v121 == v128) {
        goto LABEL_230;
      }
    }
    else
    {
      unint64_t v134 = 0;
      unint64_t v135 = (_DWORD *)(4 * v130);
      *(_DWORD *)(4 * v13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v127;
      uint64_t v124 = 4 * v130 + 4;
      if (v121 == v128) {
        goto LABEL_230;
      }
    }
    unint64_t v136 = v121 - 4 - v128;
    if (v136 >= 0xBC)
    {
      if (&v134[v129 - 4 - (v136 & 0xFFFFFFFFFFFFFFFCLL)] > &v134[v129 - 4])
      {
        uint64_t v137 = v121;
      }
      else if (&v121[-(v136 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v121 - 4)
      {
        uint64_t v137 = v121;
      }
      else if ((unint64_t)(v121 - v134 - v129) >= 0x20)
      {
        uint64_t v139 = (v136 >> 2) + 1;
        uint64_t v140 = 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v137 = &v121[-v140];
        unint64_t v135 = (_DWORD *)((char *)v135 - v140);
        int32x4_t v141 = &v134[4 * v130 - 16];
        uint64_t v142 = v121 - 16;
        uint64_t v143 = v139 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v144 = *(_OWORD *)v142;
          *(v141 - 1) = *((_OWORD *)v142 - 1);
          _OWORD *v141 = v144;
          v141 -= 2;
          v142 -= 32;
          v143 -= 8;
        }
        while (v143);
        if (v139 == (v139 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_230:
          unint64_t v175 = v135;
          unint64_t v176 = (int *)v124;
          unint64_t v177 = &v134[4 * v133];
          if (v128) {
            operator delete(v128);
          }
          goto LABEL_211;
        }
      }
      else
      {
        uint64_t v137 = v121;
      }
    }
    else
    {
      uint64_t v137 = v121;
    }
    do
    {
      int v138 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *--unint64_t v135 = v138;
    }
    while (v137 != v128);
    goto LABEL_230;
  }
  uint64_t v124 = (uint64_t)v176;
LABEL_271:
  unint64_t v184 = (void (**)(void **))&unk_26F0BD480;
  v185[0] = (int *)v175;
  v185[1] = (int *)((v124 - (uint64_t)v175) >> 2);
  BOOL v186 = (void **)&v184;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v185, (uint64_t)v165);
  uint64_t v119 = v186;
  if (v186 != (void **)&v184)
  {
LABEL_272:
    if (v119)
    {
      (*((void (**)(void **))*v119 + 5))(v119);
      uint64_t v72 = (char *)v175;
      if (!v175) {
        goto LABEL_289;
      }
      goto LABEL_287;
    }
    goto LABEL_286;
  }
  v184[4]((void **)&v184);
  uint64_t v72 = (char *)v175;
  if (v175) {
    goto LABEL_287;
  }
LABEL_289:
  if (__p)
  {
    uint64_t v179 = (uint64_t)__p;
    operator delete(__p);
  }
  int v68 = v181;
  if (v181)
  {
    unint64_t v182 = v181;
    goto LABEL_293;
  }
}

void sub_23CC22DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a35) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a35);
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>@<X0>(void *result@<X0>, int *a2@<X1>, int **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  if (v4)
  {
    __n128 v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int64_t v8 = (int *)*((void *)a2 + 1);
    int v9 = &v8[v4];
    uint64_t v28 = v9;
    uint64_t v29 = result;
    while (1)
    {
      while (1)
      {
        unsigned int v10 = *v8;
        int v11 = ~*v8 <= *v8 ? *v8 : ~v10;
        int v12 = *(_DWORD *)(*result + 4 * v11) ^ (v10 >> 31);
        if (v7 >= v6) {
          break;
        }
        *v7++ = v12;
        a3[1] = v7;
        if (++v8 == v9) {
          return result;
        }
      }
      uint64_t v13 = v7 - v5;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v6 - (char *)v5) >> 1 > v14) {
        unint64_t v14 = ((char *)v6 - (char *)v5) >> 1;
      }
      if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = operator new(4 * v15);
        uint64_t v17 = (int *)&v16[4 * v13];
        *uint64_t v17 = v12;
        uint64_t v18 = (uint64_t)(v17 + 1);
        if (v7 == v5) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = (int *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        uint64_t v18 = 4 * v13 + 4;
        if (v7 == v5) {
          goto LABEL_22;
        }
      }
      unint64_t v19 = (char *)(v7 - 1) - (char *)v5;
      if (v19 < 0xBC)
      {
        unint64_t v20 = v7;
        goto LABEL_21;
      }
      if (&v16[(char *)v7 - (char *)v5 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v7 - (char *)v5 - 4]) {
        break;
      }
      if ((int *)((char *)v7 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1)
      {
        unint64_t v20 = v7;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v5 - v16) < 0x20)
      {
        unint64_t v20 = v7;
        goto LABEL_21;
      }
      uint64_t v22 = (v19 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v20 = &v7[v23 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v17 = (int *)((char *)v17 - v23);
      int v24 = &v16[4 * v13 - 16];
      uint64_t v25 = v7 - 4;
      uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        _OWORD *v24 = v27;
        v24 -= 2;
        v25 -= 8;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v6 = (int *)&v16[4 * v15];
      *a3 = v17;
      a3[1] = (int *)v18;
      a3[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      __n128 v5 = v17;
      int v9 = v28;
      uint64_t result = v29;
      a3[1] = (int *)v18;
      ++v8;
      uint64_t v7 = (int *)v18;
      if (v8 == v28) {
        return result;
      }
    }
    unint64_t v20 = v7;
    do
    {
LABEL_21:
      int v21 = *--v20;
      *--uint64_t v17 = v21;
    }
    while (v20 != v5);
    goto LABEL_22;
  }
  return result;
}

void sub_23CC23238(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::LoadEquivalenceAC(void *a1, uint64_t a2, signed int a3, uint64_t a4, signed int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v13 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v13, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 990);
    uint64_t v93 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var1) ", 52);
    goto LABEL_110;
  }
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v13, a5))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 991);
    unint64_t v94 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var2) ", 52);
LABEL_110:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v107 = 0;
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v13, a3, &v101);
  unint64_t v15 = v101;
  unint64_t v14 = v102;
  unint64_t v99 = a1;
  uint64_t v96 = a6;
  if (v101 != v102)
  {
    uint64_t v95 = v13;
    uint64_t v16 = v7;
    do
    {
      uint64_t v21 = 0;
      int v24 = *((_DWORD *)v15 + 2);
      uint64_t v25 = *(void *)v15 * a2;
      unint64_t v26 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v25)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v25));
      uint64_t v23 = v105;
      for (unint64_t i = (v26 >> 7) ^ ((unint64_t)__p >> 12); ; unint64_t i = v21 + v17)
      {
        unint64_t v17 = i & v106;
        uint64_t v18 = *(void *)((char *)__p + v17);
        unint64_t v19 = ((v18 ^ (0x101010101010101 * (v26 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                            * (v26 & 0x7F))) & 0x8080808080808080;
        if (v19) {
          break;
        }
LABEL_8:
        if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v26);
          uint64_t v23 = v105;
          *(void *)(v105 + 12 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v25;
          goto LABEL_11;
        }
        v21 += 8;
      }
      while (1)
      {
        unint64_t v20 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v106;
        if (*(void *)(v105 + 12 * v20) == v25) {
          break;
        }
        v19 &= v19 - 1;
        if (!v19) {
          goto LABEL_8;
        }
      }
LABEL_11:
      *(_DWORD *)(v23 + 12 * v20 + 8) = v24;
      v15 += 12;
    }
    while (v15 != v14);
    unint64_t v15 = v101;
    uint64_t v7 = v16;
    a1 = v99;
    uint64_t v13 = v95;
  }
  if (v15)
  {
    uint64_t v102 = v15;
    operator delete(v15);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v13, a5, &v101);
  long long v27 = v101;
  uint64_t v28 = v102;
  if (v101 != v102)
  {
    do
    {
      uint64_t v29 = 0;
      int v30 = *((_DWORD *)v27 + 2);
      uint64_t v31 = a6 - *(void *)v27 * a4;
      uint64_t v100 = v31;
      unint64_t v32 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v31)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v31));
      uint64_t v33 = v105;
      unint64_t v34 = (v32 >> 7) ^ ((unint64_t)__p >> 12);
      uint64_t v35 = 0x101010101010101 * (v32 & 0x7F);
      for (unint64_t j = v34; ; unint64_t j = v29 + v37)
      {
        unint64_t v37 = j & v106;
        uint64_t v38 = *(void *)((char *)__p + v37);
        unint64_t v39 = ((v38 ^ v35) - 0x101010101010101) & ~(v38 ^ v35) & 0x8080808080808080;
        if (v39) {
          break;
        }
LABEL_24:
        if ((v38 & (~v38 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_27;
        }
        v29 += 8;
      }
      while (1)
      {
        unint64_t v40 = (v37 + (__clz(__rbit64(v39)) >> 3)) & v106;
        if (*(void *)(v105 + 12 * v40) == v31) {
          break;
        }
        v39 &= v39 - 1;
        if (!v39) {
          goto LABEL_24;
        }
      }
      if (v40 == (void)v106)
      {
LABEL_27:
        uint64_t v41 = *a1;
        uint64_t v42 = a1[1];
        int v112 = v30 ^ 1;
        uint64_t v117 = 0;
        uint64_t v43 = operator new(0x28uLL);
        *uint64_t v43 = &unk_26F0BFB30;
        v43[1] = v41;
        v43[2] = (v42 - v41) >> 2;
        v43[3] = &v112;
        v43[4] = 1;
        uint64_t v117 = v43;
        operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v43 + 1), v7);
        if (v117 == v116)
        {
          (*(void (**)(void *))(v116[0] + 32))(v116);
        }
        else if (v117)
        {
          (*(void (**)(void *))(*v117 + 40))(v117);
        }
        goto LABEL_19;
      }
      for (k = 0; ; unint64_t v34 = k + v45)
      {
        unint64_t v45 = v34 & v106;
        uint64_t v46 = *(void *)((char *)__p + v45);
        unint64_t v47 = ((v46 ^ v35) - 0x101010101010101) & ~(v46 ^ v35) & 0x8080808080808080;
        if (v47) {
          break;
        }
LABEL_34:
        if ((v46 & (~v46 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v48 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v32);
          uint64_t v33 = v105;
          *(void *)(v105 + 12 * v48) = v100;
          goto LABEL_37;
        }
        k += 8;
      }
      while (1)
      {
        unint64_t v48 = (v45 + (__clz(__rbit64(v47)) >> 3)) & v106;
        if (*(void *)(v105 + 12 * v48) == v31) {
          break;
        }
        v47 &= v47 - 1;
        if (!v47) {
          goto LABEL_34;
        }
      }
LABEL_37:
      int v49 = *(_DWORD *)(v33 + 12 * v48 + 8);
      uint64_t v50 = *a1;
      uint64_t v51 = a1[1];
      int v112 = v30 ^ 1;
      int v113 = v49;
      uint64_t v115 = 0;
      uint64_t v52 = operator new(0x28uLL);
      *uint64_t v52 = &unk_26F0BFB30;
      v52[1] = v50;
      v52[2] = (v51 - v50) >> 2;
      unint64_t v52[3] = &v112;
      v52[4] = 2;
      uint64_t v115 = v52;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v52 + 1), v7);
      if (v115 == v114)
      {
        (*(void (**)(void *))(v114[0] + 32))(v114);
      }
      else if (v115)
      {
        (*(void (**)(void *))(*v115 + 40))(v115);
      }
      uint64_t v53 = *a1;
      uint64_t v54 = a1[1];
      int v112 = v30;
      int v113 = v49 ^ 1;
      uint64_t v111 = 0;
      unint64_t v55 = operator new(0x28uLL);
      *unint64_t v55 = &unk_26F0BFB30;
      v55[1] = v53;
      v55[2] = (v54 - v53) >> 2;
      v55[3] = &v112;
      v55[4] = 2;
      uint64_t v111 = v55;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v55 + 1), v7);
      a6 = v96;
      if (v111 == v110)
      {
        (*(void (**)(void *))(v110[0] + 32))(v110);
      }
      else if (v111)
      {
        (*(void (**)(void))(*v111 + 40))();
      }
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::erase<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((uint64_t *)&__p, &v100);
LABEL_19:
      v27 += 12;
    }
    while (v27 != v28);
    long long v27 = v101;
  }
  if (v27)
  {
    uint64_t v102 = v27;
    operator delete(v27);
  }
  unint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v56 = v105;
  if (*(char *)__p > -2)
  {
    uint64_t v57 = (char *)__p;
    uint64_t v59 = (char *)__p + v106;
    if (__p != (char *)__p + (void)v106)
    {
LABEL_53:
      uint64_t v98 = v59;
      int v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      while (1)
      {
        int v63 = *(_DWORD *)(v56 + 8);
        if (v62 >= v61) {
          break;
        }
        *(_DWORD *)uint64_t v62 = v63;
        v62 += 4;
        uint64_t v102 = v62;
        int v64 = *++v57;
        v56 += 12;
        if (v64 <= -2) {
          goto LABEL_76;
        }
LABEL_54:
        if (v57 == v59)
        {
          uint64_t v84 = (int *)v101;
          goto LABEL_91;
        }
      }
      uint64_t v65 = (v62 - v60) >> 2;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v61 - v60) >> 1 > v66) {
        unint64_t v66 = (v61 - v60) >> 1;
      }
      if ((unint64_t)(v61 - v60) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        if (v67 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v68 = v67;
        uint64_t v69 = operator new(4 * v67);
        unint64_t v67 = v68;
        uint64_t v70 = &v69[4 * v65];
        *(_DWORD *)uint64_t v70 = v63;
        uint64_t v71 = (uint64_t)(v70 + 4);
        if (v62 == v60) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v70 = (char *)(4 * v65);
        *(_DWORD *)(4 * v65) = v63;
        uint64_t v71 = 4 * v65 + 4;
        if (v62 == v60) {
          goto LABEL_72;
        }
      }
      unint64_t v72 = v62 - 4 - v60;
      if (v72 >= 0xBC)
      {
        if (&v69[v62 - v60 - 4 - (v72 & 0xFFFFFFFFFFFFFFFCLL)] > &v69[v62 - v60 - 4])
        {
          int v73 = v62;
        }
        else if (&v62[-(v72 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v62 - 4)
        {
          int v73 = v62;
        }
        else if ((unint64_t)(v60 - v69) >= 0x20)
        {
          uint64_t v78 = (v72 >> 2) + 1;
          uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
          int v73 = &v62[-v79];
          v70 -= v79;
          uint64_t v80 = &v69[4 * v65 - 16];
          uint64_t v81 = v62 - 16;
          uint64_t v82 = v78 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v83 = *(_OWORD *)v81;
            *(v80 - 1) = *((_OWORD *)v81 - 1);
            *uint64_t v80 = v83;
            v80 -= 2;
            v81 -= 32;
            v82 -= 8;
          }
          while (v82);
          if (v78 == (v78 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_72;
          }
        }
        else
        {
          int v73 = v62;
        }
      }
      else
      {
        int v73 = v62;
      }
      do
      {
        int v74 = *((_DWORD *)v73 - 1);
        v73 -= 4;
        *((_DWORD *)v70 - 1) = v74;
        v70 -= 4;
      }
      while (v73 != v60);
LABEL_72:
      uint64_t v61 = &v69[4 * v67];
      unint64_t v101 = v70;
      uint64_t v102 = (char *)v71;
      uint64_t v103 = v61;
      if (v60)
      {
        uint64_t v62 = (char *)v71;
        BOOL v75 = &v69[4 * v67];
        operator delete(v60);
        uint64_t v61 = v75;
        int v60 = v70;
      }
      else
      {
        int v60 = v70;
        uint64_t v62 = (char *)v71;
      }
      uint64_t v59 = v98;
      uint64_t v102 = v62;
      int v76 = *++v57;
      v56 += 12;
      if (v76 > -2) {
        goto LABEL_54;
      }
      do
      {
LABEL_76:
        unint64_t v77 = (__clz(__rbit64(((*(void *)v57 >> 7) & ~*(void *)v57 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v57 += v77;
        v56 += 12 * v77;
      }
      while (*v57 < -1);
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v57 = (char *)__p;
    do
    {
      unint64_t v58 = (__clz(__rbit64(((*(void *)v57 >> 7) & ~*(void *)v57 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v57 += v58;
      v56 += 12 * v58;
    }
    while (*v57 < -1);
    uint64_t v59 = (char *)__p + v106;
    if (v57 != (char *)__p + (void)v106) {
      goto LABEL_53;
    }
  }
  uint64_t v62 = 0;
  uint64_t v84 = 0;
LABEL_91:
  unint64_t v85 = 126 - 2 * __clz((v62 - (char *)v84) >> 2);
  if (v62 == (char *)v84) {
    uint64_t v86 = 0;
  }
  else {
    uint64_t v86 = v85;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v84, v62, (uint64_t)&v100, v86, 1);
  int v88 = v101;
  int v87 = v102;
  if (v101 != v102)
  {
    int v89 = v101;
    do
    {
      uint64_t v90 = *v99;
      uint64_t v91 = v99[1];
      LODWORD(v10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = *(_DWORD *)v89 ^ 1;
      int v109 = 0;
      int64_t v92 = operator new(0x28uLL);
      void *v92 = &unk_26F0BFB30;
      v92[1] = v90;
      v92[2] = (v91 - v90) >> 2;
      v92[3] = &v100;
      v92[4] = 1;
      int v109 = v92;
      operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v92 + 1), v7);
      if (v109 == v108)
      {
        (*(void (**)(void *))(v108[0] + 32))(v108);
      }
      else if (v109)
      {
        (*(void (**)(void))(*v109 + 40))();
      }
      v89 += 4;
    }
    while (v89 != v87);
  }
  if (v88) {
    operator delete(v88);
  }
  if ((void)v106)
  {
    operator delete(__p);
    std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v107 = 0;
    *(void *)&long long v106 = 0;
    long long v105 = 0uLL;
  }
  if (*((void *)&v106 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v106 + 1));
  }
}

void sub_23CC23D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::LoadEquivalenceNeqAC(uint64_t *a1, uint64_t a2, signed int a3, uint64_t a4, signed int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v12 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v12, a3))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1034);
    uint64_t v43 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var1) ", 52);
    goto LABEL_40;
  }
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v12, a5))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1035);
    uint64_t v44 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: encoder->VariableIsFullyEncoded(var2) ", 52);
LABEL_40:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a3, &v49);
  unint64_t v14 = v49;
  uint64_t v13 = v50;
  if (v49 != v50)
  {
    uint64_t v45 = a4;
    uint64_t v46 = a6;
    do
    {
      uint64_t v19 = 0;
      int v22 = *((_DWORD *)v14 + 2);
      uint64_t v23 = *(void *)v14 * a2;
      unint64_t v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v23)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v23));
      uint64_t v21 = v52;
      for (unint64_t i = (v24 >> 7) ^ ((unint64_t)__p >> 12); ; unint64_t i = v19 + v15)
      {
        unint64_t v15 = i & v53;
        uint64_t v16 = *(void *)((char *)__p + v15);
        unint64_t v17 = ((v16 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v16 ^ (0x101010101010101
                                                                                            * (v24 & 0x7F))) & 0x8080808080808080;
        if (v17) {
          break;
        }
LABEL_8:
        if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v18 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&__p, v24);
          uint64_t v21 = v52;
          *(void *)(v52 + 12 * v18) = v23;
          goto LABEL_11;
        }
        v19 += 8;
      }
      while (1)
      {
        unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v53;
        if (*(void *)(v52 + 12 * v18) == v23) {
          break;
        }
        v17 &= v17 - 1;
        if (!v17) {
          goto LABEL_8;
        }
      }
LABEL_11:
      *(_DWORD *)(v21 + 12 * v18 + 8) = v22;
      v14 += 12;
    }
    while (v14 != v13);
    unint64_t v14 = v49;
    a4 = v45;
    a6 = v46;
  }
  if (v14)
  {
    uint64_t v50 = v14;
    operator delete(v14);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a5, &v49);
  uint64_t v25 = v49;
  unint64_t v26 = v50;
  if (v49 != v50)
  {
    do
    {
      uint64_t v32 = 0;
      uint64_t v40 = a6 - *(void *)v25 * a4;
      unint64_t v41 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v40)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v40));
      unint64_t v33 = (v41 >> 7) ^ ((unint64_t)__p >> 12);
      uint64_t v42 = 0x101010101010101 * (v41 & 0x7F);
      while (1)
      {
        unint64_t v27 = v33 & v53;
        uint64_t v28 = *(void *)((char *)__p + v27);
        unint64_t v29 = ((v28 ^ v42) - 0x101010101010101) & ~(v28 ^ v42) & 0x8080808080808080;
        if (v29) {
          break;
        }
LABEL_21:
        if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_28;
        }
        v32 += 8;
        unint64_t v33 = v32 + v27;
      }
      while (1)
      {
        unint64_t v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v53;
        uint64_t v31 = v52 + 12 * v30;
        if (*(void *)v31 == v40) {
          break;
        }
        v29 &= v29 - 1;
        if (!v29) {
          goto LABEL_21;
        }
      }
      if (v30 != (void)v53)
      {
        uint64_t v34 = a4;
        uint64_t v35 = a6;
        uint64_t v36 = *a1;
        uint64_t v37 = a1[1];
        int v38 = *(_DWORD *)(v31 + 8) ^ 1;
        v55[0] = *((_DWORD *)v25 + 2) ^ 1;
        v55[1] = v38;
        uint64_t v57 = 0;
        unint64_t v39 = operator new(0x28uLL);
        void *v39 = &unk_26F0BFB30;
        v39[1] = v36;
        v39[2] = (v37 - v36) >> 2;
        v39[3] = v55;
        v39[4] = 2;
        uint64_t v57 = v39;
        operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v39 + 1), a7);
        a6 = v35;
        a4 = v34;
        if (v57 == v56)
        {
          (*(void (**)(void *))(v56[0] + 32))(v56);
        }
        else if (v57)
        {
          (*(void (**)(void))(*v57 + 40))();
        }
      }
LABEL_28:
      v25 += 12;
    }
    while (v25 != v26);
    uint64_t v25 = v49;
  }
  if (v25)
  {
    uint64_t v50 = v25;
    operator delete(v25);
  }
  if ((void)v53)
  {
    operator delete(__p);
    std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v54 = 0;
    *(void *)&long long v53 = 0;
    long long v52 = 0uLL;
  }
  if (*((void *)&v53 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v53 + 1));
  }
}

void sub_23CC2429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int64_t v8 = *(unsigned char **)a2;
  uint64_t v7 = *(unsigned char **)(a2 + 8);
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  std::string __p = 0;
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v10 = (int64x2_t *)operator new(v7 - v8);
    std::string __p = v10;
    unint64_t v18 = &v10->i8[8 * (v9 >> 3)];
    memmove(v10, v8, v9);
    unint64_t v17 = v18;
    int v11 = (uint64_t *)v10;
    if ((unint64_t)(v9 - 8) < 0x18) {
      goto LABEL_14;
    }
    unint64_t v12 = ((unint64_t)(v9 - 8) >> 3) + 1;
    int v11 = &v10->i64[v12 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v13 = v10 + 1;
    uint64_t v14 = v12 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v15 = vnegq_s64(*v13);
      v13[-1] = vnegq_s64(v13[-1]);
      *uint64_t v13 = v15;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        *int v11 = -*v11;
        ++v11;
      }
      while (v11 != (uint64_t *)((char *)v10 + 8 * (v9 >> 3)));
    }
  }
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(a1, (uint64_t **)&__p, -a3, a4);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_23CC24444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(unsigned int **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int64_t v8 = *a1;
  uint64_t v7 = a1[1];
  int v48 = 1;
  int64_t v9 = (char *)v7 - (char *)v8;
  v47[0] = v7 - v8;
  if (v7 == v8) {
    google::MakeCheckOpString<unsigned long,int>((int)v47, (int)&v48, "vars.size() >= 1");
  }
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 == 1)
  {
    uint64_t v36 = **a2;
    v47[0] = v36;
    int v48 = 0;
    if (!v36) {
      google::MakeCheckOpString<long long,int>((int)v47, (int)&v48, "c != 0");
    }
    if (v36 <= 0)
    {
      uint64_t v38 = *v8;
      uint64_t v39 = -a3 / -v36;
      *a4 = &unk_26F0C0B48;
      a4[1] = v38;
      if (-(v36 * v39) >= -a3) {
        uint64_t v30 = -a3 / -v36;
      }
      else {
        uint64_t v30 = v39 + 1;
      }
    }
    else
    {
      uint64_t v37 = *v8;
      *a4 = &unk_26F0C0AC8;
      a4[1] = v37;
      uint64_t v30 = a3 / v36 - (a3 / v36 * v36 > a3);
    }
    goto LABEL_50;
  }
  if (v10 != 2)
  {
    if (v10 == 3)
    {
      int v11 = *a2;
      uint64_t v12 = **a2;
      if (v12 == 1 || v12 == -1)
      {
        uint64_t v14 = v11[1];
        if (v14 == 1 || v14 == -1)
        {
          uint64_t v16 = v11[2];
          if (v16 == 1 || v16 == -1)
          {
            int v18 = *v8 ^ (v12 != 1);
            int v19 = v8[1] ^ (v14 != 1);
            int v20 = v8[2] ^ (v16 != 1);
            a4[3] = 0;
            uint64_t v21 = operator new(0x20uLL);
            *(void *)uint64_t v21 = &unk_26F0C0C48;
            v21[2] = v18;
            v21[3] = v20;
            *((void *)v21 + 2) = a3;
            v21[6] = v19;
            a4[3] = v21;
            return;
          }
        }
      }
    }
    goto LABEL_32;
  }
  uint64_t v22 = **a2;
  if (v22 == 1 || v22 == -1)
  {
    uint64_t v24 = (*a2)[1];
    if (v24 == 1 || v24 == -1)
    {
      BOOL v26 = v22 != 1;
      BOOL v27 = v24 != 1;
      unsigned int v28 = *v8;
      uint64_t v29 = v8[1] ^ v27;
      *a4 = &unk_26F0C0BC8;
      a4[1] = (v28 ^ v26 | (unint64_t)(v29 << 32)) ^ 0x100000000;
      uint64_t v30 = -a3;
LABEL_50:
      a4[2] = v30;
      a4[3] = a4;
      return;
    }
  }
LABEL_32:
  uint64_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  if (v7 != v8)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = (char *)operator new(v9);
    uint64_t v32 = &v31[4 * v10];
    uint64_t v40 = v31;
    uint64_t v42 = v32;
    memcpy(v31, v8, v9);
    unint64_t v41 = v32;
  }
  std::string __p = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v33 = *a2;
  int64_t v34 = (char *)a2[1] - (char *)*a2;
  if (v34)
  {
    if (v34 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v34);
    uint64_t v45 = (char *)__p + 8 * (v34 >> 3);
    memcpy(__p, v33, v34);
    uint64_t v44 = v45;
  }
  uint64_t v46 = a3;
  a4[3] = 0;
  uint64_t v35 = operator new(0x40uLL);
  void *v35 = &unk_26F0C0CC8;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v35 + 1, (uint64_t)&v40);
  a4[3] = v35;
  if (__p)
  {
    uint64_t v44 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }
}

void sub_23CC24810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC24818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC24820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_23CC2483C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC24850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(unsigned char **)a3;
  int64_t v9 = *(unsigned char **)(a3 + 8);
  int v19 = 0;
  int v20 = 0;
  std::string __p = 0;
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (int64x2_t *)operator new(v9 - v10);
    std::string __p = v12;
    int v20 = &v12->i8[8 * (v11 >> 3)];
    memmove(v12, v10, v11);
    int v19 = v20;
    uint64_t v13 = (uint64_t *)v12;
    if ((unint64_t)(v11 - 8) < 0x18) {
      goto LABEL_14;
    }
    unint64_t v14 = ((unint64_t)(v11 - 8) >> 3) + 1;
    uint64_t v13 = &v12->i64[v14 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v15 = v12 + 1;
    uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v17 = vnegq_s64(*v15);
      v15[-1] = vnegq_s64(v15[-1]);
      *int64x2_t v15 = v17;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        *uint64_t v13 = -*v13;
        ++v13;
      }
      while (v13 != (uint64_t *)((char *)v12 + 8 * (v11 >> 3)));
    }
  }
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(a1, a2, (uint64_t **)&__p, -a4, a5);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
}

void sub_23CC249A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a2;
  int64_t v9 = a2[1];
  int v67 = 1;
  int64_t v11 = v9 - v10;
  *(void *)&long long v68 = (v9 - v10) >> 2;
  if (v9 == v10) {
    google::MakeCheckOpString<unsigned long,int>((int)&v68, (int)&v67, "vars.size() >= 1");
  }
  uint64_t v12 = v11 >> 2;
  if (v11 >> 2 == 1)
  {
    uint64_t v43 = *a3;
    *(void *)&long long v68 = **a3;
    int v67 = 0;
    if (!(void)v68) {
      google::MakeCheckOpString<long long,int>((int)&v68, (int)&v67, "coefficients[0] != 0");
    }
    uint64_t v44 = *v43;
    if (*v43 <= 0)
    {
      uint64_t v51 = -a4 / -v44;
      if (-(v44 * v51) >= -a4) {
        uint64_t v52 = -a4 / -v44;
      }
      else {
        uint64_t v52 = v51 + 1;
      }
      LODWORD(v68) = *(_DWORD *)*a2;
      *(void *)((char *)&v68 + 4) = v52;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v69 = 0;
      long long v53 = *(const void **)a1;
      int64_t v54 = *(void *)(a1 + 8) - *(void *)a1;
      if (v54)
      {
        if (v54 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v55 = (char *)operator new(v54);
        uint64_t v56 = &v55[4 * (v54 >> 2)];
        uint64_t v69 = v55;
        uint64_t v71 = v56;
        memcpy(v55, v53, v54);
        uint64_t v70 = v56;
      }
    }
    else
    {
      uint64_t v45 = a4 / v44 - (a4 / v44 * v44 > a4);
      if (v45 >= (uint64_t)0x8000000000000002) {
        uint64_t v46 = -v45;
      }
      else {
        uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
      }
      LODWORD(v68) = *(_DWORD *)*a2 ^ 1;
      *(void *)((char *)&v68 + 4) = v46;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v69 = 0;
      unint64_t v47 = *(const void **)a1;
      int64_t v48 = *(void *)(a1 + 8) - *(void *)a1;
      if (v48)
      {
        if (v48 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int v49 = (char *)operator new(v48);
        uint64_t v50 = &v49[4 * (v48 >> 2)];
        uint64_t v69 = v49;
        uint64_t v71 = v50;
        memcpy(v49, v47, v48);
        uint64_t v70 = v50;
      }
    }
    std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>>(a5, (uint64_t *)&v68);
    goto LABEL_72;
  }
  if (v12 == 2)
  {
    uint64_t v28 = **a3;
    BOOL v29 = v28 == 1 || v28 == -1;
    if (!v29 || ((v30 = (*a3)[1], v30 != 1) ? (BOOL v31 = v30 == -1) : (BOOL v31 = 1), !v31))
    {
LABEL_39:
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      if (v9 != v10)
      {
        if (v11 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v57 = (char *)operator new(v11);
        uint64_t v59 = &v57[4 * v12];
        memcpy(v57, v10, v11);
        uint64_t v58 = v59;
      }
      int v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v38 = *a3;
      int64_t v39 = (char *)a3[1] - (char *)*a3;
      if (v39)
      {
        if (v39 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int v60 = operator new(v39);
        uint64_t v62 = (char *)v60 + 8 * (v39 >> 3);
        memcpy(v60, v38, v39);
        uint64_t v61 = v62;
      }
      uint64_t v63 = a4;
      std::string __p = 0;
      uint64_t v65 = 0;
      unint64_t v66 = 0;
      uint64_t v40 = *(const void **)a1;
      int64_t v41 = *(void *)(a1 + 8) - *(void *)a1;
      if (v41)
      {
        if (v41 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(v41);
        unint64_t v66 = (char *)__p + 4 * (v41 >> 2);
        memcpy(__p, v40, v41);
        uint64_t v65 = v66;
      }
      *(void *)(a5 + 24) = 0;
      uint64_t v42 = operator new(0x58uLL);
      *uint64_t v42 = &unk_26F0C0F10;
      operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v42 + 1, (uint64_t)&v57);
      *(void *)(a5 + 24) = v42;
      if (__p)
      {
        uint64_t v65 = __p;
        operator delete(__p);
      }
      if (v60)
      {
        uint64_t v61 = v60;
        operator delete(v60);
      }
      BOOL v27 = v57;
      if (v57)
      {
        uint64_t v58 = v57;
        goto LABEL_74;
      }
      return;
    }
    BOOL v32 = v28 != 1;
    int v33 = *((_DWORD *)v10 + 1) ^ (v30 != 1);
    LODWORD(v68) = *(_DWORD *)v10 ^ v32;
    DWORD1(v68) = v33;
    *((void *)&v68 + 1) = a4;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int64_t v34 = *(const void **)a1;
    int64_t v35 = *(void *)(a1 + 8) - *(void *)a1;
    if (v35)
    {
      if (v35 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = (char *)operator new(v35);
      uint64_t v37 = &v36[4 * (v35 >> 2)];
      uint64_t v69 = v36;
      uint64_t v71 = v37;
      memcpy(v36, v34, v35);
      uint64_t v70 = v37;
    }
    std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>>(a5, &v68);
LABEL_72:
    BOOL v27 = v69;
    if (!v69) {
      return;
    }
    uint64_t v70 = v69;
    goto LABEL_74;
  }
  if (v12 != 3) {
    goto LABEL_39;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = **a3;
  if (v14 != 1 && v14 != -1) {
    goto LABEL_39;
  }
  uint64_t v16 = v13[1];
  if (v16 != 1 && v16 != -1) {
    goto LABEL_39;
  }
  uint64_t v18 = v13[2];
  if (v18 != 1 && v18 != -1) {
    goto LABEL_39;
  }
  BOOL v20 = v16 != 1;
  int v21 = *((_DWORD *)v10 + 1);
  int v22 = *((_DWORD *)v10 + 2) ^ (v18 != 1);
  LODWORD(v68) = *(_DWORD *)v10 ^ (v14 != 1);
  DWORD1(v68) = v22;
  *((void *)&v68 + 1) = a4;
  LODWORD(v69) = v21 ^ v20;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  uint64_t v70 = 0;
  uint64_t v23 = *(const void **)a1;
  int64_t v24 = *(void *)(a1 + 8) - *(void *)a1;
  if (v24)
  {
    if (v24 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (char *)operator new(v24);
    BOOL v26 = &v25[4 * (v24 >> 2)];
    uint64_t v70 = v25;
    unint64_t v72 = v26;
    memcpy(v25, v23, v24);
    uint64_t v71 = v26;
  }
  std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>>(a5, (uint64_t)&v68);
  BOOL v27 = v70;
  if (v70)
  {
    uint64_t v71 = (char *)v70;
LABEL_74:
    operator delete(v27);
  }
}

void sub_23CC24F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC24F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC24F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void operations_research::sat::LoadAllDiffConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  __n128 v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 13) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  int64_t v9 = (signed int *)__p;
  uint64_t v10 = v18;
  if (__p == v18)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = v8;
    int v12 = 0;
    uint64_t v13 = 0;
    do
    {
      signed int v14 = *v9;
      v12 += operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v11, *v9);
      if (v13 <= 1
                - *(void *)(*(void *)(v7 + 40) + 12 * v14)
                - *(void *)(*(void *)(v7 + 40) + 12 * (v14 ^ 1)))
        uint64_t v13 = 1
            - *(void *)(*(void *)(v7 + 40) + 12 * v14)
            - *(void *)(*(void *)(v7 + 40) + 12 * (v14 ^ 1));
      ++v9;
    }
    while (v9 != v10);
    if (v12 != ((char *)v18 - (unsigned char *)__p) >> 2)
    {
LABEL_17:
      operations_research::sat::AllDifferentOnBounds((uint64_t)&__p, (uint64_t)v20);
      int v19 = a2;
      if (!v21) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v21 + 48))(v21, &v19);
      int64x2_t v15 = v21;
      if (v21 == v20)
      {
        (*(void (**)(void *))(v20[0] + 32))(v20);
        uint64_t v16 = (signed int *)__p;
        if (!__p) {
          return;
        }
        goto LABEL_27;
      }
LABEL_24:
      if (v15) {
        (*(void (**)(void *))(*v15 + 40))(v15);
      }
      uint64_t v16 = (signed int *)__p;
      if (__p) {
        goto LABEL_27;
      }
      return;
    }
  }
  if (v13 >= 1024) {
    goto LABEL_17;
  }
  operations_research::sat::AllDifferentBinary((uint64_t)&__p, (uint64_t)v24);
  int v19 = a2;
  if (!v25) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v25 + 48))(v25, &v19);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  operations_research::sat::AllDifferentAC((uint64_t)&__p, (uint64_t)v22);
  int v19 = a2;
  if (!v23) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v23 + 48))(v23, &v19);
  int64x2_t v15 = v23;
  if (v23 != v22) {
    goto LABEL_24;
  }
  (*(void (**)(void *))(v22[0] + 32))(v22);
  uint64_t v16 = (signed int *)__p;
  if (__p)
  {
LABEL_27:
    uint64_t v18 = v16;
    operator delete(v16);
  }
}

void sub_23CC25418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadIntProdConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  __n128 v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 11) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7) {
    int v8 = *((_DWORD *)v6 + 9);
  }
  else {
    int v8 = ~v7;
  }
  int v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  uint64_t v11 = (v14 - (uint64_t)__p) >> 2;
  int v12 = 2;
  if (v14 - (void)__p == 8)
  {
    uint64_t v10 = *(void *)__p;
    int64x2_t v15 = &unk_26F0BFCC0;
    uint64_t v16 = v10;
    int v17 = v9 ^ (v7 >> 31);
    uint64_t v18 = &v15;
    operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)&v16, (uint64_t)a2);
  }
  google::MakeCheckOpString<unsigned long,int>((int)&v11, (int)&v12, "vars.size() == 2");
}

void sub_23CC25650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CC25658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadIntDivConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  __n128 v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 7) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7) {
    int v8 = *((_DWORD *)v6 + 9);
  }
  else {
    int v8 = ~v7;
  }
  int v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)__p);
  int v10 = *((_DWORD *)__p[0] + 1);
  int64_t v34 = &unk_26F0BFEC0;
  int v35 = v10;
  uint64_t v36 = &v34;
  uint64_t v11 = (char *)a2 + 32;
  int v12 = (void *)*((void *)a2 + 4);
  do
  {
    unint64_t v13 = v12[4];
    BOOL v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      int64x2_t v15 = v12;
    }
    else {
      int64x2_t v15 = v12 + 1;
    }
    if (v14) {
      uint64_t v11 = (char *)v12;
    }
    int v12 = (void *)*v15;
  }
  while (*v15);
  uint64_t v16 = v9 ^ (v7 >> 31);
  if (*(void *)(*(void *)(*((void *)v11 + 5) + 40) + 12 * v10)
     + *(void *)(*(void *)(*((void *)v11 + 5) + 40) + 12 * (v10 ^ 1)))
  {
    uint64_t v19 = *(void *)__p[0];
    int v22 = &unk_26F0C0188;
    uint64_t v23 = v19;
    int v24 = v16;
    uint64_t v25 = &v22;
    operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)&v23, (uint64_t)a2);
  }
  BOOL v31 = (void (**)(void **))&unk_26F0BFF50;
  v32[0] = v10;
  int v33 = (void **)&v31;
  uint64_t v17 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v32, (uint64_t)a2);
  if (v33 == (void **)&v31)
  {
    v31[4]((void **)&v31);
    unint64_t v18 = *(unsigned int *)__p[0] | (unint64_t)(v16 << 32);
    if (v17 == 1) {
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v26 = &unk_26F0C00D0;
    v27[0] = v17;
    v27[1] = v18;
    v27[2] = &v26;
    operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)v27, (uint64_t)a2);
  }
  if (v33) {
    (*((void (**)(void))*v33 + 5))();
  }
  unint64_t v18 = *(unsigned int *)__p[0] | (unint64_t)(v16 << 32);
  if (v17 != 1) {
    goto LABEL_24;
  }
LABEL_20:
  uint64_t v28 = (void (**)(void **))&unk_26F0BFFD0;
  *(void *)BOOL v29 = v18;
  uint64_t v30 = (void **)&v28;
  operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(v29, (uint64_t)a2);
  if (v30 == (void **)&v28)
  {
    v28[4]((void **)&v28);
    goto LABEL_28;
  }
  if (!v30)
  {
LABEL_28:
    BOOL v20 = __p[0];
    if (!__p[0]) {
      return;
    }
    goto LABEL_29;
  }
  (*((void (**)(void **))*v30 + 5))(v30);
  BOOL v20 = __p[0];
  if (__p[0])
  {
LABEL_29:
    __p[1] = v20;
    operator delete(v20);
  }
}

void sub_23CC25A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(operations_research::sat::Model const&)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<long long ()(operations_research::sat::Model const&)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void operations_research::sat::LoadIntMinConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __n128 v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 10) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7) {
    int v8 = *((_DWORD *)v6 + 9);
  }
  else {
    int v8 = ~v7;
  }
  int v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  int v10 = __p;
  int64_t v11 = v22 - (unsigned char *)__p;
  if (v22 == __p)
  {
    unint64_t v13 = 0;
    int v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v12 = (const operations_research::sat::ConstraintProto *)operator new(v22 - (unsigned char *)__p);
    unint64_t v13 = (const operations_research::sat::ConstraintProto *)((char *)v12 + 4 * (v11 >> 2));
    uint64_t v23 = v12;
    uint64_t v25 = v13;
    memcpy(v12, v10, v11);
    int v24 = v13;
  }
  int v14 = v9 ^ (v7 >> 31);
  int v26 = v14;
  uint64_t v28 = 0;
  int64x2_t v15 = operator new(0x28uLL);
  uint64_t v16 = (void (**)(void *, const operations_research::sat::ConstraintProto **))&unk_26F0C0240;
  *int64x2_t v15 = &unk_26F0C0240;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = 0;
  uint64_t v17 = v13 - v12;
  if (v13 != v12)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = (char *)operator new(v13 - v12);
    v15[1] = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    v15[3] = v19;
    memcpy(v18, v12, v13 - v12);
    v15[2] = v19;
  }
  *((_DWORD *)v15 + 8) = v14;
  uint64_t v28 = v15;
  if (v12)
  {
    operator delete(v12);
    int64x2_t v15 = v28;
    uint64_t v23 = a2;
    if (!v28) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v16 = (void (**)(void *, const operations_research::sat::ConstraintProto **))*v28;
  }
  else
  {
    uint64_t v23 = a2;
  }
  v16[6](v15, &v23);
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
    BOOL v20 = __p;
    if (__p)
    {
LABEL_22:
      int v22 = v20;
      operator delete(v20);
    }
  }
  else
  {
    if (v28) {
      (*(void (**)(void))(*v28 + 40))();
    }
    BOOL v20 = __p;
    if (__p) {
      goto LABEL_22;
    }
  }
}

void sub_23CC25E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GetExprFromProto(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = 0;
  *(_OWORD *)BOOL v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)std::string __p = 0u;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(a2, (int *)(a1 + 16), (int **)&v28);
  uint64_t v27 = a3;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v28;
  v31[0] = v29;
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = (char *)v32;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8 * v6);
      if ((unint64_t)v7 >= *((void *)&v32 + 1)) {
        break;
      }
      *(void *)int v7 = v9;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_6:
      *(void *)&long long v32 = v8;
      ++v6;
      int v7 = (char *)v8;
      if (v6 >= v5) {
        goto LABEL_34;
      }
    }
    int v10 = (char *)v31[1];
    int64_t v11 = v7 - (char *)v31[1];
    uint64_t v12 = (v7 - (char *)v31[1]) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v14 = *((void *)&v32 + 1) - (unint64_t)v31[1];
    if ((uint64_t)(*((void *)&v32 + 1) - (unint64_t)v31[1]) >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = operator new(8 * v15);
      uint64_t v17 = &v16[8 * v12];
      *uint64_t v17 = v9;
      uint64_t v8 = (uint64_t)(v17 + 1);
      if (v7 == v10) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (void *)(8 * v12);
      *(void *)(8 * v12) = v9;
      uint64_t v8 = 8 * v12 + 8;
      if (v7 == v10) {
        goto LABEL_22;
      }
    }
    unint64_t v18 = v7 - 8 - v10;
    if (v18 >= 0x168)
    {
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        uint64_t v19 = v7;
      }
      else if (&v7[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
      {
        uint64_t v19 = v7;
      }
      else if ((unint64_t)(v7 - &v16[v11]) >= 0x20)
      {
        uint64_t v21 = (v18 >> 3) + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v19 = &v7[-v22];
        uint64_t v17 = (void *)((char *)v17 - v22);
        uint64_t v23 = &v16[8 * v12 - 16];
        int v24 = v7 - 16;
        uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *uint64_t v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          v31[1] = v17;
          *(void *)&long long v32 = v8;
          *((void *)&v32 + 1) = &v16[8 * v15];
          if (v10)
          {
            operator delete(v10);
            int v5 = *(_DWORD *)(a1 + 40);
          }
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v19 = v7;
      }
    }
    else
    {
      uint64_t v19 = v7;
    }
    do
    {
      uint64_t v20 = *((void *)v19 - 1);
      v19 -= 8;
      *--uint64_t v17 = v20;
    }
    while (v19 != v10);
    goto LABEL_22;
  }
LABEL_34:
  uint64_t v33 = *(void *)(a1 + 64);
  operations_research::sat::CanonicalizeExpr(__p, v27);
  if (v31[1])
  {
    *(void **)&long long v32 = v31[1];
    operator delete(v31[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23CC26128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC2613C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC26150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC26164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadLinMaxConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 27) {
    uint64_t v6 = (void *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  }
  int v7 = (uint64_t *)v6[5];
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = &operations_research::sat::_LinearExpressionProto_default_instance_;
  }
  operations_research::sat::GetExprFromProto((uint64_t)v8, v5, (uint64_t)v30);
  uint64_t v27 = 0;
  long long v28 = 0;
  unint64_t v29 = 0;
  if (*((_DWORD *)this + 15) == 27) {
    uint64_t v9 = (int *)*((void *)this + 6);
  }
  else {
    uint64_t v9 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
  }
  std::vector<operations_research::sat::LinearExpression>::reserve((char **)&v27, v9[6]);
  uint64_t v10 = 0;
  while (*((_DWORD *)this + 15) == 27)
  {
    int64_t v11 = (int *)*((void *)this + 6);
    if (v10 >= v11[6]) {
      goto LABEL_27;
    }
LABEL_17:
    operations_research::sat::GetExprFromProto(*(void *)(*((void *)v11 + 4) + 8 * v10 + 8), v5, (uint64_t)v19);
    operations_research::sat::NegationOf((uint64_t)v19, (uint64_t)v22);
    uint64_t v12 = v28;
    if ((unint64_t)v28 >= v29)
    {
      long long v28 = std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(&v27, (uint64_t)v22);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *((void *)v28 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v22;
      *((void *)v12 + 2) = v23;
      v22[0] = 0;
      v22[1] = 0;
      uint64_t v23 = 0;
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 5) = 0;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)__p;
      *((void *)v12 + 5) = v25;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v25 = 0;
      *((void *)v12 + 6) = v26;
      long long v28 = v12 + 56;
    }
    if (v22[0])
    {
      v22[1] = v22[0];
      operator delete(v22[0]);
    }
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    ++v10;
  }
  if (v10 < dword_26AEE1850)
  {
    int64_t v11 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
    goto LABEL_17;
  }
LABEL_27:
  operations_research::sat::NegationOf((uint64_t)v30, (uint64_t)v22);
  operations_research::sat::IsEqualToMinOf((uint64_t)v22, (uint64_t *)&v27, (uint64_t)v33);
  v19[0] = a2;
  if (!v34) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, void **))(*v34 + 48))(v34, v19);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
    unint64_t v13 = __p[0];
    if (__p[0]) {
      goto LABEL_32;
    }
  }
  else
  {
    if (v34) {
      (*(void (**)(void))(*v34 + 40))();
    }
    unint64_t v13 = __p[0];
    if (__p[0])
    {
LABEL_32:
      __p[1] = v13;
      operator delete(v13);
    }
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  int64_t v14 = (char *)v27;
  if (v27)
  {
    unint64_t v15 = v28;
    uint64_t v16 = v27;
    if (v28 != v27)
    {
      do
      {
        uint64_t v17 = (void *)*((void *)v15 - 4);
        if (v17)
        {
          *((void *)v15 - 3) = v17;
          operator delete(v17);
        }
        unint64_t v18 = (void *)*((void *)v15 - 7);
        if (v18)
        {
          *((void *)v15 - 6) = v18;
          operator delete(v18);
        }
        v15 -= 56;
      }
      while (v15 != v14);
      uint64_t v16 = v27;
    }
    long long v28 = v14;
    operator delete(v16);
  }
  if (v31)
  {
    long long v32 = v31;
    operator delete(v31);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void sub_23CC264D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
}

void std::vector<operations_research::sat::LinearExpression>::reserve(char **a1, unint64_t a2)
{
  int v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 56 * a2;
  uint64_t v6 = (char *)operator new(56 * a2);
  int v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    int64_t v11 = &v4[v9];
    *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
    *((void *)v10 - 5) = *(void *)&v4[v9 - 40];
    *((void *)v11 - 7) = 0;
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 32];
    uint64_t v12 = *(void *)&v4[v9 - 8];
    *((void *)v10 - 2) = *(void *)&v4[v9 - 16];
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v10 - 1) = v12;
    v9 -= 56;
  }
  while (&v4[v9] != v2);
  unint64_t v13 = *a1;
  int v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v13)
  {
    do
    {
      int64_t v14 = (void *)*((void *)v2 - 4);
      if (v14)
      {
        *((void *)v2 - 3) = v14;
        operator delete(v14);
      }
      unint64_t v15 = (void *)*((void *)v2 - 7);
      if (v15)
      {
        *((void *)v2 - 6) = v15;
        operator delete(v15);
      }
      v2 -= 56;
    }
    while (v2 != v13);
    int v2 = v13;
  }
  if (v2)
  {
LABEL_15:
    operator delete(v2);
  }
}

void operations_research::sat::IsEqualToMinOf(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::sat::LinearExpression::LinearExpression(v10, a1);
  std::string __p = 0;
  int64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(&__p, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>>(a3, (uint64_t)v10);
  uint64_t v5 = (char *)__p;
  if (__p)
  {
    uint64_t v6 = v14;
    int v7 = __p;
    if (v14 != __p)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 4);
        if (v8)
        {
          *((void *)v6 - 3) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 - 7);
        if (v9)
        {
          *((void *)v6 - 6) = v9;
          operator delete(v9);
        }
        v6 -= 56;
      }
      while (v6 != v5);
      int v7 = __p;
    }
    int64_t v14 = v5;
    operator delete(v7);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
}

void sub_23CC267B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CC267C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::LinearExpression>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 7);
        if (v6)
        {
          *((void *)v3 - 6) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LoadIntMaxConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 9) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  }
  int v7 = *((_DWORD *)v6 + 9);
  if (~v7 <= v7) {
    int v8 = *((_DWORD *)v6 + 9);
  }
  else {
    int v8 = ~v7;
  }
  int v9 = *(_DWORD *)(*v5 + 4 * v8);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&__p);
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v10 = __p;
  int64_t v11 = v22 - (unsigned char *)__p;
  if (v22 == __p)
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (const operations_research::sat::ConstraintProto *)operator new(v22 - (unsigned char *)__p);
    unint64_t v13 = (const operations_research::sat::ConstraintProto *)((char *)v12 + 4 * (v11 >> 2));
    uint64_t v23 = v12;
    uint64_t v25 = v13;
    memcpy(v12, v10, v11);
    int v24 = v13;
  }
  int v14 = v9 ^ (v7 >> 31);
  int v26 = v14;
  long long v28 = 0;
  uint64_t v15 = operator new(0x28uLL);
  uint64_t v16 = (void (**)(void *, const operations_research::sat::ConstraintProto **))&unk_26F0C0430;
  *uint64_t v15 = &unk_26F0C0430;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = 0;
  uint64_t v17 = v13 - v12;
  if (v13 != v12)
  {
    if (v17 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = (char *)operator new(v13 - v12);
    v15[1] = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    v15[3] = v19;
    memcpy(v18, v12, v13 - v12);
    v15[2] = v19;
  }
  *((_DWORD *)v15 + 8) = v14;
  long long v28 = v15;
  if (v12)
  {
    operator delete(v12);
    uint64_t v15 = v28;
    uint64_t v23 = a2;
    if (!v28) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v16 = (void (**)(void *, const operations_research::sat::ConstraintProto **))*v28;
  }
  else
  {
    uint64_t v23 = a2;
  }
  v16[6](v15, &v23);
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
    uint64_t v20 = __p;
    if (__p)
    {
LABEL_22:
      uint64_t v22 = v20;
      operator delete(v20);
    }
  }
  else
  {
    if (v28) {
      (*(void (**)(void))(*v28 + 40))();
    }
    uint64_t v20 = __p;
    if (__p) {
      goto LABEL_22;
    }
  }
}

void sub_23CC26AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadNoOverlapConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 20) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (char **)__p);
  operations_research::sat::Disjunctive((uint64_t)__p, (uint64_t)v10);
  int v9 = a2;
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v11 + 48))(v11, &v9);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
    int v7 = __p[0];
    if (__p[0])
    {
LABEL_9:
      __p[1] = v7;
      operator delete(v7);
    }
  }
  else
  {
    if (v11) {
      (*(void (**)(void))(*v11 + 40))();
    }
    int v7 = __p[0];
    if (__p[0]) {
      goto LABEL_9;
    }
  }
}

void sub_23CC26C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(operations_research::sat::CpModelMapping *a1@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = (int *)*((void *)a2 + 1);
    uint64_t v10 = &v9[v4];
    long long v28 = v10;
    while (1)
    {
      while (1)
      {
        int v11 = operations_research::sat::CpModelMapping::Interval(v5, *v9);
        int v12 = v11;
        if (v8 >= v7) {
          break;
        }
        *(_DWORD *)int v8 = v11;
        v8 += 4;
        a3[1] = v8;
        if (++v9 == v10) {
          return;
        }
      }
      uint64_t v13 = (v8 - v6) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v7 - v6) >> 1 > v14) {
        unint64_t v14 = (v7 - v6) >> 1;
      }
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = operator new(4 * v15);
        uint64_t v17 = &v16[4 * v13];
        *(_DWORD *)uint64_t v17 = v12;
        uint64_t v18 = (uint64_t)(v17 + 4);
        if (v8 == v6) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = (char *)(4 * v13);
        *(_DWORD *)(4 * v13) = v12;
        uint64_t v18 = 4 * v13 + 4;
        if (v8 == v6) {
          goto LABEL_19;
        }
      }
      unint64_t v19 = v8 - 4 - v6;
      if (v19 < 0xBC)
      {
        uint64_t v20 = v8;
        goto LABEL_18;
      }
      if (&v16[v8 - v6 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v8 - v6 - 4]) {
        break;
      }
      if (&v8[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
      {
        uint64_t v20 = v8;
        goto LABEL_18;
      }
      if ((unint64_t)(v6 - v16) < 0x20)
      {
        uint64_t v20 = v8;
        goto LABEL_18;
      }
      uint64_t v22 = (v19 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v20 = &v8[-v23];
      v17 -= v23;
      int v24 = &v16[4 * v13 - 16];
      uint64_t v25 = v8 - 16;
      uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        _OWORD *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_18;
      }
LABEL_19:
      int v7 = &v16[4 * v15];
      *a3 = v17;
      a3[1] = (char *)v18;
      a3[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v17;
      uint64_t v10 = v28;
      uint64_t v5 = a1;
      a3[1] = (char *)v18;
      ++v9;
      int v8 = (char *)v18;
      if (v9 == v28) {
        return;
      }
    }
    uint64_t v20 = v8;
    do
    {
LABEL_18:
      int v21 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v17 - 1) = v21;
      v17 -= 4;
    }
    while (v20 != v6);
    goto LABEL_19;
  }
}

void sub_23CC26EFC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadNoOverlap2dConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 15) == 21) {
    unint64_t v3 = (uint64_t *)*((void *)this + 6);
  }
  else {
    unint64_t v3 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  }
  if (*((_DWORD *)v3 + 4))
  {
    uint64_t v6 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
    int v7 = v6;
    if (*((_DWORD *)this + 15) == 21) {
      int v8 = (uint64_t *)*((void *)this + 6);
    }
    else {
      int v8 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
    }
    operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v6, (int *)v8 + 4, (char **)v13);
    if (*((_DWORD *)this + 15) == 21) {
      int v9 = (uint64_t *)*((void *)this + 6);
    }
    else {
      int v9 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
    }
    operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v7, (int *)v9 + 10, (char **)__p);
    if (*((_DWORD *)this + 15) == 21) {
      uint64_t v10 = (uint64_t *)*((void *)this + 6);
    }
    else {
      uint64_t v10 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
    }
    operations_research::sat::NonOverlappingRectangles((uint64_t)v13, (uint64_t)__p, *((unsigned char *)v10 + 60) == 0, (uint64_t)v15);
    unint64_t v14 = a2;
    if (!v16) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v16 + 48))(v16, &v14);
    if (v16 == v15)
    {
      (*(void (**)(void *))(v15[0] + 32))(v15);
      int v11 = __p[0];
      if (!__p[0])
      {
LABEL_20:
        if (v13[0])
        {
          v13[1] = v13[0];
          operator delete(v13[0]);
        }
        return;
      }
    }
    else
    {
      if (v16) {
        (*(void (**)(void))(*v16 + 40))();
      }
      int v11 = __p[0];
      if (!__p[0]) {
        goto LABEL_20;
      }
    }
    __p[1] = v11;
    operator delete(v11);
    goto LABEL_20;
  }
}

void sub_23CC270E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a12) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectangles(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  int v8 = *(const void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  int64_t v9 = v7 - *(void *)a1;
  if (v7 != *(void *)a1)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a1);
    int v11 = &v10[4 * (v9 >> 2)];
    uint64_t v17 = v10;
    unint64_t v19 = v11;
    memcpy(v10, v8, v9);
    uint64_t v18 = v11;
  }
  std::string __p = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  int v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = (char *)operator new(v13);
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    std::string __p = v14;
    uint64_t v22 = v15;
    memcpy(v14, v12, v13);
    int v21 = v15;
  }
  char v23 = a3;
  *(void *)(a4 + 24) = 0;
  uint64_t v16 = operator new(0x40uLL);
  *uint64_t v16 = &unk_26F0C0530;
  operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v16 + 1), (uint64_t)&v17);
  *(void *)(a4 + 24) = v16;
  if (__p)
  {
    int v21 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
}

void sub_23CC27270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_23CC2728C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC272A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadCumulativeConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v3 = (int *)a2;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v5 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  uint64_t v6 = v5;
  int v8 = *((_DWORD *)this + 15);
  uint64_t v7 = (_DWORD *)((char *)this + 60);
  if (v8 == 22) {
    int64_t v9 = *(uint64_t **)(v7 - 3);
  }
  else {
    int64_t v9 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v5, (int *)v9 + 4, (char **)v40);
  if (*v7 == 22) {
    uint64_t v10 = *(uint64_t **)(v7 - 3);
  }
  else {
    uint64_t v10 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
  }
  int v11 = *((_DWORD *)v10 + 15);
  if (~v11 <= v11) {
    int v12 = *((_DWORD *)v10 + 15);
  }
  else {
    int v12 = ~v11;
  }
  int v13 = *(_DWORD *)(*(void *)v6 + 4 * v12);
  std::string __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v6, (int *)v10 + 10, &v35);
  unint64_t v14 = v35;
  unint64_t v15 = v36;
  if (v35 != v36)
  {
    int v30 = v13;
    int v31 = v11;
    long long v32 = v3;
    uint64_t v16 = v38;
    do
    {
      int v18 = *v14;
      if ((unint64_t)v16 < v39)
      {
        *(_DWORD *)uint64_t v16 = v18;
        *(_OWORD *)(v16 + 4) = xmmword_23CE7E610;
        uint64_t v17 = v16 + 20;
      }
      else
      {
        unint64_t v19 = (char *)__p;
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)__p) >> 2);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v39 - (void)__p) >> 2) > v21) {
          unint64_t v21 = 0x999999999999999ALL * ((uint64_t)(v39 - (void)__p) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - (void)__p) >> 2) >= 0x666666666666666) {
          unint64_t v22 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 > 0xCCCCCCCCCCCCCCCLL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v23 = (char *)operator new(20 * v22);
        }
        else
        {
          char v23 = 0;
        }
        int v24 = &v23[20 * v20];
        *(_DWORD *)int v24 = v18;
        *(_OWORD *)(v24 + 4) = xmmword_23CE7E610;
        uint64_t v25 = v24;
        if (v16 != v19)
        {
          do
          {
            long long v26 = *(_OWORD *)(v16 - 20);
            *((_DWORD *)v25 - 1) = *((_DWORD *)v16 - 1);
            *(_OWORD *)(v25 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v26;
            v25 -= 20;
            v16 -= 20;
          }
          while (v16 != v19);
          uint64_t v16 = (char *)__p;
        }
        long long v27 = &v23[20 * v22];
        uint64_t v17 = v24 + 20;
        std::string __p = v25;
        uint64_t v38 = v24 + 20;
        unint64_t v39 = (unint64_t)v27;
        if (v16) {
          operator delete(v16);
        }
      }
      uint64_t v38 = v17;
      ++v14;
      uint64_t v16 = v17;
    }
    while (v14 != v15);
    unint64_t v14 = v35;
    unint64_t v3 = v32;
    int v13 = v30;
    int v11 = v31;
  }
  int v28 = v13 ^ (v11 >> 31);
  if (v14)
  {
    uint64_t v36 = v14;
    operator delete(v14);
  }
  int v33 = v28;
  long long v34 = xmmword_23CE7E610;
  operations_research::sat::Cumulative((uint64_t)v40, (uint64_t)&__p, (long long *)&v33, 0, (uint64_t)v41);
  uint64_t v35 = v3;
  if (!v42) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, int **))(*v42 + 48))(v42, &v35);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
    uint64_t v29 = (char *)__p;
    if (__p)
    {
LABEL_38:
      uint64_t v38 = v29;
      operator delete(v29);
    }
  }
  else
  {
    if (v42) {
      (*(void (**)(void))(*v42 + 40))();
    }
    uint64_t v29 = (char *)__p;
    if (__p) {
      goto LABEL_38;
    }
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_23CC2761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
  {
    operator delete(__p);
    long long v26 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v26 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::DetectEquivalencesInElementConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v3 = a2;
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  uint64_t v77 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  uint64_t v80 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v3);
  if (*((_DWORD *)this + 15) == 14) {
    uint64_t v6 = (int *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  unsigned int v8 = v6[9];
  int v7 = v6[10];
  if ((int)~v8 <= (int)v8) {
    int v9 = v6[9];
  }
  else {
    int v9 = ~v8;
  }
  int v10 = *(_DWORD *)(*v5 + 4 * v9);
  if (~v7 <= v7) {
    int v11 = v6[10];
  }
  else {
    int v11 = ~v7;
  }
  int v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v92);
  int v13 = v10 ^ (v8 >> 31);
  uint64_t v114 = &unk_26F0BFEC0;
  int v115 = v13;
  uint64_t v116 = &v114;
  unint64_t v15 = (char *)v3 + 32;
  unint64_t v14 = (void *)*((void *)v3 + 4);
  uint64_t v82 = (void *)((char *)v3 + 32);
  uint64_t v16 = v14;
  do
  {
    unint64_t v17 = v16[4];
    BOOL v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = v16 + 1;
    }
    if (v18) {
      unint64_t v15 = (char *)v16;
    }
    uint64_t v16 = (void *)*v19;
  }
  while (*v19);
  if (!(*(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * v13)
       + *(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * (v13 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v90, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1339);
    BOOL v75 = (void *)google::LogMessage::stream((google::LogMessage *)&v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_136;
  }
  uint64_t v111 = &unk_26F0BFEC0;
  int v78 = v12 ^ (v7 >> 31);
  int v112 = v78;
  int v113 = &v111;
  unint64_t v20 = (char *)v3 + 32;
  do
  {
    unint64_t v21 = v14[4];
    BOOL v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      char v23 = v14;
    }
    else {
      char v23 = v14 + 1;
    }
    if (v22) {
      unint64_t v20 = (char *)v14;
    }
    unint64_t v14 = (void *)*v23;
  }
  while (*v23);
  if (!(*(void *)(*(void *)(*((void *)v20 + 5) + 40) + 12 * v78)
       + *(void *)(*(void *)(*((void *)v20 + 5) + 40) + 12 * (v78 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v90, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1340);
    int v76 = (void *)google::LogMessage::stream((google::LogMessage *)&v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_136:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v90);
  }
  uint64_t v89 = 0;
  unint64_t v90 = 0;
  int v87 = (uint64_t *)&v88;
  int v88 = 0;
  long long v108 = (void (**)(void **))&unk_26F0BD370;
  unsigned int v109 = v10 ^ (v8 >> 31);
  unint64_t v110 = (void **)&v108;
  int v24 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v24, v109)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v24, v109);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v24, v109, (char **)&v85);
  if (v110 == (void **)&v108)
  {
    v108[4]((void **)&v108);
    long long v26 = v85;
    uint64_t v25 = v86;
    if (v85 != v86) {
      goto LABEL_36;
    }
LABEL_66:
    if (!v26) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v110) {
    (*((void (**)(void))*v110 + 5))();
  }
  long long v26 = v85;
  uint64_t v25 = v86;
  if (v85 == v86) {
    goto LABEL_66;
  }
  do
  {
LABEL_36:
    while (1)
    {
      int v27 = *(_DWORD *)((char *)v92[0] + ((uint64_t)(*v26 << 32) >> 30));
      uint64_t v28 = (int)*v26;
      long long v105 = &unk_26F0BFEC0;
      int v106 = v27;
      uint64_t v107 = &v105;
      uint64_t v29 = (char *)v3 + 32;
      int v30 = (void *)*v82;
      do
      {
        unint64_t v31 = v30[4];
        BOOL v32 = v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          int v33 = v30;
        }
        else {
          int v33 = v30 + 1;
        }
        if (v32) {
          uint64_t v29 = (char *)v30;
        }
        int v30 = (void *)*v33;
      }
      while (*v33);
      if (!(*(void *)(*(void *)(*((void *)v29 + 5) + 40) + 12 * v27)
           + *(void *)(*(void *)(*((void *)v29 + 5) + 40) + 12 * (v27 ^ 1))))
        break;
      uint64_t v36 = (const operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain(v80, *((_DWORD *)v92[0] + v28));
      operations_research::Domain::UnionWith((operations_research::Domain *)&v90, v36, &v83);
      if (v90) {
        operator delete((void *)__p);
      }
      unint64_t v90 = v83;
      long long __p = v84;
      long long v26 = (void *)((char *)v26 + 12);
      if (v26 == v25) {
        goto LABEL_63;
      }
    }
    int v34 = *((_DWORD *)v92[0] + v28);
    uint64_t v102 = (void (**)(void **))&unk_26F0BFF50;
    v103[0] = v34;
    uint64_t v104 = (void **)&v102;
    uint64_t v35 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v103, (uint64_t)v3);
    if (v104 == (void **)&v102)
    {
      v102[4]((void **)&v102);
    }
    else if (v104)
    {
      (*((void (**)(void))*v104 + 5))();
    }
    uint64_t v37 = v88;
    uint64_t v38 = &v88;
LABEL_53:
    unint64_t v39 = v38;
    if (v37)
    {
      while (1)
      {
        uint64_t v38 = (uint64_t **)v37;
        uint64_t v40 = *(uint64_t *)((char *)v37 + 28);
        if (v35 < v40)
        {
          uint64_t v37 = *v38;
          goto LABEL_53;
        }
        if (v40 >= v35) {
          break;
        }
        uint64_t v37 = v38[1];
        if (!v37)
        {
          unint64_t v39 = v38 + 1;
          goto LABEL_58;
        }
      }
      int64_t v41 = (char *)v38;
    }
    else
    {
LABEL_58:
      int64_t v41 = (char *)operator new(0x28uLL);
      *(void *)(v41 + 28) = v35;
      *((_DWORD *)v41 + 9) = 0;
      *(void *)int64_t v41 = 0;
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = v38;
      void *v39 = (uint64_t *)v41;
      uint64_t v42 = (uint64_t *)v41;
      if (*v87)
      {
        int v87 = (uint64_t *)*v87;
        uint64_t v42 = *v39;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v42);
      ++v89;
    }
    ++*((_DWORD *)v41 + 9);
    long long v26 = (void *)((char *)v26 + 12);
  }
  while (v26 != v25);
LABEL_63:
  long long v26 = v85;
  if (v85)
  {
LABEL_67:
    uint64_t v86 = v26;
    operator delete(v26);
  }
LABEL_68:
  uint64_t v43 = v87;
  if (v87 != (uint64_t *)&v88)
  {
    do
    {
      uint64_t v47 = *(uint64_t *)((char *)v43 + 28);
      if (operations_research::Domain::Contains((operations_research::Domain *)&v90, v47))
      {
        int64_t v48 = v88;
        int v49 = &v88;
LABEL_80:
        uint64_t v50 = v49;
        if (v48)
        {
          while (1)
          {
            int v49 = (uint64_t **)v48;
            uint64_t v51 = *(uint64_t *)((char *)v48 + 28);
            if (v47 < v51)
            {
              int64_t v48 = *v49;
              goto LABEL_80;
            }
            if (v51 >= v47) {
              break;
            }
            int64_t v48 = v49[1];
            if (!v48)
            {
              uint64_t v50 = v49 + 1;
              goto LABEL_85;
            }
          }
          uint64_t v52 = (char *)v49;
        }
        else
        {
LABEL_85:
          uint64_t v52 = (char *)operator new(0x28uLL);
          *(void *)(v52 + 28) = v47;
          *((_DWORD *)v52 + 9) = 0;
          *(void *)uint64_t v52 = 0;
          *((void *)v52 + 1) = 0;
          *((void *)v52 + 2) = v49;
          *uint64_t v50 = (uint64_t *)v52;
          long long v53 = (uint64_t *)v52;
          if (*v87)
          {
            int v87 = (uint64_t *)*v87;
            long long v53 = *v50;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v53);
          ++v89;
        }
        ++*((_DWORD *)v52 + 9);
      }
      int64_t v54 = (uint64_t *)v43[1];
      if (v54)
      {
        do
        {
          unint64_t v55 = (uint64_t **)v54;
          int64_t v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          unint64_t v55 = (uint64_t **)v43[2];
          BOOL v56 = *v55 == v43;
          uint64_t v43 = (uint64_t *)v55;
        }
        while (!v56);
      }
      uint64_t v43 = (uint64_t *)v55;
    }
    while (v55 != &v88);
  }
  unint64_t v99 = (void (**)(void **))&unk_26F0BD370;
  signed int v100 = v13;
  unint64_t v101 = (void **)&v99;
  uint64_t v44 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v44, v100)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v44, v100);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v44, v100, (char **)&v85);
  if (v101 == (void **)&v99)
  {
    v99[4]((void **)&v99);
    uint64_t v46 = v85;
    uint64_t v45 = v86;
    if (v85 != v86)
    {
LABEL_75:
      uint64_t v79 = v3;
      char v81 = 1;
      while (1)
      {
        uint64_t v57 = (const char *)*((unsigned int *)v46 + 2);
        int v58 = *(_DWORD *)((char *)v92[0] + ((uint64_t)(*v46 << 32) >> 30));
        uint64_t v59 = (int)*v46;
        uint64_t v96 = &unk_26F0BFEC0;
        int v97 = v58;
        uint64_t v98 = &v96;
        int v60 = v82;
        uint64_t v61 = (void *)*v82;
        do
        {
          unint64_t v62 = v61[4];
          BOOL v63 = v62 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v62 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
            int v64 = v61;
          }
          else {
            int v64 = v61 + 1;
          }
          if (v63) {
            int v60 = v61;
          }
          uint64_t v61 = (void *)*v64;
        }
        while (*v64);
        if (!(*(void *)(*(void *)(v60[5] + 40) + 12 * v58)
             + *(void *)(*(void *)(v60[5] + 40) + 12 * (v58 ^ 1))))
        {
          int v65 = *((_DWORD *)v92[0] + v59);
          uint64_t v93 = (void (**)(void **))&unk_26F0BFF50;
          v94[0] = v65;
          uint64_t v95 = (void **)&v93;
          uint64_t v66 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v94, (uint64_t)v3);
          if (v95 == (void **)&v93)
          {
            v93[4]((void **)&v93);
          }
          else if (v95)
          {
            (*((void (**)(void))*v95 + 5))();
          }
          int v67 = v88;
          long long v68 = &v88;
LABEL_113:
          uint64_t v69 = v68;
          if (v67)
          {
            while (1)
            {
              long long v68 = (uint64_t **)v67;
              uint64_t v70 = *(uint64_t *)((char *)v67 + 28);
              if (v66 < v70)
              {
                int v67 = *v68;
                goto LABEL_113;
              }
              if (v70 >= v66) {
                break;
              }
              int v67 = v68[1];
              if (!v67)
              {
                uint64_t v69 = v68 + 1;
                goto LABEL_118;
              }
            }
            unint64_t v3 = v79;
            if (*((_DWORD *)v68 + 9) == 1)
            {
LABEL_123:
              operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v77, v57, v78, v66);
              goto LABEL_97;
            }
          }
          else
          {
LABEL_118:
            uint64_t v71 = (char *)operator new(0x28uLL);
            *(void *)(v71 + 28) = v66;
            *((_DWORD *)v71 + 9) = 0;
            *(void *)uint64_t v71 = 0;
            *((void *)v71 + 1) = 0;
            *((void *)v71 + 2) = v68;
            *uint64_t v69 = (uint64_t *)v71;
            unint64_t v72 = (uint64_t *)v71;
            if (*v87)
            {
              int v87 = (uint64_t *)*v87;
              unint64_t v72 = *v69;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v72);
            ++v89;
            unint64_t v3 = v79;
            if (*((_DWORD *)v71 + 9) == 1) {
              goto LABEL_123;
            }
          }
        }
        char v81 = 0;
LABEL_97:
        uint64_t v46 = (void *)((char *)v46 + 12);
        if (v46 == v45)
        {
          uint64_t v46 = v85;
          char v73 = v81;
          if (v85) {
            goto LABEL_125;
          }
          goto LABEL_126;
        }
      }
    }
  }
  else
  {
    if (v101) {
      (*((void (**)(void))*v101 + 5))();
    }
    uint64_t v46 = v85;
    uint64_t v45 = v86;
    if (v85 != v86) {
      goto LABEL_75;
    }
  }
  char v73 = 1;
  if (v46)
  {
LABEL_125:
    uint64_t v86 = v46;
    operator delete(v46);
  }
LABEL_126:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v87, v88);
  if (v90) {
    operator delete((void *)__p);
  }
  if (v92[0])
  {
    v92[1] = v92[0];
    operator delete(v92[0]);
  }
  return v73 & 1;
}

void sub_23CC280B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,char a27,void *__p,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function(&a41);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a24, a25);
  if (a27)
  {
    operator delete(__p);
    uint64_t v42 = a30;
    if (!a30) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v42 = a30;
    if (!a30) {
      goto LABEL_3;
    }
  }
  a31 = (uint64_t)v42;
  operator delete(v42);
  _Unwind_Resume(a1);
}

void *std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void operations_research::sat::LoadElementConstraintBounds(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  unint64_t v3 = a2;
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14) {
    uint64_t v6 = (int *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  unsigned int v7 = v6[9];
  unsigned int v8 = v6[10];
  if ((int)~v7 <= (int)v7) {
    int v9 = v6[9];
  }
  else {
    int v9 = ~v7;
  }
  int v10 = *(_DWORD *)(*v5 + 4 * v9);
  if ((int)~v8 <= (int)v8) {
    int v11 = v6[10];
  }
  else {
    int v11 = ~v8;
  }
  int v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)&v116);
  unint64_t v147 = &unk_26F0BFEC0;
  int v148 = v10 ^ (v7 >> 31);
  int v149 = &v147;
  unint64_t v14 = (void *)((char *)v3 + 32);
  int v13 = (void *)*((void *)v3 + 4);
  unint64_t v15 = (char *)v3 + 32;
  do
  {
    unint64_t v16 = v13[4];
    BOOL v17 = v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      BOOL v18 = v13;
    }
    else {
      BOOL v18 = v13 + 1;
    }
    if (v17) {
      unint64_t v15 = (char *)v13;
    }
    int v13 = (void *)*v18;
  }
  while (*v18);
  if (!(*(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * (int)(v10 ^ (v7 >> 31)))
       + *(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * (int)(v10 ^ (v7 >> 31) ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v114, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1393);
    signed int v100 = (void *)google::LogMessage::stream((google::LogMessage *)&v114);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v114);
  }
  long long v144 = (void (**)(void **))&unk_26F0BD370;
  unsigned int v145 = v10 ^ (v7 >> 31);
  unint64_t v146 = (void **)&v144;
  unint64_t v19 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v19, v145)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v19, v145);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v19, v145, (char **)&v114);
  int v20 = v12 ^ (v8 >> 31);
  if (v146 == (void **)&v144)
  {
    v144[4]((void **)&v144);
  }
  else if (v146)
  {
    (*((void (**)(void))*v146 + 5))();
  }
  uint64_t v111 = 0;
  int v112 = 0;
  int v113 = 0;
  long long __p = 0;
  unsigned int v109 = 0;
  unint64_t v110 = 0;
  unint64_t v21 = v114;
  long long v105 = v115;
  if (v114 != v115)
  {
    uint64_t v101 = 12 * (v20 ^ 1);
    uint64_t v102 = 12 * v20;
    int v103 = v12 ^ (v8 >> 31);
    uint64_t v104 = v3;
    while (1)
    {
      uint64_t v22 = *(void *)v21;
      int v106 = v21[2];
      v107[0] = v22;
      int v118 = 0;
      if ((v22 & 0x80000000) != 0) {
        google::MakeCheckOpString<int,int>((int)v107, (int)&v118, "i >= 0");
      }
      int v118 = v22;
      char v23 = v116;
      *(void *)uint64_t v107 = (v117 - (unsigned char *)v116) >> 2;
      uint64_t v24 = (int)v22;
      if (*(void *)v107 <= (unint64_t)(int)v22) {
        google::MakeCheckOpString<int,unsigned long>((int)&v118, (int)v107, "i < vars.size()");
      }
      uint64_t v25 = v109;
      if (v109 < v110)
      {
        *(_DWORD *)unsigned int v109 = *((_DWORD *)v116 + v24);
        unsigned int v109 = v25 + 4;
        int v27 = v112;
        long long v26 = v113;
        if (v112 < v113) {
          goto LABEL_32;
        }
        goto LABEL_56;
      }
      uint64_t v29 = (char *)__p;
      int64_t v30 = v109 - (unsigned char *)__p;
      uint64_t v31 = (v109 - (unsigned char *)__p) >> 2;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v110 - (unsigned char *)__p;
      if ((v110 - (unsigned char *)__p) >> 1 > v32) {
        unint64_t v32 = v33 >> 1;
      }
      unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v32;
      if (v34)
      {
        if (v34 >> 62) {
          goto LABEL_141;
        }
        uint64_t v35 = (char *)operator new(4 * v34);
        uint64_t v36 = &v35[4 * v31];
        *(_DWORD *)uint64_t v36 = v23[v24];
        uint64_t v37 = (uint64_t)(v36 + 4);
        if (v25 == v29)
        {
LABEL_47:
          unint64_t v3 = v104;
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = (char *)(4 * v31);
        *(_DWORD *)(4 * v31) = *((_DWORD *)v116 + v24);
        uint64_t v37 = 4 * v31 + 4;
        if (v25 == v29) {
          goto LABEL_47;
        }
      }
      unint64_t v38 = v25 - 4 - v29;
      if (v38 < 0x2C) {
        break;
      }
      unint64_t v39 = v25 - &v35[v30];
      unint64_t v3 = v104;
      if (v39 < 0x20) {
        goto LABEL_52;
      }
      uint64_t v40 = (v38 >> 2) + 1;
      uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v42 = &v25[-v41];
      v36 -= v41;
      uint64_t v43 = &v35[4 * v31 - 16];
      uint64_t v44 = v25 - 16;
      uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v46 = *(_OWORD *)v44;
        *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
        *(_OWORD *)uint64_t v43 = v46;
        v43 -= 32;
        v44 -= 32;
        v45 -= 8;
      }
      while (v45);
      uint64_t v25 = v42;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_52;
      }
LABEL_53:
      long long __p = v36;
      unsigned int v109 = (char *)v37;
      unint64_t v110 = &v35[4 * v34];
      if (v29) {
        operator delete(v29);
      }
      int v20 = v103;
      unsigned int v109 = (char *)v37;
      int v27 = v112;
      long long v26 = v113;
      if (v112 < v113)
      {
LABEL_32:
        *(_DWORD *)int v27 = v106;
        uint64_t v28 = (uint64_t)(v27 + 4);
        goto LABEL_77;
      }
LABEL_56:
      int64_t v48 = (char *)v111;
      int64_t v49 = v27 - (unsigned char *)v111;
      uint64_t v50 = (v27 - (unsigned char *)v111) >> 2;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v26 - (unsigned char *)v111;
      if (v52 >> 1 > v51) {
        unint64_t v51 = v52 >> 1;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53)
      {
        if (v53 >> 62) {
LABEL_141:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        int64_t v54 = operator new(4 * v53);
        unint64_t v55 = &v54[4 * v50];
        *unint64_t v55 = v106;
        uint64_t v28 = (uint64_t)(v55 + 1);
        if (v27 == v48)
        {
LABEL_68:
          unint64_t v3 = v104;
          goto LABEL_74;
        }
      }
      else
      {
        int64_t v54 = 0;
        unint64_t v55 = (_DWORD *)(4 * v50);
        *(_DWORD *)(4 * v5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v106;
        uint64_t v28 = 4 * v50 + 4;
        if (v27 == v48) {
          goto LABEL_68;
        }
      }
      unint64_t v56 = v27 - 4 - v48;
      if (v56 >= 0x2C)
      {
        unint64_t v57 = v27 - &v54[v49];
        unint64_t v3 = v104;
        if (v57 >= 0x20)
        {
          uint64_t v58 = (v56 >> 2) + 1;
          uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
          int v60 = &v27[-v59];
          unint64_t v55 = (_DWORD *)((char *)v55 - v59);
          uint64_t v61 = &v54[4 * v50 - 16];
          unint64_t v62 = v27 - 16;
          uint64_t v63 = v58 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *(v61 - 1) = *((_OWORD *)v62 - 1);
            *uint64_t v61 = v64;
            v61 -= 2;
            v62 -= 32;
            v63 -= 8;
          }
          while (v63);
          int v27 = v60;
          if (v58 == (v58 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        unint64_t v3 = v104;
      }
      do
      {
        int v65 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--unint64_t v55 = v65;
      }
      while (v27 != v48);
LABEL_74:
      uint64_t v111 = v55;
      int v112 = (char *)v28;
      int v113 = &v54[4 * v53];
      if (v48) {
        operator delete(v48);
      }
      int v20 = v103;
LABEL_77:
      int v112 = (char *)v28;
      if (*((_DWORD *)v116 + v24) != v20)
      {
        int32x4_t v141 = &unk_26F0BFEC0;
        int v142 = v20;
        uint64_t v143 = &v141;
        uint64_t v66 = (void *)*v14;
        int v67 = v14;
        long long v68 = (void *)*v14;
        do
        {
          unint64_t v69 = v68[4];
          BOOL v70 = v69 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v69 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
            uint64_t v71 = v68;
          }
          else {
            uint64_t v71 = v68 + 1;
          }
          if (v70) {
            int v67 = v68;
          }
          long long v68 = (void *)*v71;
        }
        while (*v71);
        if (*(void *)(*(void *)(v67[5] + 40) + v102) + *(void *)(*(void *)(v67[5] + 40) + v101))
        {
          int v73 = *((_DWORD *)v116 + v24);
          unint64_t v133 = &unk_26F0BFEC0;
          int v134 = v73;
          unint64_t v135 = &v133;
          int v74 = v14;
          do
          {
            unint64_t v75 = v66[4];
            BOOL v76 = v75 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v75 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
              uint64_t v77 = v66;
            }
            else {
              uint64_t v77 = v66 + 1;
            }
            if (v76) {
              int v74 = v66;
            }
            uint64_t v66 = (void *)*v77;
          }
          while (*v77);
          int v78 = *((_DWORD *)v116 + v24);
          if (*(void *)(*(void *)(v74[5] + 40) + 12 * v73)
             + *(void *)(*(void *)(v74[5] + 40) + 12 * (v73 ^ 1)))
          {
            int v127 = 0;
            uint64_t v80 = operator new(0x20uLL);
            *(void *)uint64_t v80 = &unk_26F0C0758;
            *((_DWORD *)v80 + 2) = v78;
            *((_DWORD *)v80 + 3) = v20;
            *((void *)v80 + 2) = 0;
            *((_DWORD *)v80 + 6) = v106;
            int v127 = v80;
            uint64_t v81 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)v3);
            int v82 = *((_DWORD *)v80 + 2);
            int v83 = *((_DWORD *)v80 + 3);
            uint64_t v84 = *((void *)v80 + 2);
            v107[0] = *((_DWORD *)v80 + 6);
            operations_research::sat::PrecedencesPropagator::AddArc(v81, v82, v83, v84, -1, v107, 1);
            if (v127 == v126)
            {
              (*(void (**)(void *))(v126[0] + 32))(v126);
            }
            else if (v127)
            {
              (*(void (**)(void))(*v127 + 40))();
            }
            int v89 = *((_DWORD *)v116 + v24);
            int v125 = 0;
            unint64_t v90 = operator new(0x20uLL);
            *(void *)unint64_t v90 = &unk_26F0C0758;
            *((_DWORD *)v90 + 2) = v20;
            *((_DWORD *)v90 + 3) = v89;
            *((void *)v90 + 2) = 0;
            *((_DWORD *)v90 + 6) = v106;
            int v125 = v90;
            uint64_t v91 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)v3);
            int v92 = *((_DWORD *)v90 + 2);
            int v93 = *((_DWORD *)v90 + 3);
            uint64_t v94 = *((void *)v90 + 2);
            v107[0] = *((_DWORD *)v90 + 6);
            operations_research::sat::PrecedencesPropagator::AddArc(v91, v92, v93, v94, -1, v107, 1);
            int v87 = v125;
            if (v125 != v124)
            {
LABEL_113:
              if (v87) {
                (*(void (**)(void *))(*v87 + 40))(v87);
              }
              goto LABEL_27;
            }
            (*(void (**)(void *))(v124[0] + 32))(v124);
          }
          else
          {
            uint64_t v130 = (void (**)(void **))&unk_26F0BFF50;
            v131[0] = v78;
            uint64_t v132 = (void **)&v130;
            uint64_t v79 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v131, (uint64_t)v3);
            if (v132 == (void **)&v130)
            {
              v130[4]((void **)&v130);
            }
            else if (v132)
            {
              (*((void (**)(void))*v132 + 5))();
            }
            int64_t v129 = 0;
            int v88 = operator new(0x20uLL);
            *int v88 = &unk_26F0C0658;
            v88[1] = v79;
            v88[2] = v79;
            *((_DWORD *)v88 + 6) = v106;
            *((_DWORD *)v88 + 7) = v20;
            int64_t v129 = v88;
            operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v88 + 1), (uint64_t)v3);
            int v87 = v129;
            if (v129 != v128) {
              goto LABEL_113;
            }
            (*(void (**)(void *))(v128[0] + 32))(v128);
          }
        }
        else
        {
          int v138 = (void (**)(void **))&unk_26F0BFF50;
          v139[0] = v20;
          uint64_t v140 = (void **)&v138;
          uint64_t v72 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v139, (uint64_t)v3);
          if (v140 == (void **)&v138)
          {
            v138[4]((void **)&v138);
          }
          else if (v140)
          {
            (*((void (**)(void))*v140 + 5))();
          }
          int v85 = *((_DWORD *)v116 + v24);
          uint64_t v137 = 0;
          uint64_t v86 = operator new(0x20uLL);
          *uint64_t v86 = &unk_26F0C0658;
          v86[1] = v72;
          v86[2] = v72;
          *((_DWORD *)v86 + 6) = v106;
          *((_DWORD *)v86 + 7) = v85;
          uint64_t v137 = v86;
          operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v86 + 1), (uint64_t)v3);
          int v87 = v137;
          if (v137 != v136) {
            goto LABEL_113;
          }
          (*(void (**)(void *))(v136[0] + 32))(v136);
        }
      }
LABEL_27:
      v21 += 3;
      if (v21 == v105) {
        goto LABEL_116;
      }
    }
    unint64_t v3 = v104;
    do
    {
LABEL_52:
      int v47 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *((_DWORD *)v36 - 1) = v47;
      v36 -= 4;
    }
    while (v25 != v29);
    goto LABEL_53;
  }
LABEL_116:
  uint64_t v121 = &unk_26F0BFEC0;
  int v122 = v20;
  long long v123 = &v121;
  uint64_t v95 = (void *)*v14;
  do
  {
    unint64_t v96 = v95[4];
    BOOL v97 = v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v98 = v95;
    }
    else {
      uint64_t v98 = v95 + 1;
    }
    if (v97) {
      unint64_t v14 = v95;
    }
    uint64_t v95 = (void *)*v98;
  }
  while (*v98);
  if (!(*(void *)(*(void *)(v14[5] + 40) + 12 * v20)
       + *(void *)(*(void *)(v14[5] + 40) + 12 * (v20 ^ 1))))
  {
LABEL_129:
    unint64_t v99 = (char *)__p;
    if (!__p) {
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  operations_research::sat::PartialIsOneOfVar(v20, (uint64_t)&__p, (const void **)&v111, (uint64_t)v119);
  *(void *)uint64_t v107 = v3;
  if (!v120) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, int *))(*v120 + 48))(v120, v107);
  if (v120 != v119)
  {
    if (v120) {
      (*(void (**)(void))(*v120 + 40))();
    }
    goto LABEL_129;
  }
  (*(void (**)(void *))(v119[0] + 32))(v119);
  unint64_t v99 = (char *)__p;
  if (__p)
  {
LABEL_130:
    unsigned int v109 = v99;
    operator delete(v99);
  }
LABEL_131:
  if (v111)
  {
    int v112 = (char *)v111;
    operator delete(v111);
  }
  if (v114)
  {
    int v115 = v114;
    operator delete(v114);
  }
  if (v116)
  {
    uint64_t v117 = v116;
    operator delete(v116);
  }
}

void sub_23CC28F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC28F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC28F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v54 = a23;
    if (!a23)
    {
LABEL_3:
      unint64_t v55 = a26;
      if (!a26) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int64_t v54 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  operator delete(v54);
  unint64_t v55 = a26;
  if (!a26)
  {
LABEL_4:
    unint64_t v56 = a29;
    if (!a29) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v55);
  unint64_t v56 = a29;
  if (!a29) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v56);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PartialIsOneOfVar(int a1@<W0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(const void **)a2;
  unsigned int v7 = *(const void **)(a2 + 8);
  int64_t v9 = (int64_t)v7 - *(void *)a2;
  uint64_t v22 = v9 >> 2;
  uint64_t v23 = ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 2;
  if (v9 >> 2 != v23) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v22, (int)&v23, "vars.size() == selectors.size()");
  }
  unint64_t v16 = 0;
  BOOL v17 = 0;
  unint64_t v15 = 0;
  if (v7 != v8)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v10 = (char *)operator new(v9);
    int v11 = &v10[4 * (v9 >> 2)];
    unint64_t v15 = v10;
    BOOL v17 = v11;
    memcpy(v10, v8, v9);
    unint64_t v16 = v11;
  }
  int v18 = a1;
  int v20 = 0;
  unint64_t v21 = 0;
  long long __p = 0;
  int v12 = *a3;
  int64_t v13 = (unsigned char *)a3[1] - (unsigned char *)*a3;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(v13);
    unint64_t v21 = (char *)__p + 4 * (v13 >> 2);
    memcpy(__p, v12, v13);
    int v20 = v21;
  }
  *(void *)(a4 + 24) = 0;
  unint64_t v14 = operator new(0x40uLL);
  *unint64_t v14 = &unk_26F0C07D8;
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v14 + 1), (uint64_t)&v15);
  *(void *)(a4 + 24) = v14;
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_23CC29230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC29238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_23CC29254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CC29268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadElementConstraintAC(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v269 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14) {
    uint64_t v6 = (int *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  int v7 = v6[9];
  unsigned int v8 = v6[10];
  if (~v7 <= v7) {
    int v9 = v6[9];
  }
  else {
    int v9 = ~v7;
  }
  int v10 = *(_DWORD *)(*v5 + 4 * v9);
  if ((int)~v8 <= (int)v8) {
    int v11 = v6[10];
  }
  else {
    int v11 = ~v8;
  }
  int v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v232);
  int v13 = v10 ^ (v7 >> 31);
  uint64_t v266 = &unk_26F0BFEC0;
  int v267 = v13;
  int v268 = &v266;
  unint64_t v15 = (char *)a2 + 32;
  unint64_t v14 = (void *)*((void *)a2 + 4);
  unint64_t v209 = (void *)((char *)a2 + 32);
  unint64_t v16 = v14;
  do
  {
    unint64_t v17 = v16[4];
    BOOL v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = v16 + 1;
    }
    if (v18) {
      unint64_t v15 = (char *)v16;
    }
    unint64_t v16 = (void *)*v19;
  }
  while (*v19);
  if (!(*(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * v13)
       + *(void *)(*(void *)(*((void *)v15 + 5) + 40) + 12 * (v13 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v228, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1445);
    unint64_t v204 = (void *)google::LogMessage::stream((google::LogMessage *)&v228);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_266;
  }
  uint64_t v263 = &unk_26F0BFEC0;
  int v264 = v12 ^ (v8 >> 31);
  unint64_t v265 = &v263;
  int v20 = (char *)a2 + 32;
  do
  {
    unint64_t v21 = v14[4];
    BOOL v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v23 = v14;
    }
    else {
      uint64_t v23 = v14 + 1;
    }
    if (v22) {
      int v20 = (char *)v14;
    }
    unint64_t v14 = (void *)*v23;
  }
  while (*v23);
  if (!(*(void *)(*(void *)(*((void *)v20 + 5) + 40) + 12 * (int)(v12 ^ (v8 >> 31)))
       + *(void *)(*(void *)(*((void *)v20 + 5) + 40) + 12 * (int)(v12 ^ (v8 >> 31) ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v228, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1446);
    uint64_t v205 = (void *)google::LogMessage::stream((google::LogMessage *)&v228);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_266:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v228);
  }
  long long v229 = 0u;
  long long v230 = 0u;
  uint64_t v228 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v231 = 0;
  unint64_t v260 = (void (**)(void **))&unk_26F0BD370;
  unsigned int v261 = v12 ^ (v8 >> 31);
  unint64_t v262 = (void **)&v260;
  uint64_t v24 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v24, v261)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v24, v261);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v24, v261, (char **)&v226);
  unint64_t v211 = a2;
  if (v262 == (void **)&v260)
  {
    v260[4]((void **)&v260);
    uint64_t v25 = v226;
    long long v26 = v227;
    if (v226 == v227) {
      goto LABEL_45;
    }
  }
  else
  {
    if (v262) {
      (*((void (**)(void))*v262 + 5))();
    }
    uint64_t v25 = v226;
    long long v26 = v227;
    if (v226 == v227) {
      goto LABEL_45;
    }
  }
  do
  {
    uint64_t v31 = 0;
    uint64_t v34 = *(void *)v25;
    int v35 = v25[2];
    unint64_t v36 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v25)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(void *)v25));
    uint64_t v33 = v229;
    for (unint64_t i = (v36 >> 7) ^ ((unint64_t)v228 >> 12); ; unint64_t i = v31 + v27)
    {
      unint64_t v27 = i & v230;
      uint64_t v28 = *(void *)((char *)v228 + v27);
      unint64_t v29 = ((v28 ^ (0x101010101010101 * (v36 & 0x7F))) - 0x101010101010101) & ~(v28 ^ (0x101010101010101
                                                                                          * (v36 & 0x7F))) & 0x8080808080808080;
      if (v29) {
        break;
      }
LABEL_40:
      if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v30 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v228, v36);
        uint64_t v33 = v229;
        *(void *)(v229 + 12 * v3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v34;
        goto LABEL_43;
      }
      v31 += 8;
    }
    while (1)
    {
      unint64_t v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v230;
      if (*(void *)(v229 + 12 * v30) == v34) {
        break;
      }
      v29 &= v29 - 1;
      if (!v29) {
        goto LABEL_40;
      }
    }
LABEL_43:
    *(_DWORD *)(v33 + 12 * v30 + 8) = v35;
    v25 += 3;
  }
  while (v25 != v26);
LABEL_45:
  uint64_t v222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v223 = 0u;
  long long v224 = 0u;
  uint64_t v225 = 0;
  uint64_t v257 = (void (**)(void **))&unk_26F0BD370;
  signed int v258 = v13;
  unint64_t v259 = (void **)&v257;
  uint64_t v37 = a2;
  unint64_t v38 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v38, v258)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v38, v258);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v38, v258, (char **)&v220);
  if (v259 == (void **)&v257)
  {
    v257[4]((void **)&v257);
  }
  else if (v259)
  {
    (*((void (**)(void))*v259 + 5))();
  }
  uint64_t v206 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  unint64_t v39 = v220;
  unint64_t v208 = v221;
  if (v220 != v221)
  {
    do
    {
      uint64_t v215 = *((unsigned int *)v39 + 2);
      int v41 = *((_DWORD *)v232[0] + (int)*v39);
      int v42 = *v39;
      uint64_t v254 = &unk_26F0BFEC0;
      int v255 = v41;
      uint64_t v256 = &v254;
      uint64_t v43 = v209;
      uint64_t v44 = (void *)*v209;
      do
      {
        unint64_t v45 = v44[4];
        BOOL v46 = v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          int v47 = v44;
        }
        else {
          int v47 = v44 + 1;
        }
        if (v46) {
          uint64_t v43 = v44;
        }
        uint64_t v44 = (void *)*v47;
      }
      while (*v47);
      if (!(*(void *)(*(void *)(v43[5] + 40) + 12 * v41)
           + *(void *)(*(void *)(v43[5] + 40) + 12 * (v41 ^ 1))))
      {
        uint64_t v48 = 0;
        uint64_t v49 = *(void *)(*(void *)(v206 + 40) + 12 * *((int *)v232[0] + v42));
        unint64_t v50 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v49)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v49));
        uint64_t v51 = v223;
        for (unint64_t j = (v50 >> 7) ^ ((unint64_t)v222 >> 12); ; unint64_t j = v48 + v53)
        {
          unint64_t v53 = j & v224;
          uint64_t v54 = *(void *)((char *)v222 + v53);
          unint64_t v55 = ((v54 ^ (0x101010101010101 * (v50 & 0x7F))) - 0x101010101010101) & ~(v54 ^ (0x101010101010101
                                                                                              * (v50 & 0x7F))) & 0x8080808080808080;
          if (v55) {
            break;
          }
LABEL_69:
          if ((v54 & (~v54 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v56 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v222, v50);
            uint64_t v132 = (void *)(v223 + 32 * v56);
            *uint64_t v132 = v49;
            v132[1] = 0;
            v132[2] = 0;
            v132[3] = 0;
            uint64_t v51 = v223;
            uint64_t v37 = v211;
            goto LABEL_162;
          }
          v48 += 8;
        }
        while (1)
        {
          unint64_t v56 = (v53 + (__clz(__rbit64(v55)) >> 3)) & v224;
          if (*(void *)(v223 + 32 * v56) == v49) {
            break;
          }
          v55 &= v55 - 1;
          if (!v55) {
            goto LABEL_69;
          }
        }
LABEL_162:
        uint64_t v133 = v51 + 32 * v56;
        unint64_t v136 = *(void *)(v133 + 24);
        unint64_t v135 = (void *)(v133 + 24);
        unint64_t v134 = v136;
        uint64_t v137 = v135 - 1;
        int v138 = (char *)*(v135 - 1);
        if ((unint64_t)v138 >= v136)
        {
          uint64_t v139 = (char *)*(v135 - 2);
          uint64_t v140 = (v138 - v139) >> 2;
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          int v142 = v39;
          uint64_t v143 = v134 - (void)v139;
          if (v143 >> 1 > v141) {
            unint64_t v141 = v143 >> 1;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v141;
          }
          if (v144)
          {
            if (v144 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unsigned int v145 = operator new(4 * v144);
            unint64_t v146 = &v145[4 * v140];
            *unint64_t v146 = v215;
            uint64_t v40 = (uint64_t)(v146 + 1);
            if (v138 == v139)
            {
LABEL_197:
              *(v135 - 2) = v146;
              *uint64_t v137 = v40;
              *unint64_t v135 = &v145[4 * v144];
              if (v139) {
                operator delete(v139);
              }
              uint64_t v37 = v211;
              unint64_t v39 = v142;
              goto LABEL_54;
            }
          }
          else
          {
            unsigned int v145 = 0;
            unint64_t v146 = (_DWORD *)(4 * v140);
            *(_DWORD *)(4 * v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v215;
            uint64_t v40 = 4 * v140 + 4;
            if (v138 == v139) {
              goto LABEL_197;
            }
          }
          unint64_t v152 = v138 - 4 - v139;
          if (v152 < 0x2C) {
            goto LABEL_279;
          }
          if ((unint64_t)(v139 - v145) < 0x20) {
            goto LABEL_279;
          }
          uint64_t v153 = (v152 >> 2) + 1;
          uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v155 = &v138[-v154];
          unint64_t v146 = (_DWORD *)((char *)v146 - v154);
          unint64_t v156 = &v145[4 * v140 - 16];
          uint64_t v157 = v138 - 16;
          uint64_t v158 = v153 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v159 = *(_OWORD *)v157;
            *(v156 - 1) = *((_OWORD *)v157 - 1);
            *unint64_t v156 = v159;
            v156 -= 2;
            v157 -= 32;
            v158 -= 8;
          }
          while (v158);
          int v138 = v155;
          if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_279:
            do
            {
              int v160 = *((_DWORD *)v138 - 1);
              v138 -= 4;
              *--unint64_t v146 = v160;
            }
            while (v138 != v139);
          }
          goto LABEL_197;
        }
        *(_DWORD *)int v138 = v215;
        uint64_t v40 = (uint64_t)(v138 + 4);
LABEL_54:
        *uint64_t v137 = v40;
        goto LABEL_55;
      }
      signed int v57 = *((_DWORD *)v232[0] + v42);
      uint64_t v251 = (void (**)(void **))&unk_26F0BD370;
      signed int v252 = v57;
      unint64_t v253 = (void **)&v251;
      uint64_t v58 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v37);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v58, v252)) {
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v58, v252);
      }
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v58, v252, (char **)&__p);
      if (v253 == (void **)&v251)
      {
        v251[4]((void **)&v251);
      }
      else if (v253)
      {
        (*((void (**)(void))*v253 + 5))();
      }
      unint64_t v207 = v39;
      unint64_t v217 = 0;
      uint64_t v59 = (uint64_t *)__p;
      uint64_t v213 = v219;
      if (__p == v219)
      {
        long long v128 = 0;
        unint64_t v131 = 0;
        uint64_t v130 = 0;
        int v233 = 0;
        unint64_t v234 = 0;
        uint64_t v235 = 0;
        goto LABEL_174;
      }
      int v60 = 0;
      uint64_t v210 = 0;
      unint64_t v212 = 0;
      do
      {
        uint64_t v61 = 0;
        uint64_t v62 = *v59;
        uint64_t v63 = *((unsigned int *)v59 + 2);
        unint64_t v64 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v59)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + *v59));
        unint64_t v65 = (v64 >> 7) ^ ((unint64_t)v228 >> 12);
        uint64_t v66 = 0x101010101010101 * (v64 & 0x7F);
        while (1)
        {
          unint64_t v67 = v65 & v230;
          uint64_t v68 = *(void *)((char *)v228 + v67);
          unint64_t v69 = ((v68 ^ v66) - 0x101010101010101) & ~(v68 ^ v66) & 0x8080808080808080;
          if (v69) {
            break;
          }
LABEL_85:
          if ((v68 & (~v68 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_88;
          }
          v61 += 8;
          unint64_t v65 = v61 + v67;
        }
        while (1)
        {
          unint64_t v70 = (v67 + (__clz(__rbit64(v69)) >> 3)) & v230;
          if (*(void *)(v229 + 12 * v70) == v62) {
            break;
          }
          v69 &= v69 - 1;
          if (!v69) {
            goto LABEL_85;
          }
        }
        if (v70 != (void)v230)
        {
          v246[0] = &unk_26F0BFC30;
          unint64_t v247 = v246;
          uint64_t v72 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v37);
          int v73 = *((_DWORD *)v72 + 4);
          operations_research::sat::SatSolver::SetNumVariables(v72, v73 + 1);
          if (v247 == v246)
          {
            (*(void (**)(void *))(v246[0] + 32))(v246);
          }
          else if (v247)
          {
            (*(void (**)(void))(*v247 + 40))();
          }
          unint64_t v245 = 0;
          int v74 = operator new(0x28uLL);
          *(void *)int v74 = &unk_26F0C0910;
          *((void *)v74 + 1) = 0;
          *((void *)v74 + 2) = 0;
          *((void *)v74 + 3) = 0;
          unint64_t v75 = (uint64_t *)operator new(8uLL);
          *((void *)v74 + 1) = v75;
          *v75++ = v215 | (v63 << 32);
          int v76 = 2 * v73;
          *((void *)v74 + 2) = v75;
          *((void *)v74 + 3) = v75;
          *((_DWORD *)v74 + 8) = 2 * v73;
          unint64_t v245 = v74;
          operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int **)v74 + 1, (uint64_t)v211);
          if (v245 == v244)
          {
            (*(void (**)(void *))(v244[0] + 32))(v244);
          }
          else if (v245)
          {
            (*(void (**)(void))(*v245 + 40))();
          }
          uint64_t v77 = 0;
          uint64_t v78 = v223;
          for (unint64_t k = (v64 >> 7) ^ ((unint64_t)v222 >> 12); ; unint64_t k = v77 + v80)
          {
            unint64_t v80 = k & v224;
            uint64_t v81 = *(void *)((char *)v222 + v80);
            unint64_t v82 = ((v81 ^ v66) - 0x101010101010101) & ~(v81 ^ v66) & 0x8080808080808080;
            if (v82) {
              break;
            }
LABEL_103:
            if ((v81 & (~v81 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v83 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v222, v64);
              uint64_t v84 = (void *)(v223 + 32 * v83);
              void *v84 = v62;
              v84[1] = 0;
              v84[2] = 0;
              v84[3] = 0;
              uint64_t v78 = v223;
              goto LABEL_106;
            }
            v77 += 8;
          }
          while (1)
          {
            unint64_t v83 = (v80 + (__clz(__rbit64(v82)) >> 3)) & v224;
            if (*(void *)(v223 + 32 * v83) == v62) {
              break;
            }
            v82 &= v82 - 1;
            if (!v82) {
              goto LABEL_103;
            }
          }
LABEL_106:
          uint64_t v85 = v78 + 32 * v83;
          unint64_t v88 = *(void *)(v85 + 24);
          int v87 = (void *)(v85 + 24);
          unint64_t v86 = v88;
          int v89 = (int *)*(v87 - 1);
          if ((unint64_t)v89 < v88)
          {
            *int v89 = v76;
            unint64_t v90 = v212;
            *(v87 - 1) = v89 + 1;
            if (v212 < (int *)v210) {
              goto LABEL_108;
            }
LABEL_130:
            int64_t v112 = (char *)v90 - (char *)v60;
            uint64_t v113 = v90 - v60;
            unint64_t v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 62) {
LABEL_268:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if ((v210 - (char *)v60) >> 1 > v114) {
              unint64_t v114 = (v210 - (char *)v60) >> 1;
            }
            if ((unint64_t)(v210 - (char *)v60) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v115 = v114;
            }
            if (v115)
            {
              if (v115 >> 62) {
LABEL_267:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              uint64_t v116 = (char *)operator new(4 * v115);
              uint64_t v117 = (int *)&v116[4 * v113];
              *uint64_t v117 = v76;
              uint64_t v91 = (uint64_t)(v117 + 1);
              int v118 = v212;
              if (v212 != v60)
              {
LABEL_139:
                unint64_t v119 = (char *)(v118 - 1) - (char *)v60;
                if (v119 < 0xBC)
                {
                  uint64_t v120 = v118;
                  goto LABEL_147;
                }
                if (&v116[v112 - 4 - (v119 & 0xFFFFFFFFFFFFFFFCLL)] <= &v116[v112 - 4]
                  && (int *)((char *)v118 - (v119 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v118 - 1
                  && (unint64_t)((char *)v118 - &v116[v112]) >= 0x20)
                {
                  uint64_t v122 = (v119 >> 2) + 1;
                  uint64_t v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v37 = v211;
                  uint64_t v120 = &v212[v123 / 0xFFFFFFFFFFFFFFFCLL];
                  uint64_t v117 = (int *)((char *)v117 - v123);
                  uint64_t v124 = &v116[4 * v113 - 16];
                  int v125 = v212 - 4;
                  uint64_t v126 = v122 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v127 = *(_OWORD *)v125;
                    *((_OWORD *)v124 - 1) = *((_OWORD *)v125 - 1);
                    *(_OWORD *)uint64_t v124 = v127;
                    v124 -= 32;
                    v125 -= 8;
                    v126 -= 8;
                  }
                  while (v126);
                  if (v122 != (v122 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_148;
                  }
                }
                else
                {
                  uint64_t v120 = v212;
LABEL_147:
                  uint64_t v37 = v211;
                  do
                  {
LABEL_148:
                    int v121 = *--v120;
                    *--uint64_t v117 = v121;
                  }
                  while (v120 != v60);
                }
LABEL_149:
                unint64_t v217 = v117;
                uint64_t v210 = &v116[4 * v115];
                if (v60) {
                  operator delete(v60);
                }
                int v60 = v117;
LABEL_152:
                unint64_t v212 = (int *)v91;
                goto LABEL_80;
              }
            }
            else
            {
              uint64_t v116 = 0;
              uint64_t v117 = (int *)(4 * v113);
              *(_DWORD *)(4 * v113) = v76;
              uint64_t v91 = 4 * v113 + 4;
              int v118 = v212;
              if (v212 != v60) {
                goto LABEL_139;
              }
            }
            uint64_t v37 = v211;
            goto LABEL_149;
          }
          int v92 = v87 - 2;
          int v93 = (int *)*(v87 - 2);
          uint64_t v94 = v89 - v93;
          unint64_t v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62) {
            goto LABEL_268;
          }
          uint64_t v96 = v86 - (void)v93;
          if (v96 >> 1 > v95) {
            unint64_t v95 = v96 >> 1;
          }
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            if (v97 >> 62) {
              goto LABEL_267;
            }
            unint64_t v98 = v97;
            unint64_t v99 = operator new(4 * v97);
            int v92 = v87 - 2;
            unint64_t v97 = v98;
            int v76 = 2 * v73;
            signed int v100 = &v99[4 * v94];
            *signed int v100 = 2 * v73;
            uint64_t v101 = (uint64_t)(v100 + 1);
            if (v89 != v93)
            {
LABEL_118:
              unint64_t v102 = (char *)(v89 - 1) - (char *)v93;
              if (v102 < 0x2C)
              {
                int v103 = v87 - 1;
                goto LABEL_126;
              }
              int v103 = v87 - 1;
              if ((unint64_t)((char *)v93 - v99) < 0x20) {
                goto LABEL_280;
              }
              uint64_t v104 = (v102 >> 2) + 1;
              uint64_t v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
              int v106 = &v89[v105 / 0xFFFFFFFFFFFFFFFCLL];
              signed int v100 = (_DWORD *)((char *)v100 - v105);
              uint64_t v107 = &v99[4 * v94 - 16];
              long long v108 = v89 - 4;
              uint64_t v109 = v104 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v110 = *(_OWORD *)v108;
                *(v107 - 1) = *((_OWORD *)v108 - 1);
                *uint64_t v107 = v110;
                v107 -= 2;
                v108 -= 8;
                v109 -= 8;
              }
              while (v109);
              int v89 = v106;
              if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_280:
                do
                {
LABEL_126:
                  int v111 = *--v89;
                  *--signed int v100 = v111;
                }
                while (v89 != v93);
              }
LABEL_127:
              void *v92 = v100;
              *int v103 = v101;
              void *v87 = &v99[4 * v97];
              if (v93) {
                operator delete(v93);
              }
              unint64_t v90 = v212;
              *int v103 = v101;
              if (v212 >= (int *)v210) {
                goto LABEL_130;
              }
LABEL_108:
              int *v90 = v76;
              uint64_t v91 = (uint64_t)(v90 + 1);
              uint64_t v37 = v211;
              goto LABEL_152;
            }
          }
          else
          {
            unint64_t v99 = 0;
            signed int v100 = (_DWORD *)(4 * v94);
            *(_DWORD *)(4 * v94) = v76;
            uint64_t v101 = 4 * v94 + 4;
            if (v89 != v93) {
              goto LABEL_118;
            }
          }
          int v103 = v87 - 1;
          goto LABEL_127;
        }
LABEL_88:
        uint64_t v248 = (void (**)(void **))&unk_26F0BF9F8;
        unint64_t v249 = v215 | ((unint64_t)(v63 ^ 1) << 32);
        unint64_t v250 = (void **)&v248;
        uint64_t v71 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v37);
        operations_research::sat::SatSolver::AddBinaryClause(v71, v249 ^ 1, SHIDWORD(v249));
        if (v250 == (void **)&v248)
        {
          v248[4]((void **)&v248);
        }
        else if (v250)
        {
          (*((void (**)(void))*v250 + 5))();
        }
LABEL_80:
        uint64_t v59 = (uint64_t *)((char *)v59 + 12);
      }
      while (v59 != v213);
      int v233 = 0;
      unint64_t v234 = 0;
      uint64_t v235 = 0;
      long long v128 = v212;
      int64_t v129 = (char *)v212 - (char *)v217;
      if (v212 == v217)
      {
        unint64_t v131 = 0;
        uint64_t v130 = 0;
      }
      else
      {
        if (v129 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v130 = (const operations_research::sat::ConstraintProto *)operator new((char *)v212 - (char *)v217);
        unint64_t v131 = (char *)v130 + 4 * (v129 >> 2);
        int v233 = v130;
        uint64_t v235 = v131;
        memcpy(v130, v217, v129);
        unint64_t v234 = v131;
        long long v128 = v217;
      }
LABEL_174:
      int v236 = v215;
      unint64_t v243 = 0;
      unint64_t v147 = operator new(0x28uLL);
      int v148 = (void (**)(void *, void *))&unk_26F0C0990;
      void *v147 = &unk_26F0C0990;
      v147[1] = 0;
      v147[2] = 0;
      v147[3] = 0;
      int64_t v149 = v131 - (char *)v130;
      if (v131 != (char *)v130)
      {
        if (v149 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v150 = (char *)operator new(v131 - (char *)v130);
        v147[1] = v150;
        int v151 = &v150[4 * (v149 >> 2)];
        v147[3] = v151;
        memcpy(v150, v130, v149);
        v147[2] = v151;
      }
      *((_DWORD *)v147 + 8) = v215;
      unint64_t v243 = v147;
      if (v130)
      {
        operator delete(v130);
        unint64_t v147 = v243;
        uint64_t v37 = v211;
        int v233 = v211;
        if (!v243) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        int v148 = (void (**)(void *, void *))*v243;
      }
      else
      {
        uint64_t v37 = v211;
        int v233 = v211;
      }
      unint64_t v39 = v207;
      ((void (**)(void *, const operations_research::sat::ConstraintProto **))v148)[6](v147, &v233);
      if (v243 == v242)
      {
        (*(void (**)(void *))(v242[0] + 32))(v242);
        if (v128) {
          goto LABEL_185;
        }
      }
      else
      {
        if (v243) {
          (*(void (**)(void))(*v243 + 40))();
        }
        if (v128) {
LABEL_185:
        }
          operator delete(v128);
      }
      if (__p)
      {
        uint64_t v219 = (uint64_t *)__p;
        operator delete(__p);
      }
LABEL_55:
      unint64_t v39 = (void *)((char *)v39 + 12);
    }
    while (v39 != v208);
  }
  int v161 = (uint64_t *)v229;
  if (*(char *)v228 > -2)
  {
    char v162 = (char *)v228;
    char v164 = (char *)v228 + v230;
    if (v228 == (char *)v228 + (void)v230) {
      goto LABEL_244;
    }
LABEL_206:
    unint64_t v165 = (int **)v240;
    unint64_t v214 = v164;
    while (1)
    {
      uint64_t v166 = 0;
      uint64_t v167 = *v161;
      int v216 = *((_DWORD *)v161 + 2);
      unint64_t v168 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v167)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v167));
      uint64_t v169 = v223;
      unint64_t v170 = (v168 >> 7) ^ ((unint64_t)v222 >> 12);
      uint64_t v171 = 0x101010101010101 * (v168 & 0x7F);
      for (unint64_t m = v170; ; unint64_t m = v166 + v173)
      {
        unint64_t v173 = m & v224;
        uint64_t v174 = *(void *)((char *)v222 + v173);
        unint64_t v175 = ((v174 ^ v171) - 0x101010101010101) & ~(v174 ^ v171) & 0x8080808080808080;
        if (v175) {
          break;
        }
LABEL_212:
        if ((v174 & (~v174 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_215;
        }
        v166 += 8;
      }
      while (1)
      {
        unint64_t v176 = (v173 + (__clz(__rbit64(v175)) >> 3)) & v224;
        if (*(void *)(v223 + 32 * v176) == v167) {
          break;
        }
        v175 &= v175 - 1;
        if (!v175) {
          goto LABEL_212;
        }
      }
      if (v176 == (void)v224)
      {
LABEL_215:
        LODWORD(v233) = v216 ^ 1;
        uint64_t v239 = (void (**)(void **))&unk_26F0BD480;
        v240[0] = &v233;
        v240[1] = 1;
        uint64_t v241 = (void **)&v239;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v165, (uint64_t)v211);
        unint64_t v177 = v241;
        if (v241 == (void **)&v239)
        {
          v239[4]((void **)&v239);
          int v178 = *++v162;
          int v161 = (uint64_t *)((char *)v161 + 12);
          if (v178 > -2) {
            goto LABEL_207;
          }
          do
          {
LABEL_240:
            unint64_t v198 = (__clz(__rbit64(((*(void *)v162 >> 7) & ~*(void *)v162 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v162 += v198;
            int v161 = (uint64_t *)((char *)v161 + 12 * v198);
          }
          while (*v162 < -1);
          goto LABEL_207;
        }
      }
      else
      {
        for (n = 0; ; unint64_t v170 = n + v180)
        {
          unint64_t v180 = v170 & v224;
          uint64_t v181 = *(void *)((char *)v222 + v180);
          unint64_t v182 = ((v181 ^ v171) - 0x101010101010101) & ~(v181 ^ v171) & 0x8080808080808080;
          if (v182) {
            break;
          }
LABEL_222:
          if ((v181 & (~v181 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v183 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert((uint64_t *)&v222, v168);
            unint64_t v184 = (void *)(v223 + 32 * v183);
            *unint64_t v184 = v167;
            v184[1] = 0;
            v184[2] = 0;
            v184[3] = 0;
            uint64_t v169 = v223;
            goto LABEL_225;
          }
          n += 8;
        }
        while (1)
        {
          unint64_t v183 = (v180 + (__clz(__rbit64(v182)) >> 3)) & v224;
          if (*(void *)(v223 + 32 * v183) == v167) {
            break;
          }
          v182 &= v182 - 1;
          if (!v182) {
            goto LABEL_222;
          }
        }
LABEL_225:
        uint64_t v185 = v169 + 32 * v183;
        int v233 = 0;
        unint64_t v234 = 0;
        uint64_t v235 = 0;
        uint64_t v187 = *(unsigned char **)(v185 + 8);
        BOOL v186 = *(unsigned char **)(v185 + 16);
        int64_t v188 = v186 - v187;
        if (v186 == v187)
        {
          unint64_t v190 = 0;
          unint64_t v189 = 0;
        }
        else
        {
          if (v188 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v189 = (const operations_research::sat::ConstraintProto *)operator new(v186 - v187);
          unint64_t v190 = (char *)v189 + 4 * (v188 >> 2);
          int v233 = v189;
          uint64_t v235 = v190;
          memcpy(v189, v187, v188);
          unint64_t v234 = v190;
        }
        uint64_t v191 = v165;
        int v236 = v216;
        unint64_t v238 = 0;
        unint64_t v192 = operator new(0x28uLL);
        uint64_t v193 = (void (**)(void *, void *))&unk_26F0C0990;
        void *v192 = &unk_26F0C0990;
        v192[1] = 0;
        v192[2] = 0;
        v192[3] = 0;
        int64_t v194 = v190 - (char *)v189;
        if (v194)
        {
          if (v194 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v195 = (char *)operator new(v194);
          v192[1] = v195;
          uint64_t v196 = &v195[4 * (v194 >> 2)];
          v192[3] = v196;
          memcpy(v195, v189, v194);
          v192[2] = v196;
        }
        *((_DWORD *)v192 + 8) = v216;
        unint64_t v238 = (void **)v192;
        unint64_t v165 = v191;
        if (v189)
        {
          operator delete(v189);
          unint64_t v192 = v238;
          int v233 = v211;
          if (!v238) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t v193 = (void (**)(void *, void *))*v238;
        }
        else
        {
          int v233 = v211;
        }
        ((void (**)(void *, const operations_research::sat::ConstraintProto **))v193)[6](v192, &v233);
        unint64_t v177 = v238;
        char v164 = v214;
        if (v238 == v237)
        {
          (*(void (**)(void *))(v237[0] + 32))(v237);
          int v199 = *++v162;
          int v161 = (uint64_t *)((char *)v161 + 12);
          if (v199 > -2) {
            goto LABEL_207;
          }
          goto LABEL_240;
        }
      }
      if (v177) {
        (*((void (**)(void **))*v177 + 5))(v177);
      }
      int v197 = *++v162;
      int v161 = (uint64_t *)((char *)v161 + 12);
      if (v197 <= -2) {
        goto LABEL_240;
      }
LABEL_207:
      if (v162 == v164) {
        goto LABEL_244;
      }
    }
  }
  char v162 = (char *)v228;
  do
  {
    unint64_t v163 = (__clz(__rbit64(((*(void *)v162 >> 7) & ~*(void *)v162 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
    v162 += v163;
    int v161 = (uint64_t *)((char *)v161 + 12 * v163);
  }
  while (*v162 < -1);
  char v164 = (char *)v228 + v230;
  if (v162 != (char *)v228 + (void)v230) {
    goto LABEL_206;
  }
LABEL_244:
  if (v220)
  {
    uint64_t v221 = v220;
    operator delete(v220);
  }
  uint64_t v200 = v224;
  if ((void)v224)
  {
    uint64_t v201 = 0;
    uint64_t v202 = 0;
    do
    {
      if ((*((char *)v222 + v202) & 0x80000000) == 0)
      {
        unint64_t v203 = *(void **)(v223 + v201 + 8);
        if (v203)
        {
          *(void *)(v223 + v201 + 16) = v203;
          operator delete(v203);
          uint64_t v200 = v224;
        }
      }
      ++v202;
      v201 += 32;
    }
    while (v202 != v200);
    operator delete(v222);
    uint64_t v222 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v225 = 0;
    *(void *)&long long v224 = 0;
    long long v223 = 0uLL;
  }
  if (*((void *)&v224 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v224 + 1));
  }
  if (v226)
  {
    char v227 = v226;
    operator delete(v226);
  }
  if ((void)v230)
  {
    operator delete(v228);
    uint64_t v228 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v231 = 0;
    *(void *)&long long v230 = 0;
    long long v229 = 0uLL;
  }
  if (*((void *)&v230 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v230 + 1));
  }
  if (v232[0])
  {
    v232[1] = v232[0];
    operator delete(v232[0]);
  }
}

void sub_23CC2AAE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        int v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(void *)(v6 + 16) = v7;
          operator delete(v7);
          uint64_t v2 = *(void *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v5 = 0;
  }
  unsigned int v8 = *(void **)(a1 + 32);
  if (v8) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void operations_research::sat::LoadElementConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v3 = a2;
  uint64_t v240 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  uint64_t v6 = v5;
  if (*((_DWORD *)this + 15) == 14) {
    int v7 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int v7 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 9);
  if (~v8 <= v8) {
    int v9 = *((_DWORD *)v7 + 9);
  }
  else {
    int v9 = ~v8;
  }
  int v10 = *(_DWORD *)(*v5 + 4 * v9);
  uint64_t v11 = *((int *)v7 + 4);
  uint64_t v12 = v5[6];
  unint64_t v192 = v3;
  if (!v11)
  {
LABEL_13:
    int v16 = *((_DWORD *)v7 + 10);
    if (~v16 > v16) {
      int v16 = ~v16;
    }
    if (*(_DWORD *)(v12 + 4 * v16) == -1)
    {
      if (*operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__ >= 1
        && (operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)&operations_research::sat::LoadElementConstraint(operations_research::sat::ConstraintProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_loader.cc", (const char *)1)))
      {
        uint64_t v40 = google::LogMessage::LogMessage((google::LogMessage *)&v237, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1574);
        int v41 = (void *)google::LogMessage::stream(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Fix BOOLean_element not propagated on target", 44);
        google::LogMessage::~LogMessage((google::LogMessage *)&v237);
      }
      goto LABEL_46;
    }
    unint64_t v17 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v3);
    BOOL v18 = v17;
    unint64_t v21 = (uint64_t *)*((void *)this + 6);
    int v20 = (char *)this + 48;
    unint64_t v19 = v21;
    if (*((_DWORD *)v20 + 3) != 14) {
      unint64_t v19 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    }
    unsigned int v22 = *((_DWORD *)v19 + 9);
    if ((int)~v22 <= (int)v22) {
      int v23 = *((_DWORD *)v19 + 9);
    }
    else {
      int v23 = ~v22;
    }
    int v24 = *(_DWORD *)(*v17 + 4 * v23);
    operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v17, (int *)v19 + 4, v200);
    if (*((_DWORD *)v20 + 3) == 14) {
      uint64_t v25 = *(uint64_t **)v20;
    }
    else {
      uint64_t v25 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    }
    int v26 = *((_DWORD *)v25 + 10);
    if (~v26 <= v26) {
      int v27 = *((_DWORD *)v25 + 10);
    }
    else {
      int v27 = ~v26;
    }
    unsigned int v28 = *(_DWORD *)(v18[6] + 4 * v27);
    uint64_t v237 = (char *)&unk_26F0BFEC0;
    LODWORD(v238) = v24 ^ (v22 >> 31);
    uint64_t v239 = (int **)&v237;
    unint64_t v29 = (char *)v3 + 32;
    unint64_t v30 = (void *)*((void *)v3 + 4);
    do
    {
      unint64_t v31 = v30[4];
      BOOL v32 = v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v31 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = v30 + 1;
      }
      if (v32) {
        unint64_t v29 = (char *)v30;
      }
      unint64_t v30 = (void *)*v33;
    }
    while (*v33);
    uint64_t v34 = (__PAIR64__(v28, v26) >> 31);
    if (!(*(void *)(*(void *)(*((void *)v29 + 5) + 40) + 12 * (int)(v24 ^ (v22 >> 31)))
         + *(void *)(*(void *)(*((void *)v29 + 5) + 40) + 12 * (int)(v24 ^ (v22 >> 31) ^ 1))))
    {
      uint64_t v231 = (void (**)(void **))&unk_26F0BFF50;
      LODWORD(v232[0]) = v24 ^ (v22 >> 31);
      int v233 = (void **)&v231;
      uint64_t v35 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()((int *)v232, (uint64_t)v3);
      unint64_t v36 = v34 | ((unint64_t)*(unsigned int *)&v200[0][4 * v35] << 32);
      unint64_t v234 = (void (**)(void **))&unk_26F0C0A10;
      unint64_t v235 = v36;
      int v236 = (void **)&v234;
      uint64_t v37 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
      operations_research::sat::SatSolver::AddBinaryClause(v37, v235 ^ 1, SHIDWORD(v235));
      uint64_t v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v3);
      operations_research::sat::SatSolver::AddBinaryClause(v38, v235, HIDWORD(v235) ^ 1);
      if (v236 == (void **)&v234)
      {
        v234[4]((void **)&v234);
        unint64_t v39 = v233;
        if (v233 != (void **)&v231)
        {
LABEL_40:
          if (v39) {
            (*((void (**)(void **))*v39 + 5))(v39);
          }
          goto LABEL_200;
        }
      }
      else
      {
        if (v236) {
          (*((void (**)(void))*v236 + 5))();
        }
        unint64_t v39 = v233;
        if (v233 != (void **)&v231) {
          goto LABEL_40;
        }
      }
      v231[4]((void **)&v231);
      goto LABEL_200;
    }
    int v197 = 0;
    unint64_t v198 = 0;
    int v199 = 0;
    int64_t v194 = 0;
    unint64_t v195 = 0;
    uint64_t v196 = 0;
    unint64_t v234 = (void (**)(void **))&unk_26F0BD370;
    LODWORD(v235) = v24 ^ (v22 >> 31);
    int v236 = (void **)&v234;
    uint64_t v59 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v59, v235)) {
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v59, v235);
    }
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v59, v235, &v225);
    if (v236 == (void **)&v234)
    {
      v234[4]((void **)&v234);
      int v60 = (int *)v225;
      unint64_t v190 = v226[0];
      if (v225 != (char *)v226[0])
      {
LABEL_71:
        int v187 = v34 ^ 1;
        int v186 = v34;
        while (1)
        {
          unsigned int v62 = *(_DWORD *)&v200[0][4 * *(void *)v60];
          int v63 = v60[2] ^ 1;
          int v64 = v62 ^ 1;
          LODWORD(v222) = v63;
          HIDWORD(v222) = v62 ^ 1;
          LODWORD(v223[0]) = v34;
          uint64_t v231 = (void (**)(void **))&unk_26F0BD480;
          v232[0] = (int *)&v222;
          v232[1] = (int *)3;
          int v233 = (void **)&v231;
          operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v232, (uint64_t)v3);
          if (v233 == (void **)&v231)
          {
            v231[4]((void **)&v231);
          }
          else if (v233)
          {
            (*((void (**)(void))*v233 + 5))();
          }
          uint64_t v222 = (void (**)(void **))__PAIR64__(v62, v63);
          LODWORD(v223[0]) = v187;
          uint64_t v228 = (void (**)(void **))&unk_26F0BD480;
          v229[0] = (int *)&v222;
          v229[1] = (int *)3;
          long long v230 = (void **)&v228;
          operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v229, (uint64_t)v3);
          if (v230 == (void **)&v228)
          {
            v228[4]((void **)&v228);
            uint64_t v66 = v198;
            unint64_t v65 = v199;
            if (v198 < (int *)v199) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v230) {
              (*((void (**)(void))*v230 + 5))();
            }
            uint64_t v66 = v198;
            unint64_t v65 = v199;
            if (v198 < (int *)v199)
            {
LABEL_82:
              *uint64_t v66 = v64;
              unint64_t v198 = v66 + 1;
              uint64_t v68 = v195;
              unint64_t v67 = v196;
              if (v195 >= v196) {
                goto LABEL_106;
              }
              goto LABEL_72;
            }
          }
          unint64_t v69 = (int *)v197;
          int64_t v70 = (char *)v66 - (unsigned char *)v197;
          uint64_t v71 = ((char *)v66 - (unsigned char *)v197) >> 2;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v73 = v65 - (unsigned char *)v197;
          if (v73 >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          unint64_t v74 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v72;
          if (v74)
          {
            if (v74 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v75 = operator new(4 * v74);
            int v76 = (int *)&v75[4 * v71];
            *int v76 = v64;
            uint64_t v77 = (uint64_t)(v76 + 1);
            if (v66 == v69)
            {
LABEL_97:
              uint64_t v3 = v192;
              goto LABEL_103;
            }
          }
          else
          {
            unint64_t v75 = 0;
            int v76 = (int *)(4 * v71);
            *(_DWORD *)(4 * v71) = v64;
            uint64_t v77 = 4 * v71 + 4;
            if (v66 == v69) {
              goto LABEL_97;
            }
          }
          unint64_t v78 = (char *)(v66 - 1) - (char *)v69;
          if (v78 < 0x2C) {
            break;
          }
          unint64_t v79 = (char *)v66 - &v75[v70];
          uint64_t v3 = v192;
          if (v79 < 0x20) {
            goto LABEL_102;
          }
          uint64_t v80 = (v78 >> 2) + 1;
          uint64_t v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v82 = &v66[v81 / 0xFFFFFFFFFFFFFFFCLL];
          int v76 = (int *)((char *)v76 - v81);
          unint64_t v83 = &v75[4 * v71 - 16];
          uint64_t v84 = v66 - 4;
          uint64_t v85 = v80 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v86 = *(_OWORD *)v84;
            *(v83 - 1) = *((_OWORD *)v84 - 1);
            _OWORD *v83 = v86;
            v83 -= 2;
            v84 -= 8;
            v85 -= 8;
          }
          while (v85);
          uint64_t v66 = v82;
          if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_102;
          }
LABEL_103:
          int v197 = v76;
          unint64_t v198 = (int *)v77;
          int v199 = &v75[4 * v74];
          if (v69) {
            operator delete(v69);
          }
          LODWORD(v34) = v186;
          unint64_t v198 = (int *)v77;
          uint64_t v68 = v195;
          unint64_t v67 = v196;
          if (v195 >= v196)
          {
LABEL_106:
            unint64_t v88 = (char *)v194;
            int64_t v89 = v68 - (unsigned char *)v194;
            uint64_t v90 = (v68 - (unsigned char *)v194) >> 2;
            unint64_t v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v92 = v67 - (unsigned char *)v194;
            if (v92 >> 1 > v91) {
              unint64_t v91 = v92 >> 1;
            }
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v93 = v91;
            }
            if (v93)
            {
              if (v93 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v94 = operator new(4 * v93);
              unint64_t v95 = (unsigned int *)&v94[4 * v90];
              *unint64_t v95 = v62;
              uint64_t v61 = (uint64_t)(v95 + 1);
              if (v68 != v88)
              {
LABEL_115:
                unint64_t v96 = v68 - 4 - v88;
                if (v96 < 0x2C)
                {
                  uint64_t v3 = v192;
                  goto LABEL_123;
                }
                unint64_t v97 = v68 - &v94[v89];
                uint64_t v3 = v192;
                if (v97 < 0x20) {
                  goto LABEL_285;
                }
                uint64_t v98 = (v96 >> 2) + 1;
                uint64_t v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
                signed int v100 = &v68[-v99];
                unint64_t v95 = (unsigned int *)((char *)v95 - v99);
                uint64_t v101 = &v94[4 * v90 - 16];
                unint64_t v102 = v68 - 16;
                uint64_t v103 = v98 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v104 = *(_OWORD *)v102;
                  *(v101 - 1) = *((_OWORD *)v102 - 1);
                  _OWORD *v101 = v104;
                  v101 -= 2;
                  v102 -= 32;
                  v103 -= 8;
                }
                while (v103);
                uint64_t v68 = v100;
                if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_285:
                  do
                  {
LABEL_123:
                    unsigned int v105 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *--unint64_t v95 = v105;
                  }
                  while (v68 != v88);
                }
LABEL_124:
                int64_t v194 = v95;
                unint64_t v195 = (char *)v61;
                uint64_t v196 = &v94[4 * v93];
                if (v88) {
                  operator delete(v88);
                }
                LODWORD(v34) = v186;
                goto LABEL_73;
              }
            }
            else
            {
              uint64_t v94 = 0;
              unint64_t v95 = (unsigned int *)(4 * v90);
              *(_DWORD *)(4 * v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v62;
              uint64_t v61 = 4 * v90 + 4;
              if (v68 != v88) {
                goto LABEL_115;
              }
            }
            uint64_t v3 = v192;
            goto LABEL_124;
          }
LABEL_72:
          *(_DWORD *)uint64_t v68 = v62;
          uint64_t v61 = (uint64_t)(v68 + 4);
LABEL_73:
          unint64_t v195 = (char *)v61;
          v60 += 3;
          if (v60 == v190)
          {
            int v60 = (int *)v225;
            if (!v225)
            {
LABEL_142:
              int v111 = (char *)v198;
              if (v198 < (int *)v199)
              {
                int *v198 = v34;
                uint64_t v112 = (uint64_t)(v111 + 4);
                goto LABEL_168;
              }
              uint64_t v113 = (char *)v197;
              int64_t v114 = (char *)v198 - (unsigned char *)v197;
              uint64_t v115 = ((char *)v198 - (unsigned char *)v197) >> 2;
              unint64_t v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v117 = v199 - (unsigned char *)v197;
              if ((v199 - (unsigned char *)v197) >> 1 > v116) {
                unint64_t v116 = v117 >> 1;
              }
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v116;
              }
              if (v118)
              {
                if (v118 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v119 = (char *)operator new(4 * v118);
                uint64_t v120 = &v119[4 * v115];
                int v121 = &v119[4 * v118];
                *(_DWORD *)uint64_t v120 = v34;
                uint64_t v112 = (uint64_t)(v120 + 4);
                int64_t v122 = v111 - v113;
                if (v111 == v113) {
                  goto LABEL_166;
                }
LABEL_160:
                unint64_t v123 = v122 - 4;
                if (v123 < 0x2C) {
                  goto LABEL_286;
                }
                if ((unint64_t)(v111 - v119 - v114) < 0x20) {
                  goto LABEL_286;
                }
                uint64_t v124 = (v123 >> 2) + 1;
                uint64_t v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v126 = &v111[-v125];
                v120 -= v125;
                long long v127 = &v119[4 * v115 - 16];
                long long v128 = v111 - 16;
                uint64_t v129 = v124 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v130 = *(_OWORD *)v128;
                  *((_OWORD *)v127 - 1) = *((_OWORD *)v128 - 1);
                  *(_OWORD *)long long v127 = v130;
                  v127 -= 32;
                  v128 -= 32;
                  v129 -= 8;
                }
                while (v129);
                int v111 = v126;
                if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_286:
                  do
                  {
                    int v131 = *((_DWORD *)v111 - 1);
                    v111 -= 4;
                    *((_DWORD *)v120 - 1) = v131;
                    v120 -= 4;
                  }
                  while (v111 != v113);
                }
              }
              else
              {
                unint64_t v119 = 0;
                uint64_t v120 = (char *)(4 * v115);
                int v121 = 0;
                *(_DWORD *)(4 * v115) = v34;
                uint64_t v112 = 4 * v115 + 4;
                int64_t v122 = v111 - v113;
                if (v111 != v113) {
                  goto LABEL_160;
                }
              }
LABEL_166:
              int v197 = v120;
              unint64_t v198 = (int *)v112;
              int v199 = v121;
              if (v113) {
                operator delete(v113);
              }
LABEL_168:
              unint64_t v198 = (int *)v112;
              int v132 = v34 ^ 1;
              uint64_t v133 = v195;
              if (v195 < v196)
              {
                *(_DWORD *)unint64_t v195 = v132;
                uint64_t v134 = (uint64_t)(v133 + 4);
                goto LABEL_189;
              }
              unint64_t v135 = (char *)v194;
              int64_t v136 = v195 - (unsigned char *)v194;
              uint64_t v137 = (v195 - (unsigned char *)v194) >> 2;
              unint64_t v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v139 = v196 - (unsigned char *)v194;
              if ((v196 - (unsigned char *)v194) >> 1 > v138) {
                unint64_t v138 = v139 >> 1;
              }
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v138;
              }
              if (v140)
              {
                if (v140 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v141 = (char *)operator new(4 * v140);
                int v142 = &v141[4 * v137];
                uint64_t v143 = &v141[4 * v140];
                *(_DWORD *)int v142 = v132;
                uint64_t v134 = (uint64_t)(v142 + 4);
                int64_t v144 = v133 - v135;
                if (v133 == v135) {
                  goto LABEL_187;
                }
LABEL_181:
                unint64_t v145 = v144 - 4;
                if (v145 < 0x2C) {
                  goto LABEL_287;
                }
                if ((unint64_t)(v133 - v141 - v136) < 0x20) {
                  goto LABEL_287;
                }
                uint64_t v146 = (v145 >> 2) + 1;
                uint64_t v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
                int v148 = &v133[-v147];
                v142 -= v147;
                int64_t v149 = &v141[4 * v137 - 16];
                uint64_t v150 = v133 - 16;
                uint64_t v151 = v146 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v152 = *(_OWORD *)v150;
                  *((_OWORD *)v149 - 1) = *((_OWORD *)v150 - 1);
                  *(_OWORD *)int64_t v149 = v152;
                  v149 -= 32;
                  v150 -= 32;
                  v151 -= 8;
                }
                while (v151);
                uint64_t v133 = v148;
                if (v146 != (v146 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_287:
                  do
                  {
                    int v153 = *((_DWORD *)v133 - 1);
                    v133 -= 4;
                    *((_DWORD *)v142 - 1) = v153;
                    v142 -= 4;
                  }
                  while (v133 != v135);
                }
              }
              else
              {
                unint64_t v141 = 0;
                int v142 = (char *)(4 * v137);
                uint64_t v143 = 0;
                *(_DWORD *)(4 * v137) = v132;
                uint64_t v134 = 4 * v137 + 4;
                int64_t v144 = v133 - v135;
                if (v133 != v135) {
                  goto LABEL_181;
                }
              }
LABEL_187:
              int64_t v194 = v142;
              unint64_t v195 = (char *)v134;
              uint64_t v196 = v143;
              if (v135) {
                operator delete(v135);
              }
LABEL_189:
              unint64_t v195 = (char *)v134;
              uint64_t v225 = (char *)&unk_26F0BD480;
              v226[0] = (int *)v197;
              v226[1] = (int *)(((char *)v198 - (unsigned char *)v197) >> 2);
              char v227 = &v225;
              operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v226, (uint64_t)v3);
              if (v227 == &v225)
              {
                (*((void (**)(char **))v225 + 4))(&v225);
              }
              else if (v227)
              {
                (*((void (**)(void))*v227 + 5))();
              }
              uint64_t v222 = (void (**)(void **))&unk_26F0BD480;
              v223[0] = (int *)v194;
              v223[1] = (int *)((v195 - (unsigned char *)v194) >> 2);
              long long v224 = (void **)&v222;
              operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v223, (uint64_t)v3);
              if (v224 == (void **)&v222)
              {
                v222[4]((void **)&v222);
                uint64_t v154 = (char *)v194;
                if (v194) {
                  goto LABEL_197;
                }
              }
              else
              {
                if (v224) {
                  (*((void (**)(void))*v224 + 5))();
                }
                uint64_t v154 = (char *)v194;
                if (v194)
                {
LABEL_197:
                  unint64_t v195 = v154;
                  operator delete(v154);
                }
              }
              if (v197)
              {
                unint64_t v198 = (int *)v197;
                operator delete(v197);
              }
LABEL_200:
              unint64_t v155 = v200[0];
              if (v200[0])
              {
                v200[1] = v200[0];
                goto LABEL_272;
              }
              return;
            }
LABEL_141:
            v226[0] = v60;
            operator delete(v60);
            goto LABEL_142;
          }
        }
        uint64_t v3 = v192;
        do
        {
LABEL_102:
          int v87 = *--v66;
          *--int v76 = v87;
        }
        while (v66 != v69);
        goto LABEL_103;
      }
    }
    else
    {
      if (v236) {
        (*((void (**)(void))*v236 + 5))();
      }
      int v60 = (int *)v225;
      unint64_t v190 = v226[0];
      if (v225 != (char *)v226[0]) {
        goto LABEL_71;
      }
    }
    if (!v60) {
      goto LABEL_142;
    }
    goto LABEL_141;
  }
  int v13 = (int *)v7[3];
  uint64_t v14 = 4 * v11;
  while (1)
  {
    int v15 = *v13;
    if (~*v13 > *v13) {
      int v15 = ~v15;
    }
    if (*(_DWORD *)(v12 + 4 * v15) == -1) {
      break;
    }
    ++v13;
    v14 -= 4;
    if (!v14) {
      goto LABEL_13;
    }
  }
LABEL_46:
  if (*((_DWORD *)this + 15) == 14) {
    int v42 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int v42 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  unsigned int v43 = *((_DWORD *)v42 + 10);
  if ((int)~v43 <= (int)v43) {
    int v44 = *((_DWORD *)v42 + 10);
  }
  else {
    int v44 = ~v43;
  }
  int v45 = *(_DWORD *)(*v6 + 4 * v44);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v6, (int *)v42 + 4, (int **)&v237);
  uint64_t v46 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v3);
  operations_research::Domain::Domain(v193, 0, (((char *)v238 - v237) >> 2) - 1);
  int v47 = v10 ^ (v8 >> 31);
  char updated = operations_research::sat::IntegerTrail::UpdateInitialDomain(v46, v47, (operations_research::Domain *)v193);
  if ((uint64_t)v193[0]) {
    operator delete(v193[1]);
  }
  if (updated)
  {
    uint64_t v50 = v45 ^ (v43 >> 31);
    uint64_t v219 = (void (**)(void **))&unk_26F0BFEC0;
    int v220 = v47;
    uint64_t v221 = (void **)&v219;
    uint64_t v52 = (void *)((char *)v3 + 32);
    uint64_t v51 = (void *)*((void *)v3 + 4);
    unint64_t v53 = (char *)v3 + 32;
    uint64_t v54 = v51;
    do
    {
      unint64_t v55 = v54[4];
      BOOL v56 = v55 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v55 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        signed int v57 = v54;
      }
      else {
        signed int v57 = v54 + 1;
      }
      if (v56) {
        unint64_t v53 = (char *)v54;
      }
      uint64_t v54 = (void *)*v57;
    }
    while (*v57);
    if (!(*(void *)(*(void *)(*((void *)v53 + 5) + 40) + 12 * v47)
         + *(void *)(*(void *)(*((void *)v53 + 5) + 40) + 12 * (v47 ^ 1))))
    {
      char v58 = 0;
      goto LABEL_206;
    }
    int v106 = (void (**)(void **))&unk_26F0BFEC0;
    int v216 = (void (**)(void **))&unk_26F0BFEC0;
    int v217 = v45 ^ (v43 >> 31);
    unint64_t v218 = (void **)&v216;
    uint64_t v107 = (char *)v3 + 32;
    do
    {
      unint64_t v108 = v51[4];
      BOOL v109 = v108 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v108 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        long long v110 = v51;
      }
      else {
        long long v110 = v51 + 1;
      }
      if (v109) {
        uint64_t v107 = (char *)v51;
      }
      uint64_t v51 = (void *)*v110;
    }
    while (*v110);
    if (*(void *)(*(void *)(*((void *)v107 + 5) + 40) + 12 * (int)v50)
       + *(void *)(*(void *)(*((void *)v107 + 5) + 40) + 12 * (int)(v50 ^ 1)))
    {
      char v58 = operations_research::sat::DetectEquivalencesInElementConstraint(this, v3, v48);
      if (v218 != (void **)&v216)
      {
        if (v218) {
          (*((void (**)(void))*v218 + 5))();
        }
LABEL_206:
        if (v221 == (void **)&v219)
        {
          v219[4]((void **)&v219);
          if (v58) {
            goto LABEL_270;
          }
        }
        else
        {
          if (v221) {
            (*((void (**)(void))*v221 + 5))();
          }
          if (v58) {
            goto LABEL_270;
          }
        }
        uint64_t v213 = &unk_26F0BFEC0;
        int v214 = v47;
        uint64_t v215 = &v213;
        unint64_t v156 = (void *)*v52;
        uint64_t v157 = (char *)v3 + 32;
        uint64_t v158 = (void *)*v52;
        do
        {
          unint64_t v159 = v158[4];
          BOOL v160 = v159 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v159 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
            int v161 = v158;
          }
          else {
            int v161 = v158 + 1;
          }
          if (v160) {
            uint64_t v157 = (char *)v158;
          }
          uint64_t v158 = (void *)*v161;
        }
        while (*v161);
        if (!(*(void *)(*(void *)(*((void *)v157 + 5) + 40) + 12 * v47)
             + *(void *)(*(void *)(*((void *)v157 + 5) + 40) + 12 * (v47 ^ 1))))
        {
          unint64_t v207 = (void (**)(void **))&unk_26F0BFF50;
          v208[0] = v47;
          unint64_t v209 = (void **)&v207;
          uint64_t v162 = operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(v208, (uint64_t)v3);
          unint64_t v163 = v50 | ((unint64_t)*(unsigned int *)&v237[4 * v162] << 32);
          uint64_t v210 = (void (**)(void **))&unk_26F0BFFD0;
          unint64_t v211 = v163;
          unint64_t v212 = (void **)&v210;
          operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)&v211, (uint64_t)v3);
          if (v212 == (void **)&v210)
          {
            v210[4]((void **)&v210);
            char v164 = v209;
            if (v209 != (void **)&v207)
            {
LABEL_225:
              if (v164) {
                (*((void (**)(void **))*v164 + 5))(v164);
              }
              goto LABEL_270;
            }
          }
          else
          {
            if (v212) {
              (*((void (**)(void))*v212 + 5))();
            }
            char v164 = v209;
            if (v209 != (void **)&v207) {
              goto LABEL_225;
            }
          }
          v207[4]((void **)&v207);
          goto LABEL_270;
        }
        unint64_t v204 = &unk_26F0BFEC0;
        int v205 = v50;
        uint64_t v206 = &v204;
        unint64_t v165 = (char *)v3 + 32;
        do
        {
          unint64_t v166 = v156[4];
          BOOL v167 = v166 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v166 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
            unint64_t v168 = v156;
          }
          else {
            unint64_t v168 = v156 + 1;
          }
          if (v167) {
            unint64_t v165 = (char *)v156;
          }
          unint64_t v156 = (void *)*v168;
        }
        while (*v168);
        if (*(void *)(*(void *)(*((void *)v165 + 5) + 40) + 12 * (int)v50)
           + *(void *)(*(void *)(*((void *)v165 + 5) + 40) + 12 * (int)(v50 ^ 1)))
        {
          uint64_t v169 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
          BOOL IsFullyEncoded = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v169, v50);
          if (*((_DWORD *)this + 15) == 14) {
            unint64_t v170 = (uint64_t *)*((void *)this + 6);
          }
          else {
            unint64_t v170 = &operations_research::sat::_ElementConstraintProto_default_instance_;
          }
          uint64_t v171 = *((int *)v170 + 4);
          int v189 = v171;
          if (v171)
          {
            int v172 = 0;
            unint64_t v173 = (int *)v170[3];
            uint64_t v191 = &v173[v171];
            while (1)
            {
              unsigned int v176 = *v173;
              if (~*v173 <= *v173) {
                int v177 = *v173;
              }
              else {
                int v177 = ~v176;
              }
              signed int v178 = *(_DWORD *)(*v6 + 4 * v177) ^ (v176 >> 31);
              uint64_t v201 = (void (**)(void **))&unk_26F0BFEC0;
              signed int v202 = v178;
              unint64_t v203 = (void **)&v201;
              uint64_t v179 = (void *)*v52;
              unint64_t v180 = (char *)v3 + 32;
              do
              {
                unint64_t v181 = v179[4];
                BOOL v182 = v181 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
                if (v181 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
                  unint64_t v183 = v179;
                }
                else {
                  unint64_t v183 = v179 + 1;
                }
                if (v182) {
                  unint64_t v180 = (char *)v179;
                }
                uint64_t v179 = (void *)*v183;
              }
              while (*v183);
              if (*(void *)(*(void *)(*((void *)v180 + 5) + 40) + 12 * v178)
                 + *(void *)(*(void *)(*((void *)v180 + 5) + 40) + 12 * (v178 ^ 1)))
              {
                int v174 = operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v169, v178);
                if (v203 != (void **)&v201)
                {
                  if (v203) {
                    (*((void (**)(void))*v203 + 5))();
                  }
                  goto LABEL_243;
                }
                unint64_t v175 = v201;
              }
              else
              {
                int v174 = 1;
                unint64_t v175 = (void (**)(void **))&unk_26F0BFEC0;
              }
              v175[4]((void **)&v201);
LABEL_243:
              v172 += v174;
              if (++v173 == v191) {
                goto LABEL_263;
              }
            }
          }
          int v172 = 0;
LABEL_263:
          int v184 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v3)
                           + 420);
          if (v184 >= 1)
          {
            int v185 = IsFullyEncoded;
            if (v172 >= v189 - 1) {
              int v185 = 1;
            }
            if (v185 == 1)
            {
              if (v184 < 2) {
              else
              }
                operations_research::sat::LoadElementConstraintAC(this, v3, v48);
              goto LABEL_270;
            }
          }
        }
        operations_research::sat::LoadElementConstraintBounds(this, v3, v48);
        goto LABEL_270;
      }
      int v106 = v216;
    }
    else
    {
      char v58 = 0;
    }
    v106[4]((void **)&v216);
    goto LABEL_206;
  }
LABEL_270:
  unint64_t v155 = v237;
  if (v237)
  {
    unint64_t v238 = (int *)v237;
LABEL_272:
    operator delete(v155);
  }
}

void sub_23CC2C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_objecta,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v59 = *(void **)(v57 - 128);
  if (v59)
  {
    *(void *)(v57 - 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v59;
    operator delete(v59);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::LoadElementConstraintHalfAC(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 14) {
    uint64_t v6 = (int *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = (int *)&operations_research::sat::_ElementConstraintProto_default_instance_;
  }
  int v8 = v6[9];
  int v7 = v6[10];
  if (~v8 <= v8) {
    int v9 = v6[9];
  }
  else {
    int v9 = ~v8;
  }
  int v10 = *(_DWORD *)(*v5 + 4 * v9);
  if (~v7 <= v7) {
    int v11 = v6[10];
  }
  else {
    int v11 = ~v7;
  }
  int v12 = *(_DWORD *)(*v5 + 4 * v11);
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, v6 + 4, (int **)v43);
  int v13 = v10 ^ (v8 >> 31);
  BOOL v56 = &unk_26F0BFEC0;
  int v57 = v13;
  char v58 = &v56;
  uint64_t v14 = (char *)a2 + 32;
  int v15 = (void *)*((void *)a2 + 4);
  int v16 = (char *)a2 + 32;
  unint64_t v17 = v15;
  do
  {
    unint64_t v18 = v17[4];
    BOOL v19 = v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      int v20 = v17;
    }
    else {
      int v20 = v17 + 1;
    }
    if (v19) {
      int v16 = (char *)v17;
    }
    unint64_t v17 = (void *)*v20;
  }
  while (*v20);
  if (!(*(void *)(*(void *)(*((void *)v16 + 5) + 40) + 12 * v13)
       + *(void *)(*(void *)(*((void *)v16 + 5) + 40) + 12 * (v13 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v40, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1519);
    uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: !m->Get(IsFixed(index)) ", 38);
    goto LABEL_61;
  }
  unint64_t v53 = &unk_26F0BFEC0;
  signed int v21 = v12 ^ (v7 >> 31);
  signed int v54 = v21;
  unint64_t v55 = &v53;
  do
  {
    unint64_t v22 = v15[4];
    BOOL v23 = v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      int v24 = v15;
    }
    else {
      int v24 = v15 + 1;
    }
    if (v23) {
      uint64_t v14 = (char *)v15;
    }
    int v15 = (void *)*v24;
  }
  while (*v24);
  if (!(*(void *)(*(void *)(*((void *)v14 + 5) + 40) + 12 * v21)
       + *(void *)(*(void *)(*((void *)v14 + 5) + 40) + 12 * (v21 ^ 1))))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v40, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.cc", 1520);
    uint64_t v35 = (void *)google::LogMessage::stream((google::LogMessage *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: !m->Get(IsFixed(target)) ", 39);
LABEL_61:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v40);
  }
  uint64_t v50 = (void (**)(void **))&unk_26F0BD370;
  signed int v51 = v21;
  uint64_t v52 = (void **)&v50;
  uint64_t v25 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v25, v51)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v25, v51);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v25, v51, (char **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v52 == (void **)&v50)
  {
    v50[4]((void **)&v50);
  }
  else if (v52)
  {
    (*((void (**)(void))*v52 + 5))();
  }
  int v47 = (void (**)(void **))&unk_26F0BD370;
  signed int v48 = v13;
  uint64_t v49 = (void **)&v47;
  int v26 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v26, v48)) {
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v26, v48);
  }
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v26, v48, (char **)&v40);
  if (v49 == (void **)&v47)
  {
    v47[4]((void **)&v47);
    int v27 = v40;
    unsigned int v28 = v41;
    if (v40 != v41) {
      goto LABEL_42;
    }
LABEL_54:
    if (!v27) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v49) {
    (*((void (**)(void))*v49 + 5))();
  }
  int v27 = v40;
  unsigned int v28 = v41;
  if (v40 == v41) {
    goto LABEL_54;
  }
  do
  {
LABEL_42:
    uint64_t v29 = *(void *)v27;
    int v30 = v27[2];
    signed int v31 = *(_DWORD *)((char *)v43[0] + ((uint64_t)(*(void *)v27 << 32) >> 30));
    int v44 = (void (**)(void **))&unk_26F0BD370;
    signed int v45 = v31;
    uint64_t v46 = (void **)&v44;
    BOOL v32 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v32, v45)) {
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v32, v45);
    }
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v32, v45, (char **)v39);
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
    if (v46 == (void **)&v44)
    {
      v44[4]((void **)&v44);
    }
    else if (v46)
    {
      (*((void (**)(void))*v46 + 5))();
    }
    uint64_t v33 = operator new(4uLL);
    _DWORD *v33 = v30;
    uint64_t v37 = v33 + 1;
    uint64_t v38 = v33 + 1;
    unint64_t v36 = v33;
    uint64_t v37 = v33;
    operator delete(v33);
    v27 += 3;
  }
  while (v27 != v28);
  int v27 = v40;
  if (v40)
  {
LABEL_55:
    int v41 = v27;
    operator delete(v27);
  }
LABEL_56:
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
}

void sub_23CC2C910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadTableConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 16) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_TableConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)&v76);
  if (*((_DWORD *)this + 15) == 16) {
    int v7 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int v7 = &operations_research::sat::_TableConstraintProto_default_instance_;
  }
  uint64_t v8 = *((int *)v7 + 10);
  int v9 = (const void *)v7[6];
  unint64_t v74 = 0;
  unint64_t v75 = 0;
  uint64_t v73 = 0;
  if (v8)
  {
    if ((v8 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = 8 * v8;
    int v11 = (char *)operator new(8 * v8);
    int v12 = &v11[8 * v8];
    uint64_t v73 = v11;
    unint64_t v75 = v12;
    memcpy(v11, v9, v10);
    unint64_t v74 = v12;
  }
  else
  {
    int v11 = 0;
    int v12 = 0;
  }
  uint64_t v61 = this;
  unsigned int v62 = a2;
  unint64_t v13 = (char *)v77 - v76;
  uint64_t v66 = v11;
  unint64_t v14 = ((v12 - v11) >> 3) / (unint64_t)(int)(((char *)v77 - v76) >> 2);
  std::vector<std::vector<long long>>::vector(&v71, (int)v14);
  if ((int)v14 >= 1 && (int)(v13 >> 2) >= 1)
  {
    uint64_t v24 = 0;
    int v25 = 0;
    uint64_t v63 = v14;
    do
    {
      uint64_t v26 = v25;
      v25 += v13 >> 2;
      int v64 = v25;
      uint64_t v65 = v24;
      do
      {
        while (1)
        {
          int v27 = (char *)v71 + 24 * v24;
          unsigned int v28 = v73;
          uint64_t v29 = (uint64_t *)(v27 + 8);
          int v30 = (char *)*((void *)v27 + 1);
          unint64_t v31 = *((void *)v27 + 2);
          uint64_t v66 = (char *)v73;
          if ((unint64_t)v30 >= v31) {
            break;
          }
          *(void *)int v30 = v73[v26];
          *uint64_t v29 = (uint64_t)(v30 + 8);
          if (v25 == ++v26) {
            goto LABEL_25;
          }
        }
        BOOL v32 = *(char **)v27;
        uint64_t v33 = (uint64_t)&v30[-*(void *)v27];
        uint64_t v34 = v33 >> 3;
        unint64_t v35 = (v33 >> 3) + 1;
        if (v35 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v31 - (void)v32;
        if (v36 >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (!v37)
        {
          uint64_t v38 = 0;
          unint64_t v39 = (void *)(8 * v34);
          *(void *)(8 * v34) = v73[v26];
          uint64_t v40 = 8 * v34 + 8;
          if (v30 == v32) {
            goto LABEL_46;
          }
LABEL_40:
          unint64_t v41 = v30 - 8 - v32;
          if (v41 < 0x58) {
            goto LABEL_79;
          }
          if ((unint64_t)(v30 - &v38[v33]) < 0x20) {
            goto LABEL_79;
          }
          uint64_t v42 = (v41 >> 3) + 1;
          uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          int v44 = &v30[-v43];
          unint64_t v39 = (void *)((char *)v39 - v43);
          signed int v45 = &v38[8 * v34 - 16];
          uint64_t v46 = v30 - 16;
          uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *signed int v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          int v30 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_79:
            do
            {
              uint64_t v49 = *((void *)v30 - 1);
              v30 -= 8;
              *--unint64_t v39 = v49;
            }
            while (v30 != v32);
          }
          goto LABEL_46;
        }
        if (v37 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v38 = operator new(8 * v37);
        unint64_t v39 = &v38[8 * v34];
        void *v39 = v28[v26];
        uint64_t v40 = (uint64_t)(v39 + 1);
        if (v30 != v32) {
          goto LABEL_40;
        }
LABEL_46:
        *(void *)int v27 = v39;
        *uint64_t v29 = v40;
        *((void *)v27 + 2) = &v38[8 * v37];
        if (v32) {
          operator delete(v32);
        }
        int v25 = v64;
        uint64_t v24 = v65;
        *uint64_t v29 = v40;
        ++v26;
      }
      while (v64 != v26);
LABEL_25:
      ++v24;
    }
    while (v24 != v63);
  }
  int v16 = &operations_research::sat::_TableConstraintProto_default_instance_;
  if (*((_DWORD *)v61 + 15) == 16) {
    int v16 = (uint64_t *)*((void *)v61 + 6);
  }
  uint64_t v17 = ((char *)v77 - v76) >> 2;
  if (*((unsigned char *)v16 + 60))
  {
    unint64_t v69 = (char *)v71;
    long long v70 = v72;
    long long v72 = 0uLL;
    uint64_t v71 = 0;
    operations_research::sat::AddNegatedTableConstraint((uint64_t)v76, v17, &v69, (uint64_t)v62);
    unint64_t v18 = v69;
    if (!v69) {
      goto LABEL_61;
    }
    BOOL v19 = (char *)v70;
    int v20 = v69;
    if ((char *)v70 != v69)
    {
      signed int v21 = (char *)v70;
      do
      {
        BOOL v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *((void *)v19 - 2) = v22;
          operator delete(v22);
        }
        BOOL v19 = v21;
      }
      while (v21 != v18);
      int v20 = v69;
    }
    *(void *)&long long v70 = v18;
  }
  else
  {
    long long __p = v71;
    long long v68 = v72;
    long long v72 = 0uLL;
    uint64_t v71 = 0;
    operations_research::sat::AddTableConstraint((uint64_t)v76, (absl::lts_2020_02_25::numbers_internal *)v17, (char *)&__p, (uint64_t)v62);
    uint64_t v50 = (char *)__p;
    if (!__p) {
      goto LABEL_61;
    }
    signed int v51 = (char *)v68;
    int v20 = __p;
    if ((void *)v68 != __p)
    {
      uint64_t v52 = (char *)v68;
      do
      {
        signed int v54 = (void *)*((void *)v52 - 3);
        v52 -= 24;
        unint64_t v53 = v54;
        if (v54)
        {
          *((void *)v51 - 2) = v53;
          operator delete(v53);
        }
        signed int v51 = v52;
      }
      while (v52 != v50);
      int v20 = __p;
    }
    *(void *)&long long v68 = v50;
  }
  operator delete(v20);
LABEL_61:
  unint64_t v55 = (char *)v71;
  if (v71)
  {
    BOOL v56 = (char *)v72;
    int v57 = v71;
    if ((void *)v72 != v71)
    {
      char v58 = (char *)v72;
      do
      {
        int v60 = (void *)*((void *)v58 - 3);
        v58 -= 24;
        uint64_t v59 = v60;
        if (v60)
        {
          *((void *)v56 - 2) = v59;
          operator delete(v59);
        }
        BOOL v56 = v58;
      }
      while (v58 != v55);
      int v57 = v71;
    }
    *(void *)&long long v72 = v55;
    operator delete(v57);
  }
  if (v66)
  {
    unint64_t v74 = v66;
    operator delete(v66);
  }
  if (v76)
  {
    uint64_t v77 = (int *)v76;
    operator delete(v76);
  }
}

void sub_23CC2CE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a17);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a23);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadAutomatonConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  uint64_t v6 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  if (*((_DWORD *)this + 15) == 17) {
    int v7 = (uint64_t *)*((void *)this + 6);
  }
  else {
    int v7 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v7 + 28, (int **)v37);
  if (*((_DWORD *)this + 15) == 17) {
    uint64_t v8 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v8 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
  }
  unint64_t v9 = *((int *)v8 + 10);
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  std::vector<std::vector<long long>>::reserve((uint64_t)&v34, v9);
  uint64_t v10 = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v10;
    do
    {
      if (*((_DWORD *)this + 15) == 17) {
        unint64_t v13 = (uint64_t *)*((void *)this + 6);
      }
      else {
        unint64_t v13 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
      }
      uint64_t v14 = *(void *)(v13[6] + v11);
      uint64_t v15 = *(void *)(v13[12] + v11);
      uint64_t v16 = *(void *)(v13[9] + v11);
      uint64_t v17 = operator new(0x18uLL);
      __p[1] = v17 + 3;
      uint64_t v33 = (char *)(v17 + 3);
      *uint64_t v17 = v14;
      v17[1] = v15;
      v17[2] = v16;
      __p[0] = v17;
      unint64_t v18 = v35;
      if ((unint64_t)v35 < v36)
      {
        *(void *)unint64_t v35 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(_OWORD *)unint64_t v18 = *(_OWORD *)__p;
        *((void *)v18 + 2) = v33;
        unint64_t v35 = v18 + 24;
      }
      else
      {
        unint64_t v35 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)&v34, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v11 += 8;
    }
    while (v12 != v11);
  }
  if (*((_DWORD *)this + 15) == 17) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v19 = v6[17];
  uint64_t v20 = *((int *)v6 + 4);
  signed int v21 = (const void *)v6[3];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  if (v20)
  {
    if ((v20 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v22 = 8 * v20;
    BOOL v23 = (char *)operator new(8 * v20);
    uint64_t v24 = &v23[8 * v20];
    __p[0] = v23;
    uint64_t v33 = v24;
    memcpy(v23, v21, v22);
    __p[1] = v24;
  }
  operations_research::sat::TransitionConstraint((uint64_t)v37, (uint64_t *)&v34, v19, (uint64_t)__p, (uint64_t)v39);
  uint64_t v38 = a2;
  if (!v40) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v40 + 48))(v40, &v38);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
    int v25 = __p[0];
    if (__p[0])
    {
LABEL_27:
      __p[1] = v25;
      operator delete(v25);
    }
  }
  else
  {
    if (v40) {
      (*(void (**)(void))(*v40 + 40))();
    }
    int v25 = __p[0];
    if (__p[0]) {
      goto LABEL_27;
    }
  }
  uint64_t v26 = (char *)v34;
  if (v34)
  {
    uint64_t v27 = v35;
    unsigned int v28 = v34;
    if (v35 != v34)
    {
      uint64_t v29 = v35;
      do
      {
        unint64_t v31 = (void *)*((void *)v29 - 3);
        v29 -= 24;
        int v30 = v31;
        if (v31)
        {
          *((void *)v27 - 2) = v30;
          operator delete(v30);
        }
        uint64_t v27 = v29;
      }
      while (v29 != v26);
      unsigned int v28 = v34;
    }
    unint64_t v35 = v26;
    operator delete(v28);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void sub_23CC2D1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a13);
  if (!a16) {
    _Unwind_Resume(a1);
  }
  a17 = (uint64_t)a16;
  operator delete(a16);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  uint64_t v6 = (char *)operator new(24 * a2);
  int v7 = &v6[v5];
  uint64_t v8 = &v6[24 * ((v4 - v2) / 24)];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  unint64_t v9 = &v6[24 * ((v4 - v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 24);
    v4 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v4 + 2);
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  while (v4 != v2);
  uint64_t v11 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    uint64_t v12 = v2;
    do
    {
      uint64_t v14 = (void *)*((void *)v12 - 3);
      v12 -= 24;
      unint64_t v13 = v14;
      if (v14)
      {
        *((void *)v2 - 2) = v13;
        operator delete(v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void operations_research::sat::GetSquareMatrixFromIntegerVariables(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  int v40 = *(_DWORD *)(v7 + 280);
  if (v40 == -1)
  {
    uint64_t v13 = v7;
    uint64_t v14 = *(operations_research::sat::SatSolver **)v7;
    int v15 = *((_DWORD *)v14 + 4);
    operations_research::sat::SatSolver::SetNumVariables(v14, v15 + 1);
    *(_DWORD *)(v13 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 2 * v15;
    operations_research::sat::SatSolver::AddUnitClause(*(void *)v13, 2 * v15);
    int v40 = *(_DWORD *)(v13 + 280);
    uint64_t v8 = v5 - v6;
    uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    int v10 = *(_DWORD *)(v9 + 280);
    if (v10 != -1)
    {
LABEL_3:
      uint64_t v11 = v8 << 30;
      unint64_t v12 = (int)(v8 >> 2);
      long long __p = 0;
      uint64_t v43 = 0;
      int v44 = 0;
      if (!(v8 << 30)) {
        goto LABEL_14;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = v5 - v6;
    uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    int v10 = *(_DWORD *)(v9 + 280);
    if (v10 != -1) {
      goto LABEL_3;
    }
  }
  uint64_t v16 = v9;
  uint64_t v17 = *(operations_research::sat::SatSolver **)v9;
  int v18 = *((_DWORD *)v17 + 4);
  operations_research::sat::SatSolver::SetNumVariables(v17, v18 + 1);
  *(_DWORD *)(v16 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 2 * v18;
  operations_research::sat::SatSolver::AddUnitClause(*(void *)v16, 2 * v18);
  int v10 = *(_DWORD *)(v16 + 280);
  uint64_t v11 = v8 << 30;
  unint64_t v12 = (int)(v8 >> 2);
  long long __p = 0;
  uint64_t v43 = 0;
  int v44 = 0;
  if (!(v8 << 30)) {
    goto LABEL_14;
  }
LABEL_7:
  if (v11 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = (int32x4_t *)operator new(v8 & 0x3FFFFFFFFLL);
  unsigned int v20 = v10 ^ 1;
  long long __p = v19;
  int v44 = &v19->i8[4 * v12];
  unint64_t v21 = (v12 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  size_t v22 = (unsigned int *)v19;
  if (v21 < 7) {
    goto LABEL_45;
  }
  unint64_t v23 = v21 + 1;
  size_t v22 = (unsigned int *)v19 + (v23 & 0x7FFFFFFFFFFFFFF8);
  int32x4_t v24 = vdupq_n_s32(v20);
  int v25 = v19 + 1;
  uint64_t v26 = v23 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v25[-1] = v24;
    *int v25 = v24;
    v25 += 2;
    v26 -= 8;
  }
  while (v26);
  if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_45:
    do
      *v22++ = v20;
    while (v22 != (unsigned int *)((char *)v19 + 4 * v12));
  }
  uint64_t v43 = &v19->i8[4 * v12];
LABEL_14:
  std::vector<std::vector<operations_research::sat::Literal>>::vector(a3, v12, (uint64_t)&__p);
  unint64_t v27 = (unint64_t)v8 >> 2;
  if (__p)
  {
    uint64_t v43 = (char *)__p;
    operator delete(__p);
  }
  if ((int)v27 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v39 = ((unint64_t)v8 >> 2);
    do
    {
      int v29 = 0;
      do
      {
        int v30 = *(_DWORD *)(*a1 + 4 * v28);
        uint64_t v52 = (void (**)(void **))&unk_26F0BFEC0;
        int v53 = v30;
        signed int v54 = (void **)&v52;
        BOOL v31 = std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::operator()((uint64_t)&v52, a2);
        if (v54 == (void **)&v52)
        {
          v52[4]((void **)&v52);
          if (v31) {
            goto LABEL_27;
          }
        }
        else
        {
          if (v54) {
            (*((void (**)(void))*v54 + 5))();
          }
          if (v31)
          {
LABEL_27:
            int v32 = *(_DWORD *)(*a1 + 4 * v28);
            uint64_t v49 = (void (**)(void **))&unk_26F0BFF50;
            int v50 = v32;
            signed int v51 = (void **)&v49;
            int v33 = std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()((uint64_t)&v49, a2);
            if (v51 == (void **)&v49)
            {
              v49[4]((void **)&v49);
            }
            else if (v51)
            {
              (*((void (**)(void))*v51 + 5))();
            }
            *(_DWORD *)(*(void *)(*a3 + 24 * v28) + 4 * v33) = v40;
            goto LABEL_22;
          }
        }
        int v34 = *(_DWORD *)(*a1 + 4 * v28);
        uint64_t v45 = a2;
        uint64_t v46 = (void (**)(void **))&unk_26F0BD370;
        int v47 = v34;
        long long v48 = (void **)&v46;
        std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::operator()((uint64_t)&v46, &v45, (char **)&__p);
        if (v48 == (void **)&v46)
        {
          v46[4]((void **)&v46);
          unint64_t v35 = (char *)__p;
          unint64_t v36 = v43;
          if (__p == v43) {
            goto LABEL_39;
          }
        }
        else
        {
          if (v48) {
            (*((void (**)(void))*v48 + 5))();
          }
          unint64_t v35 = (char *)__p;
          unint64_t v36 = v43;
          if (__p == v43) {
            goto LABEL_39;
          }
        }
        uint64_t v37 = *(void *)(*a3 + 24 * v28);
        uint64_t v38 = v35;
        do
        {
          *(_DWORD *)(v37 + ((uint64_t)(*(void *)v38 << 32) >> 30)) = *((_DWORD *)v38 + 2);
          v38 += 12;
        }
        while (v38 != v36);
LABEL_39:
        if (v35)
        {
          uint64_t v43 = v35;
          operator delete(v35);
        }
LABEL_22:
        ++v29;
      }
      while (v29 != v27);
      ++v28;
    }
    while (v28 != v39);
  }
}

void sub_23CC2D7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC2D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  std::vector<std::vector<int>>::~vector[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

void sub_23CC2D80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::function<long long ()(operations_research::sat::Model const&)>::~function((uint64_t *)va);
  std::vector<std::vector<int>>::~vector[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

void sub_23CC2D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::function<BOOL ()(operations_research::sat::Model const&)>::~function((uint64_t *)va);
  std::vector<std::vector<int>>::~vector[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadCircuitConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 15) == 15) {
    uint64_t v3 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v3 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
  }
  uint64_t v4 = *((int *)v3 + 4);
  if (!v4) {
    return;
  }
  uint64_t v5 = (const void *)v3[3];
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v16 = 0;
  if ((v4 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = operator new(4 * v4);
  int v18 = (char *)v16 + 4 * v4;
  memcpy(v16, v5, 4 * v4);
  uint64_t v17 = v18;
  uint64_t v7 = (const void *)v3[6];
  uint64_t v8 = *((int *)v3 + 10);
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
  if (v8)
  {
    if ((v8 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = operator new(4 * v8);
    int v15 = (char *)v13 + 4 * v8;
    memcpy(v13, v7, 4 * v8);
    uint64_t v14 = v15;
  }
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v9, (int *)v3 + 16, (char **)__p);
  int v10 = operations_research::sat::ReindexArcs((int **)&v16, (int **)&v13);
  operations_research::sat::SubcircuitConstraint(v10, (uint64_t)&v16, (uint64_t)&v13, (uint64_t)__p, 0, (uint64_t)v20);
  uint64_t v19 = a2;
  if (!v21) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v21 + 48))(v21, &v19);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      goto LABEL_15;
    }
  }
  __p[1] = v11;
  operator delete(v11);
LABEL_15:
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
}

void sub_23CC2DA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a13)
  {
    operator delete(a13);
    unint64_t v21 = __p;
    if (!__p) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v21 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v21);
  goto LABEL_4;
}

void sub_23CC2DAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x23CC2DAB0);
  }
  JUMPOUT(0x23CC2DAA8);
}

void operations_research::sat::LoadRoutesConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 15) == 23) {
    uint64_t v3 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v3 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
  }
  uint64_t v4 = *((int *)v3 + 4);
  if (!v4) {
    return;
  }
  uint64_t v5 = (const void *)v3[3];
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v16 = 0;
  if ((v4 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = operator new(4 * v4);
  int v18 = (char *)v16 + 4 * v4;
  memcpy(v16, v5, 4 * v4);
  uint64_t v17 = v18;
  uint64_t v7 = (const void *)v3[6];
  uint64_t v8 = *((int *)v3 + 10);
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
  if (v8)
  {
    if ((v8 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = operator new(4 * v8);
    int v15 = (char *)v13 + 4 * v8;
    memcpy(v13, v7, 4 * v8);
    uint64_t v14 = v15;
  }
  uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v9, (int *)v3 + 16, (char **)__p);
  int v10 = operations_research::sat::ReindexArcs((int **)&v16, (int **)&v13);
  operations_research::sat::SubcircuitConstraint(v10, (uint64_t)&v16, (uint64_t)&v13, (uint64_t)__p, 1, (uint64_t)v20);
  uint64_t v19 = a2;
  if (!v21) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v21 + 48))(v21, &v19);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      goto LABEL_15;
    }
  }
  __p[1] = v11;
  operator delete(v11);
LABEL_15:
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
}

void sub_23CC2DD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a13)
  {
    operator delete(a13);
    unint64_t v21 = __p;
    if (!__p) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v21 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v21);
  goto LABEL_4;
}

void sub_23CC2DDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x23CC2DD68);
  }
  JUMPOUT(0x23CC2DD60);
}

void operations_research::sat::LoadCircuitCoveringConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
  if (*((_DWORD *)this + 15) == 25) {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v6 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  }
  operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v5, (int *)v6 + 4, (int **)v37);
  operations_research::sat::GetSquareMatrixFromIntegerVariables((uint64_t *)v37, (uint64_t)a2, &v35);
  if (*((_DWORD *)this + 15) == 25) {
    uint64_t v7 = (uint64_t *)*((void *)this + 6);
  }
  else {
    uint64_t v7 = &operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  }
  uint64_t v8 = v7[6];
  uint64_t v9 = *((int *)v7 + 10);
  unint64_t v10 = 8 * v9;
  uint64_t v11 = (uint64_t *)(v8 + 8 * v9);
  int v33 = 0;
  int v34 = 0;
  long long __p = 0;
  if (v11 != (uint64_t *)v8)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = (int32x4_t *)operator new(v10 >> 1);
    long long __p = v12;
    int v34 = &v12->i8[4 * v9];
    unint64_t v13 = 8 * v9 - 8;
    uint64_t v14 = (uint64_t *)v8;
    int v15 = v12;
    if (v13 < 0x38) {
      goto LABEL_44;
    }
    uint64_t v16 = (v13 >> 3) + 1;
    uint64_t v14 = (uint64_t *)(v8 + 8 * (v16 & 0x3FFFFFFFFFFFFFF8));
    int v15 = (int32x4_t *)((char *)v12 + 4 * (v16 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v17 = v12 + 1;
    int v18 = (int32x4_t *)(v8 + 32);
    uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v21 = v18[-2];
      int32x4_t v20 = v18[-1];
      int32x4_t v23 = *v18;
      int32x4_t v22 = v18[1];
      v18 += 4;
      v17[-1] = vuzp1q_s32(v21, v20);
      *uint64_t v17 = vuzp1q_s32(v23, v22);
      v17 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        uint64_t v24 = *v14++;
        v15->i32[0] = v24;
        int v15 = (int32x4_t *)((char *)v15 + 4);
      }
      while (v14 != v11);
    }
    int v33 = v15;
  }
  operations_research::sat::ExactlyOnePerRowAndPerColumn((uint64_t *)&v35, (uint64_t)v41);
  uint64_t v38 = a2;
  if (!v42) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v42 + 48))(v42, &v38);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v42)
  {
    (*(void (**)(void))(*v42 + 40))();
  }
  operations_research::sat::CircuitCovering((uint64_t *)&v35, (uint64_t)&__p, (uint64_t)v39);
  uint64_t v38 = a2;
  if (!v40) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::ConstraintProto **))(*v40 + 48))(v40, &v38);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
    int v25 = (int32x4_t *)__p;
    if (__p)
    {
LABEL_25:
      int v33 = v25;
      operator delete(v25);
    }
  }
  else
  {
    if (v40) {
      (*(void (**)(void))(*v40 + 40))();
    }
    int v25 = (int32x4_t *)__p;
    if (__p) {
      goto LABEL_25;
    }
  }
  uint64_t v26 = (char *)v35;
  if (v35)
  {
    unint64_t v27 = v36;
    uint64_t v28 = v35;
    if (v36 != v35)
    {
      int v29 = v36;
      do
      {
        BOOL v31 = (void *)*((void *)v29 - 3);
        v29 -= 24;
        int v30 = v31;
        if (v31)
        {
          *((void *)v27 - 2) = v30;
          operator delete(v30);
        }
        unint64_t v27 = v29;
      }
      while (v29 != v26);
      uint64_t v28 = v35;
    }
    unint64_t v36 = v26;
    operator delete(v28);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void sub_23CC2E0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::LoadConstraint(operations_research::sat *this, const operations_research::sat::ConstraintProto *a2, operations_research::sat::Model *a3)
{
  int v3 = *((_DWORD *)this + 15);
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
    case 19:
      return result;
    case 3:
      operations_research::sat::LoadBoolOrConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 4:
      operations_research::sat::LoadBoolAndConstraint((uint64_t **)this, a2, a3);
      uint64_t result = 1;
      break;
    case 5:
      operations_research::sat::LoadBoolXorConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 7:
      operations_research::sat::LoadIntDivConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 9:
      operations_research::sat::LoadIntMaxConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 10:
      operations_research::sat::LoadIntMinConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 11:
      operations_research::sat::LoadIntProdConstraint(this, a2, a3);
    case 12:
      operations_research::sat::LoadLinearConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 13:
      operations_research::sat::LoadAllDiffConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 14:
      operations_research::sat::LoadElementConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 15:
      operations_research::sat::LoadCircuitConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 16:
      operations_research::sat::LoadTableConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 17:
      operations_research::sat::LoadAutomatonConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 20:
      operations_research::sat::LoadNoOverlapConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 21:
      operations_research::sat::LoadNoOverlap2dConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 22:
      operations_research::sat::LoadCumulativeConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 23:
      operations_research::sat::LoadRoutesConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 25:
      operations_research::sat::LoadCircuitCoveringConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 26:
      operations_research::sat::LoadAtMostOneConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    case 27:
      operations_research::sat::LoadLinMaxConstraint(this, a2, a3);
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0BF878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BF878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(_DWORD *a1, uint64_t *a2)
{
  int v3 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  int v4 = a1[2];
  int v5 = a1[3];
  int v6 = a1[4];
  int v7 = a1[5];

  return operations_research::sat::IntervalsRepository::CreateInterval(v3, v4, v5, v6, 0, v7);
}

uint64_t std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_"
                     "NS0_7LiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                                "_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19NewOptionalIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_NS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewOptionalInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d) {
      int v5 = v1;
    }
    else {
      int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CC2E6C0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x20C40A3A67D38);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d) {
      int v5 = v1;
    }
    else {
      int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CC2E880(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C407E1D6AB2);
  _Unwind_Resume(a1);
}

operations_research::sat::PrecedencesPropagator *operations_research::sat::PrecedencesPropagator::PrecedencesPropagator(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "PrecedencesPropagator");
  *((unsigned char *)this + 31) = 21;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  BOOL v4 = (char *)this + 40;
  *(void *)this = &unk_26F0C44E8;
  *((void *)this + 5) = &unk_26F0C4528;
  *((void *)this + 6) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((void *)this + 7) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a2);
  *((void *)this + 8) = v5;
  int v6 = operations_research::sat::GenericLiteralWatcher::Register(v5, (uint64_t)v4);
  *((_DWORD *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
  *((_DWORD *)this + 18) = v6;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = (char *)this + 80;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -1;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  int v7 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddPropagator(v7, this);
  operations_research::sat::IntegerTrail::RegisterWatcher(*((void **)this + 7), (uint64_t)this + 80);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 8), *((_DWORD *)this + 18), 0);
  return this;
}

void sub_23CC2EA7C(_Unwind_Exception *a1)
{
  uint64_t v11 = *(void **)(v1 + 568);
  if (v11)
  {
    *(void *)(v1 + 576) = v11;
    operator delete(v11);
    unint64_t v12 = *(void **)(v1 + 544);
    if (!v12)
    {
LABEL_3:
      unint64_t v13 = *(void **)(v1 + 520);
      if (!v13) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v12 = *(void **)(v1 + 544);
    if (!v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 552) = v12;
  operator delete(v12);
  unint64_t v13 = *(void **)(v1 + 520);
  if (!v13)
  {
LABEL_4:
    uint64_t v14 = *(void **)(v1 + 496);
    if (!v14) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v13);
  uint64_t v14 = *(void **)(v1 + 496);
  if (!v14)
  {
LABEL_5:
    std::deque<int>::~deque[abi:ne180100](v9);
    int v15 = *(void **)(v1 + 424);
    if (!v15) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v14);
  std::deque<int>::~deque[abi:ne180100](v9);
  int v15 = *(void **)(v1 + 424);
  if (!v15)
  {
LABEL_6:
    uint64_t v16 = *(void **)(v1 + 400);
    if (!v16) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v1 + 432) = v15;
  operator delete(v15);
  uint64_t v16 = *(void **)(v1 + 400);
  if (!v16)
  {
LABEL_7:
    uint64_t v17 = *(void **)(v1 + 376);
    if (!v17) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(void *)(v1 + 408) = v16;
  operator delete(v16);
  uint64_t v17 = *(void **)(v1 + 376);
  if (!v17)
  {
LABEL_8:
    gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v8);
    int v18 = *(void **)(v1 + 328);
    if (!v18) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  *(void *)(v1 + 384) = v17;
  operator delete(v17);
  gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v8);
  int v18 = *(void **)(v1 + 328);
  if (!v18)
  {
LABEL_9:
    uint64_t v19 = *(void **)(v1 + 304);
    if (!v19) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  *(void *)(v1 + 336) = v18;
  operator delete(v18);
  uint64_t v19 = *(void **)(v1 + 304);
  if (!v19)
  {
LABEL_10:
    int32x4_t v20 = *(void **)(v1 + 280);
    if (!v20) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  *(void *)(v1 + 312) = v19;
  operator delete(v19);
  int32x4_t v20 = *(void **)(v1 + 280);
  if (!v20)
  {
LABEL_11:
    int32x4_t v21 = *(void **)(v1 + 256);
    if (!v21)
    {
LABEL_13:
      gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(v7);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v6);
      gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(v5);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v4);
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v3);
      *(void *)uint64_t v1 = v2;
      if (*(char *)(v1 + 31) < 0) {
        operator delete(*(void **)(v1 + 8));
      }
      _Unwind_Resume(a1);
    }
LABEL_12:
    *(void *)(v1 + 264) = v21;
    operator delete(v21);
    goto LABEL_13;
  }
LABEL_23:
  *(void *)(v1 + 288) = v20;
  operator delete(v20);
  int32x4_t v21 = *(void **)(v1 + 256);
  if (!v21) {
    goto LABEL_13;
  }
  goto LABEL_12;
}

void operations_research::sat::IntegerTrail::RegisterWatcher(void *a1, uint64_t a2)
{
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a2, -1431655765 * ((a1[6] - a1[5]) >> 2));
  BOOL v4 = (uint64_t *)a1[110];
  uint64_t v5 = v4;
  unint64_t v6 = a1[111];
  if ((unint64_t)v4 < v6)
  {
    uint64_t *v4 = a2;
    uint64_t v7 = (uint64_t)(v4 + 1);
    goto LABEL_23;
  }
  uint64_t v8 = (char *)a1[109];
  uint64_t v9 = ((char *)v4 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v6 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = (uint64_t *)&v13[8 * v9];
    int v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    uint64_t v16 = (char *)((char *)v4 - v8);
    if (v4 == (uint64_t *)v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (uint64_t *)(8 * v9);
  int v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  uint64_t v16 = (char *)((char *)v4 - v8);
  if (v4 != (uint64_t *)v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v5 = &v4[v19 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v14 = (uint64_t *)((char *)v14 - v19);
    int32x4_t v20 = &v13[8 * v9 - 16];
    int32x4_t v21 = v4 - 2;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)int32x4_t v20 = v23;
      v20 -= 32;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v24 = *--v5;
        *--uint64_t v14 = v24;
      }
      while (v5 != (uint64_t *)v8);
    }
    uint64_t v5 = (uint64_t *)a1[109];
  }
LABEL_21:
  a1[109] = v14;
  a1[110] = v7;
  a1[111] = v15;
  if (v5) {
    operator delete(v5);
  }
LABEL_23:
  a1[110] = v7;
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::PrecedencesPropagator::OptionalArcIndex_tag_,int>,operations_research::sat::PrecedencesPropagator::ArcInfo,std::allocator<operations_research::sat::PrecedencesPropagator::ArcInfo>>::~ITIVector(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 5)) {
          operator delete(*(v3 - 4));
        }
        v3 -= 8;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::PrecedencesPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BF8F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PrecedencesPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BF8F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::IntervalsRepository>::~Delete(void *a1)
{
  *a1 = &unk_26F0BF930;
  BOOL v4 = (void *)a1[1];
  uint64_t v2 = a1 + 1;
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntervalsRepository>::~Delete(void *a1)
{
  *a1 = &unk_26F0BF930;
  unint64_t v3 = (void *)a1[1];
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::default_delete<operations_research::sat::IntervalsRepository>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v3 = (void *)a2[14];
    if (v3)
    {
      a2[15] = v3;
      operator delete(v3);
    }
    BOOL v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)a2[8];
    if (v5)
    {
      a2[9] = v5;
      operator delete(v5);
    }
    unint64_t v6 = (void *)a2[5];
    if (v6)
    {
      a2[6] = v6;
      operator delete(v6);
    }
    uint64_t v7 = (void *)a2[2];
    if (v7)
    {
      a2[3] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x23ECF2BC0);
  }
}

void std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0BF978;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BF978;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  int v4 = a1[2];
  int v5 = a1[3];
  int v6 = a1[4];

  return operations_research::sat::IntervalsRepository::CreateInterval(v3, v4, v5, v6, 0, -1);
}

uint64_t std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_"
                                "S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11NewIntervalEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewInterval(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CC2F22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0BF9F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_26F0BF9F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  int v4 = *(_DWORD *)(a1 + 12);
  int v5 = *(_DWORD *)(a1 + 8) ^ 1;

  return operations_research::sat::SatSolver::AddBinaryClause(v3, v5, v4);
}

uint64_t std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11ImplicationENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v19[7] = v3;
    v19[8] = v4;
    int v6 = a2;
    uint64_t v7 = (void **)result;
    uint64_t v8 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>>::__find_equal<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(v7, v8, v19, &v18, (void *)((char *)v6 + 28));
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v10 = (uint64_t **)result;
        uint64_t v11 = (char *)operator new(0x28uLL);
        int v12 = *((_DWORD *)v6 + 9);
        *(void *)(v11 + 28) = *(void *)((char *)v6 + 28);
        *((_DWORD *)v11 + 9) = v12;
        uint64_t v13 = v19[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        *unint64_t v10 = (uint64_t *)v11;
        uint64_t v14 = (void *)**v7;
        if (v14)
        {
          *uint64_t v7 = v14;
          int v15 = *v10;
        }
        else
        {
          int v15 = (uint64_t *)v11;
        }
        __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], v15);
        v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v16 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v16 = (void *)v6[2];
        BOOL v17 = *v16 == (void)v6;
        int v6 = v16;
      }
      while (!v17);
LABEL_3:
      int v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void *std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>>::__find_equal<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, uint64_t v7 = *(void *)((char *)a2 + 28), *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        unint64_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    uint64_t v16 = *a5;
    if (*(void *)((char *)v10 + 28) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)((char *)v18 + 28);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = (void *)*v19;
          int v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        int v5 = v19 + 1;
        uint64_t v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      int v12 = (void *)a2[1];
      do
      {
        uint64_t v13 = v12;
        int v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      int32x4_t v21 = a2;
      do
      {
        uint64_t v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        int32x4_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *(void *)((char *)v13 + 28))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            long long v23 = v22;
            uint64_t v24 = *(void *)((char *)v22 + 28);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = (void *)*v23;
            int v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          int v5 = v23 + 1;
          uint64_t v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void operations_research::sat::FullEncodingFixedPointComputer::~FullEncodingFixedPointComputer(operations_research::sat::FullEncodingFixedPointComputer *this)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this + 168);
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 12);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 13);
    uint64_t v6 = (void *)*((void *)this + 12);
    if (v5 != v4)
    {
      uint64_t v7 = *((void *)this + 13);
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v4;
    operator delete(v6);
  }
  unint64_t v10 = (void *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 6);
  if (v11) {
    operator delete(v11);
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
      {
        uint64_t v6 = *v4 + v2;
        if (*(void *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 32) = 0;
        }
        uint64_t v5 = *(void **)(v6 + 40);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(void *)(a1 + 24));
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v4 = 0;
  }
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  return a1;
}

void *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BFA78;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0BFA78;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0BFA78;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((unsigned char *)v2 + 32) = *(unsigned char *)(a1 + 32);
  return v2;
}

void sub_23CC2F95C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = &unk_26F0BFA78;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = (unsigned char *)result[1];
  uint64_t v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a2 + 24) = v8;
    __n128 result = memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  *(unsigned char *)(a2 + 32) = *((unsigned char *)v3 + 32);
  return result;
}

void sub_23CC2FA28(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS"
                                "3_EEEEbEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LiteralXorIsERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEbEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::LiteralXorIs(std::vector<operations_research::sat::Literal> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
}

void sub_23CC2FC94(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x23ECF2BC0](v1, 0x10A1C4049CBD120);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::BooleanXorPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFAE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BooleanXorPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFAE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::erase<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v5 = *a1;
  unint64_t v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v5 + (v6 & v7));
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(void *)(a1[1] + 12 * v12) == v3) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7) {
    return 0;
  }
  --a1[2];
  uint64_t v14 = *(void *)(v5 + ((v12 - 8) & v7));
  unint64_t v15 = *(void *)(v5 + v12) & (~*(void *)(v5 + v12) << 6) & 0x8080808080808080;
  unint64_t v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v21 = 0;
    char v18 = -2;
  }
  else
  {
    unsigned int v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    BOOL v20 = v19 >= 8;
    uint64_t v21 = v19 < 8;
    if (v20) {
      char v18 = -2;
    }
    else {
      char v18 = 0x80;
    }
  }
  *(unsigned char *)(v5 + v12) = v18;
  *(unsigned char *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  uint64_t v22 = a1[4];
  a1[5] += v21;
  if (!v22) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v26 = a1[4];
    if (!v26) {
      return;
    }
LABEL_21:
    *((void *)v26 + 4) = v14 >> 3;
    *((void *)v26 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      BOOL v20 = &v5[12 * (void)v13];
      unint64_t v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v20)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v20));
      uint64_t v22 = *a1;
      long long v23 = a1[3];
      unint64_t v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v24 = (v15 + v24) & (unint64_t)v23;
          unint64_t v25 = *(void *)&v22[v24] & (~*(void *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      unint64_t v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      char v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = *(void *)v20;
      uint64_t v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v20 + 2);
      *(void *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v26 = a1[4];
  if (v26) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v39 = *(void *)(result + 32);
    if (!v39) {
      return result;
    }
LABEL_26:
    *(void *)(v39 + 32) = v15 >> 3;
    *(void *)(v39 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(void *)(*(void *)(result + 8) + 12 * v14);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 12 * v18;
          unint64_t v27 = (uint64_t *)(v25 + 12 * v14);
          uint64_t v28 = *v27;
          *(_DWORD *)(v26 + 8) = *((_DWORD *)v27 + 2);
          *(void *)uint64_t v26 = v28;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          int v29 = (uint64_t *)(v25 + 12 * v14);
          uint64_t v30 = *v29;
          int v31 = *((_DWORD *)v29 + 2);
          uint64_t v32 = 12 * v18;
          int v33 = (uint64_t *)(v25 + 12 * v18);
          int v34 = *((_DWORD *)v33 + 2);
          *int v29 = *v33;
          *((_DWORD *)v29 + 2) = v34;
          uint64_t v35 = *(void *)(result + 8) + v32;
          *(void *)uint64_t v35 = v30;
          *(_DWORD *)(v35 + 8) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v36 = v14 - (v14 >> 3);
  BOOL v37 = v14 == 7;
  uint64_t v38 = 6;
  if (!v37) {
    uint64_t v38 = v36;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0) = v38 - *(void *)(result + 16);
  uint64_t v39 = *(void *)(result + 32);
  if (v39) {
    goto LABEL_26;
  }
  return result;
}

void std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F0BFB30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFB30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEE"
                                "S6_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14EnforcedClauseEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEES6_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::EnforcedClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v24 = *(void *)(a1 + 24);
    if (!v24) {
      goto LABEL_67;
    }
    goto LABEL_36;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v44 = a1;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(void *)a1 + 4 * v2;
  uint64_t v46 = (_DWORD *)v7;
  do
  {
    while (1)
    {
      int v8 = *v6 ^ 1;
      if (v3 >= v4) {
        break;
      }
      *v3++ = v8;
      if (++v6 == (_DWORD *)v7) {
        goto LABEL_33;
      }
    }
    uint64_t v9 = v3 - v5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v4 - (char *)v5) >> 1 > v10) {
      unint64_t v10 = ((char *)v4 - (char *)v5) >> 1;
    }
    if ((unint64_t)((char *)v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int8x16_t v12 = operator new(4 * v11);
      uint64_t v13 = (int *)&v12[4 * v9];
      *uint64_t v13 = v8;
      uint64_t v14 = (uint64_t)(v13 + 1);
      if (v3 == v5) {
        goto LABEL_19;
      }
    }
    else
    {
      int8x16_t v12 = 0;
      uint64_t v13 = (int *)(4 * v9);
      *(_DWORD *)(4 * v9) = v8;
      uint64_t v14 = 4 * v9 + 4;
      if (v3 == v5) {
        goto LABEL_19;
      }
    }
    unint64_t v15 = (char *)(v3 - 1) - (char *)v5;
    if (v15 < 0xBC)
    {
      uint64_t v16 = v3;
      goto LABEL_18;
    }
    if (&v12[(char *)v3 - (char *)v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[(char *)v3 - (char *)v5 - 4])
    {
      uint64_t v16 = v3;
      do
      {
LABEL_18:
        int v17 = *--v16;
        *--uint64_t v13 = v17;
      }
      while (v16 != v5);
      goto LABEL_19;
    }
    if ((int *)((char *)v3 - (v15 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
    {
      uint64_t v16 = v3;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v5 - v12) < 0x20)
    {
      uint64_t v16 = v3;
      goto LABEL_18;
    }
    uint64_t v18 = (v15 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v16 = &v3[v19 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v13 = (int *)((char *)v13 - v19);
    unint64_t v20 = &v12[4 * v9 - 16];
    unint64_t v21 = v3 - 4;
    uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 8;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_18;
    }
LABEL_19:
    unint64_t v4 = (int *)&v12[4 * v11];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = v13;
    unint64_t v3 = (int *)v14;
    uint64_t v7 = (uint64_t)v46;
    ++v6;
  }
  while (v6 != v46);
LABEL_33:
  a1 = v44;
  uint64_t v24 = *(void *)(v44 + 24);
  if (v24)
  {
LABEL_36:
    uint64_t v25 = *(int **)(a1 + 16);
    uint64_t v26 = &v25[v24];
    int v47 = v26;
    do
    {
      while (1)
      {
        int v27 = *v25;
        if (v3 >= v4) {
          break;
        }
        *v3++ = v27;
        if (++v25 == v26) {
          goto LABEL_67;
        }
      }
      uint64_t v28 = v3 - v5;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v4 - (char *)v5) >> 1 > v29) {
        unint64_t v29 = ((char *)v4 - (char *)v5) >> 1;
      }
      if ((unint64_t)((char *)v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30)
      {
        if (v30 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v31 = operator new(4 * v30);
        uint64_t v32 = (int *)&v31[4 * v28];
        *uint64_t v32 = v27;
        uint64_t v33 = (uint64_t)(v32 + 1);
        if (v3 == v5) {
          goto LABEL_53;
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = (int *)(4 * v28);
        *(_DWORD *)(4 * v28) = v27;
        uint64_t v33 = 4 * v28 + 4;
        if (v3 == v5) {
          goto LABEL_53;
        }
      }
      unint64_t v34 = (char *)(v3 - 1) - (char *)v5;
      if (v34 >= 0xBC)
      {
        if (&v31[(char *)v3 - (char *)v5 - 4 - (v34 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[(char *)v3 - (char *)v5 - 4])
        {
          uint64_t v35 = v3;
        }
        else if ((int *)((char *)v3 - (v34 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
        {
          uint64_t v35 = v3;
        }
        else if ((unint64_t)((char *)v5 - v31) >= 0x20)
        {
          uint64_t v37 = (v34 >> 2) + 1;
          uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v35 = &v3[v38 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v32 = (int *)((char *)v32 - v38);
          uint64_t v39 = &v31[4 * v28 - 16];
          int v40 = v3 - 4;
          uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            _OWORD *v39 = v42;
            v39 -= 2;
            v40 -= 8;
            v41 -= 8;
          }
          while (v41);
          if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v35 = v3;
        }
      }
      else
      {
        uint64_t v35 = v3;
      }
      do
      {
        int v36 = *--v35;
        *--uint64_t v32 = v36;
      }
      while (v35 != v5);
LABEL_53:
      unint64_t v4 = (int *)&v31[4 * v30];
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v32;
      unint64_t v3 = (int *)v33;
      uint64_t v26 = v47;
      ++v25;
    }
    while (v25 != v47);
  }
LABEL_67:
  long long v48 = (void (**)(void **))&unk_26F0BD480;
  v49[0] = v5;
  v49[1] = (int *)(v3 - v5);
  int v50 = (void **)&v48;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v49, a2);
  if (v50 == (void **)&v48)
  {
    v48[4]((void **)&v48);
    uint64_t v43 = v5;
    if (v5) {
      goto LABEL_71;
    }
  }
  else
  {
    if (v50) {
      (*((void (**)(void))*v50 + 5))();
    }
    uint64_t v43 = v5;
    if (v5) {
LABEL_71:
    }
      operator delete(v43);
  }
}

void sub_23CC30C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0BFBB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFBB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(void *a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = (void **)a1[3];

  return operations_research::sat::SatSolver::AddLinearConstraint(v3, 1, v4, 1, v5, v6);
}

uint64_t std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9"
                     "allocatorIS3_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWith"
                                "CoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23BooleanLinearConstraintExxPNSt3__16vectorINS0_16LiteralWithCoeffENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::BooleanLinearConstraint(long long,long long,std::vector<operations_research::sat::LiteralWithCoeff> *)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26F0BFC30;
  return result;
}

void std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0BFC30;
}

uint64_t std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  uint64_t v3 = v2[4];
  operations_research::sat::SatSolver::SetNumVariables((operations_research::sat::SatSolver *)v2, v3 + 1);
  return v3;
}

uint64_t std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18NewBooleanVariableEvEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewBooleanVariable(void)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0BFCC0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFCC0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_E"
                                "iEES4_S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17ProductConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ProductConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  int v4 = *a1;
  int v5 = a1[1];
  int v6 = *a1;
  uint64_t v7 = (void *)(a2 + 32);
  if (*a1 == v5)
  {
    int v87 = &unk_26F0BFD30;
    int v88 = v4;
    int64_t v89 = &v87;
    int v8 = (void *)*v7;
    uint64_t v9 = a2 + 32;
    unint64_t v10 = (void *)*v7;
    do
    {
      unint64_t v11 = v10[4];
      BOOL v12 = v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v10 + 1;
      }
      if (v12) {
        uint64_t v9 = (uint64_t)v10;
      }
      unint64_t v10 = (void *)*v13;
    }
    while (*v13);
    if ((*(void *)(*(void *)(*(void *)(v9 + 40) + 40) + 12 * v6) & 0x8000000000000000) == 0) {
      operator new();
    }
    uint64_t v84 = &unk_26F0BFDF8;
    int v85 = v4;
    long long v86 = &v84;
    do
    {
      unint64_t v35 = v8[4];
      BOOL v36 = v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v37 = v8;
      }
      else {
        uint64_t v37 = v8 + 1;
      }
      if (v36) {
        uint64_t v7 = v8;
      }
      int v8 = (void *)*v37;
    }
    while (*v37);
    if ((*(void *)(*(void *)(v7[5] + 40) + 12 * (v4 ^ 1)) & 0x8000000000000000) == 0) {
      operator new();
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 764);
    char v58 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v58, "Not supported");
  }
  else
  {
    uint64_t v81 = &unk_26F0BFD30;
    int v82 = v4;
    unint64_t v83 = &v81;
    uint64_t v14 = (void *)*v7;
    uint64_t v15 = a2 + 32;
    uint64_t v16 = (void *)*v7;
    do
    {
      unint64_t v17 = v16[4];
      BOOL v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = v16 + 1;
      }
      if (v18) {
        uint64_t v15 = (uint64_t)v16;
      }
      uint64_t v16 = (void *)*v19;
    }
    while (*v19);
    if ((*(void *)(*(void *)(*(void *)(v15 + 40) + 40) + 12 * v6) & 0x8000000000000000) == 0)
    {
      unint64_t v78 = &unk_26F0BFD30;
      int v79 = v5;
      uint64_t v80 = &v78;
      uint64_t v20 = a2 + 32;
      unint64_t v21 = v14;
      do
      {
        unint64_t v22 = v21[4];
        BOOL v23 = v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v22 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = v21 + 1;
        }
        if (v23) {
          uint64_t v20 = (uint64_t)v21;
        }
        unint64_t v21 = (void *)*v24;
      }
      while (*v24);
      if ((*(void *)(*(void *)(*(void *)(v20 + 40) + 40) + 12 * v5) & 0x8000000000000000) == 0) {
        operator new();
      }
    }
    unint64_t v75 = &unk_26F0BFD30;
    int v76 = v4;
    uint64_t v77 = &v75;
    uint64_t v25 = a2 + 32;
    uint64_t v26 = v14;
    do
    {
      unint64_t v27 = v26[4];
      BOOL v28 = v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v27 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        unint64_t v29 = v26;
      }
      else {
        unint64_t v29 = v26 + 1;
      }
      if (v28) {
        uint64_t v25 = (uint64_t)v26;
      }
      uint64_t v26 = (void *)*v29;
    }
    while (*v29);
    if ((*(void *)(*(void *)(*(void *)(v25 + 40) + 40) + 12 * v6) & 0x8000000000000000) == 0)
    {
      long long v72 = &unk_26F0BFDF8;
      int v73 = v5;
      unint64_t v74 = &v72;
      uint64_t v30 = a2 + 32;
      int v31 = v14;
      do
      {
        unint64_t v32 = v31[4];
        BOOL v33 = v32 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v32 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          unint64_t v34 = v31;
        }
        else {
          unint64_t v34 = v31 + 1;
        }
        if (v33) {
          uint64_t v30 = (uint64_t)v31;
        }
        int v31 = (void *)*v34;
      }
      while (*v34);
      if ((*(void *)(*(void *)(*(void *)(v30 + 40) + 40) + 12 * (v5 ^ 1)) & 0x8000000000000000) == 0) {
        operator new();
      }
    }
    unint64_t v69 = &unk_26F0BFDF8;
    int v70 = v4;
    uint64_t v71 = &v69;
    uint64_t v38 = a2 + 32;
    uint64_t v39 = v14;
    do
    {
      unint64_t v40 = v39[4];
      BOOL v41 = v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        long long v42 = v39;
      }
      else {
        long long v42 = v39 + 1;
      }
      if (v41) {
        uint64_t v38 = (uint64_t)v39;
      }
      uint64_t v39 = (void *)*v42;
    }
    while (*v42);
    if ((*(void *)(*(void *)(*(void *)(v38 + 40) + 40) + 12 * (v4 ^ 1)) & 0x8000000000000000) == 0)
    {
      uint64_t v66 = &unk_26F0BFD30;
      int v67 = v5;
      long long v68 = &v66;
      uint64_t v43 = a2 + 32;
      uint64_t v44 = v14;
      do
      {
        unint64_t v45 = v44[4];
        BOOL v46 = v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v45 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          int v47 = v44;
        }
        else {
          int v47 = v44 + 1;
        }
        if (v46) {
          uint64_t v43 = (uint64_t)v44;
        }
        uint64_t v44 = (void *)*v47;
      }
      while (*v47);
      if ((*(void *)(*(void *)(*(void *)(v43 + 40) + 40) + 12 * v5) & 0x8000000000000000) == 0) {
        operator new();
      }
    }
    uint64_t v63 = &unk_26F0BFDF8;
    int v48 = v4 ^ 1;
    int v64 = v4;
    uint64_t v65 = &v63;
    uint64_t v49 = a2 + 32;
    int v50 = v14;
    do
    {
      unint64_t v51 = v50[4];
      BOOL v52 = v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        int v53 = v50;
      }
      else {
        int v53 = v50 + 1;
      }
      if (v52) {
        uint64_t v49 = (uint64_t)v50;
      }
      int v50 = (void *)*v53;
    }
    while (*v53);
    if ((*(void *)(*(void *)(*(void *)(v49 + 40) + 40) + 12 * v48) & 0x8000000000000000) == 0)
    {
      int v60 = &unk_26F0BFDF8;
      int v61 = v5;
      unsigned int v62 = &v60;
      do
      {
        unint64_t v54 = v14[4];
        BOOL v55 = v54 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
        if (v54 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
          BOOL v56 = v14;
        }
        else {
          BOOL v56 = v14 + 1;
        }
        if (v55) {
          uint64_t v7 = v14;
        }
        uint64_t v14 = (void *)*v56;
      }
      while (*v56);
      if ((*(void *)(*(void *)(v7[5] + 40) + 12 * (v5 ^ 1)) & 0x8000000000000000) == 0) {
        operator new();
      }
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.h", 786);
    int v57 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v57, "Not supported");
  }
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
}

void sub_23CC318D0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CC318D8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40E78A96FALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26F0BFD30;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFD30;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  uint64_t v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v2 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  return *(void *)(*(void *)(v2[5] + 40) + 12 * *(int *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10LowerBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::LowerBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::SquarePropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFDC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SquarePropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFDC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26F0BFDF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFDF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  uint64_t v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v2 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  return -*(void *)(*(void *)(v2[5] + 40) + 12 * (*(_DWORD *)(a1 + 8) ^ 1));
}

uint64_t std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10UpperBoundEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::UpperBound(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::PositiveProductPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFE78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PositiveProductPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0BFE78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26F0BFEC0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFEC0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  uint64_t v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v2 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  return *(void *)(*(void *)(v2[5] + 40) + 12 * *(int *)(a1 + 8))
       + *(void *)(*(void *)(v2[5] + 40) + 12 * (*(_DWORD *)(a1 + 8) ^ 1)) == 0;
}

uint64_t std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat7IsFixedEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::IsFixed(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,BOOL ()(operations_research::sat::Model const&)>::target_type()
{
}

void std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26F0BFF50;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0BFF50;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()((int *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat5ValueEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

uint64_t operations_research::sat::Value(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}::operator()(int *a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  uint64_t v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v6 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      int v8 = v3;
    }
    else {
      int v8 = v3 + 1;
    }
    if (v7) {
      unint64_t v5 = v3;
    }
    unint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
    uint64_t v9 = v5[5];
  }
  else {
LABEL_12:
  }
    uint64_t v9 = 0;
  int v10 = *a1;
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t result = *(void *)(v11 + 12 * *a1);
  uint64_t v14 = result;
  uint64_t v13 = *(void *)(v11 + 12 * (v10 ^ 1));
  uint64_t v15 = -v13;
  if (result + v13) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v14, (int)&v15, "trail->LowerBound(v) == trail->UpperBound(v)");
  }
  return result;
}

void sub_23CC32178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0BFFD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_26F0BFFD0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8EqualityEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Equality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a1;
  BOOL v12 = (void (**)(void **))&unk_26F0C0040;
  uint64_t v13 = v4;
  uint64_t v14 = (void **)&v12;
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
  operations_research::sat::PrecedencesPropagator::AddArc(v5, v13, SHIDWORD(v13), 0, -1, 0, 0);
  if (v14 == (void **)&v12)
  {
    v12[4]((void **)&v12);
  }
  else if (v14)
  {
    (*((void (**)(void))*v14 + 5))();
  }
  unint64_t v6 = a1[1] | ((unint64_t)*a1 << 32);
  uint64_t v9 = (uint64_t (**)(void **))&unk_26F0C0040;
  unint64_t v10 = v6;
  uint64_t v11 = (void **)&v9;
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
  operations_research::sat::PrecedencesPropagator::AddArc(v7, v10, SHIDWORD(v10), 0, -1, 0, 0);
  uint64_t result = (uint64_t)v11;
  if (v11 == (void **)&v9) {
    return v9[4]((void **)&v9);
  }
  if (v11) {
    return (*((uint64_t (**)(void))*v11 + 5))();
  }
  return result;
}

void sub_23CC32450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CC32464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F0C0040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_26F0C0040;
  a2[1] = *(void *)(result + 8);
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);

  operations_research::sat::PrecedencesPropagator::AddArc(v3, v4, v5, 0, -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4"
                                "_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C00D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C00D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS"
                     "2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23FixedDivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_INS0_17IntegerValue_tag_ExEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::FixedDivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
}

void sub_23CC32808(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C4064A2AE3FLL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::FixedDivisionPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0140;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::FixedDivisionPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C0140;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F0C0188;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C0188;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_E"
                     "UlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_"
                                "EiEES4_S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18DivisionConstraintEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::DivisionConstraint(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
}

void sub_23CC32B44(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40E78A96FALL);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DivisionPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C01F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DivisionPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C01F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0240;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0240;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_26F0C0240;
  v2[2] = 0;
  v2[3] = 0;
  int v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_23CC32DD4(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(void *result, uint64_t a2)
{
  unint64_t v3 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = &unk_26F0C0240;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = (unsigned char *)result[1];
  int v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    int v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a2 + 24) = v8;
    __n128 result = memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_23CC32EA0(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16v"
                     "ectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "RKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMinOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::IsEqualToMinOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  int64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      unint64_t v6 = *((unsigned int *)a1 + 6) | ((unint64_t)*v4 << 32);
      int v8 = (void (**)(void **))&unk_26F0C0040;
      unint64_t v9 = v6;
      unint64_t v10 = (void **)&v8;
      uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a2);
      operations_research::sat::PrecedencesPropagator::AddArc(v7, v9, SHIDWORD(v9), 0, -1, 0, 0);
      if (v10 == (void **)&v8)
      {
        v8[4]((void **)&v8);
      }
      else if (v10)
      {
        (*((void (**)(void))*v10 + 5))();
      }
      ++v4;
    }
    while (v4 != v5);
  }
  operator new();
}

void sub_23CC33188(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A1C40C7DE62E2);
  _Unwind_Resume(a1);
}

void sub_23CC331B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::MinPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C02B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::MinPropagator>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C02B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    int v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        unint64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void *operations_research::sat::LinearExpression::LinearExpression(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  unint64_t v10 = *(unsigned char **)(a2 + 24);
  unint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_23CC3343C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v5 = result;
    if (a4 >= 0x492492492492493) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = operator new(56 * a4);
    int v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[7 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = operations_research::sat::LinearExpression::LinearExpression(&v8[v9 / 8], a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      int v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_23CC33534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CC33548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearExpression>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearExpression>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      int64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          int64_t v6 = (void *)*((void *)v4 - 4);
          if (v6)
          {
            *((void *)v4 - 3) = v6;
            operator delete(v6);
          }
          uint64_t v7 = (void *)*((void *)v4 - 7);
          if (v7)
          {
            *((void *)v4 - 6) = v7;
            operator delete(v7);
          }
          v4 -= 56;
        }
        while (v4 != v3);
        int64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(operations_research::sat::Model *)>::__value_func[abi:ne180100]<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = operator new(0x58uLL);
  void *v4 = &unk_26F0C02F8;
  operations_research::sat::LinearExpression::LinearExpression(v4 + 1, a2);
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v4 + 8, *(void *)(a2 + 56), *(void *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_23CC336B8(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    int64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[2] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC33704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C02F8;
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        int64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C02F8;
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        int64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x58uLL);
  *uint64_t v3 = &unk_26F0C02F8;
  operations_research::sat::LinearExpression::LinearExpression(v3 + 1, v2);
  v3[8] = 0;
  v3[9] = 0;
  v3[10] = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(v3 + 8, *(void *)(a1 + 64), *(void *)(a1 + 72), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3));
  return v3;
}

void sub_23CC33950(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    int64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[2] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CC3399C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C02F8;
  operations_research::sat::LinearExpression::LinearExpression(a2 + 1, a1 + 8);
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  return std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(a2 + 8, *(void *)(a1 + 64), *(void *)(a1 + 72), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3));
}

void sub_23CC33A38(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    int64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[2] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9alloc"
                     "atorIS1_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1"
                                "_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMinOfERKNS0_16LinearExpressionERKNSt3__16vectorIS1_NS4_9allocatorIS1_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        int64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
}

void operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  unint64_t v138 = (void *)a1;
  uint64_t v141 = a2;
  if (*(void *)(a1 + 8) - *(void *)a1 == 4)
  {
    uint64_t v5 = **(void **)(a1 + 24);
    uint64_t v6 = v5 >= 0 ? **(void **)(a1 + 24) : -v5;
    if (v6 == 1)
    {
      int v142 = **(_DWORD **)a1 ^ (v5 != 1);
LABEL_90:
      uint64_t v65 = v138[7];
      uint64_t v66 = v138[8];
      for (uint64_t i = v66; ; v66 = i)
      {
        if (v65 == v66) {
          operator new();
        }
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        int v148 = 0;
        long long v68 = *(const void **)v65;
        uint64_t v67 = *(void *)(v65 + 8);
        int64_t v69 = v67 - *(void *)v65;
        if (v67 == *(void *)v65)
        {
          int v70 = 0;
          long long __p = 0;
          int64_t v144 = 0;
          unint64_t v145 = 0;
          long long v72 = *(uint64_t **)(v65 + 24);
          uint64_t v71 = *(uint64_t **)(v65 + 32);
          if (v72 == v71) {
            goto LABEL_130;
          }
        }
        else
        {
          if (v69 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v146 = operator new(v67 - *(void *)v65);
          uint64_t v147 = (char *)v146;
          int v70 = (char *)v146 + 4 * (v69 >> 2);
          int v148 = v70;
          memcpy(v146, v68, v69);
          uint64_t v147 = v70;
          long long __p = 0;
          int64_t v144 = 0;
          unint64_t v145 = 0;
          long long v72 = *(uint64_t **)(v65 + 24);
          uint64_t v71 = *(uint64_t **)(v65 + 32);
          if (v72 == v71)
          {
LABEL_130:
            int v73 = 0;
            unint64_t v93 = v70;
            goto LABEL_131;
          }
        }
        int v73 = 0;
        do
        {
          while (1)
          {
            uint64_t v74 = *v72;
            if (v73 >= v145) {
              break;
            }
            *(void *)int v73 = v74;
            v73 += 8;
            int64_t v144 = v73;
            if (++v72 == v71) {
              goto LABEL_127;
            }
          }
          unint64_t v75 = (char *)__p;
          int64_t v76 = v73 - (unsigned char *)__p;
          uint64_t v77 = (v73 - (unsigned char *)__p) >> 3;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v145 - (unsigned char *)__p;
          if ((v145 - (unsigned char *)__p) >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          if (v80)
          {
            if (v80 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v81 = operator new(8 * v80);
            int v82 = &v81[8 * v77];
            *int v82 = v74;
            uint64_t v83 = (uint64_t)(v82 + 1);
            if (v73 == v75) {
              goto LABEL_113;
            }
          }
          else
          {
            uint64_t v81 = 0;
            int v82 = (void *)(8 * v77);
            *(void *)(8 * v77) = v74;
            uint64_t v83 = 8 * v77 + 8;
            if (v73 == v75) {
              goto LABEL_113;
            }
          }
          unint64_t v84 = v73 - 8 - v75;
          if (v84 < 0x168)
          {
            int v85 = v73;
            goto LABEL_112;
          }
          if (&v81[v76 - 8 - (v84 & 0xFFFFFFFFFFFFFFF8)] > &v81[v76 - 8])
          {
            int v85 = v73;
            do
            {
LABEL_112:
              uint64_t v86 = *((void *)v85 - 1);
              v85 -= 8;
              *--int v82 = v86;
            }
            while (v85 != v75);
            goto LABEL_113;
          }
          if (&v73[-(v84 & 0xFFFFFFFFFFFFFFF8) - 8] > v73 - 8)
          {
            int v85 = v73;
            goto LABEL_112;
          }
          if ((unint64_t)(v73 - v81 - v76) < 0x20)
          {
            int v85 = v73;
            goto LABEL_112;
          }
          uint64_t v87 = (v84 >> 3) + 1;
          uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          int v85 = &v73[-v88];
          int v82 = (void *)((char *)v82 - v88);
          int64_t v89 = &v81[8 * v77 - 16];
          uint64_t v90 = v73 - 16;
          uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v92 = *(_OWORD *)v90;
            *(v89 - 1) = *((_OWORD *)v90 - 1);
            *int64_t v89 = v92;
            v89 -= 2;
            v90 -= 32;
            v91 -= 4;
          }
          while (v91);
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_112;
          }
LABEL_113:
          long long __p = v82;
          int64_t v144 = (char *)v83;
          unint64_t v145 = &v81[8 * v80];
          if (v75) {
            operator delete(v75);
          }
          int v73 = (char *)v83;
          int64_t v144 = (char *)v83;
          ++v72;
        }
        while (v72 != v71);
LABEL_127:
        int v70 = v147;
        unint64_t v93 = v148;
        if (v147 < v148)
        {
          *(_DWORD *)uint64_t v147 = v142;
          uint64_t v94 = (uint64_t)(v70 + 4);
          goto LABEL_152;
        }
LABEL_131:
        unint64_t v95 = (char *)v146;
        int64_t v96 = v70 - (unsigned char *)v146;
        uint64_t v97 = (v70 - (unsigned char *)v146) >> 2;
        unint64_t v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v99 = v93 - (unsigned char *)v146;
        if (v99 >> 1 > v98) {
          unint64_t v98 = v99 >> 1;
        }
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v100 = v98;
        }
        if (v100)
        {
          if (v100 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v101 = operator new(4 * v100);
          unint64_t v102 = &v101[4 * v97];
          *unint64_t v102 = v142;
          uint64_t v94 = (uint64_t)(v102 + 1);
          if (v70 == v95) {
            goto LABEL_150;
          }
LABEL_142:
          unint64_t v103 = v70 - 4 - v95;
          if (v103 < 0x2C)
          {
            long long v104 = v70;
            goto LABEL_149;
          }
          if ((unint64_t)(v70 - v101 - v96) < 0x20)
          {
            long long v104 = v70;
            goto LABEL_149;
          }
          uint64_t v105 = (v103 >> 2) + 1;
          uint64_t v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
          long long v104 = &v70[-v106];
          unint64_t v102 = (_DWORD *)((char *)v102 - v106);
          uint64_t v107 = &v101[4 * v97 - 16];
          unint64_t v108 = v70 - 16;
          uint64_t v109 = v105 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v110 = *(_OWORD *)v108;
            *(v107 - 1) = *((_OWORD *)v108 - 1);
            *uint64_t v107 = v110;
            v107 -= 2;
            v108 -= 32;
            v109 -= 8;
          }
          while (v109);
          if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_149:
              int v111 = *((_DWORD *)v104 - 1);
              v104 -= 4;
              *--unint64_t v102 = v111;
            }
            while (v104 != v95);
          }
        }
        else
        {
          uint64_t v101 = 0;
          unint64_t v102 = (_DWORD *)(4 * v97);
          *(_DWORD *)(4 * v97) = v142;
          uint64_t v94 = 4 * v97 + 4;
          if (v70 != v95) {
            goto LABEL_142;
          }
        }
LABEL_150:
        uint64_t v146 = v102;
        uint64_t v147 = (char *)v94;
        int v148 = &v101[4 * v100];
        if (v95)
        {
          operator delete(v95);
          int v73 = v144;
        }
LABEL_152:
        uint64_t v147 = (char *)v94;
        if (v73 < v145)
        {
          *(void *)int v73 = -1;
          uint64_t v112 = (uint64_t)(v73 + 8);
          goto LABEL_175;
        }
        uint64_t v113 = (char *)__p;
        int64_t v114 = v73 - (unsigned char *)__p;
        uint64_t v115 = (v73 - (unsigned char *)__p) >> 3;
        unint64_t v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v117 = v145 - (unsigned char *)__p;
        if ((v145 - (unsigned char *)__p) >> 2 > v116) {
          unint64_t v116 = v117 >> 2;
        }
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118)
        {
          if (v118 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v119 = operator new(8 * v118);
          uint64_t v120 = &v119[8 * v115];
          void *v120 = -1;
          uint64_t v112 = (uint64_t)(v120 + 1);
          if (v73 == v113) {
            goto LABEL_173;
          }
LABEL_165:
          unint64_t v121 = v73 - 8 - v113;
          if (v121 < 0x58)
          {
            int64_t v122 = v73;
            goto LABEL_172;
          }
          if ((unint64_t)(v73 - v119 - v114) < 0x20)
          {
            int64_t v122 = v73;
            goto LABEL_172;
          }
          uint64_t v123 = (v121 >> 3) + 1;
          uint64_t v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
          int64_t v122 = &v73[-v124];
          uint64_t v120 = (void *)((char *)v120 - v124);
          uint64_t v125 = &v119[8 * v115 - 16];
          uint64_t v126 = v73 - 16;
          uint64_t v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v128 = *(_OWORD *)v126;
            *(v125 - 1) = *((_OWORD *)v126 - 1);
            _OWORD *v125 = v128;
            v125 -= 2;
            v126 -= 32;
            v127 -= 4;
          }
          while (v127);
          if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_172:
              uint64_t v129 = *((void *)v122 - 1);
              v122 -= 8;
              *--uint64_t v120 = v129;
            }
            while (v122 != v113);
          }
        }
        else
        {
          unint64_t v119 = 0;
          uint64_t v120 = (void *)(8 * v115);
          *(void *)(8 * v115) = -1;
          uint64_t v112 = 8 * v115 + 8;
          if (v73 != v113) {
            goto LABEL_165;
          }
        }
LABEL_173:
        long long __p = v120;
        int64_t v144 = (char *)v112;
        unint64_t v145 = &v119[8 * v118];
        if (v113) {
          operator delete(v113);
        }
LABEL_175:
        int64_t v144 = (char *)v112;
        operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&v146, (uint64_t)&__p, -*(void *)(v65 + 48), v150);
        uint64_t v149 = v141;
        if (!v151) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, uint64_t *))(*v151 + 48))(v151, &v149);
        if (v151 == v150)
        {
          (*(void (**)(void *))(v150[0] + 32))(v150);
          long long v130 = (char *)__p;
          if (__p) {
            goto LABEL_180;
          }
        }
        else
        {
          if (v151) {
            (*(void (**)(void))(*v151 + 40))();
          }
          long long v130 = (char *)__p;
          if (__p)
          {
LABEL_180:
            int64_t v144 = v130;
            operator delete(v130);
          }
        }
        if (v146)
        {
          uint64_t v147 = (char *)v146;
          operator delete(v146);
        }
        v65 += 56;
      }
    }
  }
  uint64_t v7 = operations_research::sat::LinExprLowerBound((uint64_t *)a1, v4);
  uint64_t v8 = operations_research::sat::LinExprUpperBound((uint64_t *)a1, v4);
  int v142 = operations_research::sat::IntegerTrail::AddIntegerVariable(v4, v7, v8);
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  int v148 = 0;
  uint64_t v10 = *(const void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int64_t v11 = v9 - *(void *)a1;
  if (v9 == *(void *)a1)
  {
    uint64_t v137 = 0;
    long long __p = 0;
    int64_t v144 = 0;
    unint64_t v145 = 0;
    uint64_t v15 = *(uint64_t **)(a1 + 24);
    uint64_t v14 = *(uint64_t **)(a1 + 32);
    if (v15 != v14)
    {
LABEL_10:
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      BOOL v18 = 0;
      uint64_t v139 = v14;
      while (1)
      {
        while (1)
        {
          uint64_t v20 = *v15;
          if (v16 >= v17) {
            break;
          }
          *(void *)uint64_t v16 = v20;
          v16 += 8;
          uint64_t v19 = v16;
          int64_t v144 = v16;
          if (++v15 == v14) {
            goto LABEL_43;
          }
        }
        uint64_t v21 = (v16 - v18) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v17 - v18) >> 2 > v22) {
          unint64_t v22 = (v17 - v18) >> 2;
        }
        if ((unint64_t)(v17 - v18) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23)
        {
          if (v23 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * v23);
          uint64_t v25 = &v24[8 * v21];
          *(void *)uint64_t v25 = v20;
          uint64_t v19 = v25 + 8;
          if (v16 == v18) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = (char *)(8 * v21);
          *(void *)(8 * v21) = v20;
          uint64_t v19 = (char *)(8 * v21 + 8);
          if (v16 == v18) {
            goto LABEL_27;
          }
        }
        unint64_t v26 = v16 - 8 - v18;
        if (v26 >= 0x168)
        {
          if (&v24[v16 - v18 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v24[v16 - v18 - 8])
          {
            unint64_t v27 = v16;
          }
          else if (&v16[-(v26 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
          {
            unint64_t v27 = v16;
          }
          else if ((unint64_t)(v18 - v24) >= 0x20)
          {
            uint64_t v29 = (v26 >> 3) + 1;
            uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v27 = &v16[-v30];
            v25 -= v30;
            int v31 = &v24[8 * v21 - 16];
            unint64_t v32 = (long long *)(v16 - 16);
            uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v34 = *v32;
              *(v31 - 1) = *(v32 - 1);
              *int v31 = v34;
              v31 -= 2;
              v32 -= 2;
              v33 -= 4;
            }
            while (v33);
            if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_27;
            }
          }
          else
          {
            unint64_t v27 = v16;
          }
        }
        else
        {
          unint64_t v27 = v16;
        }
        do
        {
          uint64_t v28 = *((void *)v27 - 1);
          v27 -= 8;
          *((void *)v25 - 1) = v28;
          v25 -= 8;
        }
        while (v27 != v18);
LABEL_27:
        unint64_t v17 = &v24[8 * v23];
        long long __p = v25;
        unint64_t v145 = v17;
        if (v18) {
          operator delete(v18);
        }
        BOOL v18 = v25;
        uint64_t v14 = v139;
        int64_t v144 = v19;
        ++v15;
        uint64_t v16 = v19;
        if (v15 == v139) {
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v12 = (char *)operator new(v9 - *(void *)a1);
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    uint64_t v146 = v12;
    int v148 = v13;
    memcpy(v12, v10, v11);
    uint64_t v137 = v13;
    uint64_t v147 = v13;
    long long __p = 0;
    int64_t v144 = 0;
    unint64_t v145 = 0;
    uint64_t v15 = (uint64_t *)v138[3];
    uint64_t v14 = (uint64_t *)v138[4];
    if (v15 != v14) {
      goto LABEL_10;
    }
  }
  BOOL v18 = 0;
  unint64_t v17 = 0;
  uint64_t v19 = 0;
LABEL_43:
  unint64_t v35 = (char *)v146;
  uint64_t v36 = v137 - (unsigned char *)v146;
  uint64_t v37 = (v137 - (unsigned char *)v146) >> 2;
  unint64_t v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (v36 >> 1 > v38) {
    unint64_t v38 = v36 >> 1;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v39 = v38;
  }
  if (v39)
  {
    if (v39 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v40 = (char *)operator new(4 * v39);
  }
  else
  {
    unint64_t v40 = 0;
  }
  BOOL v41 = &v40[4 * v37];
  long long v42 = &v40[4 * v39];
  *(_DWORD *)BOOL v41 = v142;
  uint64_t v43 = v41 + 4;
  if (v137 == v35)
  {
    BOOL v46 = v138;
    goto LABEL_61;
  }
  unint64_t v44 = v137 - v35 - 4;
  if (v44 >= 0x1C)
  {
    uint64_t v47 = (v44 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v45 = &v137[-v48];
    v41 -= v48;
    uint64_t v49 = &v40[4 * v37 - 16];
    int v50 = (long long *)(v137 - 16);
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v50;
      *((_OWORD *)v49 - 1) = *(v50 - 1);
      *(_OWORD *)uint64_t v49 = v52;
      v49 -= 32;
      v50 -= 2;
      v51 -= 8;
    }
    while (v51);
    BOOL v46 = v138;
    if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      uint64_t v146 = v41;
      int v148 = v42;
      if (v35) {
        operator delete(v35);
      }
      uint64_t v147 = v43;
      if (v19 < v17)
      {
        *(void *)uint64_t v19 = -1;
        unint64_t v54 = v19 + 8;
        goto LABEL_82;
      }
      uint64_t v55 = (v19 - v18) >> 3;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v17 - v18) >> 2 > v56) {
        unint64_t v56 = (v17 - v18) >> 2;
      }
      if ((unint64_t)(v17 - v18) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v56;
      }
      if (v57)
      {
        if (v57 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v58 = operator new(8 * v57);
      }
      else
      {
        char v58 = 0;
      }
      uint64_t v59 = &v58[8 * v55];
      int v60 = &v58[8 * v57];
      *(void *)uint64_t v59 = -1;
      unint64_t v54 = v59 + 8;
      if (v19 == v18)
      {
        BOOL v46 = v138;
        long long __p = v59;
        unint64_t v145 = v60;
        if (!v18)
        {
LABEL_82:
          int64_t v144 = v54;
          operations_research::sat::FixedWeightedSum<std::vector<long long>>((uint64_t)&v146, (uint64_t)&__p, -v46[6], (uint64_t)v152);
          uint64_t v149 = v141;
          if (!v153) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *, uint64_t *))(*v153 + 48))(v153, &v149);
          if (v153 == v152)
          {
            (*(void (**)(void *))(v152[0] + 32))(v152);
            int v64 = (char *)__p;
            if (!__p)
            {
LABEL_88:
              if (v146)
              {
                uint64_t v147 = (char *)v146;
                operator delete(v146);
              }
              goto LABEL_90;
            }
          }
          else
          {
            if (v153) {
              (*(void (**)(void))(*v153 + 40))();
            }
            int v64 = (char *)__p;
            if (!__p) {
              goto LABEL_88;
            }
          }
          int64_t v144 = v64;
          operator delete(v64);
          goto LABEL_88;
        }
LABEL_81:
        operator delete(v18);
        goto LABEL_82;
      }
      unint64_t v61 = v19 - v18 - 8;
      if (v61 >= 0x58 && (unint64_t)(v18 - v58) >= 0x20)
      {
        uint64_t v131 = (v61 >> 3) + 1;
        uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v62 = &v19[-v132];
        v59 -= v132;
        uint64_t v133 = &v58[8 * v55 - 16];
        uint64_t v134 = (long long *)(v19 - 16);
        uint64_t v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v136 = *v134;
          *(v133 - 1) = *(v134 - 1);
          *uint64_t v133 = v136;
          v133 -= 2;
          v134 -= 2;
          v135 -= 4;
        }
        while (v135);
        BOOL v46 = v138;
        if (v131 == (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_80:
          long long __p = v59;
          unint64_t v145 = v60;
          if (!v18) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v62 = v19;
        BOOL v46 = v138;
      }
      do
      {
        uint64_t v63 = *((void *)v62 - 1);
        v62 -= 8;
        *((void *)v59 - 1) = v63;
        v59 -= 8;
      }
      while (v62 != v18);
      goto LABEL_80;
    }
  }
  else
  {
    unint64_t v45 = v137;
    BOOL v46 = v138;
  }
  do
  {
    int v53 = *((_DWORD *)v45 - 1);
    v45 -= 4;
    *((_DWORD *)v41 - 1) = v53;
    v41 -= 4;
  }
  while (v45 != v35);
  goto LABEL_61;
}

void sub_23CC34928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_objecta)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a17) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FixedWeightedSum<std::vector<long long>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v17 = 0;
  BOOL v18 = 0;
  uint64_t v19 = 0;
  uint64_t v8 = *(const void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  int64_t v9 = v7 - *(void *)a1;
  if (v7 != *(void *)a1)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a1);
    int64_t v11 = &v10[4 * (v9 >> 2)];
    unint64_t v17 = v10;
    uint64_t v19 = v11;
    memcpy(v10, v8, v9);
    BOOL v18 = v11;
  }
  long long __p = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  BOOL v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    long long __p = v14;
    unint64_t v22 = v15;
    memcpy(v14, v12, v13);
    uint64_t v21 = v15;
  }
  uint64_t v23 = a3;
  *(void *)(a4 + 24) = 0;
  uint64_t v16 = operator new(0x40uLL);
  *uint64_t v16 = &unk_26F0C0368;
  operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v16 + 1, (uint64_t)&v17);
  *(void *)(a4 + 24) = v16;
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    BOOL v18 = v17;
    operator delete(v17);
  }
}

void sub_23CC34B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_23CC34B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_23CC34B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0368;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C0368;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_26F0C0368;
  operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_23CC34CA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C0368;
  return operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIF"
                     "vPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_"
                                "8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  int64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    int64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unsigned char *v9;
  unsigned char *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  int64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    int64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(void *)(a2 + 48);
  return a1;
}

void sub_23CC34EF4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}